{
    "name": "zia",
    "displayName": "Zscaler Internet Access",
    "description": "A Pulumi package for creating and managing zia cloud resources.",
    "keywords": [
        "pulumi",
        "zia",
        "zscaler",
        "category/cloud"
    ],
    "homepage": "https://www.zscaler.com",
    "license": "MIT",
    "attribution": "This Pulumi package is based on the [`zia` Terraform Provider](https://github.com/zscaler/terraform-provider-zia).",
    "repository": "https://github.com/zscaler/pulumi-zia",
    "logoUrl": "https://raw.githubusercontent.com/zscaler/pulumi-zia/master/assets/zscaler.png",
    "pluginDownloadURL": "github://api.github.com/zscaler",
    "publisher": "Zscaler",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "zscaler.PulumiPackage"
        },
        "go": {
            "importBasePath": "github.com/zscaler/pulumi-zia/sdk/go/zia",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@bdzscaler/pulumi-zia",
            "packageDescription": "A Pulumi package for creating and managing zia cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/zscaler/terraform-provider-zia)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-zia` repo](https://github.com/zscaler/pulumi-zia/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-zia` repo](https://github.com/zscaler/terraform-provider-zia/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "zscaler_pulumi_zia",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/zscaler/terraform-provider-zia)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-zia` repo](https://github.com/zscaler/pulumi-zia/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-zia` repo](https://github.com/zscaler/terraform-provider-zia/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "apiKey": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_API_KEY"
                    ]
                },
                "secret": true
            },
            "apiToken": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_SANDBOX_TOKEN"
                    ]
                },
                "secret": true
            },
            "password": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_PASSWORD"
                    ]
                },
                "secret": true
            },
            "username": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_USERNAME"
                    ]
                }
            },
            "ziaCloud": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_CLOUD"
                    ]
                }
            }
        },
        "defaults": [
            "apiKey",
            "password",
            "username",
            "ziaCloud"
        ]
    },
    "types": {
        "zia:index/AdminUsersAdminScopeEntities:AdminUsersAdminScopeEntities": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/AdminUsersRole:AdminUsersRole": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object"
        },
        "zia:index/DLPDictionariesExactDataMatchDetail:DLPDictionariesExactDataMatchDetail": {
            "properties": {
                "dictionaryEdmMappingId": {
                    "type": "integer",
                    "description": "The unique identifier for the EDM mapping.\n"
                },
                "primaryField": {
                    "type": "integer",
                    "description": "The EDM template's primary field.\n"
                },
                "schemaId": {
                    "type": "integer",
                    "description": "The unique identifier for the EDM template (or schema).\n"
                },
                "secondaryFieldMatchOn": {
                    "type": "string",
                    "description": "The EDM secondary field to match on.\n- `\"MATCHON_NONE\"`\n- `\"MATCHON_ANY_1\"`\n- `\"MATCHON_ANY_2\"`\n- `\"MATCHON_ANY_3\"`\n- `\"MATCHON_ANY_4\"`\n- `\"MATCHON_ANY_5\"`\n- `\"MATCHON_ANY_6\"`\n- `\"MATCHON_ANY_7\"`\n- `\"MATCHON_ANY_8\"`\n- `\"MATCHON_ANY_9\"`\n- `\"MATCHON_ANY_10\"`\n- `\"MATCHON_ANY_11\"`\n- `\"MATCHON_ANY_12\"`\n- `\"MATCHON_ANY_13\"`\n- `\"MATCHON_ANY_14\"`\n- `\"MATCHON_ANY_15\"`\n- `\"MATCHON_ALL\"`\n"
                },
                "secondaryFields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The EDM template's secondary fields.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dictionaryEdmMappingId",
                        "schemaId",
                        "secondaryFields"
                    ]
                }
            }
        },
        "zia:index/DLPDictionariesIdmProfileMatchAccuracy:DLPDictionariesIdmProfileMatchAccuracy": {
            "properties": {
                "adpIdmProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile:DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile"
                    },
                    "description": "The IDM template reference.\n"
                },
                "matchAccuracy": {
                    "type": "string",
                    "description": "The IDM template match accuracy.\n- `\"LOW\"`\n- `\"MEDIUM\"`\n- `\"HEAVY\"`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "adpIdmProfiles",
                        "matchAccuracy"
                    ]
                }
            }
        },
        "zia:index/DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile:DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extensions",
                        "id"
                    ]
                }
            }
        },
        "zia:index/DLPDictionariesPattern:DLPDictionariesPattern": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action applied to a DLP dictionary using patterns. The following values are supported:\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "DLP dictionary pattern\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "pattern"
                    ]
                }
            }
        },
        "zia:index/DLPDictionariesPhrase:DLPDictionariesPhrase": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action applied to a DLP dictionary using patterns. The following values are supported:\n"
                },
                "phrase": {
                    "type": "string",
                    "description": "DLP dictionary phrase\n"
                }
            },
            "type": "object"
        },
        "zia:index/DLPWebRulesAuditor:DLPWebRulesAuditor": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "zia:index/DLPWebRulesDepartments:DLPWebRulesDepartments": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/DLPWebRulesDlpEngines:DLPWebRulesDlpEngines": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/DLPWebRulesExcludedDepartments:DLPWebRulesExcludedDepartments": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/DLPWebRulesExcludedGroups:DLPWebRulesExcludedGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/DLPWebRulesExcludedUsers:DLPWebRulesExcludedUsers": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/DLPWebRulesGroups:DLPWebRulesGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/DLPWebRulesIcapServer:DLPWebRulesIcapServer": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "zia:index/DLPWebRulesLabels:DLPWebRulesLabels": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "zia:index/DLPWebRulesLocationGroups:DLPWebRulesLocationGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/DLPWebRulesLocations:DLPWebRulesLocations": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/DLPWebRulesNotificationTemplate:DLPWebRulesNotificationTemplate": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "zia:index/DLPWebRulesTimeWindows:DLPWebRulesTimeWindows": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/DLPWebRulesUrlCategories:DLPWebRulesUrlCategories": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/DLPWebRulesUsers:DLPWebRulesUsers": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/DLPWebRulesWorkloadGroup:DLPWebRulesWorkloadGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "zia:index/FirewallFilteringNetworkServicesDestTcpPort:FirewallFilteringNetworkServicesDestTcpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "description": "\u003e **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.\n"
                },
                "start": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "zia:index/FirewallFilteringNetworkServicesDestUdpPort:FirewallFilteringNetworkServicesDestUdpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "description": "\u003e **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.\n"
                },
                "start": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "zia:index/FirewallFilteringNetworkServicesSrcTcpPort:FirewallFilteringNetworkServicesSrcTcpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "description": "\u003e **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.\n"
                },
                "start": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "zia:index/FirewallFilteringNetworkServicesSrcUdpPort:FirewallFilteringNetworkServicesSrcUdpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "description": "\u003e **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.\n"
                },
                "start": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "zia:index/FirewallFilteringRuleAppServiceGroups:FirewallFilteringRuleAppServiceGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleAppServices:FirewallFilteringRuleAppServices": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleDepartments:FirewallFilteringRuleDepartments": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleDestIpGroups:FirewallFilteringRuleDestIpGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleDeviceGroups:FirewallFilteringRuleDeviceGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleDevices:FirewallFilteringRuleDevices": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleGroups:FirewallFilteringRuleGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleLabels:FirewallFilteringRuleLabels": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "zia:index/FirewallFilteringRuleLocationGroups:FirewallFilteringRuleLocationGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleLocations:FirewallFilteringRuleLocations": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleNwApplicationGroups:FirewallFilteringRuleNwApplicationGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleNwServiceGroups:FirewallFilteringRuleNwServiceGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleNwServices:FirewallFilteringRuleNwServices": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleSrcIpGroups:FirewallFilteringRuleSrcIpGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleTimeWindows:FirewallFilteringRuleTimeWindows": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleUsers:FirewallFilteringRuleUsers": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/FirewallFilteringRuleWorkloadGroup:FirewallFilteringRuleWorkloadGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n\n* `Other Exported Arguments`\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "zia:index/FirewallFilteringRuleZpaAppSegment:FirewallFilteringRuleZpaAppSegment": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "External ID of the application segment.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n\n* `Other Exported Arguments`\n"
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "name"
            ]
        },
        "zia:index/FirewallFilteringServiceGroupsService:FirewallFilteringServiceGroupsService": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleAppServiceGroups:ForwardingControlRuleAppServiceGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleDepartments:ForwardingControlRuleDepartments": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleDestIpGroups:ForwardingControlRuleDestIpGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleDestIpv6Groups:ForwardingControlRuleDestIpv6Groups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleEcGroups:ForwardingControlRuleEcGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleGroups:ForwardingControlRuleGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleLabels:ForwardingControlRuleLabels": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "zia:index/ForwardingControlRuleLocationGroups:ForwardingControlRuleLocationGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleLocations:ForwardingControlRuleLocations": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleNwApplicationGroups:ForwardingControlRuleNwApplicationGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleNwServiceGroups:ForwardingControlRuleNwServiceGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleNwServices:ForwardingControlRuleNwServices": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleProxyGateway:ForwardingControlRuleProxyGateway": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "zia:index/ForwardingControlRuleSrcIpGroups:ForwardingControlRuleSrcIpGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleSrcIpv6Groups:ForwardingControlRuleSrcIpv6Groups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleUsers:ForwardingControlRuleUsers": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleZpaAppSegment:ForwardingControlRuleZpaAppSegment": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "name"
            ]
        },
        "zia:index/ForwardingControlRuleZpaApplicationSegmentGroups:ForwardingControlRuleZpaApplicationSegmentGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleZpaApplicationSegments:ForwardingControlRuleZpaApplicationSegments": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/ForwardingControlRuleZpaGateway:ForwardingControlRuleZpaGateway": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "zia:index/ForwardingControlZPAGatewayZpaAppSegment:ForwardingControlZPAGatewayZpaAppSegment": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The configured name of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "name"
            ]
        },
        "zia:index/ForwardingControlZPAGatewayZpaServerGroup:ForwardingControlZPAGatewayZpaServerGroup": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The configured name of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "name"
            ]
        },
        "zia:index/LocationManagementVpnCredential:LocationManagementVpnCredential": {
            "properties": {
                "comments": {
                    "type": "string"
                },
                "fqdn": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n"
                },
                "ipAddress": {
                    "type": "string"
                },
                "preSharedKey": {
                    "type": "string",
                    "secret": true
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comments",
                        "fqdn",
                        "id",
                        "ipAddress",
                        "type"
                    ]
                }
            }
        },
        "zia:index/TrafficForwardingGRETunnelPrimaryDestVip:TrafficForwardingGRETunnelPrimaryDestVip": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "description": "Data center information\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifer of the GRE virtual IP address (VIP)\n"
                },
                "privateServiceEdge": {
                    "type": "boolean",
                    "description": "Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge\n"
                },
                "virtualIp": {
                    "type": "string",
                    "description": "GRE cluster virtual IP address (VIP)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenter",
                        "id",
                        "privateServiceEdge",
                        "virtualIp"
                    ]
                }
            }
        },
        "zia:index/TrafficForwardingGRETunnelSecondaryDestVip:TrafficForwardingGRETunnelSecondaryDestVip": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "description": "Data center information\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifer of the GRE virtual IP address (VIP)\n"
                },
                "privateServiceEdge": {
                    "type": "boolean",
                    "description": "Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge\n"
                },
                "virtualIp": {
                    "type": "string",
                    "description": "GRE cluster virtual IP address (VIP)\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenter",
                        "id",
                        "privateServiceEdge",
                        "virtualIp"
                    ]
                }
            }
        },
        "zia:index/URLCategoriesScope:URLCategoriesScope": {
            "properties": {
                "scopeEntities": {
                    "$ref": "#/types/zia:index/URLCategoriesScopeScopeEntities:URLCategoriesScopeScopeEntities",
                    "description": "list of scope IDs\n"
                },
                "scopeGroupMemberEntities": {
                    "$ref": "#/types/zia:index/URLCategoriesScopeScopeGroupMemberEntities:URLCategoriesScopeScopeGroupMemberEntities",
                    "description": "Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "scopeEntities",
                        "scopeGroupMemberEntities"
                    ]
                }
            }
        },
        "zia:index/URLCategoriesScopeScopeEntities:URLCategoriesScopeScopeEntities": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/URLCategoriesScopeScopeGroupMemberEntities:URLCategoriesScopeScopeGroupMemberEntities": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/URLCategoriesUrlKeywordCounts:URLCategoriesUrlKeywordCounts": {
            "properties": {
                "retainParentKeywordCount": {
                    "type": "integer",
                    "description": "Count of total keywords with retain parent category.\n"
                },
                "retainParentUrlCount": {
                    "type": "integer",
                    "description": "Count of URLs with retain parent category.\n"
                },
                "totalKeywordCount": {
                    "type": "integer",
                    "description": "Total keyword count for the category.\n"
                },
                "totalUrlCount": {
                    "type": "integer",
                    "description": "Custom URL count for the category.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "retainParentKeywordCount",
                        "retainParentUrlCount",
                        "totalKeywordCount",
                        "totalUrlCount"
                    ]
                }
            }
        },
        "zia:index/URLFilteringRulesCbiProfile:URLFilteringRulesCbiProfile": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                },
                "url": {
                    "type": "string",
                    "description": "The browser isolation profile URL\n"
                }
            },
            "type": "object"
        },
        "zia:index/URLFilteringRulesDepartments:URLFilteringRulesDepartments": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/URLFilteringRulesDeviceGroups:URLFilteringRulesDeviceGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/URLFilteringRulesDevices:URLFilteringRulesDevices": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/URLFilteringRulesGroups:URLFilteringRulesGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/URLFilteringRulesLabels:URLFilteringRulesLabels": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/URLFilteringRulesLocationGroups:URLFilteringRulesLocationGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/URLFilteringRulesLocations:URLFilteringRulesLocations": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/URLFilteringRulesOverrideGroups:URLFilteringRulesOverrideGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/URLFilteringRulesOverrideUsers:URLFilteringRulesOverrideUsers": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/URLFilteringRulesTimeWindows:URLFilteringRulesTimeWindows": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/URLFilteringRulesUsers:URLFilteringRulesUsers": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/URLFilteringRulesWorkloadGroup:URLFilteringRulesWorkloadGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "zia:index/UserManagementDepartment:UserManagementDepartment": {
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "Additional information about this department\n"
                },
                "deleted": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "idpId": {
                    "type": "integer",
                    "description": "Identity provider (IdP) ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "User name. This appears when choosing users for policies.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comments",
                        "deleted",
                        "idpId",
                        "name"
                    ]
                }
            }
        },
        "zia:index/UserManagementGroups:UserManagementGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:index/getAdminUsersAdminScope:getAdminUsersAdminScope": {
            "properties": {
                "scopeEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getAdminUsersAdminScopeScopeEntity:getAdminUsersAdminScopeScopeEntity"
                    },
                    "description": "(String) Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.\n"
                },
                "scopeGroupMemberEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getAdminUsersAdminScopeScopeGroupMemberEntity:getAdminUsersAdminScopeScopeGroupMemberEntity"
                    },
                    "description": "(Number) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.\n"
                },
                "type": {
                    "type": "string",
                    "description": "(String) The admin scope type. The attribute name is subject to change.\n"
                }
            },
            "type": "object",
            "required": [
                "scopeEntities",
                "scopeGroupMemberEntities",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getAdminUsersAdminScopeScopeEntity:getAdminUsersAdminScopeScopeEntity": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the admin user to be exported.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String)\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getAdminUsersAdminScopeScopeGroupMemberEntity:getAdminUsersAdminScopeScopeGroupMemberEntity": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the admin user to be exported.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String)\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getAdminUsersExecMobileAppToken:getAdminUsersExecMobileAppToken": {
            "properties": {
                "cloud": {
                    "type": "string",
                    "description": "(String)\n"
                },
                "createTime": {
                    "type": "integer",
                    "description": "(Number)\n"
                },
                "deviceId": {
                    "type": "string",
                    "description": "(String)\n"
                },
                "deviceName": {
                    "type": "string",
                    "description": "(String)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String)\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "(Number)\n"
                },
                "token": {
                    "type": "string",
                    "description": "(String)\n"
                },
                "tokenExpiry": {
                    "type": "integer",
                    "description": "(Number)\n"
                },
                "tokenId": {
                    "type": "string",
                    "description": "(String)\n"
                }
            },
            "type": "object",
            "required": [
                "cloud",
                "createTime",
                "deviceId",
                "deviceName",
                "name",
                "orgId",
                "token",
                "tokenExpiry",
                "tokenId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getAdminUsersRole:getAdminUsersRole": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the admin user to be exported.\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String)\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPDictionariesExactDataMatchDetail:getDLPDictionariesExactDataMatchDetail": {
            "properties": {
                "dictionaryEdmMappingId": {
                    "type": "integer",
                    "description": "The unique identifier for the EDM mapping\n"
                },
                "primaryField": {
                    "type": "integer",
                    "description": "The EDM template's primary field.\n"
                },
                "schemaId": {
                    "type": "integer",
                    "description": "The unique identifier for the EDM template (or schema).\n"
                },
                "secondaryFieldMatchOn": {
                    "type": "string",
                    "description": "The EDM secondary field to match on.\n"
                },
                "secondaryFields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "type": "object",
            "required": [
                "dictionaryEdmMappingId",
                "primaryField",
                "schemaId",
                "secondaryFieldMatchOn",
                "secondaryFields"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPDictionariesIdmProfileMatchAccuracy:getDLPDictionariesIdmProfileMatchAccuracy": {
            "properties": {
                "adpIdmProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile:getDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile"
                    },
                    "description": "The action applied to a DLP dictionary using patterns\n"
                },
                "matchAccuracy": {
                    "type": "string",
                    "description": "The IDM template match accuracy.\n"
                }
            },
            "type": "object",
            "required": [
                "adpIdmProfiles",
                "matchAccuracy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile:getDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the DLP dictionary\n"
                },
                "name": {
                    "type": "string",
                    "description": "DLP dictionary name\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPDictionariesPattern:getDLPDictionariesPattern": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(String) The action applied to a DLP dictionary using patterns\n"
                },
                "pattern": {
                    "type": "string",
                    "description": "(String) DLP dictionary pattern\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "pattern"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPDictionariesPhrase:getDLPDictionariesPhrase": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(String) The action applied to a DLP dictionary using patterns\n"
                },
                "phrase": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "action",
                "phrase"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPEDMSchemaCreatedBy:getDLPEDMSchemaCreatedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "The token (i.e., criteria) name.\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPEDMSchemaEdmClient:getDLPEDMSchemaEdmClient": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "The token (i.e., criteria) name.\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPEDMSchemaLastModifiedBy:getDLPEDMSchemaLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "The token (i.e., criteria) name.\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPEDMSchemaSchedule:getDLPEDMSchemaSchedule": {
            "properties": {
                "scheduleDayOfMonths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The day of the month the EDM schema (i.e., EDM template) is scheduled for.\n"
                },
                "scheduleDayOfWeeks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The day of the week the EDM schema (i.e., EDM template) is scheduled for.\n"
                },
                "scheduleDisabled": {
                    "type": "boolean",
                    "description": "If set to true, the schedule for the EDM schema (i.e., EDM template) is temporarily in a disabled state.\n"
                },
                "scheduleTime": {
                    "type": "integer",
                    "description": "The time of the day (in minutes) that the EDM schema (i.e., EDM template) is scheduled for.\n"
                },
                "scheduleType": {
                    "type": "string",
                    "description": "The schedule type for the EDM schema (i.e., EDM template), Monthly, Weekly, Daily, or None.\n"
                }
            },
            "type": "object",
            "required": [
                "scheduleDayOfMonths",
                "scheduleDayOfWeeks",
                "scheduleDisabled",
                "scheduleTime",
                "scheduleType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPEDMSchemaTokenList:getDLPEDMSchemaTokenList": {
            "properties": {
                "colLengthBitmap": {
                    "type": "integer",
                    "description": "The length of the column bitmap in the hashed file.\n"
                },
                "hashFileColumnOrder": {
                    "type": "integer",
                    "description": "The column position for the token in the hashed file, starting from 1.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The token (i.e., criteria) name.\n"
                },
                "originalColumn": {
                    "type": "integer",
                    "description": "The column position for the token in the original CSV file uploaded to the Index Tool, starting from 1.\n"
                },
                "primaryKey": {
                    "type": "boolean",
                    "description": "Indicates whether the token is a primary key.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The token type.\n"
                }
            },
            "type": "object",
            "required": [
                "colLengthBitmap",
                "hashFileColumnOrder",
                "name",
                "originalColumn",
                "primaryKey",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPIDMProfileLiteClientVm:getDLPIDMProfileLiteClientVm": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "The configured name of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPIDMProfileLiteLastModifiedBy:getDLPIDMProfileLiteLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "The configured name of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPIDMProfilesIdmClient:getDLPIDMProfilesIdmClient": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The configured name of the entity\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "The configured name of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPIDMProfilesLastModifiedBy:getDLPIDMProfilesLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The configured name of the entity\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n"
                },
                "name": {
                    "type": "string",
                    "description": "The configured name of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesAuditor:getDLPWebRulesAuditor": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesDepartment:getDLPWebRulesDepartment": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesDlpEngine:getDLPWebRulesDlpEngine": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesExcludedDepartment:getDLPWebRulesExcludedDepartment": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesExcludedGroup:getDLPWebRulesExcludedGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesExcludedUser:getDLPWebRulesExcludedUser": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesGroup:getDLPWebRulesGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesIcapServer:getDLPWebRulesIcapServer": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesLabel:getDLPWebRulesLabel": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesLastModifiedBy:getDLPWebRulesLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesLocation:getDLPWebRulesLocation": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesLocationGroup:getDLPWebRulesLocationGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesNotificationTemplate:getDLPWebRulesNotificationTemplate": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesTimeWindow:getDLPWebRulesTimeWindow": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesUrlCategory:getDLPWebRulesUrlCategory": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesUser:getDLPWebRulesUser": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesWorkloadGroup:getDLPWebRulesWorkloadGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the DLP policy rule.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The description of the workload group\n"
                },
                "expressionJsons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getDLPWebRulesWorkloadGroupExpressionJson:getDLPWebRulesWorkloadGroupExpressionJson"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "lastModifiedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getDLPWebRulesWorkloadGroupLastModifiedBy:getDLPWebRulesWorkloadGroupLastModifiedBy"
                    },
                    "description": "The admin that modified the DLP policy rule last.\n"
                },
                "lastModifiedTime": {
                    "type": "integer",
                    "description": "Timestamp when the DLP policy rule was last modified.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "expression",
                "expressionJsons",
                "id",
                "lastModifiedBies",
                "lastModifiedTime",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesWorkloadGroupExpressionJson:getDLPWebRulesWorkloadGroupExpressionJson": {
            "properties": {
                "expressionContainers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getDLPWebRulesWorkloadGroupExpressionJsonExpressionContainer:getDLPWebRulesWorkloadGroupExpressionJsonExpressionContainer"
                    }
                }
            },
            "type": "object",
            "required": [
                "expressionContainers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesWorkloadGroupExpressionJsonExpressionContainer:getDLPWebRulesWorkloadGroupExpressionJsonExpressionContainer": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "tagContainers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainer:getDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainer"
                    }
                },
                "tagType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "tagContainers",
                "tagType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainer:getDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainer": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTag:getDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTag"
                    }
                }
            },
            "type": "object",
            "required": [
                "operator",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTag:getDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getDLPWebRulesWorkloadGroupLastModifiedBy:getDLPWebRulesWorkloadGroupLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the workload group\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringNetworkServiceGroupsService:getFirewallFilteringNetworkServiceGroupsService": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the ip source group to be exported.\n"
                },
                "isNameL10nTag": {
                    "type": "boolean",
                    "description": "(Bool) - Default: false\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ip source group to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "isNameL10nTag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringNetworkServicesDestTcpPort:getFirewallFilteringNetworkServicesDestTcpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "description": "(Number)\n"
                },
                "start": {
                    "type": "integer",
                    "description": "(Number)\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringNetworkServicesDestUdpPort:getFirewallFilteringNetworkServicesDestUdpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "description": "(Number)\n"
                },
                "start": {
                    "type": "integer",
                    "description": "(Number)\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringNetworkServicesSrcTcpPort:getFirewallFilteringNetworkServicesSrcTcpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "description": "(Number)\n"
                },
                "start": {
                    "type": "integer",
                    "description": "(Number)\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringNetworkServicesSrcUdpPort:getFirewallFilteringNetworkServicesSrcUdpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "description": "(Number)\n"
                },
                "start": {
                    "type": "integer",
                    "description": "(Number)\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleAppService:getFirewallFilteringRuleAppService": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleAppServiceGroup:getFirewallFilteringRuleAppServiceGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleDepartment:getFirewallFilteringRuleDepartment": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleDestIpGroup:getFirewallFilteringRuleDestIpGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleDevice:getFirewallFilteringRuleDevice": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleDeviceGroup:getFirewallFilteringRuleDeviceGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleGroup:getFirewallFilteringRuleGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleLabel:getFirewallFilteringRuleLabel": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleLastModifiedBy:getFirewallFilteringRuleLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleLocation:getFirewallFilteringRuleLocation": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleLocationGroup:getFirewallFilteringRuleLocationGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleNwApplicationGroup:getFirewallFilteringRuleNwApplicationGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleNwService:getFirewallFilteringRuleNwService": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleNwServiceGroup:getFirewallFilteringRuleNwServiceGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleSrcIpGroup:getFirewallFilteringRuleSrcIpGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleTimeWindow:getFirewallFilteringRuleTimeWindow": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleUser:getFirewallFilteringRuleUser": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleWorkloadGroup:getFirewallFilteringRuleWorkloadGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(Optional) Enter additional notes or information. The description cannot exceed 10,240 characters.\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The description of the workload group\n"
                },
                "expressionJsons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getFirewallFilteringRuleWorkloadGroupExpressionJson:getFirewallFilteringRuleWorkloadGroupExpressionJson"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "lastModifiedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getFirewallFilteringRuleWorkloadGroupLastModifiedBy:getFirewallFilteringRuleWorkloadGroupLastModifiedBy"
                    }
                },
                "lastModifiedTime": {
                    "type": "integer",
                    "description": "(Number)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "expression",
                "expressionJsons",
                "id",
                "lastModifiedBies",
                "lastModifiedTime",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleWorkloadGroupExpressionJson:getFirewallFilteringRuleWorkloadGroupExpressionJson": {
            "properties": {
                "expressionContainers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainer:getFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainer"
                    }
                }
            },
            "type": "object",
            "required": [
                "expressionContainers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainer:getFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainer": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "tagContainers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainer:getFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainer"
                    }
                },
                "tagType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "tagContainers",
                "tagType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainer:getFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainer": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerTag:getFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerTag"
                    }
                }
            },
            "type": "object",
            "required": [
                "operator",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerTag:getFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleWorkloadGroupLastModifiedBy:getFirewallFilteringRuleWorkloadGroupLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getFirewallFilteringRuleZpaAppSegment:getFirewallFilteringRuleZpaAppSegment": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "Indicates the external ID. Applicable only when this reference is of an external entity.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleDepartment:getForwardingControlRuleDepartment": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleDestIpGroup:getForwardingControlRuleDestIpGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleDestIpv6Group:getForwardingControlRuleDestIpv6Group": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleDevice:getForwardingControlRuleDevice": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleDeviceGroup:getForwardingControlRuleDeviceGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleEcGroup:getForwardingControlRuleEcGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleGroup:getForwardingControlRuleGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleLabel:getForwardingControlRuleLabel": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleLocation:getForwardingControlRuleLocation": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleLocationGroup:getForwardingControlRuleLocationGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleNwApplicationGroup:getForwardingControlRuleNwApplicationGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleNwService:getForwardingControlRuleNwService": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleNwServiceGroup:getForwardingControlRuleNwServiceGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleProxyGateway:getForwardingControlRuleProxyGateway": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleSrcIpGroup:getForwardingControlRuleSrcIpGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleSrcIpv6Group:getForwardingControlRuleSrcIpv6Group": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleUser:getForwardingControlRuleUser": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleZpaAppSegment:getForwardingControlRuleZpaAppSegment": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "(int) Identifier that uniquely identifies an entity\n"
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleZpaApplicationSegment:getForwardingControlRuleZpaApplicationSegment": {
            "properties": {
                "ddescription": {
                    "type": "string",
                    "description": "Additional information about the Application Segment\n"
                },
                "deleted": {
                    "type": "boolean",
                    "description": "ID of the ZPA tenant where the Application Segment is configured\n"
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                },
                "zpaId": {
                    "type": "integer",
                    "description": "ID of the ZPA tenant where the Application Segment is configured\n"
                }
            },
            "type": "object",
            "required": [
                "ddescription",
                "deleted",
                "id",
                "name",
                "zpaId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleZpaApplicationSegmentGroup:getForwardingControlRuleZpaApplicationSegmentGroup": {
            "properties": {
                "deleted": {
                    "type": "boolean",
                    "description": "Indicates whether the ZPA Application Segment Group has been deleted\n"
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                },
                "zpaAppSegmentsCount": {
                    "type": "integer",
                    "description": "The number of ZPA Application Segments in the group\n"
                },
                "zpaId": {
                    "type": "integer",
                    "description": "Indicates the external ID. Applicable only when this reference is of an external entity.\n"
                }
            },
            "type": "object",
            "required": [
                "deleted",
                "id",
                "name",
                "zpaAppSegmentsCount",
                "zpaId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlRuleZpaGateway:getForwardingControlRuleZpaGateway": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding rule.\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlZPAGatewayLastModifiedBy:getForwardingControlZPAGatewayLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the forwarding control ZPA Gateway resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding control ZPA Gateway to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlZPAGatewayZpaAppSegment:getForwardingControlZPAGatewayZpaAppSegment": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "(string) An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding control ZPA Gateway to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getForwardingControlZPAGatewayZpaServerGroup:getForwardingControlZPAGatewayZpaServerGroup": {
            "properties": {
                "externalId": {
                    "type": "string",
                    "description": "(string) An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the forwarding control ZPA Gateway to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "externalId",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getLocationGroupsDynamicLocationGroupCriteria:getLocationGroupsDynamicLocationGroupCriteria": {
            "properties": {
                "cities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getLocationGroupsDynamicLocationGroupCriteriaCity:getLocationGroupsDynamicLocationGroupCriteriaCity"
                    },
                    "description": "(Block List)\n"
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(List of String) One or more countries from a predefined set\n"
                },
                "enableBandwidthControl": {
                    "type": "boolean",
                    "description": "(Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.\n"
                },
                "enableCaution": {
                    "type": "boolean",
                    "description": "(Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.\n"
                },
                "enableXffForwarding": {
                    "type": "boolean",
                    "description": "(Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.\n"
                },
                "enforceAup": {
                    "type": "boolean",
                    "description": "(Boolean) Enable AUP. When set to true, AUP is enabled for the location.\n"
                },
                "enforceAuthentication": {
                    "type": "boolean",
                    "description": "(Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.\n"
                },
                "enforceFirewallControl": {
                    "type": "boolean",
                    "description": "(Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.\n"
                },
                "managedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getLocationGroupsDynamicLocationGroupCriteriaManagedBy:getLocationGroupsDynamicLocationGroupCriteriaManagedBy"
                    },
                    "description": "(Block List)\n"
                },
                "names": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getLocationGroupsDynamicLocationGroupCriteriaName:getLocationGroupsDynamicLocationGroupCriteriaName"
                    },
                    "description": "Location group name\n"
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(List of String) One or more location profiles from a predefined set\n"
                }
            },
            "type": "object",
            "required": [
                "enableBandwidthControl",
                "enableCaution",
                "enableXffForwarding",
                "enforceAup",
                "enforceAuthentication",
                "enforceFirewallControl",
                "managedBies"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getLocationGroupsDynamicLocationGroupCriteriaCity:getLocationGroupsDynamicLocationGroupCriteriaCity": {
            "properties": {
                "matchString": {
                    "type": "string",
                    "description": "(String) String value to be matched or partially matched\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "(String) Operator that performs match action\n"
                }
            },
            "type": "object"
        },
        "zia:index/getLocationGroupsDynamicLocationGroupCriteriaManagedBy:getLocationGroupsDynamicLocationGroupCriteriaManagedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the location group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Location group name\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getLocationGroupsDynamicLocationGroupCriteriaName:getLocationGroupsDynamicLocationGroupCriteriaName": {
            "properties": {
                "matchString": {
                    "type": "string",
                    "description": "(String) String value to be matched or partially matched\n"
                },
                "matchType": {
                    "type": "string",
                    "description": "(String) Operator that performs match action\n"
                }
            },
            "type": "object"
        },
        "zia:index/getLocationGroupsLastModUser:getLocationGroupsLastModUser": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the location group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Location group name\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getLocationGroupsLocation:getLocationGroupsLocation": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the location group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Location group name\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getLocationManagementVpnCredential:getLocationManagementVpnCredential": {
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "(String) Additional information about this VPN credential.\nAdditional information about this VPN credential.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "(String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the location to be exported.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getLocationManagementVpnCredentialLocation:getLocationManagementVpnCredentialLocation"
                    },
                    "description": "(List of Object)\n"
                },
                "managedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getLocationManagementVpnCredentialManagedBy:getLocationManagementVpnCredentialManagedBy"
                    },
                    "description": "(List of Object)\n"
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "(String) Pre-shared key. This is a required field for `UFQDN` and IP auth type.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "(String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.\n"
                }
            },
            "type": "object",
            "required": [
                "comments",
                "fqdn",
                "id",
                "locations",
                "managedBies",
                "preSharedKey",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getLocationManagementVpnCredentialLocation:getLocationManagementVpnCredentialLocation": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the location to be exported.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the location to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getLocationManagementVpnCredentialManagedBy:getLocationManagementVpnCredentialManagedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the location to be exported.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the location to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getRuleLabelsCreatedBy:getRuleLabelsCreatedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The unique identifer for the device group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule label to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getRuleLabelsLastModifiedBy:getRuleLabelsLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The unique identifer for the device group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule label to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getSandboxReportClassification:getSandboxReportClassification": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "detectedMalware": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "category",
                "detectedMalware",
                "score",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getSandboxReportExploit:getSandboxReportExploit": {
            "properties": {
                "risk": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "signatureSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "risk",
                "signature",
                "signatureSources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getSandboxReportFileProperty:getSandboxReportFileProperty": {
            "properties": {
                "digitalCerificate": {
                    "type": "string"
                },
                "fileSize": {
                    "type": "integer"
                },
                "fileType": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "md5": {
                    "type": "string"
                },
                "rootCa": {
                    "type": "string"
                },
                "sha1": {
                    "type": "string"
                },
                "sha256": {
                    "type": "string"
                },
                "ssdeep": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "digitalCerificate",
                "fileSize",
                "fileType",
                "issuer",
                "md5",
                "rootCa",
                "sha1",
                "sha256",
                "ssdeep"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getSandboxReportNetworking:getSandboxReportNetworking": {
            "properties": {
                "risk": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "signatureSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "risk",
                "signature",
                "signatureSources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getSandboxReportOrigin:getSandboxReportOrigin": {
            "properties": {
                "country": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "risk": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "country",
                "language",
                "risk"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getSandboxReportPersistence:getSandboxReportPersistence": {
            "properties": {
                "risk": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "signatureSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "risk",
                "signature",
                "signatureSources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getSandboxReportSecurityBypass:getSandboxReportSecurityBypass": {
            "properties": {
                "risk": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "signatureSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "risk",
                "signature",
                "signatureSources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getSandboxReportSpyware:getSandboxReportSpyware": {
            "properties": {
                "risk": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "signatureSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "risk",
                "signature",
                "signatureSources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getSandboxReportStealth:getSandboxReportStealth": {
            "properties": {
                "risk": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "signatureSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "risk",
                "signature",
                "signatureSources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getSandboxReportSummary:getSandboxReportSummary": {
            "properties": {
                "category": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "fileType": {
                    "type": "string"
                },
                "startTime": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "category",
                "duration",
                "fileType",
                "startTime",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getSandboxReportSystemSummary:getSandboxReportSystemSummary": {
            "properties": {
                "risk": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "signatureSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "risk",
                "signature",
                "signatureSources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getTrafficForwardingGREInternalIPRangeList:getTrafficForwardingGREInternalIPRangeList": {
            "properties": {
                "endIpAddress": {
                    "type": "string"
                },
                "startIpAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endIpAddress",
                "startIpAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getTrafficForwardingGRETunnelLastModifiedBy:getTrafficForwardingGRETunnelLastModifiedBy": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getTrafficForwardingGRETunnelManagedBy:getTrafficForwardingGRETunnelManagedBy": {
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getTrafficForwardingGRETunnelPrimaryDestVip:getTrafficForwardingGRETunnelPrimaryDestVip": {
            "properties": {
                "city": {
                    "type": "string"
                },
                "countryCode": {
                    "type": "string"
                },
                "datacenter": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "integer"
                },
                "longitude": {
                    "type": "integer"
                },
                "privateServiceEdge": {
                    "type": "boolean"
                },
                "region": {
                    "type": "string"
                },
                "virtualIp": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "city",
                "countryCode",
                "datacenter",
                "id",
                "latitude",
                "longitude",
                "privateServiceEdge",
                "region",
                "virtualIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getTrafficForwardingGRETunnelSecondaryDestVip:getTrafficForwardingGRETunnelSecondaryDestVip": {
            "properties": {
                "city": {
                    "type": "string"
                },
                "countryCode": {
                    "type": "string"
                },
                "datacenter": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "latitude": {
                    "type": "integer"
                },
                "longitude": {
                    "type": "integer"
                },
                "privateServiceEdge": {
                    "type": "boolean"
                },
                "region": {
                    "type": "string"
                },
                "virtualIp": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "city",
                "countryCode",
                "datacenter",
                "id",
                "latitude",
                "longitude",
                "privateServiceEdge",
                "region",
                "virtualIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getTrafficForwardingStaticIPLastModifiedBy:getTrafficForwardingStaticIPLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique identifier for the static IP address\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String) The configured name of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getTrafficForwardingStaticIPManagedBy:getTrafficForwardingStaticIPManagedBy": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The unique identifier for the static IP address\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String) The configured name of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getTrafficForwardingVIPRecommendedListList:getTrafficForwardingVIPRecommendedListList": {
            "properties": {
                "city": {
                    "type": "string"
                },
                "datacenter": {
                    "type": "string",
                    "description": "(String) Data center information\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifer of the GRE virtual IP address (VIP)\n"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "privateServiceEdge": {
                    "type": "boolean",
                    "description": "(Boolean) Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge\n"
                },
                "region": {
                    "type": "string"
                },
                "virtualIp": {
                    "type": "string",
                    "description": "(String) GRE cluster virtual IP address (VIP)\n"
                }
            },
            "type": "object",
            "required": [
                "city",
                "latitude",
                "longitude",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getTrafficForwardingVPNCredentialsLocation:getTrafficForwardingVPNCredentialsLocation": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifer of the GRE virtual IP address (VIP)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String) The configured name of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getTrafficForwardingVPNCredentialsManagedBy:getTrafficForwardingVPNCredentialsManagedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifer of the GRE virtual IP address (VIP)\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String) The configured name of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLCategoriesScope:getURLCategoriesScope": {
            "properties": {
                "scopeEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getURLCategoriesScopeScopeEntity:getURLCategoriesScopeScopeEntity"
                    },
                    "description": "(List of Object)\n"
                },
                "scopeGroupMemberEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getURLCategoriesScopeScopeGroupMemberEntity:getURLCategoriesScopeScopeGroupMemberEntity"
                    },
                    "description": "(List of Object) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.\n"
                },
                "type": {
                    "type": "string",
                    "description": "(String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`\n"
                }
            },
            "type": "object",
            "required": [
                "scopeEntities",
                "scopeGroupMemberEntities",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLCategoriesScopeScopeEntity:getURLCategoriesScopeScopeEntity": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL category\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String) The configured name of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLCategoriesScopeScopeGroupMemberEntity:getURLCategoriesScopeScopeGroupMemberEntity": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL category\n"
                },
                "name": {
                    "type": "string",
                    "description": "(String) The configured name of the entity\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLCategoriesUrlKeywordCount:getURLCategoriesUrlKeywordCount": {
            "properties": {
                "retainParentKeywordCount": {
                    "type": "integer",
                    "description": "(Number) Count of total keywords with retain parent category.\n"
                },
                "retainParentUrlCount": {
                    "type": "integer",
                    "description": "(Number) Count of URLs with retain parent category.\n"
                },
                "totalKeywordCount": {
                    "type": "integer",
                    "description": "(Number) Total keyword count for the category.\n"
                },
                "totalUrlCount": {
                    "type": "integer",
                    "description": "(Number) Custom URL count for the category.\n"
                }
            },
            "type": "object",
            "required": [
                "retainParentKeywordCount",
                "retainParentUrlCount",
                "totalKeywordCount",
                "totalUrlCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesCbiProfile:getURLFilteringRulesCbiProfile": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "URL Filtering Rule ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                },
                "url": {
                    "type": "string",
                    "description": "(String) The browser isolation profile URL\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesDepartment:getURLFilteringRulesDepartment": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesDevice:getURLFilteringRulesDevice": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesDeviceGroup:getURLFilteringRulesDeviceGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesGroup:getURLFilteringRulesGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesLabel:getURLFilteringRulesLabel": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesLastModifiedBy:getURLFilteringRulesLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesLocation:getURLFilteringRulesLocation": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesLocationGroup:getURLFilteringRulesLocationGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesOverrideGroup:getURLFilteringRulesOverrideGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesOverrideUser:getURLFilteringRulesOverrideUser": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesTimeWindow:getURLFilteringRulesTimeWindow": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesUser:getURLFilteringRulesUser": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesWorkloadGroup:getURLFilteringRulesWorkloadGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(String) Additional information about the rule\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The description of the workload group\n"
                },
                "expressionJsons": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getURLFilteringRulesWorkloadGroupExpressionJson:getURLFilteringRulesWorkloadGroupExpressionJson"
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "lastModifiedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getURLFilteringRulesWorkloadGroupLastModifiedBy:getURLFilteringRulesWorkloadGroupLastModifiedBy"
                    }
                },
                "lastModifiedTime": {
                    "type": "integer",
                    "description": "(Number) When the rule was last modified\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "description",
                "expression",
                "expressionJsons",
                "id",
                "lastModifiedBies",
                "lastModifiedTime",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesWorkloadGroupExpressionJson:getURLFilteringRulesWorkloadGroupExpressionJson": {
            "properties": {
                "expressionContainers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainer:getURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainer"
                    }
                }
            },
            "type": "object",
            "required": [
                "expressionContainers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainer:getURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainer": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "tagContainers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainer:getURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainer"
                    }
                },
                "tagType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "tagContainers",
                "tagType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainer:getURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainer": {
            "properties": {
                "operator": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTag:getURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTag"
                    }
                }
            },
            "type": "object",
            "required": [
                "operator",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTag:getURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTag": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getURLFilteringRulesWorkloadGroupLastModifiedBy:getURLFilteringRulesWorkloadGroupLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getUserManagementDepartment:getUserManagementDepartment": {
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "(String) Additional information about the group\n"
                },
                "deleted": {
                    "type": "boolean",
                    "description": "(Boolean) default: `false`\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the time window resource.\n"
                },
                "idpId": {
                    "type": "integer",
                    "description": "(Number) Unique identfier for the identity provider (IdP)\n"
                },
                "name": {
                    "type": "string",
                    "description": "User name. This appears when choosing users for policies.\n"
                }
            },
            "type": "object",
            "required": [
                "comments",
                "deleted",
                "id",
                "idpId",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getUserManagementGroup:getUserManagementGroup": {
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "(String) Additional information about the group\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the time window resource.\n"
                },
                "idpId": {
                    "type": "integer",
                    "description": "(Number) Unique identfier for the identity provider (IdP)\n"
                },
                "name": {
                    "type": "string",
                    "description": "User name. This appears when choosing users for policies.\n"
                }
            },
            "type": "object",
            "required": [
                "comments",
                "id",
                "idpId",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getWorkloadGroupsExpressionJson:getWorkloadGroupsExpressionJson": {
            "properties": {
                "expressionContainers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getWorkloadGroupsExpressionJsonExpressionContainer:getWorkloadGroupsExpressionJsonExpressionContainer"
                    },
                    "description": "(List) Contains one or more tag types (and associated tags) combined using logical operators within a workload group\n"
                }
            },
            "type": "object",
            "required": [
                "expressionContainers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getWorkloadGroupsExpressionJsonExpressionContainer:getWorkloadGroupsExpressionJsonExpressionContainer": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "(String) The operator (either AND or OR) used to create logical relationships among tag types. Returned values are: ``AND``, ``OR``, ``OPEN_PARENTHESES``, ``CLOSE_PARENTHESES``\n"
                },
                "tagContainers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getWorkloadGroupsExpressionJsonExpressionContainerTagContainer:getWorkloadGroupsExpressionJsonExpressionContainerTagContainer"
                    },
                    "description": "(String) Contains one or more tags and the logical operator used to combine the tags within a tag type ``CLOSE_PARENTHESES``\n"
                },
                "tagType": {
                    "type": "string",
                    "description": "(String) The tag type selected from a predefined list. Returned values are: ``ANY``, ``VPC``, ``SUBNET``, ``VM``, ``ENI``, ``ATTR``\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "tagContainers",
                "tagType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getWorkloadGroupsExpressionJsonExpressionContainerTagContainer:getWorkloadGroupsExpressionJsonExpressionContainerTagContainer": {
            "properties": {
                "operator": {
                    "type": "string",
                    "description": "(String) The operator (either AND or OR) used to create logical relationships among tag types. Returned values are: ``AND``, ``OR``, ``OPEN_PARENTHESES``, ``CLOSE_PARENTHESES``\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/getWorkloadGroupsExpressionJsonExpressionContainerTagContainerTag:getWorkloadGroupsExpressionJsonExpressionContainerTagContainerTag"
                    },
                    "description": "(String) One or more tags, each consisting of a key-value pair, selected within a tag type. If multiple tags are present within a tag type, they are combined using a logical operator. Note: A maximum of 8 tags can be added to a workload group, irrespective of the number of tag types present.\n"
                }
            },
            "type": "object",
            "required": [
                "operator",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getWorkloadGroupsExpressionJsonExpressionContainerTagContainerTag:getWorkloadGroupsExpressionJsonExpressionContainerTagContainerTag": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "(String) The key component present in the key-value pair contained in a tag\n"
                },
                "value": {
                    "type": "string",
                    "description": "(string) The value component present in the key-value pair contained in a tag\n"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:index/getWorkloadGroupsLastModifiedBy:getWorkloadGroupsLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n"
                },
                "externalId": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "description": "The unique identifer for the workload group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group to be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "externalId",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the zia package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiKey": {
                "type": "string",
                "secret": true
            },
            "apiToken": {
                "type": "string",
                "secret": true
            },
            "password": {
                "type": "string",
                "secret": true
            },
            "username": {
                "type": "string"
            },
            "ziaCloud": {
                "type": "string"
            }
        },
        "inputProperties": {
            "apiKey": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_API_KEY"
                    ]
                },
                "secret": true
            },
            "apiToken": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_SANDBOX_TOKEN"
                    ]
                },
                "secret": true
            },
            "password": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_PASSWORD"
                    ]
                },
                "secret": true
            },
            "username": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_USERNAME"
                    ]
                }
            },
            "ziaCloud": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_CLOUD"
                    ]
                }
            }
        }
    },
    "resources": {
        "zia:index/activationStatus:ActivationStatus": {
            "description": "\n\n## Import\n\nActivation is not an importable resource.\n\n",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "Organization Policy Edit/Update Activation status\n"
                }
            },
            "required": [
                "status"
            ],
            "inputProperties": {
                "status": {
                    "type": "string",
                    "description": "Organization Policy Edit/Update Activation status\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "status"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActivationStatus resources.\n",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Organization Policy Edit/Update Activation status\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zia:index/adminUsers:AdminUsers": {
            "description": "The **zia_admin_users** resource allows the creation and management of ZIA admin user account created in the Zscaler Internet Access cloud or via the API.\n\n## Example Usage\n\n### Organization Scope\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\nimport * as zia from \"@pulumi/zia\";\n\nconst superAdmin = zia.getAdminRoles({\n    name: \"Super Admin\",\n});\n//######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\nconst johnSmith = new zia.AdminUsers(\"johnSmith\", {\n    loginName: \"john.smith@acme.com\",\n    userName: \"John Smith\",\n    email: \"john.smith@acme.com\",\n    isPasswordLoginAllowed: true,\n    password: \"*********************\",\n    isSecurityReportCommEnabled: true,\n    isServiceUpdateCommEnabled: true,\n    isProductUpdateCommEnabled: true,\n    comments: \"Administrator User\",\n    roles: [{\n        id: superAdmin.then(superAdmin =\u003e superAdmin.id),\n    }],\n    adminScopeType: \"ORGANIZATION\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nsuper_admin = zia.get_admin_roles(name=\"Super Admin\")\n######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\njohn_smith = zia.AdminUsers(\"johnSmith\",\n    login_name=\"john.smith@acme.com\",\n    user_name=\"John Smith\",\n    email=\"john.smith@acme.com\",\n    is_password_login_allowed=True,\n    password=\"*********************\",\n    is_security_report_comm_enabled=True,\n    is_service_update_comm_enabled=True,\n    is_product_update_comm_enabled=True,\n    comments=\"Administrator User\",\n    roles=[zia.AdminUsersRoleArgs(\n        id=super_admin.id,\n    )],\n    admin_scope_type=\"ORGANIZATION\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var superAdmin = Zia.GetAdminRoles.Invoke(new()\n    {\n        Name = \"Super Admin\",\n    });\n\n    //######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n    var johnSmith = new Zia.AdminUsers(\"johnSmith\", new()\n    {\n        LoginName = \"john.smith@acme.com\",\n        UserName = \"John Smith\",\n        Email = \"john.smith@acme.com\",\n        IsPasswordLoginAllowed = true,\n        Password = \"*********************\",\n        IsSecurityReportCommEnabled = true,\n        IsServiceUpdateCommEnabled = true,\n        IsProductUpdateCommEnabled = true,\n        Comments = \"Administrator User\",\n        Roles = new[]\n        {\n            new Zia.Inputs.AdminUsersRoleArgs\n            {\n                Id = superAdmin.Apply(getAdminRolesResult =\u003e getAdminRolesResult.Id),\n            },\n        },\n        AdminScopeType = \"ORGANIZATION\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsuperAdmin, err := zia.GetAdminRoles(ctx, \u0026zia.GetAdminRolesArgs{\n\t\t\tName: pulumi.StringRef(\"Super Admin\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n\t\t_, err = zia.NewAdminUsers(ctx, \"johnSmith\", \u0026zia.AdminUsersArgs{\n\t\t\tLoginName:                   pulumi.String(\"john.smith@acme.com\"),\n\t\t\tUserName:                    pulumi.String(\"John Smith\"),\n\t\t\tEmail:                       pulumi.String(\"john.smith@acme.com\"),\n\t\t\tIsPasswordLoginAllowed:      pulumi.Bool(true),\n\t\t\tPassword:                    pulumi.String(\"*********************\"),\n\t\t\tIsSecurityReportCommEnabled: pulumi.Bool(true),\n\t\t\tIsServiceUpdateCommEnabled:  pulumi.Bool(true),\n\t\t\tIsProductUpdateCommEnabled:  pulumi.Bool(true),\n\t\t\tComments:                    pulumi.String(\"Administrator User\"),\n\t\t\tRoles: zia.AdminUsersRoleArray{\n\t\t\t\t\u0026zia.AdminUsersRoleArgs{\n\t\t\t\t\tId: pulumi.Int(superAdmin.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAdminScopeType: pulumi.String(\"ORGANIZATION\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetAdminRolesArgs;\nimport com.pulumi.zia.AdminUsers;\nimport com.pulumi.zia.AdminUsersArgs;\nimport com.pulumi.zia.inputs.AdminUsersRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var superAdmin = ZiaFunctions.getAdminRoles(GetAdminRolesArgs.builder()\n            .name(\"Super Admin\")\n            .build());\n\n        var johnSmith = new AdminUsers(\"johnSmith\", AdminUsersArgs.builder()        \n            .loginName(\"john.smith@acme.com\")\n            .userName(\"John Smith\")\n            .email(\"john.smith@acme.com\")\n            .isPasswordLoginAllowed(true)\n            .password(\"*********************\")\n            .isSecurityReportCommEnabled(true)\n            .isServiceUpdateCommEnabled(true)\n            .isProductUpdateCommEnabled(true)\n            .comments(\"Administrator User\")\n            .roles(AdminUsersRoleArgs.builder()\n                .id(superAdmin.applyValue(getAdminRolesResult -\u003e getAdminRolesResult.id()))\n                .build())\n            .adminScopeType(\"ORGANIZATION\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n  johnSmith:\n    type: zia:AdminUsers\n    properties:\n      loginName: john.smith@acme.com\n      userName: John Smith\n      email: john.smith@acme.com\n      isPasswordLoginAllowed: true\n      password: '*********************'\n      isSecurityReportCommEnabled: true\n      isServiceUpdateCommEnabled: true\n      isProductUpdateCommEnabled: true\n      comments: Administrator User\n      roles:\n        - id: ${superAdmin.id}\n      adminScopeType: ORGANIZATION\nvariables:\n  superAdmin:\n    fn::invoke:\n      Function: zia:getAdminRoles\n      Arguments:\n        name: Super Admin\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Department Scope\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\nimport * as zia from \"@pulumi/zia\";\n\nconst superAdmin = zia.getAdminRoles({\n    name: \"Super Admin\",\n});\nconst engineering = zia.getDepartmentManagement({\n    name: \"Engineering\",\n});\n//######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\nconst johnSmith = new zia.AdminUsers(\"johnSmith\", {\n    loginName: \"john.smith@acme.com\",\n    userName: \"John Smith\",\n    email: \"john.smith@acme.com\",\n    isPasswordLoginAllowed: true,\n    password: \"*********************\",\n    isSecurityReportCommEnabled: true,\n    isServiceUpdateCommEnabled: true,\n    isProductUpdateCommEnabled: true,\n    comments: \"Administrator User\",\n    roles: [{\n        id: superAdmin.then(superAdmin =\u003e superAdmin.id),\n    }],\n    adminScopeType: \"DEPARTMENT\",\n    adminScopeEntities: {\n        ids: [\n            engineering.then(engineering =\u003e engineering.id),\n            data.zia_department_management.sales.id,\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nsuper_admin = zia.get_admin_roles(name=\"Super Admin\")\nengineering = zia.get_department_management(name=\"Engineering\")\n######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\njohn_smith = zia.AdminUsers(\"johnSmith\",\n    login_name=\"john.smith@acme.com\",\n    user_name=\"John Smith\",\n    email=\"john.smith@acme.com\",\n    is_password_login_allowed=True,\n    password=\"*********************\",\n    is_security_report_comm_enabled=True,\n    is_service_update_comm_enabled=True,\n    is_product_update_comm_enabled=True,\n    comments=\"Administrator User\",\n    roles=[zia.AdminUsersRoleArgs(\n        id=super_admin.id,\n    )],\n    admin_scope_type=\"DEPARTMENT\",\n    admin_scope_entities=zia.AdminUsersAdminScopeEntitiesArgs(\n        ids=[\n            engineering.id,\n            data[\"zia_department_management\"][\"sales\"][\"id\"],\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var superAdmin = Zia.GetAdminRoles.Invoke(new()\n    {\n        Name = \"Super Admin\",\n    });\n\n    var engineering = Zia.GetDepartmentManagement.Invoke(new()\n    {\n        Name = \"Engineering\",\n    });\n\n    //######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n    var johnSmith = new Zia.AdminUsers(\"johnSmith\", new()\n    {\n        LoginName = \"john.smith@acme.com\",\n        UserName = \"John Smith\",\n        Email = \"john.smith@acme.com\",\n        IsPasswordLoginAllowed = true,\n        Password = \"*********************\",\n        IsSecurityReportCommEnabled = true,\n        IsServiceUpdateCommEnabled = true,\n        IsProductUpdateCommEnabled = true,\n        Comments = \"Administrator User\",\n        Roles = new[]\n        {\n            new Zia.Inputs.AdminUsersRoleArgs\n            {\n                Id = superAdmin.Apply(getAdminRolesResult =\u003e getAdminRolesResult.Id),\n            },\n        },\n        AdminScopeType = \"DEPARTMENT\",\n        AdminScopeEntities = new Zia.Inputs.AdminUsersAdminScopeEntitiesArgs\n        {\n            Ids = new[]\n            {\n                engineering.Apply(getDepartmentManagementResult =\u003e getDepartmentManagementResult.Id),\n                data.Zia_department_management.Sales.Id,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsuperAdmin, err := zia.GetAdminRoles(ctx, \u0026zia.GetAdminRolesArgs{\n\t\t\tName: pulumi.StringRef(\"Super Admin\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tengineering, err := zia.GetDepartmentManagement(ctx, \u0026zia.GetDepartmentManagementArgs{\n\t\t\tName: pulumi.StringRef(\"Engineering\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n\t\t_, err = zia.NewAdminUsers(ctx, \"johnSmith\", \u0026zia.AdminUsersArgs{\n\t\t\tLoginName:                   pulumi.String(\"john.smith@acme.com\"),\n\t\t\tUserName:                    pulumi.String(\"John Smith\"),\n\t\t\tEmail:                       pulumi.String(\"john.smith@acme.com\"),\n\t\t\tIsPasswordLoginAllowed:      pulumi.Bool(true),\n\t\t\tPassword:                    pulumi.String(\"*********************\"),\n\t\t\tIsSecurityReportCommEnabled: pulumi.Bool(true),\n\t\t\tIsServiceUpdateCommEnabled:  pulumi.Bool(true),\n\t\t\tIsProductUpdateCommEnabled:  pulumi.Bool(true),\n\t\t\tComments:                    pulumi.String(\"Administrator User\"),\n\t\t\tRoles: zia.AdminUsersRoleArray{\n\t\t\t\t\u0026zia.AdminUsersRoleArgs{\n\t\t\t\t\tId: pulumi.Int(superAdmin.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAdminScopeType: pulumi.String(\"DEPARTMENT\"),\n\t\t\tAdminScopeEntities: \u0026zia.AdminUsersAdminScopeEntitiesArgs{\n\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\tpulumi.Int(engineering.Id),\n\t\t\t\t\tdata.Zia_department_management.Sales.Id,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetAdminRolesArgs;\nimport com.pulumi.zia.inputs.GetDepartmentManagementArgs;\nimport com.pulumi.zia.AdminUsers;\nimport com.pulumi.zia.AdminUsersArgs;\nimport com.pulumi.zia.inputs.AdminUsersRoleArgs;\nimport com.pulumi.zia.inputs.AdminUsersAdminScopeEntitiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var superAdmin = ZiaFunctions.getAdminRoles(GetAdminRolesArgs.builder()\n            .name(\"Super Admin\")\n            .build());\n\n        final var engineering = ZiaFunctions.getDepartmentManagement(GetDepartmentManagementArgs.builder()\n            .name(\"Engineering\")\n            .build());\n\n        var johnSmith = new AdminUsers(\"johnSmith\", AdminUsersArgs.builder()        \n            .loginName(\"john.smith@acme.com\")\n            .userName(\"John Smith\")\n            .email(\"john.smith@acme.com\")\n            .isPasswordLoginAllowed(true)\n            .password(\"*********************\")\n            .isSecurityReportCommEnabled(true)\n            .isServiceUpdateCommEnabled(true)\n            .isProductUpdateCommEnabled(true)\n            .comments(\"Administrator User\")\n            .roles(AdminUsersRoleArgs.builder()\n                .id(superAdmin.applyValue(getAdminRolesResult -\u003e getAdminRolesResult.id()))\n                .build())\n            .adminScopeType(\"DEPARTMENT\")\n            .adminScopeEntities(AdminUsersAdminScopeEntitiesArgs.builder()\n                .ids(                \n                    engineering.applyValue(getDepartmentManagementResult -\u003e getDepartmentManagementResult.id()),\n                    data.zia_department_management().sales().id())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n  johnSmith:\n    type: zia:AdminUsers\n    properties:\n      loginName: john.smith@acme.com\n      userName: John Smith\n      email: john.smith@acme.com\n      isPasswordLoginAllowed: true\n      password: '*********************'\n      isSecurityReportCommEnabled: true\n      isServiceUpdateCommEnabled: true\n      isProductUpdateCommEnabled: true\n      comments: Administrator User\n      roles:\n        - id: ${superAdmin.id}\n      adminScopeType: DEPARTMENT\n      adminScopeEntities:\n        ids:\n          - ${engineering.id}\n          - ${data.zia_department_management.sales.id}\nvariables:\n  superAdmin:\n    fn::invoke:\n      Function: zia:getAdminRoles\n      Arguments:\n        name: Super Admin\n  engineering:\n    fn::invoke:\n      Function: zia:getDepartmentManagement\n      Arguments:\n        name: Engineering\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Location Scope\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\nimport * as zia from \"@pulumi/zia\";\n\nconst superAdmin = zia.getAdminRoles({\n    name: \"Super Admin\",\n});\nconst auSydneyBranch01 = zia.getLocationManagement({\n    name: \"AU - Sydney - Branch01\",\n});\n//######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\nconst johnSmith = new zia.AdminUsers(\"johnSmith\", {\n    loginName: \"john.smith@acme.com\",\n    userName: \"John Smith\",\n    email: \"john.smith@acme.com\",\n    isPasswordLoginAllowed: true,\n    password: \"*********************\",\n    isSecurityReportCommEnabled: true,\n    isServiceUpdateCommEnabled: true,\n    isProductUpdateCommEnabled: true,\n    comments: \"Administrator User\",\n    roles: [{\n        id: superAdmin.then(superAdmin =\u003e superAdmin.id),\n    }],\n    adminScopeType: \"LOCATION\",\n    adminScopeEntities: {\n        ids: [auSydneyBranch01.then(auSydneyBranch01 =\u003e auSydneyBranch01.id)],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nsuper_admin = zia.get_admin_roles(name=\"Super Admin\")\nau_sydney_branch01 = zia.get_location_management(name=\"AU - Sydney - Branch01\")\n######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\njohn_smith = zia.AdminUsers(\"johnSmith\",\n    login_name=\"john.smith@acme.com\",\n    user_name=\"John Smith\",\n    email=\"john.smith@acme.com\",\n    is_password_login_allowed=True,\n    password=\"*********************\",\n    is_security_report_comm_enabled=True,\n    is_service_update_comm_enabled=True,\n    is_product_update_comm_enabled=True,\n    comments=\"Administrator User\",\n    roles=[zia.AdminUsersRoleArgs(\n        id=super_admin.id,\n    )],\n    admin_scope_type=\"LOCATION\",\n    admin_scope_entities=zia.AdminUsersAdminScopeEntitiesArgs(\n        ids=[au_sydney_branch01.id],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var superAdmin = Zia.GetAdminRoles.Invoke(new()\n    {\n        Name = \"Super Admin\",\n    });\n\n    var auSydneyBranch01 = Zia.GetLocationManagement.Invoke(new()\n    {\n        Name = \"AU - Sydney - Branch01\",\n    });\n\n    //######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n    var johnSmith = new Zia.AdminUsers(\"johnSmith\", new()\n    {\n        LoginName = \"john.smith@acme.com\",\n        UserName = \"John Smith\",\n        Email = \"john.smith@acme.com\",\n        IsPasswordLoginAllowed = true,\n        Password = \"*********************\",\n        IsSecurityReportCommEnabled = true,\n        IsServiceUpdateCommEnabled = true,\n        IsProductUpdateCommEnabled = true,\n        Comments = \"Administrator User\",\n        Roles = new[]\n        {\n            new Zia.Inputs.AdminUsersRoleArgs\n            {\n                Id = superAdmin.Apply(getAdminRolesResult =\u003e getAdminRolesResult.Id),\n            },\n        },\n        AdminScopeType = \"LOCATION\",\n        AdminScopeEntities = new Zia.Inputs.AdminUsersAdminScopeEntitiesArgs\n        {\n            Ids = new[]\n            {\n                auSydneyBranch01.Apply(getLocationManagementResult =\u003e getLocationManagementResult.Id),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsuperAdmin, err := zia.GetAdminRoles(ctx, \u0026zia.GetAdminRolesArgs{\n\t\t\tName: pulumi.StringRef(\"Super Admin\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tauSydneyBranch01, err := zia.LookupLocationManagement(ctx, \u0026zia.LookupLocationManagementArgs{\n\t\t\tName: pulumi.StringRef(\"AU - Sydney - Branch01\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n\t\t_, err = zia.NewAdminUsers(ctx, \"johnSmith\", \u0026zia.AdminUsersArgs{\n\t\t\tLoginName:                   pulumi.String(\"john.smith@acme.com\"),\n\t\t\tUserName:                    pulumi.String(\"John Smith\"),\n\t\t\tEmail:                       pulumi.String(\"john.smith@acme.com\"),\n\t\t\tIsPasswordLoginAllowed:      pulumi.Bool(true),\n\t\t\tPassword:                    pulumi.String(\"*********************\"),\n\t\t\tIsSecurityReportCommEnabled: pulumi.Bool(true),\n\t\t\tIsServiceUpdateCommEnabled:  pulumi.Bool(true),\n\t\t\tIsProductUpdateCommEnabled:  pulumi.Bool(true),\n\t\t\tComments:                    pulumi.String(\"Administrator User\"),\n\t\t\tRoles: zia.AdminUsersRoleArray{\n\t\t\t\t\u0026zia.AdminUsersRoleArgs{\n\t\t\t\t\tId: pulumi.Int(superAdmin.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAdminScopeType: pulumi.String(\"LOCATION\"),\n\t\t\tAdminScopeEntities: \u0026zia.AdminUsersAdminScopeEntitiesArgs{\n\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\tpulumi.Int(auSydneyBranch01.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetAdminRolesArgs;\nimport com.pulumi.zia.inputs.GetLocationManagementArgs;\nimport com.pulumi.zia.AdminUsers;\nimport com.pulumi.zia.AdminUsersArgs;\nimport com.pulumi.zia.inputs.AdminUsersRoleArgs;\nimport com.pulumi.zia.inputs.AdminUsersAdminScopeEntitiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var superAdmin = ZiaFunctions.getAdminRoles(GetAdminRolesArgs.builder()\n            .name(\"Super Admin\")\n            .build());\n\n        final var auSydneyBranch01 = ZiaFunctions.getLocationManagement(GetLocationManagementArgs.builder()\n            .name(\"AU - Sydney - Branch01\")\n            .build());\n\n        var johnSmith = new AdminUsers(\"johnSmith\", AdminUsersArgs.builder()        \n            .loginName(\"john.smith@acme.com\")\n            .userName(\"John Smith\")\n            .email(\"john.smith@acme.com\")\n            .isPasswordLoginAllowed(true)\n            .password(\"*********************\")\n            .isSecurityReportCommEnabled(true)\n            .isServiceUpdateCommEnabled(true)\n            .isProductUpdateCommEnabled(true)\n            .comments(\"Administrator User\")\n            .roles(AdminUsersRoleArgs.builder()\n                .id(superAdmin.applyValue(getAdminRolesResult -\u003e getAdminRolesResult.id()))\n                .build())\n            .adminScopeType(\"LOCATION\")\n            .adminScopeEntities(AdminUsersAdminScopeEntitiesArgs.builder()\n                .ids(auSydneyBranch01.applyValue(getLocationManagementResult -\u003e getLocationManagementResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n  johnSmith:\n    type: zia:AdminUsers\n    properties:\n      loginName: john.smith@acme.com\n      userName: John Smith\n      email: john.smith@acme.com\n      isPasswordLoginAllowed: true\n      password: '*********************'\n      isSecurityReportCommEnabled: true\n      isServiceUpdateCommEnabled: true\n      isProductUpdateCommEnabled: true\n      comments: Administrator User\n      roles:\n        - id: ${superAdmin.id}\n      adminScopeType: LOCATION\n      adminScopeEntities:\n        ids:\n          - ${auSydneyBranch01.id}\nvariables:\n  superAdmin:\n    fn::invoke:\n      Function: zia:getAdminRoles\n      Arguments:\n        name: Super Admin\n  auSydneyBranch01:\n    fn::invoke:\n      Function: zia:getLocationManagement\n      Arguments:\n        name: AU - Sydney - Branch01\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Location Group Scope\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\nimport * as zia from \"@pulumi/zia\";\n\nconst superAdmin = zia.getAdminRoles({\n    name: \"Super Admin\",\n});\nconst corporateUserTrafficGroup = zia.getLocationGroups({\n    name: \"Corporate User Traffic Group\",\n});\n//######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\nconst johnSmith = new zia.AdminUsers(\"johnSmith\", {\n    loginName: \"john.smith@acme.com\",\n    userName: \"John Smith\",\n    email: \"john.smith@acme.com\",\n    isPasswordLoginAllowed: true,\n    password: \"*********************\",\n    isSecurityReportCommEnabled: true,\n    isServiceUpdateCommEnabled: true,\n    isProductUpdateCommEnabled: true,\n    comments: \"Administrator User\",\n    roles: [{\n        id: superAdmin.then(superAdmin =\u003e superAdmin.id),\n    }],\n    adminScopeType: \"LOCATION_GROUP\",\n    adminScopeEntities: {\n        ids: [corporateUserTrafficGroup.then(corporateUserTrafficGroup =\u003e corporateUserTrafficGroup.id)],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nsuper_admin = zia.get_admin_roles(name=\"Super Admin\")\ncorporate_user_traffic_group = zia.get_location_groups(name=\"Corporate User Traffic Group\")\n######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\njohn_smith = zia.AdminUsers(\"johnSmith\",\n    login_name=\"john.smith@acme.com\",\n    user_name=\"John Smith\",\n    email=\"john.smith@acme.com\",\n    is_password_login_allowed=True,\n    password=\"*********************\",\n    is_security_report_comm_enabled=True,\n    is_service_update_comm_enabled=True,\n    is_product_update_comm_enabled=True,\n    comments=\"Administrator User\",\n    roles=[zia.AdminUsersRoleArgs(\n        id=super_admin.id,\n    )],\n    admin_scope_type=\"LOCATION_GROUP\",\n    admin_scope_entities=zia.AdminUsersAdminScopeEntitiesArgs(\n        ids=[corporate_user_traffic_group.id],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var superAdmin = Zia.GetAdminRoles.Invoke(new()\n    {\n        Name = \"Super Admin\",\n    });\n\n    var corporateUserTrafficGroup = Zia.GetLocationGroups.Invoke(new()\n    {\n        Name = \"Corporate User Traffic Group\",\n    });\n\n    //######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n    var johnSmith = new Zia.AdminUsers(\"johnSmith\", new()\n    {\n        LoginName = \"john.smith@acme.com\",\n        UserName = \"John Smith\",\n        Email = \"john.smith@acme.com\",\n        IsPasswordLoginAllowed = true,\n        Password = \"*********************\",\n        IsSecurityReportCommEnabled = true,\n        IsServiceUpdateCommEnabled = true,\n        IsProductUpdateCommEnabled = true,\n        Comments = \"Administrator User\",\n        Roles = new[]\n        {\n            new Zia.Inputs.AdminUsersRoleArgs\n            {\n                Id = superAdmin.Apply(getAdminRolesResult =\u003e getAdminRolesResult.Id),\n            },\n        },\n        AdminScopeType = \"LOCATION_GROUP\",\n        AdminScopeEntities = new Zia.Inputs.AdminUsersAdminScopeEntitiesArgs\n        {\n            Ids = new[]\n            {\n                corporateUserTrafficGroup.Apply(getLocationGroupsResult =\u003e getLocationGroupsResult.Id),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsuperAdmin, err := zia.GetAdminRoles(ctx, \u0026zia.GetAdminRolesArgs{\n\t\t\tName: pulumi.StringRef(\"Super Admin\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcorporateUserTrafficGroup, err := zia.GetLocationGroups(ctx, \u0026zia.GetLocationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"Corporate User Traffic Group\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n\t\t_, err = zia.NewAdminUsers(ctx, \"johnSmith\", \u0026zia.AdminUsersArgs{\n\t\t\tLoginName:                   pulumi.String(\"john.smith@acme.com\"),\n\t\t\tUserName:                    pulumi.String(\"John Smith\"),\n\t\t\tEmail:                       pulumi.String(\"john.smith@acme.com\"),\n\t\t\tIsPasswordLoginAllowed:      pulumi.Bool(true),\n\t\t\tPassword:                    pulumi.String(\"*********************\"),\n\t\t\tIsSecurityReportCommEnabled: pulumi.Bool(true),\n\t\t\tIsServiceUpdateCommEnabled:  pulumi.Bool(true),\n\t\t\tIsProductUpdateCommEnabled:  pulumi.Bool(true),\n\t\t\tComments:                    pulumi.String(\"Administrator User\"),\n\t\t\tRoles: zia.AdminUsersRoleArray{\n\t\t\t\t\u0026zia.AdminUsersRoleArgs{\n\t\t\t\t\tId: pulumi.Int(superAdmin.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAdminScopeType: pulumi.String(\"LOCATION_GROUP\"),\n\t\t\tAdminScopeEntities: \u0026zia.AdminUsersAdminScopeEntitiesArgs{\n\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\tpulumi.Int(corporateUserTrafficGroup.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetAdminRolesArgs;\nimport com.pulumi.zia.inputs.GetLocationGroupsArgs;\nimport com.pulumi.zia.AdminUsers;\nimport com.pulumi.zia.AdminUsersArgs;\nimport com.pulumi.zia.inputs.AdminUsersRoleArgs;\nimport com.pulumi.zia.inputs.AdminUsersAdminScopeEntitiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var superAdmin = ZiaFunctions.getAdminRoles(GetAdminRolesArgs.builder()\n            .name(\"Super Admin\")\n            .build());\n\n        final var corporateUserTrafficGroup = ZiaFunctions.getLocationGroups(GetLocationGroupsArgs.builder()\n            .name(\"Corporate User Traffic Group\")\n            .build());\n\n        var johnSmith = new AdminUsers(\"johnSmith\", AdminUsersArgs.builder()        \n            .loginName(\"john.smith@acme.com\")\n            .userName(\"John Smith\")\n            .email(\"john.smith@acme.com\")\n            .isPasswordLoginAllowed(true)\n            .password(\"*********************\")\n            .isSecurityReportCommEnabled(true)\n            .isServiceUpdateCommEnabled(true)\n            .isProductUpdateCommEnabled(true)\n            .comments(\"Administrator User\")\n            .roles(AdminUsersRoleArgs.builder()\n                .id(superAdmin.applyValue(getAdminRolesResult -\u003e getAdminRolesResult.id()))\n                .build())\n            .adminScopeType(\"LOCATION_GROUP\")\n            .adminScopeEntities(AdminUsersAdminScopeEntitiesArgs.builder()\n                .ids(corporateUserTrafficGroup.applyValue(getLocationGroupsResult -\u003e getLocationGroupsResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n  johnSmith:\n    type: zia:AdminUsers\n    properties:\n      loginName: john.smith@acme.com\n      userName: John Smith\n      email: john.smith@acme.com\n      isPasswordLoginAllowed: true\n      password: '*********************'\n      isSecurityReportCommEnabled: true\n      isServiceUpdateCommEnabled: true\n      isProductUpdateCommEnabled: true\n      comments: Administrator User\n      roles:\n        - id: ${superAdmin.id}\n      adminScopeType: LOCATION_GROUP\n      adminScopeEntities:\n        ids:\n          - ${corporateUserTrafficGroup.id}\nvariables:\n  superAdmin:\n    fn::invoke:\n      Function: zia:getAdminRoles\n      Arguments:\n        name: Super Admin\n  corporateUserTrafficGroup:\n    fn::invoke:\n      Function: zia:getLocationGroups\n      Arguments:\n        name: Corporate User Traffic Group\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_admin_users** can be imported by using `\u003cADMIN ID\u003e` or `\u003cLOGIN NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/adminUsers:AdminUsers example \u003cadmin_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/adminUsers:AdminUsers example \u003clogin_name\u003e\n```\n\n⚠️ **NOTE :**:  This provider do not import the password attribute value during the importing process.\n\n",
            "properties": {
                "adminId": {
                    "type": "integer"
                },
                "adminScopeEntities": {
                    "$ref": "#/types/zia:index/AdminUsersAdminScopeEntities:AdminUsersAdminScopeEntities",
                    "description": "Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.\n"
                },
                "adminScopeType": {
                    "type": "string",
                    "description": "The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`\n"
                },
                "comments": {
                    "type": "string",
                    "description": "Additional information about the admin or auditor.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not the admin account is disabled.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Admin or auditor's email address.\n"
                },
                "isAuditor": {
                    "type": "boolean",
                    "description": "Indicates whether the user is an auditor. This attribute is subject to change.\n"
                },
                "isExecMobileAppEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not Executive Insights App access is enabled for the admin.\n"
                },
                "isNonEditable": {
                    "type": "boolean",
                    "description": "Indicates whether or not the admin can be edited or deleted.\n"
                },
                "isPasswordExpired": {
                    "type": "boolean",
                    "description": "Indicates whether or not an admin's password has expired.\n"
                },
                "isPasswordLoginAllowed": {
                    "type": "boolean",
                    "description": "The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.\n"
                },
                "isProductUpdateCommEnabled": {
                    "type": "boolean",
                    "description": "Communication setting for Product Update.\n"
                },
                "isSecurityReportCommEnabled": {
                    "type": "boolean",
                    "description": "Communication for Security Report is enabled.\n"
                },
                "isServiceUpdateCommEnabled": {
                    "type": "boolean",
                    "description": "Communication setting for Service Update.\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The email address of the admin user to be exported.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The username of the admin user to be exported.\n",
                    "secret": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/AdminUsersRole:AdminUsersRole"
                    },
                    "description": "Role of the admin. This is not required for an auditor.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the admin user to be exported.\n"
                }
            },
            "required": [
                "adminId",
                "adminScopeEntities",
                "adminScopeType",
                "email",
                "loginName",
                "username"
            ],
            "inputProperties": {
                "adminScopeEntities": {
                    "$ref": "#/types/zia:index/AdminUsersAdminScopeEntities:AdminUsersAdminScopeEntities",
                    "description": "Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.\n"
                },
                "adminScopeType": {
                    "type": "string",
                    "description": "The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`\n"
                },
                "comments": {
                    "type": "string",
                    "description": "Additional information about the admin or auditor.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not the admin account is disabled.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Admin or auditor's email address.\n"
                },
                "isAuditor": {
                    "type": "boolean",
                    "description": "Indicates whether the user is an auditor. This attribute is subject to change.\n"
                },
                "isExecMobileAppEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not Executive Insights App access is enabled for the admin.\n"
                },
                "isNonEditable": {
                    "type": "boolean",
                    "description": "Indicates whether or not the admin can be edited or deleted.\n"
                },
                "isPasswordExpired": {
                    "type": "boolean",
                    "description": "Indicates whether or not an admin's password has expired.\n"
                },
                "isPasswordLoginAllowed": {
                    "type": "boolean",
                    "description": "The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.\n"
                },
                "isProductUpdateCommEnabled": {
                    "type": "boolean",
                    "description": "Communication setting for Product Update.\n"
                },
                "isSecurityReportCommEnabled": {
                    "type": "boolean",
                    "description": "Communication for Security Report is enabled.\n"
                },
                "isServiceUpdateCommEnabled": {
                    "type": "boolean",
                    "description": "Communication setting for Service Update.\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The email address of the admin user to be exported.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The username of the admin user to be exported.\n",
                    "secret": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/AdminUsersRole:AdminUsersRole"
                    },
                    "description": "Role of the admin. This is not required for an auditor.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the admin user to be exported.\n"
                }
            },
            "requiredInputs": [
                "email",
                "loginName",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AdminUsers resources.\n",
                "properties": {
                    "adminId": {
                        "type": "integer"
                    },
                    "adminScopeEntities": {
                        "$ref": "#/types/zia:index/AdminUsersAdminScopeEntities:AdminUsersAdminScopeEntities",
                        "description": "Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.\n"
                    },
                    "adminScopeType": {
                        "type": "string",
                        "description": "The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`\n"
                    },
                    "comments": {
                        "type": "string",
                        "description": "Additional information about the admin or auditor.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicates whether or not the admin account is disabled.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Admin or auditor's email address.\n"
                    },
                    "isAuditor": {
                        "type": "boolean",
                        "description": "Indicates whether the user is an auditor. This attribute is subject to change.\n"
                    },
                    "isExecMobileAppEnabled": {
                        "type": "boolean",
                        "description": "Indicates whether or not Executive Insights App access is enabled for the admin.\n"
                    },
                    "isNonEditable": {
                        "type": "boolean",
                        "description": "Indicates whether or not the admin can be edited or deleted.\n"
                    },
                    "isPasswordExpired": {
                        "type": "boolean",
                        "description": "Indicates whether or not an admin's password has expired.\n"
                    },
                    "isPasswordLoginAllowed": {
                        "type": "boolean",
                        "description": "The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.\n"
                    },
                    "isProductUpdateCommEnabled": {
                        "type": "boolean",
                        "description": "Communication setting for Product Update.\n"
                    },
                    "isSecurityReportCommEnabled": {
                        "type": "boolean",
                        "description": "Communication for Security Report is enabled.\n"
                    },
                    "isServiceUpdateCommEnabled": {
                        "type": "boolean",
                        "description": "Communication setting for Service Update.\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The email address of the admin user to be exported.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The username of the admin user to be exported.\n",
                        "secret": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/AdminUsersRole:AdminUsersRole"
                        },
                        "description": "Role of the admin. This is not required for an auditor.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the admin user to be exported.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/authSettingsURLs:AuthSettingsURLs": {
            "description": "The **zia_auth_settings_urls** resource alows you to add or remove a URL from the cookie authentication exempt list in the Zscaler Internet Access cloud or via the API. To learn more see [URL Format Guidelines](https://help.zscaler.com/zia/url-format-guidelines)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// ZIA User Auth Settings Data Source\nconst example = new zia.AuthSettingsURLs(\"example\", {urls: [\n    \".okta.com\",\n    \".oktacdn.com\",\n    \".mtls.oktapreview.com\",\n    \".mtls.okta.com\",\n    \"d3l44rcogcb7iv.cloudfront.net\",\n    \"pac.zdxcloud.net\",\n    \".windowsazure.com\",\n    \".fedoraproject.org\",\n    \"login.windows.net\",\n    \"d32a6ru7mhaq0c.cloudfront.net\",\n    \".kerberos.oktapreview.com\",\n    \".oktapreview.com\",\n    \"login.zdxcloud.net\",\n    \"login.microsoftonline.com\",\n    \"smres.zdxcloud.net\",\n    \".kerberos.okta.com\",\n]});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# ZIA User Auth Settings Data Source\nexample = zia.AuthSettingsURLs(\"example\", urls=[\n    \".okta.com\",\n    \".oktacdn.com\",\n    \".mtls.oktapreview.com\",\n    \".mtls.okta.com\",\n    \"d3l44rcogcb7iv.cloudfront.net\",\n    \"pac.zdxcloud.net\",\n    \".windowsazure.com\",\n    \".fedoraproject.org\",\n    \"login.windows.net\",\n    \"d32a6ru7mhaq0c.cloudfront.net\",\n    \".kerberos.oktapreview.com\",\n    \".oktapreview.com\",\n    \"login.zdxcloud.net\",\n    \"login.microsoftonline.com\",\n    \"smres.zdxcloud.net\",\n    \".kerberos.okta.com\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZIA User Auth Settings Data Source\n    var example = new Zia.AuthSettingsURLs(\"example\", new()\n    {\n        Urls = new[]\n        {\n            \".okta.com\",\n            \".oktacdn.com\",\n            \".mtls.oktapreview.com\",\n            \".mtls.okta.com\",\n            \"d3l44rcogcb7iv.cloudfront.net\",\n            \"pac.zdxcloud.net\",\n            \".windowsazure.com\",\n            \".fedoraproject.org\",\n            \"login.windows.net\",\n            \"d32a6ru7mhaq0c.cloudfront.net\",\n            \".kerberos.oktapreview.com\",\n            \".oktapreview.com\",\n            \"login.zdxcloud.net\",\n            \"login.microsoftonline.com\",\n            \"smres.zdxcloud.net\",\n            \".kerberos.okta.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// ZIA User Auth Settings Data Source\n\t\t_, err := zia.NewAuthSettingsURLs(ctx, \"example\", \u0026zia.AuthSettingsURLsArgs{\n\t\t\tUrls: pulumi.StringArray{\n\t\t\t\tpulumi.String(\".okta.com\"),\n\t\t\t\tpulumi.String(\".oktacdn.com\"),\n\t\t\t\tpulumi.String(\".mtls.oktapreview.com\"),\n\t\t\t\tpulumi.String(\".mtls.okta.com\"),\n\t\t\t\tpulumi.String(\"d3l44rcogcb7iv.cloudfront.net\"),\n\t\t\t\tpulumi.String(\"pac.zdxcloud.net\"),\n\t\t\t\tpulumi.String(\".windowsazure.com\"),\n\t\t\t\tpulumi.String(\".fedoraproject.org\"),\n\t\t\t\tpulumi.String(\"login.windows.net\"),\n\t\t\t\tpulumi.String(\"d32a6ru7mhaq0c.cloudfront.net\"),\n\t\t\t\tpulumi.String(\".kerberos.oktapreview.com\"),\n\t\t\t\tpulumi.String(\".oktapreview.com\"),\n\t\t\t\tpulumi.String(\"login.zdxcloud.net\"),\n\t\t\t\tpulumi.String(\"login.microsoftonline.com\"),\n\t\t\t\tpulumi.String(\"smres.zdxcloud.net\"),\n\t\t\t\tpulumi.String(\".kerberos.okta.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.AuthSettingsURLs;\nimport com.pulumi.zia.AuthSettingsURLsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AuthSettingsURLs(\"example\", AuthSettingsURLsArgs.builder()        \n            .urls(            \n                \".okta.com\",\n                \".oktacdn.com\",\n                \".mtls.oktapreview.com\",\n                \".mtls.okta.com\",\n                \"d3l44rcogcb7iv.cloudfront.net\",\n                \"pac.zdxcloud.net\",\n                \".windowsazure.com\",\n                \".fedoraproject.org\",\n                \"login.windows.net\",\n                \"d32a6ru7mhaq0c.cloudfront.net\",\n                \".kerberos.oktapreview.com\",\n                \".oktapreview.com\",\n                \"login.zdxcloud.net\",\n                \"login.microsoftonline.com\",\n                \"smres.zdxcloud.net\",\n                \".kerberos.okta.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZIA User Auth Settings Data Source\n  example:\n    type: zia:AuthSettingsURLs\n    properties:\n      urls:\n        - .okta.com\n        - .oktacdn.com\n        - .mtls.oktapreview.com\n        - .mtls.okta.com\n        - d3l44rcogcb7iv.cloudfront.net\n        - pac.zdxcloud.net\n        - .windowsazure.com\n        - .fedoraproject.org\n        - login.windows.net\n        - d32a6ru7mhaq0c.cloudfront.net\n        - .kerberos.oktapreview.com\n        - .oktapreview.com\n        - login.zdxcloud.net\n        - login.microsoftonline.com\n        - smres.zdxcloud.net\n        - .kerberos.okta.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_auth_settings_urls** can be imported by using `all_urls` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/authSettingsURLs:AuthSettingsURLs example all_urls\n```\n\n",
            "properties": {
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The email address of the admin user to be exported.\n"
                }
            },
            "required": [
                "urls"
            ],
            "inputProperties": {
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The email address of the admin user to be exported.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthSettingsURLs resources.\n",
                "properties": {
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The email address of the admin user to be exported.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/dLPDictionaries:DLPDictionaries": {
            "description": "The **zia_dlp_dictionaries** resource allows the creation and management of ZIA DLP dictionaries in the Zscaler Internet Access cloud or via the API.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\nconst example = new zia.DLPDictionaries(\"example\", {\n    customPhraseMatchType: \"MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY\",\n    description: \"Your Description\",\n    dictionaryType: \"PATTERNS_AND_PHRASES\",\n    patterns: [{\n        action: \"PATTERN_COUNT_TYPE_UNIQUE\",\n        pattern: \"YourPattern\",\n    }],\n    phrases: [{\n        action: \"PHRASE_COUNT_TYPE_ALL\",\n        phrase: \"YourPhrase\",\n    }],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\nexample = zia.DLPDictionaries(\"example\",\n    custom_phrase_match_type=\"MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY\",\n    description=\"Your Description\",\n    dictionary_type=\"PATTERNS_AND_PHRASES\",\n    patterns=[zia.DLPDictionariesPatternArgs(\n        action=\"PATTERN_COUNT_TYPE_UNIQUE\",\n        pattern=\"YourPattern\",\n    )],\n    phrases=[zia.DLPDictionariesPhraseArgs(\n        action=\"PHRASE_COUNT_TYPE_ALL\",\n        phrase=\"YourPhrase\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Zia.DLPDictionaries(\"example\", new()\n    {\n        CustomPhraseMatchType = \"MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY\",\n        Description = \"Your Description\",\n        DictionaryType = \"PATTERNS_AND_PHRASES\",\n        Patterns = new[]\n        {\n            new Zia.Inputs.DLPDictionariesPatternArgs\n            {\n                Action = \"PATTERN_COUNT_TYPE_UNIQUE\",\n                Pattern = \"YourPattern\",\n            },\n        },\n        Phrases = new[]\n        {\n            new Zia.Inputs.DLPDictionariesPhraseArgs\n            {\n                Action = \"PHRASE_COUNT_TYPE_ALL\",\n                Phrase = \"YourPhrase\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.NewDLPDictionaries(ctx, \"example\", \u0026zia.DLPDictionariesArgs{\n\t\t\tCustomPhraseMatchType: pulumi.String(\"MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY\"),\n\t\t\tDescription:           pulumi.String(\"Your Description\"),\n\t\t\tDictionaryType:        pulumi.String(\"PATTERNS_AND_PHRASES\"),\n\t\t\tPatterns: zia.DLPDictionariesPatternArray{\n\t\t\t\t\u0026zia.DLPDictionariesPatternArgs{\n\t\t\t\t\tAction:  pulumi.String(\"PATTERN_COUNT_TYPE_UNIQUE\"),\n\t\t\t\t\tPattern: pulumi.String(\"YourPattern\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPhrases: zia.DLPDictionariesPhraseArray{\n\t\t\t\t\u0026zia.DLPDictionariesPhraseArgs{\n\t\t\t\t\tAction: pulumi.String(\"PHRASE_COUNT_TYPE_ALL\"),\n\t\t\t\t\tPhrase: pulumi.String(\"YourPhrase\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.DLPDictionaries;\nimport com.pulumi.zia.DLPDictionariesArgs;\nimport com.pulumi.zia.inputs.DLPDictionariesPatternArgs;\nimport com.pulumi.zia.inputs.DLPDictionariesPhraseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DLPDictionaries(\"example\", DLPDictionariesArgs.builder()        \n            .customPhraseMatchType(\"MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY\")\n            .description(\"Your Description\")\n            .dictionaryType(\"PATTERNS_AND_PHRASES\")\n            .patterns(DLPDictionariesPatternArgs.builder()\n                .action(\"PATTERN_COUNT_TYPE_UNIQUE\")\n                .pattern(\"YourPattern\")\n                .build())\n            .phrases(DLPDictionariesPhraseArgs.builder()\n                .action(\"PHRASE_COUNT_TYPE_ALL\")\n                .phrase(\"YourPhrase\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: zia:DLPDictionaries\n    properties:\n      customPhraseMatchType: MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY\n      description: Your Description\n      dictionaryType: PATTERNS_AND_PHRASES\n      patterns:\n        - action: PATTERN_COUNT_TYPE_UNIQUE\n          pattern: YourPattern\n      phrases:\n        - action: PHRASE_COUNT_TYPE_ALL\n          phrase: YourPhrase\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_dlp_dictionaries** can be imported by using `\u003cDICTIONARY ID\u003e` or `\u003cDICTIONARY_NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/dLPDictionaries:DLPDictionaries example \u003cdictionary_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/dLPDictionaries:DLPDictionaries example \u003cdictionary_name\u003e\n```\n\n",
            "properties": {
                "binNumbers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The list of Bank Identification Number (BIN) values that are included or excluded from the Credit Cards dictionary. BIN values can be specified only for Diners Club, Mastercard, RuPay, and Visa cards. Up to 512 BIN values can be configured in a dictionary. Note: This field is applicable only to the predefined Credit Cards dictionary and its clones.\n"
                },
                "confidenceThreshold": {
                    "type": "string",
                    "description": "The DLP confidence threshold. The following values are supported:\n"
                },
                "customPhraseMatchType": {
                    "type": "string",
                    "description": "The DLP custom phrase match type. Supported values are:\n"
                },
                "description": {
                    "type": "string",
                    "description": "The desciption of the DLP dictionary\n"
                },
                "dictTemplateId": {
                    "type": "integer",
                    "description": "ID of the predefined dictionary (original source dictionary) that is used for cloning. This field is applicable only to cloned dictionaries. Only a limited set of identification-based predefined dictionaries (e.g., Credit Cards, Social Security Numbers, National Identification Numbers, etc.) can be cloned. Up to 4 clones can be created from a predefined dictionary.\n"
                },
                "dictionaryId": {
                    "type": "integer"
                },
                "dictionaryType": {
                    "type": "string",
                    "description": "The DLP dictionary type. The following values are supported:\n"
                },
                "exactDataMatchDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/DLPDictionariesExactDataMatchDetail:DLPDictionariesExactDataMatchDetail"
                    },
                    "description": "Exact Data Match (EDM) related information for custom DLP dictionaries.\n"
                },
                "idmProfileMatchAccuracies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/DLPDictionariesIdmProfileMatchAccuracy:DLPDictionariesIdmProfileMatchAccuracy"
                    },
                    "description": "List of Indexed Document Match (IDM) profiles and their corresponding match accuracy for custom DLP dictionaries.\n"
                },
                "ignoreExactMatchIdmDict": {
                    "type": "boolean",
                    "description": "Indicates whether to exclude documents that are a 100%!m(MISSING)atch to already-indexed documents from triggering an Indexed Document Match (IDM) Dictionary.\n"
                },
                "includeBinNumbers": {
                    "type": "boolean",
                    "description": "A true value denotes that the specified Bank Identification Number (BIN) values are included in the Credit Cards dictionary. A false value denotes that the specified BIN values are excluded from the Credit Cards dictionary. Note: This field is applicable only to the predefined Credit Cards dictionary and its clones.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The DLP dictionary's name\n"
                },
                "patterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/DLPDictionariesPattern:DLPDictionariesPattern"
                    },
                    "description": "List containing the patterns used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`\n"
                },
                "phrases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/DLPDictionariesPhrase:DLPDictionariesPhrase"
                    },
                    "description": "List containing the phrases used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`\n"
                },
                "proximity": {
                    "type": "integer",
                    "description": "The DLP dictionary proximity length.\n"
                }
            },
            "required": [
                "customPhraseMatchType",
                "dictionaryId",
                "idmProfileMatchAccuracies",
                "includeBinNumbers",
                "name",
                "patterns"
            ],
            "inputProperties": {
                "binNumbers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The list of Bank Identification Number (BIN) values that are included or excluded from the Credit Cards dictionary. BIN values can be specified only for Diners Club, Mastercard, RuPay, and Visa cards. Up to 512 BIN values can be configured in a dictionary. Note: This field is applicable only to the predefined Credit Cards dictionary and its clones.\n"
                },
                "confidenceThreshold": {
                    "type": "string",
                    "description": "The DLP confidence threshold. The following values are supported:\n"
                },
                "customPhraseMatchType": {
                    "type": "string",
                    "description": "The DLP custom phrase match type. Supported values are:\n"
                },
                "description": {
                    "type": "string",
                    "description": "The desciption of the DLP dictionary\n"
                },
                "dictTemplateId": {
                    "type": "integer",
                    "description": "ID of the predefined dictionary (original source dictionary) that is used for cloning. This field is applicable only to cloned dictionaries. Only a limited set of identification-based predefined dictionaries (e.g., Credit Cards, Social Security Numbers, National Identification Numbers, etc.) can be cloned. Up to 4 clones can be created from a predefined dictionary.\n"
                },
                "dictionaryType": {
                    "type": "string",
                    "description": "The DLP dictionary type. The following values are supported:\n"
                },
                "exactDataMatchDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/DLPDictionariesExactDataMatchDetail:DLPDictionariesExactDataMatchDetail"
                    },
                    "description": "Exact Data Match (EDM) related information for custom DLP dictionaries.\n"
                },
                "idmProfileMatchAccuracies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/DLPDictionariesIdmProfileMatchAccuracy:DLPDictionariesIdmProfileMatchAccuracy"
                    },
                    "description": "List of Indexed Document Match (IDM) profiles and their corresponding match accuracy for custom DLP dictionaries.\n"
                },
                "ignoreExactMatchIdmDict": {
                    "type": "boolean",
                    "description": "Indicates whether to exclude documents that are a 100%!m(MISSING)atch to already-indexed documents from triggering an Indexed Document Match (IDM) Dictionary.\n"
                },
                "includeBinNumbers": {
                    "type": "boolean",
                    "description": "A true value denotes that the specified Bank Identification Number (BIN) values are included in the Credit Cards dictionary. A false value denotes that the specified BIN values are excluded from the Credit Cards dictionary. Note: This field is applicable only to the predefined Credit Cards dictionary and its clones.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The DLP dictionary's name\n"
                },
                "patterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/DLPDictionariesPattern:DLPDictionariesPattern"
                    },
                    "description": "List containing the patterns used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`\n"
                },
                "phrases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/DLPDictionariesPhrase:DLPDictionariesPhrase"
                    },
                    "description": "List containing the phrases used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`\n"
                },
                "proximity": {
                    "type": "integer",
                    "description": "The DLP dictionary proximity length.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DLPDictionaries resources.\n",
                "properties": {
                    "binNumbers": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The list of Bank Identification Number (BIN) values that are included or excluded from the Credit Cards dictionary. BIN values can be specified only for Diners Club, Mastercard, RuPay, and Visa cards. Up to 512 BIN values can be configured in a dictionary. Note: This field is applicable only to the predefined Credit Cards dictionary and its clones.\n"
                    },
                    "confidenceThreshold": {
                        "type": "string",
                        "description": "The DLP confidence threshold. The following values are supported:\n"
                    },
                    "customPhraseMatchType": {
                        "type": "string",
                        "description": "The DLP custom phrase match type. Supported values are:\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The desciption of the DLP dictionary\n"
                    },
                    "dictTemplateId": {
                        "type": "integer",
                        "description": "ID of the predefined dictionary (original source dictionary) that is used for cloning. This field is applicable only to cloned dictionaries. Only a limited set of identification-based predefined dictionaries (e.g., Credit Cards, Social Security Numbers, National Identification Numbers, etc.) can be cloned. Up to 4 clones can be created from a predefined dictionary.\n"
                    },
                    "dictionaryId": {
                        "type": "integer"
                    },
                    "dictionaryType": {
                        "type": "string",
                        "description": "The DLP dictionary type. The following values are supported:\n"
                    },
                    "exactDataMatchDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/DLPDictionariesExactDataMatchDetail:DLPDictionariesExactDataMatchDetail"
                        },
                        "description": "Exact Data Match (EDM) related information for custom DLP dictionaries.\n"
                    },
                    "idmProfileMatchAccuracies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/DLPDictionariesIdmProfileMatchAccuracy:DLPDictionariesIdmProfileMatchAccuracy"
                        },
                        "description": "List of Indexed Document Match (IDM) profiles and their corresponding match accuracy for custom DLP dictionaries.\n"
                    },
                    "ignoreExactMatchIdmDict": {
                        "type": "boolean",
                        "description": "Indicates whether to exclude documents that are a 100%!m(MISSING)atch to already-indexed documents from triggering an Indexed Document Match (IDM) Dictionary.\n"
                    },
                    "includeBinNumbers": {
                        "type": "boolean",
                        "description": "A true value denotes that the specified Bank Identification Number (BIN) values are included in the Credit Cards dictionary. A false value denotes that the specified BIN values are excluded from the Credit Cards dictionary. Note: This field is applicable only to the predefined Credit Cards dictionary and its clones.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The DLP dictionary's name\n"
                    },
                    "patterns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/DLPDictionariesPattern:DLPDictionariesPattern"
                        },
                        "description": "List containing the patterns used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`\n"
                    },
                    "phrases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/DLPDictionariesPhrase:DLPDictionariesPhrase"
                        },
                        "description": "List containing the phrases used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`\n"
                    },
                    "proximity": {
                        "type": "integer",
                        "description": "The DLP dictionary proximity length.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/dLPEngines:DLPEngines": {
            "description": "Use the **zia_dlp_engines** resource allows the creation and management of ZIA DLP Engines in the Zscaler Internet Access cloud or via the API.\n\n⚠️ **WARNING:** \"Before using the new ``zia.DLPEngines`` resource contact [Zscaler Support](https://help.zscaler.com/login-tickets).\" and request the following API methods ``POST``, ``PUT``, and ``DELETE`` to be enabled for your organization.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// Retrieve a DLP Engine by name\nconst _this = new zia.DLPEngines(\"this\", {\n    customDlpEngine: true,\n    description: \"Example\",\n    engineExpression: \"((D63.S \u003e 1))\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# Retrieve a DLP Engine by name\nthis = zia.DLPEngines(\"this\",\n    custom_dlp_engine=True,\n    description=\"Example\",\n    engine_expression=\"((D63.S \u003e 1))\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Retrieve a DLP Engine by name\n    var @this = new Zia.DLPEngines(\"this\", new()\n    {\n        CustomDlpEngine = true,\n        Description = \"Example\",\n        EngineExpression = \"((D63.S \u003e 1))\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Retrieve a DLP Engine by name\n\t\t_, err := zia.NewDLPEngines(ctx, \"this\", \u0026zia.DLPEnginesArgs{\n\t\t\tCustomDlpEngine:  pulumi.Bool(true),\n\t\t\tDescription:      pulumi.String(\"Example\"),\n\t\t\tEngineExpression: pulumi.String(\"((D63.S \u003e 1))\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.DLPEngines;\nimport com.pulumi.zia.DLPEnginesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new DLPEngines(\"this\", DLPEnginesArgs.builder()        \n            .customDlpEngine(true)\n            .description(\"Example\")\n            .engineExpression(\"((D63.S \u003e 1))\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Retrieve a DLP Engine by name\n  this:\n    type: zia:DLPEngines\n    properties:\n      customDlpEngine: true\n      description: Example\n      engineExpression: ((D63.S \u003e 1))\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_dlp_engines** can be imported by using `\u003cENGINE_ID\u003e` or `\u003cENGINE_NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/dLPEngines:DLPEngines example \u003cengine_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/dLPEngines:DLPEngines example \u003cengine_name\u003e\n```\n\n",
            "properties": {
                "customDlpEngine": {
                    "type": "boolean",
                    "description": "Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The DLP engine's description.\n"
                },
                "engineExpression": {
                    "type": "string",
                    "description": "The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.\n"
                },
                "engineId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "The DLP engine name as configured by the admin. This attribute is required in POST and PUT requests for custom DLP engines.\n"
                }
            },
            "required": [
                "engineId",
                "name"
            ],
            "inputProperties": {
                "customDlpEngine": {
                    "type": "boolean",
                    "description": "Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The DLP engine's description.\n"
                },
                "engineExpression": {
                    "type": "string",
                    "description": "The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The DLP engine name as configured by the admin. This attribute is required in POST and PUT requests for custom DLP engines.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DLPEngines resources.\n",
                "properties": {
                    "customDlpEngine": {
                        "type": "boolean",
                        "description": "Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The DLP engine's description.\n"
                    },
                    "engineExpression": {
                        "type": "string",
                        "description": "The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.\n"
                    },
                    "engineId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "The DLP engine name as configured by the admin. This attribute is required in POST and PUT requests for custom DLP engines.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/dLPNotificationTemplates:DLPNotificationTemplates": {
            "description": "The **zia_dlp_notification_templates** resource allows the creation and management of ZIA DLP Notification Templates in the Zscaler Internet Access cloud or via the API.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\nconst example = new zia.DLPNotificationTemplates(\"example\", {\n    subject: `DLP Violation: ${TRANSACTION_ID} ${ENGINES}`,\n    attachContent: true,\n    tlsEnabled: true,\n    htmlMessage: fs.readFileSync(\"./index.html\", \"utf8\"),\n    plainTextMessage: fs.readFileSync(\"./dlp.txt\", \"utf8\"),\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\nexample = zia.DLPNotificationTemplates(\"example\",\n    subject=f\"DLP Violation: {transactio_n__id} {engines}\",\n    attach_content=True,\n    tls_enabled=True,\n    html_message=(lambda path: open(path).read())(\"./index.html\"),\n    plain_text_message=(lambda path: open(path).read())(\"./dlp.txt\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Zia.DLPNotificationTemplates(\"example\", new()\n    {\n        Subject = $\"DLP Violation: {TRANSACTION_ID} {ENGINES}\",\n        AttachContent = true,\n        TlsEnabled = true,\n        HtmlMessage = File.ReadAllText(\"./index.html\"),\n        PlainTextMessage = File.ReadAllText(\"./dlp.txt\"),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := os.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.NewDLPNotificationTemplates(ctx, \"example\", \u0026zia.DLPNotificationTemplatesArgs{\n\t\t\tSubject:          pulumi.String(fmt.Sprintf(\"DLP Violation: %v %v\", TRANSACTION_ID, ENGINES)),\n\t\t\tAttachContent:    pulumi.Bool(true),\n\t\t\tTlsEnabled:       pulumi.Bool(true),\n\t\t\tHtmlMessage:      readFileOrPanic(\"./index.html\"),\n\t\t\tPlainTextMessage: readFileOrPanic(\"./dlp.txt\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.DLPNotificationTemplates;\nimport com.pulumi.zia.DLPNotificationTemplatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DLPNotificationTemplates(\"example\", DLPNotificationTemplatesArgs.builder()        \n            .subject(String.format(\"DLP Violation: %s %s\", TRANSACTION_ID,ENGINES))\n            .attachContent(true)\n            .tlsEnabled(true)\n            .htmlMessage(Files.readString(Paths.get(\"./index.html\")))\n            .plainTextMessage(Files.readString(Paths.get(\"./dlp.txt\")))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: zia:DLPNotificationTemplates\n    properties:\n      subject: 'DLP Violation: ${TRANSACTION_ID} ${ENGINES}'\n      attachContent: true\n      tlsEnabled: true\n      htmlMessage:\n        fn::readFile: ./index.html\n      plainTextMessage:\n        fn::readFile: ./dlp.txt\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_dlp_notification_templates** can be imported by using `\u003cTEMPLATE ID\u003e` or `\u003cTEMPLATE NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/dLPNotificationTemplates:DLPNotificationTemplates example \u003ctemplate_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/dLPNotificationTemplates:DLPNotificationTemplates example \u003ctemplate_name\u003e\n```\n\n",
            "properties": {
                "attachContent": {
                    "type": "boolean",
                    "description": "If set to true, the content that is violation is attached to the DLP notification email.\n"
                },
                "htmlMessage": {
                    "type": "string",
                    "description": "The template for the HTML message body that must be displayed in the DLP notification email.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\n"
                },
                "plainTextMessage": {
                    "type": "string",
                    "description": "The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The Subject line that is displayed within the DLP notification email.\n"
                },
                "templateId": {
                    "type": "integer",
                    "description": "The unique identifier for a DLP notification template\n"
                },
                "tlsEnabled": {
                    "type": "boolean",
                    "description": "If set to true, the content that is violation is attached to the DLP notification email.\n"
                }
            },
            "required": [
                "htmlMessage",
                "name",
                "plainTextMessage",
                "subject",
                "templateId"
            ],
            "inputProperties": {
                "attachContent": {
                    "type": "boolean",
                    "description": "If set to true, the content that is violation is attached to the DLP notification email.\n"
                },
                "htmlMessage": {
                    "type": "string",
                    "description": "The template for the HTML message body that must be displayed in the DLP notification email.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\n"
                },
                "plainTextMessage": {
                    "type": "string",
                    "description": "The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The Subject line that is displayed within the DLP notification email.\n"
                },
                "tlsEnabled": {
                    "type": "boolean",
                    "description": "If set to true, the content that is violation is attached to the DLP notification email.\n"
                }
            },
            "requiredInputs": [
                "htmlMessage",
                "plainTextMessage",
                "subject"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DLPNotificationTemplates resources.\n",
                "properties": {
                    "attachContent": {
                        "type": "boolean",
                        "description": "If set to true, the content that is violation is attached to the DLP notification email.\n"
                    },
                    "htmlMessage": {
                        "type": "string",
                        "description": "The template for the HTML message body that must be displayed in the DLP notification email.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The DLP policy rule name.\n"
                    },
                    "plainTextMessage": {
                        "type": "string",
                        "description": "The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.\n"
                    },
                    "subject": {
                        "type": "string",
                        "description": "The Subject line that is displayed within the DLP notification email.\n"
                    },
                    "templateId": {
                        "type": "integer",
                        "description": "The unique identifier for a DLP notification template\n"
                    },
                    "tlsEnabled": {
                        "type": "boolean",
                        "description": "If set to true, the content that is violation is attached to the DLP notification email.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/dLPWebRules:DLPWebRules": {
            "description": "The **zia_dlp_web_rules** resource allows the creation and management of ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.\n\n⚠️ **WARNING:** Zscaler Internet Access DLP supports a maximum of 127 Web DLP Rules to be created via API.\n\n## Example Usage\n\n### OCR ENABLED\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\nconst test = new zia.DLPWebRules(\"test\", {\n    action: \"ALLOW\",\n    cloudApplications: [\n        \"ZENDESK\",\n        \"LUCKY_ORANGE\",\n        \"MICROSOFT_POWERAPPS\",\n        \"MICROSOFTLIVEMEETING\",\n    ],\n    description: \"Test\",\n    fileTypes: [\n        \"BITMAP\",\n        \"JPEG\",\n        \"PNG\",\n        \"TIFF\",\n    ],\n    matchOnly: false,\n    minSize: 20,\n    ocrEnabled: true,\n    order: 1,\n    protocols: [\n        \"FTP_RULE\",\n        \"HTTPS_RULE\",\n        \"HTTP_RULE\",\n    ],\n    rank: 7,\n    state: \"ENABLED\",\n    withoutContentInspection: false,\n    zscalerIncidentReceiver: true,\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\ntest = zia.DLPWebRules(\"test\",\n    action=\"ALLOW\",\n    cloud_applications=[\n        \"ZENDESK\",\n        \"LUCKY_ORANGE\",\n        \"MICROSOFT_POWERAPPS\",\n        \"MICROSOFTLIVEMEETING\",\n    ],\n    description=\"Test\",\n    file_types=[\n        \"BITMAP\",\n        \"JPEG\",\n        \"PNG\",\n        \"TIFF\",\n    ],\n    match_only=False,\n    min_size=20,\n    ocr_enabled=True,\n    order=1,\n    protocols=[\n        \"FTP_RULE\",\n        \"HTTPS_RULE\",\n        \"HTTP_RULE\",\n    ],\n    rank=7,\n    state=\"ENABLED\",\n    without_content_inspection=False,\n    zscaler_incident_receiver=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Zia.DLPWebRules(\"test\", new()\n    {\n        Action = \"ALLOW\",\n        CloudApplications = new[]\n        {\n            \"ZENDESK\",\n            \"LUCKY_ORANGE\",\n            \"MICROSOFT_POWERAPPS\",\n            \"MICROSOFTLIVEMEETING\",\n        },\n        Description = \"Test\",\n        FileTypes = new[]\n        {\n            \"BITMAP\",\n            \"JPEG\",\n            \"PNG\",\n            \"TIFF\",\n        },\n        MatchOnly = false,\n        MinSize = 20,\n        OcrEnabled = true,\n        Order = 1,\n        Protocols = new[]\n        {\n            \"FTP_RULE\",\n            \"HTTPS_RULE\",\n            \"HTTP_RULE\",\n        },\n        Rank = 7,\n        State = \"ENABLED\",\n        WithoutContentInspection = false,\n        ZscalerIncidentReceiver = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.NewDLPWebRules(ctx, \"test\", \u0026zia.DLPWebRulesArgs{\n\t\t\tAction: pulumi.String(\"ALLOW\"),\n\t\t\tCloudApplications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ZENDESK\"),\n\t\t\t\tpulumi.String(\"LUCKY_ORANGE\"),\n\t\t\t\tpulumi.String(\"MICROSOFT_POWERAPPS\"),\n\t\t\t\tpulumi.String(\"MICROSOFTLIVEMEETING\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Test\"),\n\t\t\tFileTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"BITMAP\"),\n\t\t\t\tpulumi.String(\"JPEG\"),\n\t\t\t\tpulumi.String(\"PNG\"),\n\t\t\t\tpulumi.String(\"TIFF\"),\n\t\t\t},\n\t\t\tMatchOnly:  pulumi.Bool(false),\n\t\t\tMinSize:    pulumi.Int(20),\n\t\t\tOcrEnabled: pulumi.Bool(true),\n\t\t\tOrder:      pulumi.Int(1),\n\t\t\tProtocols: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"FTP_RULE\"),\n\t\t\t\tpulumi.String(\"HTTPS_RULE\"),\n\t\t\t\tpulumi.String(\"HTTP_RULE\"),\n\t\t\t},\n\t\t\tRank:                     pulumi.Int(7),\n\t\t\tState:                    pulumi.String(\"ENABLED\"),\n\t\t\tWithoutContentInspection: pulumi.Bool(false),\n\t\t\tZscalerIncidentReceiver:  pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.DLPWebRules;\nimport com.pulumi.zia.DLPWebRulesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new DLPWebRules(\"test\", DLPWebRulesArgs.builder()        \n            .action(\"ALLOW\")\n            .cloudApplications(            \n                \"ZENDESK\",\n                \"LUCKY_ORANGE\",\n                \"MICROSOFT_POWERAPPS\",\n                \"MICROSOFTLIVEMEETING\")\n            .description(\"Test\")\n            .fileTypes(            \n                \"BITMAP\",\n                \"JPEG\",\n                \"PNG\",\n                \"TIFF\")\n            .matchOnly(false)\n            .minSize(20)\n            .ocrEnabled(true)\n            .order(1)\n            .protocols(            \n                \"FTP_RULE\",\n                \"HTTPS_RULE\",\n                \"HTTP_RULE\")\n            .rank(7)\n            .state(\"ENABLED\")\n            .withoutContentInspection(false)\n            .zscalerIncidentReceiver(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: zia:DLPWebRules\n    properties:\n      action: ALLOW\n      cloudApplications:\n        - ZENDESK\n        - LUCKY_ORANGE\n        - MICROSOFT_POWERAPPS\n        - MICROSOFTLIVEMEETING\n      description: Test\n      fileTypes:\n        - BITMAP\n        - JPEG\n        - PNG\n        - TIFF\n      matchOnly: false\n      minSize: 20\n      ocrEnabled: true\n      order: 1\n      protocols:\n        - FTP_RULE\n        - HTTPS_RULE\n        - HTTP_RULE\n      rank: 7\n      state: ENABLED\n      withoutContentInspection: false\n      zscalerIncidentReceiver: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### \"ALL_OUTBOUND\" File Type\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\nimport * as zia from \"@pulumi/zia\";\n\nconst thisDLPEngines = zia.getDLPEngines({\n    predefinedEngineName: \"EXTERNAL\",\n});\nconst thisDLPWebRules = new zia.DLPWebRules(\"thisDLPWebRules\", {\n    description: \"Example\",\n    action: \"BLOCK\",\n    order: 1,\n    rank: 7,\n    state: \"ENABLED\",\n    protocols: [\n        \"FTP_RULE\",\n        \"HTTPS_RULE\",\n        \"HTTP_RULE\",\n    ],\n    fileTypes: [\"ALL_OUTBOUND\"],\n    zscalerIncidentReceiver: true,\n    withoutContentInspection: false,\n    userRiskScoreLevels: [\n        \"LOW\",\n        \"MEDIUM\",\n        \"HIGH\",\n        \"CRITICAL\",\n    ],\n    severity: \"RULE_SEVERITY_HIGH\",\n    dlpEngines: {\n        ids: [thisDLPEngines.then(thisDLPEngines =\u003e thisDLPEngines.id)],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nthis_dlp_engines = zia.get_dlp_engines(predefined_engine_name=\"EXTERNAL\")\nthis_dlp_web_rules = zia.DLPWebRules(\"thisDLPWebRules\",\n    description=\"Example\",\n    action=\"BLOCK\",\n    order=1,\n    rank=7,\n    state=\"ENABLED\",\n    protocols=[\n        \"FTP_RULE\",\n        \"HTTPS_RULE\",\n        \"HTTP_RULE\",\n    ],\n    file_types=[\"ALL_OUTBOUND\"],\n    zscaler_incident_receiver=True,\n    without_content_inspection=False,\n    user_risk_score_levels=[\n        \"LOW\",\n        \"MEDIUM\",\n        \"HIGH\",\n        \"CRITICAL\",\n    ],\n    severity=\"RULE_SEVERITY_HIGH\",\n    dlp_engines=zia.DLPWebRulesDlpEnginesArgs(\n        ids=[this_dlp_engines.id],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var thisDLPEngines = Zia.GetDLPEngines.Invoke(new()\n    {\n        PredefinedEngineName = \"EXTERNAL\",\n    });\n\n    var thisDLPWebRules = new Zia.DLPWebRules(\"thisDLPWebRules\", new()\n    {\n        Description = \"Example\",\n        Action = \"BLOCK\",\n        Order = 1,\n        Rank = 7,\n        State = \"ENABLED\",\n        Protocols = new[]\n        {\n            \"FTP_RULE\",\n            \"HTTPS_RULE\",\n            \"HTTP_RULE\",\n        },\n        FileTypes = new[]\n        {\n            \"ALL_OUTBOUND\",\n        },\n        ZscalerIncidentReceiver = true,\n        WithoutContentInspection = false,\n        UserRiskScoreLevels = new[]\n        {\n            \"LOW\",\n            \"MEDIUM\",\n            \"HIGH\",\n            \"CRITICAL\",\n        },\n        Severity = \"RULE_SEVERITY_HIGH\",\n        DlpEngines = new Zia.Inputs.DLPWebRulesDlpEnginesArgs\n        {\n            Ids = new[]\n            {\n                thisDLPEngines.Apply(getDLPEnginesResult =\u003e getDLPEnginesResult.Id),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthisDLPEngines, err := zia.LookupDLPEngines(ctx, \u0026zia.LookupDLPEnginesArgs{\n\t\t\tPredefinedEngineName: pulumi.StringRef(\"EXTERNAL\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zia.NewDLPWebRules(ctx, \"thisDLPWebRules\", \u0026zia.DLPWebRulesArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tAction:      pulumi.String(\"BLOCK\"),\n\t\t\tOrder:       pulumi.Int(1),\n\t\t\tRank:        pulumi.Int(7),\n\t\t\tState:       pulumi.String(\"ENABLED\"),\n\t\t\tProtocols: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"FTP_RULE\"),\n\t\t\t\tpulumi.String(\"HTTPS_RULE\"),\n\t\t\t\tpulumi.String(\"HTTP_RULE\"),\n\t\t\t},\n\t\t\tFileTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ALL_OUTBOUND\"),\n\t\t\t},\n\t\t\tZscalerIncidentReceiver:  pulumi.Bool(true),\n\t\t\tWithoutContentInspection: pulumi.Bool(false),\n\t\t\tUserRiskScoreLevels: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"LOW\"),\n\t\t\t\tpulumi.String(\"MEDIUM\"),\n\t\t\t\tpulumi.String(\"HIGH\"),\n\t\t\t\tpulumi.String(\"CRITICAL\"),\n\t\t\t},\n\t\t\tSeverity: pulumi.String(\"RULE_SEVERITY_HIGH\"),\n\t\t\tDlpEngines: \u0026zia.DLPWebRulesDlpEnginesArgs{\n\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\tpulumi.Int(thisDLPEngines.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetDLPEnginesArgs;\nimport com.pulumi.zia.DLPWebRules;\nimport com.pulumi.zia.DLPWebRulesArgs;\nimport com.pulumi.zia.inputs.DLPWebRulesDlpEnginesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var thisDLPEngines = ZiaFunctions.getDLPEngines(GetDLPEnginesArgs.builder()\n            .predefinedEngineName(\"EXTERNAL\")\n            .build());\n\n        var thisDLPWebRules = new DLPWebRules(\"thisDLPWebRules\", DLPWebRulesArgs.builder()        \n            .description(\"Example\")\n            .action(\"BLOCK\")\n            .order(1)\n            .rank(7)\n            .state(\"ENABLED\")\n            .protocols(            \n                \"FTP_RULE\",\n                \"HTTPS_RULE\",\n                \"HTTP_RULE\")\n            .fileTypes(\"ALL_OUTBOUND\")\n            .zscalerIncidentReceiver(true)\n            .withoutContentInspection(false)\n            .userRiskScoreLevels(            \n                \"LOW\",\n                \"MEDIUM\",\n                \"HIGH\",\n                \"CRITICAL\")\n            .severity(\"RULE_SEVERITY_HIGH\")\n            .dlpEngines(DLPWebRulesDlpEnginesArgs.builder()\n                .ids(thisDLPEngines.applyValue(getDLPEnginesResult -\u003e getDLPEnginesResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  thisDLPWebRules:\n    type: zia:DLPWebRules\n    properties:\n      description: Example\n      action: BLOCK\n      order: 1\n      rank: 7\n      state: ENABLED\n      # ocr_enabled              = true\n      protocols:\n        - FTP_RULE\n        - HTTPS_RULE\n        - HTTP_RULE\n      fileTypes:\n        - ALL_OUTBOUND\n      zscalerIncidentReceiver: true\n      withoutContentInspection: false\n      userRiskScoreLevels:\n        - LOW\n        - MEDIUM\n        - HIGH\n        - CRITICAL\n      severity: RULE_SEVERITY_HIGH\n      dlpEngines:\n        ids:\n          - ${thisDLPEngines.id}\nvariables:\n  thisDLPEngines:\n    fn::invoke:\n      Function: zia:getDLPEngines\n      Arguments:\n        predefinedEngineName: EXTERNAL\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_dlp_web_rules** can be imported by using `\u003cRULE ID\u003e` or `\u003cRULE NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/dLPWebRules:DLPWebRules example \u003crule_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/dLPWebRules:DLPWebRules example \u003crule_name\u003e\n```\n\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action taken when traffic matches the DLP policy rule criteria. The supported values are:\n"
                },
                "auditor": {
                    "$ref": "#/types/zia:index/DLPWebRulesAuditor:DLPWebRulesAuditor",
                    "description": "The auditor to which the DLP policy rule must be applied.\n"
                },
                "cloudApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of cloud applications to which the DLP policy rule must be applied.\n"
                },
                "departments": {
                    "$ref": "#/types/zia:index/DLPWebRulesDepartments:DLPWebRulesDepartments",
                    "description": "The name-ID pairs of the departments that are excluded from the DLP policy rule.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the DLP policy rule.\n"
                },
                "dlpDownloadScanEnabled": {
                    "type": "boolean",
                    "description": "Indicates a DLP policy rule without content inspection, when the value is set to true.\n"
                },
                "dlpEngines": {
                    "$ref": "#/types/zia:index/DLPWebRulesDlpEngines:DLPWebRulesDlpEngines",
                    "description": "The list of DLP engines to which the DLP policy rule must be applied.\n"
                },
                "excludedDepartments": {
                    "$ref": "#/types/zia:index/DLPWebRulesExcludedDepartments:DLPWebRulesExcludedDepartments",
                    "description": "The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.\n"
                },
                "excludedGroups": {
                    "$ref": "#/types/zia:index/DLPWebRulesExcludedGroups:DLPWebRulesExcludedGroups",
                    "description": "The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.\n"
                },
                "excludedUsers": {
                    "$ref": "#/types/zia:index/DLPWebRulesExcludedUsers:DLPWebRulesExcludedUsers",
                    "description": "The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.\n"
                },
                "externalAuditorEmail": {
                    "type": "string",
                    "description": "The email address of an external auditor to whom DLP email notifications are sent.\n"
                },
                "fileTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)\n\n* \u003e Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocr_enabled` is set to `true` for DLP rules with content inspection.\n\n* \u003e Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `without_content_inspection` is set to `false`.\n\n* \u003e Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.\n"
                },
                "groups": {
                    "$ref": "#/types/zia:index/DLPWebRulesGroups:DLPWebRulesGroups",
                    "description": "The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "icapServer": {
                    "$ref": "#/types/zia:index/DLPWebRulesIcapServer:DLPWebRulesIcapServer",
                    "description": "The DLP server, using ICAP, to which the transaction content is forwarded.\n"
                },
                "labels": {
                    "$ref": "#/types/zia:index/DLPWebRulesLabels:DLPWebRulesLabels",
                    "description": "The Name-ID pairs of rule labels associated to the DLP policy rule.\n"
                },
                "locationGroups": {
                    "$ref": "#/types/zia:index/DLPWebRulesLocationGroups:DLPWebRulesLocationGroups",
                    "description": "The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                },
                "locations": {
                    "$ref": "#/types/zia:index/DLPWebRulesLocations:DLPWebRulesLocations",
                    "description": "The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.\n"
                },
                "matchOnly": {
                    "type": "boolean",
                    "description": "The match only criteria for DLP engines.\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "The minimum file size (in KB) used for evaluation of the DLP policy rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                },
                "notificationTemplate": {
                    "$ref": "#/types/zia:index/DLPWebRulesNotificationTemplate:DLPWebRulesNotificationTemplate",
                    "description": "The template used for DLP notification emails.\n"
                },
                "ocrEnabled": {
                    "type": "boolean",
                    "description": "Enables or disables image file scanning. When OCR is enabled only the following ``file_types`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The rule order of execution for the DLP policy rule with respect to other rules.\n"
                },
                "parentRule": {
                    "type": "integer",
                    "description": "The unique identifier of the parent rule under which an exception rule is added.\n\u003e Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The protocol criteria specified for the DLP policy rule.\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "Admin rank of the admin who creates this rule\n"
                },
                "ruleId": {
                    "type": "integer"
                },
                "severity": {
                    "type": "string",
                    "description": "Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`\n"
                },
                "state": {
                    "type": "string",
                    "description": "Enables or disables the DLP policy rule.. The supported values are:\n"
                },
                "subRules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of exception rules added to a parent rule.\n\u003e Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.\n"
                },
                "timeWindows": {
                    "$ref": "#/types/zia:index/DLPWebRulesTimeWindows:DLPWebRulesTimeWindows",
                    "description": "The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.\n"
                },
                "urlCategories": {
                    "$ref": "#/types/zia:index/DLPWebRulesUrlCategories:DLPWebRulesUrlCategories",
                    "description": "The list of URL categories to which the DLP policy rule must be applied.\n"
                },
                "userRiskScoreLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`\n"
                },
                "users": {
                    "$ref": "#/types/zia:index/DLPWebRulesUsers:DLPWebRulesUsers",
                    "description": "The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.\n"
                },
                "withoutContentInspection": {
                    "type": "boolean",
                    "description": "must be set to false if `file_types` is not defined.\n"
                },
                "workloadGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/DLPWebRulesWorkloadGroup:DLPWebRulesWorkloadGroup"
                    },
                    "description": "The list of preconfigured workload groups to which the policy must be applied\n"
                },
                "zccNotificationsEnabled": {
                    "type": "boolean",
                    "description": "Indicates a DLP policy rule without content inspection, when the value is set to true.\n"
                },
                "zscalerIncidentReceiver": {
                    "type": "boolean",
                    "description": "Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.\n"
                }
            },
            "required": [
                "action",
                "auditor",
                "cloudApplications",
                "departments",
                "dlpDownloadScanEnabled",
                "dlpEngines",
                "excludedDepartments",
                "excludedGroups",
                "excludedUsers",
                "externalAuditorEmail",
                "fileTypes",
                "groups",
                "icapServer",
                "labels",
                "locationGroups",
                "locations",
                "matchOnly",
                "minSize",
                "name",
                "notificationTemplate",
                "ocrEnabled",
                "order",
                "parentRule",
                "protocols",
                "ruleId",
                "severity",
                "state",
                "subRules",
                "timeWindows",
                "urlCategories",
                "userRiskScoreLevels",
                "users",
                "withoutContentInspection",
                "workloadGroups",
                "zccNotificationsEnabled",
                "zscalerIncidentReceiver"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "The action taken when traffic matches the DLP policy rule criteria. The supported values are:\n"
                },
                "auditor": {
                    "$ref": "#/types/zia:index/DLPWebRulesAuditor:DLPWebRulesAuditor",
                    "description": "The auditor to which the DLP policy rule must be applied.\n"
                },
                "cloudApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of cloud applications to which the DLP policy rule must be applied.\n"
                },
                "departments": {
                    "$ref": "#/types/zia:index/DLPWebRulesDepartments:DLPWebRulesDepartments",
                    "description": "The name-ID pairs of the departments that are excluded from the DLP policy rule.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the DLP policy rule.\n"
                },
                "dlpDownloadScanEnabled": {
                    "type": "boolean",
                    "description": "Indicates a DLP policy rule without content inspection, when the value is set to true.\n"
                },
                "dlpEngines": {
                    "$ref": "#/types/zia:index/DLPWebRulesDlpEngines:DLPWebRulesDlpEngines",
                    "description": "The list of DLP engines to which the DLP policy rule must be applied.\n"
                },
                "excludedDepartments": {
                    "$ref": "#/types/zia:index/DLPWebRulesExcludedDepartments:DLPWebRulesExcludedDepartments",
                    "description": "The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.\n"
                },
                "excludedGroups": {
                    "$ref": "#/types/zia:index/DLPWebRulesExcludedGroups:DLPWebRulesExcludedGroups",
                    "description": "The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.\n"
                },
                "excludedUsers": {
                    "$ref": "#/types/zia:index/DLPWebRulesExcludedUsers:DLPWebRulesExcludedUsers",
                    "description": "The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.\n"
                },
                "externalAuditorEmail": {
                    "type": "string",
                    "description": "The email address of an external auditor to whom DLP email notifications are sent.\n"
                },
                "fileTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)\n\n* \u003e Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocr_enabled` is set to `true` for DLP rules with content inspection.\n\n* \u003e Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `without_content_inspection` is set to `false`.\n\n* \u003e Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.\n"
                },
                "groups": {
                    "$ref": "#/types/zia:index/DLPWebRulesGroups:DLPWebRulesGroups",
                    "description": "The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "icapServer": {
                    "$ref": "#/types/zia:index/DLPWebRulesIcapServer:DLPWebRulesIcapServer",
                    "description": "The DLP server, using ICAP, to which the transaction content is forwarded.\n"
                },
                "labels": {
                    "$ref": "#/types/zia:index/DLPWebRulesLabels:DLPWebRulesLabels",
                    "description": "The Name-ID pairs of rule labels associated to the DLP policy rule.\n"
                },
                "locationGroups": {
                    "$ref": "#/types/zia:index/DLPWebRulesLocationGroups:DLPWebRulesLocationGroups",
                    "description": "The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                },
                "locations": {
                    "$ref": "#/types/zia:index/DLPWebRulesLocations:DLPWebRulesLocations",
                    "description": "The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.\n"
                },
                "matchOnly": {
                    "type": "boolean",
                    "description": "The match only criteria for DLP engines.\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "The minimum file size (in KB) used for evaluation of the DLP policy rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n"
                },
                "notificationTemplate": {
                    "$ref": "#/types/zia:index/DLPWebRulesNotificationTemplate:DLPWebRulesNotificationTemplate",
                    "description": "The template used for DLP notification emails.\n"
                },
                "ocrEnabled": {
                    "type": "boolean",
                    "description": "Enables or disables image file scanning. When OCR is enabled only the following ``file_types`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The rule order of execution for the DLP policy rule with respect to other rules.\n"
                },
                "parentRule": {
                    "type": "integer",
                    "description": "The unique identifier of the parent rule under which an exception rule is added.\n\u003e Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The protocol criteria specified for the DLP policy rule.\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "Admin rank of the admin who creates this rule\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`\n"
                },
                "state": {
                    "type": "string",
                    "description": "Enables or disables the DLP policy rule.. The supported values are:\n"
                },
                "subRules": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of exception rules added to a parent rule.\n\u003e Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.\n"
                },
                "timeWindows": {
                    "$ref": "#/types/zia:index/DLPWebRulesTimeWindows:DLPWebRulesTimeWindows",
                    "description": "The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.\n"
                },
                "urlCategories": {
                    "$ref": "#/types/zia:index/DLPWebRulesUrlCategories:DLPWebRulesUrlCategories",
                    "description": "The list of URL categories to which the DLP policy rule must be applied.\n"
                },
                "userRiskScoreLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`\n"
                },
                "users": {
                    "$ref": "#/types/zia:index/DLPWebRulesUsers:DLPWebRulesUsers",
                    "description": "The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.\n"
                },
                "withoutContentInspection": {
                    "type": "boolean",
                    "description": "must be set to false if `file_types` is not defined.\n"
                },
                "workloadGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/DLPWebRulesWorkloadGroup:DLPWebRulesWorkloadGroup"
                    },
                    "description": "The list of preconfigured workload groups to which the policy must be applied\n"
                },
                "zccNotificationsEnabled": {
                    "type": "boolean",
                    "description": "Indicates a DLP policy rule without content inspection, when the value is set to true.\n"
                },
                "zscalerIncidentReceiver": {
                    "type": "boolean",
                    "description": "Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DLPWebRules resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "The action taken when traffic matches the DLP policy rule criteria. The supported values are:\n"
                    },
                    "auditor": {
                        "$ref": "#/types/zia:index/DLPWebRulesAuditor:DLPWebRulesAuditor",
                        "description": "The auditor to which the DLP policy rule must be applied.\n"
                    },
                    "cloudApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of cloud applications to which the DLP policy rule must be applied.\n"
                    },
                    "departments": {
                        "$ref": "#/types/zia:index/DLPWebRulesDepartments:DLPWebRulesDepartments",
                        "description": "The name-ID pairs of the departments that are excluded from the DLP policy rule.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the DLP policy rule.\n"
                    },
                    "dlpDownloadScanEnabled": {
                        "type": "boolean",
                        "description": "Indicates a DLP policy rule without content inspection, when the value is set to true.\n"
                    },
                    "dlpEngines": {
                        "$ref": "#/types/zia:index/DLPWebRulesDlpEngines:DLPWebRulesDlpEngines",
                        "description": "The list of DLP engines to which the DLP policy rule must be applied.\n"
                    },
                    "excludedDepartments": {
                        "$ref": "#/types/zia:index/DLPWebRulesExcludedDepartments:DLPWebRulesExcludedDepartments",
                        "description": "The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.\n"
                    },
                    "excludedGroups": {
                        "$ref": "#/types/zia:index/DLPWebRulesExcludedGroups:DLPWebRulesExcludedGroups",
                        "description": "The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.\n"
                    },
                    "excludedUsers": {
                        "$ref": "#/types/zia:index/DLPWebRulesExcludedUsers:DLPWebRulesExcludedUsers",
                        "description": "The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.\n"
                    },
                    "externalAuditorEmail": {
                        "type": "string",
                        "description": "The email address of an external auditor to whom DLP email notifications are sent.\n"
                    },
                    "fileTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)\n\n* \u003e Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocr_enabled` is set to `true` for DLP rules with content inspection.\n\n* \u003e Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `without_content_inspection` is set to `false`.\n\n* \u003e Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.\n"
                    },
                    "groups": {
                        "$ref": "#/types/zia:index/DLPWebRulesGroups:DLPWebRulesGroups",
                        "description": "The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                    },
                    "icapServer": {
                        "$ref": "#/types/zia:index/DLPWebRulesIcapServer:DLPWebRulesIcapServer",
                        "description": "The DLP server, using ICAP, to which the transaction content is forwarded.\n"
                    },
                    "labels": {
                        "$ref": "#/types/zia:index/DLPWebRulesLabels:DLPWebRulesLabels",
                        "description": "The Name-ID pairs of rule labels associated to the DLP policy rule.\n"
                    },
                    "locationGroups": {
                        "$ref": "#/types/zia:index/DLPWebRulesLocationGroups:DLPWebRulesLocationGroups",
                        "description": "The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                    },
                    "locations": {
                        "$ref": "#/types/zia:index/DLPWebRulesLocations:DLPWebRulesLocations",
                        "description": "The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.\n"
                    },
                    "matchOnly": {
                        "type": "boolean",
                        "description": "The match only criteria for DLP engines.\n"
                    },
                    "minSize": {
                        "type": "integer",
                        "description": "The minimum file size (in KB) used for evaluation of the DLP policy rule.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workload group\n"
                    },
                    "notificationTemplate": {
                        "$ref": "#/types/zia:index/DLPWebRulesNotificationTemplate:DLPWebRulesNotificationTemplate",
                        "description": "The template used for DLP notification emails.\n"
                    },
                    "ocrEnabled": {
                        "type": "boolean",
                        "description": "Enables or disables image file scanning. When OCR is enabled only the following ``file_types`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "The rule order of execution for the DLP policy rule with respect to other rules.\n"
                    },
                    "parentRule": {
                        "type": "integer",
                        "description": "The unique identifier of the parent rule under which an exception rule is added.\n\u003e Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.\n"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The protocol criteria specified for the DLP policy rule.\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "Admin rank of the admin who creates this rule\n"
                    },
                    "ruleId": {
                        "type": "integer"
                    },
                    "severity": {
                        "type": "string",
                        "description": "Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Enables or disables the DLP policy rule.. The supported values are:\n"
                    },
                    "subRules": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of exception rules added to a parent rule.\n\u003e Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.\n"
                    },
                    "timeWindows": {
                        "$ref": "#/types/zia:index/DLPWebRulesTimeWindows:DLPWebRulesTimeWindows",
                        "description": "The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.\n"
                    },
                    "urlCategories": {
                        "$ref": "#/types/zia:index/DLPWebRulesUrlCategories:DLPWebRulesUrlCategories",
                        "description": "The list of URL categories to which the DLP policy rule must be applied.\n"
                    },
                    "userRiskScoreLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`\n"
                    },
                    "users": {
                        "$ref": "#/types/zia:index/DLPWebRulesUsers:DLPWebRulesUsers",
                        "description": "The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.\n"
                    },
                    "withoutContentInspection": {
                        "type": "boolean",
                        "description": "must be set to false if `file_types` is not defined.\n"
                    },
                    "workloadGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/DLPWebRulesWorkloadGroup:DLPWebRulesWorkloadGroup"
                        },
                        "description": "The list of preconfigured workload groups to which the policy must be applied\n"
                    },
                    "zccNotificationsEnabled": {
                        "type": "boolean",
                        "description": "Indicates a DLP policy rule without content inspection, when the value is set to true.\n"
                    },
                    "zscalerIncidentReceiver": {
                        "type": "boolean",
                        "description": "Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/firewallFilteringApplicationGroups:FirewallFilteringApplicationGroups": {
            "description": "The **zia_firewall_filtering_network_application_groups** resource allows the creation and management of ZIA Cloud Firewall IP source groups in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// Add applications to a network application group\nconst example = new zia.FirewallFilteringApplicationGroups(\"example\", {\n    description: \"Example\",\n    networkApplications: [\n        \"LDAP\",\n        \"LDAPS\",\n        \"SRVLOC\",\n    ],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# Add applications to a network application group\nexample = zia.FirewallFilteringApplicationGroups(\"example\",\n    description=\"Example\",\n    network_applications=[\n        \"LDAP\",\n        \"LDAPS\",\n        \"SRVLOC\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add applications to a network application group\n    var example = new Zia.FirewallFilteringApplicationGroups(\"example\", new()\n    {\n        Description = \"Example\",\n        NetworkApplications = new[]\n        {\n            \"LDAP\",\n            \"LDAPS\",\n            \"SRVLOC\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Add applications to a network application group\n\t\t_, err := zia.NewFirewallFilteringApplicationGroups(ctx, \"example\", \u0026zia.FirewallFilteringApplicationGroupsArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tNetworkApplications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"LDAP\"),\n\t\t\t\tpulumi.String(\"LDAPS\"),\n\t\t\t\tpulumi.String(\"SRVLOC\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.FirewallFilteringApplicationGroups;\nimport com.pulumi.zia.FirewallFilteringApplicationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new FirewallFilteringApplicationGroups(\"example\", FirewallFilteringApplicationGroupsArgs.builder()        \n            .description(\"Example\")\n            .networkApplications(            \n                \"LDAP\",\n                \"LDAPS\",\n                \"SRVLOC\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add applications to a network application group\n  example:\n    type: zia:FirewallFilteringApplicationGroups\n    properties:\n      description: Example\n      networkApplications:\n        - LDAP\n        - LDAPS\n        - SRVLOC\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_firewall_filtering_network_application_groups** can be imported by using `\u003cGROUP_ID\u003e` or `\u003cGROUP_NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/firewallFilteringApplicationGroups:FirewallFilteringApplicationGroups example \u003cgroup_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/firewallFilteringApplicationGroups:FirewallFilteringApplicationGroups example \u003cgroup_name\u003e\n```\n\n",
            "properties": {
                "appId": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the network application group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network application group name\n"
                },
                "networkApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any number of applications to be added to the group\n* Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the network application group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network application group name\n"
                },
                "networkApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any number of applications to be added to the group\n* Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallFilteringApplicationGroups resources.\n",
                "properties": {
                    "appId": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the network application group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Network application group name\n"
                    },
                    "networkApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any number of applications to be added to the group\n* Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/firewallFilteringDestinationGroups:FirewallFilteringDestinationGroups": {
            "description": "The **zia_firewall_filtering_destination_groups** resource allows the creation and management of ZIA Cloud Firewall IP destination groups in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// IP Destination Group of Type DSTN_FQDN\nconst dstnFqdn = new zia.FirewallFilteringDestinationGroups(\"dstnFqdn\", {\n    addresses: [\n        \"test1.acme.com\",\n        \"test2.acme.com\",\n        \"test3.acme.com\",\n    ],\n    description: \"Example Destination FQDN\",\n    type: \"DSTN_FQDN\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# IP Destination Group of Type DSTN_FQDN\ndstn_fqdn = zia.FirewallFilteringDestinationGroups(\"dstnFqdn\",\n    addresses=[\n        \"test1.acme.com\",\n        \"test2.acme.com\",\n        \"test3.acme.com\",\n    ],\n    description=\"Example Destination FQDN\",\n    type=\"DSTN_FQDN\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // IP Destination Group of Type DSTN_FQDN\n    var dstnFqdn = new Zia.FirewallFilteringDestinationGroups(\"dstnFqdn\", new()\n    {\n        Addresses = new[]\n        {\n            \"test1.acme.com\",\n            \"test2.acme.com\",\n            \"test3.acme.com\",\n        },\n        Description = \"Example Destination FQDN\",\n        Type = \"DSTN_FQDN\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// IP Destination Group of Type DSTN_FQDN\n\t\t_, err := zia.NewFirewallFilteringDestinationGroups(ctx, \"dstnFqdn\", \u0026zia.FirewallFilteringDestinationGroupsArgs{\n\t\t\tAddresses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"test1.acme.com\"),\n\t\t\t\tpulumi.String(\"test2.acme.com\"),\n\t\t\t\tpulumi.String(\"test3.acme.com\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Example Destination FQDN\"),\n\t\t\tType:        pulumi.String(\"DSTN_FQDN\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.FirewallFilteringDestinationGroups;\nimport com.pulumi.zia.FirewallFilteringDestinationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var dstnFqdn = new FirewallFilteringDestinationGroups(\"dstnFqdn\", FirewallFilteringDestinationGroupsArgs.builder()        \n            .addresses(            \n                \"test1.acme.com\",\n                \"test2.acme.com\",\n                \"test3.acme.com\")\n            .description(\"Example Destination FQDN\")\n            .type(\"DSTN_FQDN\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # IP Destination Group of Type DSTN_FQDN\n  dstnFqdn:\n    type: zia:FirewallFilteringDestinationGroups\n    properties:\n      addresses:\n        - test1.acme.com\n        - test2.acme.com\n        - test3.acme.com\n      description: Example Destination FQDN\n      type: DSTN_FQDN\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// IP Destination Group of Type DSTN_IP\nconst exampleDstnIp = new zia.FirewallFilteringDestinationGroups(\"exampleDstnIp\", {\n    addresses: [\n        \"3.217.228.0-3.217.231.255\",\n        \"3.235.112.0-3.235.119.255\",\n        \"52.23.61.0-52.23.62.25\",\n        \"35.80.88.0-35.80.95.255\",\n    ],\n    description: \"Example Destination IP\",\n    type: \"DSTN_IP\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# IP Destination Group of Type DSTN_IP\nexample_dstn_ip = zia.FirewallFilteringDestinationGroups(\"exampleDstnIp\",\n    addresses=[\n        \"3.217.228.0-3.217.231.255\",\n        \"3.235.112.0-3.235.119.255\",\n        \"52.23.61.0-52.23.62.25\",\n        \"35.80.88.0-35.80.95.255\",\n    ],\n    description=\"Example Destination IP\",\n    type=\"DSTN_IP\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // IP Destination Group of Type DSTN_IP\n    var exampleDstnIp = new Zia.FirewallFilteringDestinationGroups(\"exampleDstnIp\", new()\n    {\n        Addresses = new[]\n        {\n            \"3.217.228.0-3.217.231.255\",\n            \"3.235.112.0-3.235.119.255\",\n            \"52.23.61.0-52.23.62.25\",\n            \"35.80.88.0-35.80.95.255\",\n        },\n        Description = \"Example Destination IP\",\n        Type = \"DSTN_IP\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// IP Destination Group of Type DSTN_IP\n\t\t_, err := zia.NewFirewallFilteringDestinationGroups(ctx, \"exampleDstnIp\", \u0026zia.FirewallFilteringDestinationGroupsArgs{\n\t\t\tAddresses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"3.217.228.0-3.217.231.255\"),\n\t\t\t\tpulumi.String(\"3.235.112.0-3.235.119.255\"),\n\t\t\t\tpulumi.String(\"52.23.61.0-52.23.62.25\"),\n\t\t\t\tpulumi.String(\"35.80.88.0-35.80.95.255\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Example Destination IP\"),\n\t\t\tType:        pulumi.String(\"DSTN_IP\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.FirewallFilteringDestinationGroups;\nimport com.pulumi.zia.FirewallFilteringDestinationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleDstnIp = new FirewallFilteringDestinationGroups(\"exampleDstnIp\", FirewallFilteringDestinationGroupsArgs.builder()        \n            .addresses(            \n                \"3.217.228.0-3.217.231.255\",\n                \"3.235.112.0-3.235.119.255\",\n                \"52.23.61.0-52.23.62.25\",\n                \"35.80.88.0-35.80.95.255\")\n            .description(\"Example Destination IP\")\n            .type(\"DSTN_IP\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # IP Destination Group of Type DSTN_IP\n  exampleDstnIp:\n    type: zia:FirewallFilteringDestinationGroups\n    properties:\n      addresses:\n        - 3.217.228.0-3.217.231.255\n        - 3.235.112.0-3.235.119.255\n        - 52.23.61.0-52.23.62.25\n        - 35.80.88.0-35.80.95.255\n      description: Example Destination IP\n      type: DSTN_IP\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// IP Destination Group of Type DSTN_DOMAIN\nconst exampleDstnDomain = new zia.FirewallFilteringDestinationGroups(\"exampleDstnDomain\", {\n    addresses: [\n        \"acme.com\",\n        \"acme1.com\",\n    ],\n    description: \"Example Destination Domain\",\n    type: \"DSTN_DOMAIN\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# IP Destination Group of Type DSTN_DOMAIN\nexample_dstn_domain = zia.FirewallFilteringDestinationGroups(\"exampleDstnDomain\",\n    addresses=[\n        \"acme.com\",\n        \"acme1.com\",\n    ],\n    description=\"Example Destination Domain\",\n    type=\"DSTN_DOMAIN\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // IP Destination Group of Type DSTN_DOMAIN\n    var exampleDstnDomain = new Zia.FirewallFilteringDestinationGroups(\"exampleDstnDomain\", new()\n    {\n        Addresses = new[]\n        {\n            \"acme.com\",\n            \"acme1.com\",\n        },\n        Description = \"Example Destination Domain\",\n        Type = \"DSTN_DOMAIN\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// IP Destination Group of Type DSTN_DOMAIN\n\t\t_, err := zia.NewFirewallFilteringDestinationGroups(ctx, \"exampleDstnDomain\", \u0026zia.FirewallFilteringDestinationGroupsArgs{\n\t\t\tAddresses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"acme.com\"),\n\t\t\t\tpulumi.String(\"acme1.com\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Example Destination Domain\"),\n\t\t\tType:        pulumi.String(\"DSTN_DOMAIN\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.FirewallFilteringDestinationGroups;\nimport com.pulumi.zia.FirewallFilteringDestinationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleDstnDomain = new FirewallFilteringDestinationGroups(\"exampleDstnDomain\", FirewallFilteringDestinationGroupsArgs.builder()        \n            .addresses(            \n                \"acme.com\",\n                \"acme1.com\")\n            .description(\"Example Destination Domain\")\n            .type(\"DSTN_DOMAIN\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # IP Destination Group of Type DSTN_DOMAIN\n  exampleDstnDomain:\n    type: zia:FirewallFilteringDestinationGroups\n    properties:\n      addresses:\n        - acme.com\n        - acme1.com\n      description: Example Destination Domain\n      type: DSTN_DOMAIN\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// IP Destination Group of Type DSTN_OTHER\nconst exampleDstnOther = new zia.FirewallFilteringDestinationGroups(\"exampleDstnOther\", {\n    countries: [\"COUNTRY_CA\"],\n    description: \"Example Destination Other\",\n    ipCategories: [\n        \"CUSTOM_01\",\n        \"CUSTOM_02\",\n    ],\n    type: \"DSTN_OTHER\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# IP Destination Group of Type DSTN_OTHER\nexample_dstn_other = zia.FirewallFilteringDestinationGroups(\"exampleDstnOther\",\n    countries=[\"COUNTRY_CA\"],\n    description=\"Example Destination Other\",\n    ip_categories=[\n        \"CUSTOM_01\",\n        \"CUSTOM_02\",\n    ],\n    type=\"DSTN_OTHER\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // IP Destination Group of Type DSTN_OTHER\n    var exampleDstnOther = new Zia.FirewallFilteringDestinationGroups(\"exampleDstnOther\", new()\n    {\n        Countries = new[]\n        {\n            \"COUNTRY_CA\",\n        },\n        Description = \"Example Destination Other\",\n        IpCategories = new[]\n        {\n            \"CUSTOM_01\",\n            \"CUSTOM_02\",\n        },\n        Type = \"DSTN_OTHER\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// IP Destination Group of Type DSTN_OTHER\n\t\t_, err := zia.NewFirewallFilteringDestinationGroups(ctx, \"exampleDstnOther\", \u0026zia.FirewallFilteringDestinationGroupsArgs{\n\t\t\tCountries: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"COUNTRY_CA\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Example Destination Other\"),\n\t\t\tIpCategories: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"CUSTOM_01\"),\n\t\t\t\tpulumi.String(\"CUSTOM_02\"),\n\t\t\t},\n\t\t\tType: pulumi.String(\"DSTN_OTHER\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.FirewallFilteringDestinationGroups;\nimport com.pulumi.zia.FirewallFilteringDestinationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleDstnOther = new FirewallFilteringDestinationGroups(\"exampleDstnOther\", FirewallFilteringDestinationGroupsArgs.builder()        \n            .countries(\"COUNTRY_CA\")\n            .description(\"Example Destination Other\")\n            .ipCategories(            \n                \"CUSTOM_01\",\n                \"CUSTOM_02\")\n            .type(\"DSTN_OTHER\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # IP Destination Group of Type DSTN_OTHER\n  exampleDstnOther:\n    type: zia:FirewallFilteringDestinationGroups\n    properties:\n      countries:\n        - COUNTRY_CA\n      description: Example Destination Other\n      ipCategories:\n        - CUSTOM_01\n        - CUSTOM_02\n      type: DSTN_OTHER\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_firewall_filtering_destination_groups** can be imported by using `\u003cGROUP_ID\u003e` or `\u003cGROUP_NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/firewallFilteringDestinationGroups:FirewallFilteringDestinationGroups example \u003cgroup_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/firewallFilteringDestinationGroups:FirewallFilteringDestinationGroups example \u003cgroup_name\u003e\n```\n\n",
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Destination IP addresses, domains or FQDNs within the group\n"
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Destination IP address counties. You can identify destinations based on the location of a server.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Additional information about the destination IP group\n"
                },
                "groupId": {
                    "type": "integer",
                    "description": "Unique identifer for the destination IP group\n"
                },
                "ipCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Destination IP address URL categories. You can identify destinations based on the URL category of the domain. See list of all IP Categories [Here](https://help.zscaler.com/zia/firewall-policies#/ipDestinationGroups-get)\n* !\u003e **WARNING:** The `ip_categories` attribute only accepts custom URL categories.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Destination IP group name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Destination IP group type (i.e., the group can contain destination IP addresses or FQDNs). The supported values are:\n"
                }
            },
            "required": [
                "addresses",
                "countries",
                "groupId",
                "name",
                "type"
            ],
            "inputProperties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Destination IP addresses, domains or FQDNs within the group\n"
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Destination IP address counties. You can identify destinations based on the location of a server.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Additional information about the destination IP group\n"
                },
                "ipCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Destination IP address URL categories. You can identify destinations based on the URL category of the domain. See list of all IP Categories [Here](https://help.zscaler.com/zia/firewall-policies#/ipDestinationGroups-get)\n* !\u003e **WARNING:** The `ip_categories` attribute only accepts custom URL categories.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Destination IP group name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Destination IP group type (i.e., the group can contain destination IP addresses or FQDNs). The supported values are:\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallFilteringDestinationGroups resources.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Destination IP addresses, domains or FQDNs within the group\n"
                    },
                    "countries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Destination IP address counties. You can identify destinations based on the location of a server.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Additional information about the destination IP group\n"
                    },
                    "groupId": {
                        "type": "integer",
                        "description": "Unique identifer for the destination IP group\n"
                    },
                    "ipCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Destination IP address URL categories. You can identify destinations based on the URL category of the domain. See list of all IP Categories [Here](https://help.zscaler.com/zia/firewall-policies#/ipDestinationGroups-get)\n* !\u003e **WARNING:** The `ip_categories` attribute only accepts custom URL categories.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Destination IP group name\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Destination IP group type (i.e., the group can contain destination IP addresses or FQDNs). The supported values are:\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zia:index/firewallFilteringNetworkServices:FirewallFilteringNetworkServices": {
            "description": "The **zia_firewall_filtering_network_service** resource allows the creation and management of ZIA Cloud Firewall IP network services in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule and network service group resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\nconst example = new zia.FirewallFilteringNetworkServices(\"example\", {\n    description: \"example\",\n    destTcpPorts: [\n        {\n            start: 5000,\n        },\n        {\n            start: 5001,\n        },\n        {\n            end: 5005,\n            start: 5003,\n        },\n    ],\n    srcTcpPorts: [\n        {\n            start: 5000,\n        },\n        {\n            start: 5001,\n        },\n        {\n            end: 5005,\n            start: 5002,\n        },\n    ],\n    type: \"CUSTOM\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\nexample = zia.FirewallFilteringNetworkServices(\"example\",\n    description=\"example\",\n    dest_tcp_ports=[\n        zia.FirewallFilteringNetworkServicesDestTcpPortArgs(\n            start=5000,\n        ),\n        zia.FirewallFilteringNetworkServicesDestTcpPortArgs(\n            start=5001,\n        ),\n        zia.FirewallFilteringNetworkServicesDestTcpPortArgs(\n            end=5005,\n            start=5003,\n        ),\n    ],\n    src_tcp_ports=[\n        zia.FirewallFilteringNetworkServicesSrcTcpPortArgs(\n            start=5000,\n        ),\n        zia.FirewallFilteringNetworkServicesSrcTcpPortArgs(\n            start=5001,\n        ),\n        zia.FirewallFilteringNetworkServicesSrcTcpPortArgs(\n            end=5005,\n            start=5002,\n        ),\n    ],\n    type=\"CUSTOM\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Zia.FirewallFilteringNetworkServices(\"example\", new()\n    {\n        Description = \"example\",\n        DestTcpPorts = new[]\n        {\n            new Zia.Inputs.FirewallFilteringNetworkServicesDestTcpPortArgs\n            {\n                Start = 5000,\n            },\n            new Zia.Inputs.FirewallFilteringNetworkServicesDestTcpPortArgs\n            {\n                Start = 5001,\n            },\n            new Zia.Inputs.FirewallFilteringNetworkServicesDestTcpPortArgs\n            {\n                End = 5005,\n                Start = 5003,\n            },\n        },\n        SrcTcpPorts = new[]\n        {\n            new Zia.Inputs.FirewallFilteringNetworkServicesSrcTcpPortArgs\n            {\n                Start = 5000,\n            },\n            new Zia.Inputs.FirewallFilteringNetworkServicesSrcTcpPortArgs\n            {\n                Start = 5001,\n            },\n            new Zia.Inputs.FirewallFilteringNetworkServicesSrcTcpPortArgs\n            {\n                End = 5005,\n                Start = 5002,\n            },\n        },\n        Type = \"CUSTOM\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.NewFirewallFilteringNetworkServices(ctx, \"example\", \u0026zia.FirewallFilteringNetworkServicesArgs{\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tDestTcpPorts: zia.FirewallFilteringNetworkServicesDestTcpPortArray{\n\t\t\t\t\u0026zia.FirewallFilteringNetworkServicesDestTcpPortArgs{\n\t\t\t\t\tStart: pulumi.Int(5000),\n\t\t\t\t},\n\t\t\t\t\u0026zia.FirewallFilteringNetworkServicesDestTcpPortArgs{\n\t\t\t\t\tStart: pulumi.Int(5001),\n\t\t\t\t},\n\t\t\t\t\u0026zia.FirewallFilteringNetworkServicesDestTcpPortArgs{\n\t\t\t\t\tEnd:   pulumi.Int(5005),\n\t\t\t\t\tStart: pulumi.Int(5003),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSrcTcpPorts: zia.FirewallFilteringNetworkServicesSrcTcpPortArray{\n\t\t\t\t\u0026zia.FirewallFilteringNetworkServicesSrcTcpPortArgs{\n\t\t\t\t\tStart: pulumi.Int(5000),\n\t\t\t\t},\n\t\t\t\t\u0026zia.FirewallFilteringNetworkServicesSrcTcpPortArgs{\n\t\t\t\t\tStart: pulumi.Int(5001),\n\t\t\t\t},\n\t\t\t\t\u0026zia.FirewallFilteringNetworkServicesSrcTcpPortArgs{\n\t\t\t\t\tEnd:   pulumi.Int(5005),\n\t\t\t\t\tStart: pulumi.Int(5002),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"CUSTOM\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.FirewallFilteringNetworkServices;\nimport com.pulumi.zia.FirewallFilteringNetworkServicesArgs;\nimport com.pulumi.zia.inputs.FirewallFilteringNetworkServicesDestTcpPortArgs;\nimport com.pulumi.zia.inputs.FirewallFilteringNetworkServicesSrcTcpPortArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new FirewallFilteringNetworkServices(\"example\", FirewallFilteringNetworkServicesArgs.builder()        \n            .description(\"example\")\n            .destTcpPorts(            \n                FirewallFilteringNetworkServicesDestTcpPortArgs.builder()\n                    .start(5000)\n                    .build(),\n                FirewallFilteringNetworkServicesDestTcpPortArgs.builder()\n                    .start(5001)\n                    .build(),\n                FirewallFilteringNetworkServicesDestTcpPortArgs.builder()\n                    .end(5005)\n                    .start(5003)\n                    .build())\n            .srcTcpPorts(            \n                FirewallFilteringNetworkServicesSrcTcpPortArgs.builder()\n                    .start(5000)\n                    .build(),\n                FirewallFilteringNetworkServicesSrcTcpPortArgs.builder()\n                    .start(5001)\n                    .build(),\n                FirewallFilteringNetworkServicesSrcTcpPortArgs.builder()\n                    .end(5005)\n                    .start(5002)\n                    .build())\n            .type(\"CUSTOM\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: zia:FirewallFilteringNetworkServices\n    properties:\n      description: example\n      destTcpPorts:\n        - start: 5000\n        - start: 5001\n        - end: 5005\n          start: 5003\n      srcTcpPorts:\n        - start: 5000\n        - start: 5001\n        - end: 5005\n          start: 5002\n      type: CUSTOM\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_firewall_filtering_network_service** can be imported by using `\u003cSERVICE_ID\u003e` or `\u003cSERVICE_NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/firewallFilteringNetworkServices:FirewallFilteringNetworkServices example \u003cservice_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/firewallFilteringNetworkServices:FirewallFilteringNetworkServices example \u003cservice_name\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the service\n"
                },
                "destTcpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/FirewallFilteringNetworkServicesDestTcpPort:FirewallFilteringNetworkServicesDestTcpPort"
                    },
                    "description": "The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                },
                "destUdpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/FirewallFilteringNetworkServicesDestUdpPort:FirewallFilteringNetworkServicesDestUdpPort"
                    },
                    "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                },
                "isNameL10nTag": {
                    "type": "boolean",
                    "description": "(Optional\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "networkServiceId": {
                    "type": "integer"
                },
                "srcTcpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/FirewallFilteringNetworkServicesSrcTcpPort:FirewallFilteringNetworkServicesSrcTcpPort"
                    },
                    "description": "The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service\n"
                },
                "srcUdpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/FirewallFilteringNetworkServicesSrcUdpPort:FirewallFilteringNetworkServicesSrcUdpPort"
                    },
                    "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "The following values are supported: `\"ICMP_ANY`, `\"UDP_ANY\"`, `\"TCP_ANY\"`, `\"OTHER_NETWORK_SERVICE\"`, `\"DNS\"`, `\"NETBIOS\"`, `\"FTP\"`, `\"GNUTELLA\"`, `\"H_323\"`, `\"HTTP\"`, `\"HTTPS\"`, `\"IKE\"`, `\"IMAP\"`, `\"ILS\"`, `\"IKE_NAT\"`, `\"IRC\"`, `\"LDAP\"`, `\"QUIC\"`, `\"TDS\"`, `\"NETMEETING\"`, `\"NFS\"`, `\"NTP\"`, `\"SIP\"`, `\"SNMP\"`, `\"SMB\"`, `\"SMTP\"`, `\"SSH\"`, `\"SYSLOG\"`, `\"TELNET\"`, `\"TRACEROUTE\"`, `\"POP3\"`, `\"PPTP\"`, `\"RADIUS\"`, `\"REAL_MEDIA\"`, `\"RTSP\"`, `\"VNC\"`, `\"WHOIS\"`, `\"KERBEROS_SEC\"`, `\"TACACS\"`, `\"SNMPTRAP\"`, `\"NMAP\"`, `\"RSYNC\"`, `\"L2TP\"`, `\"HTTP_PROXY\"`, `\"PC_ANYWHERE\"`, `\"MSN\"`, `\"ECHO\"`, `\"AIM\"`, `\"IDENT\"`, `\"YMSG\"`, `\"SCCP\"`, `\"MGCP_UA\"`, `\"MGCP_CA\"`, `\"VDO_LIVE\"`, `\"OPENVPN\"`, `\"TFTP\"`, `\"FTPS_IMPLICIT\"`, `\"ZSCALER_PROXY_NW_SERVICES\"`, `\"GRE_PROTOCOL\"`, `\"ESP_PROTOCOL\"`, `\"DHCP\"`\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "networkServiceId",
                "tag"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the service\n"
                },
                "destTcpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/FirewallFilteringNetworkServicesDestTcpPort:FirewallFilteringNetworkServicesDestTcpPort"
                    },
                    "description": "The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                },
                "destUdpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/FirewallFilteringNetworkServicesDestUdpPort:FirewallFilteringNetworkServicesDestUdpPort"
                    },
                    "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                },
                "isNameL10nTag": {
                    "type": "boolean",
                    "description": "(Optional\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "srcTcpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/FirewallFilteringNetworkServicesSrcTcpPort:FirewallFilteringNetworkServicesSrcTcpPort"
                    },
                    "description": "The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service\n"
                },
                "srcUdpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/FirewallFilteringNetworkServicesSrcUdpPort:FirewallFilteringNetworkServicesSrcUdpPort"
                    },
                    "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "The following values are supported: `\"ICMP_ANY`, `\"UDP_ANY\"`, `\"TCP_ANY\"`, `\"OTHER_NETWORK_SERVICE\"`, `\"DNS\"`, `\"NETBIOS\"`, `\"FTP\"`, `\"GNUTELLA\"`, `\"H_323\"`, `\"HTTP\"`, `\"HTTPS\"`, `\"IKE\"`, `\"IMAP\"`, `\"ILS\"`, `\"IKE_NAT\"`, `\"IRC\"`, `\"LDAP\"`, `\"QUIC\"`, `\"TDS\"`, `\"NETMEETING\"`, `\"NFS\"`, `\"NTP\"`, `\"SIP\"`, `\"SNMP\"`, `\"SMB\"`, `\"SMTP\"`, `\"SSH\"`, `\"SYSLOG\"`, `\"TELNET\"`, `\"TRACEROUTE\"`, `\"POP3\"`, `\"PPTP\"`, `\"RADIUS\"`, `\"REAL_MEDIA\"`, `\"RTSP\"`, `\"VNC\"`, `\"WHOIS\"`, `\"KERBEROS_SEC\"`, `\"TACACS\"`, `\"SNMPTRAP\"`, `\"NMAP\"`, `\"RSYNC\"`, `\"L2TP\"`, `\"HTTP_PROXY\"`, `\"PC_ANYWHERE\"`, `\"MSN\"`, `\"ECHO\"`, `\"AIM\"`, `\"IDENT\"`, `\"YMSG\"`, `\"SCCP\"`, `\"MGCP_UA\"`, `\"MGCP_CA\"`, `\"VDO_LIVE\"`, `\"OPENVPN\"`, `\"TFTP\"`, `\"FTPS_IMPLICIT\"`, `\"ZSCALER_PROXY_NW_SERVICES\"`, `\"GRE_PROTOCOL\"`, `\"ESP_PROTOCOL\"`, `\"DHCP\"`\n"
                },
                "type": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallFilteringNetworkServices resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the service\n"
                    },
                    "destTcpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/FirewallFilteringNetworkServicesDestTcpPort:FirewallFilteringNetworkServicesDestTcpPort"
                        },
                        "description": "The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                    },
                    "destUdpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/FirewallFilteringNetworkServicesDestUdpPort:FirewallFilteringNetworkServicesDestUdpPort"
                        },
                        "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                    },
                    "isNameL10nTag": {
                        "type": "boolean",
                        "description": "(Optional\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "networkServiceId": {
                        "type": "integer"
                    },
                    "srcTcpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/FirewallFilteringNetworkServicesSrcTcpPort:FirewallFilteringNetworkServicesSrcTcpPort"
                        },
                        "description": "The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service\n"
                    },
                    "srcUdpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/FirewallFilteringNetworkServicesSrcUdpPort:FirewallFilteringNetworkServicesSrcUdpPort"
                        },
                        "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The following values are supported: `\"ICMP_ANY`, `\"UDP_ANY\"`, `\"TCP_ANY\"`, `\"OTHER_NETWORK_SERVICE\"`, `\"DNS\"`, `\"NETBIOS\"`, `\"FTP\"`, `\"GNUTELLA\"`, `\"H_323\"`, `\"HTTP\"`, `\"HTTPS\"`, `\"IKE\"`, `\"IMAP\"`, `\"ILS\"`, `\"IKE_NAT\"`, `\"IRC\"`, `\"LDAP\"`, `\"QUIC\"`, `\"TDS\"`, `\"NETMEETING\"`, `\"NFS\"`, `\"NTP\"`, `\"SIP\"`, `\"SNMP\"`, `\"SMB\"`, `\"SMTP\"`, `\"SSH\"`, `\"SYSLOG\"`, `\"TELNET\"`, `\"TRACEROUTE\"`, `\"POP3\"`, `\"PPTP\"`, `\"RADIUS\"`, `\"REAL_MEDIA\"`, `\"RTSP\"`, `\"VNC\"`, `\"WHOIS\"`, `\"KERBEROS_SEC\"`, `\"TACACS\"`, `\"SNMPTRAP\"`, `\"NMAP\"`, `\"RSYNC\"`, `\"L2TP\"`, `\"HTTP_PROXY\"`, `\"PC_ANYWHERE\"`, `\"MSN\"`, `\"ECHO\"`, `\"AIM\"`, `\"IDENT\"`, `\"YMSG\"`, `\"SCCP\"`, `\"MGCP_UA\"`, `\"MGCP_CA\"`, `\"VDO_LIVE\"`, `\"OPENVPN\"`, `\"TFTP\"`, `\"FTPS_IMPLICIT\"`, `\"ZSCALER_PROXY_NW_SERVICES\"`, `\"GRE_PROTOCOL\"`, `\"ESP_PROTOCOL\"`, `\"DHCP\"`\n"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/firewallFilteringRule:FirewallFilteringRule": {
            "description": "The **zia_firewall_filtering_rule** resource allows the creation and management of ZIA Cloud Firewall filtering rules in the Zscaler Internet Access.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\nimport * as zia from \"@pulumi/zia\";\n\nconst zscalerProxyNwServices = zia.getFirewallFilteringNetworkServices({\n    name: \"ZSCALER_PROXY_NW_SERVICES\",\n});\nconst engineering = zia.getDepartmentManagement({\n    name: \"Engineering\",\n});\nconst normalInternet = zia.getGroupManagement({\n    name: \"Normal_Internet\",\n});\nconst workHours = zia.getTimeWindow({\n    name: \"Work hours\",\n});\nconst example = new zia.FirewallFilteringRule(\"example\", {\n    description: \"Example\",\n    action: \"ALLOW\",\n    state: \"ENABLED\",\n    order: 1,\n    enableFullLogging: true,\n    nwServices: {\n        ids: [zscalerProxyNwServices.then(zscalerProxyNwServices =\u003e zscalerProxyNwServices.id)],\n    },\n    departments: {\n        ids: [engineering.then(engineering =\u003e engineering.id)],\n    },\n    groups: {\n        ids: [normalInternet.then(normalInternet =\u003e normalInternet.id)],\n    },\n    timeWindows: {\n        ids: [workHours.then(workHours =\u003e workHours.id)],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nzscaler_proxy_nw_services = zia.get_firewall_filtering_network_services(name=\"ZSCALER_PROXY_NW_SERVICES\")\nengineering = zia.get_department_management(name=\"Engineering\")\nnormal_internet = zia.get_group_management(name=\"Normal_Internet\")\nwork_hours = zia.get_time_window(name=\"Work hours\")\nexample = zia.FirewallFilteringRule(\"example\",\n    description=\"Example\",\n    action=\"ALLOW\",\n    state=\"ENABLED\",\n    order=1,\n    enable_full_logging=True,\n    nw_services=zia.FirewallFilteringRuleNwServicesArgs(\n        ids=[zscaler_proxy_nw_services.id],\n    ),\n    departments=zia.FirewallFilteringRuleDepartmentsArgs(\n        ids=[engineering.id],\n    ),\n    groups=zia.FirewallFilteringRuleGroupsArgs(\n        ids=[normal_internet.id],\n    ),\n    time_windows=zia.FirewallFilteringRuleTimeWindowsArgs(\n        ids=[work_hours.id],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var zscalerProxyNwServices = Zia.GetFirewallFilteringNetworkServices.Invoke(new()\n    {\n        Name = \"ZSCALER_PROXY_NW_SERVICES\",\n    });\n\n    var engineering = Zia.GetDepartmentManagement.Invoke(new()\n    {\n        Name = \"Engineering\",\n    });\n\n    var normalInternet = Zia.GetGroupManagement.Invoke(new()\n    {\n        Name = \"Normal_Internet\",\n    });\n\n    var workHours = Zia.GetTimeWindow.Invoke(new()\n    {\n        Name = \"Work hours\",\n    });\n\n    var example = new Zia.FirewallFilteringRule(\"example\", new()\n    {\n        Description = \"Example\",\n        Action = \"ALLOW\",\n        State = \"ENABLED\",\n        Order = 1,\n        EnableFullLogging = true,\n        NwServices = new Zia.Inputs.FirewallFilteringRuleNwServicesArgs\n        {\n            Ids = new[]\n            {\n                zscalerProxyNwServices.Apply(getFirewallFilteringNetworkServicesResult =\u003e getFirewallFilteringNetworkServicesResult.Id),\n            },\n        },\n        Departments = new Zia.Inputs.FirewallFilteringRuleDepartmentsArgs\n        {\n            Ids = new[]\n            {\n                engineering.Apply(getDepartmentManagementResult =\u003e getDepartmentManagementResult.Id),\n            },\n        },\n        Groups = new Zia.Inputs.FirewallFilteringRuleGroupsArgs\n        {\n            Ids = new[]\n            {\n                normalInternet.Apply(getGroupManagementResult =\u003e getGroupManagementResult.Id),\n            },\n        },\n        TimeWindows = new Zia.Inputs.FirewallFilteringRuleTimeWindowsArgs\n        {\n            Ids = new[]\n            {\n                workHours.Apply(getTimeWindowResult =\u003e getTimeWindowResult.Id),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzscalerProxyNwServices, err := zia.LookupFirewallFilteringNetworkServices(ctx, \u0026zia.LookupFirewallFilteringNetworkServicesArgs{\n\t\t\tName: pulumi.StringRef(\"ZSCALER_PROXY_NW_SERVICES\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tengineering, err := zia.GetDepartmentManagement(ctx, \u0026zia.GetDepartmentManagementArgs{\n\t\t\tName: pulumi.StringRef(\"Engineering\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tnormalInternet, err := zia.GetGroupManagement(ctx, \u0026zia.GetGroupManagementArgs{\n\t\t\tName: pulumi.StringRef(\"Normal_Internet\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tworkHours, err := zia.GetTimeWindow(ctx, \u0026zia.GetTimeWindowArgs{\n\t\t\tName: pulumi.StringRef(\"Work hours\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zia.NewFirewallFilteringRule(ctx, \"example\", \u0026zia.FirewallFilteringRuleArgs{\n\t\t\tDescription:       pulumi.String(\"Example\"),\n\t\t\tAction:            pulumi.String(\"ALLOW\"),\n\t\t\tState:             pulumi.String(\"ENABLED\"),\n\t\t\tOrder:             pulumi.Int(1),\n\t\t\tEnableFullLogging: pulumi.Bool(true),\n\t\t\tNwServices: \u0026zia.FirewallFilteringRuleNwServicesArgs{\n\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\tpulumi.Int(zscalerProxyNwServices.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDepartments: \u0026zia.FirewallFilteringRuleDepartmentsArgs{\n\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\tpulumi.Int(engineering.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tGroups: \u0026zia.FirewallFilteringRuleGroupsArgs{\n\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\tpulumi.Int(normalInternet.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTimeWindows: \u0026zia.FirewallFilteringRuleTimeWindowsArgs{\n\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\tpulumi.Int(workHours.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetFirewallFilteringNetworkServicesArgs;\nimport com.pulumi.zia.inputs.GetDepartmentManagementArgs;\nimport com.pulumi.zia.inputs.GetGroupManagementArgs;\nimport com.pulumi.zia.inputs.GetTimeWindowArgs;\nimport com.pulumi.zia.FirewallFilteringRule;\nimport com.pulumi.zia.FirewallFilteringRuleArgs;\nimport com.pulumi.zia.inputs.FirewallFilteringRuleNwServicesArgs;\nimport com.pulumi.zia.inputs.FirewallFilteringRuleDepartmentsArgs;\nimport com.pulumi.zia.inputs.FirewallFilteringRuleGroupsArgs;\nimport com.pulumi.zia.inputs.FirewallFilteringRuleTimeWindowsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var zscalerProxyNwServices = ZiaFunctions.getFirewallFilteringNetworkServices(GetFirewallFilteringNetworkServicesArgs.builder()\n            .name(\"ZSCALER_PROXY_NW_SERVICES\")\n            .build());\n\n        final var engineering = ZiaFunctions.getDepartmentManagement(GetDepartmentManagementArgs.builder()\n            .name(\"Engineering\")\n            .build());\n\n        final var normalInternet = ZiaFunctions.getGroupManagement(GetGroupManagementArgs.builder()\n            .name(\"Normal_Internet\")\n            .build());\n\n        final var workHours = ZiaFunctions.getTimeWindow(GetTimeWindowArgs.builder()\n            .name(\"Work hours\")\n            .build());\n\n        var example = new FirewallFilteringRule(\"example\", FirewallFilteringRuleArgs.builder()        \n            .description(\"Example\")\n            .action(\"ALLOW\")\n            .state(\"ENABLED\")\n            .order(1)\n            .enableFullLogging(true)\n            .nwServices(FirewallFilteringRuleNwServicesArgs.builder()\n                .ids(zscalerProxyNwServices.applyValue(getFirewallFilteringNetworkServicesResult -\u003e getFirewallFilteringNetworkServicesResult.id()))\n                .build())\n            .departments(FirewallFilteringRuleDepartmentsArgs.builder()\n                .ids(engineering.applyValue(getDepartmentManagementResult -\u003e getDepartmentManagementResult.id()))\n                .build())\n            .groups(FirewallFilteringRuleGroupsArgs.builder()\n                .ids(normalInternet.applyValue(getGroupManagementResult -\u003e getGroupManagementResult.id()))\n                .build())\n            .timeWindows(FirewallFilteringRuleTimeWindowsArgs.builder()\n                .ids(workHours.applyValue(getTimeWindowResult -\u003e getTimeWindowResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: zia:FirewallFilteringRule\n    properties:\n      description: Example\n      action: ALLOW\n      state: ENABLED\n      order: 1\n      enableFullLogging: true\n      nwServices:\n        ids:\n          - ${zscalerProxyNwServices.id}\n      departments:\n        ids:\n          - ${engineering.id}\n      groups:\n        ids:\n          - ${normalInternet.id}\n      timeWindows:\n        ids:\n          - ${workHours.id}\nvariables:\n  zscalerProxyNwServices:\n    fn::invoke:\n      Function: zia:getFirewallFilteringNetworkServices\n      Arguments:\n        name: ZSCALER_PROXY_NW_SERVICES\n  engineering:\n    fn::invoke:\n      Function: zia:getDepartmentManagement\n      Arguments:\n        name: Engineering\n  normalInternet:\n    fn::invoke:\n      Function: zia:getGroupManagement\n      Arguments:\n        name: Normal_Internet\n  workHours:\n    fn::invoke:\n      Function: zia:getTimeWindow\n      Arguments:\n        name: Work hours\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_firewall_filtering_rule** can be imported by using `\u003cRULE ID\u003e` or `\u003cRULE NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/firewallFilteringRule:FirewallFilteringRule example \u003crule_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/firewallFilteringRule:FirewallFilteringRule example \u003crule_name\u003e\n```\n\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`\n"
                },
                "appServiceGroups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleAppServiceGroups:FirewallFilteringRuleAppServiceGroups",
                    "description": "Application service groups on which this rule is applied\n"
                },
                "appServices": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleAppServices:FirewallFilteringRuleAppServices",
                    "description": "Application services on which this rule is applied\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "If set to true, the default rule is applied\n"
                },
                "departments": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleDepartments:FirewallFilteringRuleDepartments",
                    "description": "Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Enter additional notes or information. The description cannot exceed 10,240 characters.\n"
                },
                "destAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.\n"
                },
                "destCountries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.\n"
                },
                "destIpCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.\n"
                },
                "destIpGroups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleDestIpGroups:FirewallFilteringRuleDestIpGroups",
                    "description": "** - (Optional) Any number of destination IP address groups that you want to control with this rule.\n"
                },
                "deviceGroups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleDeviceGroups:FirewallFilteringRuleDeviceGroups",
                    "description": "This field is applicable for devices that are managed using Zscaler Client Connector.\n"
                },
                "deviceTrustLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed\nusing Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the\nZscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.\n"
                },
                "devices": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleDevices:FirewallFilteringRuleDevices",
                    "description": "Name-ID pairs of devices for which rule must be applied.\n"
                },
                "enableFullLogging": {
                    "type": "boolean"
                },
                "groups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleGroups:FirewallFilteringRuleGroups",
                    "description": "You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "labels": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleLabels:FirewallFilteringRuleLabels",
                    "description": "Labels that are applicable to the rule.\n"
                },
                "locationGroups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleLocationGroups:FirewallFilteringRuleLocationGroups",
                    "description": "You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                },
                "locations": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleLocations:FirewallFilteringRuleLocations",
                    "description": "You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n\n* `Other Exported Arguments`\n"
                },
                "nwApplicationGroups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleNwApplicationGroups:FirewallFilteringRuleNwApplicationGroups",
                    "description": "Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify\n"
                },
                "nwApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.\n\n`source ip addresses` supports the following attributes:\n"
                },
                "nwServiceGroups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleNwServiceGroups:FirewallFilteringRuleNwServiceGroups",
                    "description": "Any number of predefined or custom network service groups to which the rule applies.\n"
                },
                "nwServices": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleNwServices:FirewallFilteringRuleNwServices",
                    "description": "When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.\n\n`network applications` supports the following attributes:\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.\n"
                },
                "predefined": {
                    "type": "boolean",
                    "description": "If set to true, a predefined rule is applied\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.\n\n`Who, Where and When` supports the following attributes:\n"
                },
                "ruleId": {
                    "type": "integer"
                },
                "srcIpGroups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleSrcIpGroups:FirewallFilteringRuleSrcIpGroups",
                    "description": "Any number of source IP address groups that you want to control with this rule.\n"
                },
                "srcIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "You can enter individual IP addresses, subnets, or address ranges.\n"
                },
                "state": {
                    "type": "string",
                    "description": "An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.\n"
                },
                "timeWindows": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleTimeWindows:FirewallFilteringRuleTimeWindows",
                    "description": "You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.\n"
                },
                "users": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleUsers:FirewallFilteringRuleUsers",
                    "description": "You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.\n"
                },
                "workloadGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleWorkloadGroup:FirewallFilteringRuleWorkloadGroup"
                    },
                    "description": "The list of preconfigured workload groups to which the policy must be applied\n"
                },
                "zpaAppSegments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleZpaAppSegment:FirewallFilteringRuleZpaAppSegment"
                    },
                    "description": "The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA\nGateway forwarding method.\n"
                }
            },
            "required": [
                "appServiceGroups",
                "appServices",
                "departments",
                "destCountries",
                "destIpGroups",
                "deviceGroups",
                "devices",
                "groups",
                "labels",
                "locationGroups",
                "locations",
                "name",
                "nwApplicationGroups",
                "nwApplications",
                "nwServiceGroups",
                "nwServices",
                "ruleId",
                "srcIpGroups",
                "timeWindows",
                "users",
                "workloadGroups",
                "zpaAppSegments"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`\n"
                },
                "appServiceGroups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleAppServiceGroups:FirewallFilteringRuleAppServiceGroups",
                    "description": "Application service groups on which this rule is applied\n"
                },
                "appServices": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleAppServices:FirewallFilteringRuleAppServices",
                    "description": "Application services on which this rule is applied\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "If set to true, the default rule is applied\n"
                },
                "departments": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleDepartments:FirewallFilteringRuleDepartments",
                    "description": "Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Enter additional notes or information. The description cannot exceed 10,240 characters.\n"
                },
                "destAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.\n"
                },
                "destCountries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.\n"
                },
                "destIpCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.\n"
                },
                "destIpGroups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleDestIpGroups:FirewallFilteringRuleDestIpGroups",
                    "description": "** - (Optional) Any number of destination IP address groups that you want to control with this rule.\n"
                },
                "deviceGroups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleDeviceGroups:FirewallFilteringRuleDeviceGroups",
                    "description": "This field is applicable for devices that are managed using Zscaler Client Connector.\n"
                },
                "deviceTrustLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed\nusing Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the\nZscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.\n"
                },
                "devices": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleDevices:FirewallFilteringRuleDevices",
                    "description": "Name-ID pairs of devices for which rule must be applied.\n"
                },
                "enableFullLogging": {
                    "type": "boolean"
                },
                "groups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleGroups:FirewallFilteringRuleGroups",
                    "description": "You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "labels": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleLabels:FirewallFilteringRuleLabels",
                    "description": "Labels that are applicable to the rule.\n"
                },
                "locationGroups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleLocationGroups:FirewallFilteringRuleLocationGroups",
                    "description": "You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                },
                "locations": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleLocations:FirewallFilteringRuleLocations",
                    "description": "You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workload group\n\n* `Other Exported Arguments`\n"
                },
                "nwApplicationGroups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleNwApplicationGroups:FirewallFilteringRuleNwApplicationGroups",
                    "description": "Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify\n"
                },
                "nwApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.\n\n`source ip addresses` supports the following attributes:\n"
                },
                "nwServiceGroups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleNwServiceGroups:FirewallFilteringRuleNwServiceGroups",
                    "description": "Any number of predefined or custom network service groups to which the rule applies.\n"
                },
                "nwServices": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleNwServices:FirewallFilteringRuleNwServices",
                    "description": "When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.\n\n`network applications` supports the following attributes:\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.\n"
                },
                "predefined": {
                    "type": "boolean",
                    "description": "If set to true, a predefined rule is applied\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.\n\n`Who, Where and When` supports the following attributes:\n"
                },
                "srcIpGroups": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleSrcIpGroups:FirewallFilteringRuleSrcIpGroups",
                    "description": "Any number of source IP address groups that you want to control with this rule.\n"
                },
                "srcIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "You can enter individual IP addresses, subnets, or address ranges.\n"
                },
                "state": {
                    "type": "string",
                    "description": "An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.\n"
                },
                "timeWindows": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleTimeWindows:FirewallFilteringRuleTimeWindows",
                    "description": "You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.\n"
                },
                "users": {
                    "$ref": "#/types/zia:index/FirewallFilteringRuleUsers:FirewallFilteringRuleUsers",
                    "description": "You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.\n"
                },
                "workloadGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleWorkloadGroup:FirewallFilteringRuleWorkloadGroup"
                    },
                    "description": "The list of preconfigured workload groups to which the policy must be applied\n"
                },
                "zpaAppSegments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleZpaAppSegment:FirewallFilteringRuleZpaAppSegment"
                    },
                    "description": "The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA\nGateway forwarding method.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallFilteringRule resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`\n"
                    },
                    "appServiceGroups": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleAppServiceGroups:FirewallFilteringRuleAppServiceGroups",
                        "description": "Application service groups on which this rule is applied\n"
                    },
                    "appServices": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleAppServices:FirewallFilteringRuleAppServices",
                        "description": "Application services on which this rule is applied\n"
                    },
                    "defaultRule": {
                        "type": "boolean",
                        "description": "If set to true, the default rule is applied\n"
                    },
                    "departments": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleDepartments:FirewallFilteringRuleDepartments",
                        "description": "Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Enter additional notes or information. The description cannot exceed 10,240 characters.\n"
                    },
                    "destAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.\n"
                    },
                    "destCountries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.\n"
                    },
                    "destIpCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.\n"
                    },
                    "destIpGroups": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleDestIpGroups:FirewallFilteringRuleDestIpGroups",
                        "description": "** - (Optional) Any number of destination IP address groups that you want to control with this rule.\n"
                    },
                    "deviceGroups": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleDeviceGroups:FirewallFilteringRuleDeviceGroups",
                        "description": "This field is applicable for devices that are managed using Zscaler Client Connector.\n"
                    },
                    "deviceTrustLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed\nusing Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the\nZscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.\n"
                    },
                    "devices": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleDevices:FirewallFilteringRuleDevices",
                        "description": "Name-ID pairs of devices for which rule must be applied.\n"
                    },
                    "enableFullLogging": {
                        "type": "boolean"
                    },
                    "groups": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleGroups:FirewallFilteringRuleGroups",
                        "description": "You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                    },
                    "labels": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleLabels:FirewallFilteringRuleLabels",
                        "description": "Labels that are applicable to the rule.\n"
                    },
                    "locationGroups": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleLocationGroups:FirewallFilteringRuleLocationGroups",
                        "description": "You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                    },
                    "locations": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleLocations:FirewallFilteringRuleLocations",
                        "description": "You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workload group\n\n* `Other Exported Arguments`\n"
                    },
                    "nwApplicationGroups": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleNwApplicationGroups:FirewallFilteringRuleNwApplicationGroups",
                        "description": "Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify\n"
                    },
                    "nwApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.\n\n`source ip addresses` supports the following attributes:\n"
                    },
                    "nwServiceGroups": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleNwServiceGroups:FirewallFilteringRuleNwServiceGroups",
                        "description": "Any number of predefined or custom network service groups to which the rule applies.\n"
                    },
                    "nwServices": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleNwServices:FirewallFilteringRuleNwServices",
                        "description": "When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.\n\n`network applications` supports the following attributes:\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.\n"
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "If set to true, a predefined rule is applied\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.\n\n`Who, Where and When` supports the following attributes:\n"
                    },
                    "ruleId": {
                        "type": "integer"
                    },
                    "srcIpGroups": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleSrcIpGroups:FirewallFilteringRuleSrcIpGroups",
                        "description": "Any number of source IP address groups that you want to control with this rule.\n"
                    },
                    "srcIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "You can enter individual IP addresses, subnets, or address ranges.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.\n"
                    },
                    "timeWindows": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleTimeWindows:FirewallFilteringRuleTimeWindows",
                        "description": "You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.\n"
                    },
                    "users": {
                        "$ref": "#/types/zia:index/FirewallFilteringRuleUsers:FirewallFilteringRuleUsers",
                        "description": "You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.\n"
                    },
                    "workloadGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/FirewallFilteringRuleWorkloadGroup:FirewallFilteringRuleWorkloadGroup"
                        },
                        "description": "The list of preconfigured workload groups to which the policy must be applied\n"
                    },
                    "zpaAppSegments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/FirewallFilteringRuleZpaAppSegment:FirewallFilteringRuleZpaAppSegment"
                        },
                        "description": "The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA\nGateway forwarding method.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/firewallFilteringServiceGroups:FirewallFilteringServiceGroups": {
            "description": "The **zia_firewall_filtering_network_service_groups** resource allows the creation and management of ZIA Cloud Firewall IP network service groups in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example1 = zia.getFirewallFilteringNetworkServices({\n    name: \"FTP\",\n});\nconst example2 = zia.getFirewallFilteringNetworkServices({\n    name: \"NETBIOS\",\n});\nconst example3 = zia.getFirewallFilteringNetworkServices({\n    name: \"DNS\",\n});\n// Add network services to a network services group\nconst example = new zia.FirewallFilteringServiceGroups(\"example\", {\n    description: \"example\",\n    services: [{\n        ids: [\n            example1.then(example1 =\u003e example1.id),\n            example2.then(example2 =\u003e example2.id),\n            example3.then(example3 =\u003e example3.id),\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nexample1 = zia.get_firewall_filtering_network_services(name=\"FTP\")\nexample2 = zia.get_firewall_filtering_network_services(name=\"NETBIOS\")\nexample3 = zia.get_firewall_filtering_network_services(name=\"DNS\")\n# Add network services to a network services group\nexample = zia.FirewallFilteringServiceGroups(\"example\",\n    description=\"example\",\n    services=[zia.FirewallFilteringServiceGroupsServiceArgs(\n        ids=[\n            example1.id,\n            example2.id,\n            example3.id,\n        ],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = Zia.GetFirewallFilteringNetworkServices.Invoke(new()\n    {\n        Name = \"FTP\",\n    });\n\n    var example2 = Zia.GetFirewallFilteringNetworkServices.Invoke(new()\n    {\n        Name = \"NETBIOS\",\n    });\n\n    var example3 = Zia.GetFirewallFilteringNetworkServices.Invoke(new()\n    {\n        Name = \"DNS\",\n    });\n\n    // Add network services to a network services group\n    var example = new Zia.FirewallFilteringServiceGroups(\"example\", new()\n    {\n        Description = \"example\",\n        Services = new[]\n        {\n            new Zia.Inputs.FirewallFilteringServiceGroupsServiceArgs\n            {\n                Ids = new[]\n                {\n                    example1.Apply(getFirewallFilteringNetworkServicesResult =\u003e getFirewallFilteringNetworkServicesResult.Id),\n                    example2.Apply(getFirewallFilteringNetworkServicesResult =\u003e getFirewallFilteringNetworkServicesResult.Id),\n                    example3.Apply(getFirewallFilteringNetworkServicesResult =\u003e getFirewallFilteringNetworkServicesResult.Id),\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample1, err := zia.LookupFirewallFilteringNetworkServices(ctx, \u0026zia.LookupFirewallFilteringNetworkServicesArgs{\n\t\t\tName: pulumi.StringRef(\"FTP\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample2, err := zia.LookupFirewallFilteringNetworkServices(ctx, \u0026zia.LookupFirewallFilteringNetworkServicesArgs{\n\t\t\tName: pulumi.StringRef(\"NETBIOS\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample3, err := zia.LookupFirewallFilteringNetworkServices(ctx, \u0026zia.LookupFirewallFilteringNetworkServicesArgs{\n\t\t\tName: pulumi.StringRef(\"DNS\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Add network services to a network services group\n\t\t_, err = zia.NewFirewallFilteringServiceGroups(ctx, \"example\", \u0026zia.FirewallFilteringServiceGroupsArgs{\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tServices: zia.FirewallFilteringServiceGroupsServiceArray{\n\t\t\t\t\u0026zia.FirewallFilteringServiceGroupsServiceArgs{\n\t\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\t\tpulumi.Int(example1.Id),\n\t\t\t\t\t\tpulumi.Int(example2.Id),\n\t\t\t\t\t\tpulumi.Int(example3.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetFirewallFilteringNetworkServicesArgs;\nimport com.pulumi.zia.FirewallFilteringServiceGroups;\nimport com.pulumi.zia.FirewallFilteringServiceGroupsArgs;\nimport com.pulumi.zia.inputs.FirewallFilteringServiceGroupsServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example1 = ZiaFunctions.getFirewallFilteringNetworkServices(GetFirewallFilteringNetworkServicesArgs.builder()\n            .name(\"FTP\")\n            .build());\n\n        final var example2 = ZiaFunctions.getFirewallFilteringNetworkServices(GetFirewallFilteringNetworkServicesArgs.builder()\n            .name(\"NETBIOS\")\n            .build());\n\n        final var example3 = ZiaFunctions.getFirewallFilteringNetworkServices(GetFirewallFilteringNetworkServicesArgs.builder()\n            .name(\"DNS\")\n            .build());\n\n        var example = new FirewallFilteringServiceGroups(\"example\", FirewallFilteringServiceGroupsArgs.builder()        \n            .description(\"example\")\n            .services(FirewallFilteringServiceGroupsServiceArgs.builder()\n                .ids(                \n                    example1.applyValue(getFirewallFilteringNetworkServicesResult -\u003e getFirewallFilteringNetworkServicesResult.id()),\n                    example2.applyValue(getFirewallFilteringNetworkServicesResult -\u003e getFirewallFilteringNetworkServicesResult.id()),\n                    example3.applyValue(getFirewallFilteringNetworkServicesResult -\u003e getFirewallFilteringNetworkServicesResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add network services to a network services group\n  example:\n    type: zia:FirewallFilteringServiceGroups\n    properties:\n      description: example\n      services:\n        - ids:\n            - ${example1.id}\n            - ${example2.id}\n            - ${example3.id}\nvariables:\n  example1:\n    fn::invoke:\n      Function: zia:getFirewallFilteringNetworkServices\n      Arguments:\n        name: FTP\n  example2:\n    fn::invoke:\n      Function: zia:getFirewallFilteringNetworkServices\n      Arguments:\n        name: NETBIOS\n  example3:\n    fn::invoke:\n      Function: zia:getFirewallFilteringNetworkServices\n      Arguments:\n        name: DNS\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**firewall_filtering_network_service_groups** can be imported by using `\u003cGROUP_ID\u003e` or `\u003cGROUP_NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/firewallFilteringServiceGroups:FirewallFilteringServiceGroups example \u003cgroup_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/firewallFilteringServiceGroups:FirewallFilteringServiceGroups example \u003cgroup_name\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the network services group\n"
                },
                "groupId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network service group\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/FirewallFilteringServiceGroupsService:FirewallFilteringServiceGroupsService"
                    },
                    "description": "Any number of network services ID to be added to the group\n"
                }
            },
            "required": [
                "groupId",
                "name",
                "services"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the network services group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network service group\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/FirewallFilteringServiceGroupsService:FirewallFilteringServiceGroupsService"
                    },
                    "description": "Any number of network services ID to be added to the group\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallFilteringServiceGroups resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the network services group\n"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the network service group\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/FirewallFilteringServiceGroupsService:FirewallFilteringServiceGroupsService"
                        },
                        "description": "Any number of network services ID to be added to the group\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/firewallFilteringSourceGroups:FirewallFilteringSourceGroups": {
            "description": "The **zia_firewall_filtering_ip_source_groups** resource allows the creation and management of ZIA Cloud Firewall IP source groups in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// Add an IP address or addresses to a new IP Source Group\nconst example = new zia.FirewallFilteringSourceGroups(\"example\", {\n    description: \"Example\",\n    ipAddresses: [\n        \"192.168.100.1\",\n        \"192.168.100.2\",\n        \"192.168.100.3\",\n    ],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# Add an IP address or addresses to a new IP Source Group\nexample = zia.FirewallFilteringSourceGroups(\"example\",\n    description=\"Example\",\n    ip_addresses=[\n        \"192.168.100.1\",\n        \"192.168.100.2\",\n        \"192.168.100.3\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add an IP address or addresses to a new IP Source Group\n    var example = new Zia.FirewallFilteringSourceGroups(\"example\", new()\n    {\n        Description = \"Example\",\n        IpAddresses = new[]\n        {\n            \"192.168.100.1\",\n            \"192.168.100.2\",\n            \"192.168.100.3\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Add an IP address or addresses to a new IP Source Group\n\t\t_, err := zia.NewFirewallFilteringSourceGroups(ctx, \"example\", \u0026zia.FirewallFilteringSourceGroupsArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tIpAddresses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.100.1\"),\n\t\t\t\tpulumi.String(\"192.168.100.2\"),\n\t\t\t\tpulumi.String(\"192.168.100.3\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.FirewallFilteringSourceGroups;\nimport com.pulumi.zia.FirewallFilteringSourceGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new FirewallFilteringSourceGroups(\"example\", FirewallFilteringSourceGroupsArgs.builder()        \n            .description(\"Example\")\n            .ipAddresses(            \n                \"192.168.100.1\",\n                \"192.168.100.2\",\n                \"192.168.100.3\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add an IP address or addresses to a new IP Source Group\n  example:\n    type: zia:FirewallFilteringSourceGroups\n    properties:\n      description: Example\n      ipAddresses:\n        - 192.168.100.1\n        - 192.168.100.2\n        - 192.168.100.3\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// Add an IP address range(s) to a new IP Source Group\nconst example = new zia.FirewallFilteringSourceGroups(\"example\", {\n    description: \"Example\",\n    ipAddresses: [\"192.0.2.1-192.0.2.10\"],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# Add an IP address range(s) to a new IP Source Group\nexample = zia.FirewallFilteringSourceGroups(\"example\",\n    description=\"Example\",\n    ip_addresses=[\"192.0.2.1-192.0.2.10\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add an IP address range(s) to a new IP Source Group\n    var example = new Zia.FirewallFilteringSourceGroups(\"example\", new()\n    {\n        Description = \"Example\",\n        IpAddresses = new[]\n        {\n            \"192.0.2.1-192.0.2.10\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Add an IP address range(s) to a new IP Source Group\n\t\t_, err := zia.NewFirewallFilteringSourceGroups(ctx, \"example\", \u0026zia.FirewallFilteringSourceGroupsArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tIpAddresses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.0.2.1-192.0.2.10\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.FirewallFilteringSourceGroups;\nimport com.pulumi.zia.FirewallFilteringSourceGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new FirewallFilteringSourceGroups(\"example\", FirewallFilteringSourceGroupsArgs.builder()        \n            .description(\"Example\")\n            .ipAddresses(\"192.0.2.1-192.0.2.10\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add an IP address range(s) to a new IP Source Group\n  example:\n    type: zia:FirewallFilteringSourceGroups\n    properties:\n      description: Example\n      ipAddresses:\n        - 192.0.2.1-192.0.2.10\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// Add subnet to a new IP Source Group\nconst example = new zia.FirewallFilteringSourceGroups(\"example\", {\n    description: \"Example\",\n    ipAddresses: [\"203.0.113.0/24\"],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# Add subnet to a new IP Source Group\nexample = zia.FirewallFilteringSourceGroups(\"example\",\n    description=\"Example\",\n    ip_addresses=[\"203.0.113.0/24\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add subnet to a new IP Source Group\n    var example = new Zia.FirewallFilteringSourceGroups(\"example\", new()\n    {\n        Description = \"Example\",\n        IpAddresses = new[]\n        {\n            \"203.0.113.0/24\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Add subnet to a new IP Source Group\n\t\t_, err := zia.NewFirewallFilteringSourceGroups(ctx, \"example\", \u0026zia.FirewallFilteringSourceGroupsArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tIpAddresses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"203.0.113.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.FirewallFilteringSourceGroups;\nimport com.pulumi.zia.FirewallFilteringSourceGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new FirewallFilteringSourceGroups(\"example\", FirewallFilteringSourceGroupsArgs.builder()        \n            .description(\"Example\")\n            .ipAddresses(\"203.0.113.0/24\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add subnet to a new IP Source Group\n  example:\n    type: zia:FirewallFilteringSourceGroups\n    properties:\n      description: Example\n      ipAddresses:\n        - 203.0.113.0/24\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_firewall_filtering_ip_source_groups** can be imported by using `\u003cGROUP_ID\u003e` or `\u003cGROUP_NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/firewallFilteringSourceGroups:FirewallFilteringSourceGroups example \u003cgroup_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/firewallFilteringSourceGroups:FirewallFilteringSourceGroups example \u003cgroup_name\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the source IP group\n"
                },
                "groupId": {
                    "type": "integer"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Source IP addresses to be added to the group. Enter any number of IP addresses. You can enter:\n* An IP address (198.51.100.100)\n* A range of IP addresses 192.0.2.1-192.0.2.10\n* An IP address with a netmask 203.0.113.0/24\n"
                },
                "name": {
                    "type": "string",
                    "description": "Source IP group name\n"
                }
            },
            "required": [
                "groupId",
                "ipAddresses",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the source IP group\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Source IP addresses to be added to the group. Enter any number of IP addresses. You can enter:\n* An IP address (198.51.100.100)\n* A range of IP addresses 192.0.2.1-192.0.2.10\n* An IP address with a netmask 203.0.113.0/24\n"
                },
                "name": {
                    "type": "string",
                    "description": "Source IP group name\n"
                }
            },
            "requiredInputs": [
                "ipAddresses"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallFilteringSourceGroups resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the source IP group\n"
                    },
                    "groupId": {
                        "type": "integer"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Source IP addresses to be added to the group. Enter any number of IP addresses. You can enter:\n* An IP address (198.51.100.100)\n* A range of IP addresses 192.0.2.1-192.0.2.10\n* An IP address with a netmask 203.0.113.0/24\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Source IP group name\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/forwardingControlRule:ForwardingControlRule": {
            "description": "\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_forwarding_control_rule** can be imported by using `\u003cRULE ID\u003e` or `\u003cRULE NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/forwardingControlRule:ForwardingControlRule example \u003crule_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/forwardingControlRule:ForwardingControlRule example \u003crule_name\u003e\n```\n\n",
            "properties": {
                "appServiceGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleAppServiceGroups:ForwardingControlRuleAppServiceGroups",
                    "description": "(list) - Application service groups on which this rule is applied\n"
                },
                "departments": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleDepartments:ForwardingControlRuleDepartments",
                    "description": "(list) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(string) - Additional information about the forwarding rule\n"
                },
                "destAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (list) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.\n"
                },
                "destCountries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (list) estination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries. Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).\n"
                },
                "destIpCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (list) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.\n"
                },
                "destIpGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleDestIpGroups:ForwardingControlRuleDestIpGroups",
                    "description": "** - (list) Any number of destination IP address groups that you want to control with this rule.\n"
                },
                "destIpv6Groups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleDestIpv6Groups:ForwardingControlRuleDestIpv6Groups",
                    "description": "** - (list) Destination IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.\n"
                },
                "ecGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleEcGroups:ForwardingControlRuleEcGroups",
                    "description": "(list) - Name-ID pairs of the Zscaler Cloud Connector groups to which the forwarding rule applies\n"
                },
                "forwardMethod": {
                    "type": "string",
                    "description": "The type of traffic forwarding method selected from the available options.\n"
                },
                "groups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleGroups:ForwardingControlRuleGroups",
                    "description": "(list) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "labels": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleLabels:ForwardingControlRuleLabels",
                    "description": "(list) Labels that are applicable to the rule.\n"
                },
                "locationGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleLocationGroups:ForwardingControlRuleLocationGroups",
                    "description": "(Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                },
                "locations": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleLocations:ForwardingControlRuleLocations",
                    "description": "(Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                },
                "nwApplicationGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleNwApplicationGroups:ForwardingControlRuleNwApplicationGroups",
                    "description": "(list) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify\n"
                },
                "nwServiceGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleNwServiceGroups:ForwardingControlRuleNwServiceGroups",
                    "description": "(list) Any number of predefined or custom network service groups to which the rule applies.\n"
                },
                "nwServices": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleNwServices:ForwardingControlRuleNwServices",
                    "description": "(list) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.\n"
                },
                "proxyGateway": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleProxyGateway:ForwardingControlRuleProxyGateway",
                    "description": "(set) The proxy gateway for which the rule is applicable. This field is applicable only for the `PROXYCHAIN` forwarding method.\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "Admin rank assigned to the forwarding rule\n"
                },
                "resCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (list) List of destination domain categories to which the rule applies.\n"
                },
                "ruleId": {
                    "type": "integer",
                    "description": "A unique identifier assigned to the forwarding rule\n"
                },
                "srcIpGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleSrcIpGroups:ForwardingControlRuleSrcIpGroups",
                    "description": "(list) Any number of source IP address groups that you want to control with this rule.\n"
                },
                "srcIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) You can enter individual IP addresses, subnets, or address ranges.\n"
                },
                "srcIpv6Groups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleSrcIpv6Groups:ForwardingControlRuleSrcIpv6Groups",
                    "description": "(list) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.\n"
                },
                "state": {
                    "type": "string",
                    "description": "(string) - Indicates whether the forwarding rule is enabled or disabled. Supported values are: `ENABLED` and `DISABLED`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The rule type selected from the available options. Supported Values: ``FORWARDING``\n"
                },
                "users": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleUsers:ForwardingControlRuleUsers",
                    "description": "(list) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.\n"
                },
                "zpaAppSegments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleZpaAppSegment:ForwardingControlRuleZpaAppSegment"
                    },
                    "description": "(set) The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ZPA` Gateway forwarding method.\n"
                },
                "zpaApplicationSegmentGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleZpaApplicationSegmentGroups:ForwardingControlRuleZpaApplicationSegmentGroups",
                    "description": "(set) List of ZPA Application Segment Groups for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).\n"
                },
                "zpaApplicationSegments": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleZpaApplicationSegments:ForwardingControlRuleZpaApplicationSegments",
                    "description": "(set) List of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).\n"
                },
                "zpaGateway": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleZpaGateway:ForwardingControlRuleZpaGateway",
                    "description": "(set) The ZPA Gateway for which this rule is applicable. This field is applicable only for the `ZPA` forwarding method.\n"
                }
            },
            "required": [
                "appServiceGroups",
                "departments",
                "destCountries",
                "destIpGroups",
                "destIpv6Groups",
                "ecGroups",
                "forwardMethod",
                "groups",
                "labels",
                "locationGroups",
                "locations",
                "name",
                "nwApplicationGroups",
                "nwServiceGroups",
                "nwServices",
                "order",
                "proxyGateway",
                "ruleId",
                "srcIpGroups",
                "srcIpv6Groups",
                "users",
                "zpaAppSegments",
                "zpaApplicationSegmentGroups",
                "zpaApplicationSegments",
                "zpaGateway"
            ],
            "inputProperties": {
                "appServiceGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleAppServiceGroups:ForwardingControlRuleAppServiceGroups",
                    "description": "(list) - Application service groups on which this rule is applied\n"
                },
                "departments": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleDepartments:ForwardingControlRuleDepartments",
                    "description": "(list) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.\n"
                },
                "description": {
                    "type": "string",
                    "description": "(string) - Additional information about the forwarding rule\n"
                },
                "destAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (list) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.\n"
                },
                "destCountries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (list) estination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries. Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).\n"
                },
                "destIpCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (list) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.\n"
                },
                "destIpGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleDestIpGroups:ForwardingControlRuleDestIpGroups",
                    "description": "** - (list) Any number of destination IP address groups that you want to control with this rule.\n"
                },
                "destIpv6Groups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleDestIpv6Groups:ForwardingControlRuleDestIpv6Groups",
                    "description": "** - (list) Destination IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.\n"
                },
                "ecGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleEcGroups:ForwardingControlRuleEcGroups",
                    "description": "(list) - Name-ID pairs of the Zscaler Cloud Connector groups to which the forwarding rule applies\n"
                },
                "forwardMethod": {
                    "type": "string",
                    "description": "The type of traffic forwarding method selected from the available options.\n"
                },
                "groups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleGroups:ForwardingControlRuleGroups",
                    "description": "(list) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "labels": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleLabels:ForwardingControlRuleLabels",
                    "description": "(list) Labels that are applicable to the rule.\n"
                },
                "locationGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleLocationGroups:ForwardingControlRuleLocationGroups",
                    "description": "(Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                },
                "locations": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleLocations:ForwardingControlRuleLocations",
                    "description": "(Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                },
                "nwApplicationGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleNwApplicationGroups:ForwardingControlRuleNwApplicationGroups",
                    "description": "(list) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify\n"
                },
                "nwServiceGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleNwServiceGroups:ForwardingControlRuleNwServiceGroups",
                    "description": "(list) Any number of predefined or custom network service groups to which the rule applies.\n"
                },
                "nwServices": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleNwServices:ForwardingControlRuleNwServices",
                    "description": "(list) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.\n"
                },
                "proxyGateway": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleProxyGateway:ForwardingControlRuleProxyGateway",
                    "description": "(set) The proxy gateway for which the rule is applicable. This field is applicable only for the `PROXYCHAIN` forwarding method.\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "Admin rank assigned to the forwarding rule\n"
                },
                "resCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (list) List of destination domain categories to which the rule applies.\n"
                },
                "srcIpGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleSrcIpGroups:ForwardingControlRuleSrcIpGroups",
                    "description": "(list) Any number of source IP address groups that you want to control with this rule.\n"
                },
                "srcIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(Optional) You can enter individual IP addresses, subnets, or address ranges.\n"
                },
                "srcIpv6Groups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleSrcIpv6Groups:ForwardingControlRuleSrcIpv6Groups",
                    "description": "(list) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.\n"
                },
                "state": {
                    "type": "string",
                    "description": "(string) - Indicates whether the forwarding rule is enabled or disabled. Supported values are: `ENABLED` and `DISABLED`.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The rule type selected from the available options. Supported Values: ``FORWARDING``\n"
                },
                "users": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleUsers:ForwardingControlRuleUsers",
                    "description": "(list) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.\n"
                },
                "zpaAppSegments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleZpaAppSegment:ForwardingControlRuleZpaAppSegment"
                    },
                    "description": "(set) The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ZPA` Gateway forwarding method.\n"
                },
                "zpaApplicationSegmentGroups": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleZpaApplicationSegmentGroups:ForwardingControlRuleZpaApplicationSegmentGroups",
                    "description": "(set) List of ZPA Application Segment Groups for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).\n"
                },
                "zpaApplicationSegments": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleZpaApplicationSegments:ForwardingControlRuleZpaApplicationSegments",
                    "description": "(set) List of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).\n"
                },
                "zpaGateway": {
                    "$ref": "#/types/zia:index/ForwardingControlRuleZpaGateway:ForwardingControlRuleZpaGateway",
                    "description": "(set) The ZPA Gateway for which this rule is applicable. This field is applicable only for the `ZPA` forwarding method.\n"
                }
            },
            "requiredInputs": [
                "forwardMethod",
                "order"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ForwardingControlRule resources.\n",
                "properties": {
                    "appServiceGroups": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleAppServiceGroups:ForwardingControlRuleAppServiceGroups",
                        "description": "(list) - Application service groups on which this rule is applied\n"
                    },
                    "departments": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleDepartments:ForwardingControlRuleDepartments",
                        "description": "(list) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) - Additional information about the forwarding rule\n"
                    },
                    "destAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (list) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.\n"
                    },
                    "destCountries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (list) estination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries. Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).\n"
                    },
                    "destIpCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (list) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.\n"
                    },
                    "destIpGroups": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleDestIpGroups:ForwardingControlRuleDestIpGroups",
                        "description": "** - (list) Any number of destination IP address groups that you want to control with this rule.\n"
                    },
                    "destIpv6Groups": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleDestIpv6Groups:ForwardingControlRuleDestIpv6Groups",
                        "description": "** - (list) Destination IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.\n"
                    },
                    "ecGroups": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleEcGroups:ForwardingControlRuleEcGroups",
                        "description": "(list) - Name-ID pairs of the Zscaler Cloud Connector groups to which the forwarding rule applies\n"
                    },
                    "forwardMethod": {
                        "type": "string",
                        "description": "The type of traffic forwarding method selected from the available options.\n"
                    },
                    "groups": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleGroups:ForwardingControlRuleGroups",
                        "description": "(list) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                    },
                    "labels": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleLabels:ForwardingControlRuleLabels",
                        "description": "(list) Labels that are applicable to the rule.\n"
                    },
                    "locationGroups": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleLocationGroups:ForwardingControlRuleLocationGroups",
                        "description": "(Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                    },
                    "locations": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleLocations:ForwardingControlRuleLocations",
                        "description": "(Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Firewall Filtering policy rule\n"
                    },
                    "nwApplicationGroups": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleNwApplicationGroups:ForwardingControlRuleNwApplicationGroups",
                        "description": "(list) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify\n"
                    },
                    "nwServiceGroups": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleNwServiceGroups:ForwardingControlRuleNwServiceGroups",
                        "description": "(list) Any number of predefined or custom network service groups to which the rule applies.\n"
                    },
                    "nwServices": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleNwServices:ForwardingControlRuleNwServices",
                        "description": "(list) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.\n"
                    },
                    "proxyGateway": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleProxyGateway:ForwardingControlRuleProxyGateway",
                        "description": "(set) The proxy gateway for which the rule is applicable. This field is applicable only for the `PROXYCHAIN` forwarding method.\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "Admin rank assigned to the forwarding rule\n"
                    },
                    "resCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (list) List of destination domain categories to which the rule applies.\n"
                    },
                    "ruleId": {
                        "type": "integer",
                        "description": "A unique identifier assigned to the forwarding rule\n"
                    },
                    "srcIpGroups": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleSrcIpGroups:ForwardingControlRuleSrcIpGroups",
                        "description": "(list) Any number of source IP address groups that you want to control with this rule.\n"
                    },
                    "srcIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional) You can enter individual IP addresses, subnets, or address ranges.\n"
                    },
                    "srcIpv6Groups": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleSrcIpv6Groups:ForwardingControlRuleSrcIpv6Groups",
                        "description": "(list) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "(string) - Indicates whether the forwarding rule is enabled or disabled. Supported values are: `ENABLED` and `DISABLED`.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The rule type selected from the available options. Supported Values: ``FORWARDING``\n"
                    },
                    "users": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleUsers:ForwardingControlRuleUsers",
                        "description": "(list) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.\n"
                    },
                    "zpaAppSegments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/ForwardingControlRuleZpaAppSegment:ForwardingControlRuleZpaAppSegment"
                        },
                        "description": "(set) The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ZPA` Gateway forwarding method.\n"
                    },
                    "zpaApplicationSegmentGroups": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleZpaApplicationSegmentGroups:ForwardingControlRuleZpaApplicationSegmentGroups",
                        "description": "(set) List of ZPA Application Segment Groups for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).\n"
                    },
                    "zpaApplicationSegments": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleZpaApplicationSegments:ForwardingControlRuleZpaApplicationSegments",
                        "description": "(set) List of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).\n"
                    },
                    "zpaGateway": {
                        "$ref": "#/types/zia:index/ForwardingControlRuleZpaGateway:ForwardingControlRuleZpaGateway",
                        "description": "(set) The ZPA Gateway for which this rule is applicable. This field is applicable only for the `ZPA` forwarding method.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\nimport * as zpa from \"@pulumi/zpa\";\n\nconst thisServerGroup = zpa.getServerGroup({\n    name: \"Server_Group_IP_Source_Anchoring\",\n});\nconst this1 = zpa.getApplicationSegment({\n    name: \"App_Segment_IP_Source_Anchoring\",\n});\nconst this2 = zpa.getApplicationSegment({\n    name: \"App_Segment_IP_Source_Anchoring2\",\n});\nconst thisForwardingControlZPAGateway = new zia.ForwardingControlZPAGateway(\"thisForwardingControlZPAGateway\", {\n    description: \"ZPA_GW01\",\n    type: \"ZPA\",\n    zpaServerGroup: {\n        externalId: thisServerGroup.then(thisServerGroup =\u003e thisServerGroup.id),\n        name: thisServerGroup.then(thisServerGroup =\u003e thisServerGroup.id),\n    },\n    zpaAppSegments: [\n        {\n            externalId: this1.then(this1 =\u003e this1.id),\n            name: this1.then(this1 =\u003e this1.name),\n        },\n        {\n            externalId: this2.then(this2 =\u003e this2.id),\n            name: this2.then(this2 =\u003e this2.name),\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_zpa as zpa\nimport zscaler_pulumi_zia as zia\n\nthis_server_group = zpa.get_server_group(name=\"Server_Group_IP_Source_Anchoring\")\nthis1 = zpa.get_application_segment(name=\"App_Segment_IP_Source_Anchoring\")\nthis2 = zpa.get_application_segment(name=\"App_Segment_IP_Source_Anchoring2\")\nthis_forwarding_control_zpa_gateway = zia.ForwardingControlZPAGateway(\"thisForwardingControlZPAGateway\",\n    description=\"ZPA_GW01\",\n    type=\"ZPA\",\n    zpa_server_group=zia.ForwardingControlZPAGatewayZpaServerGroupArgs(\n        external_id=this_server_group.id,\n        name=this_server_group.id,\n    ),\n    zpa_app_segments=[\n        zia.ForwardingControlZPAGatewayZpaAppSegmentArgs(\n            external_id=this1.id,\n            name=this1.name,\n        ),\n        zia.ForwardingControlZPAGatewayZpaAppSegmentArgs(\n            external_id=this2.id,\n            name=this2.name,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\nusing Zpa = Pulumi.Zpa;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var thisServerGroup = Zpa.GetServerGroup.Invoke(new()\n    {\n        Name = \"Server_Group_IP_Source_Anchoring\",\n    });\n\n    var this1 = Zpa.GetApplicationSegment.Invoke(new()\n    {\n        Name = \"App_Segment_IP_Source_Anchoring\",\n    });\n\n    var this2 = Zpa.GetApplicationSegment.Invoke(new()\n    {\n        Name = \"App_Segment_IP_Source_Anchoring2\",\n    });\n\n    var thisForwardingControlZPAGateway = new Zia.ForwardingControlZPAGateway(\"thisForwardingControlZPAGateway\", new()\n    {\n        Description = \"ZPA_GW01\",\n        Type = \"ZPA\",\n        ZpaServerGroup = new Zia.Inputs.ForwardingControlZPAGatewayZpaServerGroupArgs\n        {\n            ExternalId = thisServerGroup.Apply(getServerGroupResult =\u003e getServerGroupResult.Id),\n            Name = thisServerGroup.Apply(getServerGroupResult =\u003e getServerGroupResult.Id),\n        },\n        ZpaAppSegments = new[]\n        {\n            new Zia.Inputs.ForwardingControlZPAGatewayZpaAppSegmentArgs\n            {\n                ExternalId = this1.Apply(getApplicationSegmentResult =\u003e getApplicationSegmentResult.Id),\n                Name = this1.Apply(getApplicationSegmentResult =\u003e getApplicationSegmentResult.Name),\n            },\n            new Zia.Inputs.ForwardingControlZPAGatewayZpaAppSegmentArgs\n            {\n                ExternalId = this2.Apply(getApplicationSegmentResult =\u003e getApplicationSegmentResult.Id),\n                Name = this2.Apply(getApplicationSegmentResult =\u003e getApplicationSegmentResult.Name),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n\t\"github.com/zscaler/pulumi-zpa/sdk/go/zpa\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthisServerGroup, err := zpa.LookupServerGroup(ctx, \u0026zpa.LookupServerGroupArgs{\n\t\t\tName: pulumi.StringRef(\"Server_Group_IP_Source_Anchoring\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tthis1, err := zpa.LookupApplicationSegment(ctx, \u0026zpa.LookupApplicationSegmentArgs{\n\t\t\tName: pulumi.StringRef(\"App_Segment_IP_Source_Anchoring\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tthis2, err := zpa.LookupApplicationSegment(ctx, \u0026zpa.LookupApplicationSegmentArgs{\n\t\t\tName: pulumi.StringRef(\"App_Segment_IP_Source_Anchoring2\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zia.NewForwardingControlZPAGateway(ctx, \"thisForwardingControlZPAGateway\", \u0026zia.ForwardingControlZPAGatewayArgs{\n\t\t\tDescription: pulumi.String(\"ZPA_GW01\"),\n\t\t\tType:        pulumi.String(\"ZPA\"),\n\t\t\tZpaServerGroup: \u0026zia.ForwardingControlZPAGatewayZpaServerGroupArgs{\n\t\t\t\tExternalId: pulumi.String(thisServerGroup.Id),\n\t\t\t\tName:       pulumi.String(thisServerGroup.Id),\n\t\t\t},\n\t\t\tZpaAppSegments: zia.ForwardingControlZPAGatewayZpaAppSegmentArray{\n\t\t\t\t\u0026zia.ForwardingControlZPAGatewayZpaAppSegmentArgs{\n\t\t\t\t\tExternalId: pulumi.String(this1.Id),\n\t\t\t\t\tName:       pulumi.String(this1.Name),\n\t\t\t\t},\n\t\t\t\t\u0026zia.ForwardingControlZPAGatewayZpaAppSegmentArgs{\n\t\t\t\t\tExternalId: pulumi.String(this2.Id),\n\t\t\t\t\tName:       pulumi.String(this2.Name),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zpa.ZpaFunctions;\nimport com.pulumi.zpa.inputs.GetServerGroupArgs;\nimport com.pulumi.zpa.inputs.GetApplicationSegmentArgs;\nimport com.pulumi.zia.ForwardingControlZPAGateway;\nimport com.pulumi.zia.ForwardingControlZPAGatewayArgs;\nimport com.pulumi.zia.inputs.ForwardingControlZPAGatewayZpaServerGroupArgs;\nimport com.pulumi.zia.inputs.ForwardingControlZPAGatewayZpaAppSegmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var thisServerGroup = ZpaFunctions.getServerGroup(GetServerGroupArgs.builder()\n            .name(\"Server_Group_IP_Source_Anchoring\")\n            .build());\n\n        final var this1 = ZpaFunctions.getApplicationSegment(GetApplicationSegmentArgs.builder()\n            .name(\"App_Segment_IP_Source_Anchoring\")\n            .build());\n\n        final var this2 = ZpaFunctions.getApplicationSegment(GetApplicationSegmentArgs.builder()\n            .name(\"App_Segment_IP_Source_Anchoring2\")\n            .build());\n\n        var thisForwardingControlZPAGateway = new ForwardingControlZPAGateway(\"thisForwardingControlZPAGateway\", ForwardingControlZPAGatewayArgs.builder()        \n            .description(\"ZPA_GW01\")\n            .type(\"ZPA\")\n            .zpaServerGroup(ForwardingControlZPAGatewayZpaServerGroupArgs.builder()\n                .externalId(thisServerGroup.applyValue(getServerGroupResult -\u003e getServerGroupResult.id()))\n                .name(thisServerGroup.applyValue(getServerGroupResult -\u003e getServerGroupResult.id()))\n                .build())\n            .zpaAppSegments(            \n                ForwardingControlZPAGatewayZpaAppSegmentArgs.builder()\n                    .externalId(this1.applyValue(getApplicationSegmentResult -\u003e getApplicationSegmentResult.id()))\n                    .name(this1.applyValue(getApplicationSegmentResult -\u003e getApplicationSegmentResult.name()))\n                    .build(),\n                ForwardingControlZPAGatewayZpaAppSegmentArgs.builder()\n                    .externalId(this2.applyValue(getApplicationSegmentResult -\u003e getApplicationSegmentResult.id()))\n                    .name(this2.applyValue(getApplicationSegmentResult -\u003e getApplicationSegmentResult.name()))\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  thisForwardingControlZPAGateway:\n    type: zia:ForwardingControlZPAGateway\n    properties:\n      description: ZPA_GW01\n      type: ZPA\n      zpaServerGroup:\n        externalId: ${thisServerGroup.id}\n        name: ${thisServerGroup.id}\n      zpaAppSegments:\n        - externalId: ${this1.id}\n          name: ${this1.name}\n        - externalId: ${this2.id}\n          name: ${this2.name}\nvariables:\n  thisServerGroup:\n    fn::invoke:\n      Function: zpa:getServerGroup\n      Arguments:\n        name: Server_Group_IP_Source_Anchoring\n  this1:\n    fn::invoke:\n      Function: zpa:getApplicationSegment\n      Arguments:\n        name: App_Segment_IP_Source_Anchoring\n  this2:\n    fn::invoke:\n      Function: zpa:getApplicationSegment\n      Arguments:\n        name: App_Segment_IP_Source_Anchoring2\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**forwarding_control_zpa_gateway** can be imported by using `\u003cGATEWAY_ID\u003e` or `\u003cGATEWAY_NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway example \u003cgateway_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway example \u003cgateway_name\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(string) - Additional details about the ZPA gateway\n"
                },
                "gatewayId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "The configured name of the entity\n"
                },
                "type": {
                    "type": "string",
                    "description": "(string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``\n"
                },
                "zpaAppSegments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/ForwardingControlZPAGatewayZpaAppSegment:ForwardingControlZPAGatewayZpaAppSegment"
                    },
                    "description": "The ZPA Server Group that is configured for Source IP Anchoring\n"
                },
                "zpaServerGroup": {
                    "$ref": "#/types/zia:index/ForwardingControlZPAGatewayZpaServerGroup:ForwardingControlZPAGatewayZpaServerGroup",
                    "description": "The ZPA Server Group that is configured for Source IP Anchoring\n"
                }
            },
            "required": [
                "gatewayId",
                "name",
                "zpaAppSegments",
                "zpaServerGroup"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "(string) - Additional details about the ZPA gateway\n"
                },
                "name": {
                    "type": "string",
                    "description": "The configured name of the entity\n"
                },
                "type": {
                    "type": "string",
                    "description": "(string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``\n"
                },
                "zpaAppSegments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/ForwardingControlZPAGatewayZpaAppSegment:ForwardingControlZPAGatewayZpaAppSegment"
                    },
                    "description": "The ZPA Server Group that is configured for Source IP Anchoring\n"
                },
                "zpaServerGroup": {
                    "$ref": "#/types/zia:index/ForwardingControlZPAGatewayZpaServerGroup:ForwardingControlZPAGatewayZpaServerGroup",
                    "description": "The ZPA Server Group that is configured for Source IP Anchoring\n"
                }
            },
            "requiredInputs": [
                "zpaAppSegments",
                "zpaServerGroup"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ForwardingControlZPAGateway resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(string) - Additional details about the ZPA gateway\n"
                    },
                    "gatewayId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "The configured name of the entity\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``\n"
                    },
                    "zpaAppSegments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/ForwardingControlZPAGatewayZpaAppSegment:ForwardingControlZPAGatewayZpaAppSegment"
                        },
                        "description": "The ZPA Server Group that is configured for Source IP Anchoring\n"
                    },
                    "zpaServerGroup": {
                        "$ref": "#/types/zia:index/ForwardingControlZPAGatewayZpaServerGroup:ForwardingControlZPAGatewayZpaServerGroup",
                        "description": "The ZPA Server Group that is configured for Source IP Anchoring\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/locationManagement:LocationManagement": {
            "description": "The **zia_location_management** resource allows the creation and management of ZIA locations in the Zscaler Internet Access. This resource can then be associated with a:\n\n* Static IP resource\n* GRE Tunnel resource\n* VPN credentials resource\n* URL filtering and firewall filtering rules\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\nconst usaSjc37TrafficForwardingVPNCredentials = new zia.TrafficForwardingVPNCredentials(\"usaSjc37TrafficForwardingVPNCredentials\", {\n    type: \"UFQDN\",\n    fqdn: \"usa_sjc37@acme.com\",\n    comments: \"USA - San Jose IPSec Tunnel\",\n    preSharedKey: \"P@ass0rd123!\",\n});\nconst usaSjc37TrafficForwardingStaticIP = new zia.TrafficForwardingStaticIP(\"usaSjc37TrafficForwardingStaticIP\", {\n    ipAddress: \"1.1.1.1\",\n    routableIp: true,\n    comment: \"SJC37 - Static IP\",\n    geoOverride: false,\n});\n// ZIA Location Management\nconst usaSjc37LocationManagement = new zia.LocationManagement(\"usaSjc37LocationManagement\", {\n    description: \"Created with Terraform\",\n    country: \"UNITED_STATES\",\n    tz: \"UNITED_STATES_AMERICA_LOS_ANGELES\",\n    authRequired: true,\n    idleTimeInMinutes: 720,\n    displayTimeUnit: \"HOUR\",\n    surrogateIp: true,\n    xffForwardEnabled: true,\n    ofwEnabled: true,\n    ipsControl: true,\n    ipAddresses: [usaSjc37TrafficForwardingStaticIP.ipAddress],\n    vpnCredentials: [{\n        id: usaSjc37TrafficForwardingVPNCredentials.id,\n        type: usaSjc37TrafficForwardingVPNCredentials.type,\n    }],\n}, {\n    dependsOn: [\n        usaSjc37TrafficForwardingVPNCredentials,\n        usaSjc37TrafficForwardingStaticIP,\n    ],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\nusa_sjc37_traffic_forwarding_vpn_credentials = zia.TrafficForwardingVPNCredentials(\"usaSjc37TrafficForwardingVPNCredentials\",\n    type=\"UFQDN\",\n    fqdn=\"usa_sjc37@acme.com\",\n    comments=\"USA - San Jose IPSec Tunnel\",\n    pre_shared_key=\"P@ass0rd123!\")\nusa_sjc37_traffic_forwarding_static_ip = zia.TrafficForwardingStaticIP(\"usaSjc37TrafficForwardingStaticIP\",\n    ip_address=\"1.1.1.1\",\n    routable_ip=True,\n    comment=\"SJC37 - Static IP\",\n    geo_override=False)\n# ZIA Location Management\nusa_sjc37_location_management = zia.LocationManagement(\"usaSjc37LocationManagement\",\n    description=\"Created with Terraform\",\n    country=\"UNITED_STATES\",\n    tz=\"UNITED_STATES_AMERICA_LOS_ANGELES\",\n    auth_required=True,\n    idle_time_in_minutes=720,\n    display_time_unit=\"HOUR\",\n    surrogate_ip=True,\n    xff_forward_enabled=True,\n    ofw_enabled=True,\n    ips_control=True,\n    ip_addresses=[usa_sjc37_traffic_forwarding_static_ip.ip_address],\n    vpn_credentials=[zia.LocationManagementVpnCredentialArgs(\n        id=usa_sjc37_traffic_forwarding_vpn_credentials.id,\n        type=usa_sjc37_traffic_forwarding_vpn_credentials.type,\n    )],\n    opts=pulumi.ResourceOptions(depends_on=[\n            usa_sjc37_traffic_forwarding_vpn_credentials,\n            usa_sjc37_traffic_forwarding_static_ip,\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var usaSjc37TrafficForwardingVPNCredentials = new Zia.TrafficForwardingVPNCredentials(\"usaSjc37TrafficForwardingVPNCredentials\", new()\n    {\n        Type = \"UFQDN\",\n        Fqdn = \"usa_sjc37@acme.com\",\n        Comments = \"USA - San Jose IPSec Tunnel\",\n        PreSharedKey = \"P@ass0rd123!\",\n    });\n\n    var usaSjc37TrafficForwardingStaticIP = new Zia.TrafficForwardingStaticIP(\"usaSjc37TrafficForwardingStaticIP\", new()\n    {\n        IpAddress = \"1.1.1.1\",\n        RoutableIp = true,\n        Comment = \"SJC37 - Static IP\",\n        GeoOverride = false,\n    });\n\n    // ZIA Location Management\n    var usaSjc37LocationManagement = new Zia.LocationManagement(\"usaSjc37LocationManagement\", new()\n    {\n        Description = \"Created with Terraform\",\n        Country = \"UNITED_STATES\",\n        Tz = \"UNITED_STATES_AMERICA_LOS_ANGELES\",\n        AuthRequired = true,\n        IdleTimeInMinutes = 720,\n        DisplayTimeUnit = \"HOUR\",\n        SurrogateIp = true,\n        XffForwardEnabled = true,\n        OfwEnabled = true,\n        IpsControl = true,\n        IpAddresses = new[]\n        {\n            usaSjc37TrafficForwardingStaticIP.IpAddress,\n        },\n        VpnCredentials = new[]\n        {\n            new Zia.Inputs.LocationManagementVpnCredentialArgs\n            {\n                Id = usaSjc37TrafficForwardingVPNCredentials.Id,\n                Type = usaSjc37TrafficForwardingVPNCredentials.Type,\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            usaSjc37TrafficForwardingVPNCredentials,\n            usaSjc37TrafficForwardingStaticIP,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tusaSjc37TrafficForwardingVPNCredentials, err := zia.NewTrafficForwardingVPNCredentials(ctx, \"usaSjc37TrafficForwardingVPNCredentials\", \u0026zia.TrafficForwardingVPNCredentialsArgs{\n\t\t\tType:         pulumi.String(\"UFQDN\"),\n\t\t\tFqdn:         pulumi.String(\"usa_sjc37@acme.com\"),\n\t\t\tComments:     pulumi.String(\"USA - San Jose IPSec Tunnel\"),\n\t\t\tPreSharedKey: pulumi.String(\"P@ass0rd123!\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tusaSjc37TrafficForwardingStaticIP, err := zia.NewTrafficForwardingStaticIP(ctx, \"usaSjc37TrafficForwardingStaticIP\", \u0026zia.TrafficForwardingStaticIPArgs{\n\t\t\tIpAddress:   pulumi.String(\"1.1.1.1\"),\n\t\t\tRoutableIp:  pulumi.Bool(true),\n\t\t\tComment:     pulumi.String(\"SJC37 - Static IP\"),\n\t\t\tGeoOverride: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ZIA Location Management\n\t\t_, err = zia.NewLocationManagement(ctx, \"usaSjc37LocationManagement\", \u0026zia.LocationManagementArgs{\n\t\t\tDescription:       pulumi.String(\"Created with Terraform\"),\n\t\t\tCountry:           pulumi.String(\"UNITED_STATES\"),\n\t\t\tTz:                pulumi.String(\"UNITED_STATES_AMERICA_LOS_ANGELES\"),\n\t\t\tAuthRequired:      pulumi.Bool(true),\n\t\t\tIdleTimeInMinutes: pulumi.Int(720),\n\t\t\tDisplayTimeUnit:   pulumi.String(\"HOUR\"),\n\t\t\tSurrogateIp:       pulumi.Bool(true),\n\t\t\tXffForwardEnabled: pulumi.Bool(true),\n\t\t\tOfwEnabled:        pulumi.Bool(true),\n\t\t\tIpsControl:        pulumi.Bool(true),\n\t\t\tIpAddresses: pulumi.StringArray{\n\t\t\t\tusaSjc37TrafficForwardingStaticIP.IpAddress,\n\t\t\t},\n\t\t\tVpnCredentials: zia.LocationManagementVpnCredentialArray{\n\t\t\t\t\u0026zia.LocationManagementVpnCredentialArgs{\n\t\t\t\t\tId:   usaSjc37TrafficForwardingVPNCredentials.ID(),\n\t\t\t\t\tType: usaSjc37TrafficForwardingVPNCredentials.Type,\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tusaSjc37TrafficForwardingVPNCredentials,\n\t\t\tusaSjc37TrafficForwardingStaticIP,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.TrafficForwardingVPNCredentials;\nimport com.pulumi.zia.TrafficForwardingVPNCredentialsArgs;\nimport com.pulumi.zia.TrafficForwardingStaticIP;\nimport com.pulumi.zia.TrafficForwardingStaticIPArgs;\nimport com.pulumi.zia.LocationManagement;\nimport com.pulumi.zia.LocationManagementArgs;\nimport com.pulumi.zia.inputs.LocationManagementVpnCredentialArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var usaSjc37TrafficForwardingVPNCredentials = new TrafficForwardingVPNCredentials(\"usaSjc37TrafficForwardingVPNCredentials\", TrafficForwardingVPNCredentialsArgs.builder()        \n            .type(\"UFQDN\")\n            .fqdn(\"usa_sjc37@acme.com\")\n            .comments(\"USA - San Jose IPSec Tunnel\")\n            .preSharedKey(\"P@ass0rd123!\")\n            .build());\n\n        var usaSjc37TrafficForwardingStaticIP = new TrafficForwardingStaticIP(\"usaSjc37TrafficForwardingStaticIP\", TrafficForwardingStaticIPArgs.builder()        \n            .ipAddress(\"1.1.1.1\")\n            .routableIp(true)\n            .comment(\"SJC37 - Static IP\")\n            .geoOverride(false)\n            .build());\n\n        var usaSjc37LocationManagement = new LocationManagement(\"usaSjc37LocationManagement\", LocationManagementArgs.builder()        \n            .description(\"Created with Terraform\")\n            .country(\"UNITED_STATES\")\n            .tz(\"UNITED_STATES_AMERICA_LOS_ANGELES\")\n            .authRequired(true)\n            .idleTimeInMinutes(720)\n            .displayTimeUnit(\"HOUR\")\n            .surrogateIp(true)\n            .xffForwardEnabled(true)\n            .ofwEnabled(true)\n            .ipsControl(true)\n            .ipAddresses(usaSjc37TrafficForwardingStaticIP.ipAddress())\n            .vpnCredentials(LocationManagementVpnCredentialArgs.builder()\n                .id(usaSjc37TrafficForwardingVPNCredentials.id())\n                .type(usaSjc37TrafficForwardingVPNCredentials.type())\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    usaSjc37TrafficForwardingVPNCredentials,\n                    usaSjc37TrafficForwardingStaticIP)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZIA Location Management\n  usaSjc37LocationManagement:\n    type: zia:LocationManagement\n    properties:\n      description: Created with Terraform\n      country: UNITED_STATES\n      tz: UNITED_STATES_AMERICA_LOS_ANGELES\n      authRequired: true\n      idleTimeInMinutes: 720\n      displayTimeUnit: HOUR\n      surrogateIp: true\n      xffForwardEnabled: true\n      ofwEnabled: true\n      ipsControl: true\n      ipAddresses:\n        - ${usaSjc37TrafficForwardingStaticIP.ipAddress}\n      vpnCredentials:\n        - id: ${usaSjc37TrafficForwardingVPNCredentials.id}\n          type: ${usaSjc37TrafficForwardingVPNCredentials.type}\n    options:\n      dependson:\n        - ${usaSjc37TrafficForwardingVPNCredentials}\n        - ${usaSjc37TrafficForwardingStaticIP}\n  usaSjc37TrafficForwardingVPNCredentials:\n    type: zia:TrafficForwardingVPNCredentials\n    properties:\n      type: UFQDN\n      fqdn: usa_sjc37@acme.com\n      comments: USA - San Jose IPSec Tunnel\n      preSharedKey: P@ass0rd123!\n  usaSjc37TrafficForwardingStaticIP:\n    type: zia:TrafficForwardingStaticIP\n    properties:\n      ipAddress: 1.1.1.1\n      routableIp: true\n      comment: SJC37 - Static IP\n      geoOverride: false\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_location_management** can be imported by using `\u003cLOCATION_ID\u003e` or `\u003cLOCATION_NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/locationManagement:LocationManagement example \u003clocation_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/locationManagement:LocationManagement example \u003clocation_name\u003e\n```\n\n",
            "properties": {
                "aupBlockInternetUntilAccepted": {
                    "type": "boolean",
                    "description": "For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.\n"
                },
                "aupEnabled": {
                    "type": "boolean",
                    "description": "Enable AUP. When set to true, AUP is enabled for the location.\n"
                },
                "aupForceSslInspection": {
                    "type": "boolean",
                    "description": "For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.\n"
                },
                "aupTimeoutInDays": {
                    "type": "integer",
                    "description": "Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.\n"
                },
                "authRequired": {
                    "type": "boolean",
                    "description": "Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.\n"
                },
                "basicAuthEnabled": {
                    "type": "boolean",
                    "description": "Enable Basic Authentication at the location\n"
                },
                "cautionEnabled": {
                    "type": "boolean",
                    "description": "Enable Caution. When set to true, a caution notifcation is enabled for the location.\n"
                },
                "country": {
                    "type": "string",
                    "description": "Country\n"
                },
                "description": {
                    "type": "string",
                    "description": "Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.\n"
                },
                "digestAuthEnabled": {
                    "type": "boolean",
                    "description": "Enable Digest Authentication at the location\n"
                },
                "displayTimeUnit": {
                    "type": "string",
                    "description": "Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.\n"
                },
                "dnBandwidth": {
                    "type": "integer",
                    "description": "Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                },
                "idleTimeInMinutes": {
                    "type": "integer",
                    "description": "Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.\n"
                },
                "iotDiscoveryEnabled": {
                    "type": "boolean",
                    "description": "Enable IOT Discovery at the location\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)). The value is required if `vpn_credentials` are not defined.\n"
                },
                "ipsControl": {
                    "type": "boolean",
                    "description": "Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.\n"
                },
                "ipv6Dns64prefix": {
                    "type": "boolean",
                    "description": "Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64 prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of supported prefixes. This field is applicable only if ipv6Enabled is set is true.\n"
                },
                "ipv6Enabled": {
                    "type": "boolean",
                    "description": "If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.\n"
                },
                "kerberosAuthEnabled": {
                    "type": "boolean",
                    "description": "Enable Kerberos Authentication at the location\n"
                },
                "locationId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "The configured name of the entity\n"
                },
                "ofwEnabled": {
                    "type": "boolean",
                    "description": "Enable Firewall. When set to true, Firewall is enabled for the location.\n"
                },
                "other6Sublocation": {
                    "type": "boolean",
                    "description": "If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.\n"
                },
                "otherSublocation": {
                    "type": "boolean",
                    "description": "If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.\n"
                },
                "parentId": {
                    "type": "integer",
                    "description": "Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`\n"
                },
                "ports": {
                    "type": "string",
                    "description": "IP ports that are associated with the location.\n"
                },
                "profile": {
                    "type": "string",
                    "description": "Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`. The supported options are: `NONE`, `CORPORATE`, `SERVER`, `GUESTWIFI`, `IOT`, `WORKLOAD`.\n"
                },
                "sslScanEnabled": {
                    "type": "boolean",
                    "description": "This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                },
                "surrogateIp": {
                    "type": "boolean",
                    "description": "Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.\n"
                },
                "surrogateIpEnforcedForKnownBrowsers": {
                    "type": "boolean",
                    "description": "Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.\n"
                },
                "surrogateRefreshTimeInMinutes": {
                    "type": "integer",
                    "description": "Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.\n"
                },
                "surrogateRefreshTimeUnit": {
                    "type": "string",
                    "description": "Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.\n"
                },
                "tz": {
                    "type": "string",
                    "description": "Timezone of the location. If not specified, it defaults to GMT.\n"
                },
                "upBandwidth": {
                    "type": "integer",
                    "description": "Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                },
                "vpnCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/LocationManagementVpnCredential:LocationManagementVpnCredential"
                    }
                },
                "xffForwardEnabled": {
                    "type": "boolean",
                    "description": "Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.\n"
                },
                "zappSslScanEnabled": {
                    "type": "boolean",
                    "description": "This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                }
            },
            "required": [
                "aupBlockInternetUntilAccepted",
                "aupEnabled",
                "aupForceSslInspection",
                "authRequired",
                "basicAuthEnabled",
                "cautionEnabled",
                "country",
                "digestAuthEnabled",
                "iotDiscoveryEnabled",
                "ipsControl",
                "kerberosAuthEnabled",
                "locationId",
                "name",
                "ofwEnabled",
                "other6Sublocation",
                "otherSublocation",
                "profile",
                "sslScanEnabled",
                "surrogateIp",
                "surrogateIpEnforcedForKnownBrowsers",
                "tz",
                "xffForwardEnabled",
                "zappSslScanEnabled"
            ],
            "inputProperties": {
                "aupBlockInternetUntilAccepted": {
                    "type": "boolean",
                    "description": "For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.\n"
                },
                "aupEnabled": {
                    "type": "boolean",
                    "description": "Enable AUP. When set to true, AUP is enabled for the location.\n"
                },
                "aupForceSslInspection": {
                    "type": "boolean",
                    "description": "For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.\n"
                },
                "aupTimeoutInDays": {
                    "type": "integer",
                    "description": "Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.\n"
                },
                "authRequired": {
                    "type": "boolean",
                    "description": "Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.\n"
                },
                "basicAuthEnabled": {
                    "type": "boolean",
                    "description": "Enable Basic Authentication at the location\n"
                },
                "cautionEnabled": {
                    "type": "boolean",
                    "description": "Enable Caution. When set to true, a caution notifcation is enabled for the location.\n"
                },
                "country": {
                    "type": "string",
                    "description": "Country\n"
                },
                "description": {
                    "type": "string",
                    "description": "Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.\n"
                },
                "digestAuthEnabled": {
                    "type": "boolean",
                    "description": "Enable Digest Authentication at the location\n"
                },
                "displayTimeUnit": {
                    "type": "string",
                    "description": "Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.\n"
                },
                "dnBandwidth": {
                    "type": "integer",
                    "description": "Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                },
                "idleTimeInMinutes": {
                    "type": "integer",
                    "description": "Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.\n"
                },
                "iotDiscoveryEnabled": {
                    "type": "boolean",
                    "description": "Enable IOT Discovery at the location\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)). The value is required if `vpn_credentials` are not defined.\n"
                },
                "ipsControl": {
                    "type": "boolean",
                    "description": "Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.\n"
                },
                "ipv6Dns64prefix": {
                    "type": "boolean",
                    "description": "Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64 prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of supported prefixes. This field is applicable only if ipv6Enabled is set is true.\n"
                },
                "ipv6Enabled": {
                    "type": "boolean",
                    "description": "If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.\n"
                },
                "kerberosAuthEnabled": {
                    "type": "boolean",
                    "description": "Enable Kerberos Authentication at the location\n"
                },
                "name": {
                    "type": "string",
                    "description": "The configured name of the entity\n"
                },
                "ofwEnabled": {
                    "type": "boolean",
                    "description": "Enable Firewall. When set to true, Firewall is enabled for the location.\n"
                },
                "other6Sublocation": {
                    "type": "boolean",
                    "description": "If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.\n"
                },
                "otherSublocation": {
                    "type": "boolean",
                    "description": "If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.\n"
                },
                "parentId": {
                    "type": "integer",
                    "description": "Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`\n"
                },
                "ports": {
                    "type": "string",
                    "description": "IP ports that are associated with the location.\n"
                },
                "profile": {
                    "type": "string",
                    "description": "Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`. The supported options are: `NONE`, `CORPORATE`, `SERVER`, `GUESTWIFI`, `IOT`, `WORKLOAD`.\n"
                },
                "sslScanEnabled": {
                    "type": "boolean",
                    "description": "This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                },
                "surrogateIp": {
                    "type": "boolean",
                    "description": "Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.\n"
                },
                "surrogateIpEnforcedForKnownBrowsers": {
                    "type": "boolean",
                    "description": "Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.\n"
                },
                "surrogateRefreshTimeInMinutes": {
                    "type": "integer",
                    "description": "Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.\n"
                },
                "surrogateRefreshTimeUnit": {
                    "type": "string",
                    "description": "Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.\n"
                },
                "tz": {
                    "type": "string",
                    "description": "Timezone of the location. If not specified, it defaults to GMT.\n"
                },
                "upBandwidth": {
                    "type": "integer",
                    "description": "Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                },
                "vpnCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/LocationManagementVpnCredential:LocationManagementVpnCredential"
                    }
                },
                "xffForwardEnabled": {
                    "type": "boolean",
                    "description": "Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.\n"
                },
                "zappSslScanEnabled": {
                    "type": "boolean",
                    "description": "This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocationManagement resources.\n",
                "properties": {
                    "aupBlockInternetUntilAccepted": {
                        "type": "boolean",
                        "description": "For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.\n"
                    },
                    "aupEnabled": {
                        "type": "boolean",
                        "description": "Enable AUP. When set to true, AUP is enabled for the location.\n"
                    },
                    "aupForceSslInspection": {
                        "type": "boolean",
                        "description": "For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.\n"
                    },
                    "aupTimeoutInDays": {
                        "type": "integer",
                        "description": "Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.\n"
                    },
                    "authRequired": {
                        "type": "boolean",
                        "description": "Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.\n"
                    },
                    "basicAuthEnabled": {
                        "type": "boolean",
                        "description": "Enable Basic Authentication at the location\n"
                    },
                    "cautionEnabled": {
                        "type": "boolean",
                        "description": "Enable Caution. When set to true, a caution notifcation is enabled for the location.\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.\n"
                    },
                    "digestAuthEnabled": {
                        "type": "boolean",
                        "description": "Enable Digest Authentication at the location\n"
                    },
                    "displayTimeUnit": {
                        "type": "string",
                        "description": "Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.\n"
                    },
                    "dnBandwidth": {
                        "type": "integer",
                        "description": "Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                    },
                    "idleTimeInMinutes": {
                        "type": "integer",
                        "description": "Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.\n"
                    },
                    "iotDiscoveryEnabled": {
                        "type": "boolean",
                        "description": "Enable IOT Discovery at the location\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)). The value is required if `vpn_credentials` are not defined.\n"
                    },
                    "ipsControl": {
                        "type": "boolean",
                        "description": "Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.\n"
                    },
                    "ipv6Dns64prefix": {
                        "type": "boolean",
                        "description": "Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64 prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of supported prefixes. This field is applicable only if ipv6Enabled is set is true.\n"
                    },
                    "ipv6Enabled": {
                        "type": "boolean",
                        "description": "If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.\n"
                    },
                    "kerberosAuthEnabled": {
                        "type": "boolean",
                        "description": "Enable Kerberos Authentication at the location\n"
                    },
                    "locationId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "The configured name of the entity\n"
                    },
                    "ofwEnabled": {
                        "type": "boolean",
                        "description": "Enable Firewall. When set to true, Firewall is enabled for the location.\n"
                    },
                    "other6Sublocation": {
                        "type": "boolean",
                        "description": "If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.\n"
                    },
                    "otherSublocation": {
                        "type": "boolean",
                        "description": "If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.\n"
                    },
                    "parentId": {
                        "type": "integer",
                        "description": "Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`\n"
                    },
                    "ports": {
                        "type": "string",
                        "description": "IP ports that are associated with the location.\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`. The supported options are: `NONE`, `CORPORATE`, `SERVER`, `GUESTWIFI`, `IOT`, `WORKLOAD`.\n"
                    },
                    "sslScanEnabled": {
                        "type": "boolean",
                        "description": "This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                    },
                    "surrogateIp": {
                        "type": "boolean",
                        "description": "Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.\n"
                    },
                    "surrogateIpEnforcedForKnownBrowsers": {
                        "type": "boolean",
                        "description": "Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.\n"
                    },
                    "surrogateRefreshTimeInMinutes": {
                        "type": "integer",
                        "description": "Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.\n"
                    },
                    "surrogateRefreshTimeUnit": {
                        "type": "string",
                        "description": "Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.\n"
                    },
                    "tz": {
                        "type": "string",
                        "description": "Timezone of the location. If not specified, it defaults to GMT.\n"
                    },
                    "upBandwidth": {
                        "type": "integer",
                        "description": "Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                    },
                    "vpnCredentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/LocationManagementVpnCredential:LocationManagementVpnCredential"
                        }
                    },
                    "xffForwardEnabled": {
                        "type": "boolean",
                        "description": "Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.\n"
                    },
                    "zappSslScanEnabled": {
                        "type": "boolean",
                        "description": "This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/ruleLabels:RuleLabels": {
            "description": "The **zia_rule_labels** resource allows the creation and management of rule labels in the Zscaler Internet Access cloud or via the API. This resource can then be associated with resources such as: Firewall Rules and URL filtering rules\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// ZIA Rule Labels Resource\nconst example = new zia.RuleLabels(\"example\", {description: \"Example\"});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# ZIA Rule Labels Resource\nexample = zia.RuleLabels(\"example\", description=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZIA Rule Labels Resource\n    var example = new Zia.RuleLabels(\"example\", new()\n    {\n        Description = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// ZIA Rule Labels Resource\n\t\t_, err := zia.NewRuleLabels(ctx, \"example\", \u0026zia.RuleLabelsArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.RuleLabels;\nimport com.pulumi.zia.RuleLabelsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new RuleLabels(\"example\", RuleLabelsArgs.builder()        \n            .description(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZIA Rule Labels Resource\n  example:\n    type: zia:RuleLabels\n    properties:\n      description: Example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_rule_labels** can be imported by using `\u003cLABEL_ID\u003e` or `\u003cLABEL_NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/ruleLabels:RuleLabels example \u003clabel_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/ruleLabels:RuleLabels example \u003clabel_name\u003e\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The rule label description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the devices to be created.\n"
                },
                "ruleLabelId": {
                    "type": "integer"
                }
            },
            "required": [
                "name",
                "ruleLabelId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The rule label description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the devices to be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RuleLabels resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The rule label description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the devices to be created.\n"
                    },
                    "ruleLabelId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/sandboxBehavioralAnalysis:SandboxBehavioralAnalysis": {
            "description": "The **zia_sandbox_behavioral_analysis** resource updates the custom list of MD5 file hashes that are blocked by Sandbox. This overwrites a previously generated blocklist. If you need to completely erase the blocklist, submit an empty list.\n\n**Note**: Only the file types that are supported by Sandbox analysis can be blocked using MD5 hashes.\n\n## Example Usage\n\n### Add MD5 Hashes To Sandbox\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// Add MD5 Hashes to Sandbox\nconst _this = new zia.SandboxBehavioralAnalysis(\"this\", {fileHashesToBeBlockeds: [\n    \"42914d6d213a20a2684064be5c80ffa9\",\n    \"c0202cf6aeab8437c638533d14563d35\",\n]});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# Add MD5 Hashes to Sandbox\nthis = zia.SandboxBehavioralAnalysis(\"this\", file_hashes_to_be_blockeds=[\n    \"42914d6d213a20a2684064be5c80ffa9\",\n    \"c0202cf6aeab8437c638533d14563d35\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add MD5 Hashes to Sandbox\n    var @this = new Zia.SandboxBehavioralAnalysis(\"this\", new()\n    {\n        FileHashesToBeBlockeds = new[]\n        {\n            \"42914d6d213a20a2684064be5c80ffa9\",\n            \"c0202cf6aeab8437c638533d14563d35\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Add MD5 Hashes to Sandbox\n\t\t_, err := zia.NewSandboxBehavioralAnalysis(ctx, \"this\", \u0026zia.SandboxBehavioralAnalysisArgs{\n\t\t\tFileHashesToBeBlockeds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"42914d6d213a20a2684064be5c80ffa9\"),\n\t\t\t\tpulumi.String(\"c0202cf6aeab8437c638533d14563d35\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.SandboxBehavioralAnalysis;\nimport com.pulumi.zia.SandboxBehavioralAnalysisArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new SandboxBehavioralAnalysis(\"this\", SandboxBehavioralAnalysisArgs.builder()        \n            .fileHashesToBeBlockeds(            \n                \"42914d6d213a20a2684064be5c80ffa9\",\n                \"c0202cf6aeab8437c638533d14563d35\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add MD5 Hashes to Sandbox\n  this:\n    type: zia:SandboxBehavioralAnalysis\n    properties:\n      fileHashesToBeBlockeds:\n        - 42914d6d213a20a2684064be5c80ffa9\n        - c0202cf6aeab8437c638533d14563d35\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Remove All MD5 Hashes To Sandbox\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// Remove All MD5 Hashes to Sandbox\nconst _this = new zia.SandboxBehavioralAnalysis(\"this\", {fileHashesToBeBlockeds: []});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# Remove All MD5 Hashes to Sandbox\nthis = zia.SandboxBehavioralAnalysis(\"this\", file_hashes_to_be_blockeds=[])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Remove All MD5 Hashes to Sandbox\n    var @this = new Zia.SandboxBehavioralAnalysis(\"this\", new()\n    {\n        FileHashesToBeBlockeds = new[] {},\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// Remove All MD5 Hashes to Sandbox\n\t\t_, err := zia.NewSandboxBehavioralAnalysis(ctx, \"this\", \u0026zia.SandboxBehavioralAnalysisArgs{\n\t\t\tFileHashesToBeBlockeds: pulumi.StringArray{},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.SandboxBehavioralAnalysis;\nimport com.pulumi.zia.SandboxBehavioralAnalysisArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new SandboxBehavioralAnalysis(\"this\", SandboxBehavioralAnalysisArgs.builder()        \n            .fileHashesToBeBlockeds()\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Remove All MD5 Hashes to Sandbox\n  this:\n    type: zia:SandboxBehavioralAnalysis\n    properties:\n      fileHashesToBeBlockeds: []\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_sandbox_behavioral_analysis** can be imported by using `sandbox_settings` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/sandboxBehavioralAnalysis:SandboxBehavioralAnalysis example sandbox_settings\n```\n\n",
            "properties": {
                "fileHashesToBeBlockeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A custom list of unique MD5 file hashes that must be blocked by Sandbox. A maximum of 10000 MD5 file hashes can be blocked.\n\n**Note 3**: The Sandbox only supports MD5 hashes. The provider will validate the MD5 format prior to submission.\n"
                }
            },
            "inputProperties": {
                "fileHashesToBeBlockeds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A custom list of unique MD5 file hashes that must be blocked by Sandbox. A maximum of 10000 MD5 file hashes can be blocked.\n\n**Note 3**: The Sandbox only supports MD5 hashes. The provider will validate the MD5 format prior to submission.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SandboxBehavioralAnalysis resources.\n",
                "properties": {
                    "fileHashesToBeBlockeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A custom list of unique MD5 file hashes that must be blocked by Sandbox. A maximum of 10000 MD5 file hashes can be blocked.\n\n**Note 3**: The Sandbox only supports MD5 hashes. The provider will validate the MD5 format prior to submission.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/sandboxFileSubmission:SandboxFileSubmission": {
            "description": "## Example Usage\n\n",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "filePath": {
                    "type": "string",
                    "description": "(Required) The path where the raw or archive files for submission are located.\n"
                },
                "fileType": {
                    "type": "string"
                },
                "force": {
                    "type": "boolean",
                    "description": "(Optional) Submit file to sandbox even if found malicious during AV scan and a verdict already exists. Supported values are `true` or `false`\n"
                },
                "md5": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "sandboxSubmission": {
                    "type": "string"
                },
                "submissionMethod": {
                    "type": "string",
                    "description": "(Required) The submission method to be used. Supportedd values are: `submit` and `discan`\n"
                },
                "virusName": {
                    "type": "string"
                },
                "virusType": {
                    "type": "string"
                }
            },
            "required": [
                "code",
                "filePath",
                "fileType",
                "md5",
                "message",
                "sandboxSubmission",
                "submissionMethod",
                "virusName",
                "virusType"
            ],
            "inputProperties": {
                "filePath": {
                    "type": "string",
                    "description": "(Required) The path where the raw or archive files for submission are located.\n"
                },
                "force": {
                    "type": "boolean",
                    "description": "(Optional) Submit file to sandbox even if found malicious during AV scan and a verdict already exists. Supported values are `true` or `false`\n"
                },
                "submissionMethod": {
                    "type": "string",
                    "description": "(Required) The submission method to be used. Supportedd values are: `submit` and `discan`\n"
                }
            },
            "requiredInputs": [
                "filePath",
                "submissionMethod"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SandboxFileSubmission resources.\n",
                "properties": {
                    "code": {
                        "type": "integer"
                    },
                    "filePath": {
                        "type": "string",
                        "description": "(Required) The path where the raw or archive files for submission are located.\n"
                    },
                    "fileType": {
                        "type": "string"
                    },
                    "force": {
                        "type": "boolean",
                        "description": "(Optional) Submit file to sandbox even if found malicious during AV scan and a verdict already exists. Supported values are `true` or `false`\n"
                    },
                    "md5": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "sandboxSubmission": {
                        "type": "string"
                    },
                    "submissionMethod": {
                        "type": "string",
                        "description": "(Required) The submission method to be used. Supportedd values are: `submit` and `discan`\n"
                    },
                    "virusName": {
                        "type": "string"
                    },
                    "virusType": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/securitySettings:SecuritySettings": {
            "properties": {
                "blacklistUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs on the denylist for your organization. Allow up to 25000 URLs.\n"
                },
                "whitelistUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.\n"
                }
            },
            "required": [
                "blacklistUrls",
                "whitelistUrls"
            ],
            "inputProperties": {
                "blacklistUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs on the denylist for your organization. Allow up to 25000 URLs.\n"
                },
                "whitelistUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecuritySettings resources.\n",
                "properties": {
                    "blacklistUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs on the denylist for your organization. Allow up to 25000 URLs.\n"
                    },
                    "whitelistUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel": {
            "description": "The **zia_traffic_forwarding_gre_tunnel** resource allows the creation and management of GRE tunnel configuration in the Zscaler Internet Access (ZIA) portal.\n\n\u003e **Note:** The provider automatically query the Zscaler cloud for the primary and secondary destination datacenter and virtual IP address (VIP) of the GRE tunnel. The parameter can be overriden if needed by setting the parameters: `primary_dest_vip` and `secondary_dest_vip`.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// ZIA Traffic Forwarding - Static IP\nconst exampleTrafficForwardingStaticIP = new zia.TrafficForwardingStaticIP(\"exampleTrafficForwardingStaticIP\", {\n    ipAddress: \"1.1.1.1\",\n    routableIp: true,\n    comment: \"Example\",\n    geoOverride: true,\n    latitude: 37.418171,\n    longitude: -121.95314,\n});\n// Creates a numbered GRE Tunnel\nconst exampleTrafficForwardingGRETunnel = new zia.TrafficForwardingGRETunnel(\"exampleTrafficForwardingGRETunnel\", {\n    sourceIp: exampleTrafficForwardingStaticIP.ipAddress,\n    comment: \"Example\",\n    withinCountry: true,\n    countryCode: \"US\",\n    ipUnnumbered: false,\n}, {\n    dependsOn: [exampleTrafficForwardingStaticIP],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# ZIA Traffic Forwarding - Static IP\nexample_traffic_forwarding_static_ip = zia.TrafficForwardingStaticIP(\"exampleTrafficForwardingStaticIP\",\n    ip_address=\"1.1.1.1\",\n    routable_ip=True,\n    comment=\"Example\",\n    geo_override=True,\n    latitude=37.418171,\n    longitude=-121.95314)\n# Creates a numbered GRE Tunnel\nexample_traffic_forwarding_gre_tunnel = zia.TrafficForwardingGRETunnel(\"exampleTrafficForwardingGRETunnel\",\n    source_ip=example_traffic_forwarding_static_ip.ip_address,\n    comment=\"Example\",\n    within_country=True,\n    country_code=\"US\",\n    ip_unnumbered=False,\n    opts=pulumi.ResourceOptions(depends_on=[example_traffic_forwarding_static_ip]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZIA Traffic Forwarding - Static IP\n    var exampleTrafficForwardingStaticIP = new Zia.TrafficForwardingStaticIP(\"exampleTrafficForwardingStaticIP\", new()\n    {\n        IpAddress = \"1.1.1.1\",\n        RoutableIp = true,\n        Comment = \"Example\",\n        GeoOverride = true,\n        Latitude = 37.418171,\n        Longitude = -121.95314,\n    });\n\n    // Creates a numbered GRE Tunnel\n    var exampleTrafficForwardingGRETunnel = new Zia.TrafficForwardingGRETunnel(\"exampleTrafficForwardingGRETunnel\", new()\n    {\n        SourceIp = exampleTrafficForwardingStaticIP.IpAddress,\n        Comment = \"Example\",\n        WithinCountry = true,\n        CountryCode = \"US\",\n        IpUnnumbered = false,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            exampleTrafficForwardingStaticIP,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// ZIA Traffic Forwarding - Static IP\n\t\texampleTrafficForwardingStaticIP, err := zia.NewTrafficForwardingStaticIP(ctx, \"exampleTrafficForwardingStaticIP\", \u0026zia.TrafficForwardingStaticIPArgs{\n\t\t\tIpAddress:   pulumi.String(\"1.1.1.1\"),\n\t\t\tRoutableIp:  pulumi.Bool(true),\n\t\t\tComment:     pulumi.String(\"Example\"),\n\t\t\tGeoOverride: pulumi.Bool(true),\n\t\t\tLatitude:    pulumi.Float64(37.418171),\n\t\t\tLongitude:   -121.95314,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Creates a numbered GRE Tunnel\n\t\t_, err = zia.NewTrafficForwardingGRETunnel(ctx, \"exampleTrafficForwardingGRETunnel\", \u0026zia.TrafficForwardingGRETunnelArgs{\n\t\t\tSourceIp:      exampleTrafficForwardingStaticIP.IpAddress,\n\t\t\tComment:       pulumi.String(\"Example\"),\n\t\t\tWithinCountry: pulumi.Bool(true),\n\t\t\tCountryCode:   pulumi.String(\"US\"),\n\t\t\tIpUnnumbered:  pulumi.Bool(false),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\texampleTrafficForwardingStaticIP,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\nimport * as zia from \"@pulumi/zia\";\n\nconst thisTrafficForwardingStaticIP = new zia.TrafficForwardingStaticIP(\"thisTrafficForwardingStaticIP\", {\n    ipAddress: \"50.98.112.169\",\n    routableIp: true,\n    comment: \"Created with Terraform\",\n    geoOverride: true,\n    latitude: 49.0526,\n    longitude: -122.8291,\n});\nconst thisTrafficForwardingVIPRecommendedList = thisTrafficForwardingStaticIP.ipAddress.apply(ipAddress =\u003e zia.getTrafficForwardingVIPRecommendedListOutput({\n    sourceIp: ipAddress,\n    requiredCount: 2,\n}));\nconst thisTrafficForwardingGREInternalIPRange = zia.getTrafficForwardingGREInternalIPRange({\n    requiredCount: 10,\n});\nconst thisTrafficForwardingGRETunnel = new zia.TrafficForwardingGRETunnel(\"thisTrafficForwardingGRETunnel\", {\n    sourceIp: thisTrafficForwardingStaticIP.ipAddress,\n    comment: \"GRE Tunnel Created with Terraform\",\n    withinCountry: false,\n    countryCode: \"CA\",\n    ipUnnumbered: false,\n    primaryDestVips: [{\n        datacenter: thisTrafficForwardingVIPRecommendedList.apply(thisTrafficForwardingVIPRecommendedList =\u003e thisTrafficForwardingVIPRecommendedList.lists?.[0]?.datacenter),\n        virtualIp: thisTrafficForwardingVIPRecommendedList.apply(thisTrafficForwardingVIPRecommendedList =\u003e thisTrafficForwardingVIPRecommendedList.lists?.[0]?.virtualIp),\n    }],\n    secondaryDestVips: [{\n        datacenter: thisTrafficForwardingVIPRecommendedList.apply(thisTrafficForwardingVIPRecommendedList =\u003e thisTrafficForwardingVIPRecommendedList.lists?.[1]?.datacenter),\n        virtualIp: thisTrafficForwardingVIPRecommendedList.apply(thisTrafficForwardingVIPRecommendedList =\u003e thisTrafficForwardingVIPRecommendedList.lists?.[1]?.virtualIp),\n    }],\n}, {\n    dependsOn: [thisTrafficForwardingStaticIP],\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nthis_traffic_forwarding_static_ip = zia.TrafficForwardingStaticIP(\"thisTrafficForwardingStaticIP\",\n    ip_address=\"50.98.112.169\",\n    routable_ip=True,\n    comment=\"Created with Terraform\",\n    geo_override=True,\n    latitude=49.0526,\n    longitude=-122.8291)\nthis_traffic_forwarding_vip_recommended_list = this_traffic_forwarding_static_ip.ip_address.apply(lambda ip_address: zia.get_traffic_forwarding_vip_recommended_list_output(source_ip=ip_address,\n    required_count=2))\nthis_traffic_forwarding_gre_internal_ip_range = zia.get_traffic_forwarding_gre_internal_ip_range(required_count=10)\nthis_traffic_forwarding_gre_tunnel = zia.TrafficForwardingGRETunnel(\"thisTrafficForwardingGRETunnel\",\n    source_ip=this_traffic_forwarding_static_ip.ip_address,\n    comment=\"GRE Tunnel Created with Terraform\",\n    within_country=False,\n    country_code=\"CA\",\n    ip_unnumbered=False,\n    primary_dest_vips=[zia.TrafficForwardingGRETunnelPrimaryDestVipArgs(\n        datacenter=this_traffic_forwarding_vip_recommended_list.lists[0].datacenter,\n        virtual_ip=this_traffic_forwarding_vip_recommended_list.lists[0].virtual_ip,\n    )],\n    secondary_dest_vips=[zia.TrafficForwardingGRETunnelSecondaryDestVipArgs(\n        datacenter=this_traffic_forwarding_vip_recommended_list.lists[1].datacenter,\n        virtual_ip=this_traffic_forwarding_vip_recommended_list.lists[1].virtual_ip,\n    )],\n    opts=pulumi.ResourceOptions(depends_on=[this_traffic_forwarding_static_ip]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var thisTrafficForwardingStaticIP = new Zia.TrafficForwardingStaticIP(\"thisTrafficForwardingStaticIP\", new()\n    {\n        IpAddress = \"50.98.112.169\",\n        RoutableIp = true,\n        Comment = \"Created with Terraform\",\n        GeoOverride = true,\n        Latitude = 49.0526,\n        Longitude = -122.8291,\n    });\n\n    var thisTrafficForwardingVIPRecommendedList = Zia.GetTrafficForwardingVIPRecommendedList.Invoke(new()\n    {\n        SourceIp = thisTrafficForwardingStaticIP.IpAddress,\n        RequiredCount = 2,\n    });\n\n    var thisTrafficForwardingGREInternalIPRange = Zia.GetTrafficForwardingGREInternalIPRange.Invoke(new()\n    {\n        RequiredCount = 10,\n    });\n\n    var thisTrafficForwardingGRETunnel = new Zia.TrafficForwardingGRETunnel(\"thisTrafficForwardingGRETunnel\", new()\n    {\n        SourceIp = thisTrafficForwardingStaticIP.IpAddress,\n        Comment = \"GRE Tunnel Created with Terraform\",\n        WithinCountry = false,\n        CountryCode = \"CA\",\n        IpUnnumbered = false,\n        PrimaryDestVips = new[]\n        {\n            new Zia.Inputs.TrafficForwardingGRETunnelPrimaryDestVipArgs\n            {\n                Datacenter = thisTrafficForwardingVIPRecommendedList.Apply(getTrafficForwardingVIPRecommendedListResult =\u003e getTrafficForwardingVIPRecommendedListResult.Lists[0]?.Datacenter),\n                VirtualIp = thisTrafficForwardingVIPRecommendedList.Apply(getTrafficForwardingVIPRecommendedListResult =\u003e getTrafficForwardingVIPRecommendedListResult.Lists[0]?.VirtualIp),\n            },\n        },\n        SecondaryDestVips = new[]\n        {\n            new Zia.Inputs.TrafficForwardingGRETunnelSecondaryDestVipArgs\n            {\n                Datacenter = thisTrafficForwardingVIPRecommendedList.Apply(getTrafficForwardingVIPRecommendedListResult =\u003e getTrafficForwardingVIPRecommendedListResult.Lists[1]?.Datacenter),\n                VirtualIp = thisTrafficForwardingVIPRecommendedList.Apply(getTrafficForwardingVIPRecommendedListResult =\u003e getTrafficForwardingVIPRecommendedListResult.Lists[1]?.VirtualIp),\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            thisTrafficForwardingStaticIP,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthisTrafficForwardingStaticIP, err := zia.NewTrafficForwardingStaticIP(ctx, \"thisTrafficForwardingStaticIP\", \u0026zia.TrafficForwardingStaticIPArgs{\n\t\t\tIpAddress:   pulumi.String(\"50.98.112.169\"),\n\t\t\tRoutableIp:  pulumi.Bool(true),\n\t\t\tComment:     pulumi.String(\"Created with Terraform\"),\n\t\t\tGeoOverride: pulumi.Bool(true),\n\t\t\tLatitude:    pulumi.Float64(49.0526),\n\t\t\tLongitude:   -122.8291,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tthisTrafficForwardingVIPRecommendedList := thisTrafficForwardingStaticIP.IpAddress.ApplyT(func(ipAddress string) (zia.GetTrafficForwardingVIPRecommendedListResult, error) {\n\t\t\treturn zia.GetTrafficForwardingVIPRecommendedListOutput(ctx, zia.GetTrafficForwardingVIPRecommendedListOutputArgs{\n\t\t\t\tSourceIp:      ipAddress,\n\t\t\t\tRequiredCount: 2,\n\t\t\t}, nil), nil\n\t\t}).(zia.GetTrafficForwardingVIPRecommendedListResultOutput)\n\t\t_, err = zia.GetTrafficForwardingGREInternalIPRange(ctx, \u0026zia.GetTrafficForwardingGREInternalIPRangeArgs{\n\t\t\tRequiredCount: pulumi.IntRef(10),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zia.NewTrafficForwardingGRETunnel(ctx, \"thisTrafficForwardingGRETunnel\", \u0026zia.TrafficForwardingGRETunnelArgs{\n\t\t\tSourceIp:      thisTrafficForwardingStaticIP.IpAddress,\n\t\t\tComment:       pulumi.String(\"GRE Tunnel Created with Terraform\"),\n\t\t\tWithinCountry: pulumi.Bool(false),\n\t\t\tCountryCode:   pulumi.String(\"CA\"),\n\t\t\tIpUnnumbered:  pulumi.Bool(false),\n\t\t\tPrimaryDestVips: zia.TrafficForwardingGRETunnelPrimaryDestVipArray{\n\t\t\t\t\u0026zia.TrafficForwardingGRETunnelPrimaryDestVipArgs{\n\t\t\t\t\tDatacenter: thisTrafficForwardingVIPRecommendedList.ApplyT(func(thisTrafficForwardingVIPRecommendedList zia.GetTrafficForwardingVIPRecommendedListResult) (*string, error) {\n\t\t\t\t\t\treturn \u0026thisTrafficForwardingVIPRecommendedList.Lists[0].Datacenter, nil\n\t\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t\t\tVirtualIp: thisTrafficForwardingVIPRecommendedList.ApplyT(func(thisTrafficForwardingVIPRecommendedList zia.GetTrafficForwardingVIPRecommendedListResult) (*string, error) {\n\t\t\t\t\t\treturn \u0026thisTrafficForwardingVIPRecommendedList.Lists[0].VirtualIp, nil\n\t\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSecondaryDestVips: zia.TrafficForwardingGRETunnelSecondaryDestVipArray{\n\t\t\t\t\u0026zia.TrafficForwardingGRETunnelSecondaryDestVipArgs{\n\t\t\t\t\tDatacenter: thisTrafficForwardingVIPRecommendedList.ApplyT(func(thisTrafficForwardingVIPRecommendedList zia.GetTrafficForwardingVIPRecommendedListResult) (*string, error) {\n\t\t\t\t\t\treturn \u0026thisTrafficForwardingVIPRecommendedList.Lists[1].Datacenter, nil\n\t\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t\t\tVirtualIp: thisTrafficForwardingVIPRecommendedList.ApplyT(func(thisTrafficForwardingVIPRecommendedList zia.GetTrafficForwardingVIPRecommendedListResult) (*string, error) {\n\t\t\t\t\t\treturn \u0026thisTrafficForwardingVIPRecommendedList.Lists[1].VirtualIp, nil\n\t\t\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tthisTrafficForwardingStaticIP,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Note:** Although the example shows 2 valid attributes defined (datacenter, virtual_ip) within the primary_dest_vip and secondary_dest_vip, only one attribute is required. If setting the datacenter name as the attribute i.e YVR1. The provider will automatically select the agvaiulable VIP.\n\n\u003e **Note:** To obtain the datacenter codes and/or virtual_ips, refer to the following [Zscaler Portal](https://config.zscaler.com/zscloud.net/cenr) and choose your cloud tenant.\n\n\u003e **Note:** The provider will automatically query and set the Zscaler cloud for the next available `/29` internal IP range to be used in a numbered GRE tunnel.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// ZIA Traffic Forwarding - Static IP\nconst example = new zia.TrafficForwardingStaticIP(\"example\", {\n    ipAddress: \"1.1.1.1\",\n    routableIp: true,\n    comment: \"Example\",\n    geoOverride: true,\n    latitude: 37.418171,\n    longitude: -121.95314,\n});\n// Creates an unnumbered GRE Tunnel\nconst telusHomeInternet01Gre01 = new zia.TrafficForwardingGRETunnel(\"telusHomeInternet01Gre01\", {\n    sourceIp: example.ipAddress,\n    comment: \"Example\",\n    withinCountry: true,\n    countryCode: \"CA\",\n    ipUnnumbered: true,\n}, {\n    dependsOn: [example],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# ZIA Traffic Forwarding - Static IP\nexample = zia.TrafficForwardingStaticIP(\"example\",\n    ip_address=\"1.1.1.1\",\n    routable_ip=True,\n    comment=\"Example\",\n    geo_override=True,\n    latitude=37.418171,\n    longitude=-121.95314)\n# Creates an unnumbered GRE Tunnel\ntelus_home_internet01_gre01 = zia.TrafficForwardingGRETunnel(\"telusHomeInternet01Gre01\",\n    source_ip=example.ip_address,\n    comment=\"Example\",\n    within_country=True,\n    country_code=\"CA\",\n    ip_unnumbered=True,\n    opts=pulumi.ResourceOptions(depends_on=[example]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZIA Traffic Forwarding - Static IP\n    var example = new Zia.TrafficForwardingStaticIP(\"example\", new()\n    {\n        IpAddress = \"1.1.1.1\",\n        RoutableIp = true,\n        Comment = \"Example\",\n        GeoOverride = true,\n        Latitude = 37.418171,\n        Longitude = -121.95314,\n    });\n\n    // Creates an unnumbered GRE Tunnel\n    var telusHomeInternet01Gre01 = new Zia.TrafficForwardingGRETunnel(\"telusHomeInternet01Gre01\", new()\n    {\n        SourceIp = example.IpAddress,\n        Comment = \"Example\",\n        WithinCountry = true,\n        CountryCode = \"CA\",\n        IpUnnumbered = true,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            example,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// ZIA Traffic Forwarding - Static IP\n\t\texample, err := zia.NewTrafficForwardingStaticIP(ctx, \"example\", \u0026zia.TrafficForwardingStaticIPArgs{\n\t\t\tIpAddress:   pulumi.String(\"1.1.1.1\"),\n\t\t\tRoutableIp:  pulumi.Bool(true),\n\t\t\tComment:     pulumi.String(\"Example\"),\n\t\t\tGeoOverride: pulumi.Bool(true),\n\t\t\tLatitude:    pulumi.Float64(37.418171),\n\t\t\tLongitude:   -121.95314,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// Creates an unnumbered GRE Tunnel\n\t\t_, err = zia.NewTrafficForwardingGRETunnel(ctx, \"telusHomeInternet01Gre01\", \u0026zia.TrafficForwardingGRETunnelArgs{\n\t\t\tSourceIp:      example.IpAddress,\n\t\t\tComment:       pulumi.String(\"Example\"),\n\t\t\tWithinCountry: pulumi.Bool(true),\n\t\t\tCountryCode:   pulumi.String(\"CA\"),\n\t\t\tIpUnnumbered:  pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\texample,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_traffic_forwarding_gre_tunnel** can be imported by using `\u003cTUNNEL_ID\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel example \u003ctunnel_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel example \u003cengine_name\u003e\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Additional information about this GRE tunnel\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "When within_country is enabled, you must set this to the country code.\n"
                },
                "internalIpRange": {
                    "type": "string",
                    "description": "The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ip_unnumbered` is set to `false`.\n"
                },
                "ipUnnumbered": {
                    "type": "boolean",
                    "description": "This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id are set to null\n"
                },
                "primaryDestVips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/TrafficForwardingGRETunnelPrimaryDestVip:TrafficForwardingGRETunnelPrimaryDestVip"
                    },
                    "description": "**` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.\n"
                },
                "secondaryDestVips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/TrafficForwardingGRETunnelSecondaryDestVip:TrafficForwardingGRETunnelSecondaryDestVip"
                    },
                    "description": "The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.\n"
                },
                "sourceIp": {
                    "type": "string",
                    "description": "The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.\n"
                },
                "tunnelId": {
                    "type": "integer",
                    "description": "The ID of the GRE tunnel.\n"
                },
                "withinCountry": {
                    "type": "boolean",
                    "description": "Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address\n"
                }
            },
            "required": [
                "countryCode",
                "internalIpRange",
                "ipUnnumbered",
                "primaryDestVips",
                "secondaryDestVips",
                "sourceIp",
                "tunnelId",
                "withinCountry"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Additional information about this GRE tunnel\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "When within_country is enabled, you must set this to the country code.\n"
                },
                "internalIpRange": {
                    "type": "string",
                    "description": "The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ip_unnumbered` is set to `false`.\n"
                },
                "ipUnnumbered": {
                    "type": "boolean",
                    "description": "This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id are set to null\n"
                },
                "primaryDestVips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/TrafficForwardingGRETunnelPrimaryDestVip:TrafficForwardingGRETunnelPrimaryDestVip"
                    },
                    "description": "**` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.\n"
                },
                "secondaryDestVips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/TrafficForwardingGRETunnelSecondaryDestVip:TrafficForwardingGRETunnelSecondaryDestVip"
                    },
                    "description": "The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.\n"
                },
                "sourceIp": {
                    "type": "string",
                    "description": "The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.\n"
                },
                "withinCountry": {
                    "type": "boolean",
                    "description": "Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address\n"
                }
            },
            "requiredInputs": [
                "sourceIp"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TrafficForwardingGRETunnel resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Additional information about this GRE tunnel\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "When within_country is enabled, you must set this to the country code.\n"
                    },
                    "internalIpRange": {
                        "type": "string",
                        "description": "The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ip_unnumbered` is set to `false`.\n"
                    },
                    "ipUnnumbered": {
                        "type": "boolean",
                        "description": "This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id are set to null\n"
                    },
                    "primaryDestVips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/TrafficForwardingGRETunnelPrimaryDestVip:TrafficForwardingGRETunnelPrimaryDestVip"
                        },
                        "description": "**` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.\n"
                    },
                    "secondaryDestVips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/TrafficForwardingGRETunnelSecondaryDestVip:TrafficForwardingGRETunnelSecondaryDestVip"
                        },
                        "description": "The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.\n"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.\n"
                    },
                    "tunnelId": {
                        "type": "integer",
                        "description": "The ID of the GRE tunnel.\n"
                    },
                    "withinCountry": {
                        "type": "boolean",
                        "description": "Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/trafficForwardingStaticIP:TrafficForwardingStaticIP": {
            "description": "The **zia_traffic_forwarding_static_ip** resource allows the creation and management of static ip addresses in the Zscaler Internet Access cloud. The resource, can then be associated with other resources such as:\n\n* VPN Credentials of type `IP`\n* Location Management\n* GRE Tunnel\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n// ZIA Traffic Forwarding - Static IP\nconst example = new zia.TrafficForwardingStaticIP(\"example\", {\n    comment: \"Example\",\n    geoOverride: true,\n    ipAddress: \"1.1.1.1\",\n    latitude: -36.848461,\n    longitude: 174.763336,\n    routableIp: true,\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# ZIA Traffic Forwarding - Static IP\nexample = zia.TrafficForwardingStaticIP(\"example\",\n    comment=\"Example\",\n    geo_override=True,\n    ip_address=\"1.1.1.1\",\n    latitude=-36.848461,\n    longitude=174.763336,\n    routable_ip=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZIA Traffic Forwarding - Static IP\n    var example = new Zia.TrafficForwardingStaticIP(\"example\", new()\n    {\n        Comment = \"Example\",\n        GeoOverride = true,\n        IpAddress = \"1.1.1.1\",\n        Latitude = -36.848461,\n        Longitude = 174.763336,\n        RoutableIp = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// ZIA Traffic Forwarding - Static IP\n\t\t_, err := zia.NewTrafficForwardingStaticIP(ctx, \"example\", \u0026zia.TrafficForwardingStaticIPArgs{\n\t\t\tComment:     pulumi.String(\"Example\"),\n\t\t\tGeoOverride: pulumi.Bool(true),\n\t\t\tIpAddress:   pulumi.String(\"1.1.1.1\"),\n\t\t\tLatitude:    -36.848461,\n\t\t\tLongitude:   pulumi.Float64(174.763336),\n\t\t\tRoutableIp:  pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\nStatic IP resources can be imported by using `\u003cSTATIC IP ID\u003e` or `\u003cIP ADDRESS\u003e`as the import ID.\n\n```sh\n$ pulumi import zia:index/trafficForwardingStaticIP:TrafficForwardingStaticIP example \u003cstatic_ip_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/trafficForwardingStaticIP:TrafficForwardingStaticIP example \u003cip_address\u003e\n```\n\n",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Additional information about this static IP address\n"
                },
                "geoOverride": {
                    "type": "boolean",
                    "description": "If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The static IP address\n"
                },
                "latitude": {
                    "type": "number",
                    "description": "Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between -90 and 90 degrees.\n"
                },
                "longitude": {
                    "type": "number",
                    "description": "Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between -180 and 180 degrees.\n"
                },
                "routableIp": {
                    "type": "boolean",
                    "description": "Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.\n"
                },
                "staticIpId": {
                    "type": "integer",
                    "description": "The ID of the Static IP.\n"
                }
            },
            "required": [
                "geoOverride",
                "ipAddress",
                "latitude",
                "longitude",
                "routableIp",
                "staticIpId"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Additional information about this static IP address\n"
                },
                "geoOverride": {
                    "type": "boolean",
                    "description": "If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The static IP address\n",
                    "willReplaceOnChanges": true
                },
                "latitude": {
                    "type": "number",
                    "description": "Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between -90 and 90 degrees.\n"
                },
                "longitude": {
                    "type": "number",
                    "description": "Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between -180 and 180 degrees.\n"
                },
                "routableIp": {
                    "type": "boolean",
                    "description": "Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.\n"
                }
            },
            "requiredInputs": [
                "ipAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TrafficForwardingStaticIP resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Additional information about this static IP address\n"
                    },
                    "geoOverride": {
                        "type": "boolean",
                        "description": "If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The static IP address\n",
                        "willReplaceOnChanges": true
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between -90 and 90 degrees.\n"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between -180 and 180 degrees.\n"
                    },
                    "routableIp": {
                        "type": "boolean",
                        "description": "Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.\n"
                    },
                    "staticIpId": {
                        "type": "integer",
                        "description": "The ID of the Static IP.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/trafficForwardingVPNCredentials:TrafficForwardingVPNCredentials": {
            "description": "The **zia_traffic_forwarding_vpn_credentials** creates and manages VPN credentials that can be associated to locations. VPN is one way to route traffic from customer locations to the cloud. Site-to-site IPSec VPN credentials can be identified by the cloud through one of the following methods:\n\n* Common Name (CN) of IPSec Certificate\n* VPN User FQDN - requires VPN_SITE_TO_SITE subscription\n* VPN IP Address - requires VPN_SITE_TO_SITE subscription\n* Extended Authentication (XAUTH) or hosted mobile UserID - requires VPN_MOBILE subscription\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\n//######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n// ZIA Traffic Forwarding - VPN Credentials (UFQDN)\nconst example = new zia.TrafficForwardingVPNCredentials(\"example\", {\n    comments: \"Example\",\n    fqdn: \"sjc-1-37@acme.com\",\n    preSharedKey: \"*********************\",\n    type: \"UFQDN\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n# ZIA Traffic Forwarding - VPN Credentials (UFQDN)\nexample = zia.TrafficForwardingVPNCredentials(\"example\",\n    comments=\"Example\",\n    fqdn=\"sjc-1-37@acme.com\",\n    pre_shared_key=\"*********************\",\n    type=\"UFQDN\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    //######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n    // ZIA Traffic Forwarding - VPN Credentials (UFQDN)\n    var example = new Zia.TrafficForwardingVPNCredentials(\"example\", new()\n    {\n        Comments = \"Example\",\n        Fqdn = \"sjc-1-37@acme.com\",\n        PreSharedKey = \"*********************\",\n        Type = \"UFQDN\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// ######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n\t\t// ZIA Traffic Forwarding - VPN Credentials (UFQDN)\n\t\t_, err := zia.NewTrafficForwardingVPNCredentials(ctx, \"example\", \u0026zia.TrafficForwardingVPNCredentialsArgs{\n\t\t\tComments:     pulumi.String(\"Example\"),\n\t\t\tFqdn:         pulumi.String(\"sjc-1-37@acme.com\"),\n\t\t\tPreSharedKey: pulumi.String(\"*********************\"),\n\t\t\tType:         pulumi.String(\"UFQDN\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.TrafficForwardingVPNCredentials;\nimport com.pulumi.zia.TrafficForwardingVPNCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new TrafficForwardingVPNCredentials(\"example\", TrafficForwardingVPNCredentialsArgs.builder()        \n            .comments(\"Example\")\n            .fqdn(\"sjc-1-37@acme.com\")\n            .preSharedKey(\"*********************\")\n            .type(\"UFQDN\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  ######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n  # // ZIA Traffic Forwarding - VPN Credentials (UFQDN)\n  example:\n    type: zia:TrafficForwardingVPNCredentials\n    properties:\n      comments: Example\n      fqdn: sjc-1-37@acme.com\n      preSharedKey: '*********************'\n      type: UFQDN\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\nconst exampleTrafficForwardingStaticIP = new zia.TrafficForwardingStaticIP(\"exampleTrafficForwardingStaticIP\", {\n    ipAddress: \"1.1.1.1\",\n    routableIp: true,\n    comment: \"Example\",\n    geoOverride: true,\n    latitude: -36.848461,\n    longitude: 174.763336,\n});\n// ZIA Traffic Forwarding - VPN Credentials (IP)\n//######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\nconst exampleTrafficForwardingVPNCredentials = new zia.TrafficForwardingVPNCredentials(\"exampleTrafficForwardingVPNCredentials\", {\n    type: \"IP\",\n    ipAddress: exampleTrafficForwardingStaticIP.ipAddress,\n    comments: \"Example\",\n    preSharedKey: \"*********************\",\n}, {\n    dependsOn: [exampleTrafficForwardingStaticIP],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\nexample_traffic_forwarding_static_ip = zia.TrafficForwardingStaticIP(\"exampleTrafficForwardingStaticIP\",\n    ip_address=\"1.1.1.1\",\n    routable_ip=True,\n    comment=\"Example\",\n    geo_override=True,\n    latitude=-36.848461,\n    longitude=174.763336)\n# ZIA Traffic Forwarding - VPN Credentials (IP)\n######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\nexample_traffic_forwarding_vpn_credentials = zia.TrafficForwardingVPNCredentials(\"exampleTrafficForwardingVPNCredentials\",\n    type=\"IP\",\n    ip_address=example_traffic_forwarding_static_ip.ip_address,\n    comments=\"Example\",\n    pre_shared_key=\"*********************\",\n    opts=pulumi.ResourceOptions(depends_on=[example_traffic_forwarding_static_ip]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTrafficForwardingStaticIP = new Zia.TrafficForwardingStaticIP(\"exampleTrafficForwardingStaticIP\", new()\n    {\n        IpAddress = \"1.1.1.1\",\n        RoutableIp = true,\n        Comment = \"Example\",\n        GeoOverride = true,\n        Latitude = -36.848461,\n        Longitude = 174.763336,\n    });\n\n    // ZIA Traffic Forwarding - VPN Credentials (IP)\n    //######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n    var exampleTrafficForwardingVPNCredentials = new Zia.TrafficForwardingVPNCredentials(\"exampleTrafficForwardingVPNCredentials\", new()\n    {\n        Type = \"IP\",\n        IpAddress = exampleTrafficForwardingStaticIP.IpAddress,\n        Comments = \"Example\",\n        PreSharedKey = \"*********************\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            exampleTrafficForwardingStaticIP,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTrafficForwardingStaticIP, err := zia.NewTrafficForwardingStaticIP(ctx, \"exampleTrafficForwardingStaticIP\", \u0026zia.TrafficForwardingStaticIPArgs{\n\t\t\tIpAddress:   pulumi.String(\"1.1.1.1\"),\n\t\t\tRoutableIp:  pulumi.Bool(true),\n\t\t\tComment:     pulumi.String(\"Example\"),\n\t\t\tGeoOverride: pulumi.Bool(true),\n\t\t\tLatitude:    -36.848461,\n\t\t\tLongitude:   pulumi.Float64(174.763336),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ZIA Traffic Forwarding - VPN Credentials (IP)\n\t\t// ######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n\t\t_, err = zia.NewTrafficForwardingVPNCredentials(ctx, \"exampleTrafficForwardingVPNCredentials\", \u0026zia.TrafficForwardingVPNCredentialsArgs{\n\t\t\tType:         pulumi.String(\"IP\"),\n\t\t\tIpAddress:    exampleTrafficForwardingStaticIP.IpAddress,\n\t\t\tComments:     pulumi.String(\"Example\"),\n\t\t\tPreSharedKey: pulumi.String(\"*********************\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\texampleTrafficForwardingStaticIP,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **NOTE** For VPN Credentials of Type `IP` a static IP resource must be created first.\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_traffic_forwarding_vpn_credentials** can be imported by using one of the following prefixes as the import ID:\n\n* `'IP'` - Imports all VPN Credentials of type IP\n\n```sh\n$ pulumi import zia:index/trafficForwardingVPNCredentials:TrafficForwardingVPNCredentials example 'IP'\n```\n\n* `'UFQDN'` - Imports all VPN Credentials of type UFQDN\n\n```sh\n$ pulumi import zia:index/trafficForwardingVPNCredentials:TrafficForwardingVPNCredentials this 'UFQDN'\n```\n\n* `UFQDN'` - Imports a VPN Credentials of type UFQDN containing a specific UFQDN address\n\n```sh\n$ pulumi import zia:index/trafficForwardingVPNCredentials:TrafficForwardingVPNCredentials example 'testvpn@example.com'\n```\n\n* `IP Address'` - Imports a VPN Credentials of type IP containing a specific IP address\n\n```sh\n$ pulumi import zia:index/trafficForwardingVPNCredentials:TrafficForwardingVPNCredentials example '1.1.1.1'\n```\n\n",
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "Additional information about this VPN credential.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP Address for the VON credentials. The parameter becomes required if `type = IP`\n\n!\u003e **WARNING:** The `pre_shared_key` parameter is ommitted from the output for security reasons.\n"
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "Pre-shared key. This is a required field for UFQDN and IP auth type.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`\n"
                },
                "vpnId": {
                    "type": "integer"
                }
            },
            "required": [
                "vpnId"
            ],
            "inputProperties": {
                "comments": {
                    "type": "string",
                    "description": "Additional information about this VPN credential.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.\n",
                    "willReplaceOnChanges": true
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP Address for the VON credentials. The parameter becomes required if `type = IP`\n\n!\u003e **WARNING:** The `pre_shared_key` parameter is ommitted from the output for security reasons.\n",
                    "willReplaceOnChanges": true
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "Pre-shared key. This is a required field for UFQDN and IP auth type.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TrafficForwardingVPNCredentials resources.\n",
                "properties": {
                    "comments": {
                        "type": "string",
                        "description": "Additional information about this VPN credential.\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP Address for the VON credentials. The parameter becomes required if `type = IP`\n\n!\u003e **WARNING:** The `pre_shared_key` parameter is ommitted from the output for security reasons.\n",
                        "willReplaceOnChanges": true
                    },
                    "preSharedKey": {
                        "type": "string",
                        "description": "Pre-shared key. This is a required field for UFQDN and IP auth type.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`\n",
                        "willReplaceOnChanges": true
                    },
                    "vpnId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/uRLCategories:URLCategories": {
            "description": "The **zia_url_categories** resource creates and manages a new custom URL category. If keywords are included within the request, they will be added to the new category.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\nconst example = new zia.URLCategories(\"example\", {\n    superCategory: \"USER_DEFINED\",\n    configuredName: \"MCAS Unsanctioned Apps\",\n    description: \"MCAS Unsanctioned Apps\",\n    keywords: [\"microsoft\"],\n    customCategory: true,\n    type: \"URL_CATEGORY\",\n    scopes: [{\n        type: \"LOCATION\",\n        scopeEntities: {\n            ids: [data.zia_location_management.nyc_site.id],\n        },\n        scopeGroupMemberEntities: {\n            ids: [data.zia_group_management.engineering.id],\n        },\n    }],\n    urls: [\n        \".coupons.com\",\n        \".resource.alaskaair.net\",\n        \".techrepublic.com\",\n        \".dailymotion.com\",\n        \".osiriscomm.com\",\n        \".uefa.com\",\n        \".Logz.io\",\n        \".alexa.com\",\n        \".baidu.com\",\n        \".cnn.com\",\n        \".level3.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\nexample = zia.URLCategories(\"example\",\n    super_category=\"USER_DEFINED\",\n    configured_name=\"MCAS Unsanctioned Apps\",\n    description=\"MCAS Unsanctioned Apps\",\n    keywords=[\"microsoft\"],\n    custom_category=True,\n    type=\"URL_CATEGORY\",\n    scopes=[zia.URLCategoriesScopeArgs(\n        type=\"LOCATION\",\n        scope_entities=zia.URLCategoriesScopeScopeEntitiesArgs(\n            ids=[data[\"zia_location_management\"][\"nyc_site\"][\"id\"]],\n        ),\n        scope_group_member_entities=zia.URLCategoriesScopeScopeGroupMemberEntitiesArgs(\n            ids=[data[\"zia_group_management\"][\"engineering\"][\"id\"]],\n        ),\n    )],\n    urls=[\n        \".coupons.com\",\n        \".resource.alaskaair.net\",\n        \".techrepublic.com\",\n        \".dailymotion.com\",\n        \".osiriscomm.com\",\n        \".uefa.com\",\n        \".Logz.io\",\n        \".alexa.com\",\n        \".baidu.com\",\n        \".cnn.com\",\n        \".level3.com\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Zia.URLCategories(\"example\", new()\n    {\n        SuperCategory = \"USER_DEFINED\",\n        ConfiguredName = \"MCAS Unsanctioned Apps\",\n        Description = \"MCAS Unsanctioned Apps\",\n        Keywords = new[]\n        {\n            \"microsoft\",\n        },\n        CustomCategory = true,\n        Type = \"URL_CATEGORY\",\n        Scopes = new[]\n        {\n            new Zia.Inputs.URLCategoriesScopeArgs\n            {\n                Type = \"LOCATION\",\n                ScopeEntities = new Zia.Inputs.URLCategoriesScopeScopeEntitiesArgs\n                {\n                    Ids = new[]\n                    {\n                        data.Zia_location_management.Nyc_site.Id,\n                    },\n                },\n                ScopeGroupMemberEntities = new Zia.Inputs.URLCategoriesScopeScopeGroupMemberEntitiesArgs\n                {\n                    Ids = new[]\n                    {\n                        data.Zia_group_management.Engineering.Id,\n                    },\n                },\n            },\n        },\n        Urls = new[]\n        {\n            \".coupons.com\",\n            \".resource.alaskaair.net\",\n            \".techrepublic.com\",\n            \".dailymotion.com\",\n            \".osiriscomm.com\",\n            \".uefa.com\",\n            \".Logz.io\",\n            \".alexa.com\",\n            \".baidu.com\",\n            \".cnn.com\",\n            \".level3.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.NewURLCategories(ctx, \"example\", \u0026zia.URLCategoriesArgs{\n\t\t\tSuperCategory:  pulumi.String(\"USER_DEFINED\"),\n\t\t\tConfiguredName: pulumi.String(\"MCAS Unsanctioned Apps\"),\n\t\t\tDescription:    pulumi.String(\"MCAS Unsanctioned Apps\"),\n\t\t\tKeywords: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"microsoft\"),\n\t\t\t},\n\t\t\tCustomCategory: pulumi.Bool(true),\n\t\t\tType:           pulumi.String(\"URL_CATEGORY\"),\n\t\t\tScopes: zia.URLCategoriesScopeArray{\n\t\t\t\t\u0026zia.URLCategoriesScopeArgs{\n\t\t\t\t\tType: pulumi.String(\"LOCATION\"),\n\t\t\t\t\tScopeEntities: \u0026zia.URLCategoriesScopeScopeEntitiesArgs{\n\t\t\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\t\t\tdata.Zia_location_management.Nyc_site.Id,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tScopeGroupMemberEntities: \u0026zia.URLCategoriesScopeScopeGroupMemberEntitiesArgs{\n\t\t\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\t\t\tdata.Zia_group_management.Engineering.Id,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrls: pulumi.StringArray{\n\t\t\t\tpulumi.String(\".coupons.com\"),\n\t\t\t\tpulumi.String(\".resource.alaskaair.net\"),\n\t\t\t\tpulumi.String(\".techrepublic.com\"),\n\t\t\t\tpulumi.String(\".dailymotion.com\"),\n\t\t\t\tpulumi.String(\".osiriscomm.com\"),\n\t\t\t\tpulumi.String(\".uefa.com\"),\n\t\t\t\tpulumi.String(\".Logz.io\"),\n\t\t\t\tpulumi.String(\".alexa.com\"),\n\t\t\t\tpulumi.String(\".baidu.com\"),\n\t\t\t\tpulumi.String(\".cnn.com\"),\n\t\t\t\tpulumi.String(\".level3.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.URLCategories;\nimport com.pulumi.zia.URLCategoriesArgs;\nimport com.pulumi.zia.inputs.URLCategoriesScopeArgs;\nimport com.pulumi.zia.inputs.URLCategoriesScopeScopeEntitiesArgs;\nimport com.pulumi.zia.inputs.URLCategoriesScopeScopeGroupMemberEntitiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new URLCategories(\"example\", URLCategoriesArgs.builder()        \n            .superCategory(\"USER_DEFINED\")\n            .configuredName(\"MCAS Unsanctioned Apps\")\n            .description(\"MCAS Unsanctioned Apps\")\n            .keywords(\"microsoft\")\n            .customCategory(true)\n            .type(\"URL_CATEGORY\")\n            .scopes(URLCategoriesScopeArgs.builder()\n                .type(\"LOCATION\")\n                .scopeEntities(URLCategoriesScopeScopeEntitiesArgs.builder()\n                    .ids(data.zia_location_management().nyc_site().id())\n                    .build())\n                .scopeGroupMemberEntities(URLCategoriesScopeScopeGroupMemberEntitiesArgs.builder()\n                    .ids(data.zia_group_management().engineering().id())\n                    .build())\n                .build())\n            .urls(            \n                \".coupons.com\",\n                \".resource.alaskaair.net\",\n                \".techrepublic.com\",\n                \".dailymotion.com\",\n                \".osiriscomm.com\",\n                \".uefa.com\",\n                \".Logz.io\",\n                \".alexa.com\",\n                \".baidu.com\",\n                \".cnn.com\",\n                \".level3.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: zia:URLCategories\n    properties:\n      superCategory: USER_DEFINED\n      configuredName: MCAS Unsanctioned Apps\n      description: MCAS Unsanctioned Apps\n      keywords:\n        - microsoft\n      customCategory: true\n      type: URL_CATEGORY\n      scopes:\n        - type: LOCATION\n          scopeEntities:\n            ids:\n              - ${data.zia_location_management.nyc_site.id}\n          scopeGroupMemberEntities:\n            ids:\n              - ${data.zia_group_management.engineering.id}\n      urls:\n        - .coupons.com\n        - .resource.alaskaair.net\n        - .techrepublic.com\n        - .dailymotion.com\n        - .osiriscomm.com\n        - .uefa.com\n        - .Logz.io\n        - .alexa.com\n        - .baidu.com\n        - .cnn.com\n        - .level3.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_url_categories** can be imported by using `\u003cCATEGORY_ID\u003e` or `\u003cCATEGORY_NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/uRLCategories:URLCategories example \u003ccategory_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/uRLCategories:URLCategories example \u003ccategory_name\u003e\n```\n\n⚠️ **NOTE :**:  This provider only supports the importing of custom URL categories. The importing of built-in categories is not supported.\n\n",
            "properties": {
                "categoryId": {
                    "type": "string"
                },
                "configuredName": {
                    "type": "string",
                    "description": "Name of the URL category. This is only required for custom URL categories.\n"
                },
                "customCategory": {
                    "type": "boolean",
                    "description": "Set to true for custom URL category. Up to 48 custom URL categories can be added per organization.\n"
                },
                "customIpRangesCount": {
                    "type": "integer",
                    "description": "The number of custom IP address ranges associated to the URL category.\n"
                },
                "customUrlsCount": {
                    "type": "integer",
                    "description": "The number of custom URLs associated to the URL category.\n"
                },
                "dbCategorizedUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs added to a custom URL category are also retained under the original parent URL category (i.e., the predefined category the URL previously belonged to).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the category.\n"
                },
                "editable": {
                    "type": "boolean",
                    "description": "Value is set to false for custom URL category when due to scope user does not have edit permission\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom IP address ranges associated to a URL category. Up to 2000 custom IP address ranges and retaining parent custom IP address ranges can be added, per organization, across all categories.\n⚠️ **NOTE :**: This field is available only if the option to configure custom IP ranges is enabled for your organization. To enable this option, contact Zscaler Support.\n"
                },
                "ipRangesRetainingParentCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The retaining parent custom IP address ranges associated to a URL category. Up to 2000 custom IP ranges and retaining parent custom IP address ranges can be added, per organization, across all categories.\n"
                },
                "ipRangesRetainingParentCategoryCount": {
                    "type": "integer",
                    "description": "The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.\n"
                },
                "keywords": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom keywords associated to a URL category. Up to 2048 custom keywords can be added per organization across all categories (including bandwidth classes).\n"
                },
                "keywordsRetainingParentCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/URLCategoriesScope:URLCategoriesScope"
                    },
                    "description": "Scope of the custom categories.\n"
                },
                "superCategory": {
                    "type": "string",
                    "description": "Super Category of the URL category. This field is required when creating custom URL categories.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`\n"
                },
                "urlKeywordCounts": {
                    "$ref": "#/types/zia:index/URLCategoriesUrlKeywordCounts:URLCategoriesUrlKeywordCounts",
                    "description": "URL and keyword counts for the category.\n"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom URLs to add to a URL category. Up to 25,000 custom URLs can be added per organization across all categories (including bandwidth classes).\n"
                },
                "urlsRetainingParentCategoryCount": {
                    "type": "integer",
                    "description": "The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.\n"
                }
            },
            "required": [
                "categoryId",
                "customIpRangesCount",
                "customUrlsCount",
                "editable",
                "ipRangesRetainingParentCategoryCount",
                "urlKeywordCounts",
                "urlsRetainingParentCategoryCount"
            ],
            "inputProperties": {
                "configuredName": {
                    "type": "string",
                    "description": "Name of the URL category. This is only required for custom URL categories.\n"
                },
                "customCategory": {
                    "type": "boolean",
                    "description": "Set to true for custom URL category. Up to 48 custom URL categories can be added per organization.\n"
                },
                "customIpRangesCount": {
                    "type": "integer",
                    "description": "The number of custom IP address ranges associated to the URL category.\n"
                },
                "customUrlsCount": {
                    "type": "integer",
                    "description": "The number of custom URLs associated to the URL category.\n"
                },
                "dbCategorizedUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs added to a custom URL category are also retained under the original parent URL category (i.e., the predefined category the URL previously belonged to).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the category.\n"
                },
                "editable": {
                    "type": "boolean",
                    "description": "Value is set to false for custom URL category when due to scope user does not have edit permission\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom IP address ranges associated to a URL category. Up to 2000 custom IP address ranges and retaining parent custom IP address ranges can be added, per organization, across all categories.\n⚠️ **NOTE :**: This field is available only if the option to configure custom IP ranges is enabled for your organization. To enable this option, contact Zscaler Support.\n"
                },
                "ipRangesRetainingParentCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The retaining parent custom IP address ranges associated to a URL category. Up to 2000 custom IP ranges and retaining parent custom IP address ranges can be added, per organization, across all categories.\n"
                },
                "ipRangesRetainingParentCategoryCount": {
                    "type": "integer",
                    "description": "The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.\n"
                },
                "keywords": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom keywords associated to a URL category. Up to 2048 custom keywords can be added per organization across all categories (including bandwidth classes).\n"
                },
                "keywordsRetainingParentCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/URLCategoriesScope:URLCategoriesScope"
                    },
                    "description": "Scope of the custom categories.\n"
                },
                "superCategory": {
                    "type": "string",
                    "description": "Super Category of the URL category. This field is required when creating custom URL categories.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`\n"
                },
                "urlKeywordCounts": {
                    "$ref": "#/types/zia:index/URLCategoriesUrlKeywordCounts:URLCategoriesUrlKeywordCounts",
                    "description": "URL and keyword counts for the category.\n"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom URLs to add to a URL category. Up to 25,000 custom URLs can be added per organization across all categories (including bandwidth classes).\n"
                },
                "urlsRetainingParentCategoryCount": {
                    "type": "integer",
                    "description": "The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering URLCategories resources.\n",
                "properties": {
                    "categoryId": {
                        "type": "string"
                    },
                    "configuredName": {
                        "type": "string",
                        "description": "Name of the URL category. This is only required for custom URL categories.\n"
                    },
                    "customCategory": {
                        "type": "boolean",
                        "description": "Set to true for custom URL category. Up to 48 custom URL categories can be added per organization.\n"
                    },
                    "customIpRangesCount": {
                        "type": "integer",
                        "description": "The number of custom IP address ranges associated to the URL category.\n"
                    },
                    "customUrlsCount": {
                        "type": "integer",
                        "description": "The number of custom URLs associated to the URL category.\n"
                    },
                    "dbCategorizedUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs added to a custom URL category are also retained under the original parent URL category (i.e., the predefined category the URL previously belonged to).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the category.\n"
                    },
                    "editable": {
                        "type": "boolean",
                        "description": "Value is set to false for custom URL category when due to scope user does not have edit permission\n"
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Custom IP address ranges associated to a URL category. Up to 2000 custom IP address ranges and retaining parent custom IP address ranges can be added, per organization, across all categories.\n⚠️ **NOTE :**: This field is available only if the option to configure custom IP ranges is enabled for your organization. To enable this option, contact Zscaler Support.\n"
                    },
                    "ipRangesRetainingParentCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The retaining parent custom IP address ranges associated to a URL category. Up to 2000 custom IP ranges and retaining parent custom IP address ranges can be added, per organization, across all categories.\n"
                    },
                    "ipRangesRetainingParentCategoryCount": {
                        "type": "integer",
                        "description": "The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.\n"
                    },
                    "keywords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Custom keywords associated to a URL category. Up to 2048 custom keywords can be added per organization across all categories (including bandwidth classes).\n"
                    },
                    "keywordsRetainingParentCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/URLCategoriesScope:URLCategoriesScope"
                        },
                        "description": "Scope of the custom categories.\n"
                    },
                    "superCategory": {
                        "type": "string",
                        "description": "Super Category of the URL category. This field is required when creating custom URL categories.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`\n"
                    },
                    "urlKeywordCounts": {
                        "$ref": "#/types/zia:index/URLCategoriesUrlKeywordCounts:URLCategoriesUrlKeywordCounts",
                        "description": "URL and keyword counts for the category.\n"
                    },
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Custom URLs to add to a URL category. Up to 25,000 custom URLs can be added per organization across all categories (including bandwidth classes).\n"
                    },
                    "urlsRetainingParentCategoryCount": {
                        "type": "integer",
                        "description": "The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/uRLFilteringRules:URLFilteringRules": {
            "description": "The **zia_url_filtering_rules** resource creates and manages a URL filtering rules within the Zscaler Internet Access cloud.\n\n## Example Usage\n\n### BLOCK ACTION\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\n\nconst _this = new zia.URLFilteringRules(\"this\", {\n    action: \"BLOCK\",\n    description: \"Example\",\n    deviceTrustLevels: [\n        \"UNKNOWN_DEVICETRUSTLEVEL\",\n        \"LOW_TRUST\",\n        \"MEDIUM_TRUST\",\n        \"HIGH_TRUST\",\n    ],\n    order: 1,\n    protocols: [\"ANY_RULE\"],\n    requestMethods: [\n        \"CONNECT\",\n        \"DELETE\",\n        \"GET\",\n        \"HEAD\",\n        \"OPTIONS\",\n        \"OTHER\",\n        \"POST\",\n        \"PUT\",\n        \"TRACE\",\n    ],\n    state: \"ENABLED\",\n    urlCategories: [\"ANY\"],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\nthis = zia.URLFilteringRules(\"this\",\n    action=\"BLOCK\",\n    description=\"Example\",\n    device_trust_levels=[\n        \"UNKNOWN_DEVICETRUSTLEVEL\",\n        \"LOW_TRUST\",\n        \"MEDIUM_TRUST\",\n        \"HIGH_TRUST\",\n    ],\n    order=1,\n    protocols=[\"ANY_RULE\"],\n    request_methods=[\n        \"CONNECT\",\n        \"DELETE\",\n        \"GET\",\n        \"HEAD\",\n        \"OPTIONS\",\n        \"OTHER\",\n        \"POST\",\n        \"PUT\",\n        \"TRACE\",\n    ],\n    state=\"ENABLED\",\n    url_categories=[\"ANY\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = new Zia.URLFilteringRules(\"this\", new()\n    {\n        Action = \"BLOCK\",\n        Description = \"Example\",\n        DeviceTrustLevels = new[]\n        {\n            \"UNKNOWN_DEVICETRUSTLEVEL\",\n            \"LOW_TRUST\",\n            \"MEDIUM_TRUST\",\n            \"HIGH_TRUST\",\n        },\n        Order = 1,\n        Protocols = new[]\n        {\n            \"ANY_RULE\",\n        },\n        RequestMethods = new[]\n        {\n            \"CONNECT\",\n            \"DELETE\",\n            \"GET\",\n            \"HEAD\",\n            \"OPTIONS\",\n            \"OTHER\",\n            \"POST\",\n            \"PUT\",\n            \"TRACE\",\n        },\n        State = \"ENABLED\",\n        UrlCategories = new[]\n        {\n            \"ANY\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.NewURLFilteringRules(ctx, \"this\", \u0026zia.URLFilteringRulesArgs{\n\t\t\tAction:      pulumi.String(\"BLOCK\"),\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tDeviceTrustLevels: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"UNKNOWN_DEVICETRUSTLEVEL\"),\n\t\t\t\tpulumi.String(\"LOW_TRUST\"),\n\t\t\t\tpulumi.String(\"MEDIUM_TRUST\"),\n\t\t\t\tpulumi.String(\"HIGH_TRUST\"),\n\t\t\t},\n\t\t\tOrder: pulumi.Int(1),\n\t\t\tProtocols: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ANY_RULE\"),\n\t\t\t},\n\t\t\tRequestMethods: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"CONNECT\"),\n\t\t\t\tpulumi.String(\"DELETE\"),\n\t\t\t\tpulumi.String(\"GET\"),\n\t\t\t\tpulumi.String(\"HEAD\"),\n\t\t\t\tpulumi.String(\"OPTIONS\"),\n\t\t\t\tpulumi.String(\"OTHER\"),\n\t\t\t\tpulumi.String(\"POST\"),\n\t\t\t\tpulumi.String(\"PUT\"),\n\t\t\t\tpulumi.String(\"TRACE\"),\n\t\t\t},\n\t\t\tState: pulumi.String(\"ENABLED\"),\n\t\t\tUrlCategories: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ANY\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.URLFilteringRules;\nimport com.pulumi.zia.URLFilteringRulesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var this_ = new URLFilteringRules(\"this\", URLFilteringRulesArgs.builder()        \n            .action(\"BLOCK\")\n            .description(\"Example\")\n            .deviceTrustLevels(            \n                \"UNKNOWN_DEVICETRUSTLEVEL\",\n                \"LOW_TRUST\",\n                \"MEDIUM_TRUST\",\n                \"HIGH_TRUST\")\n            .order(1)\n            .protocols(\"ANY_RULE\")\n            .requestMethods(            \n                \"CONNECT\",\n                \"DELETE\",\n                \"GET\",\n                \"HEAD\",\n                \"OPTIONS\",\n                \"OTHER\",\n                \"POST\",\n                \"PUT\",\n                \"TRACE\")\n            .state(\"ENABLED\")\n            .urlCategories(\"ANY\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  this:\n    type: zia:URLFilteringRules\n    properties:\n      action: BLOCK\n      description: Example\n      deviceTrustLevels:\n        - UNKNOWN_DEVICETRUSTLEVEL\n        - LOW_TRUST\n        - MEDIUM_TRUST\n        - HIGH_TRUST\n      order: 1\n      protocols:\n        - ANY_RULE\n      requestMethods:\n        - CONNECT\n        - DELETE\n        - GET\n        - HEAD\n        - OPTIONS\n        - OTHER\n        - POST\n        - PUT\n        - TRACE\n      state: ENABLED\n      urlCategories:\n        - ANY\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### ISOLATE ACTION\n\n⚠️ **WARNING 1:**: Creating a URL Filtering rule with the action of `ISOLATE` requires the Cloud Browser Isolation subscription. To learn more, contact Zscaler Support or your local account team.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\nimport * as zia from \"@pulumi/zia\";\n\nconst thisCbiProfile = zia.getCbiProfile({\n    name: \"BD_SA_Profile1_ZIA\",\n});\nconst thisURLFilteringRules = new zia.URLFilteringRules(\"thisURLFilteringRules\", {\n    description: \"Example\",\n    state: \"ENABLED\",\n    action: \"ISOLATE\",\n    order: 1,\n    urlCategories: [\"ANY\"],\n    deviceTrustLevels: [\n        \"UNKNOWN_DEVICETRUSTLEVEL\",\n        \"LOW_TRUST\",\n        \"MEDIUM_TRUST\",\n        \"HIGH_TRUST\",\n    ],\n    protocols: [\n        \"HTTPS_RULE\",\n        \"HTTP_RULE\",\n    ],\n    requestMethods: [\n        \"CONNECT\",\n        \"DELETE\",\n        \"GET\",\n        \"HEAD\",\n        \"OPTIONS\",\n        \"OTHER\",\n        \"POST\",\n        \"PUT\",\n        \"TRACE\",\n    ],\n    cbiProfiles: [{\n        id: thisCbiProfile.then(thisCbiProfile =\u003e thisCbiProfile.id),\n        name: thisCbiProfile.then(thisCbiProfile =\u003e thisCbiProfile.name),\n        url: thisCbiProfile.then(thisCbiProfile =\u003e thisCbiProfile.url),\n    }],\n    userAgentTypes: [\n        \"OPERA\",\n        \"FIREFOX\",\n        \"MSIE\",\n        \"MSEDGE\",\n        \"CHROME\",\n        \"SAFARI\",\n        \"MSCHREDGE\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nthis_cbi_profile = zia.get_cbi_profile(name=\"BD_SA_Profile1_ZIA\")\nthis_url_filtering_rules = zia.URLFilteringRules(\"thisURLFilteringRules\",\n    description=\"Example\",\n    state=\"ENABLED\",\n    action=\"ISOLATE\",\n    order=1,\n    url_categories=[\"ANY\"],\n    device_trust_levels=[\n        \"UNKNOWN_DEVICETRUSTLEVEL\",\n        \"LOW_TRUST\",\n        \"MEDIUM_TRUST\",\n        \"HIGH_TRUST\",\n    ],\n    protocols=[\n        \"HTTPS_RULE\",\n        \"HTTP_RULE\",\n    ],\n    request_methods=[\n        \"CONNECT\",\n        \"DELETE\",\n        \"GET\",\n        \"HEAD\",\n        \"OPTIONS\",\n        \"OTHER\",\n        \"POST\",\n        \"PUT\",\n        \"TRACE\",\n    ],\n    cbi_profiles=[zia.URLFilteringRulesCbiProfileArgs(\n        id=this_cbi_profile.id,\n        name=this_cbi_profile.name,\n        url=this_cbi_profile.url,\n    )],\n    user_agent_types=[\n        \"OPERA\",\n        \"FIREFOX\",\n        \"MSIE\",\n        \"MSEDGE\",\n        \"CHROME\",\n        \"SAFARI\",\n        \"MSCHREDGE\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var thisCbiProfile = Zia.GetCbiProfile.Invoke(new()\n    {\n        Name = \"BD_SA_Profile1_ZIA\",\n    });\n\n    var thisURLFilteringRules = new Zia.URLFilteringRules(\"thisURLFilteringRules\", new()\n    {\n        Description = \"Example\",\n        State = \"ENABLED\",\n        Action = \"ISOLATE\",\n        Order = 1,\n        UrlCategories = new[]\n        {\n            \"ANY\",\n        },\n        DeviceTrustLevels = new[]\n        {\n            \"UNKNOWN_DEVICETRUSTLEVEL\",\n            \"LOW_TRUST\",\n            \"MEDIUM_TRUST\",\n            \"HIGH_TRUST\",\n        },\n        Protocols = new[]\n        {\n            \"HTTPS_RULE\",\n            \"HTTP_RULE\",\n        },\n        RequestMethods = new[]\n        {\n            \"CONNECT\",\n            \"DELETE\",\n            \"GET\",\n            \"HEAD\",\n            \"OPTIONS\",\n            \"OTHER\",\n            \"POST\",\n            \"PUT\",\n            \"TRACE\",\n        },\n        CbiProfiles = new[]\n        {\n            new Zia.Inputs.URLFilteringRulesCbiProfileArgs\n            {\n                Id = thisCbiProfile.Apply(getCbiProfileResult =\u003e getCbiProfileResult.Id),\n                Name = thisCbiProfile.Apply(getCbiProfileResult =\u003e getCbiProfileResult.Name),\n                Url = thisCbiProfile.Apply(getCbiProfileResult =\u003e getCbiProfileResult.Url),\n            },\n        },\n        UserAgentTypes = new[]\n        {\n            \"OPERA\",\n            \"FIREFOX\",\n            \"MSIE\",\n            \"MSEDGE\",\n            \"CHROME\",\n            \"SAFARI\",\n            \"MSCHREDGE\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthisCbiProfile, err := zia.GetCbiProfile(ctx, \u0026zia.GetCbiProfileArgs{\n\t\t\tName: pulumi.StringRef(\"BD_SA_Profile1_ZIA\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = zia.NewURLFilteringRules(ctx, \"thisURLFilteringRules\", \u0026zia.URLFilteringRulesArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tState:       pulumi.String(\"ENABLED\"),\n\t\t\tAction:      pulumi.String(\"ISOLATE\"),\n\t\t\tOrder:       pulumi.Int(1),\n\t\t\tUrlCategories: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ANY\"),\n\t\t\t},\n\t\t\tDeviceTrustLevels: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"UNKNOWN_DEVICETRUSTLEVEL\"),\n\t\t\t\tpulumi.String(\"LOW_TRUST\"),\n\t\t\t\tpulumi.String(\"MEDIUM_TRUST\"),\n\t\t\t\tpulumi.String(\"HIGH_TRUST\"),\n\t\t\t},\n\t\t\tProtocols: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"HTTPS_RULE\"),\n\t\t\t\tpulumi.String(\"HTTP_RULE\"),\n\t\t\t},\n\t\t\tRequestMethods: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"CONNECT\"),\n\t\t\t\tpulumi.String(\"DELETE\"),\n\t\t\t\tpulumi.String(\"GET\"),\n\t\t\t\tpulumi.String(\"HEAD\"),\n\t\t\t\tpulumi.String(\"OPTIONS\"),\n\t\t\t\tpulumi.String(\"OTHER\"),\n\t\t\t\tpulumi.String(\"POST\"),\n\t\t\t\tpulumi.String(\"PUT\"),\n\t\t\t\tpulumi.String(\"TRACE\"),\n\t\t\t},\n\t\t\tCbiProfiles: zia.URLFilteringRulesCbiProfileArray{\n\t\t\t\t\u0026zia.URLFilteringRulesCbiProfileArgs{\n\t\t\t\t\tId:   pulumi.String(thisCbiProfile.Id),\n\t\t\t\t\tName: pulumi.String(thisCbiProfile.Name),\n\t\t\t\t\tUrl:  pulumi.String(thisCbiProfile.Url),\n\t\t\t\t},\n\t\t\t},\n\t\t\tUserAgentTypes: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"OPERA\"),\n\t\t\t\tpulumi.String(\"FIREFOX\"),\n\t\t\t\tpulumi.String(\"MSIE\"),\n\t\t\t\tpulumi.String(\"MSEDGE\"),\n\t\t\t\tpulumi.String(\"CHROME\"),\n\t\t\t\tpulumi.String(\"SAFARI\"),\n\t\t\t\tpulumi.String(\"MSCHREDGE\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetCbiProfileArgs;\nimport com.pulumi.zia.URLFilteringRules;\nimport com.pulumi.zia.URLFilteringRulesArgs;\nimport com.pulumi.zia.inputs.URLFilteringRulesCbiProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var thisCbiProfile = ZiaFunctions.getCbiProfile(GetCbiProfileArgs.builder()\n            .name(\"BD_SA_Profile1_ZIA\")\n            .build());\n\n        var thisURLFilteringRules = new URLFilteringRules(\"thisURLFilteringRules\", URLFilteringRulesArgs.builder()        \n            .description(\"Example\")\n            .state(\"ENABLED\")\n            .action(\"ISOLATE\")\n            .order(1)\n            .urlCategories(\"ANY\")\n            .deviceTrustLevels(            \n                \"UNKNOWN_DEVICETRUSTLEVEL\",\n                \"LOW_TRUST\",\n                \"MEDIUM_TRUST\",\n                \"HIGH_TRUST\")\n            .protocols(            \n                \"HTTPS_RULE\",\n                \"HTTP_RULE\")\n            .requestMethods(            \n                \"CONNECT\",\n                \"DELETE\",\n                \"GET\",\n                \"HEAD\",\n                \"OPTIONS\",\n                \"OTHER\",\n                \"POST\",\n                \"PUT\",\n                \"TRACE\")\n            .cbiProfiles(URLFilteringRulesCbiProfileArgs.builder()\n                .id(thisCbiProfile.applyValue(getCbiProfileResult -\u003e getCbiProfileResult.id()))\n                .name(thisCbiProfile.applyValue(getCbiProfileResult -\u003e getCbiProfileResult.name()))\n                .url(thisCbiProfile.applyValue(getCbiProfileResult -\u003e getCbiProfileResult.url()))\n                .build())\n            .userAgentTypes(            \n                \"OPERA\",\n                \"FIREFOX\",\n                \"MSIE\",\n                \"MSEDGE\",\n                \"CHROME\",\n                \"SAFARI\",\n                \"MSCHREDGE\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  thisURLFilteringRules:\n    type: zia:URLFilteringRules\n    properties:\n      description: Example\n      state: ENABLED\n      action: ISOLATE\n      order: 1\n      urlCategories:\n        - ANY\n      deviceTrustLevels:\n        - UNKNOWN_DEVICETRUSTLEVEL\n        - LOW_TRUST\n        - MEDIUM_TRUST\n        - HIGH_TRUST\n      protocols:\n        - HTTPS_RULE\n        - HTTP_RULE\n      requestMethods:\n        - CONNECT\n        - DELETE\n        - GET\n        - HEAD\n        - OPTIONS\n        - OTHER\n        - POST\n        - PUT\n        - TRACE\n      cbiProfiles:\n        - id: ${thisCbiProfile.id}\n          name: ${thisCbiProfile.name}\n          url: ${thisCbiProfile.url}\n      userAgentTypes:\n        - OPERA\n        - FIREFOX\n        - MSIE\n        - MSEDGE\n        - CHROME\n        - SAFARI\n        - MSCHREDGE\nvariables:\n  thisCbiProfile:\n    fn::invoke:\n      Function: zia:getCbiProfile\n      Arguments:\n        name: BD_SA_Profile1_ZIA\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_url_filtering_rules** can be imported by using `\u003cRULE_ID\u003e` or `\u003cRULE_NAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/uRLFilteringRules:URLFilteringRules example \u003crule_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/uRLFilteringRules:URLFilteringRules example \u003crule_name\u003e\n```\n\n",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`\n"
                },
                "blockOverride": {
                    "type": "boolean",
                    "description": "When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If block_override is not set, `BLOCK` action cannot be overridden.\n"
                },
                "cbiProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/URLFilteringRulesCbiProfile:URLFilteringRulesCbiProfile"
                    },
                    "description": "The cloud browser isolation profile to which the ISOLATE action is applied in the URL Filtering Policy rules. This block is required when the attribute `action` is set to `ISOLATE`\n"
                },
                "ciparule": {
                    "type": "boolean",
                    "description": "If set to true, the CIPA Compliance rule is enabled\n"
                },
                "departments": {
                    "$ref": "#/types/zia:index/URLFilteringRulesDepartments:URLFilteringRulesDepartments",
                    "description": "The departments to which the Firewall Filtering policy rule applies\n"
                },
                "description": {
                    "type": "string",
                    "description": "Additional information about the rule\n"
                },
                "deviceGroups": {
                    "$ref": "#/types/zia:index/URLFilteringRulesDeviceGroups:URLFilteringRulesDeviceGroups",
                    "description": "This field is applicable for devices that are managed using Zscaler Client Connector.\n"
                },
                "deviceTrustLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`\n"
                },
                "devices": {
                    "$ref": "#/types/zia:index/URLFilteringRulesDevices:URLFilteringRulesDevices",
                    "description": "Name-ID pairs of devices for which rule must be applied.\n"
                },
                "endUserNotificationUrl": {
                    "type": "string",
                    "description": "URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.\n"
                },
                "enforceTimeValidity": {
                    "type": "boolean",
                    "description": "Enforce a set a validity time period for the URL Filtering rule.\n"
                },
                "groups": {
                    "$ref": "#/types/zia:index/URLFilteringRulesGroups:URLFilteringRulesGroups",
                    "description": "The groups to which the Firewall Filtering policy rule applies\n"
                },
                "labels": {
                    "$ref": "#/types/zia:index/URLFilteringRulesLabels:URLFilteringRulesLabels",
                    "description": "The URL Filtering rule's label.\n"
                },
                "locationGroups": {
                    "$ref": "#/types/zia:index/URLFilteringRulesLocationGroups:URLFilteringRulesLocationGroups",
                    "description": "The location groups to which the Firewall Filtering policy rule applies\n"
                },
                "locations": {
                    "$ref": "#/types/zia:index/URLFilteringRulesLocations:URLFilteringRulesLocations",
                    "description": "The locations to which the Firewall Filtering policy rule applies\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order of execution of rule with respect to other URL Filtering rules\n"
                },
                "overrideGroups": {
                    "$ref": "#/types/zia:index/URLFilteringRulesOverrideGroups:URLFilteringRulesOverrideGroups",
                    "description": "Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.\n"
                },
                "overrideUsers": {
                    "$ref": "#/types/zia:index/URLFilteringRulesOverrideUsers:URLFilteringRulesOverrideUsers",
                    "description": "Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`, `WEBSOCKETSSL_RULE`, `WEBSOCKET_RULE`,\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "Admin rank of the admin who creates this rule\n"
                },
                "requestMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request method for which the rule must be applied. If not set, rule will be applied to all methods\n"
                },
                "ruleId": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "sizeQuota": {
                    "type": "integer",
                    "description": "Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Rule State\n"
                },
                "timeQuota": {
                    "type": "integer",
                    "description": "Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                },
                "timeWindows": {
                    "$ref": "#/types/zia:index/URLFilteringRulesTimeWindows:URLFilteringRulesTimeWindows",
                    "description": "The time interval in which the Firewall Filtering policy rule applies\n"
                },
                "urlCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URL categories for which rule must be applied\n"
                },
                "userAgentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Supported User Agent Types\n"
                },
                "userRiskScoreLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`\n"
                },
                "users": {
                    "$ref": "#/types/zia:index/URLFilteringRulesUsers:URLFilteringRulesUsers",
                    "description": "The users to which the Firewall Filtering policy rule applies\n"
                },
                "validityEndTime": {
                    "type": "integer",
                    "description": "If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.\n"
                },
                "validityStartTime": {
                    "type": "integer",
                    "description": "If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.\n"
                },
                "validityTimeZoneId": {
                    "type": "string",
                    "description": "If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.\n"
                },
                "workloadGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/URLFilteringRulesWorkloadGroup:URLFilteringRulesWorkloadGroup"
                    },
                    "description": "The list of preconfigured workload groups to which the policy must be applied\n"
                }
            },
            "required": [
                "departments",
                "deviceGroups",
                "devices",
                "groups",
                "labels",
                "locationGroups",
                "locations",
                "name",
                "order",
                "overrideGroups",
                "overrideUsers",
                "protocols",
                "ruleId",
                "timeWindows",
                "users",
                "workloadGroups"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`\n"
                },
                "blockOverride": {
                    "type": "boolean",
                    "description": "When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If block_override is not set, `BLOCK` action cannot be overridden.\n"
                },
                "cbiProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/URLFilteringRulesCbiProfile:URLFilteringRulesCbiProfile"
                    },
                    "description": "The cloud browser isolation profile to which the ISOLATE action is applied in the URL Filtering Policy rules. This block is required when the attribute `action` is set to `ISOLATE`\n"
                },
                "ciparule": {
                    "type": "boolean",
                    "description": "If set to true, the CIPA Compliance rule is enabled\n"
                },
                "departments": {
                    "$ref": "#/types/zia:index/URLFilteringRulesDepartments:URLFilteringRulesDepartments",
                    "description": "The departments to which the Firewall Filtering policy rule applies\n"
                },
                "description": {
                    "type": "string",
                    "description": "Additional information about the rule\n"
                },
                "deviceGroups": {
                    "$ref": "#/types/zia:index/URLFilteringRulesDeviceGroups:URLFilteringRulesDeviceGroups",
                    "description": "This field is applicable for devices that are managed using Zscaler Client Connector.\n"
                },
                "deviceTrustLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`\n"
                },
                "devices": {
                    "$ref": "#/types/zia:index/URLFilteringRulesDevices:URLFilteringRulesDevices",
                    "description": "Name-ID pairs of devices for which rule must be applied.\n"
                },
                "endUserNotificationUrl": {
                    "type": "string",
                    "description": "URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.\n"
                },
                "enforceTimeValidity": {
                    "type": "boolean",
                    "description": "Enforce a set a validity time period for the URL Filtering rule.\n"
                },
                "groups": {
                    "$ref": "#/types/zia:index/URLFilteringRulesGroups:URLFilteringRulesGroups",
                    "description": "The groups to which the Firewall Filtering policy rule applies\n"
                },
                "labels": {
                    "$ref": "#/types/zia:index/URLFilteringRulesLabels:URLFilteringRulesLabels",
                    "description": "The URL Filtering rule's label.\n"
                },
                "locationGroups": {
                    "$ref": "#/types/zia:index/URLFilteringRulesLocationGroups:URLFilteringRulesLocationGroups",
                    "description": "The location groups to which the Firewall Filtering policy rule applies\n"
                },
                "locations": {
                    "$ref": "#/types/zia:index/URLFilteringRulesLocations:URLFilteringRulesLocations",
                    "description": "The locations to which the Firewall Filtering policy rule applies\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order of execution of rule with respect to other URL Filtering rules\n"
                },
                "overrideGroups": {
                    "$ref": "#/types/zia:index/URLFilteringRulesOverrideGroups:URLFilteringRulesOverrideGroups",
                    "description": "Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.\n"
                },
                "overrideUsers": {
                    "$ref": "#/types/zia:index/URLFilteringRulesOverrideUsers:URLFilteringRulesOverrideUsers",
                    "description": "Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`, `WEBSOCKETSSL_RULE`, `WEBSOCKET_RULE`,\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "Admin rank of the admin who creates this rule\n"
                },
                "requestMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request method for which the rule must be applied. If not set, rule will be applied to all methods\n"
                },
                "sizeQuota": {
                    "type": "integer",
                    "description": "Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Rule State\n"
                },
                "timeQuota": {
                    "type": "integer",
                    "description": "Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                },
                "timeWindows": {
                    "$ref": "#/types/zia:index/URLFilteringRulesTimeWindows:URLFilteringRulesTimeWindows",
                    "description": "The time interval in which the Firewall Filtering policy rule applies\n"
                },
                "urlCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URL categories for which rule must be applied\n"
                },
                "userAgentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Supported User Agent Types\n"
                },
                "userRiskScoreLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`\n"
                },
                "users": {
                    "$ref": "#/types/zia:index/URLFilteringRulesUsers:URLFilteringRulesUsers",
                    "description": "The users to which the Firewall Filtering policy rule applies\n"
                },
                "validityEndTime": {
                    "type": "integer",
                    "description": "If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.\n"
                },
                "validityStartTime": {
                    "type": "integer",
                    "description": "If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.\n"
                },
                "validityTimeZoneId": {
                    "type": "string",
                    "description": "If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.\n"
                },
                "workloadGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:index/URLFilteringRulesWorkloadGroup:URLFilteringRulesWorkloadGroup"
                    },
                    "description": "The list of preconfigured workload groups to which the policy must be applied\n"
                }
            },
            "requiredInputs": [
                "protocols"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering URLFilteringRules resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`\n"
                    },
                    "blockOverride": {
                        "type": "boolean",
                        "description": "When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If block_override is not set, `BLOCK` action cannot be overridden.\n"
                    },
                    "cbiProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/URLFilteringRulesCbiProfile:URLFilteringRulesCbiProfile"
                        },
                        "description": "The cloud browser isolation profile to which the ISOLATE action is applied in the URL Filtering Policy rules. This block is required when the attribute `action` is set to `ISOLATE`\n"
                    },
                    "ciparule": {
                        "type": "boolean",
                        "description": "If set to true, the CIPA Compliance rule is enabled\n"
                    },
                    "departments": {
                        "$ref": "#/types/zia:index/URLFilteringRulesDepartments:URLFilteringRulesDepartments",
                        "description": "The departments to which the Firewall Filtering policy rule applies\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Additional information about the rule\n"
                    },
                    "deviceGroups": {
                        "$ref": "#/types/zia:index/URLFilteringRulesDeviceGroups:URLFilteringRulesDeviceGroups",
                        "description": "This field is applicable for devices that are managed using Zscaler Client Connector.\n"
                    },
                    "deviceTrustLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`\n"
                    },
                    "devices": {
                        "$ref": "#/types/zia:index/URLFilteringRulesDevices:URLFilteringRulesDevices",
                        "description": "Name-ID pairs of devices for which rule must be applied.\n"
                    },
                    "endUserNotificationUrl": {
                        "type": "string",
                        "description": "URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.\n"
                    },
                    "enforceTimeValidity": {
                        "type": "boolean",
                        "description": "Enforce a set a validity time period for the URL Filtering rule.\n"
                    },
                    "groups": {
                        "$ref": "#/types/zia:index/URLFilteringRulesGroups:URLFilteringRulesGroups",
                        "description": "The groups to which the Firewall Filtering policy rule applies\n"
                    },
                    "labels": {
                        "$ref": "#/types/zia:index/URLFilteringRulesLabels:URLFilteringRulesLabels",
                        "description": "The URL Filtering rule's label.\n"
                    },
                    "locationGroups": {
                        "$ref": "#/types/zia:index/URLFilteringRulesLocationGroups:URLFilteringRulesLocationGroups",
                        "description": "The location groups to which the Firewall Filtering policy rule applies\n"
                    },
                    "locations": {
                        "$ref": "#/types/zia:index/URLFilteringRulesLocations:URLFilteringRulesLocations",
                        "description": "The locations to which the Firewall Filtering policy rule applies\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Firewall Filtering policy rule\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Order of execution of rule with respect to other URL Filtering rules\n"
                    },
                    "overrideGroups": {
                        "$ref": "#/types/zia:index/URLFilteringRulesOverrideGroups:URLFilteringRulesOverrideGroups",
                        "description": "Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.\n"
                    },
                    "overrideUsers": {
                        "$ref": "#/types/zia:index/URLFilteringRulesOverrideUsers:URLFilteringRulesOverrideUsers",
                        "description": "Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.\n"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`, `WEBSOCKETSSL_RULE`, `WEBSOCKET_RULE`,\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "Admin rank of the admin who creates this rule\n"
                    },
                    "requestMethods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Request method for which the rule must be applied. If not set, rule will be applied to all methods\n"
                    },
                    "ruleId": {
                        "type": "integer",
                        "description": "URL Filtering Rule ID\n"
                    },
                    "sizeQuota": {
                        "type": "integer",
                        "description": "Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Rule State\n"
                    },
                    "timeQuota": {
                        "type": "integer",
                        "description": "Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                    },
                    "timeWindows": {
                        "$ref": "#/types/zia:index/URLFilteringRulesTimeWindows:URLFilteringRulesTimeWindows",
                        "description": "The time interval in which the Firewall Filtering policy rule applies\n"
                    },
                    "urlCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of URL categories for which rule must be applied\n"
                    },
                    "userAgentTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Supported User Agent Types\n"
                    },
                    "userRiskScoreLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`\n"
                    },
                    "users": {
                        "$ref": "#/types/zia:index/URLFilteringRulesUsers:URLFilteringRulesUsers",
                        "description": "The users to which the Firewall Filtering policy rule applies\n"
                    },
                    "validityEndTime": {
                        "type": "integer",
                        "description": "If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.\n"
                    },
                    "validityStartTime": {
                        "type": "integer",
                        "description": "If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.\n"
                    },
                    "validityTimeZoneId": {
                        "type": "string",
                        "description": "If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.\n"
                    },
                    "workloadGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/URLFilteringRulesWorkloadGroup:URLFilteringRulesWorkloadGroup"
                        },
                        "description": "The list of preconfigured workload groups to which the policy must be applied\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:index/userManagement:UserManagement": {
            "description": "The **zia_user_management** resource allows the creation and management of local user account in the Zscaler Internet Access cloud. The user account resource can then be associated with several different types of resource within the ZIA tenant.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@bdzscaler/pulumi-zia\";\nimport * as zia from \"@pulumi/zia\";\n\nconst normalInternet = zia.getGroupManagement({\n    name: \"Normal_Internet\",\n});\nconst engineering = zia.getDepartmentManagement({\n    name: \"Engineering\",\n});\n// ZIA Local User Account\n//######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\nconst johnAshcroft = new zia.UserManagement(\"johnAshcroft\", {\n    email: \"john.ashcroft@acme.com\",\n    password: \"*********************\",\n    authMethods: [\"BASIC\"],\n    groups: {\n        ids: normalInternet.then(normalInternet =\u003e normalInternet.id),\n    },\n    department: {\n        id: engineering.then(engineering =\u003e engineering.id),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nnormal_internet = zia.get_group_management(name=\"Normal_Internet\")\nengineering = zia.get_department_management(name=\"Engineering\")\n# ZIA Local User Account\n######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\njohn_ashcroft = zia.UserManagement(\"johnAshcroft\",\n    email=\"john.ashcroft@acme.com\",\n    password=\"*********************\",\n    auth_methods=[\"BASIC\"],\n    groups=zia.UserManagementGroupsArgs(\n        ids=normal_internet.id,\n    ),\n    department=zia.UserManagementDepartmentArgs(\n        id=engineering.id,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var normalInternet = Zia.GetGroupManagement.Invoke(new()\n    {\n        Name = \"Normal_Internet\",\n    });\n\n    var engineering = Zia.GetDepartmentManagement.Invoke(new()\n    {\n        Name = \"Engineering\",\n    });\n\n    // ZIA Local User Account\n    //######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n    var johnAshcroft = new Zia.UserManagement(\"johnAshcroft\", new()\n    {\n        Email = \"john.ashcroft@acme.com\",\n        Password = \"*********************\",\n        AuthMethods = new[]\n        {\n            \"BASIC\",\n        },\n        Groups = new Zia.Inputs.UserManagementGroupsArgs\n        {\n            Ids = normalInternet.Apply(getGroupManagementResult =\u003e getGroupManagementResult.Id),\n        },\n        Department = new Zia.Inputs.UserManagementDepartmentArgs\n        {\n            Id = engineering.Apply(getDepartmentManagementResult =\u003e getDepartmentManagementResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnormalInternet, err := zia.GetGroupManagement(ctx, \u0026zia.GetGroupManagementArgs{\n\t\t\tName: pulumi.StringRef(\"Normal_Internet\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tengineering, err := zia.GetDepartmentManagement(ctx, \u0026zia.GetDepartmentManagementArgs{\n\t\t\tName: pulumi.StringRef(\"Engineering\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t// ZIA Local User Account\n\t\t// ######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n\t\t_, err = zia.NewUserManagement(ctx, \"johnAshcroft\", \u0026zia.UserManagementArgs{\n\t\t\tEmail:    pulumi.String(\"john.ashcroft@acme.com\"),\n\t\t\tPassword: pulumi.String(\"*********************\"),\n\t\t\tAuthMethods: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"BASIC\"),\n\t\t\t},\n\t\t\tGroups: \u0026zia.UserManagementGroupsArgs{\n\t\t\t\tIds: pulumi.Int(normalInternet.Id),\n\t\t\t},\n\t\t\tDepartment: \u0026zia.UserManagementDepartmentArgs{\n\t\t\t\tId: pulumi.Int(engineering.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetGroupManagementArgs;\nimport com.pulumi.zia.inputs.GetDepartmentManagementArgs;\nimport com.pulumi.zia.UserManagement;\nimport com.pulumi.zia.UserManagementArgs;\nimport com.pulumi.zia.inputs.UserManagementGroupsArgs;\nimport com.pulumi.zia.inputs.UserManagementDepartmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var normalInternet = ZiaFunctions.getGroupManagement(GetGroupManagementArgs.builder()\n            .name(\"Normal_Internet\")\n            .build());\n\n        final var engineering = ZiaFunctions.getDepartmentManagement(GetDepartmentManagementArgs.builder()\n            .name(\"Engineering\")\n            .build());\n\n        var johnAshcroft = new UserManagement(\"johnAshcroft\", UserManagementArgs.builder()        \n            .email(\"john.ashcroft@acme.com\")\n            .password(\"*********************\")\n            .authMethods(\"BASIC\")\n            .groups(UserManagementGroupsArgs.builder()\n                .ids(normalInternet.applyValue(getGroupManagementResult -\u003e getGroupManagementResult.id()))\n                .build())\n            .department(UserManagementDepartmentArgs.builder()\n                .id(engineering.applyValue(getDepartmentManagementResult -\u003e getDepartmentManagementResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZIA Local User Account\n  ######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########\n  johnAshcroft:\n    type: zia:UserManagement\n    properties:\n      email: john.ashcroft@acme.com\n      password: '*********************'\n      authMethods:\n        - BASIC\n      groups:\n        ids: ${normalInternet.id}\n      department:\n        id: ${engineering.id}\nvariables:\n  normalInternet:\n    fn::invoke:\n      Function: zia:getGroupManagement\n      Arguments:\n        name: Normal_Internet\n  engineering:\n    fn::invoke:\n      Function: zia:getDepartmentManagement\n      Arguments:\n        name: Engineering\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Optional\n\nThe following attributes are supported:\n\n* `comments` - (Optional) Additional information about this user.\n* `temp_auth_email` - (Optional) Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler service sends the tokens or links. If this is empty, the service will send the email to the User email.\n* `auth_methods` - (Optional) Type of authentication method to be enabled. Supported values is: ``BASIC``\n\n## Import\n\nZscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.\n\nVisit\n\n**zia_user_management** can be imported by using `\u003cUSER_ID\u003e` or `\u003cUSERNAME\u003e` as the import ID.\n\nFor example:\n\n```sh\n$ pulumi import zia:index/userManagement:UserManagement example \u003cuser_id\u003e\n```\n\nor\n\n```sh\n$ pulumi import zia:index/userManagement:UserManagement example \u003cname\u003e\n```\n\n⚠️ **NOTE :**:  This provider do not import the password attribute value during the importing process.\n\n",
            "properties": {
                "authMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Accepted Authentication Methods\n"
                },
                "comments": {
                    "type": "string",
                    "description": "Additional information about this user.\n"
                },
                "department": {
                    "$ref": "#/types/zia:index/UserManagementDepartment:UserManagementDepartment",
                    "description": "Department a user belongs to\n"
                },
                "email": {
                    "type": "string",
                    "description": "User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.\n"
                },
                "groups": {
                    "$ref": "#/types/zia:index/UserManagementGroups:UserManagementGroups",
                    "description": "List of Groups a user belongs to. Groups are used in policies.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User name. This appears when choosing users for policies.\n"
                },
                "password": {
                    "type": "string",
                    "description": "User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.\n",
                    "secret": true
                },
                "tempAuthEmail": {
                    "type": "string",
                    "description": "Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler\nservice sends the tokens or links. If this is empty, the service will send the email to the User email.\n"
                },
                "userId": {
                    "type": "integer"
                }
            },
            "required": [
                "department",
                "email",
                "groups",
                "name",
                "password",
                "userId"
            ],
            "inputProperties": {
                "authMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Accepted Authentication Methods\n"
                },
                "comments": {
                    "type": "string",
                    "description": "Additional information about this user.\n"
                },
                "department": {
                    "$ref": "#/types/zia:index/UserManagementDepartment:UserManagementDepartment",
                    "description": "Department a user belongs to\n"
                },
                "email": {
                    "type": "string",
                    "description": "User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.\n"
                },
                "groups": {
                    "$ref": "#/types/zia:index/UserManagementGroups:UserManagementGroups",
                    "description": "List of Groups a user belongs to. Groups are used in policies.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User name. This appears when choosing users for policies.\n"
                },
                "password": {
                    "type": "string",
                    "description": "User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.\n",
                    "secret": true
                },
                "tempAuthEmail": {
                    "type": "string",
                    "description": "Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler\nservice sends the tokens or links. If this is empty, the service will send the email to the User email.\n"
                }
            },
            "requiredInputs": [
                "department",
                "email",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserManagement resources.\n",
                "properties": {
                    "authMethods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Accepted Authentication Methods\n"
                    },
                    "comments": {
                        "type": "string",
                        "description": "Additional information about this user.\n"
                    },
                    "department": {
                        "$ref": "#/types/zia:index/UserManagementDepartment:UserManagementDepartment",
                        "description": "Department a user belongs to\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.\n"
                    },
                    "groups": {
                        "$ref": "#/types/zia:index/UserManagementGroups:UserManagementGroups",
                        "description": "List of Groups a user belongs to. Groups are used in policies.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "User name. This appears when choosing users for policies.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.\n",
                        "secret": true
                    },
                    "tempAuthEmail": {
                        "type": "string",
                        "description": "Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler\nservice sends the tokens or links. If this is empty, the service will send the email to the User email.\n"
                    },
                    "userId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "zia:index/getActivationStatus:getActivationStatus": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst activation = zia.getActivationStatus({});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nactivation = zia.get_activation_status()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var activation = Zia.GetActivationStatus.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupActivationStatus(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var activation = ZiaFunctions.getActivationStatus();\n\n    }\n}\n```\n```yaml\nvariables:\n  activation:\n    fn::invoke:\n      Function: zia:getActivationStatus\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getActivationStatus.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "id"
                ]
            }
        },
        "zia:index/getAdminRoles:getAdminRoles": {
            "description": "Use the **zia_admin_roles** data source to get information about an admin role created in the Zscaler Internet Access cloud or via the API. This data source can then be associated with a ZIA administrator account.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getAdminRoles({\n    name: \"Super Admin\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_admin_roles(name=\"Super Admin\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetAdminRoles.Invoke(new()\n    {\n        Name = \"Super Admin\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetAdminRoles(ctx, \u0026zia.GetAdminRolesArgs{\n\t\t\tName: pulumi.StringRef(\"Super Admin\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetAdminRolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getAdminRoles(GetAdminRolesArgs.builder()\n            .name(\"Super Admin\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getAdminRoles\n      Arguments:\n        name: Super Admin\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAdminRoles.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Admin role to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAdminRoles.\n",
                "properties": {
                    "adminAcctAccess": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "analysisAccess": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "dashboardAccess": {
                        "type": "string",
                        "description": "(String) Dashboard access permission. Supported values are: `NONE`, `READ_ONLY`\n"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "isAuditor": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether this is an auditor role.\n"
                    },
                    "isNonEditable": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether or not this admin user is editable/deletable.\n"
                    },
                    "logsLimit": {
                        "type": "string",
                        "description": "(String) Log range limit. Returned values are: `UNRESTRICTED`, `MONTH_1`, `MONTH_2`, `MONTH_3`, `MONTH_4`, `MONTH_5`, `MONTH_6`\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) List of functional areas to which this role has access. This attribute is subject to change.\n"
                    },
                    "policyAccess": {
                        "type": "string",
                        "description": "(String) Policy access permission. Returned values are: `NONE`, `READ_ONLY`,`READ_WRITE`\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "(Number) Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and which rule orders this admin can access.\n"
                    },
                    "reportAccess": {
                        "type": "string",
                        "description": "(String) Report access permission. Returned values are: `NONE`, `READ_ONLY`,`READ_WRITE`\n"
                    },
                    "roleType": {
                        "type": "string",
                        "description": "(String) The admin role type. ()This attribute is subject to change.) Supported values are:  `ORG_ADMIN`, `EXEC_INSIGHT`, `EXEC_INSIGHT_AND_ORG_ADMIN`, `SDWAN`\n"
                    },
                    "usernameAccess": {
                        "type": "string",
                        "description": "(String) Username access permission. When set to NONE, the username will be obfuscated. Supported values are: `NONE|READ_ONLY`\n"
                    }
                },
                "type": "object",
                "required": [
                    "adminAcctAccess",
                    "analysisAccess",
                    "dashboardAccess",
                    "id",
                    "isAuditor",
                    "isNonEditable",
                    "logsLimit",
                    "permissions",
                    "policyAccess",
                    "rank",
                    "reportAccess",
                    "roleType",
                    "usernameAccess"
                ]
            }
        },
        "zia:index/getAdminUsers:getAdminUsers": {
            "description": "Use the **zia_admin_users** data source to get information about an admin user account created in the Zscaler Internet Access cloud or via the API. This data source can then be associated with a ZIA administrator role.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst johnDoe = zia.getAdminUsers({\n    loginName: \"john.doe@example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\njohn_doe = zia.get_admin_users(login_name=\"john.doe@example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var johnDoe = Zia.GetAdminUsers.Invoke(new()\n    {\n        LoginName = \"john.doe@example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupAdminUsers(ctx, \u0026zia.LookupAdminUsersArgs{\n\t\t\tLoginName: pulumi.StringRef(\"john.doe@example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetAdminUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var johnDoe = ZiaFunctions.getAdminUsers(GetAdminUsersArgs.builder()\n            .loginName(\"john.doe@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  johnDoe:\n    fn::invoke:\n      Function: zia:getAdminUsers\n      Arguments:\n        loginName: john.doe@example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst johnDoe = zia.getAdminUsers({\n    username: \"John Doe\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\njohn_doe = zia.get_admin_users(username=\"John Doe\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var johnDoe = Zia.GetAdminUsers.Invoke(new()\n    {\n        Username = \"John Doe\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupAdminUsers(ctx, \u0026zia.LookupAdminUsersArgs{\n\t\t\tUsername: pulumi.StringRef(\"John Doe\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetAdminUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var johnDoe = ZiaFunctions.getAdminUsers(GetAdminUsersArgs.builder()\n            .username(\"John Doe\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  johnDoe:\n    fn::invoke:\n      Function: zia:getAdminUsers\n      Arguments:\n        username: John Doe\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAdminUsers.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the admin user to be exported.\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The email address of the admin user to be exported.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the admin user to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAdminUsers.\n",
                "properties": {
                    "adminScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getAdminUsersAdminScope:getAdminUsersAdminScope"
                        },
                        "description": "(Set of Object) The admin's scope. Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.\n"
                    },
                    "comments": {
                        "type": "string",
                        "description": "(String) Additional information about the admin or auditor.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether or not the admin account is disabled.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "(String) Admin or auditor's email address.\n"
                    },
                    "execMobileAppTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getAdminUsersExecMobileAppToken:getAdminUsersExecMobileAppToken"
                        },
                        "description": "(List of Object)\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) Identifier that uniquely identifies an entity\n"
                    },
                    "isAuditor": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether the user is an auditor. This attribute is subject to change.\n"
                    },
                    "isExecMobileAppEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether or not Executive Insights App access is enabled for the admin.\n"
                    },
                    "isNonEditable": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether or not the admin can be edited or deleted.\n"
                    },
                    "isPasswordExpired": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether or not an admin's password has expired.\n"
                    },
                    "isPasswordLoginAllowed": {
                        "type": "boolean",
                        "description": "(Boolean) The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.\n"
                    },
                    "isProductUpdateCommEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Communication setting for Product Update.\n"
                    },
                    "isSecurityReportCommEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Communication for Security Report is enabled.\n"
                    },
                    "isServiceUpdateCommEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Communication setting for Service Update.\n"
                    },
                    "loginName": {
                        "type": "string"
                    },
                    "pwdLastModifiedTime": {
                        "type": "integer"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getAdminUsersRole:getAdminUsersRole"
                        },
                        "description": "(Set of Object) Role of the admin. This is not required for an auditor.\n"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "adminScopes",
                    "comments",
                    "disabled",
                    "email",
                    "execMobileAppTokens",
                    "id",
                    "isAuditor",
                    "isExecMobileAppEnabled",
                    "isNonEditable",
                    "isPasswordExpired",
                    "isPasswordLoginAllowed",
                    "isProductUpdateCommEnabled",
                    "isSecurityReportCommEnabled",
                    "isServiceUpdateCommEnabled",
                    "loginName",
                    "pwdLastModifiedTime",
                    "roles",
                    "username"
                ]
            }
        },
        "zia:index/getAuthSettingsURLs:getAuthSettingsURLs": {
            "description": "Use the **zia_auth_settings_urls** data source to get a list of URLs that were exempted from cookie authentiation and SSL Inspection in the Zscaler Internet Access cloud or via the API. To learn more see [URL Format Guidelines](https://help.zscaler.com/zia/url-format-guidelines)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst foo = zia.getAuthSettingsURLs({});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nfoo = zia.get_auth_settings_urls()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zia.GetAuthSettingsURLs.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupAuthSettingsURLs(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = ZiaFunctions.getAuthSettingsURLs();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zia:getAuthSettingsURLs\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getAuthSettingsURLs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "urls",
                    "id"
                ]
            }
        },
        "zia:index/getCbiProfile:getCbiProfile": {
            "description": "Use the **zia_cloud_browser_isolation_profile** data source to get information about an isolation profile in the Zscaler Internet Access cloud. This data source is required when configuring URL filtering rule where the action is set to `ISOLATE`\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst this = zia.getCbiProfile({\n    name: \"ZS_CBI_Profile1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nthis = zia.get_cbi_profile(name=\"ZS_CBI_Profile1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zia.GetCbiProfile.Invoke(new()\n    {\n        Name = \"ZS_CBI_Profile1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetCbiProfile(ctx, \u0026zia.GetCbiProfileArgs{\n\t\t\tName: pulumi.StringRef(\"ZS_CBI_Profile1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetCbiProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZiaFunctions.getCbiProfile(GetCbiProfileArgs.builder()\n            .name(\"ZS_CBI_Profile1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zia:getCbiProfile\n      Arguments:\n        name: ZS_CBI_Profile1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCbiProfile.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "(string) The universally unique identifier (UUID) for the browser isolation profile.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "This field defines the name of the isolation profile.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCbiProfile.\n",
                "properties": {
                    "defaultProfile": {
                        "type": "boolean",
                        "description": "(Optional) Indicates whether this is a default browser isolation profile. Zscaler sets this field\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(string) The universally unique identifier (UUID) for the browser isolation profile.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string",
                        "description": "(string) The browser isolation profile URL\n"
                    }
                },
                "type": "object",
                "required": [
                    "defaultProfile",
                    "url"
                ]
            }
        },
        "zia:index/getDLPDictionaries:getDLPDictionaries": {
            "description": "Use the **zia_dlp_dictionaries** data source to get information about a DLP dictionary option available in the Zscaler Internet Access.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getDLPDictionaries({\n    name: \"SALESFORCE_REPORT_LEAKAGE\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_dlp_dictionaries(name=\"SALESFORCE_REPORT_LEAKAGE\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetDLPDictionaries.Invoke(new()\n    {\n        Name = \"SALESFORCE_REPORT_LEAKAGE\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupDLPDictionaries(ctx, \u0026zia.LookupDLPDictionariesArgs{\n\t\t\tName: pulumi.StringRef(\"SALESFORCE_REPORT_LEAKAGE\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetDLPDictionariesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getDLPDictionaries(GetDLPDictionariesArgs.builder()\n            .name(\"SALESFORCE_REPORT_LEAKAGE\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getDLPDictionaries\n      Arguments:\n        name: SALESFORCE_REPORT_LEAKAGE\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDLPDictionaries.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Unique identifier for the DLP dictionary\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "DLP dictionary name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDLPDictionaries.\n",
                "properties": {
                    "binNumbers": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "(Boolean) The list of Bank Identification Number (BIN) values that are included or excluded from the Credit Cards dictionary. BIN values can be specified only for Diners Club, Mastercard, RuPay, and Visa cards. Up to 512 BIN values can be configured in a dictionary. Note: This field is applicable only to the predefined Credit Cards dictionary and its clones.\n"
                    },
                    "confidenceThreshold": {
                        "type": "string",
                        "description": "(String) he DLP confidence threshold. [`CONFIDENCE_LEVEL_LOW`, `CONFIDENCE_LEVEL_MEDIUM` `CONFIDENCE_LEVEL_HIGH` ]\n"
                    },
                    "custom": {
                        "type": "boolean",
                        "description": "(Boolean) This value is set to true for custom DLP dictionaries.\n"
                    },
                    "customPhraseMatchType": {
                        "type": "string",
                        "description": "(String) The DLP custom phrase match type. [ `MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY`, `MATCH_ANY_CUSTOM_PHRASE_PATTERN_DICTIONARY` ]\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "dictTemplateId": {
                        "type": "integer",
                        "description": "(Number) ID of the predefined dictionary (original source dictionary) that is used for cloning. This field is applicable only to cloned dictionaries. Only a limited set of identification-based predefined dictionaries (e.g., Credit Cards, Social Security Numbers, National Identification Numbers, etc.) can be cloned. Up to 4 clones can be created from a predefined dictionary.\n"
                    },
                    "dictionaryType": {
                        "type": "string",
                        "description": "(String) The DLP dictionary type. The cloud service API only supports custom DLP dictionaries that are using the `PATTERNS_AND_PHRASES` type.\n"
                    },
                    "exactDataMatchDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPDictionariesExactDataMatchDetail:getDLPDictionariesExactDataMatchDetail"
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "idmProfileMatchAccuracies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPDictionariesIdmProfileMatchAccuracy:getDLPDictionariesIdmProfileMatchAccuracy"
                        }
                    },
                    "ignoreExactMatchIdmDict": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether to exclude documents that are a 100%!m(MISSING)atch to already-indexed documents from triggering an Indexed Document Match (IDM) Dictionary.\n"
                    },
                    "includeBinNumbers": {
                        "type": "boolean",
                        "description": "(Boolean) A true value denotes that the specified Bank Identification Number (BIN) values are included in the Credit Cards dictionary. A false value denotes that the specified BIN values are excluded from the Credit Cards dictionary. Note: This field is applicable only to the predefined Credit Cards dictionary and its clones.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nameL10nTag": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether the name is localized or not. This is always set to True for predefined DLP dictionaries.\n"
                    },
                    "patterns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPDictionariesPattern:getDLPDictionariesPattern"
                        }
                    },
                    "phrases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPDictionariesPhrase:getDLPDictionariesPhrase"
                        }
                    },
                    "predefinedClone": {
                        "type": "boolean",
                        "description": "(Boolean) This field is set to true if the dictionary is cloned from a predefined dictionary. Otherwise, it is set to false.\n"
                    },
                    "proximity": {
                        "type": "integer"
                    },
                    "proximityLengthEnabled": {
                        "type": "boolean"
                    },
                    "thresholdType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "binNumbers",
                    "confidenceThreshold",
                    "custom",
                    "customPhraseMatchType",
                    "description",
                    "dictTemplateId",
                    "dictionaryType",
                    "exactDataMatchDetails",
                    "id",
                    "idmProfileMatchAccuracies",
                    "ignoreExactMatchIdmDict",
                    "includeBinNumbers",
                    "name",
                    "nameL10nTag",
                    "patterns",
                    "phrases",
                    "predefinedClone",
                    "proximity",
                    "proximityLengthEnabled",
                    "thresholdType"
                ]
            }
        },
        "zia:index/getDLPEDMSchema:getDLPEDMSchema": {
            "description": "Use the **zia_dlp_edm_schema** data source to get information about a the list of DLP Exact Data Match (EDM) templates in the Zscaler Internet Access cloud or via the API.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst this = zia.getDLPEDMSchema({\n    projectName: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nthis = zia.get_dlpedm_schema(project_name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zia.GetDLPEDMSchema.Invoke(new()\n    {\n        ProjectName = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetDLPEDMSchema(ctx, \u0026zia.GetDLPEDMSchemaArgs{\n\t\t\tProjectName: pulumi.StringRef(\"Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetDLPEDMSchemaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZiaFunctions.getDLPEDMSchema(GetDLPEDMSchemaArgs.builder()\n            .projectName(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zia:getDLPEDMSchema\n      Arguments:\n        projectName: Example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetDLPEDMSchemaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getDLPEDMSchema(GetDLPEDMSchemaArgs.builder()\n            .schemaId(1234567890)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getDLPEDMSchema\n      Arguments:\n        schemaId: 1.23456789e+09\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDLPEDMSchema.\n",
                "properties": {
                    "projectName": {
                        "type": "string",
                        "description": "The EDM schema (i.e., EDM template) name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDLPEDMSchema.\n",
                "properties": {
                    "cellsUsed": {
                        "type": "integer"
                    },
                    "createdBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPEDMSchemaCreatedBy:getDLPEDMSchemaCreatedBy"
                        }
                    },
                    "edmClients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPEDMSchemaEdmClient:getDLPEDMSchemaEdmClient"
                        }
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "fileUploadStatus": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPEDMSchemaLastModifiedBy:getDLPEDMSchemaLastModifiedBy"
                        }
                    },
                    "lastModifiedTime": {
                        "type": "integer"
                    },
                    "origColCount": {
                        "type": "integer"
                    },
                    "originalFileName": {
                        "type": "string"
                    },
                    "projectName": {
                        "type": "string"
                    },
                    "revision": {
                        "type": "integer"
                    },
                    "schedulePresent": {
                        "type": "boolean"
                    },
                    "schedules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPEDMSchemaSchedule:getDLPEDMSchemaSchedule"
                        }
                    },
                    "schemaActive": {
                        "type": "boolean"
                    },
                    "schemaId": {
                        "type": "integer"
                    },
                    "tokenLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPEDMSchemaTokenList:getDLPEDMSchemaTokenList"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "cellsUsed",
                    "createdBies",
                    "edmClients",
                    "fileName",
                    "fileUploadStatus",
                    "lastModifiedBies",
                    "lastModifiedTime",
                    "origColCount",
                    "originalFileName",
                    "revision",
                    "schedules",
                    "schedulePresent",
                    "schemaActive",
                    "schemaId",
                    "tokenLists",
                    "id"
                ]
            }
        },
        "zia:index/getDLPEngines:getDLPEngines": {
            "description": "Use the **zia_dlp_engines** data source to get information about a ZIA DLP Engines in the Zscaler Internet Access cloud or via the API.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst this = zia.getDLPEngines({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nthis = zia.get_dlp_engines(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zia.GetDLPEngines.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupDLPEngines(ctx, \u0026zia.LookupDLPEnginesArgs{\n\t\t\tName: pulumi.StringRef(\"Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetDLPEnginesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZiaFunctions.getDLPEngines(GetDLPEnginesArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zia:getDLPEngines\n      Arguments:\n        name: Example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst this = zia.getDLPEngines({\n    id: 1234567890,\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nthis = zia.get_dlp_engines(id=1234567890)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zia.GetDLPEngines.Invoke(new()\n    {\n        Id = 1234567890,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupDLPEngines(ctx, \u0026zia.LookupDLPEnginesArgs{\n\t\t\tId: pulumi.IntRef(1234567890),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetDLPEnginesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZiaFunctions.getDLPEngines(GetDLPEnginesArgs.builder()\n            .id(1234567890)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zia:getDLPEngines\n      Arguments:\n        id: 1.23456789e+09\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetDLPEnginesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZiaFunctions.getDLPEngines(GetDLPEnginesArgs.builder()\n            .predefined(\"EXTERNAL\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zia:getDLPEngines\n      Arguments:\n        predefined: EXTERNAL\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDLPEngines.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The unique identifier for the DLP engine.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The DLP engine name as configured by the admin. This attribute is required in POST and PUT requests for custom DLP engines.\n"
                    },
                    "predefinedEngineName": {
                        "type": "string",
                        "description": "The name of the predefined DLP engine.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDLPEngines.\n",
                "properties": {
                    "customDlpEngine": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "engineExpression": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "predefinedEngineName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "customDlpEngine",
                    "description",
                    "engineExpression"
                ]
            }
        },
        "zia:index/getDLPIDMProfileLite:getDLPIDMProfileLite": {
            "inputs": {
                "description": "A collection of arguments for invoking getDLPIDMProfileLite.\n",
                "properties": {
                    "activeOnly": {
                        "type": "boolean"
                    },
                    "templateName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDLPIDMProfileLite.\n",
                "properties": {
                    "activeOnly": {
                        "type": "boolean"
                    },
                    "clientVms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPIDMProfileLiteClientVm:getDLPIDMProfileLiteClientVm"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPIDMProfileLiteLastModifiedBy:getDLPIDMProfileLiteLastModifiedBy"
                        }
                    },
                    "lastModifiedTime": {
                        "type": "integer"
                    },
                    "numDocuments": {
                        "type": "integer"
                    },
                    "profileId": {
                        "type": "integer"
                    },
                    "templateName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clientVms",
                    "lastModifiedBies",
                    "lastModifiedTime",
                    "numDocuments",
                    "profileId",
                    "id"
                ]
            }
        },
        "zia:index/getDLPIDMProfiles:getDLPIDMProfiles": {
            "description": "Use the **zia_dlp_idm_profile** data source to get information about a ZIA DLP IDM Profile in the Zscaler Internet Access cloud or via the API.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDLPIDMProfiles.\n",
                "properties": {
                    "profileName": {
                        "type": "string",
                        "description": "The IDM template name, which is unique per Index Tool.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDLPIDMProfiles.\n",
                "properties": {
                    "host": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "idmClients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPIDMProfilesIdmClient:getDLPIDMProfilesIdmClient"
                        }
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPIDMProfilesLastModifiedBy:getDLPIDMProfilesLastModifiedBy"
                        }
                    },
                    "lastModifiedTime": {
                        "type": "integer"
                    },
                    "numDocuments": {
                        "type": "integer"
                    },
                    "port": {
                        "type": "integer"
                    },
                    "profileDesc": {
                        "type": "string"
                    },
                    "profileDirPath": {
                        "type": "string"
                    },
                    "profileId": {
                        "type": "integer"
                    },
                    "profileName": {
                        "type": "string"
                    },
                    "profileType": {
                        "type": "string"
                    },
                    "scheduleDay": {
                        "type": "integer"
                    },
                    "scheduleDayOfMonths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scheduleDayOfWeeks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scheduleDisabled": {
                        "type": "boolean"
                    },
                    "scheduleTime": {
                        "type": "integer"
                    },
                    "scheduleType": {
                        "type": "string"
                    },
                    "uploadStatus": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer"
                    },
                    "volumeOfDocuments": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "host",
                    "idmClients",
                    "lastModifiedBies",
                    "lastModifiedTime",
                    "numDocuments",
                    "port",
                    "profileDesc",
                    "profileDirPath",
                    "profileId",
                    "profileType",
                    "scheduleDay",
                    "scheduleDayOfMonths",
                    "scheduleDayOfWeeks",
                    "scheduleDisabled",
                    "scheduleTime",
                    "scheduleType",
                    "uploadStatus",
                    "username",
                    "version",
                    "volumeOfDocuments",
                    "id"
                ]
            }
        },
        "zia:index/getDLPIncidentReceiverServers:getDLPIncidentReceiverServers": {
            "description": "Use the **zia_dlp_incident_receiver_servers** data source to get information about a ZIA DLP Incident Receiver Server in the Zscaler Internet Access cloud or via the API.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst this = zia.getDLPIncidentReceiverServers({\n    name: \"ZS_Incident_Receiver\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nthis = zia.get_dlp_incident_receiver_servers(name=\"ZS_Incident_Receiver\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zia.GetDLPIncidentReceiverServers.Invoke(new()\n    {\n        Name = \"ZS_Incident_Receiver\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetDLPIncidentReceiverServers(ctx, \u0026zia.GetDLPIncidentReceiverServersArgs{\n\t\t\tName: pulumi.StringRef(\"ZS_Incident_Receiver\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetDLPIncidentReceiverServersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZiaFunctions.getDLPIncidentReceiverServers(GetDLPIncidentReceiverServersArgs.builder()\n            .name(\"ZS_Incident_Receiver\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zia:getDLPIncidentReceiverServers\n      Arguments:\n        name: ZS_Incident_Receiver\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetDLPIncidentReceiverServersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZiaFunctions.getDLPIncidentReceiverServers(GetDLPIncidentReceiverServersArgs.builder()\n            .id(1234567890)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zia:getDLPIncidentReceiverServers\n      Arguments:\n        id: 1.23456789e+09\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDLPIncidentReceiverServers.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The DLP Incident Receiver Server name as configured by the admin.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDLPIncidentReceiverServers.\n",
                "properties": {
                    "flags": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "flags",
                    "id",
                    "status",
                    "url"
                ]
            }
        },
        "zia:index/getDLPNotificationTemplates:getDLPNotificationTemplates": {
            "description": "Use the **zia_dlp_notification_templates** data source to get information about a ZIA DLP Notification Templates in the Zscaler Internet Access cloud or via the API.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getDLPNotificationTemplates({\n    name: \"DLP Auditor Template Test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_dlp_notification_templates(name=\"DLP Auditor Template Test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetDLPNotificationTemplates.Invoke(new()\n    {\n        Name = \"DLP Auditor Template Test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupDLPNotificationTemplates(ctx, \u0026zia.LookupDLPNotificationTemplatesArgs{\n\t\t\tName: pulumi.StringRef(\"DLP Auditor Template Test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetDLPNotificationTemplatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getDLPNotificationTemplates(GetDLPNotificationTemplatesArgs.builder()\n            .name(\"DLP Auditor Template Test\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getDLPNotificationTemplates\n      Arguments:\n        name: DLP Auditor Template Test\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDLPNotificationTemplates.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The unique identifier for a DLP notification template.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The DLP policy rule name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDLPNotificationTemplates.\n",
                "properties": {
                    "attachContent": {
                        "type": "boolean"
                    },
                    "htmlMessage": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "plainTextMessage": {
                        "type": "string"
                    },
                    "subject": {
                        "type": "string"
                    },
                    "tlsEnabled": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "attachContent",
                    "htmlMessage",
                    "id",
                    "name",
                    "plainTextMessage",
                    "subject",
                    "tlsEnabled"
                ]
            }
        },
        "zia:index/getDLPWebRules:getDLPWebRules": {
            "description": "Use the **zia_dlp_web_rules** data source to get information about a ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getDLPWebRules({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_dlp_web_rules(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetDLPWebRules.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupDLPWebRules(ctx, \u0026zia.LookupDLPWebRulesArgs{\n\t\t\tName: pulumi.StringRef(\"Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetDLPWebRulesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getDLPWebRules(GetDLPWebRulesArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getDLPWebRules\n      Arguments:\n        name: Example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDLPWebRules.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "A unique identifier assigned to the workload group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workload group\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDLPWebRules.\n",
                "properties": {
                    "accessControl": {
                        "type": "string"
                    },
                    "action": {
                        "type": "string"
                    },
                    "auditors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesAuditor:getDLPWebRulesAuditor"
                        }
                    },
                    "cloudApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "departments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesDepartment:getDLPWebRulesDepartment"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "dlpDownloadScanEnabled": {
                        "type": "boolean"
                    },
                    "dlpEngines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesDlpEngine:getDLPWebRulesDlpEngine"
                        }
                    },
                    "excludedDepartments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesExcludedDepartment:getDLPWebRulesExcludedDepartment"
                        }
                    },
                    "excludedGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesExcludedGroup:getDLPWebRulesExcludedGroup"
                        }
                    },
                    "excludedUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesExcludedUser:getDLPWebRulesExcludedUser"
                        }
                    },
                    "externalAuditorEmail": {
                        "type": "string"
                    },
                    "fileTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesGroup:getDLPWebRulesGroup"
                        }
                    },
                    "icapServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesIcapServer:getDLPWebRulesIcapServer"
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesLabel:getDLPWebRulesLabel"
                        }
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesLastModifiedBy:getDLPWebRulesLastModifiedBy"
                        }
                    },
                    "lastModifiedTime": {
                        "type": "integer"
                    },
                    "locationGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesLocationGroup:getDLPWebRulesLocationGroup"
                        }
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesLocation:getDLPWebRulesLocation"
                        }
                    },
                    "matchOnly": {
                        "type": "boolean"
                    },
                    "minSize": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "notificationTemplates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesNotificationTemplate:getDLPWebRulesNotificationTemplate"
                        }
                    },
                    "ocrEnabled": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "integer"
                    },
                    "parentRule": {
                        "type": "integer"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "rank": {
                        "type": "integer"
                    },
                    "severity": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "subRules": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "timeWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesTimeWindow:getDLPWebRulesTimeWindow"
                        }
                    },
                    "urlCategories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesUrlCategory:getDLPWebRulesUrlCategory"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesUser:getDLPWebRulesUser"
                        }
                    },
                    "withoutContentInspection": {
                        "type": "boolean"
                    },
                    "workloadGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getDLPWebRulesWorkloadGroup:getDLPWebRulesWorkloadGroup"
                        }
                    },
                    "zccNotificationsEnabled": {
                        "type": "boolean"
                    },
                    "zscalerIncidentReceiver": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "accessControl",
                    "action",
                    "auditors",
                    "cloudApplications",
                    "departments",
                    "description",
                    "dlpDownloadScanEnabled",
                    "dlpEngines",
                    "excludedDepartments",
                    "excludedGroups",
                    "excludedUsers",
                    "externalAuditorEmail",
                    "fileTypes",
                    "groups",
                    "icapServers",
                    "labels",
                    "lastModifiedBies",
                    "lastModifiedTime",
                    "locationGroups",
                    "locations",
                    "matchOnly",
                    "minSize",
                    "notificationTemplates",
                    "ocrEnabled",
                    "order",
                    "parentRule",
                    "protocols",
                    "rank",
                    "severity",
                    "state",
                    "subRules",
                    "timeWindows",
                    "urlCategories",
                    "users",
                    "withoutContentInspection",
                    "workloadGroups",
                    "zccNotificationsEnabled",
                    "zscalerIncidentReceiver"
                ]
            }
        },
        "zia:index/getDepartmentManagement:getDepartmentManagement": {
            "inputs": {
                "description": "A collection of arguments for invoking getDepartmentManagement.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDepartmentManagement.\n",
                "properties": {
                    "comments": {
                        "type": "string"
                    },
                    "deleted": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "idpId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "comments",
                    "deleted",
                    "id",
                    "idpId"
                ]
            }
        },
        "zia:index/getDeviceGroups:getDeviceGroups": {
            "description": "Use the **zia_device_groups** data source to get information about a device group in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: URL Filtering Rules\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst ios = zia.getDeviceGroups({\n    name: \"IOS\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nios = zia.get_device_groups(name=\"IOS\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ios = Zia.GetDeviceGroups.Invoke(new()\n    {\n        Name = \"IOS\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetDeviceGroups(ctx, \u0026zia.GetDeviceGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"IOS\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetDeviceGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ios = ZiaFunctions.getDeviceGroups(GetDeviceGroupsArgs.builder()\n            .name(\"IOS\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ios:\n    fn::invoke:\n      Function: zia:getDeviceGroups\n      Arguments:\n        name: IOS\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst android = zia.getDeviceGroups({\n    name: \"Android\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nandroid = zia.get_device_groups(name=\"Android\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var android = Zia.GetDeviceGroups.Invoke(new()\n    {\n        Name = \"Android\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetDeviceGroups(ctx, \u0026zia.GetDeviceGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"Android\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetDeviceGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var android = ZiaFunctions.getDeviceGroups(GetDeviceGroupsArgs.builder()\n            .name(\"Android\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  android:\n    fn::invoke:\n      Function: zia:getDeviceGroups\n      Arguments:\n        name: Android\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDeviceGroups.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the device group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDeviceGroups.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(String) The device group's description.\n"
                    },
                    "deviceCount": {
                        "type": "integer",
                        "description": "(int) The number of devices within the group.\n"
                    },
                    "deviceNames": {
                        "type": "string",
                        "description": "(String) The names of devices that belong to the device group. The device names are comma-separated.\n"
                    },
                    "groupType": {
                        "type": "string",
                        "description": "(String) The device group type. i.e ``ZCC_OS``, ``NON_ZCC``, ``CBI``\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(String) The unique identifer for the device group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The device group name.\n"
                    },
                    "osType": {
                        "type": "string",
                        "description": "(String) The operating system (OS).\n"
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether this is a predefined device group. If this value is set to true, the group is predefined.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "deviceCount",
                    "deviceNames",
                    "groupType",
                    "id",
                    "osType",
                    "predefined"
                ]
            }
        },
        "zia:index/getDevices:getDevices": {
            "description": "Use the **zia_devices** data source to get information about a device in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: URL Filtering Rules\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst device = zia.getDevices({\n    name: \"administrator\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\ndevice = zia.get_devices(name=\"administrator\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var device = Zia.GetDevices.Invoke(new()\n    {\n        Name = \"administrator\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetDevices(ctx, \u0026zia.GetDevicesArgs{\n\t\t\tName: pulumi.StringRef(\"administrator\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetDevicesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var device = ZiaFunctions.getDevices(GetDevicesArgs.builder()\n            .name(\"administrator\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  device:\n    fn::invoke:\n      Function: zia:getDevices\n      Arguments:\n        name: administrator\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDevices.\n",
                "properties": {
                    "deviceGroupType": {
                        "type": "string",
                        "description": "(String) The device group type. i.e ``ZCC_OS``, ``NON_ZCC``, ``CBI``\n"
                    },
                    "deviceModel": {
                        "type": "string",
                        "description": "(String) The device model.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the devices to be exported.\n"
                    },
                    "osType": {
                        "type": "string",
                        "description": "(String) The operating system (OS). ``ANY``, ``OTHER_OS``, ``IOS``, ``ANDROID_OS``, ``WINDOWS_OS``, ``MAC_OS``, ``LINUX``\n"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "(String) The operating system version.\n"
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The device owner's user name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDevices.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(String) The device's description.\n"
                    },
                    "deviceGroupType": {
                        "type": "string",
                        "description": "(String) The device group type. i.e ``ZCC_OS``, ``NON_ZCC``, ``CBI``\n"
                    },
                    "deviceModel": {
                        "type": "string",
                        "description": "(String) The device model.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(String) The unique identifer for the device group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The device name.\n"
                    },
                    "osType": {
                        "type": "string",
                        "description": "(String) The operating system (OS). ``ANY``, ``OTHER_OS``, ``IOS``, ``ANDROID_OS``, ``WINDOWS_OS``, ``MAC_OS``, ``LINUX``\n"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "(String) The operating system version.\n"
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The device owner's user name.\n"
                    },
                    "ownerUserId": {
                        "type": "integer",
                        "description": "(int) The unique identifier of the device owner (i.e., user).\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "deviceGroupType",
                    "deviceModel",
                    "id",
                    "name",
                    "osType",
                    "osVersion",
                    "ownerName",
                    "ownerUserId"
                ]
            }
        },
        "zia:index/getFirewallFilteringAppGroups:getFirewallFilteringAppGroups": {
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringAppGroups.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringAppGroups.\n",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nameL10nTag": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "nameL10nTag"
                ]
            }
        },
        "zia:index/getFirewallFilteringAppServices:getFirewallFilteringAppServices": {
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringAppServices.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringAppServices.\n",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "nameL10nTag": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "nameL10nTag"
                ]
            }
        },
        "zia:index/getFirewallFilteringApplication:getFirewallFilteringApplication": {
            "description": "Use the **zia_firewall_filtering_network_application** data source to get information about a network application available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering network application rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst apns = zia.getFirewallFilteringApplication({\n    id: \"APNS\",\n    locale: \"en-US\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\napns = zia.get_firewall_filtering_application(id=\"APNS\",\n    locale=\"en-US\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var apns = Zia.GetFirewallFilteringApplication.Invoke(new()\n    {\n        Id = \"APNS\",\n        Locale = \"en-US\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetFirewallFilteringApplication(ctx, \u0026zia.GetFirewallFilteringApplicationArgs{\n\t\t\tId:     pulumi.StringRef(\"APNS\"),\n\t\t\tLocale: pulumi.StringRef(\"en-US\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetFirewallFilteringApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var apns = ZiaFunctions.getFirewallFilteringApplication(GetFirewallFilteringApplicationArgs.builder()\n            .id(\"APNS\")\n            .locale(\"en-US\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  apns:\n    fn::invoke:\n      Function: zia:getFirewallFilteringApplication\n      Arguments:\n        id: APNS\n        locale: en-US\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst dict = zia.getFirewallFilteringApplication({\n    id: \"DICT\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\ndict = zia.get_firewall_filtering_application(id=\"DICT\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dict = Zia.GetFirewallFilteringApplication.Invoke(new()\n    {\n        Id = \"DICT\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetFirewallFilteringApplication(ctx, \u0026zia.GetFirewallFilteringApplicationArgs{\n\t\t\tId: pulumi.StringRef(\"DICT\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetFirewallFilteringApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dict = ZiaFunctions.getFirewallFilteringApplication(GetFirewallFilteringApplicationArgs.builder()\n            .id(\"DICT\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dict:\n    fn::invoke:\n      Function: zia:getFirewallFilteringApplication\n      Arguments:\n        id: DICT\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringApplication.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The name of the ip source group to be exported.\n"
                    },
                    "locale": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringApplication.\n",
                "properties": {
                    "deprecated": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "locale": {
                        "type": "string"
                    },
                    "parentCategory": {
                        "type": "string",
                        "description": "(String)\n"
                    }
                },
                "type": "object",
                "required": [
                    "deprecated",
                    "description",
                    "parentCategory"
                ]
            }
        },
        "zia:index/getFirewallFilteringApplicationGroups:getFirewallFilteringApplicationGroups": {
            "description": "Use the **zia_firewall_filtering_network_application_groups** data source to get information about a network application group available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering network application rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getFirewallFilteringApplicationGroups({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_firewall_filtering_application_groups(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetFirewallFilteringApplicationGroups.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupFirewallFilteringApplicationGroups(ctx, \u0026zia.LookupFirewallFilteringApplicationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetFirewallFilteringApplicationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getFirewallFilteringApplicationGroups(GetFirewallFilteringApplicationGroupsArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getFirewallFilteringApplicationGroups\n      Arguments:\n        name: example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringApplicationGroups.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the ip source group resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ip source group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringApplicationGroups.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String)\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "name",
                    "networkApplications"
                ]
            }
        },
        "zia:index/getFirewallFilteringDestinationGroups:getFirewallFilteringDestinationGroups": {
            "description": "Use the **zia_firewall_filtering_destination_groups** data source to get information about IP destination groups option available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getFirewallFilteringDestinationGroups({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_firewall_filtering_destination_groups(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetFirewallFilteringDestinationGroups.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupFirewallFilteringDestinationGroups(ctx, \u0026zia.LookupFirewallFilteringDestinationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetFirewallFilteringDestinationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getFirewallFilteringDestinationGroups(GetFirewallFilteringDestinationGroupsArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getFirewallFilteringDestinationGroups\n      Arguments:\n        name: example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringDestinationGroups.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the destination group resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the destination group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringDestinationGroups.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) Destination IP addresses within the group\n"
                    },
                    "countries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) Destination IP address counties. You can identify destinations based on the location of a server.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(String) Additional information about the destination IP group\n"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "ipCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) Destination IP address URL categories. You can identify destinations based on the URL category of the domain. See list of all IP Categories [Here](https://help.zscaler.com/zia/firewall-policies#/ipDestinationGroups-get)\n* !\u003e **WARNING:** The `ip_categories` attribute only accepts custom URL categories.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "(String) Destination IP group type (i.e., the group can contain destination IP addresses or FQDNs)\n"
                    }
                },
                "type": "object",
                "required": [
                    "addresses",
                    "countries",
                    "description",
                    "id",
                    "ipCategories",
                    "name",
                    "type"
                ]
            }
        },
        "zia:index/getFirewallFilteringNetworkServiceGroups:getFirewallFilteringNetworkServiceGroups": {
            "description": "Use the **zia_firewall_filtering_network_service_groups** data source to get information about a network service groups available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering network service rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getFirewallFilteringNetworkServiceGroups({\n    name: \"Corporate Custom SSH TCP_10022\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_firewall_filtering_network_service_groups(name=\"Corporate Custom SSH TCP_10022\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetFirewallFilteringNetworkServiceGroups.Invoke(new()\n    {\n        Name = \"Corporate Custom SSH TCP_10022\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetFirewallFilteringNetworkServiceGroups(ctx, \u0026zia.GetFirewallFilteringNetworkServiceGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"Corporate Custom SSH TCP_10022\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetFirewallFilteringNetworkServiceGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getFirewallFilteringNetworkServiceGroups(GetFirewallFilteringNetworkServiceGroupsArgs.builder()\n            .name(\"Corporate Custom SSH TCP_10022\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getFirewallFilteringNetworkServiceGroups\n      Arguments:\n        name: Corporate Custom SSH TCP_10022\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringNetworkServiceGroups.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the ip source group to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ip source group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringNetworkServiceGroups.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringNetworkServiceGroupsService:getFirewallFilteringNetworkServiceGroupsService"
                        },
                        "description": "(Number) The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "name",
                    "services"
                ]
            }
        },
        "zia:index/getFirewallFilteringNetworkServices:getFirewallFilteringNetworkServices": {
            "description": "The **zia_firewall_filtering_network_service** data source to get information about a network service available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering network service rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getFirewallFilteringNetworkServices({\n    name: \"ICMP_ANY\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_firewall_filtering_network_services(name=\"ICMP_ANY\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetFirewallFilteringNetworkServices.Invoke(new()\n    {\n        Name = \"ICMP_ANY\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupFirewallFilteringNetworkServices(ctx, \u0026zia.LookupFirewallFilteringNetworkServicesArgs{\n\t\t\tName: pulumi.StringRef(\"ICMP_ANY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetFirewallFilteringNetworkServicesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getFirewallFilteringNetworkServices(GetFirewallFilteringNetworkServicesArgs.builder()\n            .name(\"ICMP_ANY\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getFirewallFilteringNetworkServices\n      Arguments:\n        name: ICMP_ANY\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringNetworkServices.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the application layer service to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the application layer service that you want to control. It can include any character and spaces.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringNetworkServices.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(String) (Optional) Enter additional notes or information. The description cannot exceed 10240 characters.\n"
                    },
                    "destTcpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringNetworkServicesDestTcpPort:getFirewallFilteringNetworkServicesDestTcpPort"
                        },
                        "description": "(Required) The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                    },
                    "destUdpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringNetworkServicesDestUdpPort:getFirewallFilteringNetworkServicesDestUdpPort"
                        },
                        "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "isNameL10nTag": {
                        "type": "boolean",
                        "description": "(Bool) - Default: false\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "srcTcpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringNetworkServicesSrcTcpPort:getFirewallFilteringNetworkServicesSrcTcpPort"
                        },
                        "description": "(Optional) The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service\n"
                    },
                    "srcUdpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringNetworkServicesSrcUdpPort:getFirewallFilteringNetworkServicesSrcUdpPort"
                        },
                        "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                    },
                    "tag": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "(String) - Supported values are: `STANDARD`, `PREDEFINED` and `CUSTOM`\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "destTcpPorts",
                    "destUdpPorts",
                    "id",
                    "isNameL10nTag",
                    "name",
                    "srcTcpPorts",
                    "srcUdpPorts",
                    "tag",
                    "type"
                ]
            }
        },
        "zia:index/getFirewallFilteringRule:getFirewallFilteringRule": {
            "description": "Use the **zia_firewall_filtering_rule** data source to get information about a cloud firewall rule available in the Zscaler Internet Access cloud firewall.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getFirewallFilteringRule({\n    name: \"Office 365 One Click Rule\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_firewall_filtering_rule(name=\"Office 365 One Click Rule\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetFirewallFilteringRule.Invoke(new()\n    {\n        Name = \"Office 365 One Click Rule\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupFirewallFilteringRule(ctx, \u0026zia.LookupFirewallFilteringRuleArgs{\n\t\t\tName: pulumi.StringRef(\"Office 365 One Click Rule\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetFirewallFilteringRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getFirewallFilteringRule(GetFirewallFilteringRuleArgs.builder()\n            .name(\"Office 365 One Click Rule\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getFirewallFilteringRule\n      Arguments:\n        name: Office 365 One Click Rule\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringRule.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Unique identifier for the Firewall Filtering policy rule\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Firewall Filtering policy rule\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringRule.\n",
                "properties": {
                    "accessControl": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "action": {
                        "type": "string",
                        "description": "(Optional) Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`\n"
                    },
                    "appServiceGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleAppServiceGroup:getFirewallFilteringRuleAppServiceGroup"
                        },
                        "description": "Application service groups on which this rule is applied\n"
                    },
                    "appServices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleAppService:getFirewallFilteringRuleAppService"
                        },
                        "description": "Application services on which this rule is applied\n"
                    },
                    "defaultRule": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    },
                    "departments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleDepartment:getFirewallFilteringRuleDepartment"
                        },
                        "description": "(Optional) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Enter additional notes or information. The description cannot exceed 10,240 characters.\n"
                    },
                    "destAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.\n"
                    },
                    "destCountries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.\n"
                    },
                    "destIpCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.\n"
                    },
                    "destIpGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleDestIpGroup:getFirewallFilteringRuleDestIpGroup"
                        },
                        "description": "** - (Optional) Any number of destination IP address groups that you want to control with this rule.\n"
                    },
                    "deviceGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleDeviceGroup:getFirewallFilteringRuleDeviceGroup"
                        }
                    },
                    "deviceTrustLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "devices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleDevice:getFirewallFilteringRuleDevice"
                        }
                    },
                    "enableFullLogging": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleGroup:getFirewallFilteringRuleGroup"
                        },
                        "description": "(Optional) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) The ID of this resource.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleLabel:getFirewallFilteringRuleLabel"
                        },
                        "description": "Labels that are applicable to the rule.\n"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleLastModifiedBy:getFirewallFilteringRuleLastModifiedBy"
                        }
                    },
                    "lastModifiedTime": {
                        "type": "integer",
                        "description": "(Number)\n"
                    },
                    "locationGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleLocationGroup:getFirewallFilteringRuleLocationGroup"
                        },
                        "description": "(Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleLocation:getFirewallFilteringRuleLocation"
                        },
                        "description": "(Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The name of the workload group\n"
                    },
                    "nwApplicationGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleNwApplicationGroup:getFirewallFilteringRuleNwApplicationGroup"
                        },
                        "description": "(Optional) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify\n"
                    },
                    "nwApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional) When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.\n"
                    },
                    "nwServiceGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleNwServiceGroup:getFirewallFilteringRuleNwServiceGroup"
                        },
                        "description": "(Optional) Any number of predefined or custom network service groups to which the rule applies.\n"
                    },
                    "nwServices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleNwService:getFirewallFilteringRuleNwService"
                        },
                        "description": "(Optional) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "(Required) Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.\n"
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "(Optional) By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.\n"
                    },
                    "srcIpGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleSrcIpGroup:getFirewallFilteringRuleSrcIpGroup"
                        },
                        "description": "(Optional) Any number of source IP address groups that you want to control with this rule.\n"
                    },
                    "srcIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional) You can enter individual IP addresses, subnets, or address ranges.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "(Optional) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.\n"
                    },
                    "timeWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleTimeWindow:getFirewallFilteringRuleTimeWindow"
                        },
                        "description": "(Optional) You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleUser:getFirewallFilteringRuleUser"
                        },
                        "description": "(Optional) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.\n"
                    },
                    "workloadGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleWorkloadGroup:getFirewallFilteringRuleWorkloadGroup"
                        },
                        "description": "(List) The list of preconfigured workload groups to which the policy must be applied\n"
                    },
                    "zpaAppSegments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getFirewallFilteringRuleZpaAppSegment:getFirewallFilteringRuleZpaAppSegment"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "accessControl",
                    "action",
                    "appServiceGroups",
                    "appServices",
                    "defaultRule",
                    "departments",
                    "description",
                    "destAddresses",
                    "destCountries",
                    "destIpCategories",
                    "destIpGroups",
                    "deviceGroups",
                    "deviceTrustLevels",
                    "devices",
                    "enableFullLogging",
                    "groups",
                    "labels",
                    "lastModifiedBies",
                    "lastModifiedTime",
                    "locationGroups",
                    "locations",
                    "nwApplicationGroups",
                    "nwApplications",
                    "nwServiceGroups",
                    "nwServices",
                    "order",
                    "predefined",
                    "rank",
                    "srcIpGroups",
                    "srcIps",
                    "state",
                    "timeWindows",
                    "users",
                    "workloadGroups",
                    "zpaAppSegments"
                ]
            }
        },
        "zia:index/getFirewallFilteringSourceIPGroups:getFirewallFilteringSourceIPGroups": {
            "description": "Use the **zia_firewall_filtering_ip_source_groups** data source to get information about ip source groups available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getFirewallFilteringSourceIPGroups({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_firewall_filtering_source_ip_groups(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetFirewallFilteringSourceIPGroups.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetFirewallFilteringSourceIPGroups(ctx, \u0026zia.GetFirewallFilteringSourceIPGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetFirewallFilteringSourceIPGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getFirewallFilteringSourceIPGroups(GetFirewallFilteringSourceIPGroupsArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getFirewallFilteringSourceIPGroups\n      Arguments:\n        name: example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringSourceIPGroups.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the ip source group resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ip source group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringSourceIPGroups.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of this resource.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String)\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "ipAddresses",
                    "name"
                ]
            }
        },
        "zia:index/getForwardingControlRule:getForwardingControlRule": {
            "description": "Use the **forwarding_control_rule** data source to get information about a forwarding control rule which is used to forward selective Zscaler traffic to specific destinations based on your needs.For example, if you want to forward specific web traffic to a third-party proxy service or if you want to forward source IP anchored application traffic to a specific Zscaler Private Access (ZPA) App Connector or internal application traffic through ZIA threat and data protection engines, use forwarding control by configuring appropriate rules.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst this = zia.getForwardingControlRule({\n    name: \"FWD_RULE01\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nthis = zia.get_forwarding_control_rule(name=\"FWD_RULE01\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zia.GetForwardingControlRule.Invoke(new()\n    {\n        Name = \"FWD_RULE01\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupForwardingControlRule(ctx, \u0026zia.LookupForwardingControlRuleArgs{\n\t\t\tName: pulumi.StringRef(\"FWD_RULE01\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetForwardingControlRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZiaFunctions.getForwardingControlRule(GetForwardingControlRuleArgs.builder()\n            .name(\"FWD_RULE01\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zia:getForwardingControlRule\n      Arguments:\n        name: FWD_RULE01\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getForwardingControlRule.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "A unique identifier assigned to the forwarding rule.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the forwarding rule.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(string) -  The rule type selected from the available options\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getForwardingControlRule.\n",
                "properties": {
                    "departments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleDepartment:getForwardingControlRuleDepartment"
                        },
                        "description": "(list) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(string) - Additional information about the forwarding rule\n"
                    },
                    "destAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (list) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.\n"
                    },
                    "destCountries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (list) estination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries. Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).\n"
                    },
                    "destIpCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (list) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.\n"
                    },
                    "destIpGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleDestIpGroup:getForwardingControlRuleDestIpGroup"
                        },
                        "description": "** - (list) Any number of destination IP address groups that you want to control with this rule.\n"
                    },
                    "destIpv6Groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleDestIpv6Group:getForwardingControlRuleDestIpv6Group"
                        }
                    },
                    "deviceGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleDeviceGroup:getForwardingControlRuleDeviceGroup"
                        },
                        "description": "(list) Name-ID pairs of device groups for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.\n"
                    },
                    "devices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleDevice:getForwardingControlRuleDevice"
                        },
                        "description": "(list) Name-ID pairs of devices for which the rule must be applied. Specifies devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.\n"
                    },
                    "ecGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleEcGroup:getForwardingControlRuleEcGroup"
                        },
                        "description": "(list) - Name-ID pairs of the Zscaler Cloud Connector groups to which the forwarding rule applies\n"
                    },
                    "forwardMethod": {
                        "type": "string",
                        "description": "(string) - The type of traffic forwarding method selected from the available options.\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleGroup:getForwardingControlRuleGroup"
                        },
                        "description": "(list) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) Identifier that uniquely identifies an entity\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleLabel:getForwardingControlRuleLabel"
                        },
                        "description": "(list) Labels that are applicable to the rule.\n"
                    },
                    "locationGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleLocationGroup:getForwardingControlRuleLocationGroup"
                        },
                        "description": "(Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleLocation:getForwardingControlRuleLocation"
                        },
                        "description": "(Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) The configured name of the entity\n"
                    },
                    "nwApplicationGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleNwApplicationGroup:getForwardingControlRuleNwApplicationGroup"
                        },
                        "description": "(list) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify\n"
                    },
                    "nwApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional) When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.\n"
                    },
                    "nwServiceGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleNwServiceGroup:getForwardingControlRuleNwServiceGroup"
                        },
                        "description": "(list) Any number of predefined or custom network service groups to which the rule applies.\n"
                    },
                    "nwServices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleNwService:getForwardingControlRuleNwService"
                        },
                        "description": "(list) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "(string) - The order of execution for the forwarding rule order.\n"
                    },
                    "proxyGateways": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleProxyGateway:getForwardingControlRuleProxyGateway"
                        },
                        "description": "(set) The proxy gateway for which the rule is applicable. This field is applicable only for the `PROXYCHAIN` forwarding method.\n"
                    },
                    "rank": {
                        "type": "integer"
                    },
                    "resCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (list) List of destination domain categories to which the rule applies.\n"
                    },
                    "srcIpGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleSrcIpGroup:getForwardingControlRuleSrcIpGroup"
                        },
                        "description": "(list) Any number of source IP address groups that you want to control with this rule.\n"
                    },
                    "srcIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional) You can enter individual IP addresses, subnets, or address ranges.\n"
                    },
                    "srcIpv6Groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleSrcIpv6Group:getForwardingControlRuleSrcIpv6Group"
                        }
                    },
                    "state": {
                        "type": "string",
                        "description": "(string) - Indicates whether the forwarding rule is enabled or disabled.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(string) -  The rule type selected from the available options\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleUser:getForwardingControlRuleUser"
                        },
                        "description": "(list) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.\n"
                    },
                    "zpaAppSegments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleZpaAppSegment:getForwardingControlRuleZpaAppSegment"
                        },
                        "description": "(set) The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ZPA` Gateway forwarding method.\n"
                    },
                    "zpaApplicationSegmentGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleZpaApplicationSegmentGroup:getForwardingControlRuleZpaApplicationSegmentGroup"
                        },
                        "description": "(set) List of ZPA Application Segment Groups for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).\n"
                    },
                    "zpaApplicationSegments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleZpaApplicationSegment:getForwardingControlRuleZpaApplicationSegment"
                        },
                        "description": "(set) List of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).\n"
                    },
                    "zpaBrokerRule": {
                        "type": "boolean"
                    },
                    "zpaGateways": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlRuleZpaGateway:getForwardingControlRuleZpaGateway"
                        },
                        "description": "(set) The ZPA Gateway for which this rule is applicable. This field is applicable only for the `ZPA` forwarding method.\n"
                    }
                },
                "type": "object",
                "required": [
                    "departments",
                    "description",
                    "destAddresses",
                    "destCountries",
                    "destIpCategories",
                    "destIpGroups",
                    "destIpv6Groups",
                    "deviceGroups",
                    "devices",
                    "ecGroups",
                    "forwardMethod",
                    "groups",
                    "labels",
                    "locationGroups",
                    "locations",
                    "nwApplicationGroups",
                    "nwApplications",
                    "nwServiceGroups",
                    "nwServices",
                    "order",
                    "proxyGateways",
                    "rank",
                    "resCategories",
                    "srcIpGroups",
                    "srcIps",
                    "srcIpv6Groups",
                    "state",
                    "users",
                    "zpaAppSegments",
                    "zpaApplicationSegmentGroups",
                    "zpaApplicationSegments",
                    "zpaBrokerRule",
                    "zpaGateways"
                ]
            }
        },
        "zia:index/getForwardingControlZPAGateway:getForwardingControlZPAGateway": {
            "description": "Use the **forwarding_control_zpa_gateway** data source to get information about a forwarding control zpa gateway used in IP Source Anchoring integration between Zscaler Internet Access and Zscaler Private Access. This data source can then be associated with a ZIA Forwarding Control Rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst this = zia.getForwardingControlZPAGateway({\n    name: \"ZPA_GW01\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nthis = zia.get_forwarding_control_zpa_gateway(name=\"ZPA_GW01\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zia.GetForwardingControlZPAGateway.Invoke(new()\n    {\n        Name = \"ZPA_GW01\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupForwardingControlZPAGateway(ctx, \u0026zia.LookupForwardingControlZPAGatewayArgs{\n\t\t\tName: pulumi.StringRef(\"ZPA_GW01\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetForwardingControlZPAGatewayArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZiaFunctions.getForwardingControlZPAGateway(GetForwardingControlZPAGatewayArgs.builder()\n            .name(\"ZPA_GW01\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zia:getForwardingControlZPAGateway\n      Arguments:\n        name: ZPA_GW01\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getForwardingControlZPAGateway.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the forwarding control ZPA Gateway resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the forwarding control ZPA Gateway to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getForwardingControlZPAGateway.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(string) - Additional details about the ZPA gateway\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(int) - Identifier that uniquely identifies an entity\n"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlZPAGatewayLastModifiedBy:getForwardingControlZPAGatewayLastModifiedBy"
                        },
                        "description": "(list) -  Information about the admin user that last modified the ZPA gateway\n"
                    },
                    "lastModifiedTime": {
                        "type": "integer",
                        "description": "(int) - Timestamp when the ZPA gateway was last modified\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(string) The configured name of the entity\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA)\n"
                    },
                    "zpaAppSegments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlZPAGatewayZpaAppSegment:getForwardingControlZPAGatewayZpaAppSegment"
                        }
                    },
                    "zpaServerGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getForwardingControlZPAGatewayZpaServerGroup:getForwardingControlZPAGatewayZpaServerGroup"
                        },
                        "description": "() - The ZPA Server Group that is configured for Source IP Anchoring\n"
                    },
                    "zpaTenantId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "lastModifiedBies",
                    "lastModifiedTime",
                    "name",
                    "type",
                    "zpaAppSegments",
                    "zpaServerGroups",
                    "zpaTenantId"
                ]
            }
        },
        "zia:index/getGroupManagement:getGroupManagement": {
            "inputs": {
                "description": "A collection of arguments for invoking getGroupManagement.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroupManagement.\n",
                "properties": {
                    "comments": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "idpId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "comments",
                    "id",
                    "idpId"
                ]
            }
        },
        "zia:index/getIcapServers:getIcapServers": {
            "description": "Use the **zia_dlp_engines** data source to get information about a the list of DLP servers using ICAP in the Zscaler Internet Access cloud or via the API.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getIcapServers({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_icap_servers(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetIcapServers.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetIcapServers(ctx, \u0026zia.GetIcapServersArgs{\n\t\t\tName: pulumi.StringRef(\"Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetIcapServersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getIcapServers(GetIcapServersArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getIcapServers\n      Arguments:\n        name: Example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetIcapServersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getIcapServers(GetIcapServersArgs.builder()\n            .id(1234567890)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getIcapServers\n      Arguments:\n        id: 1.23456789e+09\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getIcapServers.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The DLP server name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIcapServers.\n",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "status",
                    "url"
                ]
            }
        },
        "zia:index/getLocationGroups:getLocationGroups": {
            "description": "Use the **zia_location_groups** data source to get information about a location group option available in the Zscaler Internet Access.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getLocationGroups({\n    name: \"Corporate User Traffic Group\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_location_groups(name=\"Corporate User Traffic Group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetLocationGroups.Invoke(new()\n    {\n        Name = \"Corporate User Traffic Group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetLocationGroups(ctx, \u0026zia.GetLocationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"Corporate User Traffic Group\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetLocationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getLocationGroups(GetLocationGroupsArgs.builder()\n            .name(\"Corporate User Traffic Group\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getLocationGroups\n      Arguments:\n        name: Corporate User Traffic Group\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getLocationGroups({\n    name: \"Guest Wifi Group\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_location_groups(name=\"Guest Wifi Group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetLocationGroups.Invoke(new()\n    {\n        Name = \"Guest Wifi Group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetLocationGroups(ctx, \u0026zia.GetLocationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"Guest Wifi Group\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetLocationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getLocationGroups(GetLocationGroupsArgs.builder()\n            .name(\"Guest Wifi Group\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getLocationGroups\n      Arguments:\n        name: Guest Wifi Group\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getLocationGroups({\n    name: \"IoT Traffic Group\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_location_groups(name=\"IoT Traffic Group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetLocationGroups.Invoke(new()\n    {\n        Name = \"IoT Traffic Group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetLocationGroups(ctx, \u0026zia.GetLocationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"IoT Traffic Group\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetLocationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getLocationGroups(GetLocationGroupsArgs.builder()\n            .name(\"IoT Traffic Group\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getLocationGroups\n      Arguments:\n        name: IoT Traffic Group\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getLocationGroups({\n    name: \"Server Traffic Group\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_location_groups(name=\"Server Traffic Group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetLocationGroups.Invoke(new()\n    {\n        Name = \"Server Traffic Group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetLocationGroups(ctx, \u0026zia.GetLocationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"Server Traffic Group\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetLocationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getLocationGroups(GetLocationGroupsArgs.builder()\n            .name(\"Server Traffic Group\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getLocationGroups\n      Arguments:\n        name: Server Traffic Group\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getLocationGroups({\n    name: \"Server Traffic Group\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_location_groups(name=\"Server Traffic Group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetLocationGroups.Invoke(new()\n    {\n        Name = \"Server Traffic Group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetLocationGroups(ctx, \u0026zia.GetLocationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"Server Traffic Group\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetLocationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getLocationGroups(GetLocationGroupsArgs.builder()\n            .name(\"Server Traffic Group\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getLocationGroups\n      Arguments:\n        name: Server Traffic Group\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLocationGroups.\n",
                "properties": {
                    "dynamicLocationGroupCriterias": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getLocationGroupsDynamicLocationGroupCriteria:getLocationGroupsDynamicLocationGroupCriteria"
                        },
                        "description": "(Block Set) Dynamic location group information.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Location group name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocationGroups.\n",
                "properties": {
                    "comments": {
                        "type": "string",
                        "description": "(List of Object)\n"
                    },
                    "deleted": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates the location group was deleted\n"
                    },
                    "dynamicLocationGroupCriterias": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getLocationGroupsDynamicLocationGroupCriteria:getLocationGroupsDynamicLocationGroupCriteria"
                        },
                        "description": "(Block Set) Dynamic location group information.\n"
                    },
                    "groupType": {
                        "type": "string",
                        "description": "(String) The location group's type (i.e., Static or Dynamic)\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) Identifier that uniquely identifies an entity\n"
                    },
                    "lastModTime": {
                        "type": "integer",
                        "description": "(List of Object) Automatically populated with the current time, after a successful POST or PUT request.\n"
                    },
                    "lastModUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getLocationGroupsLastModUser:getLocationGroupsLastModUser"
                        },
                        "description": "(List of Object)\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getLocationGroupsLocation:getLocationGroupsLocation"
                        },
                        "description": "(List of Object) The Name-ID pairs of the locations that are assigned to the static location group. This is ignored if the groupType is Dynamic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The configured name of the entity\n"
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    }
                },
                "type": "object",
                "required": [
                    "comments",
                    "deleted",
                    "groupType",
                    "id",
                    "lastModTime",
                    "lastModUsers",
                    "locations",
                    "predefined"
                ]
            }
        },
        "zia:index/getLocationLite:getLocationLite": {
            "description": "Use the **zia_location_lite** data source to get information about a location in lite mode option available in the Zscaler Internet Access. This data source can be used to retrieve the Road Warrior location to then associated with one of the following resources: ``zia.URLFilteringRules``, ``zia.FirewallFilteringRule`` and ``zia.DLPWebRules`\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst this = zia.getLocationLite({\n    name: \"Road Warrior\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nthis = zia.get_location_lite(name=\"Road Warrior\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zia.GetLocationLite.Invoke(new()\n    {\n        Name = \"Road Warrior\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetLocationLite(ctx, \u0026zia.GetLocationLiteArgs{\n\t\t\tName: pulumi.StringRef(\"Road Warrior\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetLocationLiteArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZiaFunctions.getLocationLite(GetLocationLiteArgs.builder()\n            .name(\"Road Warrior\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zia:getLocationLite\n      Arguments:\n        name: Road Warrior\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLocationLite.\n",
                "properties": {
                    "digestAuthEnabled": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    },
                    "kerberosAuth": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Location group name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocationLite.\n",
                "properties": {
                    "aupBlockInternetUntilAccepted": {
                        "type": "boolean",
                        "description": "(Boolean) For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.\n"
                    },
                    "aupEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Enable AUP. When set to true, AUP is enabled for the location.\n"
                    },
                    "aupForceSslInspection": {
                        "type": "boolean",
                        "description": "(Boolean) For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.\n"
                    },
                    "cautionEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.\n"
                    },
                    "digestAuthEnabled": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    },
                    "ecLocation": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "ipsControl": {
                        "type": "boolean",
                        "description": "(Boolean) Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.\n"
                    },
                    "ipv6Enabled": {
                        "type": "boolean",
                        "description": "(Number) If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.\n"
                    },
                    "kerberosAuth": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "ofwEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.\n"
                    },
                    "other6SubLocation": {
                        "type": "boolean",
                        "description": "(Boolean) If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true\n"
                    },
                    "otherSubLocation": {
                        "type": "boolean",
                        "description": "(Boolean) If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.\n"
                    },
                    "parentId": {
                        "type": "integer",
                        "description": "(Number) - Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`\n"
                    },
                    "surrogateIp": {
                        "type": "boolean",
                        "description": "(Boolean) Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.\n"
                    },
                    "surrogateIpEnforcedForKnownBrowsers": {
                        "type": "boolean",
                        "description": "(Boolean) Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.\n"
                    },
                    "tz": {
                        "type": "string",
                        "description": "(String) Timezone of the location. If not specified, it defaults to GMT.\n"
                    },
                    "xffForwardEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.\n"
                    },
                    "zappSslScanEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                    }
                },
                "type": "object",
                "required": [
                    "aupBlockInternetUntilAccepted",
                    "aupEnabled",
                    "aupForceSslInspection",
                    "cautionEnabled",
                    "ecLocation",
                    "id",
                    "ipsControl",
                    "ipv6Enabled",
                    "ofwEnabled",
                    "other6SubLocation",
                    "otherSubLocation",
                    "parentId",
                    "surrogateIp",
                    "surrogateIpEnforcedForKnownBrowsers",
                    "tz",
                    "xffForwardEnabled",
                    "zappSslScanEnabled"
                ]
            }
        },
        "zia:index/getLocationManagement:getLocationManagement": {
            "description": "Use the **zia_location_management** data source to get information about a location resource available in the Zscaler Internet Access Location Management. This resource can then be referenced in multiple other resources, such as URL Filtering Rules, Firewall rules etc.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getLocationManagement({\n    name: \"San Jose\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_location_management(name=\"San Jose\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetLocationManagement.Invoke(new()\n    {\n        Name = \"San Jose\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupLocationManagement(ctx, \u0026zia.LookupLocationManagementArgs{\n\t\t\tName: pulumi.StringRef(\"San Jose\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetLocationManagementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getLocationManagement(GetLocationManagementArgs.builder()\n            .name(\"San Jose\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getLocationManagement\n      Arguments:\n        name: San Jose\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLocationManagement.\n",
                "properties": {
                    "basicAuthEnabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of the location to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the location to be exported.\n"
                    },
                    "parentName": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocationManagement.\n",
                "properties": {
                    "aupBlockInternetUntilAccepted": {
                        "type": "boolean",
                        "description": "(Boolean) For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.\n"
                    },
                    "aupEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Enable AUP. When set to true, AUP is enabled for the location.\n"
                    },
                    "aupForceSslInspection": {
                        "type": "boolean",
                        "description": "(Boolean) For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.\n"
                    },
                    "aupTimeoutInDays": {
                        "type": "integer",
                        "description": "(Number) Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.\n"
                    },
                    "authRequired": {
                        "type": "boolean",
                        "description": "(Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.\n"
                    },
                    "basicAuthEnabled": {
                        "type": "boolean"
                    },
                    "cautionEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "(String) Country\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(String) Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.\n"
                    },
                    "digestAuthEnabled": {
                        "type": "boolean"
                    },
                    "displayTimeUnit": {
                        "type": "string",
                        "description": "(String) Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.\n"
                    },
                    "dnBandwidth": {
                        "type": "integer",
                        "description": "(Number) Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) Identifier that uniquely identifies an entity\n"
                    },
                    "idleTimeInMinutes": {
                        "type": "integer",
                        "description": "(Number) Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.\n"
                    },
                    "iotDiscoveryEnabled": {
                        "type": "boolean"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)).\n"
                    },
                    "ipsControl": {
                        "type": "boolean",
                        "description": "(Boolean) Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.\n"
                    },
                    "kerberosAuthEnabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The configured name of the entity\n"
                    },
                    "ofwEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.\n"
                    },
                    "parentId": {
                        "type": "integer",
                        "description": "(Number) - Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`\n"
                    },
                    "parentName": {
                        "type": "string"
                    },
                    "ports": {
                        "type": "string",
                        "description": "(String) IP ports that are associated with the location.\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "(String) Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`.\n"
                    },
                    "sslScanEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                    },
                    "surrogateIp": {
                        "type": "boolean",
                        "description": "(Boolean) Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.\n"
                    },
                    "surrogateIpEnforcedForKnownBrowsers": {
                        "type": "boolean",
                        "description": "(Boolean) Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.\n"
                    },
                    "surrogateRefreshTimeInMinutes": {
                        "type": "integer",
                        "description": "(Number) Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.\n"
                    },
                    "surrogateRefreshTimeUnit": {
                        "type": "string",
                        "description": "(String) Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.\n"
                    },
                    "tz": {
                        "type": "string",
                        "description": "(String) Timezone of the location. If not specified, it defaults to GMT.\n"
                    },
                    "upBandwidth": {
                        "type": "integer",
                        "description": "(Number) Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                    },
                    "vpnCredentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getLocationManagementVpnCredential:getLocationManagementVpnCredential"
                        }
                    },
                    "xffForwardEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.\n"
                    },
                    "zappSslScanEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                    }
                },
                "type": "object",
                "required": [
                    "aupBlockInternetUntilAccepted",
                    "aupEnabled",
                    "aupForceSslInspection",
                    "aupTimeoutInDays",
                    "authRequired",
                    "basicAuthEnabled",
                    "cautionEnabled",
                    "country",
                    "description",
                    "digestAuthEnabled",
                    "displayTimeUnit",
                    "dnBandwidth",
                    "idleTimeInMinutes",
                    "iotDiscoveryEnabled",
                    "ipAddresses",
                    "ipsControl",
                    "kerberosAuthEnabled",
                    "ofwEnabled",
                    "parentId",
                    "ports",
                    "profile",
                    "sslScanEnabled",
                    "surrogateIp",
                    "surrogateIpEnforcedForKnownBrowsers",
                    "surrogateRefreshTimeInMinutes",
                    "surrogateRefreshTimeUnit",
                    "tz",
                    "upBandwidth",
                    "vpnCredentials",
                    "xffForwardEnabled",
                    "zappSslScanEnabled"
                ]
            }
        },
        "zia:index/getRuleLabels:getRuleLabels": {
            "description": "Use the **zia_rule_labels** data source to get information about a rule label resource in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: Firewall Rules and URL filtering rules\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getRuleLabels({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_rule_labels(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetRuleLabels.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupRuleLabels(ctx, \u0026zia.LookupRuleLabelsArgs{\n\t\t\tName: pulumi.StringRef(\"Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetRuleLabelsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getRuleLabels(GetRuleLabelsArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getRuleLabels\n      Arguments:\n        name: Example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getRuleLabels.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The unique identifer for the device group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule label to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRuleLabels.\n",
                "properties": {
                    "createdBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getRuleLabelsCreatedBy:getRuleLabelsCreatedBy"
                        },
                        "description": "(String) The admin that created the rule label. This is a read-only field. Ignored by PUT requests.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(String) The rule label description.\n"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getRuleLabelsLastModifiedBy:getRuleLabelsLastModifiedBy"
                        },
                        "description": "(String) The admin that modified the rule label last. This is a read-only field. Ignored by PUT requests.\n"
                    },
                    "lastModifiedTime": {
                        "type": "integer",
                        "description": "(String) Timestamp when the rule lable was last modified. This is a read-only field. Ignored by PUT and DELETE requests.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "referencedRuleCount": {
                        "type": "integer",
                        "description": "(int) The number of rules that reference the label.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdBies",
                    "description",
                    "id",
                    "lastModifiedBies",
                    "lastModifiedTime",
                    "name",
                    "referencedRuleCount"
                ]
            }
        },
        "zia:index/getSandboxBehavioralAnalysis:getSandboxBehavioralAnalysis": {
            "description": "Use the **zia_sandbox_behavioral_analysis** data source to get get the custom list of MD5 file hashes that are blocked by Sandbox\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst listAll = zia.getSandboxBehavioralAnalysis({});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nlist_all = zia.get_sandbox_behavioral_analysis()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var listAll = Zia.GetSandboxBehavioralAnalysis.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupSandboxBehavioralAnalysis(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var listAll = ZiaFunctions.getSandboxBehavioralAnalysis();\n\n    }\n}\n```\n```yaml\nvariables:\n  listAll:\n    fn::invoke:\n      Function: zia:getSandboxBehavioralAnalysis\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getSandboxBehavioralAnalysis.\n",
                "properties": {
                    "fileHashesToBeBlockeds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "fileHashesToBeBlockeds",
                    "id"
                ]
            }
        },
        "zia:index/getSandboxReport:getSandboxReport": {
            "description": "Use the **zia_sandbox_report** data source gets a full (i.e., complete) or summary detail report for an MD5 hash of a file that was analyzed by Sandbox.\n\n## Example Usage\n\n### Obtain Full Sandbox Report\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst this = zia.getSandboxReport({\n    details: \"full\",\n    md5Hash: \"F69CA01D65E6C8F9E3540029E5F6AB92\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nthis = zia.get_sandbox_report(details=\"full\",\n    md5_hash=\"F69CA01D65E6C8F9E3540029E5F6AB92\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zia.GetSandboxReport.Invoke(new()\n    {\n        Details = \"full\",\n        Md5Hash = \"F69CA01D65E6C8F9E3540029E5F6AB92\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetSandboxReport(ctx, \u0026zia.GetSandboxReportArgs{\n\t\t\tDetails: pulumi.StringRef(\"full\"),\n\t\t\tMd5Hash: \"F69CA01D65E6C8F9E3540029E5F6AB92\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetSandboxReportArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZiaFunctions.getSandboxReport(GetSandboxReportArgs.builder()\n            .details(\"full\")\n            .md5Hash(\"F69CA01D65E6C8F9E3540029E5F6AB92\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zia:getSandboxReport\n      Arguments:\n        details: full\n        md5Hash: F69CA01D65E6C8F9E3540029E5F6AB92\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n### Obtain Summarized Sandbox Report\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst this = zia.getSandboxReport({\n    details: \"summary\",\n    md5Hash: \"F69CA01D65E6C8F9E3540029E5F6AB92\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nthis = zia.get_sandbox_report(details=\"summary\",\n    md5_hash=\"F69CA01D65E6C8F9E3540029E5F6AB92\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zia.GetSandboxReport.Invoke(new()\n    {\n        Details = \"summary\",\n        Md5Hash = \"F69CA01D65E6C8F9E3540029E5F6AB92\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetSandboxReport(ctx, \u0026zia.GetSandboxReportArgs{\n\t\t\tDetails: pulumi.StringRef(\"summary\"),\n\t\t\tMd5Hash: \"F69CA01D65E6C8F9E3540029E5F6AB92\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetSandboxReportArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZiaFunctions.getSandboxReport(GetSandboxReportArgs.builder()\n            .details(\"summary\")\n            .md5Hash(\"F69CA01D65E6C8F9E3540029E5F6AB92\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zia:getSandboxReport\n      Arguments:\n        details: summary\n        md5Hash: F69CA01D65E6C8F9E3540029E5F6AB92\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSandboxReport.\n",
                "properties": {
                    "details": {
                        "type": "string",
                        "description": "(Required) Type of report, full or summary.\n"
                    },
                    "exploits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportExploit:getSandboxReportExploit"
                        }
                    },
                    "md5Hash": {
                        "type": "string",
                        "description": "(Required) MD5 hash of the file that was analyzed by Sandbox.\n"
                    },
                    "networkings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportNetworking:getSandboxReportNetworking"
                        }
                    },
                    "persistences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportPersistence:getSandboxReportPersistence"
                        }
                    },
                    "securityBypasses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportSecurityBypass:getSandboxReportSecurityBypass"
                        }
                    },
                    "spywares": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportSpyware:getSandboxReportSpyware"
                        }
                    },
                    "stealths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportStealth:getSandboxReportStealth"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "md5Hash"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSandboxReport.\n",
                "properties": {
                    "classifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportClassification:getSandboxReportClassification"
                        }
                    },
                    "details": {
                        "type": "string",
                        "description": "(Required) Type of report, full or summary.\n"
                    },
                    "exploits": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportExploit:getSandboxReportExploit"
                        }
                    },
                    "fileProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportFileProperty:getSandboxReportFileProperty"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "md5Hash": {
                        "type": "string",
                        "description": "(Required) MD5 hash of the file that was analyzed by Sandbox.\n"
                    },
                    "networkings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportNetworking:getSandboxReportNetworking"
                        }
                    },
                    "origins": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportOrigin:getSandboxReportOrigin"
                        }
                    },
                    "persistences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportPersistence:getSandboxReportPersistence"
                        }
                    },
                    "securityBypasses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportSecurityBypass:getSandboxReportSecurityBypass"
                        }
                    },
                    "spywares": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportSpyware:getSandboxReportSpyware"
                        }
                    },
                    "stealths": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportStealth:getSandboxReportStealth"
                        }
                    },
                    "summaries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportSummary:getSandboxReportSummary"
                        },
                        "description": "Summary detail report for an MD5 hash of a file that was analyzed by Sandbox\n"
                    },
                    "systemSummaries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getSandboxReportSystemSummary:getSandboxReportSystemSummary"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "classifications",
                    "exploits",
                    "fileProperties",
                    "md5Hash",
                    "networkings",
                    "origins",
                    "persistences",
                    "securityBypasses",
                    "spywares",
                    "stealths",
                    "summaries",
                    "systemSummaries",
                    "id"
                ]
            }
        },
        "zia:index/getSecuritySettings:getSecuritySettings": {
            "outputs": {
                "description": "A collection of values returned by getSecuritySettings.\n",
                "properties": {
                    "blacklistUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "whitelistUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "blacklistUrls",
                    "whitelistUrls",
                    "id"
                ]
            }
        },
        "zia:index/getTimeWindow:getTimeWindow": {
            "description": "Use the **zia_firewall_filtering_time_window** data source to get information about a time window option available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering rule.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst workHours = zia.getTimeWindow({\n    name: \"Work hours\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nwork_hours = zia.get_time_window(name=\"Work hours\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var workHours = Zia.GetTimeWindow.Invoke(new()\n    {\n        Name = \"Work hours\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetTimeWindow(ctx, \u0026zia.GetTimeWindowArgs{\n\t\t\tName: pulumi.StringRef(\"Work hours\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetTimeWindowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var workHours = ZiaFunctions.getTimeWindow(GetTimeWindowArgs.builder()\n            .name(\"Work hours\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  workHours:\n    fn::invoke:\n      Function: zia:getTimeWindow\n      Arguments:\n        name: Work hours\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst weekends = zia.getTimeWindow({\n    name: \"Weekends\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nweekends = zia.get_time_window(name=\"Weekends\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var weekends = Zia.GetTimeWindow.Invoke(new()\n    {\n        Name = \"Weekends\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetTimeWindow(ctx, \u0026zia.GetTimeWindowArgs{\n\t\t\tName: pulumi.StringRef(\"Weekends\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetTimeWindowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var weekends = ZiaFunctions.getTimeWindow(GetTimeWindowArgs.builder()\n            .name(\"Weekends\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  weekends:\n    fn::invoke:\n      Function: zia:getTimeWindow\n      Arguments:\n        name: Weekends\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst offHours = zia.getTimeWindow({\n    name: \"Off hours\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\noff_hours = zia.get_time_window(name=\"Off hours\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var offHours = Zia.GetTimeWindow.Invoke(new()\n    {\n        Name = \"Off hours\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetTimeWindow(ctx, \u0026zia.GetTimeWindowArgs{\n\t\t\tName: pulumi.StringRef(\"Off hours\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetTimeWindowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var offHours = ZiaFunctions.getTimeWindow(GetTimeWindowArgs.builder()\n            .name(\"Off hours\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  offHours:\n    fn::invoke:\n      Function: zia:getTimeWindow\n      Arguments:\n        name: Off hours\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTimeWindow.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the time window to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTimeWindow.\n",
                "properties": {
                    "dayOfWeeks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(String). The supported values are:\n"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "(String)\n"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "(String)\n"
                    }
                },
                "type": "object",
                "required": [
                    "dayOfWeeks",
                    "endTime",
                    "id",
                    "startTime"
                ]
            }
        },
        "zia:index/getTrafficForwardingGREInternalIPRange:getTrafficForwardingGREInternalIPRange": {
            "inputs": {
                "description": "A collection of arguments for invoking getTrafficForwardingGREInternalIPRange.\n",
                "properties": {
                    "requiredCount": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrafficForwardingGREInternalIPRange.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getTrafficForwardingGREInternalIPRangeList:getTrafficForwardingGREInternalIPRangeList"
                        }
                    },
                    "requiredCount": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "lists",
                    "id"
                ]
            }
        },
        "zia:index/getTrafficForwardingGRETunnel:getTrafficForwardingGRETunnel": {
            "inputs": {
                "description": "A collection of arguments for invoking getTrafficForwardingGRETunnel.\n",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "sourceIp": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrafficForwardingGRETunnel.\n",
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "internalIpRange": {
                        "type": "string"
                    },
                    "ipUnnumbered": {
                        "type": "boolean"
                    },
                    "lastModificationTime": {
                        "type": "integer"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getTrafficForwardingGRETunnelLastModifiedBy:getTrafficForwardingGRETunnelLastModifiedBy"
                        }
                    },
                    "managedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getTrafficForwardingGRETunnelManagedBy:getTrafficForwardingGRETunnelManagedBy"
                        }
                    },
                    "primaryDestVips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getTrafficForwardingGRETunnelPrimaryDestVip:getTrafficForwardingGRETunnelPrimaryDestVip"
                        }
                    },
                    "secondaryDestVips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getTrafficForwardingGRETunnelSecondaryDestVip:getTrafficForwardingGRETunnelSecondaryDestVip"
                        }
                    },
                    "sourceIp": {
                        "type": "string"
                    },
                    "withinCountry": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "comment",
                    "internalIpRange",
                    "ipUnnumbered",
                    "lastModificationTime",
                    "lastModifiedBies",
                    "managedBies",
                    "primaryDestVips",
                    "secondaryDestVips",
                    "withinCountry"
                ]
            }
        },
        "zia:index/getTrafficForwardingGRETunnelInfo:getTrafficForwardingGRETunnelInfo": {
            "description": "The **zia_traffic_forwarding_gre_tunnel_info** data source to get information about provisioned GRE tunnel information created in the Zscaler Internet Access portal.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getTrafficForwardingGRETunnelInfo({\n    ipAddress: \"1.1.1.1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_traffic_forwarding_gre_tunnel_info(ip_address=\"1.1.1.1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetTrafficForwardingGRETunnelInfo.Invoke(new()\n    {\n        IpAddress = \"1.1.1.1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetTrafficForwardingGRETunnelInfo(ctx, \u0026zia.GetTrafficForwardingGRETunnelInfoArgs{\n\t\t\tIpAddress: pulumi.StringRef(\"1.1.1.1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetTrafficForwardingGRETunnelInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getTrafficForwardingGRETunnelInfo(GetTrafficForwardingGRETunnelInfoArgs.builder()\n            .ipAddress(\"1.1.1.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getTrafficForwardingGRETunnelInfo\n      Arguments:\n        ipAddress: 1.1.1.1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTrafficForwardingGRETunnelInfo.\n",
                "properties": {
                    "greEnabled": {
                        "type": "boolean",
                        "description": "Displays only ip addresses with GRE tunnel enabled\n\n\u003e **NOTE** `ip_address` is the public IP address (Static IP) associated with the GRE Tunnel\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Filter based on an IP address range.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrafficForwardingGRETunnelInfo.\n",
                "properties": {
                    "greEnabled": {
                        "type": "boolean"
                    },
                    "greRangePrimary": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "greRangeSecondary": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "greTunnelIp": {
                        "type": "string",
                        "description": "(String) The start of the internal IP address in /29 CIDR range\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "primaryGw": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "secondaryGw": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "tunId": {
                        "type": "integer",
                        "description": "(Number)\n"
                    }
                },
                "type": "object",
                "required": [
                    "greRangePrimary",
                    "greRangeSecondary",
                    "greTunnelIp",
                    "primaryGw",
                    "secondaryGw",
                    "tunId",
                    "id"
                ]
            }
        },
        "zia:index/getTrafficForwardingNodeVIPs:getTrafficForwardingNodeVIPs": {
            "description": "Use the **zia_traffic_forwarding_public_node_vips** data source to retrieve a paginated list of virtual IP addresses (VIPs) available in the Zscaler cloud.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst yvr1 = zia.getTrafficForwardingNodeVIPs({\n    datacenter: \"YVR1\",\n});\nexport const ziaTrafficForwardingPublicNodeVipsYvr1 = yvr1;\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nyvr1 = zia.get_traffic_forwarding_node_vips(datacenter=\"YVR1\")\npulumi.export(\"ziaTrafficForwardingPublicNodeVipsYvr1\", yvr1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var yvr1 = Zia.GetTrafficForwardingNodeVIPs.Invoke(new()\n    {\n        Datacenter = \"YVR1\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ziaTrafficForwardingPublicNodeVipsYvr1\"] = yvr1,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tyvr1, err := zia.GetTrafficForwardingNodeVIPs(ctx, \u0026zia.GetTrafficForwardingNodeVIPsArgs{\n\t\t\tDatacenter: pulumi.StringRef(\"YVR1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ziaTrafficForwardingPublicNodeVipsYvr1\", yvr1)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetTrafficForwardingNodeVIPsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var yvr1 = ZiaFunctions.getTrafficForwardingNodeVIPs(GetTrafficForwardingNodeVIPsArgs.builder()\n            .datacenter(\"YVR1\")\n            .build());\n\n        ctx.export(\"ziaTrafficForwardingPublicNodeVipsYvr1\", yvr1.applyValue(getTrafficForwardingNodeVIPsResult -\u003e getTrafficForwardingNodeVIPsResult));\n    }\n}\n```\n```yaml\nvariables:\n  yvr1:\n    fn::invoke:\n      Function: zia:getTrafficForwardingNodeVIPs\n      Arguments:\n        datacenter: YVR1\noutputs:\n  ziaTrafficForwardingPublicNodeVipsYvr1: ${yvr1}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTrafficForwardingNodeVIPs.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "Data-center Name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrafficForwardingNodeVIPs.\n",
                "properties": {
                    "city": {
                        "type": "string"
                    },
                    "cloudName": {
                        "type": "string"
                    },
                    "datacenter": {
                        "type": "string"
                    },
                    "greDomainName": {
                        "type": "string"
                    },
                    "greIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "location": {
                        "type": "string"
                    },
                    "pacDomainName": {
                        "type": "string"
                    },
                    "pacIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "region": {
                        "type": "string"
                    },
                    "vpnDomainName": {
                        "type": "string"
                    },
                    "vpnIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "city",
                    "cloudName",
                    "greDomainName",
                    "greIps",
                    "location",
                    "pacDomainName",
                    "pacIps",
                    "region",
                    "vpnDomainName",
                    "vpnIps",
                    "id"
                ]
            }
        },
        "zia:index/getTrafficForwardingStaticIP:getTrafficForwardingStaticIP": {
            "description": "Use the **zia_traffic_forwarding_static_ip** data source to get information about all provisioned static IP addresses. This resource can then be utilized when creating a GRE Tunnel or VPN Credential resource of Type `IP`\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getTrafficForwardingStaticIP({\n    ipAddress: \"1.1.1.1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_traffic_forwarding_static_ip(ip_address=\"1.1.1.1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetTrafficForwardingStaticIP.Invoke(new()\n    {\n        IpAddress = \"1.1.1.1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupTrafficForwardingStaticIP(ctx, \u0026zia.LookupTrafficForwardingStaticIPArgs{\n\t\t\tIpAddress: pulumi.StringRef(\"1.1.1.1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetTrafficForwardingStaticIPArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getTrafficForwardingStaticIP(GetTrafficForwardingStaticIPArgs.builder()\n            .ipAddress(\"1.1.1.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getTrafficForwardingStaticIP\n      Arguments:\n        ipAddress: 1.1.1.1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTrafficForwardingStaticIP.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "(String) Additional information about this static IP address\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The unique identifier for the static IP address\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The static IP address\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrafficForwardingStaticIP.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "(String) Additional information about this static IP address\n"
                    },
                    "geoOverride": {
                        "type": "boolean",
                        "description": "(Boolean) If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(String) Identifier that uniquely identifies an entity\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "(String) The static IP address\n"
                    },
                    "lastModificationTime": {
                        "type": "integer",
                        "description": "(Number) When the static IP address was last modified\n"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getTrafficForwardingStaticIPLastModifiedBy:getTrafficForwardingStaticIPLastModifiedBy"
                        },
                        "description": "(Set of Object)\n"
                    },
                    "latitude": {
                        "type": "integer",
                        "description": "(Number) Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between `-90` and `90` degrees.\n"
                    },
                    "longitude": {
                        "type": "integer",
                        "description": "(Number) Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between `-180` and `180` degrees.\n"
                    },
                    "managedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getTrafficForwardingStaticIPManagedBy:getTrafficForwardingStaticIPManagedBy"
                        },
                        "description": "(Set of Object)\n"
                    },
                    "routableIp": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "geoOverride",
                    "id",
                    "ipAddress",
                    "lastModificationTime",
                    "lastModifiedBies",
                    "latitude",
                    "longitude",
                    "managedBies",
                    "routableIp"
                ]
            }
        },
        "zia:index/getTrafficForwardingVIPRecommendedList:getTrafficForwardingVIPRecommendedList": {
            "description": "Use the **zia_gre_vip_recommended_list** data source to get information about a list of recommended GRE tunnel virtual IP addresses (VIPs), based on source IP address or latitude/longitude coordinates.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst this = zia.getTrafficForwardingVIPRecommendedList({\n    requiredCount: 2,\n    sourceIp: \"1.1.1.1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nthis = zia.get_traffic_forwarding_vip_recommended_list(required_count=2,\n    source_ip=\"1.1.1.1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Zia.GetTrafficForwardingVIPRecommendedList.Invoke(new()\n    {\n        RequiredCount = 2,\n        SourceIp = \"1.1.1.1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetTrafficForwardingVIPRecommendedList(ctx, \u0026zia.GetTrafficForwardingVIPRecommendedListArgs{\n\t\t\tRequiredCount: pulumi.IntRef(2),\n\t\t\tSourceIp:      pulumi.StringRef(\"1.1.1.1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetTrafficForwardingVIPRecommendedListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = ZiaFunctions.getTrafficForwardingVIPRecommendedList(GetTrafficForwardingVIPRecommendedListArgs.builder()\n            .requiredCount(2)\n            .sourceIp(\"1.1.1.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: zia:getTrafficForwardingVIPRecommendedList\n      Arguments:\n        requiredCount: 2\n        sourceIp: 1.1.1.1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTrafficForwardingVIPRecommendedList.\n",
                "properties": {
                    "requiredCount": {
                        "type": "integer",
                        "description": "Number of IP address to be exported.\n"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "Filter based on an IP address range.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrafficForwardingVIPRecommendedList.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getTrafficForwardingVIPRecommendedListList:getTrafficForwardingVIPRecommendedListList"
                        }
                    },
                    "requiredCount": {
                        "type": "integer"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "(String) The public source IP address.\n"
                    }
                },
                "type": "object",
                "required": [
                    "lists",
                    "id"
                ]
            }
        },
        "zia:index/getTrafficForwardingVPNCredentials:getTrafficForwardingVPNCredentials": {
            "description": "Use the **zia_traffic_forwarding_vpn_credentials** data source to get information about VPN credentials that can be associated to locations. VPN is one way to route traffic from customer locations to the cloud. Site-to-Site IPSec VPN credentials can be identified by the cloud through one of the following methods:\n\n* Common Name (CN) of IPSec Certificate\n* VPN User FQDN - requires VPN_SITE_TO_SITE subscription\n* VPN IP Address - requires VPN_SITE_TO_SITE subscription\n* Extended Authentication (XAUTH) or hosted mobile UserID - requires VPN_MOBILE subscription\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getTrafficForwardingVPNCredentials({\n    fqdn: \"sjc-1-37@acme.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_traffic_forwarding_vpn_credentials(fqdn=\"sjc-1-37@acme.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetTrafficForwardingVPNCredentials.Invoke(new()\n    {\n        Fqdn = \"sjc-1-37@acme.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupTrafficForwardingVPNCredentials(ctx, \u0026zia.LookupTrafficForwardingVPNCredentialsArgs{\n\t\t\tFqdn: pulumi.StringRef(\"sjc-1-37@acme.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetTrafficForwardingVPNCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getTrafficForwardingVPNCredentials(GetTrafficForwardingVPNCredentialsArgs.builder()\n            .fqdn(\"sjc-1-37@acme.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getTrafficForwardingVPNCredentials\n      Arguments:\n        fqdn: sjc-1-37@acme.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getTrafficForwardingVPNCredentials({\n    ipAddress: \"1.1.1.1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_traffic_forwarding_vpn_credentials(ip_address=\"1.1.1.1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetTrafficForwardingVPNCredentials.Invoke(new()\n    {\n        IpAddress = \"1.1.1.1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupTrafficForwardingVPNCredentials(ctx, \u0026zia.LookupTrafficForwardingVPNCredentialsArgs{\n\t\t\tIpAddress: pulumi.StringRef(\"1.1.1.1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetTrafficForwardingVPNCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getTrafficForwardingVPNCredentials(GetTrafficForwardingVPNCredentialsArgs.builder()\n            .ipAddress(\"1.1.1.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getTrafficForwardingVPNCredentials\n      Arguments:\n        ipAddress: 1.1.1.1\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTrafficForwardingVPNCredentials.\n",
                "properties": {
                    "fqdn": {
                        "type": "string",
                        "description": "(String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Unique identifer of the GRE virtual IP address (VIP)\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Filter based on an IP address range.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrafficForwardingVPNCredentials.\n",
                "properties": {
                    "comments": {
                        "type": "string",
                        "description": "(String) Additional information about this VPN credential.\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "(String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) Identifier that uniquely identifies an entity\n"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getTrafficForwardingVPNCredentialsLocation:getTrafficForwardingVPNCredentialsLocation"
                        },
                        "description": "(Set of Object) Location that is associated to this VPN credential. Non-existence means not associated to any location.\n"
                    },
                    "managedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getTrafficForwardingVPNCredentialsManagedBy:getTrafficForwardingVPNCredentialsManagedBy"
                        },
                        "description": "(Set of Object) SD-WAN Partner that manages the location. If a partner does not manage the locaton, this is set to Self.\n"
                    },
                    "preSharedKey": {
                        "type": "string",
                        "description": "(String) Pre-shared key. This is a required field for `UFQDN` and `IP` auth type.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.\n"
                    }
                },
                "type": "object",
                "required": [
                    "comments",
                    "id",
                    "locations",
                    "managedBies",
                    "preSharedKey",
                    "type"
                ]
            }
        },
        "zia:index/getURLCategories:getURLCategories": {
            "description": "Use the **zia_url_categories** data source to get information about all or custom URL categories. By default, the response includes keywords.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getURLCategories({\n    id: \"CUSTOM_08\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_url_categories(id=\"CUSTOM_08\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetURLCategories.Invoke(new()\n    {\n        Id = \"CUSTOM_08\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupURLCategories(ctx, \u0026zia.LookupURLCategoriesArgs{\n\t\t\tId: pulumi.StringRef(\"CUSTOM_08\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetURLCategoriesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getURLCategories(GetURLCategoriesArgs.builder()\n            .id(\"CUSTOM_08\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getURLCategories\n      Arguments:\n        id: CUSTOM_08\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getURLCategories.\n",
                "properties": {
                    "configuredName": {
                        "type": "string",
                        "description": "(String) Name of the URL category. This is only required for custom URL categories.\n"
                    },
                    "customCategory": {
                        "type": "boolean",
                        "description": "(Boolean) Set to true for custom URL category. Up to 48 custom URL categories can be added per organization.\n"
                    },
                    "customIpRangesCount": {
                        "type": "integer",
                        "description": "(Number) The number of custom IP address ranges associated to the URL category.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "URL category\n"
                    },
                    "superCategory": {
                        "type": "string",
                        "description": "(String)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getURLCategories.\n",
                "properties": {
                    "configuredName": {
                        "type": "string",
                        "description": "(String) Name of the URL category. This is only required for custom URL categories.\n"
                    },
                    "customCategory": {
                        "type": "boolean",
                        "description": "(Boolean) Set to true for custom URL category. Up to 48 custom URL categories can be added per organization.\n"
                    },
                    "customIpRangesCount": {
                        "type": "integer",
                        "description": "(Number) The number of custom IP address ranges associated to the URL category.\n"
                    },
                    "customUrlsCount": {
                        "type": "integer",
                        "description": "(Number) The number of custom URLs associated to the URL category.\n"
                    },
                    "dbCategorizedUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) URLs added to a custom URL category are also retained under the original parent URL category (i.e., the predefined category the URL previously belonged to).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(String) Description of the category.\n"
                    },
                    "editable": {
                        "type": "boolean",
                        "description": "(Boolean) Value is set to false for custom URL category when due to scope user does not have edit permission\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(String) Identifier that uniquely identifies an entity\n"
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ipRangesRetainingParentCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ipRangesRetainingParentCategoryCount": {
                        "type": "integer",
                        "description": "(Number) The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.\n"
                    },
                    "keywords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) Custom keywords associated to a URL category. Up to 2048 custom keywords can be added per organization across all categories (including bandwidth classes).\n"
                    },
                    "keywordsRetainingParentCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLCategoriesScope:getURLCategoriesScope"
                        },
                        "description": "(List of Object) Scope of the custom categories.\n"
                    },
                    "superCategory": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`\n"
                    },
                    "urlKeywordCounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLCategoriesUrlKeywordCount:getURLCategoriesUrlKeywordCount"
                        },
                        "description": "(List of Object) URL and keyword counts for the category.\n"
                    },
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) Custom URLs to add to a URL category. Up to 25,000 custom URLs can be added per organization across all categories (including bandwidth classes).\n"
                    },
                    "urlsRetainingParentCategoryCount": {
                        "type": "integer",
                        "description": "(Number) The number of custom URLs associated to the URL category, that also need to be retained under the original parent category.\n"
                    },
                    "val": {
                        "type": "integer",
                        "description": "(Number)\n"
                    }
                },
                "type": "object",
                "required": [
                    "configuredName",
                    "customCategory",
                    "customUrlsCount",
                    "dbCategorizedUrls",
                    "description",
                    "editable",
                    "id",
                    "ipRanges",
                    "ipRangesRetainingParentCategories",
                    "ipRangesRetainingParentCategoryCount",
                    "keywords",
                    "keywordsRetainingParentCategories",
                    "scopes",
                    "type",
                    "urlKeywordCounts",
                    "urls",
                    "urlsRetainingParentCategoryCount",
                    "val"
                ]
            }
        },
        "zia:index/getURLFilteringRules:getURLFilteringRules": {
            "description": "Use the **zia_url_filtering_rules** data source to get information about a URL filtering rule information for the specified `Name`.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.getURLFilteringRules({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.get_url_filtering_rules(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.GetURLFilteringRules.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupURLFilteringRules(ctx, \u0026zia.LookupURLFilteringRulesArgs{\n\t\t\tName: pulumi.StringRef(\"Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetURLFilteringRulesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ZiaFunctions.getURLFilteringRules(GetURLFilteringRulesArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:getURLFilteringRules\n      Arguments:\n        name: Example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getURLFilteringRules.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "URL Filtering Rule ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the URL Filtering policy rule\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getURLFilteringRules.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "(String) Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`\n"
                    },
                    "blockOverride": {
                        "type": "boolean",
                        "description": "(String) When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If block_override is not set, `BLOCK` action cannot be overridden.\n"
                    },
                    "cbiProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLFilteringRulesCbiProfile:getURLFilteringRulesCbiProfile"
                        },
                        "description": "(List) The cloud browser isolation profile to which the ISOLATE action is applied in the URL Filtering Policy rules. This block is required when the attribute `action` is set to `ISOLATE`\n"
                    },
                    "ciparule": {
                        "type": "boolean"
                    },
                    "departments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLFilteringRulesDepartment:getURLFilteringRulesDepartment"
                        },
                        "description": "(List of Object) The departments to which the Firewall Filtering policy rule applies\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(String) Additional information about the rule\n"
                    },
                    "deviceGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLFilteringRulesDeviceGroup:getURLFilteringRulesDeviceGroup"
                        }
                    },
                    "deviceTrustLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional) List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`\n"
                    },
                    "devices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLFilteringRulesDevice:getURLFilteringRulesDevice"
                        }
                    },
                    "endUserNotificationUrl": {
                        "type": "string",
                        "description": "(String) URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.\n"
                    },
                    "enforceTimeValidity": {
                        "type": "boolean",
                        "description": "(String) Enforce a set a validity time period for the URL Filtering rule.\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLFilteringRulesGroup:getURLFilteringRulesGroup"
                        },
                        "description": "(List of Object) The groups to which the Firewall Filtering policy rule applies\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) A unique identifier assigned to the workload group\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLFilteringRulesLabel:getURLFilteringRulesLabel"
                        }
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLFilteringRulesLastModifiedBy:getURLFilteringRulesLastModifiedBy"
                        }
                    },
                    "lastModifiedTime": {
                        "type": "integer",
                        "description": "(Number) When the rule was last modified\n"
                    },
                    "locationGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLFilteringRulesLocationGroup:getURLFilteringRulesLocationGroup"
                        },
                        "description": "(List of Object) The location groups to which the Firewall Filtering policy rule applies\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLFilteringRulesLocation:getURLFilteringRulesLocation"
                        },
                        "description": "(List of Object) The locations to which the Firewall Filtering policy rule applies\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The name of the workload group\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "(Number) Order of execution of rule with respect to other URL Filtering rules\n"
                    },
                    "overrideGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLFilteringRulesOverrideGroup:getURLFilteringRulesOverrideGroup"
                        },
                        "description": "(List of Object) Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.\n"
                    },
                    "overrideUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLFilteringRulesOverrideUser:getURLFilteringRulesOverrideUser"
                        },
                        "description": "(List of Object) Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.\n"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of Object) Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`, `WEBSOCKETSSL_RULE`, `WEBSOCKET_RULE`\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "(String) Admin rank of the admin who creates this rule\n"
                    },
                    "requestMethods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(String) Request method for which the rule must be applied. If not set, rule will be applied to all methods\n"
                    },
                    "sizeQuota": {
                        "type": "integer",
                        "description": "(String) Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "(String) Rule State\n"
                    },
                    "timeQuota": {
                        "type": "integer",
                        "description": "(String) Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                    },
                    "timeWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLFilteringRulesTimeWindow:getURLFilteringRulesTimeWindow"
                        },
                        "description": "(List of Object) The time interval in which the Firewall Filtering policy rule applies\n"
                    },
                    "urlCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(String) List of URL categories for which rule must be applied\n"
                    },
                    "userAgentTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLFilteringRulesUser:getURLFilteringRulesUser"
                        },
                        "description": "(List of Object) The users to which the Firewall Filtering policy rule applies\n"
                    },
                    "validityEndTime": {
                        "type": "integer",
                        "description": "(Number) If enforceTimeValidity is set to true, the URL Filtering rule will cease to be valid on this end date and time.\n"
                    },
                    "validityStartTime": {
                        "type": "integer",
                        "description": "(Number) If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.\n"
                    },
                    "validityTimeZoneId": {
                        "type": "string",
                        "description": "(Number) If enforceTimeValidity is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.\n"
                    },
                    "workloadGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getURLFilteringRulesWorkloadGroup:getURLFilteringRulesWorkloadGroup"
                        },
                        "description": "(List) The list of preconfigured workload groups to which the policy must be applied\n"
                    }
                },
                "type": "object",
                "required": [
                    "action",
                    "blockOverride",
                    "cbiProfiles",
                    "ciparule",
                    "departments",
                    "description",
                    "deviceGroups",
                    "deviceTrustLevels",
                    "devices",
                    "endUserNotificationUrl",
                    "enforceTimeValidity",
                    "groups",
                    "labels",
                    "lastModifiedBies",
                    "lastModifiedTime",
                    "locationGroups",
                    "locations",
                    "order",
                    "overrideGroups",
                    "overrideUsers",
                    "protocols",
                    "rank",
                    "requestMethods",
                    "sizeQuota",
                    "state",
                    "timeQuota",
                    "timeWindows",
                    "urlCategories",
                    "userAgentTypes",
                    "users",
                    "validityEndTime",
                    "validityStartTime",
                    "validityTimeZoneId",
                    "workloadGroups"
                ]
            }
        },
        "zia:index/getUserManagement:getUserManagement": {
            "description": "Use the **zia_user_management** data source to get information about a user account that may have been created in the Zscaler Internet Access portal or via API. This data source can then be associated with a ZIA cloud firewall filtering rule, and URL filtering rules.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst adamAshcroft = zia.getUserManagement({\n    name: \"Adam Ashcroft\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nadam_ashcroft = zia.get_user_management(name=\"Adam Ashcroft\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var adamAshcroft = Zia.GetUserManagement.Invoke(new()\n    {\n        Name = \"Adam Ashcroft\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.LookupUserManagement(ctx, \u0026zia.LookupUserManagementArgs{\n\t\t\tName: pulumi.StringRef(\"Adam Ashcroft\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetUserManagementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var adamAshcroft = ZiaFunctions.getUserManagement(GetUserManagementArgs.builder()\n            .name(\"Adam Ashcroft\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  adamAshcroft:\n    fn::invoke:\n      Function: zia:getUserManagement\n      Arguments:\n        name: Adam Ashcroft\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getUserManagement.\n",
                "properties": {
                    "authMethods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(String) Type of authentication method to be enabled. Supported values are: ``BASIC`` and ``DIGEST``\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of the time window resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "User name. This appears when choosing users for policies.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUserManagement.\n",
                "properties": {
                    "adminUser": {
                        "type": "boolean",
                        "description": "(String) True if this user is an Admin user. readOnly: `true` default: `false`\n"
                    },
                    "authMethods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(String) Type of authentication method to be enabled. Supported values are: ``BASIC`` and ``DIGEST``\n"
                    },
                    "comments": {
                        "type": "string",
                        "description": "(String) Additional information about the group\n"
                    },
                    "departments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getUserManagementDepartment:getUserManagementDepartment"
                        },
                        "description": "(String) Department a user belongs to\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "(Required) User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getUserManagementGroup:getUserManagementGroup"
                        },
                        "description": "(String) List of Groups a user belongs to. Groups are used in policies.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) Unique identfier for the group\n"
                    },
                    "isAuditor": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) Group name\n"
                    },
                    "tempAuthEmail": {
                        "type": "string",
                        "description": "(String) Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler service sends the tokens or links. If this is empty, the service will send the email to the User email.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(String) User type. Provided only if this user is not an end user. The supported types are:\n"
                    }
                },
                "type": "object",
                "required": [
                    "adminUser",
                    "comments",
                    "departments",
                    "email",
                    "groups",
                    "isAuditor",
                    "tempAuthEmail",
                    "type"
                ]
            }
        },
        "zia:index/getWorkloadGroups:getWorkloadGroups": {
            "description": "Use the **zia_workload_groups** data source to get information about Workload Groups in the Zscaler Internet Access cloud or via the API. This data source can then be used as a criterion in ZIA policies such as, Firewall Filtering, URL Filtering, and Data Loss Prevention (DLP) to apply security policies to the workload traffic.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst ios = zia.getWorkloadGroups({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nios = zia.get_workload_groups(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ios = Zia.GetWorkloadGroups.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := zia.GetWorkloadGroups(ctx, \u0026zia.GetWorkloadGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.ZiaFunctions;\nimport com.pulumi.zia.inputs.GetWorkloadGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ios = ZiaFunctions.getWorkloadGroups(GetWorkloadGroupsArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ios:\n    fn::invoke:\n      Function: zia:getWorkloadGroups\n      Arguments:\n        name: Example\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getWorkloadGroups.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the workload group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWorkloadGroups.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(String) The description of the workload group.\n"
                    },
                    "expression": {
                        "type": "string",
                        "description": "(String) The workload group expression containing tag types, tags, and their relationships.\n"
                    },
                    "expressionJsons": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getWorkloadGroupsExpressionJson:getWorkloadGroupsExpressionJson"
                        },
                        "description": "(List) The workload group expression containing tag types, tags, and their relationships represented in a JSON format.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) Identifier that uniquely identifies an entity\n"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:index/getWorkloadGroupsLastModifiedBy:getWorkloadGroupsLastModifiedBy"
                        }
                    },
                    "lastModifiedTime": {
                        "type": "integer",
                        "description": "(Number) When the rule was last modified\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The configured name of the entity\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "expression",
                    "expressionJsons",
                    "id",
                    "lastModifiedBies",
                    "lastModifiedTime"
                ]
            }
        }
    }
}