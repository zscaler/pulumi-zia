// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/about-ftp-control)
// * [API documentation](https://help.zscaler.com/zia/ftp-control-policy#/ftpSettings-get)
//
// Use the **zia_ftp_control_policy** data source to retrieves the FTP Control Policy configuration. To learn more see [Configuring the FTP Control Policy](https://help.zscaler.com/zia/configuring-ftp-control-policy)
//
// ## Example Usage
func LookupFtpControlPolicy(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*LookupFtpControlPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFtpControlPolicyResult
	err := ctx.Invoke("zia:index/getFtpControlPolicy:getFtpControlPolicy", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getFtpControlPolicy.
type LookupFtpControlPolicyResult struct {
	// (Boolean) Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
	FtpEnabled bool `pulumi:"ftpEnabled"`
	// (Boolean) Indicates whether to enable FTP over HTTP. By default, the Zscaler service doesn't allow users from a location to upload or download files from FTP sites that use FTP over HTTP. Select this to enable browsers to connect to FTP over HTTP sites and download files. If a remote user uses a dedicated port, then the service supports FTP over HTTP for them.
	FtpOverHttpEnabled bool `pulumi:"ftpOverHttpEnabled"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (List of Strings) List of URL categories that allow FTP traffic
	UrlCategories []string `pulumi:"urlCategories"`
	// (List of Strings) Domains or URLs included for the FTP Control settings
	Urls []string `pulumi:"urls"`
}

func LookupFtpControlPolicyOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) LookupFtpControlPolicyResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (LookupFtpControlPolicyResultOutput, error) {
		options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
		return ctx.InvokeOutput("zia:index/getFtpControlPolicy:getFtpControlPolicy", nil, LookupFtpControlPolicyResultOutput{}, options).(LookupFtpControlPolicyResultOutput), nil
	}).(LookupFtpControlPolicyResultOutput)
}

// A collection of values returned by getFtpControlPolicy.
type LookupFtpControlPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupFtpControlPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFtpControlPolicyResult)(nil)).Elem()
}

func (o LookupFtpControlPolicyResultOutput) ToLookupFtpControlPolicyResultOutput() LookupFtpControlPolicyResultOutput {
	return o
}

func (o LookupFtpControlPolicyResultOutput) ToLookupFtpControlPolicyResultOutputWithContext(ctx context.Context) LookupFtpControlPolicyResultOutput {
	return o
}

// (Boolean) Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
func (o LookupFtpControlPolicyResultOutput) FtpEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupFtpControlPolicyResult) bool { return v.FtpEnabled }).(pulumi.BoolOutput)
}

// (Boolean) Indicates whether to enable FTP over HTTP. By default, the Zscaler service doesn't allow users from a location to upload or download files from FTP sites that use FTP over HTTP. Select this to enable browsers to connect to FTP over HTTP sites and download files. If a remote user uses a dedicated port, then the service supports FTP over HTTP for them.
func (o LookupFtpControlPolicyResultOutput) FtpOverHttpEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupFtpControlPolicyResult) bool { return v.FtpOverHttpEnabled }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupFtpControlPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFtpControlPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// (List of Strings) List of URL categories that allow FTP traffic
func (o LookupFtpControlPolicyResultOutput) UrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupFtpControlPolicyResult) []string { return v.UrlCategories }).(pulumi.StringArrayOutput)
}

// (List of Strings) Domains or URLs included for the FTP Control settings
func (o LookupFtpControlPolicyResultOutput) Urls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupFtpControlPolicyResult) []string { return v.Urls }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFtpControlPolicyResultOutput{})
}
