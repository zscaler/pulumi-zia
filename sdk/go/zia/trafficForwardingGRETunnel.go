// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_traffic_forwarding_gre_tunnel** can be imported by using `<TUNNEL_ID>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel example <tunnel_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel example <engine_name>
// ```
type TrafficForwardingGRETunnel struct {
	pulumi.CustomResourceState

	// Additional information about this GRE tunnel
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// When withinCountry is enabled, you must set this to the country code.
	CountryCode pulumi.StringOutput `pulumi:"countryCode"`
	// The start of the internal IP address in /29 CIDR range
	InternalIpRange pulumi.StringPtrOutput `pulumi:"internalIpRange"`
	// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are
	// set to null
	IpUnnumbered pulumi.BoolOutput `pulumi:"ipUnnumbered"`
	// The primary destination data center and virtual IP address (VIP) of the GRE tunnel
	PrimaryDestVips TrafficForwardingGRETunnelPrimaryDestVipArrayOutput `pulumi:"primaryDestVips"`
	// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
	SecondaryDestVips TrafficForwardingGRETunnelSecondaryDestVipArrayOutput `pulumi:"secondaryDestVips"`
	// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// The ID of the GRE tunnel.
	TunnelId pulumi.IntOutput `pulumi:"tunnelId"`
	// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
	WithinCountry pulumi.BoolOutput `pulumi:"withinCountry"`
}

// NewTrafficForwardingGRETunnel registers a new resource with the given unique name, arguments, and options.
func NewTrafficForwardingGRETunnel(ctx *pulumi.Context,
	name string, args *TrafficForwardingGRETunnelArgs, opts ...pulumi.ResourceOption) (*TrafficForwardingGRETunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceIp == nil {
		return nil, errors.New("invalid value for required argument 'SourceIp'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrafficForwardingGRETunnel
	err := ctx.RegisterResource("zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficForwardingGRETunnel gets an existing TrafficForwardingGRETunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficForwardingGRETunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficForwardingGRETunnelState, opts ...pulumi.ResourceOption) (*TrafficForwardingGRETunnel, error) {
	var resource TrafficForwardingGRETunnel
	err := ctx.ReadResource("zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficForwardingGRETunnel resources.
type trafficForwardingGRETunnelState struct {
	// Additional information about this GRE tunnel
	Comment *string `pulumi:"comment"`
	// When withinCountry is enabled, you must set this to the country code.
	CountryCode *string `pulumi:"countryCode"`
	// The start of the internal IP address in /29 CIDR range
	InternalIpRange *string `pulumi:"internalIpRange"`
	// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are
	// set to null
	IpUnnumbered *bool `pulumi:"ipUnnumbered"`
	// The primary destination data center and virtual IP address (VIP) of the GRE tunnel
	PrimaryDestVips []TrafficForwardingGRETunnelPrimaryDestVip `pulumi:"primaryDestVips"`
	// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
	SecondaryDestVips []TrafficForwardingGRETunnelSecondaryDestVip `pulumi:"secondaryDestVips"`
	// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
	SourceIp *string `pulumi:"sourceIp"`
	// The ID of the GRE tunnel.
	TunnelId *int `pulumi:"tunnelId"`
	// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
	WithinCountry *bool `pulumi:"withinCountry"`
}

type TrafficForwardingGRETunnelState struct {
	// Additional information about this GRE tunnel
	Comment pulumi.StringPtrInput
	// When withinCountry is enabled, you must set this to the country code.
	CountryCode pulumi.StringPtrInput
	// The start of the internal IP address in /29 CIDR range
	InternalIpRange pulumi.StringPtrInput
	// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are
	// set to null
	IpUnnumbered pulumi.BoolPtrInput
	// The primary destination data center and virtual IP address (VIP) of the GRE tunnel
	PrimaryDestVips TrafficForwardingGRETunnelPrimaryDestVipArrayInput
	// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
	SecondaryDestVips TrafficForwardingGRETunnelSecondaryDestVipArrayInput
	// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
	SourceIp pulumi.StringPtrInput
	// The ID of the GRE tunnel.
	TunnelId pulumi.IntPtrInput
	// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
	WithinCountry pulumi.BoolPtrInput
}

func (TrafficForwardingGRETunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficForwardingGRETunnelState)(nil)).Elem()
}

type trafficForwardingGRETunnelArgs struct {
	// Additional information about this GRE tunnel
	Comment *string `pulumi:"comment"`
	// When withinCountry is enabled, you must set this to the country code.
	CountryCode *string `pulumi:"countryCode"`
	// The start of the internal IP address in /29 CIDR range
	InternalIpRange *string `pulumi:"internalIpRange"`
	// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are
	// set to null
	IpUnnumbered *bool `pulumi:"ipUnnumbered"`
	// The primary destination data center and virtual IP address (VIP) of the GRE tunnel
	PrimaryDestVips []TrafficForwardingGRETunnelPrimaryDestVip `pulumi:"primaryDestVips"`
	// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
	SecondaryDestVips []TrafficForwardingGRETunnelSecondaryDestVip `pulumi:"secondaryDestVips"`
	// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
	SourceIp string `pulumi:"sourceIp"`
	// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
	WithinCountry *bool `pulumi:"withinCountry"`
}

// The set of arguments for constructing a TrafficForwardingGRETunnel resource.
type TrafficForwardingGRETunnelArgs struct {
	// Additional information about this GRE tunnel
	Comment pulumi.StringPtrInput
	// When withinCountry is enabled, you must set this to the country code.
	CountryCode pulumi.StringPtrInput
	// The start of the internal IP address in /29 CIDR range
	InternalIpRange pulumi.StringPtrInput
	// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are
	// set to null
	IpUnnumbered pulumi.BoolPtrInput
	// The primary destination data center and virtual IP address (VIP) of the GRE tunnel
	PrimaryDestVips TrafficForwardingGRETunnelPrimaryDestVipArrayInput
	// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
	SecondaryDestVips TrafficForwardingGRETunnelSecondaryDestVipArrayInput
	// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
	SourceIp pulumi.StringInput
	// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
	WithinCountry pulumi.BoolPtrInput
}

func (TrafficForwardingGRETunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficForwardingGRETunnelArgs)(nil)).Elem()
}

type TrafficForwardingGRETunnelInput interface {
	pulumi.Input

	ToTrafficForwardingGRETunnelOutput() TrafficForwardingGRETunnelOutput
	ToTrafficForwardingGRETunnelOutputWithContext(ctx context.Context) TrafficForwardingGRETunnelOutput
}

func (*TrafficForwardingGRETunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficForwardingGRETunnel)(nil)).Elem()
}

func (i *TrafficForwardingGRETunnel) ToTrafficForwardingGRETunnelOutput() TrafficForwardingGRETunnelOutput {
	return i.ToTrafficForwardingGRETunnelOutputWithContext(context.Background())
}

func (i *TrafficForwardingGRETunnel) ToTrafficForwardingGRETunnelOutputWithContext(ctx context.Context) TrafficForwardingGRETunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficForwardingGRETunnelOutput)
}

// TrafficForwardingGRETunnelArrayInput is an input type that accepts TrafficForwardingGRETunnelArray and TrafficForwardingGRETunnelArrayOutput values.
// You can construct a concrete instance of `TrafficForwardingGRETunnelArrayInput` via:
//
//	TrafficForwardingGRETunnelArray{ TrafficForwardingGRETunnelArgs{...} }
type TrafficForwardingGRETunnelArrayInput interface {
	pulumi.Input

	ToTrafficForwardingGRETunnelArrayOutput() TrafficForwardingGRETunnelArrayOutput
	ToTrafficForwardingGRETunnelArrayOutputWithContext(context.Context) TrafficForwardingGRETunnelArrayOutput
}

type TrafficForwardingGRETunnelArray []TrafficForwardingGRETunnelInput

func (TrafficForwardingGRETunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficForwardingGRETunnel)(nil)).Elem()
}

func (i TrafficForwardingGRETunnelArray) ToTrafficForwardingGRETunnelArrayOutput() TrafficForwardingGRETunnelArrayOutput {
	return i.ToTrafficForwardingGRETunnelArrayOutputWithContext(context.Background())
}

func (i TrafficForwardingGRETunnelArray) ToTrafficForwardingGRETunnelArrayOutputWithContext(ctx context.Context) TrafficForwardingGRETunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficForwardingGRETunnelArrayOutput)
}

// TrafficForwardingGRETunnelMapInput is an input type that accepts TrafficForwardingGRETunnelMap and TrafficForwardingGRETunnelMapOutput values.
// You can construct a concrete instance of `TrafficForwardingGRETunnelMapInput` via:
//
//	TrafficForwardingGRETunnelMap{ "key": TrafficForwardingGRETunnelArgs{...} }
type TrafficForwardingGRETunnelMapInput interface {
	pulumi.Input

	ToTrafficForwardingGRETunnelMapOutput() TrafficForwardingGRETunnelMapOutput
	ToTrafficForwardingGRETunnelMapOutputWithContext(context.Context) TrafficForwardingGRETunnelMapOutput
}

type TrafficForwardingGRETunnelMap map[string]TrafficForwardingGRETunnelInput

func (TrafficForwardingGRETunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficForwardingGRETunnel)(nil)).Elem()
}

func (i TrafficForwardingGRETunnelMap) ToTrafficForwardingGRETunnelMapOutput() TrafficForwardingGRETunnelMapOutput {
	return i.ToTrafficForwardingGRETunnelMapOutputWithContext(context.Background())
}

func (i TrafficForwardingGRETunnelMap) ToTrafficForwardingGRETunnelMapOutputWithContext(ctx context.Context) TrafficForwardingGRETunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficForwardingGRETunnelMapOutput)
}

type TrafficForwardingGRETunnelOutput struct{ *pulumi.OutputState }

func (TrafficForwardingGRETunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficForwardingGRETunnel)(nil)).Elem()
}

func (o TrafficForwardingGRETunnelOutput) ToTrafficForwardingGRETunnelOutput() TrafficForwardingGRETunnelOutput {
	return o
}

func (o TrafficForwardingGRETunnelOutput) ToTrafficForwardingGRETunnelOutputWithContext(ctx context.Context) TrafficForwardingGRETunnelOutput {
	return o
}

// Additional information about this GRE tunnel
func (o TrafficForwardingGRETunnelOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficForwardingGRETunnel) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// When withinCountry is enabled, you must set this to the country code.
func (o TrafficForwardingGRETunnelOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficForwardingGRETunnel) pulumi.StringOutput { return v.CountryCode }).(pulumi.StringOutput)
}

// The start of the internal IP address in /29 CIDR range
func (o TrafficForwardingGRETunnelOutput) InternalIpRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficForwardingGRETunnel) pulumi.StringPtrOutput { return v.InternalIpRange }).(pulumi.StringPtrOutput)
}

// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are
// set to null
func (o TrafficForwardingGRETunnelOutput) IpUnnumbered() pulumi.BoolOutput {
	return o.ApplyT(func(v *TrafficForwardingGRETunnel) pulumi.BoolOutput { return v.IpUnnumbered }).(pulumi.BoolOutput)
}

// The primary destination data center and virtual IP address (VIP) of the GRE tunnel
func (o TrafficForwardingGRETunnelOutput) PrimaryDestVips() TrafficForwardingGRETunnelPrimaryDestVipArrayOutput {
	return o.ApplyT(func(v *TrafficForwardingGRETunnel) TrafficForwardingGRETunnelPrimaryDestVipArrayOutput {
		return v.PrimaryDestVips
	}).(TrafficForwardingGRETunnelPrimaryDestVipArrayOutput)
}

// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
func (o TrafficForwardingGRETunnelOutput) SecondaryDestVips() TrafficForwardingGRETunnelSecondaryDestVipArrayOutput {
	return o.ApplyT(func(v *TrafficForwardingGRETunnel) TrafficForwardingGRETunnelSecondaryDestVipArrayOutput {
		return v.SecondaryDestVips
	}).(TrafficForwardingGRETunnelSecondaryDestVipArrayOutput)
}

// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
func (o TrafficForwardingGRETunnelOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficForwardingGRETunnel) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// The ID of the GRE tunnel.
func (o TrafficForwardingGRETunnelOutput) TunnelId() pulumi.IntOutput {
	return o.ApplyT(func(v *TrafficForwardingGRETunnel) pulumi.IntOutput { return v.TunnelId }).(pulumi.IntOutput)
}

// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
func (o TrafficForwardingGRETunnelOutput) WithinCountry() pulumi.BoolOutput {
	return o.ApplyT(func(v *TrafficForwardingGRETunnel) pulumi.BoolOutput { return v.WithinCountry }).(pulumi.BoolOutput)
}

type TrafficForwardingGRETunnelArrayOutput struct{ *pulumi.OutputState }

func (TrafficForwardingGRETunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficForwardingGRETunnel)(nil)).Elem()
}

func (o TrafficForwardingGRETunnelArrayOutput) ToTrafficForwardingGRETunnelArrayOutput() TrafficForwardingGRETunnelArrayOutput {
	return o
}

func (o TrafficForwardingGRETunnelArrayOutput) ToTrafficForwardingGRETunnelArrayOutputWithContext(ctx context.Context) TrafficForwardingGRETunnelArrayOutput {
	return o
}

func (o TrafficForwardingGRETunnelArrayOutput) Index(i pulumi.IntInput) TrafficForwardingGRETunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrafficForwardingGRETunnel {
		return vs[0].([]*TrafficForwardingGRETunnel)[vs[1].(int)]
	}).(TrafficForwardingGRETunnelOutput)
}

type TrafficForwardingGRETunnelMapOutput struct{ *pulumi.OutputState }

func (TrafficForwardingGRETunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficForwardingGRETunnel)(nil)).Elem()
}

func (o TrafficForwardingGRETunnelMapOutput) ToTrafficForwardingGRETunnelMapOutput() TrafficForwardingGRETunnelMapOutput {
	return o
}

func (o TrafficForwardingGRETunnelMapOutput) ToTrafficForwardingGRETunnelMapOutputWithContext(ctx context.Context) TrafficForwardingGRETunnelMapOutput {
	return o
}

func (o TrafficForwardingGRETunnelMapOutput) MapIndex(k pulumi.StringInput) TrafficForwardingGRETunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrafficForwardingGRETunnel {
		return vs[0].(map[string]*TrafficForwardingGRETunnel)[vs[1].(string)]
	}).(TrafficForwardingGRETunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficForwardingGRETunnelInput)(nil)).Elem(), &TrafficForwardingGRETunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficForwardingGRETunnelArrayInput)(nil)).Elem(), TrafficForwardingGRETunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficForwardingGRETunnelMapInput)(nil)).Elem(), TrafficForwardingGRETunnelMap{})
	pulumi.RegisterOutputType(TrafficForwardingGRETunnelOutput{})
	pulumi.RegisterOutputType(TrafficForwardingGRETunnelArrayOutput{})
	pulumi.RegisterOutputType(TrafficForwardingGRETunnelMapOutput{})
}
