// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/about-nat-control)
// * [API documentation](https://help.zscaler.com/zia/nat-control-policy#/dnatRules-get)
//
// The **zia_nat_control_rules** resource allows the creation and management of NAT Control rules in the Zscaler Internet Access.
//
// ## Example Usage
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_nat_control_rules** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/natControlRules:NatControlRules example <rule_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zia:index/natControlRules:NatControlRules example <rule_name>
// ```
type NatControlRules struct {
	pulumi.CustomResourceState

	// If set to true, the default rule is applied
	DefaultRule pulumi.BoolPtrOutput `pulumi:"defaultRule"`
	// list of departments for which rule must be applied
	Departments NatControlRulesDepartmentsPtrOutput `pulumi:"departments"`
	// Additional information about the rule
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
	DestAddresses pulumi.StringArrayOutput `pulumi:"destAddresses"`
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	DestCountries    pulumi.StringArrayOutput `pulumi:"destCountries"`
	DestIpCategories pulumi.StringArrayOutput `pulumi:"destIpCategories"`
	// list of destination ip groups
	DestIpGroups NatControlRulesDestIpGroupsPtrOutput `pulumi:"destIpGroups"`
	// list of destination ipv6 groups
	DestIpv6Groups NatControlRulesDestIpv6GroupsPtrOutput `pulumi:"destIpv6Groups"`
	// This field is applicable for devices that are managed using Zscaler Client Connector.
	DeviceGroups NatControlRulesDeviceGroupsPtrOutput `pulumi:"deviceGroups"`
	// Name-ID pairs of devices for which rule must be applied.
	Devices           NatControlRulesDevicesPtrOutput `pulumi:"devices"`
	EnableFullLogging pulumi.BoolPtrOutput            `pulumi:"enableFullLogging"`
	// list of groups for which rule must be applied
	Groups NatControlRulesGroupsPtrOutput `pulumi:"groups"`
	// list of Labels that are applicable to the rule.
	Labels NatControlRulesLabelsPtrOutput `pulumi:"labels"`
	// list of locations groups
	LocationGroups NatControlRulesLocationGroupsPtrOutput `pulumi:"locationGroups"`
	// list of locations for which rule must be applied
	Locations NatControlRulesLocationsPtrOutput `pulumi:"locations"`
	// Name of the nat control policy rule
	Name pulumi.StringOutput `pulumi:"name"`
	// list of nw service groups
	NwServiceGroups NatControlRulesNwServiceGroupsPtrOutput `pulumi:"nwServiceGroups"`
	// list of nw services
	NwServices NatControlRulesNwServicesPtrOutput `pulumi:"nwServices"`
	// Rule order number. If omitted, the rule will be added to the end of the rule set.
	Order pulumi.IntOutput `pulumi:"order"`
	// If set to true, a predefined rule is applied
	Predefined pulumi.BoolPtrOutput `pulumi:"predefined"`
	// Admin rank of the nat control policy rule
	Rank pulumi.IntPtrOutput `pulumi:"rank"`
	// The action the nat control policy rule takes when packets match the rule
	RedirectFqdn pulumi.StringPtrOutput `pulumi:"redirectFqdn"`
	// The action the nat control policy rule takes when packets match the rule
	RedirectIp pulumi.StringPtrOutput `pulumi:"redirectIp"`
	// The action the nat control policy rule takes when packets match the rule
	RedirectPort pulumi.IntPtrOutput `pulumi:"redirectPort"`
	// List of destination domain categories to which the rule applies
	ResCategories pulumi.StringArrayOutput `pulumi:"resCategories"`
	RuleId        pulumi.IntOutput         `pulumi:"ruleId"`
	// list of source ip groups
	SrcIpGroups NatControlRulesSrcIpGroupsPtrOutput `pulumi:"srcIpGroups"`
	// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
	// source IP address.
	SrcIps pulumi.StringArrayOutput `pulumi:"srcIps"`
	// list of source ipv6 groups
	SrcIpv6Groups NatControlRulesSrcIpv6GroupsPtrOutput `pulumi:"srcIpv6Groups"`
	// Determines whether the nat control policy rule is enabled or disabled
	State pulumi.StringPtrOutput `pulumi:"state"`
	// The time interval in which the nat control policy rule applies
	TimeWindows NatControlRulesTimeWindowsPtrOutput `pulumi:"timeWindows"`
	// list of users for which rule must be applied
	Users NatControlRulesUsersPtrOutput `pulumi:"users"`
}

// NewNatControlRules registers a new resource with the given unique name, arguments, and options.
func NewNatControlRules(ctx *pulumi.Context,
	name string, args *NatControlRulesArgs, opts ...pulumi.ResourceOption) (*NatControlRules, error) {
	if args == nil {
		args = &NatControlRulesArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NatControlRules
	err := ctx.RegisterResource("zia:index/natControlRules:NatControlRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNatControlRules gets an existing NatControlRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNatControlRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NatControlRulesState, opts ...pulumi.ResourceOption) (*NatControlRules, error) {
	var resource NatControlRules
	err := ctx.ReadResource("zia:index/natControlRules:NatControlRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NatControlRules resources.
type natControlRulesState struct {
	// If set to true, the default rule is applied
	DefaultRule *bool `pulumi:"defaultRule"`
	// list of departments for which rule must be applied
	Departments *NatControlRulesDepartments `pulumi:"departments"`
	// Additional information about the rule
	Description *string `pulumi:"description"`
	// Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
	DestAddresses []string `pulumi:"destAddresses"`
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	DestCountries    []string `pulumi:"destCountries"`
	DestIpCategories []string `pulumi:"destIpCategories"`
	// list of destination ip groups
	DestIpGroups *NatControlRulesDestIpGroups `pulumi:"destIpGroups"`
	// list of destination ipv6 groups
	DestIpv6Groups *NatControlRulesDestIpv6Groups `pulumi:"destIpv6Groups"`
	// This field is applicable for devices that are managed using Zscaler Client Connector.
	DeviceGroups *NatControlRulesDeviceGroups `pulumi:"deviceGroups"`
	// Name-ID pairs of devices for which rule must be applied.
	Devices           *NatControlRulesDevices `pulumi:"devices"`
	EnableFullLogging *bool                   `pulumi:"enableFullLogging"`
	// list of groups for which rule must be applied
	Groups *NatControlRulesGroups `pulumi:"groups"`
	// list of Labels that are applicable to the rule.
	Labels *NatControlRulesLabels `pulumi:"labels"`
	// list of locations groups
	LocationGroups *NatControlRulesLocationGroups `pulumi:"locationGroups"`
	// list of locations for which rule must be applied
	Locations *NatControlRulesLocations `pulumi:"locations"`
	// Name of the nat control policy rule
	Name *string `pulumi:"name"`
	// list of nw service groups
	NwServiceGroups *NatControlRulesNwServiceGroups `pulumi:"nwServiceGroups"`
	// list of nw services
	NwServices *NatControlRulesNwServices `pulumi:"nwServices"`
	// Rule order number. If omitted, the rule will be added to the end of the rule set.
	Order *int `pulumi:"order"`
	// If set to true, a predefined rule is applied
	Predefined *bool `pulumi:"predefined"`
	// Admin rank of the nat control policy rule
	Rank *int `pulumi:"rank"`
	// The action the nat control policy rule takes when packets match the rule
	RedirectFqdn *string `pulumi:"redirectFqdn"`
	// The action the nat control policy rule takes when packets match the rule
	RedirectIp *string `pulumi:"redirectIp"`
	// The action the nat control policy rule takes when packets match the rule
	RedirectPort *int `pulumi:"redirectPort"`
	// List of destination domain categories to which the rule applies
	ResCategories []string `pulumi:"resCategories"`
	RuleId        *int     `pulumi:"ruleId"`
	// list of source ip groups
	SrcIpGroups *NatControlRulesSrcIpGroups `pulumi:"srcIpGroups"`
	// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
	// source IP address.
	SrcIps []string `pulumi:"srcIps"`
	// list of source ipv6 groups
	SrcIpv6Groups *NatControlRulesSrcIpv6Groups `pulumi:"srcIpv6Groups"`
	// Determines whether the nat control policy rule is enabled or disabled
	State *string `pulumi:"state"`
	// The time interval in which the nat control policy rule applies
	TimeWindows *NatControlRulesTimeWindows `pulumi:"timeWindows"`
	// list of users for which rule must be applied
	Users *NatControlRulesUsers `pulumi:"users"`
}

type NatControlRulesState struct {
	// If set to true, the default rule is applied
	DefaultRule pulumi.BoolPtrInput
	// list of departments for which rule must be applied
	Departments NatControlRulesDepartmentsPtrInput
	// Additional information about the rule
	Description pulumi.StringPtrInput
	// Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
	DestAddresses pulumi.StringArrayInput
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	DestCountries    pulumi.StringArrayInput
	DestIpCategories pulumi.StringArrayInput
	// list of destination ip groups
	DestIpGroups NatControlRulesDestIpGroupsPtrInput
	// list of destination ipv6 groups
	DestIpv6Groups NatControlRulesDestIpv6GroupsPtrInput
	// This field is applicable for devices that are managed using Zscaler Client Connector.
	DeviceGroups NatControlRulesDeviceGroupsPtrInput
	// Name-ID pairs of devices for which rule must be applied.
	Devices           NatControlRulesDevicesPtrInput
	EnableFullLogging pulumi.BoolPtrInput
	// list of groups for which rule must be applied
	Groups NatControlRulesGroupsPtrInput
	// list of Labels that are applicable to the rule.
	Labels NatControlRulesLabelsPtrInput
	// list of locations groups
	LocationGroups NatControlRulesLocationGroupsPtrInput
	// list of locations for which rule must be applied
	Locations NatControlRulesLocationsPtrInput
	// Name of the nat control policy rule
	Name pulumi.StringPtrInput
	// list of nw service groups
	NwServiceGroups NatControlRulesNwServiceGroupsPtrInput
	// list of nw services
	NwServices NatControlRulesNwServicesPtrInput
	// Rule order number. If omitted, the rule will be added to the end of the rule set.
	Order pulumi.IntPtrInput
	// If set to true, a predefined rule is applied
	Predefined pulumi.BoolPtrInput
	// Admin rank of the nat control policy rule
	Rank pulumi.IntPtrInput
	// The action the nat control policy rule takes when packets match the rule
	RedirectFqdn pulumi.StringPtrInput
	// The action the nat control policy rule takes when packets match the rule
	RedirectIp pulumi.StringPtrInput
	// The action the nat control policy rule takes when packets match the rule
	RedirectPort pulumi.IntPtrInput
	// List of destination domain categories to which the rule applies
	ResCategories pulumi.StringArrayInput
	RuleId        pulumi.IntPtrInput
	// list of source ip groups
	SrcIpGroups NatControlRulesSrcIpGroupsPtrInput
	// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
	// source IP address.
	SrcIps pulumi.StringArrayInput
	// list of source ipv6 groups
	SrcIpv6Groups NatControlRulesSrcIpv6GroupsPtrInput
	// Determines whether the nat control policy rule is enabled or disabled
	State pulumi.StringPtrInput
	// The time interval in which the nat control policy rule applies
	TimeWindows NatControlRulesTimeWindowsPtrInput
	// list of users for which rule must be applied
	Users NatControlRulesUsersPtrInput
}

func (NatControlRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*natControlRulesState)(nil)).Elem()
}

type natControlRulesArgs struct {
	// If set to true, the default rule is applied
	DefaultRule *bool `pulumi:"defaultRule"`
	// list of departments for which rule must be applied
	Departments *NatControlRulesDepartments `pulumi:"departments"`
	// Additional information about the rule
	Description *string `pulumi:"description"`
	// Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
	DestAddresses []string `pulumi:"destAddresses"`
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	DestCountries    []string `pulumi:"destCountries"`
	DestIpCategories []string `pulumi:"destIpCategories"`
	// list of destination ip groups
	DestIpGroups *NatControlRulesDestIpGroups `pulumi:"destIpGroups"`
	// list of destination ipv6 groups
	DestIpv6Groups *NatControlRulesDestIpv6Groups `pulumi:"destIpv6Groups"`
	// This field is applicable for devices that are managed using Zscaler Client Connector.
	DeviceGroups *NatControlRulesDeviceGroups `pulumi:"deviceGroups"`
	// Name-ID pairs of devices for which rule must be applied.
	Devices           *NatControlRulesDevices `pulumi:"devices"`
	EnableFullLogging *bool                   `pulumi:"enableFullLogging"`
	// list of groups for which rule must be applied
	Groups *NatControlRulesGroups `pulumi:"groups"`
	// list of Labels that are applicable to the rule.
	Labels *NatControlRulesLabels `pulumi:"labels"`
	// list of locations groups
	LocationGroups *NatControlRulesLocationGroups `pulumi:"locationGroups"`
	// list of locations for which rule must be applied
	Locations *NatControlRulesLocations `pulumi:"locations"`
	// Name of the nat control policy rule
	Name *string `pulumi:"name"`
	// list of nw service groups
	NwServiceGroups *NatControlRulesNwServiceGroups `pulumi:"nwServiceGroups"`
	// list of nw services
	NwServices *NatControlRulesNwServices `pulumi:"nwServices"`
	// Rule order number. If omitted, the rule will be added to the end of the rule set.
	Order *int `pulumi:"order"`
	// If set to true, a predefined rule is applied
	Predefined *bool `pulumi:"predefined"`
	// Admin rank of the nat control policy rule
	Rank *int `pulumi:"rank"`
	// The action the nat control policy rule takes when packets match the rule
	RedirectFqdn *string `pulumi:"redirectFqdn"`
	// The action the nat control policy rule takes when packets match the rule
	RedirectIp *string `pulumi:"redirectIp"`
	// The action the nat control policy rule takes when packets match the rule
	RedirectPort *int `pulumi:"redirectPort"`
	// List of destination domain categories to which the rule applies
	ResCategories []string `pulumi:"resCategories"`
	// list of source ip groups
	SrcIpGroups *NatControlRulesSrcIpGroups `pulumi:"srcIpGroups"`
	// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
	// source IP address.
	SrcIps []string `pulumi:"srcIps"`
	// list of source ipv6 groups
	SrcIpv6Groups *NatControlRulesSrcIpv6Groups `pulumi:"srcIpv6Groups"`
	// Determines whether the nat control policy rule is enabled or disabled
	State *string `pulumi:"state"`
	// The time interval in which the nat control policy rule applies
	TimeWindows *NatControlRulesTimeWindows `pulumi:"timeWindows"`
	// list of users for which rule must be applied
	Users *NatControlRulesUsers `pulumi:"users"`
}

// The set of arguments for constructing a NatControlRules resource.
type NatControlRulesArgs struct {
	// If set to true, the default rule is applied
	DefaultRule pulumi.BoolPtrInput
	// list of departments for which rule must be applied
	Departments NatControlRulesDepartmentsPtrInput
	// Additional information about the rule
	Description pulumi.StringPtrInput
	// Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
	DestAddresses pulumi.StringArrayInput
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	DestCountries    pulumi.StringArrayInput
	DestIpCategories pulumi.StringArrayInput
	// list of destination ip groups
	DestIpGroups NatControlRulesDestIpGroupsPtrInput
	// list of destination ipv6 groups
	DestIpv6Groups NatControlRulesDestIpv6GroupsPtrInput
	// This field is applicable for devices that are managed using Zscaler Client Connector.
	DeviceGroups NatControlRulesDeviceGroupsPtrInput
	// Name-ID pairs of devices for which rule must be applied.
	Devices           NatControlRulesDevicesPtrInput
	EnableFullLogging pulumi.BoolPtrInput
	// list of groups for which rule must be applied
	Groups NatControlRulesGroupsPtrInput
	// list of Labels that are applicable to the rule.
	Labels NatControlRulesLabelsPtrInput
	// list of locations groups
	LocationGroups NatControlRulesLocationGroupsPtrInput
	// list of locations for which rule must be applied
	Locations NatControlRulesLocationsPtrInput
	// Name of the nat control policy rule
	Name pulumi.StringPtrInput
	// list of nw service groups
	NwServiceGroups NatControlRulesNwServiceGroupsPtrInput
	// list of nw services
	NwServices NatControlRulesNwServicesPtrInput
	// Rule order number. If omitted, the rule will be added to the end of the rule set.
	Order pulumi.IntPtrInput
	// If set to true, a predefined rule is applied
	Predefined pulumi.BoolPtrInput
	// Admin rank of the nat control policy rule
	Rank pulumi.IntPtrInput
	// The action the nat control policy rule takes when packets match the rule
	RedirectFqdn pulumi.StringPtrInput
	// The action the nat control policy rule takes when packets match the rule
	RedirectIp pulumi.StringPtrInput
	// The action the nat control policy rule takes when packets match the rule
	RedirectPort pulumi.IntPtrInput
	// List of destination domain categories to which the rule applies
	ResCategories pulumi.StringArrayInput
	// list of source ip groups
	SrcIpGroups NatControlRulesSrcIpGroupsPtrInput
	// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
	// source IP address.
	SrcIps pulumi.StringArrayInput
	// list of source ipv6 groups
	SrcIpv6Groups NatControlRulesSrcIpv6GroupsPtrInput
	// Determines whether the nat control policy rule is enabled or disabled
	State pulumi.StringPtrInput
	// The time interval in which the nat control policy rule applies
	TimeWindows NatControlRulesTimeWindowsPtrInput
	// list of users for which rule must be applied
	Users NatControlRulesUsersPtrInput
}

func (NatControlRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*natControlRulesArgs)(nil)).Elem()
}

type NatControlRulesInput interface {
	pulumi.Input

	ToNatControlRulesOutput() NatControlRulesOutput
	ToNatControlRulesOutputWithContext(ctx context.Context) NatControlRulesOutput
}

func (*NatControlRules) ElementType() reflect.Type {
	return reflect.TypeOf((**NatControlRules)(nil)).Elem()
}

func (i *NatControlRules) ToNatControlRulesOutput() NatControlRulesOutput {
	return i.ToNatControlRulesOutputWithContext(context.Background())
}

func (i *NatControlRules) ToNatControlRulesOutputWithContext(ctx context.Context) NatControlRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatControlRulesOutput)
}

// NatControlRulesArrayInput is an input type that accepts NatControlRulesArray and NatControlRulesArrayOutput values.
// You can construct a concrete instance of `NatControlRulesArrayInput` via:
//
//	NatControlRulesArray{ NatControlRulesArgs{...} }
type NatControlRulesArrayInput interface {
	pulumi.Input

	ToNatControlRulesArrayOutput() NatControlRulesArrayOutput
	ToNatControlRulesArrayOutputWithContext(context.Context) NatControlRulesArrayOutput
}

type NatControlRulesArray []NatControlRulesInput

func (NatControlRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatControlRules)(nil)).Elem()
}

func (i NatControlRulesArray) ToNatControlRulesArrayOutput() NatControlRulesArrayOutput {
	return i.ToNatControlRulesArrayOutputWithContext(context.Background())
}

func (i NatControlRulesArray) ToNatControlRulesArrayOutputWithContext(ctx context.Context) NatControlRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatControlRulesArrayOutput)
}

// NatControlRulesMapInput is an input type that accepts NatControlRulesMap and NatControlRulesMapOutput values.
// You can construct a concrete instance of `NatControlRulesMapInput` via:
//
//	NatControlRulesMap{ "key": NatControlRulesArgs{...} }
type NatControlRulesMapInput interface {
	pulumi.Input

	ToNatControlRulesMapOutput() NatControlRulesMapOutput
	ToNatControlRulesMapOutputWithContext(context.Context) NatControlRulesMapOutput
}

type NatControlRulesMap map[string]NatControlRulesInput

func (NatControlRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatControlRules)(nil)).Elem()
}

func (i NatControlRulesMap) ToNatControlRulesMapOutput() NatControlRulesMapOutput {
	return i.ToNatControlRulesMapOutputWithContext(context.Background())
}

func (i NatControlRulesMap) ToNatControlRulesMapOutputWithContext(ctx context.Context) NatControlRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NatControlRulesMapOutput)
}

type NatControlRulesOutput struct{ *pulumi.OutputState }

func (NatControlRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NatControlRules)(nil)).Elem()
}

func (o NatControlRulesOutput) ToNatControlRulesOutput() NatControlRulesOutput {
	return o
}

func (o NatControlRulesOutput) ToNatControlRulesOutputWithContext(ctx context.Context) NatControlRulesOutput {
	return o
}

// If set to true, the default rule is applied
func (o NatControlRulesOutput) DefaultRule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.BoolPtrOutput { return v.DefaultRule }).(pulumi.BoolPtrOutput)
}

// list of departments for which rule must be applied
func (o NatControlRulesOutput) Departments() NatControlRulesDepartmentsPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesDepartmentsPtrOutput { return v.Departments }).(NatControlRulesDepartmentsPtrOutput)
}

// Additional information about the rule
func (o NatControlRulesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
func (o NatControlRulesOutput) DestAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.StringArrayOutput { return v.DestAddresses }).(pulumi.StringArrayOutput)
}

// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
// countries.
func (o NatControlRulesOutput) DestCountries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.StringArrayOutput { return v.DestCountries }).(pulumi.StringArrayOutput)
}

func (o NatControlRulesOutput) DestIpCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.StringArrayOutput { return v.DestIpCategories }).(pulumi.StringArrayOutput)
}

// list of destination ip groups
func (o NatControlRulesOutput) DestIpGroups() NatControlRulesDestIpGroupsPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesDestIpGroupsPtrOutput { return v.DestIpGroups }).(NatControlRulesDestIpGroupsPtrOutput)
}

// list of destination ipv6 groups
func (o NatControlRulesOutput) DestIpv6Groups() NatControlRulesDestIpv6GroupsPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesDestIpv6GroupsPtrOutput { return v.DestIpv6Groups }).(NatControlRulesDestIpv6GroupsPtrOutput)
}

// This field is applicable for devices that are managed using Zscaler Client Connector.
func (o NatControlRulesOutput) DeviceGroups() NatControlRulesDeviceGroupsPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesDeviceGroupsPtrOutput { return v.DeviceGroups }).(NatControlRulesDeviceGroupsPtrOutput)
}

// Name-ID pairs of devices for which rule must be applied.
func (o NatControlRulesOutput) Devices() NatControlRulesDevicesPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesDevicesPtrOutput { return v.Devices }).(NatControlRulesDevicesPtrOutput)
}

func (o NatControlRulesOutput) EnableFullLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.BoolPtrOutput { return v.EnableFullLogging }).(pulumi.BoolPtrOutput)
}

// list of groups for which rule must be applied
func (o NatControlRulesOutput) Groups() NatControlRulesGroupsPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesGroupsPtrOutput { return v.Groups }).(NatControlRulesGroupsPtrOutput)
}

// list of Labels that are applicable to the rule.
func (o NatControlRulesOutput) Labels() NatControlRulesLabelsPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesLabelsPtrOutput { return v.Labels }).(NatControlRulesLabelsPtrOutput)
}

// list of locations groups
func (o NatControlRulesOutput) LocationGroups() NatControlRulesLocationGroupsPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesLocationGroupsPtrOutput { return v.LocationGroups }).(NatControlRulesLocationGroupsPtrOutput)
}

// list of locations for which rule must be applied
func (o NatControlRulesOutput) Locations() NatControlRulesLocationsPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesLocationsPtrOutput { return v.Locations }).(NatControlRulesLocationsPtrOutput)
}

// Name of the nat control policy rule
func (o NatControlRulesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// list of nw service groups
func (o NatControlRulesOutput) NwServiceGroups() NatControlRulesNwServiceGroupsPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesNwServiceGroupsPtrOutput { return v.NwServiceGroups }).(NatControlRulesNwServiceGroupsPtrOutput)
}

// list of nw services
func (o NatControlRulesOutput) NwServices() NatControlRulesNwServicesPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesNwServicesPtrOutput { return v.NwServices }).(NatControlRulesNwServicesPtrOutput)
}

// Rule order number. If omitted, the rule will be added to the end of the rule set.
func (o NatControlRulesOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// If set to true, a predefined rule is applied
func (o NatControlRulesOutput) Predefined() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.BoolPtrOutput { return v.Predefined }).(pulumi.BoolPtrOutput)
}

// Admin rank of the nat control policy rule
func (o NatControlRulesOutput) Rank() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.IntPtrOutput { return v.Rank }).(pulumi.IntPtrOutput)
}

// The action the nat control policy rule takes when packets match the rule
func (o NatControlRulesOutput) RedirectFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.StringPtrOutput { return v.RedirectFqdn }).(pulumi.StringPtrOutput)
}

// The action the nat control policy rule takes when packets match the rule
func (o NatControlRulesOutput) RedirectIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.StringPtrOutput { return v.RedirectIp }).(pulumi.StringPtrOutput)
}

// The action the nat control policy rule takes when packets match the rule
func (o NatControlRulesOutput) RedirectPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.IntPtrOutput { return v.RedirectPort }).(pulumi.IntPtrOutput)
}

// List of destination domain categories to which the rule applies
func (o NatControlRulesOutput) ResCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.StringArrayOutput { return v.ResCategories }).(pulumi.StringArrayOutput)
}

func (o NatControlRulesOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.IntOutput { return v.RuleId }).(pulumi.IntOutput)
}

// list of source ip groups
func (o NatControlRulesOutput) SrcIpGroups() NatControlRulesSrcIpGroupsPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesSrcIpGroupsPtrOutput { return v.SrcIpGroups }).(NatControlRulesSrcIpGroupsPtrOutput)
}

// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
// source IP address.
func (o NatControlRulesOutput) SrcIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.StringArrayOutput { return v.SrcIps }).(pulumi.StringArrayOutput)
}

// list of source ipv6 groups
func (o NatControlRulesOutput) SrcIpv6Groups() NatControlRulesSrcIpv6GroupsPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesSrcIpv6GroupsPtrOutput { return v.SrcIpv6Groups }).(NatControlRulesSrcIpv6GroupsPtrOutput)
}

// Determines whether the nat control policy rule is enabled or disabled
func (o NatControlRulesOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NatControlRules) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// The time interval in which the nat control policy rule applies
func (o NatControlRulesOutput) TimeWindows() NatControlRulesTimeWindowsPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesTimeWindowsPtrOutput { return v.TimeWindows }).(NatControlRulesTimeWindowsPtrOutput)
}

// list of users for which rule must be applied
func (o NatControlRulesOutput) Users() NatControlRulesUsersPtrOutput {
	return o.ApplyT(func(v *NatControlRules) NatControlRulesUsersPtrOutput { return v.Users }).(NatControlRulesUsersPtrOutput)
}

type NatControlRulesArrayOutput struct{ *pulumi.OutputState }

func (NatControlRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NatControlRules)(nil)).Elem()
}

func (o NatControlRulesArrayOutput) ToNatControlRulesArrayOutput() NatControlRulesArrayOutput {
	return o
}

func (o NatControlRulesArrayOutput) ToNatControlRulesArrayOutputWithContext(ctx context.Context) NatControlRulesArrayOutput {
	return o
}

func (o NatControlRulesArrayOutput) Index(i pulumi.IntInput) NatControlRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NatControlRules {
		return vs[0].([]*NatControlRules)[vs[1].(int)]
	}).(NatControlRulesOutput)
}

type NatControlRulesMapOutput struct{ *pulumi.OutputState }

func (NatControlRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NatControlRules)(nil)).Elem()
}

func (o NatControlRulesMapOutput) ToNatControlRulesMapOutput() NatControlRulesMapOutput {
	return o
}

func (o NatControlRulesMapOutput) ToNatControlRulesMapOutputWithContext(ctx context.Context) NatControlRulesMapOutput {
	return o
}

func (o NatControlRulesMapOutput) MapIndex(k pulumi.StringInput) NatControlRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NatControlRules {
		return vs[0].(map[string]*NatControlRules)[vs[1].(string)]
	}).(NatControlRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NatControlRulesInput)(nil)).Elem(), &NatControlRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatControlRulesArrayInput)(nil)).Elem(), NatControlRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NatControlRulesMapInput)(nil)).Elem(), NatControlRulesMap{})
	pulumi.RegisterOutputType(NatControlRulesOutput{})
	pulumi.RegisterOutputType(NatControlRulesArrayOutput{})
	pulumi.RegisterOutputType(NatControlRulesMapOutput{})
}
