// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// The **zia_dlp_notification_templates** resource allows the creation and management of ZIA DLP Notification Templates in the Zscaler Internet Access cloud or via the API.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"fmt"
//	"os"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//
// )
//
//	func readFileOrPanic(path string) pulumi.StringPtrInput {
//		data, err := os.ReadFile(path)
//		if err != nil {
//			panic(err.Error())
//		}
//		return pulumi.String(string(data))
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.NewDLPNotificationTemplates(ctx, "example", &zia.DLPNotificationTemplatesArgs{
//				Subject:          pulumi.String(fmt.Sprintf("DLP Violation: %v %v", TRANSACTION_ID, ENGINES)),
//				AttachContent:    pulumi.Bool(true),
//				TlsEnabled:       pulumi.Bool(true),
//				HtmlMessage:      readFileOrPanic("./index.html"),
//				PlainTextMessage: readFileOrPanic("./dlp.txt"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_dlp_notification_templates** can be imported by using `<TEMPLATE ID>` or `<TEMPLATE NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/dLPNotificationTemplates:DLPNotificationTemplates example <template_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zia:index/dLPNotificationTemplates:DLPNotificationTemplates example <template_name>
// ```
type DLPNotificationTemplates struct {
	pulumi.CustomResourceState

	// If set to true, the content that is violation is attached to the DLP notification email.
	AttachContent pulumi.BoolPtrOutput `pulumi:"attachContent"`
	// The template for the HTML message body that must be displayed in the DLP notification email.
	HtmlMessage pulumi.StringOutput `pulumi:"htmlMessage"`
	// The DLP policy rule name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
	PlainTextMessage pulumi.StringOutput `pulumi:"plainTextMessage"`
	// The Subject line that is displayed within the DLP notification email.
	Subject pulumi.StringOutput `pulumi:"subject"`
	// The unique identifier for a DLP notification template
	TemplateId pulumi.IntOutput `pulumi:"templateId"`
	// If set to true, the content that is violation is attached to the DLP notification email.
	TlsEnabled pulumi.BoolPtrOutput `pulumi:"tlsEnabled"`
}

// NewDLPNotificationTemplates registers a new resource with the given unique name, arguments, and options.
func NewDLPNotificationTemplates(ctx *pulumi.Context,
	name string, args *DLPNotificationTemplatesArgs, opts ...pulumi.ResourceOption) (*DLPNotificationTemplates, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HtmlMessage == nil {
		return nil, errors.New("invalid value for required argument 'HtmlMessage'")
	}
	if args.PlainTextMessage == nil {
		return nil, errors.New("invalid value for required argument 'PlainTextMessage'")
	}
	if args.Subject == nil {
		return nil, errors.New("invalid value for required argument 'Subject'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DLPNotificationTemplates
	err := ctx.RegisterResource("zia:index/dLPNotificationTemplates:DLPNotificationTemplates", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDLPNotificationTemplates gets an existing DLPNotificationTemplates resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDLPNotificationTemplates(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DLPNotificationTemplatesState, opts ...pulumi.ResourceOption) (*DLPNotificationTemplates, error) {
	var resource DLPNotificationTemplates
	err := ctx.ReadResource("zia:index/dLPNotificationTemplates:DLPNotificationTemplates", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DLPNotificationTemplates resources.
type dlpnotificationTemplatesState struct {
	// If set to true, the content that is violation is attached to the DLP notification email.
	AttachContent *bool `pulumi:"attachContent"`
	// The template for the HTML message body that must be displayed in the DLP notification email.
	HtmlMessage *string `pulumi:"htmlMessage"`
	// The DLP policy rule name.
	Name *string `pulumi:"name"`
	// The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
	PlainTextMessage *string `pulumi:"plainTextMessage"`
	// The Subject line that is displayed within the DLP notification email.
	Subject *string `pulumi:"subject"`
	// The unique identifier for a DLP notification template
	TemplateId *int `pulumi:"templateId"`
	// If set to true, the content that is violation is attached to the DLP notification email.
	TlsEnabled *bool `pulumi:"tlsEnabled"`
}

type DLPNotificationTemplatesState struct {
	// If set to true, the content that is violation is attached to the DLP notification email.
	AttachContent pulumi.BoolPtrInput
	// The template for the HTML message body that must be displayed in the DLP notification email.
	HtmlMessage pulumi.StringPtrInput
	// The DLP policy rule name.
	Name pulumi.StringPtrInput
	// The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
	PlainTextMessage pulumi.StringPtrInput
	// The Subject line that is displayed within the DLP notification email.
	Subject pulumi.StringPtrInput
	// The unique identifier for a DLP notification template
	TemplateId pulumi.IntPtrInput
	// If set to true, the content that is violation is attached to the DLP notification email.
	TlsEnabled pulumi.BoolPtrInput
}

func (DLPNotificationTemplatesState) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpnotificationTemplatesState)(nil)).Elem()
}

type dlpnotificationTemplatesArgs struct {
	// If set to true, the content that is violation is attached to the DLP notification email.
	AttachContent *bool `pulumi:"attachContent"`
	// The template for the HTML message body that must be displayed in the DLP notification email.
	HtmlMessage string `pulumi:"htmlMessage"`
	// The DLP policy rule name.
	Name *string `pulumi:"name"`
	// The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
	PlainTextMessage string `pulumi:"plainTextMessage"`
	// The Subject line that is displayed within the DLP notification email.
	Subject string `pulumi:"subject"`
	// If set to true, the content that is violation is attached to the DLP notification email.
	TlsEnabled *bool `pulumi:"tlsEnabled"`
}

// The set of arguments for constructing a DLPNotificationTemplates resource.
type DLPNotificationTemplatesArgs struct {
	// If set to true, the content that is violation is attached to the DLP notification email.
	AttachContent pulumi.BoolPtrInput
	// The template for the HTML message body that must be displayed in the DLP notification email.
	HtmlMessage pulumi.StringInput
	// The DLP policy rule name.
	Name pulumi.StringPtrInput
	// The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
	PlainTextMessage pulumi.StringInput
	// The Subject line that is displayed within the DLP notification email.
	Subject pulumi.StringInput
	// If set to true, the content that is violation is attached to the DLP notification email.
	TlsEnabled pulumi.BoolPtrInput
}

func (DLPNotificationTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpnotificationTemplatesArgs)(nil)).Elem()
}

type DLPNotificationTemplatesInput interface {
	pulumi.Input

	ToDLPNotificationTemplatesOutput() DLPNotificationTemplatesOutput
	ToDLPNotificationTemplatesOutputWithContext(ctx context.Context) DLPNotificationTemplatesOutput
}

func (*DLPNotificationTemplates) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPNotificationTemplates)(nil)).Elem()
}

func (i *DLPNotificationTemplates) ToDLPNotificationTemplatesOutput() DLPNotificationTemplatesOutput {
	return i.ToDLPNotificationTemplatesOutputWithContext(context.Background())
}

func (i *DLPNotificationTemplates) ToDLPNotificationTemplatesOutputWithContext(ctx context.Context) DLPNotificationTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPNotificationTemplatesOutput)
}

// DLPNotificationTemplatesArrayInput is an input type that accepts DLPNotificationTemplatesArray and DLPNotificationTemplatesArrayOutput values.
// You can construct a concrete instance of `DLPNotificationTemplatesArrayInput` via:
//
//	DLPNotificationTemplatesArray{ DLPNotificationTemplatesArgs{...} }
type DLPNotificationTemplatesArrayInput interface {
	pulumi.Input

	ToDLPNotificationTemplatesArrayOutput() DLPNotificationTemplatesArrayOutput
	ToDLPNotificationTemplatesArrayOutputWithContext(context.Context) DLPNotificationTemplatesArrayOutput
}

type DLPNotificationTemplatesArray []DLPNotificationTemplatesInput

func (DLPNotificationTemplatesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DLPNotificationTemplates)(nil)).Elem()
}

func (i DLPNotificationTemplatesArray) ToDLPNotificationTemplatesArrayOutput() DLPNotificationTemplatesArrayOutput {
	return i.ToDLPNotificationTemplatesArrayOutputWithContext(context.Background())
}

func (i DLPNotificationTemplatesArray) ToDLPNotificationTemplatesArrayOutputWithContext(ctx context.Context) DLPNotificationTemplatesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPNotificationTemplatesArrayOutput)
}

// DLPNotificationTemplatesMapInput is an input type that accepts DLPNotificationTemplatesMap and DLPNotificationTemplatesMapOutput values.
// You can construct a concrete instance of `DLPNotificationTemplatesMapInput` via:
//
//	DLPNotificationTemplatesMap{ "key": DLPNotificationTemplatesArgs{...} }
type DLPNotificationTemplatesMapInput interface {
	pulumi.Input

	ToDLPNotificationTemplatesMapOutput() DLPNotificationTemplatesMapOutput
	ToDLPNotificationTemplatesMapOutputWithContext(context.Context) DLPNotificationTemplatesMapOutput
}

type DLPNotificationTemplatesMap map[string]DLPNotificationTemplatesInput

func (DLPNotificationTemplatesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DLPNotificationTemplates)(nil)).Elem()
}

func (i DLPNotificationTemplatesMap) ToDLPNotificationTemplatesMapOutput() DLPNotificationTemplatesMapOutput {
	return i.ToDLPNotificationTemplatesMapOutputWithContext(context.Background())
}

func (i DLPNotificationTemplatesMap) ToDLPNotificationTemplatesMapOutputWithContext(ctx context.Context) DLPNotificationTemplatesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPNotificationTemplatesMapOutput)
}

type DLPNotificationTemplatesOutput struct{ *pulumi.OutputState }

func (DLPNotificationTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPNotificationTemplates)(nil)).Elem()
}

func (o DLPNotificationTemplatesOutput) ToDLPNotificationTemplatesOutput() DLPNotificationTemplatesOutput {
	return o
}

func (o DLPNotificationTemplatesOutput) ToDLPNotificationTemplatesOutputWithContext(ctx context.Context) DLPNotificationTemplatesOutput {
	return o
}

// If set to true, the content that is violation is attached to the DLP notification email.
func (o DLPNotificationTemplatesOutput) AttachContent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DLPNotificationTemplates) pulumi.BoolPtrOutput { return v.AttachContent }).(pulumi.BoolPtrOutput)
}

// The template for the HTML message body that must be displayed in the DLP notification email.
func (o DLPNotificationTemplatesOutput) HtmlMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPNotificationTemplates) pulumi.StringOutput { return v.HtmlMessage }).(pulumi.StringOutput)
}

// The DLP policy rule name.
func (o DLPNotificationTemplatesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPNotificationTemplates) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
func (o DLPNotificationTemplatesOutput) PlainTextMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPNotificationTemplates) pulumi.StringOutput { return v.PlainTextMessage }).(pulumi.StringOutput)
}

// The Subject line that is displayed within the DLP notification email.
func (o DLPNotificationTemplatesOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPNotificationTemplates) pulumi.StringOutput { return v.Subject }).(pulumi.StringOutput)
}

// The unique identifier for a DLP notification template
func (o DLPNotificationTemplatesOutput) TemplateId() pulumi.IntOutput {
	return o.ApplyT(func(v *DLPNotificationTemplates) pulumi.IntOutput { return v.TemplateId }).(pulumi.IntOutput)
}

// If set to true, the content that is violation is attached to the DLP notification email.
func (o DLPNotificationTemplatesOutput) TlsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DLPNotificationTemplates) pulumi.BoolPtrOutput { return v.TlsEnabled }).(pulumi.BoolPtrOutput)
}

type DLPNotificationTemplatesArrayOutput struct{ *pulumi.OutputState }

func (DLPNotificationTemplatesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DLPNotificationTemplates)(nil)).Elem()
}

func (o DLPNotificationTemplatesArrayOutput) ToDLPNotificationTemplatesArrayOutput() DLPNotificationTemplatesArrayOutput {
	return o
}

func (o DLPNotificationTemplatesArrayOutput) ToDLPNotificationTemplatesArrayOutputWithContext(ctx context.Context) DLPNotificationTemplatesArrayOutput {
	return o
}

func (o DLPNotificationTemplatesArrayOutput) Index(i pulumi.IntInput) DLPNotificationTemplatesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DLPNotificationTemplates {
		return vs[0].([]*DLPNotificationTemplates)[vs[1].(int)]
	}).(DLPNotificationTemplatesOutput)
}

type DLPNotificationTemplatesMapOutput struct{ *pulumi.OutputState }

func (DLPNotificationTemplatesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DLPNotificationTemplates)(nil)).Elem()
}

func (o DLPNotificationTemplatesMapOutput) ToDLPNotificationTemplatesMapOutput() DLPNotificationTemplatesMapOutput {
	return o
}

func (o DLPNotificationTemplatesMapOutput) ToDLPNotificationTemplatesMapOutputWithContext(ctx context.Context) DLPNotificationTemplatesMapOutput {
	return o
}

func (o DLPNotificationTemplatesMapOutput) MapIndex(k pulumi.StringInput) DLPNotificationTemplatesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DLPNotificationTemplates {
		return vs[0].(map[string]*DLPNotificationTemplates)[vs[1].(string)]
	}).(DLPNotificationTemplatesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DLPNotificationTemplatesInput)(nil)).Elem(), &DLPNotificationTemplates{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPNotificationTemplatesArrayInput)(nil)).Elem(), DLPNotificationTemplatesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPNotificationTemplatesMapInput)(nil)).Elem(), DLPNotificationTemplatesMap{})
	pulumi.RegisterOutputType(DLPNotificationTemplatesOutput{})
	pulumi.RegisterOutputType(DLPNotificationTemplatesArrayOutput{})
	pulumi.RegisterOutputType(DLPNotificationTemplatesMapOutput{})
}
