// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

func GetTrafficForwardingGREInternalIPRange(ctx *pulumi.Context, args *GetTrafficForwardingGREInternalIPRangeArgs, opts ...pulumi.InvokeOption) (*GetTrafficForwardingGREInternalIPRangeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTrafficForwardingGREInternalIPRangeResult
	err := ctx.Invoke("zia:index/getTrafficForwardingGREInternalIPRange:getTrafficForwardingGREInternalIPRange", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTrafficForwardingGREInternalIPRange.
type GetTrafficForwardingGREInternalIPRangeArgs struct {
	RequiredCount *int `pulumi:"requiredCount"`
}

// A collection of values returned by getTrafficForwardingGREInternalIPRange.
type GetTrafficForwardingGREInternalIPRangeResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id            string                                       `pulumi:"id"`
	Lists         []GetTrafficForwardingGREInternalIPRangeList `pulumi:"lists"`
	RequiredCount *int                                         `pulumi:"requiredCount"`
}

func GetTrafficForwardingGREInternalIPRangeOutput(ctx *pulumi.Context, args GetTrafficForwardingGREInternalIPRangeOutputArgs, opts ...pulumi.InvokeOption) GetTrafficForwardingGREInternalIPRangeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTrafficForwardingGREInternalIPRangeResult, error) {
			args := v.(GetTrafficForwardingGREInternalIPRangeArgs)
			r, err := GetTrafficForwardingGREInternalIPRange(ctx, &args, opts...)
			var s GetTrafficForwardingGREInternalIPRangeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetTrafficForwardingGREInternalIPRangeResultOutput)
}

// A collection of arguments for invoking getTrafficForwardingGREInternalIPRange.
type GetTrafficForwardingGREInternalIPRangeOutputArgs struct {
	RequiredCount pulumi.IntPtrInput `pulumi:"requiredCount"`
}

func (GetTrafficForwardingGREInternalIPRangeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficForwardingGREInternalIPRangeArgs)(nil)).Elem()
}

// A collection of values returned by getTrafficForwardingGREInternalIPRange.
type GetTrafficForwardingGREInternalIPRangeResultOutput struct{ *pulumi.OutputState }

func (GetTrafficForwardingGREInternalIPRangeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficForwardingGREInternalIPRangeResult)(nil)).Elem()
}

func (o GetTrafficForwardingGREInternalIPRangeResultOutput) ToGetTrafficForwardingGREInternalIPRangeResultOutput() GetTrafficForwardingGREInternalIPRangeResultOutput {
	return o
}

func (o GetTrafficForwardingGREInternalIPRangeResultOutput) ToGetTrafficForwardingGREInternalIPRangeResultOutputWithContext(ctx context.Context) GetTrafficForwardingGREInternalIPRangeResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetTrafficForwardingGREInternalIPRangeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrafficForwardingGREInternalIPRangeResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetTrafficForwardingGREInternalIPRangeResultOutput) Lists() GetTrafficForwardingGREInternalIPRangeListArrayOutput {
	return o.ApplyT(func(v GetTrafficForwardingGREInternalIPRangeResult) []GetTrafficForwardingGREInternalIPRangeList {
		return v.Lists
	}).(GetTrafficForwardingGREInternalIPRangeListArrayOutput)
}

func (o GetTrafficForwardingGREInternalIPRangeResultOutput) RequiredCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetTrafficForwardingGREInternalIPRangeResult) *int { return v.RequiredCount }).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTrafficForwardingGREInternalIPRangeResultOutput{})
}
