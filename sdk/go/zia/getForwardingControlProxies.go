// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/about-third-party-proxies)
// * [API documentation](https://help.zscaler.com/zia/forwarding-control-policy#/proxies-get)
//
// Use the **zia_forwarding_control_proxies** data source to get information about a third-party proxy service available in the Zscaler Internet Access.
//
// ## Example Usage
//
// ### Retrieve By Name
//
// ### Retrieve By ID
func LookupForwardingControlProxies(ctx *pulumi.Context, args *LookupForwardingControlProxiesArgs, opts ...pulumi.InvokeOption) (*LookupForwardingControlProxiesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupForwardingControlProxiesResult
	err := ctx.Invoke("zia:index/getForwardingControlProxies:getForwardingControlProxies", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getForwardingControlProxies.
type LookupForwardingControlProxiesArgs struct {
	// Unique identifier for the third-party proxy services
	Id *int `pulumi:"id"`
	// Proxy name for the third-party proxy services
	Name *string `pulumi:"name"`
}

// A collection of values returned by getForwardingControlProxies.
type LookupForwardingControlProxiesResult struct {
	// (String) The IP address or the FQDN of the third-party proxy service
	Address string `pulumi:"address"`
	// (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
	Base64EncodeXauHeader bool `pulumi:"base64EncodeXauHeader"`
	// (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
	Certs []GetForwardingControlProxiesCert `pulumi:"certs"`
	// (String) Additional notes or information
	Description string `pulumi:"description"`
	// (Integer) Identifier that uniquely identifies the certificate
	Id int `pulumi:"id"`
	// (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
	InsertXauHeader  bool                                        `pulumi:"insertXauHeader"`
	LastModifiedBies []GetForwardingControlProxiesLastModifiedBy `pulumi:"lastModifiedBies"`
	LastModifiedTime int                                         `pulumi:"lastModifiedTime"`
	Name             string                                      `pulumi:"name"`
	// (integer) The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
	Port int `pulumi:"port"`
	// (String) Gateway type. Returned values: `PROXYCHAIN`, `ZIA`, `ECSELF`
	Type string `pulumi:"type"`
}

func LookupForwardingControlProxiesOutput(ctx *pulumi.Context, args LookupForwardingControlProxiesOutputArgs, opts ...pulumi.InvokeOption) LookupForwardingControlProxiesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupForwardingControlProxiesResultOutput, error) {
			args := v.(LookupForwardingControlProxiesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("zia:index/getForwardingControlProxies:getForwardingControlProxies", args, LookupForwardingControlProxiesResultOutput{}, options).(LookupForwardingControlProxiesResultOutput), nil
		}).(LookupForwardingControlProxiesResultOutput)
}

// A collection of arguments for invoking getForwardingControlProxies.
type LookupForwardingControlProxiesOutputArgs struct {
	// Unique identifier for the third-party proxy services
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Proxy name for the third-party proxy services
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupForwardingControlProxiesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupForwardingControlProxiesArgs)(nil)).Elem()
}

// A collection of values returned by getForwardingControlProxies.
type LookupForwardingControlProxiesResultOutput struct{ *pulumi.OutputState }

func (LookupForwardingControlProxiesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupForwardingControlProxiesResult)(nil)).Elem()
}

func (o LookupForwardingControlProxiesResultOutput) ToLookupForwardingControlProxiesResultOutput() LookupForwardingControlProxiesResultOutput {
	return o
}

func (o LookupForwardingControlProxiesResultOutput) ToLookupForwardingControlProxiesResultOutputWithContext(ctx context.Context) LookupForwardingControlProxiesResultOutput {
	return o
}

// (String) The IP address or the FQDN of the third-party proxy service
func (o LookupForwardingControlProxiesResultOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupForwardingControlProxiesResult) string { return v.Address }).(pulumi.StringOutput)
}

// (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
func (o LookupForwardingControlProxiesResultOutput) Base64EncodeXauHeader() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupForwardingControlProxiesResult) bool { return v.Base64EncodeXauHeader }).(pulumi.BoolOutput)
}

// (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
func (o LookupForwardingControlProxiesResultOutput) Certs() GetForwardingControlProxiesCertArrayOutput {
	return o.ApplyT(func(v LookupForwardingControlProxiesResult) []GetForwardingControlProxiesCert { return v.Certs }).(GetForwardingControlProxiesCertArrayOutput)
}

// (String) Additional notes or information
func (o LookupForwardingControlProxiesResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupForwardingControlProxiesResult) string { return v.Description }).(pulumi.StringOutput)
}

// (Integer) Identifier that uniquely identifies the certificate
func (o LookupForwardingControlProxiesResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupForwardingControlProxiesResult) int { return v.Id }).(pulumi.IntOutput)
}

// (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
func (o LookupForwardingControlProxiesResultOutput) InsertXauHeader() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupForwardingControlProxiesResult) bool { return v.InsertXauHeader }).(pulumi.BoolOutput)
}

func (o LookupForwardingControlProxiesResultOutput) LastModifiedBies() GetForwardingControlProxiesLastModifiedByArrayOutput {
	return o.ApplyT(func(v LookupForwardingControlProxiesResult) []GetForwardingControlProxiesLastModifiedBy {
		return v.LastModifiedBies
	}).(GetForwardingControlProxiesLastModifiedByArrayOutput)
}

func (o LookupForwardingControlProxiesResultOutput) LastModifiedTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupForwardingControlProxiesResult) int { return v.LastModifiedTime }).(pulumi.IntOutput)
}

func (o LookupForwardingControlProxiesResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupForwardingControlProxiesResult) string { return v.Name }).(pulumi.StringOutput)
}

// (integer) The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
func (o LookupForwardingControlProxiesResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupForwardingControlProxiesResult) int { return v.Port }).(pulumi.IntOutput)
}

// (String) Gateway type. Returned values: `PROXYCHAIN`, `ZIA`, `ECSELF`
func (o LookupForwardingControlProxiesResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupForwardingControlProxiesResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupForwardingControlProxiesResultOutput{})
}
