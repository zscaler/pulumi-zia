// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/about-ssl-inspection-policy)
// * [API documentation](https://help.zscaler.com/zia/ssl-inspection-policy#/sslInspectionRules-get)
//
// Use the **zia_ssl_inspection_rules** data source to get information about a ssl inspection rule in the Zscaler Internet Access.
//
// ## Example Usage
func LookupSSLInspectionRules(ctx *pulumi.Context, args *LookupSSLInspectionRulesArgs, opts ...pulumi.InvokeOption) (*LookupSSLInspectionRulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSSLInspectionRulesResult
	err := ctx.Invoke("zia:index/getSSLInspectionRules:getSSLInspectionRules", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSSLInspectionRules.
type LookupSSLInspectionRulesArgs struct {
	// Unique identifier for the SSL Inspection
	Id *int `pulumi:"id"`
	// Name of the SSL Inspection
	Name *string `pulumi:"name"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories []string `pulumi:"urlCategories"`
}

// A collection of values returned by getSSLInspectionRules.
type LookupSSLInspectionRulesResult struct {
	// Action taken when the traffic matches policy
	Actions []GetSSLInspectionRulesAction `pulumi:"actions"`
	// The list of URL categories to which the DLP policy rule must be applied.
	CloudApplications []string `pulumi:"cloudApplications"`
	// ID pairs of departments for which the rule is applied.
	Departments []GetSSLInspectionRulesDepartment `pulumi:"departments"`
	// The description of the workload group
	Description string `pulumi:"description"`
	// ID pairs of destination IP address groups for which the rule is applied.
	DestIpGroups []GetSSLInspectionRulesDestIpGroup `pulumi:"destIpGroups"`
	// ID pairs of device groups for which the rule is applied.
	DeviceGroups []GetSSLInspectionRulesDeviceGroup `pulumi:"deviceGroups"`
	// Lists device trust levels for which the rule must be applied (for devices managed using Zscaler Client Connector).
	DeviceTrustLevels []string `pulumi:"deviceTrustLevels"`
	// ID pairs of devices for which the rule is applied
	Devices []GetSSLInspectionRulesDevice `pulumi:"devices"`
	// ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
	Groups []GetSSLInspectionRulesGroup `pulumi:"groups"`
	// A unique identifier assigned to the workload group
	Id int `pulumi:"id"`
	// ID pairs of labels associated with the rule.
	Labels []GetSSLInspectionRulesLabel `pulumi:"labels"`
	// A nested block with details about who last modified the workload group.
	LastModifiedBies []GetSSLInspectionRulesLastModifiedBy `pulumi:"lastModifiedBies"`
	// Timestamp when the workload group was last modified.
	LastModifiedTime int `pulumi:"lastModifiedTime"`
	// ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
	LocationGroups []GetSSLInspectionRulesLocationGroup `pulumi:"locationGroups"`
	// ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
	Locations []GetSSLInspectionRulesLocation `pulumi:"locations"`
	// The name of the workload group
	Name string `pulumi:"name"`
	// Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
	Order int `pulumi:"order"`
	// Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
	Platforms []string `pulumi:"platforms"`
	// When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
	ProxyGateways []GetSSLInspectionRulesProxyGateway `pulumi:"proxyGateways"`
	// The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
	Rank int `pulumi:"rank"`
	// Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
	RoadWarriorForKerberos bool `pulumi:"roadWarriorForKerberos"`
	// ID pairs of source IP address groups for which the rule is applied.
	SourceIpGroups []GetSSLInspectionRulesSourceIpGroup `pulumi:"sourceIpGroups"`
	// The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
	State string `pulumi:"state"`
	// The time intervals during which the rule applies
	TimeWindows []GetSSLInspectionRulesTimeWindow `pulumi:"timeWindows"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories []string `pulumi:"urlCategories"`
	// A list of user agent types the rule applies to.
	UserAgentTypes []string `pulumi:"userAgentTypes"`
	// The list of preconfigured workload groups to which the policy must be applied.
	Users []GetSSLInspectionRulesUser `pulumi:"users"`
	// The list of preconfigured workload groups to which the policy must be applied.
	WorkloadGroups []GetSSLInspectionRulesWorkloadGroup `pulumi:"workloadGroups"`
	// The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
	ZpaAppSegments []GetSSLInspectionRulesZpaAppSegment `pulumi:"zpaAppSegments"`
}

func LookupSSLInspectionRulesOutput(ctx *pulumi.Context, args LookupSSLInspectionRulesOutputArgs, opts ...pulumi.InvokeOption) LookupSSLInspectionRulesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSSLInspectionRulesResultOutput, error) {
			args := v.(LookupSSLInspectionRulesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("zia:index/getSSLInspectionRules:getSSLInspectionRules", args, LookupSSLInspectionRulesResultOutput{}, options).(LookupSSLInspectionRulesResultOutput), nil
		}).(LookupSSLInspectionRulesResultOutput)
}

// A collection of arguments for invoking getSSLInspectionRules.
type LookupSSLInspectionRulesOutputArgs struct {
	// Unique identifier for the SSL Inspection
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Name of the SSL Inspection
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories pulumi.StringArrayInput `pulumi:"urlCategories"`
}

func (LookupSSLInspectionRulesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSSLInspectionRulesArgs)(nil)).Elem()
}

// A collection of values returned by getSSLInspectionRules.
type LookupSSLInspectionRulesResultOutput struct{ *pulumi.OutputState }

func (LookupSSLInspectionRulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSSLInspectionRulesResult)(nil)).Elem()
}

func (o LookupSSLInspectionRulesResultOutput) ToLookupSSLInspectionRulesResultOutput() LookupSSLInspectionRulesResultOutput {
	return o
}

func (o LookupSSLInspectionRulesResultOutput) ToLookupSSLInspectionRulesResultOutputWithContext(ctx context.Context) LookupSSLInspectionRulesResultOutput {
	return o
}

// Action taken when the traffic matches policy
func (o LookupSSLInspectionRulesResultOutput) Actions() GetSSLInspectionRulesActionArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesAction { return v.Actions }).(GetSSLInspectionRulesActionArrayOutput)
}

// The list of URL categories to which the DLP policy rule must be applied.
func (o LookupSSLInspectionRulesResultOutput) CloudApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []string { return v.CloudApplications }).(pulumi.StringArrayOutput)
}

// ID pairs of departments for which the rule is applied.
func (o LookupSSLInspectionRulesResultOutput) Departments() GetSSLInspectionRulesDepartmentArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesDepartment { return v.Departments }).(GetSSLInspectionRulesDepartmentArrayOutput)
}

// The description of the workload group
func (o LookupSSLInspectionRulesResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) string { return v.Description }).(pulumi.StringOutput)
}

// ID pairs of destination IP address groups for which the rule is applied.
func (o LookupSSLInspectionRulesResultOutput) DestIpGroups() GetSSLInspectionRulesDestIpGroupArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesDestIpGroup { return v.DestIpGroups }).(GetSSLInspectionRulesDestIpGroupArrayOutput)
}

// ID pairs of device groups for which the rule is applied.
func (o LookupSSLInspectionRulesResultOutput) DeviceGroups() GetSSLInspectionRulesDeviceGroupArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesDeviceGroup { return v.DeviceGroups }).(GetSSLInspectionRulesDeviceGroupArrayOutput)
}

// Lists device trust levels for which the rule must be applied (for devices managed using Zscaler Client Connector).
func (o LookupSSLInspectionRulesResultOutput) DeviceTrustLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []string { return v.DeviceTrustLevels }).(pulumi.StringArrayOutput)
}

// ID pairs of devices for which the rule is applied
func (o LookupSSLInspectionRulesResultOutput) Devices() GetSSLInspectionRulesDeviceArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesDevice { return v.Devices }).(GetSSLInspectionRulesDeviceArrayOutput)
}

// ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
func (o LookupSSLInspectionRulesResultOutput) Groups() GetSSLInspectionRulesGroupArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesGroup { return v.Groups }).(GetSSLInspectionRulesGroupArrayOutput)
}

// A unique identifier assigned to the workload group
func (o LookupSSLInspectionRulesResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) int { return v.Id }).(pulumi.IntOutput)
}

// ID pairs of labels associated with the rule.
func (o LookupSSLInspectionRulesResultOutput) Labels() GetSSLInspectionRulesLabelArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesLabel { return v.Labels }).(GetSSLInspectionRulesLabelArrayOutput)
}

// A nested block with details about who last modified the workload group.
func (o LookupSSLInspectionRulesResultOutput) LastModifiedBies() GetSSLInspectionRulesLastModifiedByArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesLastModifiedBy {
		return v.LastModifiedBies
	}).(GetSSLInspectionRulesLastModifiedByArrayOutput)
}

// Timestamp when the workload group was last modified.
func (o LookupSSLInspectionRulesResultOutput) LastModifiedTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) int { return v.LastModifiedTime }).(pulumi.IntOutput)
}

// ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
func (o LookupSSLInspectionRulesResultOutput) LocationGroups() GetSSLInspectionRulesLocationGroupArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesLocationGroup { return v.LocationGroups }).(GetSSLInspectionRulesLocationGroupArrayOutput)
}

// ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
func (o LookupSSLInspectionRulesResultOutput) Locations() GetSSLInspectionRulesLocationArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesLocation { return v.Locations }).(GetSSLInspectionRulesLocationArrayOutput)
}

// The name of the workload group
func (o LookupSSLInspectionRulesResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) string { return v.Name }).(pulumi.StringOutput)
}

// Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
func (o LookupSSLInspectionRulesResultOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) int { return v.Order }).(pulumi.IntOutput)
}

// Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
func (o LookupSSLInspectionRulesResultOutput) Platforms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []string { return v.Platforms }).(pulumi.StringArrayOutput)
}

// When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
func (o LookupSSLInspectionRulesResultOutput) ProxyGateways() GetSSLInspectionRulesProxyGatewayArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesProxyGateway { return v.ProxyGateways }).(GetSSLInspectionRulesProxyGatewayArrayOutput)
}

// The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
func (o LookupSSLInspectionRulesResultOutput) Rank() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) int { return v.Rank }).(pulumi.IntOutput)
}

// Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
func (o LookupSSLInspectionRulesResultOutput) RoadWarriorForKerberos() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) bool { return v.RoadWarriorForKerberos }).(pulumi.BoolOutput)
}

// ID pairs of source IP address groups for which the rule is applied.
func (o LookupSSLInspectionRulesResultOutput) SourceIpGroups() GetSSLInspectionRulesSourceIpGroupArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesSourceIpGroup { return v.SourceIpGroups }).(GetSSLInspectionRulesSourceIpGroupArrayOutput)
}

// The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
func (o LookupSSLInspectionRulesResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) string { return v.State }).(pulumi.StringOutput)
}

// The time intervals during which the rule applies
func (o LookupSSLInspectionRulesResultOutput) TimeWindows() GetSSLInspectionRulesTimeWindowArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesTimeWindow { return v.TimeWindows }).(GetSSLInspectionRulesTimeWindowArrayOutput)
}

// The list of URL categories to which the DLP policy rule must be applied.
func (o LookupSSLInspectionRulesResultOutput) UrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []string { return v.UrlCategories }).(pulumi.StringArrayOutput)
}

// A list of user agent types the rule applies to.
func (o LookupSSLInspectionRulesResultOutput) UserAgentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []string { return v.UserAgentTypes }).(pulumi.StringArrayOutput)
}

// The list of preconfigured workload groups to which the policy must be applied.
func (o LookupSSLInspectionRulesResultOutput) Users() GetSSLInspectionRulesUserArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesUser { return v.Users }).(GetSSLInspectionRulesUserArrayOutput)
}

// The list of preconfigured workload groups to which the policy must be applied.
func (o LookupSSLInspectionRulesResultOutput) WorkloadGroups() GetSSLInspectionRulesWorkloadGroupArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesWorkloadGroup { return v.WorkloadGroups }).(GetSSLInspectionRulesWorkloadGroupArrayOutput)
}

// The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
func (o LookupSSLInspectionRulesResultOutput) ZpaAppSegments() GetSSLInspectionRulesZpaAppSegmentArrayOutput {
	return o.ApplyT(func(v LookupSSLInspectionRulesResult) []GetSSLInspectionRulesZpaAppSegment { return v.ZpaAppSegments }).(GetSSLInspectionRulesZpaAppSegmentArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSSLInspectionRulesResultOutput{})
}
