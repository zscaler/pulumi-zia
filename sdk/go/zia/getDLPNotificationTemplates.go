// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// Use the **zia_dlp_notification_templates** data source to get information about a ZIA DLP Notification Templates in the Zscaler Internet Access cloud or via the API.
//
// ## Example Usage
func LookupDLPNotificationTemplates(ctx *pulumi.Context, args *LookupDLPNotificationTemplatesArgs, opts ...pulumi.InvokeOption) (*LookupDLPNotificationTemplatesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDLPNotificationTemplatesResult
	err := ctx.Invoke("zia:index/getDLPNotificationTemplates:getDLPNotificationTemplates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDLPNotificationTemplates.
type LookupDLPNotificationTemplatesArgs struct {
	Id   *int    `pulumi:"id"`
	Name *string `pulumi:"name"`
}

// A collection of values returned by getDLPNotificationTemplates.
type LookupDLPNotificationTemplatesResult struct {
	AttachContent    bool   `pulumi:"attachContent"`
	HtmlMessage      string `pulumi:"htmlMessage"`
	Id               int    `pulumi:"id"`
	Name             string `pulumi:"name"`
	PlainTextMessage string `pulumi:"plainTextMessage"`
	Subject          string `pulumi:"subject"`
	TlsEnabled       bool   `pulumi:"tlsEnabled"`
}

func LookupDLPNotificationTemplatesOutput(ctx *pulumi.Context, args LookupDLPNotificationTemplatesOutputArgs, opts ...pulumi.InvokeOption) LookupDLPNotificationTemplatesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDLPNotificationTemplatesResultOutput, error) {
			args := v.(LookupDLPNotificationTemplatesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("zia:index/getDLPNotificationTemplates:getDLPNotificationTemplates", args, LookupDLPNotificationTemplatesResultOutput{}, options).(LookupDLPNotificationTemplatesResultOutput), nil
		}).(LookupDLPNotificationTemplatesResultOutput)
}

// A collection of arguments for invoking getDLPNotificationTemplates.
type LookupDLPNotificationTemplatesOutputArgs struct {
	Id   pulumi.IntPtrInput    `pulumi:"id"`
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupDLPNotificationTemplatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDLPNotificationTemplatesArgs)(nil)).Elem()
}

// A collection of values returned by getDLPNotificationTemplates.
type LookupDLPNotificationTemplatesResultOutput struct{ *pulumi.OutputState }

func (LookupDLPNotificationTemplatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDLPNotificationTemplatesResult)(nil)).Elem()
}

func (o LookupDLPNotificationTemplatesResultOutput) ToLookupDLPNotificationTemplatesResultOutput() LookupDLPNotificationTemplatesResultOutput {
	return o
}

func (o LookupDLPNotificationTemplatesResultOutput) ToLookupDLPNotificationTemplatesResultOutputWithContext(ctx context.Context) LookupDLPNotificationTemplatesResultOutput {
	return o
}

func (o LookupDLPNotificationTemplatesResultOutput) AttachContent() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDLPNotificationTemplatesResult) bool { return v.AttachContent }).(pulumi.BoolOutput)
}

func (o LookupDLPNotificationTemplatesResultOutput) HtmlMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDLPNotificationTemplatesResult) string { return v.HtmlMessage }).(pulumi.StringOutput)
}

func (o LookupDLPNotificationTemplatesResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDLPNotificationTemplatesResult) int { return v.Id }).(pulumi.IntOutput)
}

func (o LookupDLPNotificationTemplatesResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDLPNotificationTemplatesResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDLPNotificationTemplatesResultOutput) PlainTextMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDLPNotificationTemplatesResult) string { return v.PlainTextMessage }).(pulumi.StringOutput)
}

func (o LookupDLPNotificationTemplatesResultOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDLPNotificationTemplatesResult) string { return v.Subject }).(pulumi.StringOutput)
}

func (o LookupDLPNotificationTemplatesResultOutput) TlsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDLPNotificationTemplatesResult) bool { return v.TlsEnabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDLPNotificationTemplatesResultOutput{})
}
