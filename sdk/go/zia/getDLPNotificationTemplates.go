// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// Use the **zia_dlp_notification_templates** data source to get information about a ZIA DLP Notification Templates in the Zscaler Internet Access cloud or via the API.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.LookupDLPNotificationTemplates(ctx, &zia.LookupDLPNotificationTemplatesArgs{
//				Name: pulumi.StringRef("DLP Auditor Template Test"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupDLPNotificationTemplates(ctx *pulumi.Context, args *LookupDLPNotificationTemplatesArgs, opts ...pulumi.InvokeOption) (*LookupDLPNotificationTemplatesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDLPNotificationTemplatesResult
	err := ctx.Invoke("zia:index/getDLPNotificationTemplates:getDLPNotificationTemplates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDLPNotificationTemplates.
type LookupDLPNotificationTemplatesArgs struct {
	// The unique identifier for a DLP notification template.
	Id *int `pulumi:"id"`
	// The DLP policy rule name.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getDLPNotificationTemplates.
type LookupDLPNotificationTemplatesResult struct {
	AttachContent    bool   `pulumi:"attachContent"`
	HtmlMessage      string `pulumi:"htmlMessage"`
	Id               int    `pulumi:"id"`
	Name             string `pulumi:"name"`
	PlainTextMessage string `pulumi:"plainTextMessage"`
	Subject          string `pulumi:"subject"`
	TlsEnabled       bool   `pulumi:"tlsEnabled"`
}

func LookupDLPNotificationTemplatesOutput(ctx *pulumi.Context, args LookupDLPNotificationTemplatesOutputArgs, opts ...pulumi.InvokeOption) LookupDLPNotificationTemplatesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDLPNotificationTemplatesResult, error) {
			args := v.(LookupDLPNotificationTemplatesArgs)
			r, err := LookupDLPNotificationTemplates(ctx, &args, opts...)
			var s LookupDLPNotificationTemplatesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDLPNotificationTemplatesResultOutput)
}

// A collection of arguments for invoking getDLPNotificationTemplates.
type LookupDLPNotificationTemplatesOutputArgs struct {
	// The unique identifier for a DLP notification template.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The DLP policy rule name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupDLPNotificationTemplatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDLPNotificationTemplatesArgs)(nil)).Elem()
}

// A collection of values returned by getDLPNotificationTemplates.
type LookupDLPNotificationTemplatesResultOutput struct{ *pulumi.OutputState }

func (LookupDLPNotificationTemplatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDLPNotificationTemplatesResult)(nil)).Elem()
}

func (o LookupDLPNotificationTemplatesResultOutput) ToLookupDLPNotificationTemplatesResultOutput() LookupDLPNotificationTemplatesResultOutput {
	return o
}

func (o LookupDLPNotificationTemplatesResultOutput) ToLookupDLPNotificationTemplatesResultOutputWithContext(ctx context.Context) LookupDLPNotificationTemplatesResultOutput {
	return o
}

func (o LookupDLPNotificationTemplatesResultOutput) AttachContent() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDLPNotificationTemplatesResult) bool { return v.AttachContent }).(pulumi.BoolOutput)
}

func (o LookupDLPNotificationTemplatesResultOutput) HtmlMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDLPNotificationTemplatesResult) string { return v.HtmlMessage }).(pulumi.StringOutput)
}

func (o LookupDLPNotificationTemplatesResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDLPNotificationTemplatesResult) int { return v.Id }).(pulumi.IntOutput)
}

func (o LookupDLPNotificationTemplatesResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDLPNotificationTemplatesResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDLPNotificationTemplatesResultOutput) PlainTextMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDLPNotificationTemplatesResult) string { return v.PlainTextMessage }).(pulumi.StringOutput)
}

func (o LookupDLPNotificationTemplatesResultOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDLPNotificationTemplatesResult) string { return v.Subject }).(pulumi.StringOutput)
}

func (o LookupDLPNotificationTemplatesResultOutput) TlsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDLPNotificationTemplatesResult) bool { return v.TlsEnabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDLPNotificationTemplatesResultOutput{})
}
