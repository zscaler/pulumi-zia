// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// Use the **zia_cloud_browser_isolation_profile** data source to get information about an isolation profile in the Zscaler Internet Access cloud. This data source is required when configuring URL filtering rule where the action is set to `ISOLATE`
//
// ## Example Usage
func GetCbiProfile(ctx *pulumi.Context, args *GetCbiProfileArgs, opts ...pulumi.InvokeOption) (*GetCbiProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCbiProfileResult
	err := ctx.Invoke("zia:index/getCbiProfile:getCbiProfile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCbiProfile.
type GetCbiProfileArgs struct {
	// (string) The universally unique identifier (UUID) for the browser isolation profile.
	Id *string `pulumi:"id"`
	// This field defines the name of the isolation profile.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCbiProfile.
type GetCbiProfileResult struct {
	// (Optional) Indicates whether this is a default browser isolation profile. Zscaler sets this field
	DefaultProfile bool `pulumi:"defaultProfile"`
	// (string) The universally unique identifier (UUID) for the browser isolation profile.
	Id   *string `pulumi:"id"`
	Name *string `pulumi:"name"`
	// (string) The browser isolation profile URL
	Url string `pulumi:"url"`
}

func GetCbiProfileOutput(ctx *pulumi.Context, args GetCbiProfileOutputArgs, opts ...pulumi.InvokeOption) GetCbiProfileResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetCbiProfileResultOutput, error) {
			args := v.(GetCbiProfileArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("zia:index/getCbiProfile:getCbiProfile", args, GetCbiProfileResultOutput{}, options).(GetCbiProfileResultOutput), nil
		}).(GetCbiProfileResultOutput)
}

// A collection of arguments for invoking getCbiProfile.
type GetCbiProfileOutputArgs struct {
	// (string) The universally unique identifier (UUID) for the browser isolation profile.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// This field defines the name of the isolation profile.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetCbiProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCbiProfileArgs)(nil)).Elem()
}

// A collection of values returned by getCbiProfile.
type GetCbiProfileResultOutput struct{ *pulumi.OutputState }

func (GetCbiProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCbiProfileResult)(nil)).Elem()
}

func (o GetCbiProfileResultOutput) ToGetCbiProfileResultOutput() GetCbiProfileResultOutput {
	return o
}

func (o GetCbiProfileResultOutput) ToGetCbiProfileResultOutputWithContext(ctx context.Context) GetCbiProfileResultOutput {
	return o
}

// (Optional) Indicates whether this is a default browser isolation profile. Zscaler sets this field
func (o GetCbiProfileResultOutput) DefaultProfile() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCbiProfileResult) bool { return v.DefaultProfile }).(pulumi.BoolOutput)
}

// (string) The universally unique identifier (UUID) for the browser isolation profile.
func (o GetCbiProfileResultOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCbiProfileResult) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GetCbiProfileResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCbiProfileResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (string) The browser isolation profile URL
func (o GetCbiProfileResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetCbiProfileResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCbiProfileResultOutput{})
}
