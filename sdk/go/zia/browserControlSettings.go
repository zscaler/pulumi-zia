// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/configuring-browser-control-policy)
// * [API documentation](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
//
// The **zia_browser_control_policy** resource allows you to update the malware protection policy configuration details. To learn more see [Configuring the Browser Control Policy](https://help.zscaler.com/zia/configuring-browser-control-policy)
//
// ## Example Usage
//
// ### Enable Smart Isolation
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_browser_control_policy** can be imported by using `browser_settings` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/browserControlSettings:BrowserControlSettings this "browser_settings"
// ```
type BrowserControlSettings struct {
	pulumi.CustomResourceState

	// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
	// internet
	AllowAllBrowsers pulumi.BoolOutput `pulumi:"allowAllBrowsers"`
	// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
	BlockedChromeVersions pulumi.StringArrayOutput `pulumi:"blockedChromeVersions"`
	// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
	BlockedFirefoxVersions pulumi.StringArrayOutput `pulumi:"blockedFirefoxVersions"`
	// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
	BlockedInternetExplorerVersions pulumi.StringArrayOutput `pulumi:"blockedInternetExplorerVersions"`
	// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
	BlockedOperaVersions pulumi.StringArrayOutput `pulumi:"blockedOperaVersions"`
	// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
	BlockedSafariVersions pulumi.StringArrayOutput `pulumi:"blockedSafariVersions"`
	// If set to true, all the browsers are bypassed for warnings
	BypassAllBrowsers pulumi.BoolOutput `pulumi:"bypassAllBrowsers"`
	// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
	// attribute is set to true. If not set, all vulnerable applications are warned
	BypassApplications pulumi.StringArrayOutput `pulumi:"bypassApplications"`
	// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
	// is set to true. If not set, all vulnerable plugins are warned
	BypassPlugins pulumi.StringArrayOutput `pulumi:"bypassPlugins"`
	// A Boolean value that specifies if Smart Browser Isolation is enabled
	EnableSmartBrowserIsolation pulumi.BoolOutput `pulumi:"enableSmartBrowserIsolation"`
	// A Boolean value that specifies if the warnings are enabled
	EnableWarnings pulumi.BoolOutput `pulumi:"enableWarnings"`
	// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
	// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
	PluginCheckFrequency pulumi.StringPtrOutput `pulumi:"pluginCheckFrequency"`
	// Name-ID pairs of groups for which the rule is applied
	SmartIsolationGroups BrowserControlSettingsSmartIsolationGroupsPtrOutput `pulumi:"smartIsolationGroups"`
	// The isolation profile
	SmartIsolationProfiles BrowserControlSettingsSmartIsolationProfileArrayOutput `pulumi:"smartIsolationProfiles"`
	// Name-ID pairs of users for which the rule is applied
	SmartIsolationUsers BrowserControlSettingsSmartIsolationUsersPtrOutput `pulumi:"smartIsolationUsers"`
}

// NewBrowserControlSettings registers a new resource with the given unique name, arguments, and options.
func NewBrowserControlSettings(ctx *pulumi.Context,
	name string, args *BrowserControlSettingsArgs, opts ...pulumi.ResourceOption) (*BrowserControlSettings, error) {
	if args == nil {
		args = &BrowserControlSettingsArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("zia:index/browserControlPolicy:BrowserControlPolicy"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BrowserControlSettings
	err := ctx.RegisterResource("zia:index/browserControlSettings:BrowserControlSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBrowserControlSettings gets an existing BrowserControlSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBrowserControlSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrowserControlSettingsState, opts ...pulumi.ResourceOption) (*BrowserControlSettings, error) {
	var resource BrowserControlSettings
	err := ctx.ReadResource("zia:index/browserControlSettings:BrowserControlSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BrowserControlSettings resources.
type browserControlSettingsState struct {
	// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
	// internet
	AllowAllBrowsers *bool `pulumi:"allowAllBrowsers"`
	// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
	BlockedChromeVersions []string `pulumi:"blockedChromeVersions"`
	// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
	BlockedFirefoxVersions []string `pulumi:"blockedFirefoxVersions"`
	// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
	BlockedInternetExplorerVersions []string `pulumi:"blockedInternetExplorerVersions"`
	// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
	BlockedOperaVersions []string `pulumi:"blockedOperaVersions"`
	// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
	BlockedSafariVersions []string `pulumi:"blockedSafariVersions"`
	// If set to true, all the browsers are bypassed for warnings
	BypassAllBrowsers *bool `pulumi:"bypassAllBrowsers"`
	// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
	// attribute is set to true. If not set, all vulnerable applications are warned
	BypassApplications []string `pulumi:"bypassApplications"`
	// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
	// is set to true. If not set, all vulnerable plugins are warned
	BypassPlugins []string `pulumi:"bypassPlugins"`
	// A Boolean value that specifies if Smart Browser Isolation is enabled
	EnableSmartBrowserIsolation *bool `pulumi:"enableSmartBrowserIsolation"`
	// A Boolean value that specifies if the warnings are enabled
	EnableWarnings *bool `pulumi:"enableWarnings"`
	// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
	// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
	PluginCheckFrequency *string `pulumi:"pluginCheckFrequency"`
	// Name-ID pairs of groups for which the rule is applied
	SmartIsolationGroups *BrowserControlSettingsSmartIsolationGroups `pulumi:"smartIsolationGroups"`
	// The isolation profile
	SmartIsolationProfiles []BrowserControlSettingsSmartIsolationProfile `pulumi:"smartIsolationProfiles"`
	// Name-ID pairs of users for which the rule is applied
	SmartIsolationUsers *BrowserControlSettingsSmartIsolationUsers `pulumi:"smartIsolationUsers"`
}

type BrowserControlSettingsState struct {
	// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
	// internet
	AllowAllBrowsers pulumi.BoolPtrInput
	// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
	BlockedChromeVersions pulumi.StringArrayInput
	// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
	BlockedFirefoxVersions pulumi.StringArrayInput
	// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
	BlockedInternetExplorerVersions pulumi.StringArrayInput
	// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
	BlockedOperaVersions pulumi.StringArrayInput
	// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
	BlockedSafariVersions pulumi.StringArrayInput
	// If set to true, all the browsers are bypassed for warnings
	BypassAllBrowsers pulumi.BoolPtrInput
	// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
	// attribute is set to true. If not set, all vulnerable applications are warned
	BypassApplications pulumi.StringArrayInput
	// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
	// is set to true. If not set, all vulnerable plugins are warned
	BypassPlugins pulumi.StringArrayInput
	// A Boolean value that specifies if Smart Browser Isolation is enabled
	EnableSmartBrowserIsolation pulumi.BoolPtrInput
	// A Boolean value that specifies if the warnings are enabled
	EnableWarnings pulumi.BoolPtrInput
	// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
	// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
	PluginCheckFrequency pulumi.StringPtrInput
	// Name-ID pairs of groups for which the rule is applied
	SmartIsolationGroups BrowserControlSettingsSmartIsolationGroupsPtrInput
	// The isolation profile
	SmartIsolationProfiles BrowserControlSettingsSmartIsolationProfileArrayInput
	// Name-ID pairs of users for which the rule is applied
	SmartIsolationUsers BrowserControlSettingsSmartIsolationUsersPtrInput
}

func (BrowserControlSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*browserControlSettingsState)(nil)).Elem()
}

type browserControlSettingsArgs struct {
	// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
	// internet
	AllowAllBrowsers *bool `pulumi:"allowAllBrowsers"`
	// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
	BlockedChromeVersions []string `pulumi:"blockedChromeVersions"`
	// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
	BlockedFirefoxVersions []string `pulumi:"blockedFirefoxVersions"`
	// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
	BlockedInternetExplorerVersions []string `pulumi:"blockedInternetExplorerVersions"`
	// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
	BlockedOperaVersions []string `pulumi:"blockedOperaVersions"`
	// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
	BlockedSafariVersions []string `pulumi:"blockedSafariVersions"`
	// If set to true, all the browsers are bypassed for warnings
	BypassAllBrowsers *bool `pulumi:"bypassAllBrowsers"`
	// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
	// attribute is set to true. If not set, all vulnerable applications are warned
	BypassApplications []string `pulumi:"bypassApplications"`
	// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
	// is set to true. If not set, all vulnerable plugins are warned
	BypassPlugins []string `pulumi:"bypassPlugins"`
	// A Boolean value that specifies if Smart Browser Isolation is enabled
	EnableSmartBrowserIsolation *bool `pulumi:"enableSmartBrowserIsolation"`
	// A Boolean value that specifies if the warnings are enabled
	EnableWarnings *bool `pulumi:"enableWarnings"`
	// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
	// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
	PluginCheckFrequency *string `pulumi:"pluginCheckFrequency"`
	// Name-ID pairs of groups for which the rule is applied
	SmartIsolationGroups *BrowserControlSettingsSmartIsolationGroups `pulumi:"smartIsolationGroups"`
	// The isolation profile
	SmartIsolationProfiles []BrowserControlSettingsSmartIsolationProfile `pulumi:"smartIsolationProfiles"`
	// Name-ID pairs of users for which the rule is applied
	SmartIsolationUsers *BrowserControlSettingsSmartIsolationUsers `pulumi:"smartIsolationUsers"`
}

// The set of arguments for constructing a BrowserControlSettings resource.
type BrowserControlSettingsArgs struct {
	// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
	// internet
	AllowAllBrowsers pulumi.BoolPtrInput
	// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
	BlockedChromeVersions pulumi.StringArrayInput
	// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
	BlockedFirefoxVersions pulumi.StringArrayInput
	// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
	BlockedInternetExplorerVersions pulumi.StringArrayInput
	// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
	BlockedOperaVersions pulumi.StringArrayInput
	// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
	BlockedSafariVersions pulumi.StringArrayInput
	// If set to true, all the browsers are bypassed for warnings
	BypassAllBrowsers pulumi.BoolPtrInput
	// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
	// attribute is set to true. If not set, all vulnerable applications are warned
	BypassApplications pulumi.StringArrayInput
	// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
	// is set to true. If not set, all vulnerable plugins are warned
	BypassPlugins pulumi.StringArrayInput
	// A Boolean value that specifies if Smart Browser Isolation is enabled
	EnableSmartBrowserIsolation pulumi.BoolPtrInput
	// A Boolean value that specifies if the warnings are enabled
	EnableWarnings pulumi.BoolPtrInput
	// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
	// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
	PluginCheckFrequency pulumi.StringPtrInput
	// Name-ID pairs of groups for which the rule is applied
	SmartIsolationGroups BrowserControlSettingsSmartIsolationGroupsPtrInput
	// The isolation profile
	SmartIsolationProfiles BrowserControlSettingsSmartIsolationProfileArrayInput
	// Name-ID pairs of users for which the rule is applied
	SmartIsolationUsers BrowserControlSettingsSmartIsolationUsersPtrInput
}

func (BrowserControlSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*browserControlSettingsArgs)(nil)).Elem()
}

type BrowserControlSettingsInput interface {
	pulumi.Input

	ToBrowserControlSettingsOutput() BrowserControlSettingsOutput
	ToBrowserControlSettingsOutputWithContext(ctx context.Context) BrowserControlSettingsOutput
}

func (*BrowserControlSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserControlSettings)(nil)).Elem()
}

func (i *BrowserControlSettings) ToBrowserControlSettingsOutput() BrowserControlSettingsOutput {
	return i.ToBrowserControlSettingsOutputWithContext(context.Background())
}

func (i *BrowserControlSettings) ToBrowserControlSettingsOutputWithContext(ctx context.Context) BrowserControlSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserControlSettingsOutput)
}

// BrowserControlSettingsArrayInput is an input type that accepts BrowserControlSettingsArray and BrowserControlSettingsArrayOutput values.
// You can construct a concrete instance of `BrowserControlSettingsArrayInput` via:
//
//	BrowserControlSettingsArray{ BrowserControlSettingsArgs{...} }
type BrowserControlSettingsArrayInput interface {
	pulumi.Input

	ToBrowserControlSettingsArrayOutput() BrowserControlSettingsArrayOutput
	ToBrowserControlSettingsArrayOutputWithContext(context.Context) BrowserControlSettingsArrayOutput
}

type BrowserControlSettingsArray []BrowserControlSettingsInput

func (BrowserControlSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserControlSettings)(nil)).Elem()
}

func (i BrowserControlSettingsArray) ToBrowserControlSettingsArrayOutput() BrowserControlSettingsArrayOutput {
	return i.ToBrowserControlSettingsArrayOutputWithContext(context.Background())
}

func (i BrowserControlSettingsArray) ToBrowserControlSettingsArrayOutputWithContext(ctx context.Context) BrowserControlSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserControlSettingsArrayOutput)
}

// BrowserControlSettingsMapInput is an input type that accepts BrowserControlSettingsMap and BrowserControlSettingsMapOutput values.
// You can construct a concrete instance of `BrowserControlSettingsMapInput` via:
//
//	BrowserControlSettingsMap{ "key": BrowserControlSettingsArgs{...} }
type BrowserControlSettingsMapInput interface {
	pulumi.Input

	ToBrowserControlSettingsMapOutput() BrowserControlSettingsMapOutput
	ToBrowserControlSettingsMapOutputWithContext(context.Context) BrowserControlSettingsMapOutput
}

type BrowserControlSettingsMap map[string]BrowserControlSettingsInput

func (BrowserControlSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserControlSettings)(nil)).Elem()
}

func (i BrowserControlSettingsMap) ToBrowserControlSettingsMapOutput() BrowserControlSettingsMapOutput {
	return i.ToBrowserControlSettingsMapOutputWithContext(context.Background())
}

func (i BrowserControlSettingsMap) ToBrowserControlSettingsMapOutputWithContext(ctx context.Context) BrowserControlSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserControlSettingsMapOutput)
}

type BrowserControlSettingsOutput struct{ *pulumi.OutputState }

func (BrowserControlSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserControlSettings)(nil)).Elem()
}

func (o BrowserControlSettingsOutput) ToBrowserControlSettingsOutput() BrowserControlSettingsOutput {
	return o
}

func (o BrowserControlSettingsOutput) ToBrowserControlSettingsOutputWithContext(ctx context.Context) BrowserControlSettingsOutput {
	return o
}

// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
// internet
func (o BrowserControlSettingsOutput) AllowAllBrowsers() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrowserControlSettings) pulumi.BoolOutput { return v.AllowAllBrowsers }).(pulumi.BoolOutput)
}

// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
func (o BrowserControlSettingsOutput) BlockedChromeVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserControlSettings) pulumi.StringArrayOutput { return v.BlockedChromeVersions }).(pulumi.StringArrayOutput)
}

// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
func (o BrowserControlSettingsOutput) BlockedFirefoxVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserControlSettings) pulumi.StringArrayOutput { return v.BlockedFirefoxVersions }).(pulumi.StringArrayOutput)
}

// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
func (o BrowserControlSettingsOutput) BlockedInternetExplorerVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserControlSettings) pulumi.StringArrayOutput { return v.BlockedInternetExplorerVersions }).(pulumi.StringArrayOutput)
}

// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
func (o BrowserControlSettingsOutput) BlockedOperaVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserControlSettings) pulumi.StringArrayOutput { return v.BlockedOperaVersions }).(pulumi.StringArrayOutput)
}

// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
func (o BrowserControlSettingsOutput) BlockedSafariVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserControlSettings) pulumi.StringArrayOutput { return v.BlockedSafariVersions }).(pulumi.StringArrayOutput)
}

// If set to true, all the browsers are bypassed for warnings
func (o BrowserControlSettingsOutput) BypassAllBrowsers() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrowserControlSettings) pulumi.BoolOutput { return v.BypassAllBrowsers }).(pulumi.BoolOutput)
}

// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
// attribute is set to true. If not set, all vulnerable applications are warned
func (o BrowserControlSettingsOutput) BypassApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserControlSettings) pulumi.StringArrayOutput { return v.BypassApplications }).(pulumi.StringArrayOutput)
}

// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
// is set to true. If not set, all vulnerable plugins are warned
func (o BrowserControlSettingsOutput) BypassPlugins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserControlSettings) pulumi.StringArrayOutput { return v.BypassPlugins }).(pulumi.StringArrayOutput)
}

// A Boolean value that specifies if Smart Browser Isolation is enabled
func (o BrowserControlSettingsOutput) EnableSmartBrowserIsolation() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrowserControlSettings) pulumi.BoolOutput { return v.EnableSmartBrowserIsolation }).(pulumi.BoolOutput)
}

// A Boolean value that specifies if the warnings are enabled
func (o BrowserControlSettingsOutput) EnableWarnings() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrowserControlSettings) pulumi.BoolOutput { return v.EnableWarnings }).(pulumi.BoolOutput)
}

// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
func (o BrowserControlSettingsOutput) PluginCheckFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserControlSettings) pulumi.StringPtrOutput { return v.PluginCheckFrequency }).(pulumi.StringPtrOutput)
}

// Name-ID pairs of groups for which the rule is applied
func (o BrowserControlSettingsOutput) SmartIsolationGroups() BrowserControlSettingsSmartIsolationGroupsPtrOutput {
	return o.ApplyT(func(v *BrowserControlSettings) BrowserControlSettingsSmartIsolationGroupsPtrOutput {
		return v.SmartIsolationGroups
	}).(BrowserControlSettingsSmartIsolationGroupsPtrOutput)
}

// The isolation profile
func (o BrowserControlSettingsOutput) SmartIsolationProfiles() BrowserControlSettingsSmartIsolationProfileArrayOutput {
	return o.ApplyT(func(v *BrowserControlSettings) BrowserControlSettingsSmartIsolationProfileArrayOutput {
		return v.SmartIsolationProfiles
	}).(BrowserControlSettingsSmartIsolationProfileArrayOutput)
}

// Name-ID pairs of users for which the rule is applied
func (o BrowserControlSettingsOutput) SmartIsolationUsers() BrowserControlSettingsSmartIsolationUsersPtrOutput {
	return o.ApplyT(func(v *BrowserControlSettings) BrowserControlSettingsSmartIsolationUsersPtrOutput {
		return v.SmartIsolationUsers
	}).(BrowserControlSettingsSmartIsolationUsersPtrOutput)
}

type BrowserControlSettingsArrayOutput struct{ *pulumi.OutputState }

func (BrowserControlSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserControlSettings)(nil)).Elem()
}

func (o BrowserControlSettingsArrayOutput) ToBrowserControlSettingsArrayOutput() BrowserControlSettingsArrayOutput {
	return o
}

func (o BrowserControlSettingsArrayOutput) ToBrowserControlSettingsArrayOutputWithContext(ctx context.Context) BrowserControlSettingsArrayOutput {
	return o
}

func (o BrowserControlSettingsArrayOutput) Index(i pulumi.IntInput) BrowserControlSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BrowserControlSettings {
		return vs[0].([]*BrowserControlSettings)[vs[1].(int)]
	}).(BrowserControlSettingsOutput)
}

type BrowserControlSettingsMapOutput struct{ *pulumi.OutputState }

func (BrowserControlSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserControlSettings)(nil)).Elem()
}

func (o BrowserControlSettingsMapOutput) ToBrowserControlSettingsMapOutput() BrowserControlSettingsMapOutput {
	return o
}

func (o BrowserControlSettingsMapOutput) ToBrowserControlSettingsMapOutputWithContext(ctx context.Context) BrowserControlSettingsMapOutput {
	return o
}

func (o BrowserControlSettingsMapOutput) MapIndex(k pulumi.StringInput) BrowserControlSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BrowserControlSettings {
		return vs[0].(map[string]*BrowserControlSettings)[vs[1].(string)]
	}).(BrowserControlSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserControlSettingsInput)(nil)).Elem(), &BrowserControlSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserControlSettingsArrayInput)(nil)).Elem(), BrowserControlSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserControlSettingsMapInput)(nil)).Elem(), BrowserControlSettingsMap{})
	pulumi.RegisterOutputType(BrowserControlSettingsOutput{})
	pulumi.RegisterOutputType(BrowserControlSettingsArrayOutput{})
	pulumi.RegisterOutputType(BrowserControlSettingsMapOutput{})
}
