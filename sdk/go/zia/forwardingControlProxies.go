// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/about-third-party-proxies)
// * [API documentation](https://help.zscaler.com/zia/forwarding-control-policy#/proxies-get)
//
// Use the **zia_forwarding_control_proxies** resource allows the creation and management of ZIA forwarding control Proxies for third-party proxy services integration between Zscaler Internet Access and Zscaler Private Access. This resource can then be associated with a ZIA Forwarding Control Rule.
//
// ## Example Usage
//
// ### No Certificate
//
// ### With Certificate
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_forwarding_control_proxies** can be imported by using `<PROXY_ID>` or `<PROXY_NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/forwardingControlProxies:ForwardingControlProxies example <proxy_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zia:index/forwardingControlProxies:ForwardingControlProxies example <proxy_name>
// ```
type ForwardingControlProxies struct {
	pulumi.CustomResourceState

	// The IP address or the FQDN of the third-party proxy service
	Address pulumi.StringPtrOutput `pulumi:"address"`
	// (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
	Base64EncodeXauHeader pulumi.BoolPtrOutput `pulumi:"base64EncodeXauHeader"`
	// (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
	Certs ForwardingControlProxiesCertArrayOutput `pulumi:"certs"`
	// (String) Additional notes or information
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
	InsertXauHeader pulumi.BoolPtrOutput `pulumi:"insertXauHeader"`
	// Proxy name for the third-party proxy services
	Name pulumi.StringOutput `pulumi:"name"`
	// The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
	Port    pulumi.IntPtrOutput `pulumi:"port"`
	ProxyId pulumi.IntOutput    `pulumi:"proxyId"`
	// Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewForwardingControlProxies registers a new resource with the given unique name, arguments, and options.
func NewForwardingControlProxies(ctx *pulumi.Context,
	name string, args *ForwardingControlProxiesArgs, opts ...pulumi.ResourceOption) (*ForwardingControlProxies, error) {
	if args == nil {
		args = &ForwardingControlProxiesArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ForwardingControlProxies
	err := ctx.RegisterResource("zia:index/forwardingControlProxies:ForwardingControlProxies", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetForwardingControlProxies gets an existing ForwardingControlProxies resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetForwardingControlProxies(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ForwardingControlProxiesState, opts ...pulumi.ResourceOption) (*ForwardingControlProxies, error) {
	var resource ForwardingControlProxies
	err := ctx.ReadResource("zia:index/forwardingControlProxies:ForwardingControlProxies", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ForwardingControlProxies resources.
type forwardingControlProxiesState struct {
	// The IP address or the FQDN of the third-party proxy service
	Address *string `pulumi:"address"`
	// (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
	Base64EncodeXauHeader *bool `pulumi:"base64EncodeXauHeader"`
	// (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
	Certs []ForwardingControlProxiesCert `pulumi:"certs"`
	// (String) Additional notes or information
	Description *string `pulumi:"description"`
	// (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
	InsertXauHeader *bool `pulumi:"insertXauHeader"`
	// Proxy name for the third-party proxy services
	Name *string `pulumi:"name"`
	// The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
	Port    *int `pulumi:"port"`
	ProxyId *int `pulumi:"proxyId"`
	// Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
	Type *string `pulumi:"type"`
}

type ForwardingControlProxiesState struct {
	// The IP address or the FQDN of the third-party proxy service
	Address pulumi.StringPtrInput
	// (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
	Base64EncodeXauHeader pulumi.BoolPtrInput
	// (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
	Certs ForwardingControlProxiesCertArrayInput
	// (String) Additional notes or information
	Description pulumi.StringPtrInput
	// (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
	InsertXauHeader pulumi.BoolPtrInput
	// Proxy name for the third-party proxy services
	Name pulumi.StringPtrInput
	// The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
	Port    pulumi.IntPtrInput
	ProxyId pulumi.IntPtrInput
	// Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
	Type pulumi.StringPtrInput
}

func (ForwardingControlProxiesState) ElementType() reflect.Type {
	return reflect.TypeOf((*forwardingControlProxiesState)(nil)).Elem()
}

type forwardingControlProxiesArgs struct {
	// The IP address or the FQDN of the third-party proxy service
	Address *string `pulumi:"address"`
	// (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
	Base64EncodeXauHeader *bool `pulumi:"base64EncodeXauHeader"`
	// (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
	Certs []ForwardingControlProxiesCert `pulumi:"certs"`
	// (String) Additional notes or information
	Description *string `pulumi:"description"`
	// (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
	InsertXauHeader *bool `pulumi:"insertXauHeader"`
	// Proxy name for the third-party proxy services
	Name *string `pulumi:"name"`
	// The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
	Port *int `pulumi:"port"`
	// Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a ForwardingControlProxies resource.
type ForwardingControlProxiesArgs struct {
	// The IP address or the FQDN of the third-party proxy service
	Address pulumi.StringPtrInput
	// (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
	Base64EncodeXauHeader pulumi.BoolPtrInput
	// (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
	Certs ForwardingControlProxiesCertArrayInput
	// (String) Additional notes or information
	Description pulumi.StringPtrInput
	// (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
	InsertXauHeader pulumi.BoolPtrInput
	// Proxy name for the third-party proxy services
	Name pulumi.StringPtrInput
	// The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
	Port pulumi.IntPtrInput
	// Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
	Type pulumi.StringPtrInput
}

func (ForwardingControlProxiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*forwardingControlProxiesArgs)(nil)).Elem()
}

type ForwardingControlProxiesInput interface {
	pulumi.Input

	ToForwardingControlProxiesOutput() ForwardingControlProxiesOutput
	ToForwardingControlProxiesOutputWithContext(ctx context.Context) ForwardingControlProxiesOutput
}

func (*ForwardingControlProxies) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardingControlProxies)(nil)).Elem()
}

func (i *ForwardingControlProxies) ToForwardingControlProxiesOutput() ForwardingControlProxiesOutput {
	return i.ToForwardingControlProxiesOutputWithContext(context.Background())
}

func (i *ForwardingControlProxies) ToForwardingControlProxiesOutputWithContext(ctx context.Context) ForwardingControlProxiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingControlProxiesOutput)
}

// ForwardingControlProxiesArrayInput is an input type that accepts ForwardingControlProxiesArray and ForwardingControlProxiesArrayOutput values.
// You can construct a concrete instance of `ForwardingControlProxiesArrayInput` via:
//
//	ForwardingControlProxiesArray{ ForwardingControlProxiesArgs{...} }
type ForwardingControlProxiesArrayInput interface {
	pulumi.Input

	ToForwardingControlProxiesArrayOutput() ForwardingControlProxiesArrayOutput
	ToForwardingControlProxiesArrayOutputWithContext(context.Context) ForwardingControlProxiesArrayOutput
}

type ForwardingControlProxiesArray []ForwardingControlProxiesInput

func (ForwardingControlProxiesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ForwardingControlProxies)(nil)).Elem()
}

func (i ForwardingControlProxiesArray) ToForwardingControlProxiesArrayOutput() ForwardingControlProxiesArrayOutput {
	return i.ToForwardingControlProxiesArrayOutputWithContext(context.Background())
}

func (i ForwardingControlProxiesArray) ToForwardingControlProxiesArrayOutputWithContext(ctx context.Context) ForwardingControlProxiesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingControlProxiesArrayOutput)
}

// ForwardingControlProxiesMapInput is an input type that accepts ForwardingControlProxiesMap and ForwardingControlProxiesMapOutput values.
// You can construct a concrete instance of `ForwardingControlProxiesMapInput` via:
//
//	ForwardingControlProxiesMap{ "key": ForwardingControlProxiesArgs{...} }
type ForwardingControlProxiesMapInput interface {
	pulumi.Input

	ToForwardingControlProxiesMapOutput() ForwardingControlProxiesMapOutput
	ToForwardingControlProxiesMapOutputWithContext(context.Context) ForwardingControlProxiesMapOutput
}

type ForwardingControlProxiesMap map[string]ForwardingControlProxiesInput

func (ForwardingControlProxiesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ForwardingControlProxies)(nil)).Elem()
}

func (i ForwardingControlProxiesMap) ToForwardingControlProxiesMapOutput() ForwardingControlProxiesMapOutput {
	return i.ToForwardingControlProxiesMapOutputWithContext(context.Background())
}

func (i ForwardingControlProxiesMap) ToForwardingControlProxiesMapOutputWithContext(ctx context.Context) ForwardingControlProxiesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingControlProxiesMapOutput)
}

type ForwardingControlProxiesOutput struct{ *pulumi.OutputState }

func (ForwardingControlProxiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardingControlProxies)(nil)).Elem()
}

func (o ForwardingControlProxiesOutput) ToForwardingControlProxiesOutput() ForwardingControlProxiesOutput {
	return o
}

func (o ForwardingControlProxiesOutput) ToForwardingControlProxiesOutputWithContext(ctx context.Context) ForwardingControlProxiesOutput {
	return o
}

// The IP address or the FQDN of the third-party proxy service
func (o ForwardingControlProxiesOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardingControlProxies) pulumi.StringPtrOutput { return v.Address }).(pulumi.StringPtrOutput)
}

// (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
func (o ForwardingControlProxiesOutput) Base64EncodeXauHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForwardingControlProxies) pulumi.BoolPtrOutput { return v.Base64EncodeXauHeader }).(pulumi.BoolPtrOutput)
}

// (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
func (o ForwardingControlProxiesOutput) Certs() ForwardingControlProxiesCertArrayOutput {
	return o.ApplyT(func(v *ForwardingControlProxies) ForwardingControlProxiesCertArrayOutput { return v.Certs }).(ForwardingControlProxiesCertArrayOutput)
}

// (String) Additional notes or information
func (o ForwardingControlProxiesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardingControlProxies) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
func (o ForwardingControlProxiesOutput) InsertXauHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ForwardingControlProxies) pulumi.BoolPtrOutput { return v.InsertXauHeader }).(pulumi.BoolPtrOutput)
}

// Proxy name for the third-party proxy services
func (o ForwardingControlProxiesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ForwardingControlProxies) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
func (o ForwardingControlProxiesOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ForwardingControlProxies) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

func (o ForwardingControlProxiesOutput) ProxyId() pulumi.IntOutput {
	return o.ApplyT(func(v *ForwardingControlProxies) pulumi.IntOutput { return v.ProxyId }).(pulumi.IntOutput)
}

// Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
func (o ForwardingControlProxiesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardingControlProxies) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type ForwardingControlProxiesArrayOutput struct{ *pulumi.OutputState }

func (ForwardingControlProxiesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ForwardingControlProxies)(nil)).Elem()
}

func (o ForwardingControlProxiesArrayOutput) ToForwardingControlProxiesArrayOutput() ForwardingControlProxiesArrayOutput {
	return o
}

func (o ForwardingControlProxiesArrayOutput) ToForwardingControlProxiesArrayOutputWithContext(ctx context.Context) ForwardingControlProxiesArrayOutput {
	return o
}

func (o ForwardingControlProxiesArrayOutput) Index(i pulumi.IntInput) ForwardingControlProxiesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ForwardingControlProxies {
		return vs[0].([]*ForwardingControlProxies)[vs[1].(int)]
	}).(ForwardingControlProxiesOutput)
}

type ForwardingControlProxiesMapOutput struct{ *pulumi.OutputState }

func (ForwardingControlProxiesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ForwardingControlProxies)(nil)).Elem()
}

func (o ForwardingControlProxiesMapOutput) ToForwardingControlProxiesMapOutput() ForwardingControlProxiesMapOutput {
	return o
}

func (o ForwardingControlProxiesMapOutput) ToForwardingControlProxiesMapOutputWithContext(ctx context.Context) ForwardingControlProxiesMapOutput {
	return o
}

func (o ForwardingControlProxiesMapOutput) MapIndex(k pulumi.StringInput) ForwardingControlProxiesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ForwardingControlProxies {
		return vs[0].(map[string]*ForwardingControlProxies)[vs[1].(string)]
	}).(ForwardingControlProxiesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingControlProxiesInput)(nil)).Elem(), &ForwardingControlProxies{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingControlProxiesArrayInput)(nil)).Elem(), ForwardingControlProxiesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingControlProxiesMapInput)(nil)).Elem(), ForwardingControlProxiesMap{})
	pulumi.RegisterOutputType(ForwardingControlProxiesOutput{})
	pulumi.RegisterOutputType(ForwardingControlProxiesArrayOutput{})
	pulumi.RegisterOutputType(ForwardingControlProxiesMapOutput{})
}
