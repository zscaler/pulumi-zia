// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// Use the **zia_group_management** data source to get information about a user group that may have been created in the Zscaler Internet Access portal. This data source can then be associated with a ZIA cloud firewall filtering rule, and URL filtering rules.
//
// ## Example Usage
func GetGroupManagement(ctx *pulumi.Context, args *GetGroupManagementArgs, opts ...pulumi.InvokeOption) (*GetGroupManagementResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGroupManagementResult
	err := ctx.Invoke("zia:index/getGroupManagement:getGroupManagement", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGroupManagement.
type GetGroupManagementArgs struct {
	// Name of the user group
	Name *string `pulumi:"name"`
}

// A collection of values returned by getGroupManagement.
type GetGroupManagementResult struct {
	// (Optional) Additional information about the group
	Comments string `pulumi:"comments"`
	Id       int    `pulumi:"id"`
	// (Optional) Unique identfier for the identity provider (IdP)
	IdpId int     `pulumi:"idpId"`
	Name  *string `pulumi:"name"`
}

func GetGroupManagementOutput(ctx *pulumi.Context, args GetGroupManagementOutputArgs, opts ...pulumi.InvokeOption) GetGroupManagementResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetGroupManagementResultOutput, error) {
			args := v.(GetGroupManagementArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("zia:index/getGroupManagement:getGroupManagement", args, GetGroupManagementResultOutput{}, options).(GetGroupManagementResultOutput), nil
		}).(GetGroupManagementResultOutput)
}

// A collection of arguments for invoking getGroupManagement.
type GetGroupManagementOutputArgs struct {
	// Name of the user group
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetGroupManagementOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupManagementArgs)(nil)).Elem()
}

// A collection of values returned by getGroupManagement.
type GetGroupManagementResultOutput struct{ *pulumi.OutputState }

func (GetGroupManagementResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupManagementResult)(nil)).Elem()
}

func (o GetGroupManagementResultOutput) ToGetGroupManagementResultOutput() GetGroupManagementResultOutput {
	return o
}

func (o GetGroupManagementResultOutput) ToGetGroupManagementResultOutputWithContext(ctx context.Context) GetGroupManagementResultOutput {
	return o
}

// (Optional) Additional information about the group
func (o GetGroupManagementResultOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupManagementResult) string { return v.Comments }).(pulumi.StringOutput)
}

func (o GetGroupManagementResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupManagementResult) int { return v.Id }).(pulumi.IntOutput)
}

// (Optional) Unique identfier for the identity provider (IdP)
func (o GetGroupManagementResultOutput) IdpId() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupManagementResult) int { return v.IdpId }).(pulumi.IntOutput)
}

func (o GetGroupManagementResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGroupManagementResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGroupManagementResultOutput{})
}
