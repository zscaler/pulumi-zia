// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/configuring-advanced-threat-protection-policy)
// * [API documentation](https://help.zscaler.com/zia/advanced-threat-protection-policy#/)
//
// The **zia_atp_security_exceptions** resource alows you to updates security exceptions for the ATP policy. To learn more see [Advanced Threat Protection](https://help.zscaler.com/unified/configuring-security-exceptions-advanced-threat-protection-policy)
//
// ## Example Usage
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_atp_security_exceptions** can be imported by using `all_urls` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/aTPSecurityExceptions:ATPSecurityExceptions this all_urls
// ```
type ATPSecurityExceptions struct {
	pulumi.CustomResourceState

	BypassUrls pulumi.StringArrayOutput `pulumi:"bypassUrls"`
}

// NewATPSecurityExceptions registers a new resource with the given unique name, arguments, and options.
func NewATPSecurityExceptions(ctx *pulumi.Context,
	name string, args *ATPSecurityExceptionsArgs, opts ...pulumi.ResourceOption) (*ATPSecurityExceptions, error) {
	if args == nil {
		args = &ATPSecurityExceptionsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ATPSecurityExceptions
	err := ctx.RegisterResource("zia:index/aTPSecurityExceptions:ATPSecurityExceptions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetATPSecurityExceptions gets an existing ATPSecurityExceptions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetATPSecurityExceptions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ATPSecurityExceptionsState, opts ...pulumi.ResourceOption) (*ATPSecurityExceptions, error) {
	var resource ATPSecurityExceptions
	err := ctx.ReadResource("zia:index/aTPSecurityExceptions:ATPSecurityExceptions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ATPSecurityExceptions resources.
type atpsecurityExceptionsState struct {
	BypassUrls []string `pulumi:"bypassUrls"`
}

type ATPSecurityExceptionsState struct {
	BypassUrls pulumi.StringArrayInput
}

func (ATPSecurityExceptionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*atpsecurityExceptionsState)(nil)).Elem()
}

type atpsecurityExceptionsArgs struct {
	BypassUrls []string `pulumi:"bypassUrls"`
}

// The set of arguments for constructing a ATPSecurityExceptions resource.
type ATPSecurityExceptionsArgs struct {
	BypassUrls pulumi.StringArrayInput
}

func (ATPSecurityExceptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*atpsecurityExceptionsArgs)(nil)).Elem()
}

type ATPSecurityExceptionsInput interface {
	pulumi.Input

	ToATPSecurityExceptionsOutput() ATPSecurityExceptionsOutput
	ToATPSecurityExceptionsOutputWithContext(ctx context.Context) ATPSecurityExceptionsOutput
}

func (*ATPSecurityExceptions) ElementType() reflect.Type {
	return reflect.TypeOf((**ATPSecurityExceptions)(nil)).Elem()
}

func (i *ATPSecurityExceptions) ToATPSecurityExceptionsOutput() ATPSecurityExceptionsOutput {
	return i.ToATPSecurityExceptionsOutputWithContext(context.Background())
}

func (i *ATPSecurityExceptions) ToATPSecurityExceptionsOutputWithContext(ctx context.Context) ATPSecurityExceptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ATPSecurityExceptionsOutput)
}

// ATPSecurityExceptionsArrayInput is an input type that accepts ATPSecurityExceptionsArray and ATPSecurityExceptionsArrayOutput values.
// You can construct a concrete instance of `ATPSecurityExceptionsArrayInput` via:
//
//	ATPSecurityExceptionsArray{ ATPSecurityExceptionsArgs{...} }
type ATPSecurityExceptionsArrayInput interface {
	pulumi.Input

	ToATPSecurityExceptionsArrayOutput() ATPSecurityExceptionsArrayOutput
	ToATPSecurityExceptionsArrayOutputWithContext(context.Context) ATPSecurityExceptionsArrayOutput
}

type ATPSecurityExceptionsArray []ATPSecurityExceptionsInput

func (ATPSecurityExceptionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ATPSecurityExceptions)(nil)).Elem()
}

func (i ATPSecurityExceptionsArray) ToATPSecurityExceptionsArrayOutput() ATPSecurityExceptionsArrayOutput {
	return i.ToATPSecurityExceptionsArrayOutputWithContext(context.Background())
}

func (i ATPSecurityExceptionsArray) ToATPSecurityExceptionsArrayOutputWithContext(ctx context.Context) ATPSecurityExceptionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ATPSecurityExceptionsArrayOutput)
}

// ATPSecurityExceptionsMapInput is an input type that accepts ATPSecurityExceptionsMap and ATPSecurityExceptionsMapOutput values.
// You can construct a concrete instance of `ATPSecurityExceptionsMapInput` via:
//
//	ATPSecurityExceptionsMap{ "key": ATPSecurityExceptionsArgs{...} }
type ATPSecurityExceptionsMapInput interface {
	pulumi.Input

	ToATPSecurityExceptionsMapOutput() ATPSecurityExceptionsMapOutput
	ToATPSecurityExceptionsMapOutputWithContext(context.Context) ATPSecurityExceptionsMapOutput
}

type ATPSecurityExceptionsMap map[string]ATPSecurityExceptionsInput

func (ATPSecurityExceptionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ATPSecurityExceptions)(nil)).Elem()
}

func (i ATPSecurityExceptionsMap) ToATPSecurityExceptionsMapOutput() ATPSecurityExceptionsMapOutput {
	return i.ToATPSecurityExceptionsMapOutputWithContext(context.Background())
}

func (i ATPSecurityExceptionsMap) ToATPSecurityExceptionsMapOutputWithContext(ctx context.Context) ATPSecurityExceptionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ATPSecurityExceptionsMapOutput)
}

type ATPSecurityExceptionsOutput struct{ *pulumi.OutputState }

func (ATPSecurityExceptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ATPSecurityExceptions)(nil)).Elem()
}

func (o ATPSecurityExceptionsOutput) ToATPSecurityExceptionsOutput() ATPSecurityExceptionsOutput {
	return o
}

func (o ATPSecurityExceptionsOutput) ToATPSecurityExceptionsOutputWithContext(ctx context.Context) ATPSecurityExceptionsOutput {
	return o
}

func (o ATPSecurityExceptionsOutput) BypassUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ATPSecurityExceptions) pulumi.StringArrayOutput { return v.BypassUrls }).(pulumi.StringArrayOutput)
}

type ATPSecurityExceptionsArrayOutput struct{ *pulumi.OutputState }

func (ATPSecurityExceptionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ATPSecurityExceptions)(nil)).Elem()
}

func (o ATPSecurityExceptionsArrayOutput) ToATPSecurityExceptionsArrayOutput() ATPSecurityExceptionsArrayOutput {
	return o
}

func (o ATPSecurityExceptionsArrayOutput) ToATPSecurityExceptionsArrayOutputWithContext(ctx context.Context) ATPSecurityExceptionsArrayOutput {
	return o
}

func (o ATPSecurityExceptionsArrayOutput) Index(i pulumi.IntInput) ATPSecurityExceptionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ATPSecurityExceptions {
		return vs[0].([]*ATPSecurityExceptions)[vs[1].(int)]
	}).(ATPSecurityExceptionsOutput)
}

type ATPSecurityExceptionsMapOutput struct{ *pulumi.OutputState }

func (ATPSecurityExceptionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ATPSecurityExceptions)(nil)).Elem()
}

func (o ATPSecurityExceptionsMapOutput) ToATPSecurityExceptionsMapOutput() ATPSecurityExceptionsMapOutput {
	return o
}

func (o ATPSecurityExceptionsMapOutput) ToATPSecurityExceptionsMapOutputWithContext(ctx context.Context) ATPSecurityExceptionsMapOutput {
	return o
}

func (o ATPSecurityExceptionsMapOutput) MapIndex(k pulumi.StringInput) ATPSecurityExceptionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ATPSecurityExceptions {
		return vs[0].(map[string]*ATPSecurityExceptions)[vs[1].(string)]
	}).(ATPSecurityExceptionsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ATPSecurityExceptionsInput)(nil)).Elem(), &ATPSecurityExceptions{})
	pulumi.RegisterInputType(reflect.TypeOf((*ATPSecurityExceptionsArrayInput)(nil)).Elem(), ATPSecurityExceptionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ATPSecurityExceptionsMapInput)(nil)).Elem(), ATPSecurityExceptionsMap{})
	pulumi.RegisterOutputType(ATPSecurityExceptionsOutput{})
	pulumi.RegisterOutputType(ATPSecurityExceptionsArrayOutput{})
	pulumi.RegisterOutputType(ATPSecurityExceptionsMapOutput{})
}
