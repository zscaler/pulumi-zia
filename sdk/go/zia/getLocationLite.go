// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// Use the **zia_location_lite** data source to get information about a location in lite mode option available in the Zscaler Internet Access. This data source can be used to retrieve the Road Warrior location to then associated with one of the following resources: “URLFilteringRules“, “FirewallFilteringRule“ and “DLPWebRules`
func GetLocationLite(ctx *pulumi.Context, args *GetLocationLiteArgs, opts ...pulumi.InvokeOption) (*GetLocationLiteResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetLocationLiteResult
	err := ctx.Invoke("zia:index/getLocationLite:getLocationLite", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLocationLite.
type GetLocationLiteArgs struct {
	// (Boolean)
	DigestAuthEnabled *bool `pulumi:"digestAuthEnabled"`
	// (Boolean)
	KerberosAuth *bool `pulumi:"kerberosAuth"`
	// Location group name
	Name *string `pulumi:"name"`
}

// A collection of values returned by getLocationLite.
type GetLocationLiteResult struct {
	// (Boolean) For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.
	AupBlockInternetUntilAccepted bool `pulumi:"aupBlockInternetUntilAccepted"`
	// (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
	AupEnabled bool `pulumi:"aupEnabled"`
	// (Boolean) For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.
	AupForceSslInspection bool `pulumi:"aupForceSslInspection"`
	// (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
	CautionEnabled bool `pulumi:"cautionEnabled"`
	// (Boolean)
	DigestAuthEnabled *bool `pulumi:"digestAuthEnabled"`
	// (Boolean)
	EcLocation bool `pulumi:"ecLocation"`
	Id         int  `pulumi:"id"`
	// (Boolean) Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
	IpsControl bool `pulumi:"ipsControl"`
	// (Number) If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.
	Ipv6Enabled bool `pulumi:"ipv6Enabled"`
	// (Boolean)
	KerberosAuth *bool   `pulumi:"kerberosAuth"`
	Name         *string `pulumi:"name"`
	// (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
	OfwEnabled bool `pulumi:"ofwEnabled"`
	// (Boolean) If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true
	Other6SubLocation bool `pulumi:"other6SubLocation"`
	// (Boolean) If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.
	OtherSubLocation bool `pulumi:"otherSubLocation"`
	// (Number) - Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`
	ParentId int `pulumi:"parentId"`
	// (Boolean) Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
	SurrogateIp bool `pulumi:"surrogateIp"`
	// (Boolean) Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
	SurrogateIpEnforcedForKnownBrowsers bool `pulumi:"surrogateIpEnforcedForKnownBrowsers"`
	// (String) Timezone of the location. If not specified, it defaults to GMT.
	Tz string `pulumi:"tz"`
	// (Boolean) Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
	XffForwardEnabled bool `pulumi:"xffForwardEnabled"`
	// (Boolean) This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
	ZappSslScanEnabled bool `pulumi:"zappSslScanEnabled"`
}

func GetLocationLiteOutput(ctx *pulumi.Context, args GetLocationLiteOutputArgs, opts ...pulumi.InvokeOption) GetLocationLiteResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetLocationLiteResultOutput, error) {
			args := v.(GetLocationLiteArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("zia:index/getLocationLite:getLocationLite", args, GetLocationLiteResultOutput{}, options).(GetLocationLiteResultOutput), nil
		}).(GetLocationLiteResultOutput)
}

// A collection of arguments for invoking getLocationLite.
type GetLocationLiteOutputArgs struct {
	// (Boolean)
	DigestAuthEnabled pulumi.BoolPtrInput `pulumi:"digestAuthEnabled"`
	// (Boolean)
	KerberosAuth pulumi.BoolPtrInput `pulumi:"kerberosAuth"`
	// Location group name
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetLocationLiteOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLocationLiteArgs)(nil)).Elem()
}

// A collection of values returned by getLocationLite.
type GetLocationLiteResultOutput struct{ *pulumi.OutputState }

func (GetLocationLiteResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLocationLiteResult)(nil)).Elem()
}

func (o GetLocationLiteResultOutput) ToGetLocationLiteResultOutput() GetLocationLiteResultOutput {
	return o
}

func (o GetLocationLiteResultOutput) ToGetLocationLiteResultOutputWithContext(ctx context.Context) GetLocationLiteResultOutput {
	return o
}

// (Boolean) For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.
func (o GetLocationLiteResultOutput) AupBlockInternetUntilAccepted() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLocationLiteResult) bool { return v.AupBlockInternetUntilAccepted }).(pulumi.BoolOutput)
}

// (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
func (o GetLocationLiteResultOutput) AupEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLocationLiteResult) bool { return v.AupEnabled }).(pulumi.BoolOutput)
}

// (Boolean) For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.
func (o GetLocationLiteResultOutput) AupForceSslInspection() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLocationLiteResult) bool { return v.AupForceSslInspection }).(pulumi.BoolOutput)
}

// (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
func (o GetLocationLiteResultOutput) CautionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLocationLiteResult) bool { return v.CautionEnabled }).(pulumi.BoolOutput)
}

// (Boolean)
func (o GetLocationLiteResultOutput) DigestAuthEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetLocationLiteResult) *bool { return v.DigestAuthEnabled }).(pulumi.BoolPtrOutput)
}

// (Boolean)
func (o GetLocationLiteResultOutput) EcLocation() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLocationLiteResult) bool { return v.EcLocation }).(pulumi.BoolOutput)
}

func (o GetLocationLiteResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetLocationLiteResult) int { return v.Id }).(pulumi.IntOutput)
}

// (Boolean) Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
func (o GetLocationLiteResultOutput) IpsControl() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLocationLiteResult) bool { return v.IpsControl }).(pulumi.BoolOutput)
}

// (Number) If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.
func (o GetLocationLiteResultOutput) Ipv6Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLocationLiteResult) bool { return v.Ipv6Enabled }).(pulumi.BoolOutput)
}

// (Boolean)
func (o GetLocationLiteResultOutput) KerberosAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetLocationLiteResult) *bool { return v.KerberosAuth }).(pulumi.BoolPtrOutput)
}

func (o GetLocationLiteResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetLocationLiteResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
func (o GetLocationLiteResultOutput) OfwEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLocationLiteResult) bool { return v.OfwEnabled }).(pulumi.BoolOutput)
}

// (Boolean) If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true
func (o GetLocationLiteResultOutput) Other6SubLocation() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLocationLiteResult) bool { return v.Other6SubLocation }).(pulumi.BoolOutput)
}

// (Boolean) If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.
func (o GetLocationLiteResultOutput) OtherSubLocation() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLocationLiteResult) bool { return v.OtherSubLocation }).(pulumi.BoolOutput)
}

// (Number) - Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`
func (o GetLocationLiteResultOutput) ParentId() pulumi.IntOutput {
	return o.ApplyT(func(v GetLocationLiteResult) int { return v.ParentId }).(pulumi.IntOutput)
}

// (Boolean) Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
func (o GetLocationLiteResultOutput) SurrogateIp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLocationLiteResult) bool { return v.SurrogateIp }).(pulumi.BoolOutput)
}

// (Boolean) Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
func (o GetLocationLiteResultOutput) SurrogateIpEnforcedForKnownBrowsers() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLocationLiteResult) bool { return v.SurrogateIpEnforcedForKnownBrowsers }).(pulumi.BoolOutput)
}

// (String) Timezone of the location. If not specified, it defaults to GMT.
func (o GetLocationLiteResultOutput) Tz() pulumi.StringOutput {
	return o.ApplyT(func(v GetLocationLiteResult) string { return v.Tz }).(pulumi.StringOutput)
}

// (Boolean) Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
func (o GetLocationLiteResultOutput) XffForwardEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLocationLiteResult) bool { return v.XffForwardEnabled }).(pulumi.BoolOutput)
}

// (Boolean) This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
func (o GetLocationLiteResultOutput) ZappSslScanEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLocationLiteResult) bool { return v.ZappSslScanEnabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(GetLocationLiteResultOutput{})
}
