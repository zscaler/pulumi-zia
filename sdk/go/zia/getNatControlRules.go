// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/about-nat-control)
// * [API documentation](https://help.zscaler.com/zia/nat-control-policy#/dnatRules-get)
//
// Use the **zia_nat_control_rules** data source to get information about a NAT Control rule available in the Zscaler Internet Access.
//
// ## Example Usage
//
// ### By Name
//
// ### By ID
func LookupNatControlRules(ctx *pulumi.Context, args *LookupNatControlRulesArgs, opts ...pulumi.InvokeOption) (*LookupNatControlRulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNatControlRulesResult
	err := ctx.Invoke("zia:index/getNatControlRules:getNatControlRules", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNatControlRules.
type LookupNatControlRulesArgs struct {
	// A unique identifier assigned to the forwarding rule.
	Id *int `pulumi:"id"`
	// The name of the forwarding rule.
	Name *string `pulumi:"name"`
	// (string) - FQDN to which the traffic is redirected to when the DNAT rule is triggered. This is mutually exclusive to redirect IP.
	RedirectFqdn *string `pulumi:"redirectFqdn"`
	// (string) - IP address to which the traffic is redirected to when the DNAT rule is triggered. If not set, no redirection is done to the specific IP address.
	RedirectIp *string `pulumi:"redirectIp"`
	// (string) -  Port to which the traffic is redirected to when the DNAT rule is triggered. If not set, no redirection is done to the specific port.
	RedirectPort *int `pulumi:"redirectPort"`
}

// A collection of values returned by getNatControlRules.
type LookupNatControlRulesResult struct {
	// (Boolean) If set to true, the default rule is applied
	DefaultRule bool `pulumi:"defaultRule"`
	// (Block List, Max: 1) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
	Departments []GetNatControlRulesDepartment `pulumi:"departments"`
	// (string) - Additional information about the forwarding rule
	Description string `pulumi:"description"`
	// ** - (List of String) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
	DestAddresses []string `pulumi:"destAddresses"`
	// ** - (List of String) Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries.
	DestCountries []string `pulumi:"destCountries"`
	// ** - (List of String) IP address categories of destination for which the DNAT rule is applicable. If not set, the rule is not restricted to specific destination IP categories.
	DestIpCategories []string `pulumi:"destIpCategories"`
	// ** - (Block List, Max: 1) Any number of destination IP address groups that you want to control with this rule.
	DestIpGroups []GetNatControlRulesDestIpGroup `pulumi:"destIpGroups"`
	// ** - (Block List, Max: 1) Any number of destination IPv6 address groups that you want to control with this rule.
	DestIpv6Groups []GetNatControlRulesDestIpv6Group `pulumi:"destIpv6Groups"`
	DeviceGroups   []GetNatControlRulesDeviceGroup   `pulumi:"deviceGroups"`
	Devices        []GetNatControlRulesDevice        `pulumi:"devices"`
	// (Boolean)
	EnableFullLogging bool `pulumi:"enableFullLogging"`
	// (Block List, Max: 1) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups []GetNatControlRulesGroup `pulumi:"groups"`
	// (int) The ID of this resource.
	Id int `pulumi:"id"`
	// (Block List, Max: 1) Labels that are applicable to the rule.
	Labels           []GetNatControlRulesLabel          `pulumi:"labels"`
	LastModifiedBies []GetNatControlRulesLastModifiedBy `pulumi:"lastModifiedBies"`
	// (Number)
	LastModifiedTime int `pulumi:"lastModifiedTime"`
	// (Block List, Max: 1) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups []GetNatControlRulesLocationGroup `pulumi:"locationGroups"`
	// (Block List, Max: 1) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
	Locations []GetNatControlRulesLocation `pulumi:"locations"`
	// (String) The configured name of the entity
	Name string `pulumi:"name"`
	// (Block List, Max: 1) Any number of predefined or custom network service groups to which the rule applies.
	NwServiceGroups []GetNatControlRulesNwServiceGroup `pulumi:"nwServiceGroups"`
	// (Block List, Max: 1) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
	NwServices []GetNatControlRulesNwService `pulumi:"nwServices"`
	// (string) - The order of execution for the forwarding rule order.
	Order int `pulumi:"order"`
	// (Boolean) If set to true, a predefined rule is applied
	Predefined bool `pulumi:"predefined"`
	Rank       int  `pulumi:"rank"`
	// (string) - FQDN to which the traffic is redirected to when the DNAT rule is triggered. This is mutually exclusive to redirect IP.
	RedirectFqdn *string `pulumi:"redirectFqdn"`
	// (string) - IP address to which the traffic is redirected to when the DNAT rule is triggered. If not set, no redirection is done to the specific IP address.
	RedirectIp *string `pulumi:"redirectIp"`
	// (string) -  Port to which the traffic is redirected to when the DNAT rule is triggered. If not set, no redirection is done to the specific port.
	RedirectPort  *int     `pulumi:"redirectPort"`
	ResCategories []string `pulumi:"resCategories"`
	// (Block List, Max: 1) Any number of source IP address groups that you want to control with this rule.
	SrcIpGroups []GetNatControlRulesSrcIpGroup `pulumi:"srcIpGroups"`
	// (List of String) You can enter individual IP addresses, subnets, or address ranges.
	SrcIps []string `pulumi:"srcIps"`
	// (Block List, Max: 1) Any number of source IPv6 address groups that you want to control with this rule.
	SrcIpv6Groups []GetNatControlRulesSrcIpv6Group `pulumi:"srcIpv6Groups"`
	State         string                           `pulumi:"state"`
	// (Block List, Max: 1) You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows []GetNatControlRulesTimeWindow `pulumi:"timeWindows"`
	// (Block List, Max: 1) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
	Users []GetNatControlRulesUser `pulumi:"users"`
}

func LookupNatControlRulesOutput(ctx *pulumi.Context, args LookupNatControlRulesOutputArgs, opts ...pulumi.InvokeOption) LookupNatControlRulesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNatControlRulesResultOutput, error) {
			args := v.(LookupNatControlRulesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("zia:index/getNatControlRules:getNatControlRules", args, LookupNatControlRulesResultOutput{}, options).(LookupNatControlRulesResultOutput), nil
		}).(LookupNatControlRulesResultOutput)
}

// A collection of arguments for invoking getNatControlRules.
type LookupNatControlRulesOutputArgs struct {
	// A unique identifier assigned to the forwarding rule.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The name of the forwarding rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (string) - FQDN to which the traffic is redirected to when the DNAT rule is triggered. This is mutually exclusive to redirect IP.
	RedirectFqdn pulumi.StringPtrInput `pulumi:"redirectFqdn"`
	// (string) - IP address to which the traffic is redirected to when the DNAT rule is triggered. If not set, no redirection is done to the specific IP address.
	RedirectIp pulumi.StringPtrInput `pulumi:"redirectIp"`
	// (string) -  Port to which the traffic is redirected to when the DNAT rule is triggered. If not set, no redirection is done to the specific port.
	RedirectPort pulumi.IntPtrInput `pulumi:"redirectPort"`
}

func (LookupNatControlRulesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNatControlRulesArgs)(nil)).Elem()
}

// A collection of values returned by getNatControlRules.
type LookupNatControlRulesResultOutput struct{ *pulumi.OutputState }

func (LookupNatControlRulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNatControlRulesResult)(nil)).Elem()
}

func (o LookupNatControlRulesResultOutput) ToLookupNatControlRulesResultOutput() LookupNatControlRulesResultOutput {
	return o
}

func (o LookupNatControlRulesResultOutput) ToLookupNatControlRulesResultOutputWithContext(ctx context.Context) LookupNatControlRulesResultOutput {
	return o
}

// (Boolean) If set to true, the default rule is applied
func (o LookupNatControlRulesResultOutput) DefaultRule() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) bool { return v.DefaultRule }).(pulumi.BoolOutput)
}

// (Block List, Max: 1) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
func (o LookupNatControlRulesResultOutput) Departments() GetNatControlRulesDepartmentArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesDepartment { return v.Departments }).(GetNatControlRulesDepartmentArrayOutput)
}

// (string) - Additional information about the forwarding rule
func (o LookupNatControlRulesResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) string { return v.Description }).(pulumi.StringOutput)
}

// ** - (List of String) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
func (o LookupNatControlRulesResultOutput) DestAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []string { return v.DestAddresses }).(pulumi.StringArrayOutput)
}

// ** - (List of String) Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries.
func (o LookupNatControlRulesResultOutput) DestCountries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []string { return v.DestCountries }).(pulumi.StringArrayOutput)
}

// ** - (List of String) IP address categories of destination for which the DNAT rule is applicable. If not set, the rule is not restricted to specific destination IP categories.
func (o LookupNatControlRulesResultOutput) DestIpCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []string { return v.DestIpCategories }).(pulumi.StringArrayOutput)
}

// ** - (Block List, Max: 1) Any number of destination IP address groups that you want to control with this rule.
func (o LookupNatControlRulesResultOutput) DestIpGroups() GetNatControlRulesDestIpGroupArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesDestIpGroup { return v.DestIpGroups }).(GetNatControlRulesDestIpGroupArrayOutput)
}

// ** - (Block List, Max: 1) Any number of destination IPv6 address groups that you want to control with this rule.
func (o LookupNatControlRulesResultOutput) DestIpv6Groups() GetNatControlRulesDestIpv6GroupArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesDestIpv6Group { return v.DestIpv6Groups }).(GetNatControlRulesDestIpv6GroupArrayOutput)
}

func (o LookupNatControlRulesResultOutput) DeviceGroups() GetNatControlRulesDeviceGroupArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesDeviceGroup { return v.DeviceGroups }).(GetNatControlRulesDeviceGroupArrayOutput)
}

func (o LookupNatControlRulesResultOutput) Devices() GetNatControlRulesDeviceArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesDevice { return v.Devices }).(GetNatControlRulesDeviceArrayOutput)
}

// (Boolean)
func (o LookupNatControlRulesResultOutput) EnableFullLogging() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) bool { return v.EnableFullLogging }).(pulumi.BoolOutput)
}

// (Block List, Max: 1) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
func (o LookupNatControlRulesResultOutput) Groups() GetNatControlRulesGroupArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesGroup { return v.Groups }).(GetNatControlRulesGroupArrayOutput)
}

// (int) The ID of this resource.
func (o LookupNatControlRulesResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) int { return v.Id }).(pulumi.IntOutput)
}

// (Block List, Max: 1) Labels that are applicable to the rule.
func (o LookupNatControlRulesResultOutput) Labels() GetNatControlRulesLabelArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesLabel { return v.Labels }).(GetNatControlRulesLabelArrayOutput)
}

func (o LookupNatControlRulesResultOutput) LastModifiedBies() GetNatControlRulesLastModifiedByArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesLastModifiedBy { return v.LastModifiedBies }).(GetNatControlRulesLastModifiedByArrayOutput)
}

// (Number)
func (o LookupNatControlRulesResultOutput) LastModifiedTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) int { return v.LastModifiedTime }).(pulumi.IntOutput)
}

// (Block List, Max: 1) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
func (o LookupNatControlRulesResultOutput) LocationGroups() GetNatControlRulesLocationGroupArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesLocationGroup { return v.LocationGroups }).(GetNatControlRulesLocationGroupArrayOutput)
}

// (Block List, Max: 1) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
func (o LookupNatControlRulesResultOutput) Locations() GetNatControlRulesLocationArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesLocation { return v.Locations }).(GetNatControlRulesLocationArrayOutput)
}

// (String) The configured name of the entity
func (o LookupNatControlRulesResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) string { return v.Name }).(pulumi.StringOutput)
}

// (Block List, Max: 1) Any number of predefined or custom network service groups to which the rule applies.
func (o LookupNatControlRulesResultOutput) NwServiceGroups() GetNatControlRulesNwServiceGroupArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesNwServiceGroup { return v.NwServiceGroups }).(GetNatControlRulesNwServiceGroupArrayOutput)
}

// (Block List, Max: 1) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
func (o LookupNatControlRulesResultOutput) NwServices() GetNatControlRulesNwServiceArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesNwService { return v.NwServices }).(GetNatControlRulesNwServiceArrayOutput)
}

// (string) - The order of execution for the forwarding rule order.
func (o LookupNatControlRulesResultOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) int { return v.Order }).(pulumi.IntOutput)
}

// (Boolean) If set to true, a predefined rule is applied
func (o LookupNatControlRulesResultOutput) Predefined() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) bool { return v.Predefined }).(pulumi.BoolOutput)
}

func (o LookupNatControlRulesResultOutput) Rank() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) int { return v.Rank }).(pulumi.IntOutput)
}

// (string) - FQDN to which the traffic is redirected to when the DNAT rule is triggered. This is mutually exclusive to redirect IP.
func (o LookupNatControlRulesResultOutput) RedirectFqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) *string { return v.RedirectFqdn }).(pulumi.StringPtrOutput)
}

// (string) - IP address to which the traffic is redirected to when the DNAT rule is triggered. If not set, no redirection is done to the specific IP address.
func (o LookupNatControlRulesResultOutput) RedirectIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) *string { return v.RedirectIp }).(pulumi.StringPtrOutput)
}

// (string) -  Port to which the traffic is redirected to when the DNAT rule is triggered. If not set, no redirection is done to the specific port.
func (o LookupNatControlRulesResultOutput) RedirectPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) *int { return v.RedirectPort }).(pulumi.IntPtrOutput)
}

func (o LookupNatControlRulesResultOutput) ResCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []string { return v.ResCategories }).(pulumi.StringArrayOutput)
}

// (Block List, Max: 1) Any number of source IP address groups that you want to control with this rule.
func (o LookupNatControlRulesResultOutput) SrcIpGroups() GetNatControlRulesSrcIpGroupArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesSrcIpGroup { return v.SrcIpGroups }).(GetNatControlRulesSrcIpGroupArrayOutput)
}

// (List of String) You can enter individual IP addresses, subnets, or address ranges.
func (o LookupNatControlRulesResultOutput) SrcIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []string { return v.SrcIps }).(pulumi.StringArrayOutput)
}

// (Block List, Max: 1) Any number of source IPv6 address groups that you want to control with this rule.
func (o LookupNatControlRulesResultOutput) SrcIpv6Groups() GetNatControlRulesSrcIpv6GroupArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesSrcIpv6Group { return v.SrcIpv6Groups }).(GetNatControlRulesSrcIpv6GroupArrayOutput)
}

func (o LookupNatControlRulesResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) string { return v.State }).(pulumi.StringOutput)
}

// (Block List, Max: 1) You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
func (o LookupNatControlRulesResultOutput) TimeWindows() GetNatControlRulesTimeWindowArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesTimeWindow { return v.TimeWindows }).(GetNatControlRulesTimeWindowArrayOutput)
}

// (Block List, Max: 1) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
func (o LookupNatControlRulesResultOutput) Users() GetNatControlRulesUserArrayOutput {
	return o.ApplyT(func(v LookupNatControlRulesResult) []GetNatControlRulesUser { return v.Users }).(GetNatControlRulesUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNatControlRulesResultOutput{})
}
