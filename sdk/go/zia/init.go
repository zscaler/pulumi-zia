// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "zia:index/activationStatus:ActivationStatus":
		r = &ActivationStatus{}
	case "zia:index/adminUsers:AdminUsers":
		r = &AdminUsers{}
	case "zia:index/authSettingsURLs:AuthSettingsURLs":
		r = &AuthSettingsURLs{}
	case "zia:index/dLPDictionaries:DLPDictionaries":
		r = &DLPDictionaries{}
	case "zia:index/dLPEngines:DLPEngines":
		r = &DLPEngines{}
	case "zia:index/dLPNotificationTemplates:DLPNotificationTemplates":
		r = &DLPNotificationTemplates{}
	case "zia:index/dLPWebRules:DLPWebRules":
		r = &DLPWebRules{}
	case "zia:index/firewallFilteringApplicationGroups:FirewallFilteringApplicationGroups":
		r = &FirewallFilteringApplicationGroups{}
	case "zia:index/firewallFilteringDestinationGroups:FirewallFilteringDestinationGroups":
		r = &FirewallFilteringDestinationGroups{}
	case "zia:index/firewallFilteringNetworkServices:FirewallFilteringNetworkServices":
		r = &FirewallFilteringNetworkServices{}
	case "zia:index/firewallFilteringRule:FirewallFilteringRule":
		r = &FirewallFilteringRule{}
	case "zia:index/firewallFilteringServiceGroups:FirewallFilteringServiceGroups":
		r = &FirewallFilteringServiceGroups{}
	case "zia:index/firewallFilteringSourceGroups:FirewallFilteringSourceGroups":
		r = &FirewallFilteringSourceGroups{}
	case "zia:index/forwardingControlRule:ForwardingControlRule":
		r = &ForwardingControlRule{}
	case "zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway":
		r = &ForwardingControlZPAGateway{}
	case "zia:index/locationManagement:LocationManagement":
		r = &LocationManagement{}
	case "zia:index/ruleLabels:RuleLabels":
		r = &RuleLabels{}
	case "zia:index/sandboxBehavioralAnalysis:SandboxBehavioralAnalysis":
		r = &SandboxBehavioralAnalysis{}
	case "zia:index/sandboxFileSubmission:SandboxFileSubmission":
		r = &SandboxFileSubmission{}
	case "zia:index/securitySettings:SecuritySettings":
		r = &SecuritySettings{}
	case "zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel":
		r = &TrafficForwardingGRETunnel{}
	case "zia:index/trafficForwardingStaticIP:TrafficForwardingStaticIP":
		r = &TrafficForwardingStaticIP{}
	case "zia:index/trafficForwardingVPNCredentials:TrafficForwardingVPNCredentials":
		r = &TrafficForwardingVPNCredentials{}
	case "zia:index/uRLCategories:URLCategories":
		r = &URLCategories{}
	case "zia:index/uRLFilteringRules:URLFilteringRules":
		r = &URLFilteringRules{}
	case "zia:index/userManagement:UserManagement":
		r = &UserManagement{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:zia" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"zia",
		"index/activationStatus",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/adminUsers",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/authSettingsURLs",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/dLPDictionaries",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/dLPEngines",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/dLPNotificationTemplates",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/dLPWebRules",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/firewallFilteringApplicationGroups",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/firewallFilteringDestinationGroups",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/firewallFilteringNetworkServices",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/firewallFilteringRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/firewallFilteringServiceGroups",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/firewallFilteringSourceGroups",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/forwardingControlRule",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/forwardingControlZPAGateway",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/locationManagement",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/ruleLabels",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/sandboxBehavioralAnalysis",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/sandboxFileSubmission",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/securitySettings",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/trafficForwardingGRETunnel",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/trafficForwardingStaticIP",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/trafficForwardingVPNCredentials",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/uRLCategories",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/uRLFilteringRules",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"zia",
		"index/userManagement",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"zia",
		&pkg{version},
	)
}
