// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// Use the **zia_cloud_applications** data source to Retrieves a list of Predefined and User Defined Cloud Applications associated with the DLP rules, Cloud App Control rules, Advanced Settings, Bandwidth Classes, File Type Control and SSL Inspection rules. The returned information can be associated with the attribute `cloudApplications` on supported rules.
//
// ## Cloud Application Category App Class Matrix
//
// **Note**: Refer to this matrix when configuring types vs actions for each specific rules
//
// |             App Class                       |
// |:-------------------------------------------:|
// |---------------------------------------------|
// |               `WEBMAIL`                     |
// |           `SOCIAL_NETWORKING`               |
// |              `STREAMING`                    |
// |                 `P2P`                       |
// |            `INSTANT_MESSAGING`              |
// |               `WEB_SEARCH`                  |
// |            `GENERAL_BROWSING`               |
// |               `ADMINISTRATION`              |
// |               `ENTERPRISE_COLLABORATION`    |
// |               `BUSINESS_PRODUCTIVITY`       |
// |               `SALES_AND_MARKETING`         |
// |               `SYSTEM_AND_DEVELOPMENT`      |
// |               `CONSUMER`                    |
// |               `FILE_SHARE`                  |
// |               `HOSTING_PROVIDER`            |
// |               `IT_SERVICES`                 |
// |               `DNS_OVER_HTTPS`              |
// |               `HUMAN_RESOURCES`             |
// |               `LEGAL`                       |
// |               `HEALTH_CARE`                 |
// |               `FINANCE`                     |
// |               `CUSTOM_CAPP`                 |
// |               `AI_ML`                       |
// |---------------------------------------------|
func GetCloudApplications(ctx *pulumi.Context, args *GetCloudApplicationsArgs, opts ...pulumi.InvokeOption) (*GetCloudApplicationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCloudApplicationsResult
	err := ctx.Invoke("zia:index/getCloudApplications:getCloudApplications", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCloudApplications.
type GetCloudApplicationsArgs struct {
	// (Set of Strings) Filter application by application category
	AppClasses []string `pulumi:"appClasses"`
	// (String) Cloud application name
	AppName    *string `pulumi:"appName"`
	PolicyType string  `pulumi:"policyType"`
}

// A collection of values returned by getCloudApplications.
type GetCloudApplicationsResult struct {
	// (Set of Strings) Filter application by application category
	AppClasses []string `pulumi:"appClasses"`
	// (String) Cloud application name
	AppName      *string                           `pulumi:"appName"`
	Applications []GetCloudApplicationsApplication `pulumi:"applications"`
	// The provider-assigned unique ID for this managed resource.
	Id         string `pulumi:"id"`
	PolicyType string `pulumi:"policyType"`
}

func GetCloudApplicationsOutput(ctx *pulumi.Context, args GetCloudApplicationsOutputArgs, opts ...pulumi.InvokeOption) GetCloudApplicationsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetCloudApplicationsResultOutput, error) {
			args := v.(GetCloudApplicationsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("zia:index/getCloudApplications:getCloudApplications", args, GetCloudApplicationsResultOutput{}, options).(GetCloudApplicationsResultOutput), nil
		}).(GetCloudApplicationsResultOutput)
}

// A collection of arguments for invoking getCloudApplications.
type GetCloudApplicationsOutputArgs struct {
	// (Set of Strings) Filter application by application category
	AppClasses pulumi.StringArrayInput `pulumi:"appClasses"`
	// (String) Cloud application name
	AppName    pulumi.StringPtrInput `pulumi:"appName"`
	PolicyType pulumi.StringInput    `pulumi:"policyType"`
}

func (GetCloudApplicationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCloudApplicationsArgs)(nil)).Elem()
}

// A collection of values returned by getCloudApplications.
type GetCloudApplicationsResultOutput struct{ *pulumi.OutputState }

func (GetCloudApplicationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCloudApplicationsResult)(nil)).Elem()
}

func (o GetCloudApplicationsResultOutput) ToGetCloudApplicationsResultOutput() GetCloudApplicationsResultOutput {
	return o
}

func (o GetCloudApplicationsResultOutput) ToGetCloudApplicationsResultOutputWithContext(ctx context.Context) GetCloudApplicationsResultOutput {
	return o
}

// (Set of Strings) Filter application by application category
func (o GetCloudApplicationsResultOutput) AppClasses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCloudApplicationsResult) []string { return v.AppClasses }).(pulumi.StringArrayOutput)
}

// (String) Cloud application name
func (o GetCloudApplicationsResultOutput) AppName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCloudApplicationsResult) *string { return v.AppName }).(pulumi.StringPtrOutput)
}

func (o GetCloudApplicationsResultOutput) Applications() GetCloudApplicationsApplicationArrayOutput {
	return o.ApplyT(func(v GetCloudApplicationsResult) []GetCloudApplicationsApplication { return v.Applications }).(GetCloudApplicationsApplicationArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCloudApplicationsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudApplicationsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCloudApplicationsResultOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCloudApplicationsResult) string { return v.PolicyType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCloudApplicationsResultOutput{})
}
