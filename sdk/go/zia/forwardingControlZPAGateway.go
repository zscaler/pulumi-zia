// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//	"github.com/zscaler/pulumi-zpa/sdk/go/zpa"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			thisServerGroup, err := zpa.LookupServerGroup(ctx, &zpa.LookupServerGroupArgs{
//				Name: pulumi.StringRef("Server_Group_IP_Source_Anchoring"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			this1, err := zpa.LookupApplicationSegment(ctx, &zpa.LookupApplicationSegmentArgs{
//				Name: pulumi.StringRef("App_Segment_IP_Source_Anchoring"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			this2, err := zpa.LookupApplicationSegment(ctx, &zpa.LookupApplicationSegmentArgs{
//				Name: pulumi.StringRef("App_Segment_IP_Source_Anchoring2"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = zia.NewForwardingControlZPAGateway(ctx, "thisForwardingControlZPAGateway", &zia.ForwardingControlZPAGatewayArgs{
//				Description: pulumi.String("ZPA_GW01"),
//				Type:        pulumi.String("ZPA"),
//				ZpaServerGroup: &zia.ForwardingControlZPAGatewayZpaServerGroupArgs{
//					ExternalId: pulumi.String(thisServerGroup.Id),
//					Name:       pulumi.String(thisServerGroup.Id),
//				},
//				ZpaAppSegments: zia.ForwardingControlZPAGatewayZpaAppSegmentArray{
//					&zia.ForwardingControlZPAGatewayZpaAppSegmentArgs{
//						ExternalId: pulumi.String(this1.Id),
//						Name:       pulumi.String(this1.Name),
//					},
//					&zia.ForwardingControlZPAGatewayZpaAppSegmentArgs{
//						ExternalId: pulumi.String(this2.Id),
//						Name:       pulumi.String(this2.Name),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **forwarding_control_zpa_gateway** can be imported by using `<GATEWAY_ID>` or `<GATEWAY_NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway example <gateway_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway example <gateway_name>
// ```
type ForwardingControlZPAGateway struct {
	pulumi.CustomResourceState

	// (string) - Additional details about the ZPA gateway
	Description pulumi.StringPtrOutput `pulumi:"description"`
	GatewayId   pulumi.IntOutput       `pulumi:"gatewayId"`
	// The configured name of the entity
	Name pulumi.StringOutput `pulumi:"name"`
	// (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// The ZPA Server Group that is configured for Source IP Anchoring
	ZpaAppSegments ForwardingControlZPAGatewayZpaAppSegmentArrayOutput `pulumi:"zpaAppSegments"`
	// The ZPA Server Group that is configured for Source IP Anchoring
	ZpaServerGroup ForwardingControlZPAGatewayZpaServerGroupOutput `pulumi:"zpaServerGroup"`
}

// NewForwardingControlZPAGateway registers a new resource with the given unique name, arguments, and options.
func NewForwardingControlZPAGateway(ctx *pulumi.Context,
	name string, args *ForwardingControlZPAGatewayArgs, opts ...pulumi.ResourceOption) (*ForwardingControlZPAGateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ZpaAppSegments == nil {
		return nil, errors.New("invalid value for required argument 'ZpaAppSegments'")
	}
	if args.ZpaServerGroup == nil {
		return nil, errors.New("invalid value for required argument 'ZpaServerGroup'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ForwardingControlZPAGateway
	err := ctx.RegisterResource("zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetForwardingControlZPAGateway gets an existing ForwardingControlZPAGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetForwardingControlZPAGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ForwardingControlZPAGatewayState, opts ...pulumi.ResourceOption) (*ForwardingControlZPAGateway, error) {
	var resource ForwardingControlZPAGateway
	err := ctx.ReadResource("zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ForwardingControlZPAGateway resources.
type forwardingControlZPAGatewayState struct {
	// (string) - Additional details about the ZPA gateway
	Description *string `pulumi:"description"`
	GatewayId   *int    `pulumi:"gatewayId"`
	// The configured name of the entity
	Name *string `pulumi:"name"`
	// (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
	Type *string `pulumi:"type"`
	// The ZPA Server Group that is configured for Source IP Anchoring
	ZpaAppSegments []ForwardingControlZPAGatewayZpaAppSegment `pulumi:"zpaAppSegments"`
	// The ZPA Server Group that is configured for Source IP Anchoring
	ZpaServerGroup *ForwardingControlZPAGatewayZpaServerGroup `pulumi:"zpaServerGroup"`
}

type ForwardingControlZPAGatewayState struct {
	// (string) - Additional details about the ZPA gateway
	Description pulumi.StringPtrInput
	GatewayId   pulumi.IntPtrInput
	// The configured name of the entity
	Name pulumi.StringPtrInput
	// (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
	Type pulumi.StringPtrInput
	// The ZPA Server Group that is configured for Source IP Anchoring
	ZpaAppSegments ForwardingControlZPAGatewayZpaAppSegmentArrayInput
	// The ZPA Server Group that is configured for Source IP Anchoring
	ZpaServerGroup ForwardingControlZPAGatewayZpaServerGroupPtrInput
}

func (ForwardingControlZPAGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*forwardingControlZPAGatewayState)(nil)).Elem()
}

type forwardingControlZPAGatewayArgs struct {
	// (string) - Additional details about the ZPA gateway
	Description *string `pulumi:"description"`
	// The configured name of the entity
	Name *string `pulumi:"name"`
	// (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
	Type *string `pulumi:"type"`
	// The ZPA Server Group that is configured for Source IP Anchoring
	ZpaAppSegments []ForwardingControlZPAGatewayZpaAppSegment `pulumi:"zpaAppSegments"`
	// The ZPA Server Group that is configured for Source IP Anchoring
	ZpaServerGroup ForwardingControlZPAGatewayZpaServerGroup `pulumi:"zpaServerGroup"`
}

// The set of arguments for constructing a ForwardingControlZPAGateway resource.
type ForwardingControlZPAGatewayArgs struct {
	// (string) - Additional details about the ZPA gateway
	Description pulumi.StringPtrInput
	// The configured name of the entity
	Name pulumi.StringPtrInput
	// (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
	Type pulumi.StringPtrInput
	// The ZPA Server Group that is configured for Source IP Anchoring
	ZpaAppSegments ForwardingControlZPAGatewayZpaAppSegmentArrayInput
	// The ZPA Server Group that is configured for Source IP Anchoring
	ZpaServerGroup ForwardingControlZPAGatewayZpaServerGroupInput
}

func (ForwardingControlZPAGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*forwardingControlZPAGatewayArgs)(nil)).Elem()
}

type ForwardingControlZPAGatewayInput interface {
	pulumi.Input

	ToForwardingControlZPAGatewayOutput() ForwardingControlZPAGatewayOutput
	ToForwardingControlZPAGatewayOutputWithContext(ctx context.Context) ForwardingControlZPAGatewayOutput
}

func (*ForwardingControlZPAGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardingControlZPAGateway)(nil)).Elem()
}

func (i *ForwardingControlZPAGateway) ToForwardingControlZPAGatewayOutput() ForwardingControlZPAGatewayOutput {
	return i.ToForwardingControlZPAGatewayOutputWithContext(context.Background())
}

func (i *ForwardingControlZPAGateway) ToForwardingControlZPAGatewayOutputWithContext(ctx context.Context) ForwardingControlZPAGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingControlZPAGatewayOutput)
}

// ForwardingControlZPAGatewayArrayInput is an input type that accepts ForwardingControlZPAGatewayArray and ForwardingControlZPAGatewayArrayOutput values.
// You can construct a concrete instance of `ForwardingControlZPAGatewayArrayInput` via:
//
//	ForwardingControlZPAGatewayArray{ ForwardingControlZPAGatewayArgs{...} }
type ForwardingControlZPAGatewayArrayInput interface {
	pulumi.Input

	ToForwardingControlZPAGatewayArrayOutput() ForwardingControlZPAGatewayArrayOutput
	ToForwardingControlZPAGatewayArrayOutputWithContext(context.Context) ForwardingControlZPAGatewayArrayOutput
}

type ForwardingControlZPAGatewayArray []ForwardingControlZPAGatewayInput

func (ForwardingControlZPAGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ForwardingControlZPAGateway)(nil)).Elem()
}

func (i ForwardingControlZPAGatewayArray) ToForwardingControlZPAGatewayArrayOutput() ForwardingControlZPAGatewayArrayOutput {
	return i.ToForwardingControlZPAGatewayArrayOutputWithContext(context.Background())
}

func (i ForwardingControlZPAGatewayArray) ToForwardingControlZPAGatewayArrayOutputWithContext(ctx context.Context) ForwardingControlZPAGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingControlZPAGatewayArrayOutput)
}

// ForwardingControlZPAGatewayMapInput is an input type that accepts ForwardingControlZPAGatewayMap and ForwardingControlZPAGatewayMapOutput values.
// You can construct a concrete instance of `ForwardingControlZPAGatewayMapInput` via:
//
//	ForwardingControlZPAGatewayMap{ "key": ForwardingControlZPAGatewayArgs{...} }
type ForwardingControlZPAGatewayMapInput interface {
	pulumi.Input

	ToForwardingControlZPAGatewayMapOutput() ForwardingControlZPAGatewayMapOutput
	ToForwardingControlZPAGatewayMapOutputWithContext(context.Context) ForwardingControlZPAGatewayMapOutput
}

type ForwardingControlZPAGatewayMap map[string]ForwardingControlZPAGatewayInput

func (ForwardingControlZPAGatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ForwardingControlZPAGateway)(nil)).Elem()
}

func (i ForwardingControlZPAGatewayMap) ToForwardingControlZPAGatewayMapOutput() ForwardingControlZPAGatewayMapOutput {
	return i.ToForwardingControlZPAGatewayMapOutputWithContext(context.Background())
}

func (i ForwardingControlZPAGatewayMap) ToForwardingControlZPAGatewayMapOutputWithContext(ctx context.Context) ForwardingControlZPAGatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ForwardingControlZPAGatewayMapOutput)
}

type ForwardingControlZPAGatewayOutput struct{ *pulumi.OutputState }

func (ForwardingControlZPAGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ForwardingControlZPAGateway)(nil)).Elem()
}

func (o ForwardingControlZPAGatewayOutput) ToForwardingControlZPAGatewayOutput() ForwardingControlZPAGatewayOutput {
	return o
}

func (o ForwardingControlZPAGatewayOutput) ToForwardingControlZPAGatewayOutputWithContext(ctx context.Context) ForwardingControlZPAGatewayOutput {
	return o
}

// (string) - Additional details about the ZPA gateway
func (o ForwardingControlZPAGatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardingControlZPAGateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o ForwardingControlZPAGatewayOutput) GatewayId() pulumi.IntOutput {
	return o.ApplyT(func(v *ForwardingControlZPAGateway) pulumi.IntOutput { return v.GatewayId }).(pulumi.IntOutput)
}

// The configured name of the entity
func (o ForwardingControlZPAGatewayOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ForwardingControlZPAGateway) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: “ZPA“ and “ECZPA“
func (o ForwardingControlZPAGatewayOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ForwardingControlZPAGateway) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// The ZPA Server Group that is configured for Source IP Anchoring
func (o ForwardingControlZPAGatewayOutput) ZpaAppSegments() ForwardingControlZPAGatewayZpaAppSegmentArrayOutput {
	return o.ApplyT(func(v *ForwardingControlZPAGateway) ForwardingControlZPAGatewayZpaAppSegmentArrayOutput {
		return v.ZpaAppSegments
	}).(ForwardingControlZPAGatewayZpaAppSegmentArrayOutput)
}

// The ZPA Server Group that is configured for Source IP Anchoring
func (o ForwardingControlZPAGatewayOutput) ZpaServerGroup() ForwardingControlZPAGatewayZpaServerGroupOutput {
	return o.ApplyT(func(v *ForwardingControlZPAGateway) ForwardingControlZPAGatewayZpaServerGroupOutput {
		return v.ZpaServerGroup
	}).(ForwardingControlZPAGatewayZpaServerGroupOutput)
}

type ForwardingControlZPAGatewayArrayOutput struct{ *pulumi.OutputState }

func (ForwardingControlZPAGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ForwardingControlZPAGateway)(nil)).Elem()
}

func (o ForwardingControlZPAGatewayArrayOutput) ToForwardingControlZPAGatewayArrayOutput() ForwardingControlZPAGatewayArrayOutput {
	return o
}

func (o ForwardingControlZPAGatewayArrayOutput) ToForwardingControlZPAGatewayArrayOutputWithContext(ctx context.Context) ForwardingControlZPAGatewayArrayOutput {
	return o
}

func (o ForwardingControlZPAGatewayArrayOutput) Index(i pulumi.IntInput) ForwardingControlZPAGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ForwardingControlZPAGateway {
		return vs[0].([]*ForwardingControlZPAGateway)[vs[1].(int)]
	}).(ForwardingControlZPAGatewayOutput)
}

type ForwardingControlZPAGatewayMapOutput struct{ *pulumi.OutputState }

func (ForwardingControlZPAGatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ForwardingControlZPAGateway)(nil)).Elem()
}

func (o ForwardingControlZPAGatewayMapOutput) ToForwardingControlZPAGatewayMapOutput() ForwardingControlZPAGatewayMapOutput {
	return o
}

func (o ForwardingControlZPAGatewayMapOutput) ToForwardingControlZPAGatewayMapOutputWithContext(ctx context.Context) ForwardingControlZPAGatewayMapOutput {
	return o
}

func (o ForwardingControlZPAGatewayMapOutput) MapIndex(k pulumi.StringInput) ForwardingControlZPAGatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ForwardingControlZPAGateway {
		return vs[0].(map[string]*ForwardingControlZPAGateway)[vs[1].(string)]
	}).(ForwardingControlZPAGatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingControlZPAGatewayInput)(nil)).Elem(), &ForwardingControlZPAGateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingControlZPAGatewayArrayInput)(nil)).Elem(), ForwardingControlZPAGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ForwardingControlZPAGatewayMapInput)(nil)).Elem(), ForwardingControlZPAGatewayMap{})
	pulumi.RegisterOutputType(ForwardingControlZPAGatewayOutput{})
	pulumi.RegisterOutputType(ForwardingControlZPAGatewayArrayOutput{})
	pulumi.RegisterOutputType(ForwardingControlZPAGatewayMapOutput{})
}
