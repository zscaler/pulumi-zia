// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// ## Example Usage
//
// ### Action - DECRYPT
//
// ### Action - DO_NOT_DECRYPT - Bypass Rule (False)
//
// ### Action - DO_NOT_DECRYPT - Bypass Rule (True)
//
// ### Action - BLOCK
type SSLInspectionRules struct {
	pulumi.CustomResourceState

	// (Block List) - Action taken when the traffic matches policy
	Actions SSLInspectionRulesActionArrayOutput `pulumi:"actions"`
	// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications pulumi.StringArrayOutput `pulumi:"cloudApplications"`
	// (Block List) - ID pairs of departments for which the rule is applied.
	Departments SSLInspectionRulesDepartmentsPtrOutput `pulumi:"departments"`
	// (String) -  Enter additional notes or information. The description cannot exceed 10,240 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// (Block List) - ID pairs of destination IP address groups for which the rule is applied.
	DestIpGroups SSLInspectionRulesDestIpGroupsPtrOutput `pulumi:"destIpGroups"`
	// (Block List) - ID pairs of device groups for which the rule is applied.
	DeviceGroups SSLInspectionRulesDeviceGroupsPtrOutput `pulumi:"deviceGroups"`
	// (Set of String)  - List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
	DeviceTrustLevels pulumi.StringArrayOutput `pulumi:"deviceTrustLevels"`
	// (Block List) - ID pairs of devices for which the rule is applied
	Devices SSLInspectionRulesDevicesPtrOutput `pulumi:"devices"`
	// (Block List) - ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
	Groups SSLInspectionRulesGroupsPtrOutput `pulumi:"groups"`
	// (Block List) - ID pairs of labels associated with the rule.
	Labels SSLInspectionRulesLabelsPtrOutput `pulumi:"labels"`
	// (Block List) - ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
	LocationGroups SSLInspectionRulesLocationGroupsPtrOutput `pulumi:"locationGroups"`
	// (Block List) - ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
	Locations SSLInspectionRulesLocationsPtrOutput `pulumi:"locations"`
	// The name of the SSL Inspection rule
	Name pulumi.StringOutput `pulumi:"name"`
	// (String) -  Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
	Order pulumi.IntOutput `pulumi:"order"`
	// (Set of String) -  Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
	Platforms pulumi.StringArrayOutput `pulumi:"platforms"`
	// (Block List) - When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
	ProxyGateways SSLInspectionRulesProxyGatewaysPtrOutput `pulumi:"proxyGateways"`
	// (Integer) - The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
	Rank pulumi.IntPtrOutput `pulumi:"rank"`
	// (Boolean) - Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
	RoadWarriorForKerberos pulumi.BoolPtrOutput `pulumi:"roadWarriorForKerberos"`
	RuleId                 pulumi.IntOutput     `pulumi:"ruleId"`
	// (Block List) - ID pairs of source IP address groups for which the rule is applied.
	SourceIpGroups SSLInspectionRulesSourceIpGroupsPtrOutput `pulumi:"sourceIpGroups"`
	// (String) - The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
	State pulumi.StringPtrOutput `pulumi:"state"`
	// (Block List) - The time intervals during which the rule applies
	TimeWindows SSLInspectionRulesTimeWindowsPtrOutput `pulumi:"timeWindows"`
	// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories pulumi.StringArrayOutput `pulumi:"urlCategories"`
	// (Set of String) -  A list of user agent types the rule applies to.
	UserAgentTypes pulumi.StringArrayOutput `pulumi:"userAgentTypes"`
	// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
	Users SSLInspectionRulesUsersPtrOutput `pulumi:"users"`
	// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
	WorkloadGroups SSLInspectionRulesWorkloadGroupArrayOutput `pulumi:"workloadGroups"`
	// (Block List) - The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
	ZpaAppSegments SSLInspectionRulesZpaAppSegmentArrayOutput `pulumi:"zpaAppSegments"`
}

// NewSSLInspectionRules registers a new resource with the given unique name, arguments, and options.
func NewSSLInspectionRules(ctx *pulumi.Context,
	name string, args *SSLInspectionRulesArgs, opts ...pulumi.ResourceOption) (*SSLInspectionRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Order == nil {
		return nil, errors.New("invalid value for required argument 'Order'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SSLInspectionRules
	err := ctx.RegisterResource("zia:index/sSLInspectionRules:SSLInspectionRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSSLInspectionRules gets an existing SSLInspectionRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSSLInspectionRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SSLInspectionRulesState, opts ...pulumi.ResourceOption) (*SSLInspectionRules, error) {
	var resource SSLInspectionRules
	err := ctx.ReadResource("zia:index/sSLInspectionRules:SSLInspectionRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SSLInspectionRules resources.
type sslinspectionRulesState struct {
	// (Block List) - Action taken when the traffic matches policy
	Actions []SSLInspectionRulesAction `pulumi:"actions"`
	// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications []string `pulumi:"cloudApplications"`
	// (Block List) - ID pairs of departments for which the rule is applied.
	Departments *SSLInspectionRulesDepartments `pulumi:"departments"`
	// (String) -  Enter additional notes or information. The description cannot exceed 10,240 characters.
	Description *string `pulumi:"description"`
	// (Block List) - ID pairs of destination IP address groups for which the rule is applied.
	DestIpGroups *SSLInspectionRulesDestIpGroups `pulumi:"destIpGroups"`
	// (Block List) - ID pairs of device groups for which the rule is applied.
	DeviceGroups *SSLInspectionRulesDeviceGroups `pulumi:"deviceGroups"`
	// (Set of String)  - List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
	DeviceTrustLevels []string `pulumi:"deviceTrustLevels"`
	// (Block List) - ID pairs of devices for which the rule is applied
	Devices *SSLInspectionRulesDevices `pulumi:"devices"`
	// (Block List) - ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
	Groups *SSLInspectionRulesGroups `pulumi:"groups"`
	// (Block List) - ID pairs of labels associated with the rule.
	Labels *SSLInspectionRulesLabels `pulumi:"labels"`
	// (Block List) - ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
	LocationGroups *SSLInspectionRulesLocationGroups `pulumi:"locationGroups"`
	// (Block List) - ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
	Locations *SSLInspectionRulesLocations `pulumi:"locations"`
	// The name of the SSL Inspection rule
	Name *string `pulumi:"name"`
	// (String) -  Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
	Order *int `pulumi:"order"`
	// (Set of String) -  Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
	Platforms []string `pulumi:"platforms"`
	// (Block List) - When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
	ProxyGateways *SSLInspectionRulesProxyGateways `pulumi:"proxyGateways"`
	// (Integer) - The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
	Rank *int `pulumi:"rank"`
	// (Boolean) - Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
	RoadWarriorForKerberos *bool `pulumi:"roadWarriorForKerberos"`
	RuleId                 *int  `pulumi:"ruleId"`
	// (Block List) - ID pairs of source IP address groups for which the rule is applied.
	SourceIpGroups *SSLInspectionRulesSourceIpGroups `pulumi:"sourceIpGroups"`
	// (String) - The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
	State *string `pulumi:"state"`
	// (Block List) - The time intervals during which the rule applies
	TimeWindows *SSLInspectionRulesTimeWindows `pulumi:"timeWindows"`
	// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories []string `pulumi:"urlCategories"`
	// (Set of String) -  A list of user agent types the rule applies to.
	UserAgentTypes []string `pulumi:"userAgentTypes"`
	// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
	Users *SSLInspectionRulesUsers `pulumi:"users"`
	// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
	WorkloadGroups []SSLInspectionRulesWorkloadGroup `pulumi:"workloadGroups"`
	// (Block List) - The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
	ZpaAppSegments []SSLInspectionRulesZpaAppSegment `pulumi:"zpaAppSegments"`
}

type SSLInspectionRulesState struct {
	// (Block List) - Action taken when the traffic matches policy
	Actions SSLInspectionRulesActionArrayInput
	// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications pulumi.StringArrayInput
	// (Block List) - ID pairs of departments for which the rule is applied.
	Departments SSLInspectionRulesDepartmentsPtrInput
	// (String) -  Enter additional notes or information. The description cannot exceed 10,240 characters.
	Description pulumi.StringPtrInput
	// (Block List) - ID pairs of destination IP address groups for which the rule is applied.
	DestIpGroups SSLInspectionRulesDestIpGroupsPtrInput
	// (Block List) - ID pairs of device groups for which the rule is applied.
	DeviceGroups SSLInspectionRulesDeviceGroupsPtrInput
	// (Set of String)  - List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
	DeviceTrustLevels pulumi.StringArrayInput
	// (Block List) - ID pairs of devices for which the rule is applied
	Devices SSLInspectionRulesDevicesPtrInput
	// (Block List) - ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
	Groups SSLInspectionRulesGroupsPtrInput
	// (Block List) - ID pairs of labels associated with the rule.
	Labels SSLInspectionRulesLabelsPtrInput
	// (Block List) - ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
	LocationGroups SSLInspectionRulesLocationGroupsPtrInput
	// (Block List) - ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
	Locations SSLInspectionRulesLocationsPtrInput
	// The name of the SSL Inspection rule
	Name pulumi.StringPtrInput
	// (String) -  Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
	Order pulumi.IntPtrInput
	// (Set of String) -  Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
	Platforms pulumi.StringArrayInput
	// (Block List) - When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
	ProxyGateways SSLInspectionRulesProxyGatewaysPtrInput
	// (Integer) - The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
	Rank pulumi.IntPtrInput
	// (Boolean) - Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
	RoadWarriorForKerberos pulumi.BoolPtrInput
	RuleId                 pulumi.IntPtrInput
	// (Block List) - ID pairs of source IP address groups for which the rule is applied.
	SourceIpGroups SSLInspectionRulesSourceIpGroupsPtrInput
	// (String) - The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
	State pulumi.StringPtrInput
	// (Block List) - The time intervals during which the rule applies
	TimeWindows SSLInspectionRulesTimeWindowsPtrInput
	// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories pulumi.StringArrayInput
	// (Set of String) -  A list of user agent types the rule applies to.
	UserAgentTypes pulumi.StringArrayInput
	// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
	Users SSLInspectionRulesUsersPtrInput
	// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
	WorkloadGroups SSLInspectionRulesWorkloadGroupArrayInput
	// (Block List) - The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
	ZpaAppSegments SSLInspectionRulesZpaAppSegmentArrayInput
}

func (SSLInspectionRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*sslinspectionRulesState)(nil)).Elem()
}

type sslinspectionRulesArgs struct {
	// (Block List) - Action taken when the traffic matches policy
	Actions []SSLInspectionRulesAction `pulumi:"actions"`
	// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications []string `pulumi:"cloudApplications"`
	// (Block List) - ID pairs of departments for which the rule is applied.
	Departments *SSLInspectionRulesDepartments `pulumi:"departments"`
	// (String) -  Enter additional notes or information. The description cannot exceed 10,240 characters.
	Description *string `pulumi:"description"`
	// (Block List) - ID pairs of destination IP address groups for which the rule is applied.
	DestIpGroups *SSLInspectionRulesDestIpGroups `pulumi:"destIpGroups"`
	// (Block List) - ID pairs of device groups for which the rule is applied.
	DeviceGroups *SSLInspectionRulesDeviceGroups `pulumi:"deviceGroups"`
	// (Set of String)  - List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
	DeviceTrustLevels []string `pulumi:"deviceTrustLevels"`
	// (Block List) - ID pairs of devices for which the rule is applied
	Devices *SSLInspectionRulesDevices `pulumi:"devices"`
	// (Block List) - ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
	Groups *SSLInspectionRulesGroups `pulumi:"groups"`
	// (Block List) - ID pairs of labels associated with the rule.
	Labels *SSLInspectionRulesLabels `pulumi:"labels"`
	// (Block List) - ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
	LocationGroups *SSLInspectionRulesLocationGroups `pulumi:"locationGroups"`
	// (Block List) - ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
	Locations *SSLInspectionRulesLocations `pulumi:"locations"`
	// The name of the SSL Inspection rule
	Name *string `pulumi:"name"`
	// (String) -  Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
	Order int `pulumi:"order"`
	// (Set of String) -  Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
	Platforms []string `pulumi:"platforms"`
	// (Block List) - When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
	ProxyGateways *SSLInspectionRulesProxyGateways `pulumi:"proxyGateways"`
	// (Integer) - The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
	Rank *int `pulumi:"rank"`
	// (Boolean) - Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
	RoadWarriorForKerberos *bool `pulumi:"roadWarriorForKerberos"`
	// (Block List) - ID pairs of source IP address groups for which the rule is applied.
	SourceIpGroups *SSLInspectionRulesSourceIpGroups `pulumi:"sourceIpGroups"`
	// (String) - The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
	State *string `pulumi:"state"`
	// (Block List) - The time intervals during which the rule applies
	TimeWindows *SSLInspectionRulesTimeWindows `pulumi:"timeWindows"`
	// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories []string `pulumi:"urlCategories"`
	// (Set of String) -  A list of user agent types the rule applies to.
	UserAgentTypes []string `pulumi:"userAgentTypes"`
	// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
	Users *SSLInspectionRulesUsers `pulumi:"users"`
	// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
	WorkloadGroups []SSLInspectionRulesWorkloadGroup `pulumi:"workloadGroups"`
	// (Block List) - The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
	ZpaAppSegments []SSLInspectionRulesZpaAppSegment `pulumi:"zpaAppSegments"`
}

// The set of arguments for constructing a SSLInspectionRules resource.
type SSLInspectionRulesArgs struct {
	// (Block List) - Action taken when the traffic matches policy
	Actions SSLInspectionRulesActionArrayInput
	// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications pulumi.StringArrayInput
	// (Block List) - ID pairs of departments for which the rule is applied.
	Departments SSLInspectionRulesDepartmentsPtrInput
	// (String) -  Enter additional notes or information. The description cannot exceed 10,240 characters.
	Description pulumi.StringPtrInput
	// (Block List) - ID pairs of destination IP address groups for which the rule is applied.
	DestIpGroups SSLInspectionRulesDestIpGroupsPtrInput
	// (Block List) - ID pairs of device groups for which the rule is applied.
	DeviceGroups SSLInspectionRulesDeviceGroupsPtrInput
	// (Set of String)  - List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
	DeviceTrustLevels pulumi.StringArrayInput
	// (Block List) - ID pairs of devices for which the rule is applied
	Devices SSLInspectionRulesDevicesPtrInput
	// (Block List) - ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
	Groups SSLInspectionRulesGroupsPtrInput
	// (Block List) - ID pairs of labels associated with the rule.
	Labels SSLInspectionRulesLabelsPtrInput
	// (Block List) - ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
	LocationGroups SSLInspectionRulesLocationGroupsPtrInput
	// (Block List) - ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
	Locations SSLInspectionRulesLocationsPtrInput
	// The name of the SSL Inspection rule
	Name pulumi.StringPtrInput
	// (String) -  Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
	Order pulumi.IntInput
	// (Set of String) -  Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
	Platforms pulumi.StringArrayInput
	// (Block List) - When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
	ProxyGateways SSLInspectionRulesProxyGatewaysPtrInput
	// (Integer) - The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
	Rank pulumi.IntPtrInput
	// (Boolean) - Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
	RoadWarriorForKerberos pulumi.BoolPtrInput
	// (Block List) - ID pairs of source IP address groups for which the rule is applied.
	SourceIpGroups SSLInspectionRulesSourceIpGroupsPtrInput
	// (String) - The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
	State pulumi.StringPtrInput
	// (Block List) - The time intervals during which the rule applies
	TimeWindows SSLInspectionRulesTimeWindowsPtrInput
	// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories pulumi.StringArrayInput
	// (Set of String) -  A list of user agent types the rule applies to.
	UserAgentTypes pulumi.StringArrayInput
	// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
	Users SSLInspectionRulesUsersPtrInput
	// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
	WorkloadGroups SSLInspectionRulesWorkloadGroupArrayInput
	// (Block List) - The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
	ZpaAppSegments SSLInspectionRulesZpaAppSegmentArrayInput
}

func (SSLInspectionRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sslinspectionRulesArgs)(nil)).Elem()
}

type SSLInspectionRulesInput interface {
	pulumi.Input

	ToSSLInspectionRulesOutput() SSLInspectionRulesOutput
	ToSSLInspectionRulesOutputWithContext(ctx context.Context) SSLInspectionRulesOutput
}

func (*SSLInspectionRules) ElementType() reflect.Type {
	return reflect.TypeOf((**SSLInspectionRules)(nil)).Elem()
}

func (i *SSLInspectionRules) ToSSLInspectionRulesOutput() SSLInspectionRulesOutput {
	return i.ToSSLInspectionRulesOutputWithContext(context.Background())
}

func (i *SSLInspectionRules) ToSSLInspectionRulesOutputWithContext(ctx context.Context) SSLInspectionRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSLInspectionRulesOutput)
}

// SSLInspectionRulesArrayInput is an input type that accepts SSLInspectionRulesArray and SSLInspectionRulesArrayOutput values.
// You can construct a concrete instance of `SSLInspectionRulesArrayInput` via:
//
//	SSLInspectionRulesArray{ SSLInspectionRulesArgs{...} }
type SSLInspectionRulesArrayInput interface {
	pulumi.Input

	ToSSLInspectionRulesArrayOutput() SSLInspectionRulesArrayOutput
	ToSSLInspectionRulesArrayOutputWithContext(context.Context) SSLInspectionRulesArrayOutput
}

type SSLInspectionRulesArray []SSLInspectionRulesInput

func (SSLInspectionRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SSLInspectionRules)(nil)).Elem()
}

func (i SSLInspectionRulesArray) ToSSLInspectionRulesArrayOutput() SSLInspectionRulesArrayOutput {
	return i.ToSSLInspectionRulesArrayOutputWithContext(context.Background())
}

func (i SSLInspectionRulesArray) ToSSLInspectionRulesArrayOutputWithContext(ctx context.Context) SSLInspectionRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSLInspectionRulesArrayOutput)
}

// SSLInspectionRulesMapInput is an input type that accepts SSLInspectionRulesMap and SSLInspectionRulesMapOutput values.
// You can construct a concrete instance of `SSLInspectionRulesMapInput` via:
//
//	SSLInspectionRulesMap{ "key": SSLInspectionRulesArgs{...} }
type SSLInspectionRulesMapInput interface {
	pulumi.Input

	ToSSLInspectionRulesMapOutput() SSLInspectionRulesMapOutput
	ToSSLInspectionRulesMapOutputWithContext(context.Context) SSLInspectionRulesMapOutput
}

type SSLInspectionRulesMap map[string]SSLInspectionRulesInput

func (SSLInspectionRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SSLInspectionRules)(nil)).Elem()
}

func (i SSLInspectionRulesMap) ToSSLInspectionRulesMapOutput() SSLInspectionRulesMapOutput {
	return i.ToSSLInspectionRulesMapOutputWithContext(context.Background())
}

func (i SSLInspectionRulesMap) ToSSLInspectionRulesMapOutputWithContext(ctx context.Context) SSLInspectionRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SSLInspectionRulesMapOutput)
}

type SSLInspectionRulesOutput struct{ *pulumi.OutputState }

func (SSLInspectionRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SSLInspectionRules)(nil)).Elem()
}

func (o SSLInspectionRulesOutput) ToSSLInspectionRulesOutput() SSLInspectionRulesOutput {
	return o
}

func (o SSLInspectionRulesOutput) ToSSLInspectionRulesOutputWithContext(ctx context.Context) SSLInspectionRulesOutput {
	return o
}

// (Block List) - Action taken when the traffic matches policy
func (o SSLInspectionRulesOutput) Actions() SSLInspectionRulesActionArrayOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesActionArrayOutput { return v.Actions }).(SSLInspectionRulesActionArrayOutput)
}

// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
func (o SSLInspectionRulesOutput) CloudApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SSLInspectionRules) pulumi.StringArrayOutput { return v.CloudApplications }).(pulumi.StringArrayOutput)
}

// (Block List) - ID pairs of departments for which the rule is applied.
func (o SSLInspectionRulesOutput) Departments() SSLInspectionRulesDepartmentsPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesDepartmentsPtrOutput { return v.Departments }).(SSLInspectionRulesDepartmentsPtrOutput)
}

// (String) -  Enter additional notes or information. The description cannot exceed 10,240 characters.
func (o SSLInspectionRulesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// (Block List) - ID pairs of destination IP address groups for which the rule is applied.
func (o SSLInspectionRulesOutput) DestIpGroups() SSLInspectionRulesDestIpGroupsPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesDestIpGroupsPtrOutput { return v.DestIpGroups }).(SSLInspectionRulesDestIpGroupsPtrOutput)
}

// (Block List) - ID pairs of device groups for which the rule is applied.
func (o SSLInspectionRulesOutput) DeviceGroups() SSLInspectionRulesDeviceGroupsPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesDeviceGroupsPtrOutput { return v.DeviceGroups }).(SSLInspectionRulesDeviceGroupsPtrOutput)
}

// (Set of String)  - List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
func (o SSLInspectionRulesOutput) DeviceTrustLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SSLInspectionRules) pulumi.StringArrayOutput { return v.DeviceTrustLevels }).(pulumi.StringArrayOutput)
}

// (Block List) - ID pairs of devices for which the rule is applied
func (o SSLInspectionRulesOutput) Devices() SSLInspectionRulesDevicesPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesDevicesPtrOutput { return v.Devices }).(SSLInspectionRulesDevicesPtrOutput)
}

// (Block List) - ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
func (o SSLInspectionRulesOutput) Groups() SSLInspectionRulesGroupsPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesGroupsPtrOutput { return v.Groups }).(SSLInspectionRulesGroupsPtrOutput)
}

// (Block List) - ID pairs of labels associated with the rule.
func (o SSLInspectionRulesOutput) Labels() SSLInspectionRulesLabelsPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesLabelsPtrOutput { return v.Labels }).(SSLInspectionRulesLabelsPtrOutput)
}

// (Block List) - ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
func (o SSLInspectionRulesOutput) LocationGroups() SSLInspectionRulesLocationGroupsPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesLocationGroupsPtrOutput { return v.LocationGroups }).(SSLInspectionRulesLocationGroupsPtrOutput)
}

// (Block List) - ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
func (o SSLInspectionRulesOutput) Locations() SSLInspectionRulesLocationsPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesLocationsPtrOutput { return v.Locations }).(SSLInspectionRulesLocationsPtrOutput)
}

// The name of the SSL Inspection rule
func (o SSLInspectionRulesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SSLInspectionRules) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (String) -  Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
func (o SSLInspectionRulesOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *SSLInspectionRules) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// (Set of String) -  Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
func (o SSLInspectionRulesOutput) Platforms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SSLInspectionRules) pulumi.StringArrayOutput { return v.Platforms }).(pulumi.StringArrayOutput)
}

// (Block List) - When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
func (o SSLInspectionRulesOutput) ProxyGateways() SSLInspectionRulesProxyGatewaysPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesProxyGatewaysPtrOutput { return v.ProxyGateways }).(SSLInspectionRulesProxyGatewaysPtrOutput)
}

// (Integer) - The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
func (o SSLInspectionRulesOutput) Rank() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) pulumi.IntPtrOutput { return v.Rank }).(pulumi.IntPtrOutput)
}

// (Boolean) - Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
func (o SSLInspectionRulesOutput) RoadWarriorForKerberos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) pulumi.BoolPtrOutput { return v.RoadWarriorForKerberos }).(pulumi.BoolPtrOutput)
}

func (o SSLInspectionRulesOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *SSLInspectionRules) pulumi.IntOutput { return v.RuleId }).(pulumi.IntOutput)
}

// (Block List) - ID pairs of source IP address groups for which the rule is applied.
func (o SSLInspectionRulesOutput) SourceIpGroups() SSLInspectionRulesSourceIpGroupsPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesSourceIpGroupsPtrOutput { return v.SourceIpGroups }).(SSLInspectionRulesSourceIpGroupsPtrOutput)
}

// (String) - The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
func (o SSLInspectionRulesOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// (Block List) - The time intervals during which the rule applies
func (o SSLInspectionRulesOutput) TimeWindows() SSLInspectionRulesTimeWindowsPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesTimeWindowsPtrOutput { return v.TimeWindows }).(SSLInspectionRulesTimeWindowsPtrOutput)
}

// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied.
func (o SSLInspectionRulesOutput) UrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SSLInspectionRules) pulumi.StringArrayOutput { return v.UrlCategories }).(pulumi.StringArrayOutput)
}

// (Set of String) -  A list of user agent types the rule applies to.
func (o SSLInspectionRulesOutput) UserAgentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SSLInspectionRules) pulumi.StringArrayOutput { return v.UserAgentTypes }).(pulumi.StringArrayOutput)
}

// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
func (o SSLInspectionRulesOutput) Users() SSLInspectionRulesUsersPtrOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesUsersPtrOutput { return v.Users }).(SSLInspectionRulesUsersPtrOutput)
}

// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
func (o SSLInspectionRulesOutput) WorkloadGroups() SSLInspectionRulesWorkloadGroupArrayOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesWorkloadGroupArrayOutput { return v.WorkloadGroups }).(SSLInspectionRulesWorkloadGroupArrayOutput)
}

// (Block List) - The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
func (o SSLInspectionRulesOutput) ZpaAppSegments() SSLInspectionRulesZpaAppSegmentArrayOutput {
	return o.ApplyT(func(v *SSLInspectionRules) SSLInspectionRulesZpaAppSegmentArrayOutput { return v.ZpaAppSegments }).(SSLInspectionRulesZpaAppSegmentArrayOutput)
}

type SSLInspectionRulesArrayOutput struct{ *pulumi.OutputState }

func (SSLInspectionRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SSLInspectionRules)(nil)).Elem()
}

func (o SSLInspectionRulesArrayOutput) ToSSLInspectionRulesArrayOutput() SSLInspectionRulesArrayOutput {
	return o
}

func (o SSLInspectionRulesArrayOutput) ToSSLInspectionRulesArrayOutputWithContext(ctx context.Context) SSLInspectionRulesArrayOutput {
	return o
}

func (o SSLInspectionRulesArrayOutput) Index(i pulumi.IntInput) SSLInspectionRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SSLInspectionRules {
		return vs[0].([]*SSLInspectionRules)[vs[1].(int)]
	}).(SSLInspectionRulesOutput)
}

type SSLInspectionRulesMapOutput struct{ *pulumi.OutputState }

func (SSLInspectionRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SSLInspectionRules)(nil)).Elem()
}

func (o SSLInspectionRulesMapOutput) ToSSLInspectionRulesMapOutput() SSLInspectionRulesMapOutput {
	return o
}

func (o SSLInspectionRulesMapOutput) ToSSLInspectionRulesMapOutputWithContext(ctx context.Context) SSLInspectionRulesMapOutput {
	return o
}

func (o SSLInspectionRulesMapOutput) MapIndex(k pulumi.StringInput) SSLInspectionRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SSLInspectionRules {
		return vs[0].(map[string]*SSLInspectionRules)[vs[1].(string)]
	}).(SSLInspectionRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SSLInspectionRulesInput)(nil)).Elem(), &SSLInspectionRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*SSLInspectionRulesArrayInput)(nil)).Elem(), SSLInspectionRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SSLInspectionRulesMapInput)(nil)).Elem(), SSLInspectionRulesMap{})
	pulumi.RegisterOutputType(SSLInspectionRulesOutput{})
	pulumi.RegisterOutputType(SSLInspectionRulesArrayOutput{})
	pulumi.RegisterOutputType(SSLInspectionRulesMapOutput{})
}
