// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// The **zia_admin_users** resource allows the creation and management of ZIA admin user account created in the Zscaler Internet Access cloud or via the API.
//
// ## Example Usage
//
// ### Organization Scope
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			superAdmin, err := zia.GetAdminRoles(ctx, &zia.GetAdminRolesArgs{
//				Name: pulumi.StringRef("Super Admin"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// ######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########
//			_, err = zia.NewAdminUsers(ctx, "johnSmith", &zia.AdminUsersArgs{
//				LoginName:                   pulumi.String("john.smith@acme.com"),
//				UserName:                    pulumi.String("John Smith"),
//				Email:                       pulumi.String("john.smith@acme.com"),
//				IsPasswordLoginAllowed:      pulumi.Bool(true),
//				Password:                    pulumi.String("*********************"),
//				IsSecurityReportCommEnabled: pulumi.Bool(true),
//				IsServiceUpdateCommEnabled:  pulumi.Bool(true),
//				IsProductUpdateCommEnabled:  pulumi.Bool(true),
//				Comments:                    pulumi.String("Administrator User"),
//				Roles: zia.AdminUsersRoleArray{
//					&zia.AdminUsersRoleArgs{
//						Id: pulumi.Int(superAdmin.Id),
//					},
//				},
//				AdminScopeType: pulumi.String("ORGANIZATION"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Department Scope
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			superAdmin, err := zia.GetAdminRoles(ctx, &zia.GetAdminRolesArgs{
//				Name: pulumi.StringRef("Super Admin"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			engineering, err := zia.GetDepartmentManagement(ctx, &zia.GetDepartmentManagementArgs{
//				Name: pulumi.StringRef("Engineering"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// ######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########
//			_, err = zia.NewAdminUsers(ctx, "johnSmith", &zia.AdminUsersArgs{
//				LoginName:                   pulumi.String("john.smith@acme.com"),
//				UserName:                    pulumi.String("John Smith"),
//				Email:                       pulumi.String("john.smith@acme.com"),
//				IsPasswordLoginAllowed:      pulumi.Bool(true),
//				Password:                    pulumi.String("*********************"),
//				IsSecurityReportCommEnabled: pulumi.Bool(true),
//				IsServiceUpdateCommEnabled:  pulumi.Bool(true),
//				IsProductUpdateCommEnabled:  pulumi.Bool(true),
//				Comments:                    pulumi.String("Administrator User"),
//				Roles: zia.AdminUsersRoleArray{
//					&zia.AdminUsersRoleArgs{
//						Id: pulumi.Int(superAdmin.Id),
//					},
//				},
//				AdminScopeType: pulumi.String("DEPARTMENT"),
//				AdminScopeEntities: &zia.AdminUsersAdminScopeEntitiesArgs{
//					Ids: pulumi.IntArray{
//						pulumi.Int(engineering.Id),
//						data.Zia_department_management.Sales.Id,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Location Scope
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			superAdmin, err := zia.GetAdminRoles(ctx, &zia.GetAdminRolesArgs{
//				Name: pulumi.StringRef("Super Admin"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			auSydneyBranch01, err := zia.LookupLocationManagement(ctx, &zia.LookupLocationManagementArgs{
//				Name: pulumi.StringRef("AU - Sydney - Branch01"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// ######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########
//			_, err = zia.NewAdminUsers(ctx, "johnSmith", &zia.AdminUsersArgs{
//				LoginName:                   pulumi.String("john.smith@acme.com"),
//				UserName:                    pulumi.String("John Smith"),
//				Email:                       pulumi.String("john.smith@acme.com"),
//				IsPasswordLoginAllowed:      pulumi.Bool(true),
//				Password:                    pulumi.String("*********************"),
//				IsSecurityReportCommEnabled: pulumi.Bool(true),
//				IsServiceUpdateCommEnabled:  pulumi.Bool(true),
//				IsProductUpdateCommEnabled:  pulumi.Bool(true),
//				Comments:                    pulumi.String("Administrator User"),
//				Roles: zia.AdminUsersRoleArray{
//					&zia.AdminUsersRoleArgs{
//						Id: pulumi.Int(superAdmin.Id),
//					},
//				},
//				AdminScopeType: pulumi.String("LOCATION"),
//				AdminScopeEntities: &zia.AdminUsersAdminScopeEntitiesArgs{
//					Ids: pulumi.IntArray{
//						pulumi.Int(auSydneyBranch01.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### Location Group Scope
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			superAdmin, err := zia.GetAdminRoles(ctx, &zia.GetAdminRolesArgs{
//				Name: pulumi.StringRef("Super Admin"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			corporateUserTrafficGroup, err := zia.GetLocationGroups(ctx, &zia.GetLocationGroupsArgs{
//				Name: pulumi.StringRef("Corporate User Traffic Group"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			// ######## PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########
//			_, err = zia.NewAdminUsers(ctx, "johnSmith", &zia.AdminUsersArgs{
//				LoginName:                   pulumi.String("john.smith@acme.com"),
//				UserName:                    pulumi.String("John Smith"),
//				Email:                       pulumi.String("john.smith@acme.com"),
//				IsPasswordLoginAllowed:      pulumi.Bool(true),
//				Password:                    pulumi.String("*********************"),
//				IsSecurityReportCommEnabled: pulumi.Bool(true),
//				IsServiceUpdateCommEnabled:  pulumi.Bool(true),
//				IsProductUpdateCommEnabled:  pulumi.Bool(true),
//				Comments:                    pulumi.String("Administrator User"),
//				Roles: zia.AdminUsersRoleArray{
//					&zia.AdminUsersRoleArgs{
//						Id: pulumi.Int(superAdmin.Id),
//					},
//				},
//				AdminScopeType: pulumi.String("LOCATION_GROUP"),
//				AdminScopeEntities: &zia.AdminUsersAdminScopeEntitiesArgs{
//					Ids: pulumi.IntArray{
//						pulumi.Int(corporateUserTrafficGroup.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_admin_users** can be imported by using `<ADMIN ID>` or `<LOGIN NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/adminUsers:AdminUsers example <admin_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zia:index/adminUsers:AdminUsers example <login_name>
// ```
//
// ⚠️ **NOTE :**:  This provider do not import the password attribute value during the importing process.
type AdminUsers struct {
	pulumi.CustomResourceState

	AdminId pulumi.IntOutput `pulumi:"adminId"`
	// Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
	AdminScopeEntities AdminUsersAdminScopeEntitiesOutput `pulumi:"adminScopeEntities"`
	// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
	AdminScopeType pulumi.StringOutput `pulumi:"adminScopeType"`
	// Additional information about the admin or auditor.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Indicates whether or not the admin account is disabled.
	Disabled pulumi.BoolPtrOutput `pulumi:"disabled"`
	// Admin or auditor's email address.
	Email pulumi.StringOutput `pulumi:"email"`
	// Indicates whether the user is an auditor. This attribute is subject to change.
	IsAuditor pulumi.BoolPtrOutput `pulumi:"isAuditor"`
	// Indicates whether or not Executive Insights App access is enabled for the admin.
	IsExecMobileAppEnabled pulumi.BoolPtrOutput `pulumi:"isExecMobileAppEnabled"`
	// Indicates whether or not the admin can be edited or deleted.
	IsNonEditable pulumi.BoolPtrOutput `pulumi:"isNonEditable"`
	// Indicates whether or not an admin's password has expired.
	IsPasswordExpired pulumi.BoolPtrOutput `pulumi:"isPasswordExpired"`
	// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
	IsPasswordLoginAllowed pulumi.BoolPtrOutput `pulumi:"isPasswordLoginAllowed"`
	// Communication setting for Product Update.
	IsProductUpdateCommEnabled pulumi.BoolPtrOutput `pulumi:"isProductUpdateCommEnabled"`
	// Communication for Security Report is enabled.
	IsSecurityReportCommEnabled pulumi.BoolPtrOutput `pulumi:"isSecurityReportCommEnabled"`
	// Communication setting for Service Update.
	IsServiceUpdateCommEnabled pulumi.BoolPtrOutput `pulumi:"isServiceUpdateCommEnabled"`
	// The email address of the admin user to be exported.
	LoginName pulumi.StringOutput `pulumi:"loginName"`
	// The username of the admin user to be exported.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Role of the admin. This is not required for an auditor.
	Roles AdminUsersRoleArrayOutput `pulumi:"roles"`
	// The username of the admin user to be exported.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewAdminUsers registers a new resource with the given unique name, arguments, and options.
func NewAdminUsers(ctx *pulumi.Context,
	name string, args *AdminUsersArgs, opts ...pulumi.ResourceOption) (*AdminUsers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.LoginName == nil {
		return nil, errors.New("invalid value for required argument 'LoginName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AdminUsers
	err := ctx.RegisterResource("zia:index/adminUsers:AdminUsers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdminUsers gets an existing AdminUsers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdminUsers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdminUsersState, opts ...pulumi.ResourceOption) (*AdminUsers, error) {
	var resource AdminUsers
	err := ctx.ReadResource("zia:index/adminUsers:AdminUsers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdminUsers resources.
type adminUsersState struct {
	AdminId *int `pulumi:"adminId"`
	// Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
	AdminScopeEntities *AdminUsersAdminScopeEntities `pulumi:"adminScopeEntities"`
	// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
	AdminScopeType *string `pulumi:"adminScopeType"`
	// Additional information about the admin or auditor.
	Comments *string `pulumi:"comments"`
	// Indicates whether or not the admin account is disabled.
	Disabled *bool `pulumi:"disabled"`
	// Admin or auditor's email address.
	Email *string `pulumi:"email"`
	// Indicates whether the user is an auditor. This attribute is subject to change.
	IsAuditor *bool `pulumi:"isAuditor"`
	// Indicates whether or not Executive Insights App access is enabled for the admin.
	IsExecMobileAppEnabled *bool `pulumi:"isExecMobileAppEnabled"`
	// Indicates whether or not the admin can be edited or deleted.
	IsNonEditable *bool `pulumi:"isNonEditable"`
	// Indicates whether or not an admin's password has expired.
	IsPasswordExpired *bool `pulumi:"isPasswordExpired"`
	// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
	IsPasswordLoginAllowed *bool `pulumi:"isPasswordLoginAllowed"`
	// Communication setting for Product Update.
	IsProductUpdateCommEnabled *bool `pulumi:"isProductUpdateCommEnabled"`
	// Communication for Security Report is enabled.
	IsSecurityReportCommEnabled *bool `pulumi:"isSecurityReportCommEnabled"`
	// Communication setting for Service Update.
	IsServiceUpdateCommEnabled *bool `pulumi:"isServiceUpdateCommEnabled"`
	// The email address of the admin user to be exported.
	LoginName *string `pulumi:"loginName"`
	// The username of the admin user to be exported.
	Password *string `pulumi:"password"`
	// Role of the admin. This is not required for an auditor.
	Roles []AdminUsersRole `pulumi:"roles"`
	// The username of the admin user to be exported.
	Username *string `pulumi:"username"`
}

type AdminUsersState struct {
	AdminId pulumi.IntPtrInput
	// Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
	AdminScopeEntities AdminUsersAdminScopeEntitiesPtrInput
	// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
	AdminScopeType pulumi.StringPtrInput
	// Additional information about the admin or auditor.
	Comments pulumi.StringPtrInput
	// Indicates whether or not the admin account is disabled.
	Disabled pulumi.BoolPtrInput
	// Admin or auditor's email address.
	Email pulumi.StringPtrInput
	// Indicates whether the user is an auditor. This attribute is subject to change.
	IsAuditor pulumi.BoolPtrInput
	// Indicates whether or not Executive Insights App access is enabled for the admin.
	IsExecMobileAppEnabled pulumi.BoolPtrInput
	// Indicates whether or not the admin can be edited or deleted.
	IsNonEditable pulumi.BoolPtrInput
	// Indicates whether or not an admin's password has expired.
	IsPasswordExpired pulumi.BoolPtrInput
	// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
	IsPasswordLoginAllowed pulumi.BoolPtrInput
	// Communication setting for Product Update.
	IsProductUpdateCommEnabled pulumi.BoolPtrInput
	// Communication for Security Report is enabled.
	IsSecurityReportCommEnabled pulumi.BoolPtrInput
	// Communication setting for Service Update.
	IsServiceUpdateCommEnabled pulumi.BoolPtrInput
	// The email address of the admin user to be exported.
	LoginName pulumi.StringPtrInput
	// The username of the admin user to be exported.
	Password pulumi.StringPtrInput
	// Role of the admin. This is not required for an auditor.
	Roles AdminUsersRoleArrayInput
	// The username of the admin user to be exported.
	Username pulumi.StringPtrInput
}

func (AdminUsersState) ElementType() reflect.Type {
	return reflect.TypeOf((*adminUsersState)(nil)).Elem()
}

type adminUsersArgs struct {
	// Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
	AdminScopeEntities *AdminUsersAdminScopeEntities `pulumi:"adminScopeEntities"`
	// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
	AdminScopeType *string `pulumi:"adminScopeType"`
	// Additional information about the admin or auditor.
	Comments *string `pulumi:"comments"`
	// Indicates whether or not the admin account is disabled.
	Disabled *bool `pulumi:"disabled"`
	// Admin or auditor's email address.
	Email string `pulumi:"email"`
	// Indicates whether the user is an auditor. This attribute is subject to change.
	IsAuditor *bool `pulumi:"isAuditor"`
	// Indicates whether or not Executive Insights App access is enabled for the admin.
	IsExecMobileAppEnabled *bool `pulumi:"isExecMobileAppEnabled"`
	// Indicates whether or not the admin can be edited or deleted.
	IsNonEditable *bool `pulumi:"isNonEditable"`
	// Indicates whether or not an admin's password has expired.
	IsPasswordExpired *bool `pulumi:"isPasswordExpired"`
	// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
	IsPasswordLoginAllowed *bool `pulumi:"isPasswordLoginAllowed"`
	// Communication setting for Product Update.
	IsProductUpdateCommEnabled *bool `pulumi:"isProductUpdateCommEnabled"`
	// Communication for Security Report is enabled.
	IsSecurityReportCommEnabled *bool `pulumi:"isSecurityReportCommEnabled"`
	// Communication setting for Service Update.
	IsServiceUpdateCommEnabled *bool `pulumi:"isServiceUpdateCommEnabled"`
	// The email address of the admin user to be exported.
	LoginName string `pulumi:"loginName"`
	// The username of the admin user to be exported.
	Password *string `pulumi:"password"`
	// Role of the admin. This is not required for an auditor.
	Roles []AdminUsersRole `pulumi:"roles"`
	// The username of the admin user to be exported.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a AdminUsers resource.
type AdminUsersArgs struct {
	// Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
	AdminScopeEntities AdminUsersAdminScopeEntitiesPtrInput
	// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
	AdminScopeType pulumi.StringPtrInput
	// Additional information about the admin or auditor.
	Comments pulumi.StringPtrInput
	// Indicates whether or not the admin account is disabled.
	Disabled pulumi.BoolPtrInput
	// Admin or auditor's email address.
	Email pulumi.StringInput
	// Indicates whether the user is an auditor. This attribute is subject to change.
	IsAuditor pulumi.BoolPtrInput
	// Indicates whether or not Executive Insights App access is enabled for the admin.
	IsExecMobileAppEnabled pulumi.BoolPtrInput
	// Indicates whether or not the admin can be edited or deleted.
	IsNonEditable pulumi.BoolPtrInput
	// Indicates whether or not an admin's password has expired.
	IsPasswordExpired pulumi.BoolPtrInput
	// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
	IsPasswordLoginAllowed pulumi.BoolPtrInput
	// Communication setting for Product Update.
	IsProductUpdateCommEnabled pulumi.BoolPtrInput
	// Communication for Security Report is enabled.
	IsSecurityReportCommEnabled pulumi.BoolPtrInput
	// Communication setting for Service Update.
	IsServiceUpdateCommEnabled pulumi.BoolPtrInput
	// The email address of the admin user to be exported.
	LoginName pulumi.StringInput
	// The username of the admin user to be exported.
	Password pulumi.StringPtrInput
	// Role of the admin. This is not required for an auditor.
	Roles AdminUsersRoleArrayInput
	// The username of the admin user to be exported.
	Username pulumi.StringInput
}

func (AdminUsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*adminUsersArgs)(nil)).Elem()
}

type AdminUsersInput interface {
	pulumi.Input

	ToAdminUsersOutput() AdminUsersOutput
	ToAdminUsersOutputWithContext(ctx context.Context) AdminUsersOutput
}

func (*AdminUsers) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminUsers)(nil)).Elem()
}

func (i *AdminUsers) ToAdminUsersOutput() AdminUsersOutput {
	return i.ToAdminUsersOutputWithContext(context.Background())
}

func (i *AdminUsers) ToAdminUsersOutputWithContext(ctx context.Context) AdminUsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminUsersOutput)
}

// AdminUsersArrayInput is an input type that accepts AdminUsersArray and AdminUsersArrayOutput values.
// You can construct a concrete instance of `AdminUsersArrayInput` via:
//
//	AdminUsersArray{ AdminUsersArgs{...} }
type AdminUsersArrayInput interface {
	pulumi.Input

	ToAdminUsersArrayOutput() AdminUsersArrayOutput
	ToAdminUsersArrayOutputWithContext(context.Context) AdminUsersArrayOutput
}

type AdminUsersArray []AdminUsersInput

func (AdminUsersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminUsers)(nil)).Elem()
}

func (i AdminUsersArray) ToAdminUsersArrayOutput() AdminUsersArrayOutput {
	return i.ToAdminUsersArrayOutputWithContext(context.Background())
}

func (i AdminUsersArray) ToAdminUsersArrayOutputWithContext(ctx context.Context) AdminUsersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminUsersArrayOutput)
}

// AdminUsersMapInput is an input type that accepts AdminUsersMap and AdminUsersMapOutput values.
// You can construct a concrete instance of `AdminUsersMapInput` via:
//
//	AdminUsersMap{ "key": AdminUsersArgs{...} }
type AdminUsersMapInput interface {
	pulumi.Input

	ToAdminUsersMapOutput() AdminUsersMapOutput
	ToAdminUsersMapOutputWithContext(context.Context) AdminUsersMapOutput
}

type AdminUsersMap map[string]AdminUsersInput

func (AdminUsersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminUsers)(nil)).Elem()
}

func (i AdminUsersMap) ToAdminUsersMapOutput() AdminUsersMapOutput {
	return i.ToAdminUsersMapOutputWithContext(context.Background())
}

func (i AdminUsersMap) ToAdminUsersMapOutputWithContext(ctx context.Context) AdminUsersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminUsersMapOutput)
}

type AdminUsersOutput struct{ *pulumi.OutputState }

func (AdminUsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminUsers)(nil)).Elem()
}

func (o AdminUsersOutput) ToAdminUsersOutput() AdminUsersOutput {
	return o
}

func (o AdminUsersOutput) ToAdminUsersOutputWithContext(ctx context.Context) AdminUsersOutput {
	return o
}

func (o AdminUsersOutput) AdminId() pulumi.IntOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.IntOutput { return v.AdminId }).(pulumi.IntOutput)
}

// Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
func (o AdminUsersOutput) AdminScopeEntities() AdminUsersAdminScopeEntitiesOutput {
	return o.ApplyT(func(v *AdminUsers) AdminUsersAdminScopeEntitiesOutput { return v.AdminScopeEntities }).(AdminUsersAdminScopeEntitiesOutput)
}

// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
func (o AdminUsersOutput) AdminScopeType() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.StringOutput { return v.AdminScopeType }).(pulumi.StringOutput)
}

// Additional information about the admin or auditor.
func (o AdminUsersOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Indicates whether or not the admin account is disabled.
func (o AdminUsersOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.BoolPtrOutput { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// Admin or auditor's email address.
func (o AdminUsersOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// Indicates whether the user is an auditor. This attribute is subject to change.
func (o AdminUsersOutput) IsAuditor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.BoolPtrOutput { return v.IsAuditor }).(pulumi.BoolPtrOutput)
}

// Indicates whether or not Executive Insights App access is enabled for the admin.
func (o AdminUsersOutput) IsExecMobileAppEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.BoolPtrOutput { return v.IsExecMobileAppEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates whether or not the admin can be edited or deleted.
func (o AdminUsersOutput) IsNonEditable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.BoolPtrOutput { return v.IsNonEditable }).(pulumi.BoolPtrOutput)
}

// Indicates whether or not an admin's password has expired.
func (o AdminUsersOutput) IsPasswordExpired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.BoolPtrOutput { return v.IsPasswordExpired }).(pulumi.BoolPtrOutput)
}

// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
func (o AdminUsersOutput) IsPasswordLoginAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.BoolPtrOutput { return v.IsPasswordLoginAllowed }).(pulumi.BoolPtrOutput)
}

// Communication setting for Product Update.
func (o AdminUsersOutput) IsProductUpdateCommEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.BoolPtrOutput { return v.IsProductUpdateCommEnabled }).(pulumi.BoolPtrOutput)
}

// Communication for Security Report is enabled.
func (o AdminUsersOutput) IsSecurityReportCommEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.BoolPtrOutput { return v.IsSecurityReportCommEnabled }).(pulumi.BoolPtrOutput)
}

// Communication setting for Service Update.
func (o AdminUsersOutput) IsServiceUpdateCommEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.BoolPtrOutput { return v.IsServiceUpdateCommEnabled }).(pulumi.BoolPtrOutput)
}

// The email address of the admin user to be exported.
func (o AdminUsersOutput) LoginName() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.StringOutput { return v.LoginName }).(pulumi.StringOutput)
}

// The username of the admin user to be exported.
func (o AdminUsersOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Role of the admin. This is not required for an auditor.
func (o AdminUsersOutput) Roles() AdminUsersRoleArrayOutput {
	return o.ApplyT(func(v *AdminUsers) AdminUsersRoleArrayOutput { return v.Roles }).(AdminUsersRoleArrayOutput)
}

// The username of the admin user to be exported.
func (o AdminUsersOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminUsers) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type AdminUsersArrayOutput struct{ *pulumi.OutputState }

func (AdminUsersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminUsers)(nil)).Elem()
}

func (o AdminUsersArrayOutput) ToAdminUsersArrayOutput() AdminUsersArrayOutput {
	return o
}

func (o AdminUsersArrayOutput) ToAdminUsersArrayOutputWithContext(ctx context.Context) AdminUsersArrayOutput {
	return o
}

func (o AdminUsersArrayOutput) Index(i pulumi.IntInput) AdminUsersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AdminUsers {
		return vs[0].([]*AdminUsers)[vs[1].(int)]
	}).(AdminUsersOutput)
}

type AdminUsersMapOutput struct{ *pulumi.OutputState }

func (AdminUsersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminUsers)(nil)).Elem()
}

func (o AdminUsersMapOutput) ToAdminUsersMapOutput() AdminUsersMapOutput {
	return o
}

func (o AdminUsersMapOutput) ToAdminUsersMapOutputWithContext(ctx context.Context) AdminUsersMapOutput {
	return o
}

func (o AdminUsersMapOutput) MapIndex(k pulumi.StringInput) AdminUsersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AdminUsers {
		return vs[0].(map[string]*AdminUsers)[vs[1].(string)]
	}).(AdminUsersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdminUsersInput)(nil)).Elem(), &AdminUsers{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminUsersArrayInput)(nil)).Elem(), AdminUsersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminUsersMapInput)(nil)).Elem(), AdminUsersMap{})
	pulumi.RegisterOutputType(AdminUsersOutput{})
	pulumi.RegisterOutputType(AdminUsersArrayOutput{})
	pulumi.RegisterOutputType(AdminUsersMapOutput{})
}
