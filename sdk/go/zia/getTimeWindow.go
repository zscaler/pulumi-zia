// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/defining-time-intervals)
// * [API documentation](https://help.zscaler.com/zia/firewall-policies#/timeWindows-get)
//
// Use the **zia_firewall_filtering_time_window** data source to get information about a time window option available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering rule.
//
// ## Example Usage
func GetTimeWindow(ctx *pulumi.Context, args *GetTimeWindowArgs, opts ...pulumi.InvokeOption) (*GetTimeWindowResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTimeWindowResult
	err := ctx.Invoke("zia:index/getTimeWindow:getTimeWindow", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTimeWindow.
type GetTimeWindowArgs struct {
	// The name of the time window to be exported.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getTimeWindow.
type GetTimeWindowResult struct {
	// (String). The supported values are:
	// * `ANY` - (String)
	// * `NONE` - (String)
	// * `EVERYDAY` - (String)
	// * `SUN` - (String)
	// * `MON` - (String)
	// * `TUE` - (String)
	// * `WED` - (String)
	// * `THU` - (String)
	// * `FRI` - (String)
	// * `SAT` - (String)
	DayOfWeeks []string `pulumi:"dayOfWeeks"`
	// (String)
	EndTime int     `pulumi:"endTime"`
	Id      int     `pulumi:"id"`
	Name    *string `pulumi:"name"`
	// (String)
	StartTime int `pulumi:"startTime"`
}

func GetTimeWindowOutput(ctx *pulumi.Context, args GetTimeWindowOutputArgs, opts ...pulumi.InvokeOption) GetTimeWindowResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetTimeWindowResultOutput, error) {
			args := v.(GetTimeWindowArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("zia:index/getTimeWindow:getTimeWindow", args, GetTimeWindowResultOutput{}, options).(GetTimeWindowResultOutput), nil
		}).(GetTimeWindowResultOutput)
}

// A collection of arguments for invoking getTimeWindow.
type GetTimeWindowOutputArgs struct {
	// The name of the time window to be exported.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetTimeWindowOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTimeWindowArgs)(nil)).Elem()
}

// A collection of values returned by getTimeWindow.
type GetTimeWindowResultOutput struct{ *pulumi.OutputState }

func (GetTimeWindowResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTimeWindowResult)(nil)).Elem()
}

func (o GetTimeWindowResultOutput) ToGetTimeWindowResultOutput() GetTimeWindowResultOutput {
	return o
}

func (o GetTimeWindowResultOutput) ToGetTimeWindowResultOutputWithContext(ctx context.Context) GetTimeWindowResultOutput {
	return o
}

// (String). The supported values are:
// * `ANY` - (String)
// * `NONE` - (String)
// * `EVERYDAY` - (String)
// * `SUN` - (String)
// * `MON` - (String)
// * `TUE` - (String)
// * `WED` - (String)
// * `THU` - (String)
// * `FRI` - (String)
// * `SAT` - (String)
func (o GetTimeWindowResultOutput) DayOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTimeWindowResult) []string { return v.DayOfWeeks }).(pulumi.StringArrayOutput)
}

// (String)
func (o GetTimeWindowResultOutput) EndTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetTimeWindowResult) int { return v.EndTime }).(pulumi.IntOutput)
}

func (o GetTimeWindowResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetTimeWindowResult) int { return v.Id }).(pulumi.IntOutput)
}

func (o GetTimeWindowResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTimeWindowResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (String)
func (o GetTimeWindowResultOutput) StartTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetTimeWindowResult) int { return v.StartTime }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTimeWindowResultOutput{})
}
