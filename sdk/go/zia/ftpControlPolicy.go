// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/about-ftp-control)
// * [API documentation](https://help.zscaler.com/zia/ftp-control-policy#/ftpSettings-get)
//
// The **zia_ftp_control_policy** resource allows you to update FTP control Policy. To learn more see [Configuring the FTP Control Policy](https://help.zscaler.com/zia/configuring-ftp-control-policy)
//
// ## Example Usage
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_ftp_control_policy** can be imported by using `ftp_control` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/ftpControlPolicy:FtpControlPolicy this "ftp_control"
// ```
type FtpControlPolicy struct {
	pulumi.CustomResourceState

	// Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
	FtpEnabled pulumi.BoolPtrOutput `pulumi:"ftpEnabled"`
	// Indicates whether to enable FTP over HTTP.
	FtpOverHttpEnabled pulumi.BoolPtrOutput `pulumi:"ftpOverHttpEnabled"`
	// List of URL categories for which rule must be applied
	UrlCategories pulumi.StringArrayOutput `pulumi:"urlCategories"`
	// Domains or URLs included for the FTP Control settings
	Urls pulumi.StringArrayOutput `pulumi:"urls"`
}

// NewFtpControlPolicy registers a new resource with the given unique name, arguments, and options.
func NewFtpControlPolicy(ctx *pulumi.Context,
	name string, args *FtpControlPolicyArgs, opts ...pulumi.ResourceOption) (*FtpControlPolicy, error) {
	if args == nil {
		args = &FtpControlPolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FtpControlPolicy
	err := ctx.RegisterResource("zia:index/ftpControlPolicy:FtpControlPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFtpControlPolicy gets an existing FtpControlPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFtpControlPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FtpControlPolicyState, opts ...pulumi.ResourceOption) (*FtpControlPolicy, error) {
	var resource FtpControlPolicy
	err := ctx.ReadResource("zia:index/ftpControlPolicy:FtpControlPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FtpControlPolicy resources.
type ftpControlPolicyState struct {
	// Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
	FtpEnabled *bool `pulumi:"ftpEnabled"`
	// Indicates whether to enable FTP over HTTP.
	FtpOverHttpEnabled *bool `pulumi:"ftpOverHttpEnabled"`
	// List of URL categories for which rule must be applied
	UrlCategories []string `pulumi:"urlCategories"`
	// Domains or URLs included for the FTP Control settings
	Urls []string `pulumi:"urls"`
}

type FtpControlPolicyState struct {
	// Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
	FtpEnabled pulumi.BoolPtrInput
	// Indicates whether to enable FTP over HTTP.
	FtpOverHttpEnabled pulumi.BoolPtrInput
	// List of URL categories for which rule must be applied
	UrlCategories pulumi.StringArrayInput
	// Domains or URLs included for the FTP Control settings
	Urls pulumi.StringArrayInput
}

func (FtpControlPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*ftpControlPolicyState)(nil)).Elem()
}

type ftpControlPolicyArgs struct {
	// Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
	FtpEnabled *bool `pulumi:"ftpEnabled"`
	// Indicates whether to enable FTP over HTTP.
	FtpOverHttpEnabled *bool `pulumi:"ftpOverHttpEnabled"`
	// List of URL categories for which rule must be applied
	UrlCategories []string `pulumi:"urlCategories"`
	// Domains or URLs included for the FTP Control settings
	Urls []string `pulumi:"urls"`
}

// The set of arguments for constructing a FtpControlPolicy resource.
type FtpControlPolicyArgs struct {
	// Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
	FtpEnabled pulumi.BoolPtrInput
	// Indicates whether to enable FTP over HTTP.
	FtpOverHttpEnabled pulumi.BoolPtrInput
	// List of URL categories for which rule must be applied
	UrlCategories pulumi.StringArrayInput
	// Domains or URLs included for the FTP Control settings
	Urls pulumi.StringArrayInput
}

func (FtpControlPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ftpControlPolicyArgs)(nil)).Elem()
}

type FtpControlPolicyInput interface {
	pulumi.Input

	ToFtpControlPolicyOutput() FtpControlPolicyOutput
	ToFtpControlPolicyOutputWithContext(ctx context.Context) FtpControlPolicyOutput
}

func (*FtpControlPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**FtpControlPolicy)(nil)).Elem()
}

func (i *FtpControlPolicy) ToFtpControlPolicyOutput() FtpControlPolicyOutput {
	return i.ToFtpControlPolicyOutputWithContext(context.Background())
}

func (i *FtpControlPolicy) ToFtpControlPolicyOutputWithContext(ctx context.Context) FtpControlPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtpControlPolicyOutput)
}

// FtpControlPolicyArrayInput is an input type that accepts FtpControlPolicyArray and FtpControlPolicyArrayOutput values.
// You can construct a concrete instance of `FtpControlPolicyArrayInput` via:
//
//	FtpControlPolicyArray{ FtpControlPolicyArgs{...} }
type FtpControlPolicyArrayInput interface {
	pulumi.Input

	ToFtpControlPolicyArrayOutput() FtpControlPolicyArrayOutput
	ToFtpControlPolicyArrayOutputWithContext(context.Context) FtpControlPolicyArrayOutput
}

type FtpControlPolicyArray []FtpControlPolicyInput

func (FtpControlPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FtpControlPolicy)(nil)).Elem()
}

func (i FtpControlPolicyArray) ToFtpControlPolicyArrayOutput() FtpControlPolicyArrayOutput {
	return i.ToFtpControlPolicyArrayOutputWithContext(context.Background())
}

func (i FtpControlPolicyArray) ToFtpControlPolicyArrayOutputWithContext(ctx context.Context) FtpControlPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtpControlPolicyArrayOutput)
}

// FtpControlPolicyMapInput is an input type that accepts FtpControlPolicyMap and FtpControlPolicyMapOutput values.
// You can construct a concrete instance of `FtpControlPolicyMapInput` via:
//
//	FtpControlPolicyMap{ "key": FtpControlPolicyArgs{...} }
type FtpControlPolicyMapInput interface {
	pulumi.Input

	ToFtpControlPolicyMapOutput() FtpControlPolicyMapOutput
	ToFtpControlPolicyMapOutputWithContext(context.Context) FtpControlPolicyMapOutput
}

type FtpControlPolicyMap map[string]FtpControlPolicyInput

func (FtpControlPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FtpControlPolicy)(nil)).Elem()
}

func (i FtpControlPolicyMap) ToFtpControlPolicyMapOutput() FtpControlPolicyMapOutput {
	return i.ToFtpControlPolicyMapOutputWithContext(context.Background())
}

func (i FtpControlPolicyMap) ToFtpControlPolicyMapOutputWithContext(ctx context.Context) FtpControlPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FtpControlPolicyMapOutput)
}

type FtpControlPolicyOutput struct{ *pulumi.OutputState }

func (FtpControlPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FtpControlPolicy)(nil)).Elem()
}

func (o FtpControlPolicyOutput) ToFtpControlPolicyOutput() FtpControlPolicyOutput {
	return o
}

func (o FtpControlPolicyOutput) ToFtpControlPolicyOutputWithContext(ctx context.Context) FtpControlPolicyOutput {
	return o
}

// Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
func (o FtpControlPolicyOutput) FtpEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FtpControlPolicy) pulumi.BoolPtrOutput { return v.FtpEnabled }).(pulumi.BoolPtrOutput)
}

// Indicates whether to enable FTP over HTTP.
func (o FtpControlPolicyOutput) FtpOverHttpEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FtpControlPolicy) pulumi.BoolPtrOutput { return v.FtpOverHttpEnabled }).(pulumi.BoolPtrOutput)
}

// List of URL categories for which rule must be applied
func (o FtpControlPolicyOutput) UrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FtpControlPolicy) pulumi.StringArrayOutput { return v.UrlCategories }).(pulumi.StringArrayOutput)
}

// Domains or URLs included for the FTP Control settings
func (o FtpControlPolicyOutput) Urls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FtpControlPolicy) pulumi.StringArrayOutput { return v.Urls }).(pulumi.StringArrayOutput)
}

type FtpControlPolicyArrayOutput struct{ *pulumi.OutputState }

func (FtpControlPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FtpControlPolicy)(nil)).Elem()
}

func (o FtpControlPolicyArrayOutput) ToFtpControlPolicyArrayOutput() FtpControlPolicyArrayOutput {
	return o
}

func (o FtpControlPolicyArrayOutput) ToFtpControlPolicyArrayOutputWithContext(ctx context.Context) FtpControlPolicyArrayOutput {
	return o
}

func (o FtpControlPolicyArrayOutput) Index(i pulumi.IntInput) FtpControlPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FtpControlPolicy {
		return vs[0].([]*FtpControlPolicy)[vs[1].(int)]
	}).(FtpControlPolicyOutput)
}

type FtpControlPolicyMapOutput struct{ *pulumi.OutputState }

func (FtpControlPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FtpControlPolicy)(nil)).Elem()
}

func (o FtpControlPolicyMapOutput) ToFtpControlPolicyMapOutput() FtpControlPolicyMapOutput {
	return o
}

func (o FtpControlPolicyMapOutput) ToFtpControlPolicyMapOutputWithContext(ctx context.Context) FtpControlPolicyMapOutput {
	return o
}

func (o FtpControlPolicyMapOutput) MapIndex(k pulumi.StringInput) FtpControlPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FtpControlPolicy {
		return vs[0].(map[string]*FtpControlPolicy)[vs[1].(string)]
	}).(FtpControlPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FtpControlPolicyInput)(nil)).Elem(), &FtpControlPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*FtpControlPolicyArrayInput)(nil)).Elem(), FtpControlPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FtpControlPolicyMapInput)(nil)).Elem(), FtpControlPolicyMap{})
	pulumi.RegisterOutputType(FtpControlPolicyOutput{})
	pulumi.RegisterOutputType(FtpControlPolicyArrayOutput{})
	pulumi.RegisterOutputType(FtpControlPolicyMapOutput{})
}
