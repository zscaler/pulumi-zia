// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/about-nss-servers)
// * [API documentation](https://help.zscaler.com/zia/cloud-nanolog-streaming-service-nss#/nssServers-get)
//
// The **zia_nss_server** resource allows the creation and management of NSS Server Objects in the Zscaler Internet Access cloud or via the API.
// See [Adding NSS Servers](https://help.zscaler.com/zia/adding-nss-servers) for more details.
//
// ## Example Usage
//
// ### Type NSS_FOR_FIREWALL
//
// ### Type NSS_FOR_WEB
//
//	resource "NssServer" "this" {
//	    name = "NSSServer01"
//	    status = "ENABLED"
//	    type = "NSS_FOR_WEB"
//	}
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_nss_server** can be imported by using `<NSS_ID>` or `<NSS_NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/nssServer:NssServer example <nss_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zia:index/nssServer:NssServer example <nss_name>
// ```
type NssServer struct {
	pulumi.CustomResourceState

	// The ICAP server ID
	IcapSvrId pulumi.IntPtrOutput `pulumi:"icapSvrId"`
	// The name of the devices to be created.
	Name  pulumi.StringOutput `pulumi:"name"`
	NssId pulumi.IntOutput    `pulumi:"nssId"`
	// Enables or disables the status of the NSS server
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewNssServer registers a new resource with the given unique name, arguments, and options.
func NewNssServer(ctx *pulumi.Context,
	name string, args *NssServerArgs, opts ...pulumi.ResourceOption) (*NssServer, error) {
	if args == nil {
		args = &NssServerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NssServer
	err := ctx.RegisterResource("zia:index/nssServer:NssServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNssServer gets an existing NssServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNssServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NssServerState, opts ...pulumi.ResourceOption) (*NssServer, error) {
	var resource NssServer
	err := ctx.ReadResource("zia:index/nssServer:NssServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NssServer resources.
type nssServerState struct {
	// The ICAP server ID
	IcapSvrId *int `pulumi:"icapSvrId"`
	// The name of the devices to be created.
	Name  *string `pulumi:"name"`
	NssId *int    `pulumi:"nssId"`
	// Enables or disables the status of the NSS server
	Status *string `pulumi:"status"`
	// Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
	Type *string `pulumi:"type"`
}

type NssServerState struct {
	// The ICAP server ID
	IcapSvrId pulumi.IntPtrInput
	// The name of the devices to be created.
	Name  pulumi.StringPtrInput
	NssId pulumi.IntPtrInput
	// Enables or disables the status of the NSS server
	Status pulumi.StringPtrInput
	// Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
	Type pulumi.StringPtrInput
}

func (NssServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*nssServerState)(nil)).Elem()
}

type nssServerArgs struct {
	// The ICAP server ID
	IcapSvrId *int `pulumi:"icapSvrId"`
	// The name of the devices to be created.
	Name *string `pulumi:"name"`
	// Enables or disables the status of the NSS server
	Status *string `pulumi:"status"`
	// Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a NssServer resource.
type NssServerArgs struct {
	// The ICAP server ID
	IcapSvrId pulumi.IntPtrInput
	// The name of the devices to be created.
	Name pulumi.StringPtrInput
	// Enables or disables the status of the NSS server
	Status pulumi.StringPtrInput
	// Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
	Type pulumi.StringPtrInput
}

func (NssServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nssServerArgs)(nil)).Elem()
}

type NssServerInput interface {
	pulumi.Input

	ToNssServerOutput() NssServerOutput
	ToNssServerOutputWithContext(ctx context.Context) NssServerOutput
}

func (*NssServer) ElementType() reflect.Type {
	return reflect.TypeOf((**NssServer)(nil)).Elem()
}

func (i *NssServer) ToNssServerOutput() NssServerOutput {
	return i.ToNssServerOutputWithContext(context.Background())
}

func (i *NssServer) ToNssServerOutputWithContext(ctx context.Context) NssServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NssServerOutput)
}

// NssServerArrayInput is an input type that accepts NssServerArray and NssServerArrayOutput values.
// You can construct a concrete instance of `NssServerArrayInput` via:
//
//	NssServerArray{ NssServerArgs{...} }
type NssServerArrayInput interface {
	pulumi.Input

	ToNssServerArrayOutput() NssServerArrayOutput
	ToNssServerArrayOutputWithContext(context.Context) NssServerArrayOutput
}

type NssServerArray []NssServerInput

func (NssServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NssServer)(nil)).Elem()
}

func (i NssServerArray) ToNssServerArrayOutput() NssServerArrayOutput {
	return i.ToNssServerArrayOutputWithContext(context.Background())
}

func (i NssServerArray) ToNssServerArrayOutputWithContext(ctx context.Context) NssServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NssServerArrayOutput)
}

// NssServerMapInput is an input type that accepts NssServerMap and NssServerMapOutput values.
// You can construct a concrete instance of `NssServerMapInput` via:
//
//	NssServerMap{ "key": NssServerArgs{...} }
type NssServerMapInput interface {
	pulumi.Input

	ToNssServerMapOutput() NssServerMapOutput
	ToNssServerMapOutputWithContext(context.Context) NssServerMapOutput
}

type NssServerMap map[string]NssServerInput

func (NssServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NssServer)(nil)).Elem()
}

func (i NssServerMap) ToNssServerMapOutput() NssServerMapOutput {
	return i.ToNssServerMapOutputWithContext(context.Background())
}

func (i NssServerMap) ToNssServerMapOutputWithContext(ctx context.Context) NssServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NssServerMapOutput)
}

type NssServerOutput struct{ *pulumi.OutputState }

func (NssServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NssServer)(nil)).Elem()
}

func (o NssServerOutput) ToNssServerOutput() NssServerOutput {
	return o
}

func (o NssServerOutput) ToNssServerOutputWithContext(ctx context.Context) NssServerOutput {
	return o
}

// The ICAP server ID
func (o NssServerOutput) IcapSvrId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NssServer) pulumi.IntPtrOutput { return v.IcapSvrId }).(pulumi.IntPtrOutput)
}

// The name of the devices to be created.
func (o NssServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NssServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o NssServerOutput) NssId() pulumi.IntOutput {
	return o.ApplyT(func(v *NssServer) pulumi.IntOutput { return v.NssId }).(pulumi.IntOutput)
}

// Enables or disables the status of the NSS server
func (o NssServerOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NssServer) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
func (o NssServerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NssServer) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type NssServerArrayOutput struct{ *pulumi.OutputState }

func (NssServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NssServer)(nil)).Elem()
}

func (o NssServerArrayOutput) ToNssServerArrayOutput() NssServerArrayOutput {
	return o
}

func (o NssServerArrayOutput) ToNssServerArrayOutputWithContext(ctx context.Context) NssServerArrayOutput {
	return o
}

func (o NssServerArrayOutput) Index(i pulumi.IntInput) NssServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NssServer {
		return vs[0].([]*NssServer)[vs[1].(int)]
	}).(NssServerOutput)
}

type NssServerMapOutput struct{ *pulumi.OutputState }

func (NssServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NssServer)(nil)).Elem()
}

func (o NssServerMapOutput) ToNssServerMapOutput() NssServerMapOutput {
	return o
}

func (o NssServerMapOutput) ToNssServerMapOutputWithContext(ctx context.Context) NssServerMapOutput {
	return o
}

func (o NssServerMapOutput) MapIndex(k pulumi.StringInput) NssServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NssServer {
		return vs[0].(map[string]*NssServer)[vs[1].(string)]
	}).(NssServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NssServerInput)(nil)).Elem(), &NssServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*NssServerArrayInput)(nil)).Elem(), NssServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NssServerMapInput)(nil)).Elem(), NssServerMap{})
	pulumi.RegisterOutputType(NssServerOutput{})
	pulumi.RegisterOutputType(NssServerArrayOutput{})
	pulumi.RegisterOutputType(NssServerMapOutput{})
}
