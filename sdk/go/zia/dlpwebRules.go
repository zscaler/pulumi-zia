// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/configuring-dlp-policy-rules-content-inspection#Rules)
// * [API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-get)
//
// The **zia_dlp_web_rules** resource allows the creation and management of ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.
//
// ⚠️ **WARNING:** Zscaler Internet Access DLP supports a maximum of 127 Web DLP Rules to be created via API.
//
// ## Example Usage
//
// ### "FTCATEGORY_ALL_OUTBOUND" File Type"
//
// ### "Specify Incident Receiver Setting"
//
// ### "Creating Parent Rules And SubRules"
//
// ⚠️ **WARNING:** Destroying a parent rule will also destroy all subrules
//
//	**NOTE** Exception rules can be configured only when the inline DLP rule evaluation type is set
//	to evaluate all DLP rules in the DLP Advanced Settings.
//	To learn more, see [Configuring DLP Advanced Settings](https://help.zscaler.com/%22/zia/configuring-dlp-advanced-settings/%22)
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_dlp_web_rules** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/dLPWebRules:DLPWebRules example <rule_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zia:index/dLPWebRules:DLPWebRules example <rule_name>
// ```
type DLPWebRules struct {
	pulumi.CustomResourceState

	// The action taken when traffic matches the DLP policy rule criteria.
	Action pulumi.StringOutput `pulumi:"action"`
	// The auditor to which the DLP policy rule must be applied.
	Auditors DLPWebRulesAuditorArrayOutput `pulumi:"auditors"`
	// The list of cloud applications to which the DLP policy rule must be applied.
	CloudApplications pulumi.StringArrayOutput `pulumi:"cloudApplications"`
	// The Name-ID pairs of departments to which the DLP policy rule must be applied.
	Departments DLPWebRulesDepartmentsPtrOutput `pulumi:"departments"`
	// The description of the DLP policy rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	DlpDownloadScanEnabled pulumi.BoolOutput `pulumi:"dlpDownloadScanEnabled"`
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines DLPWebRulesDlpEnginesPtrOutput `pulumi:"dlpEngines"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedDepartments DLPWebRulesExcludedDepartmentsPtrOutput `pulumi:"excludedDepartments"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedDomainProfiles DLPWebRulesExcludedDomainProfilesPtrOutput `pulumi:"excludedDomainProfiles"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedGroups DLPWebRulesExcludedGroupsPtrOutput `pulumi:"excludedGroups"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedUsers DLPWebRulesExcludedUsersPtrOutput `pulumi:"excludedUsers"`
	// The email address of an external auditor to whom DLP email notifications are sent
	ExternalAuditorEmail pulumi.StringPtrOutput `pulumi:"externalAuditorEmail"`
	// The list of file types for which the DLP policy rule must be applied.
	FileTypes pulumi.StringArrayOutput `pulumi:"fileTypes"`
	// The Name-ID pairs of groups to which the DLP policy rule must be applied.
	Groups DLPWebRulesGroupsPtrOutput `pulumi:"groups"`
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServers DLPWebRulesIcapServerArrayOutput `pulumi:"icapServers"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	IncludedDomainProfiles DLPWebRulesIncludedDomainProfilesPtrOutput `pulumi:"includedDomainProfiles"`
	InspectHttpGetEnabled  pulumi.BoolPtrOutput                       `pulumi:"inspectHttpGetEnabled"`
	// list of Labels that are applicable to the rule.
	Labels DLPWebRulesLabelsPtrOutput `pulumi:"labels"`
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
	LocationGroups DLPWebRulesLocationGroupsPtrOutput `pulumi:"locationGroups"`
	// The Name-ID pairs of locations to which the DLP policy rule must be applied.
	Locations DLPWebRulesLocationsPtrOutput `pulumi:"locations"`
	// The match only criteria for DLP engines.
	MatchOnly pulumi.BoolOutput `pulumi:"matchOnly"`
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize pulumi.IntOutput `pulumi:"minSize"`
	// The DLP policy rule name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The template used for DLP notification emails.
	NotificationTemplates DLPWebRulesNotificationTemplateArrayOutput `pulumi:"notificationTemplates"`
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order pulumi.IntOutput `pulumi:"order"`
	// The unique identifier of the parent rule under which an exception rule is added
	ParentRule pulumi.IntOutput `pulumi:"parentRule"`
	// The protocol criteria specified for the DLP policy rule.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank   pulumi.IntOutput `pulumi:"rank"`
	RuleId pulumi.IntOutput `pulumi:"ruleId"`
	// Indicates the severity selected for the DLP rule violation
	Severity pulumi.StringOutput `pulumi:"severity"`
	// list of source ip groups
	SourceIpGroups DLPWebRulesSourceIpGroupsPtrOutput `pulumi:"sourceIpGroups"`
	// Enables or disables the DLP policy rule.
	State pulumi.StringOutput `pulumi:"state"`
	// The list of exception rules added to a parent rule
	SubRules pulumi.StringArrayOutput `pulumi:"subRules"`
	// list of time interval during which rule must be enforced.
	TimeWindows DLPWebRulesTimeWindowsPtrOutput `pulumi:"timeWindows"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories       DLPWebRulesUrlCategoriesPtrOutput `pulumi:"urlCategories"`
	UserRiskScoreLevels pulumi.StringArrayOutput          `pulumi:"userRiskScoreLevels"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	Users DLPWebRulesUsersPtrOutput `pulumi:"users"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection pulumi.BoolOutput `pulumi:"withoutContentInspection"`
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups DLPWebRulesWorkloadGroupArrayOutput `pulumi:"workloadGroups"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	ZccNotificationsEnabled pulumi.BoolOutput `pulumi:"zccNotificationsEnabled"`
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReceiver pulumi.BoolPtrOutput `pulumi:"zscalerIncidentReceiver"`
}

// NewDLPWebRules registers a new resource with the given unique name, arguments, and options.
func NewDLPWebRules(ctx *pulumi.Context,
	name string, args *DLPWebRulesArgs, opts ...pulumi.ResourceOption) (*DLPWebRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Order == nil {
		return nil, errors.New("invalid value for required argument 'Order'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DLPWebRules
	err := ctx.RegisterResource("zia:index/dLPWebRules:DLPWebRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDLPWebRules gets an existing DLPWebRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDLPWebRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DLPWebRulesState, opts ...pulumi.ResourceOption) (*DLPWebRules, error) {
	var resource DLPWebRules
	err := ctx.ReadResource("zia:index/dLPWebRules:DLPWebRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DLPWebRules resources.
type dlpwebRulesState struct {
	// The action taken when traffic matches the DLP policy rule criteria.
	Action *string `pulumi:"action"`
	// The auditor to which the DLP policy rule must be applied.
	Auditors []DLPWebRulesAuditor `pulumi:"auditors"`
	// The list of cloud applications to which the DLP policy rule must be applied.
	CloudApplications []string `pulumi:"cloudApplications"`
	// The Name-ID pairs of departments to which the DLP policy rule must be applied.
	Departments *DLPWebRulesDepartments `pulumi:"departments"`
	// The description of the DLP policy rule.
	Description *string `pulumi:"description"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	DlpDownloadScanEnabled *bool `pulumi:"dlpDownloadScanEnabled"`
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines *DLPWebRulesDlpEngines `pulumi:"dlpEngines"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedDepartments *DLPWebRulesExcludedDepartments `pulumi:"excludedDepartments"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedDomainProfiles *DLPWebRulesExcludedDomainProfiles `pulumi:"excludedDomainProfiles"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedGroups *DLPWebRulesExcludedGroups `pulumi:"excludedGroups"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedUsers *DLPWebRulesExcludedUsers `pulumi:"excludedUsers"`
	// The email address of an external auditor to whom DLP email notifications are sent
	ExternalAuditorEmail *string `pulumi:"externalAuditorEmail"`
	// The list of file types for which the DLP policy rule must be applied.
	FileTypes []string `pulumi:"fileTypes"`
	// The Name-ID pairs of groups to which the DLP policy rule must be applied.
	Groups *DLPWebRulesGroups `pulumi:"groups"`
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServers []DLPWebRulesIcapServer `pulumi:"icapServers"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	IncludedDomainProfiles *DLPWebRulesIncludedDomainProfiles `pulumi:"includedDomainProfiles"`
	InspectHttpGetEnabled  *bool                              `pulumi:"inspectHttpGetEnabled"`
	// list of Labels that are applicable to the rule.
	Labels *DLPWebRulesLabels `pulumi:"labels"`
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
	LocationGroups *DLPWebRulesLocationGroups `pulumi:"locationGroups"`
	// The Name-ID pairs of locations to which the DLP policy rule must be applied.
	Locations *DLPWebRulesLocations `pulumi:"locations"`
	// The match only criteria for DLP engines.
	MatchOnly *bool `pulumi:"matchOnly"`
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize *int `pulumi:"minSize"`
	// The DLP policy rule name.
	Name *string `pulumi:"name"`
	// The template used for DLP notification emails.
	NotificationTemplates []DLPWebRulesNotificationTemplate `pulumi:"notificationTemplates"`
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order *int `pulumi:"order"`
	// The unique identifier of the parent rule under which an exception rule is added
	ParentRule *int `pulumi:"parentRule"`
	// The protocol criteria specified for the DLP policy rule.
	Protocols []string `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank   *int `pulumi:"rank"`
	RuleId *int `pulumi:"ruleId"`
	// Indicates the severity selected for the DLP rule violation
	Severity *string `pulumi:"severity"`
	// list of source ip groups
	SourceIpGroups *DLPWebRulesSourceIpGroups `pulumi:"sourceIpGroups"`
	// Enables or disables the DLP policy rule.
	State *string `pulumi:"state"`
	// The list of exception rules added to a parent rule
	SubRules []string `pulumi:"subRules"`
	// list of time interval during which rule must be enforced.
	TimeWindows *DLPWebRulesTimeWindows `pulumi:"timeWindows"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories       *DLPWebRulesUrlCategories `pulumi:"urlCategories"`
	UserRiskScoreLevels []string                  `pulumi:"userRiskScoreLevels"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	Users *DLPWebRulesUsers `pulumi:"users"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection *bool `pulumi:"withoutContentInspection"`
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups []DLPWebRulesWorkloadGroup `pulumi:"workloadGroups"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	ZccNotificationsEnabled *bool `pulumi:"zccNotificationsEnabled"`
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReceiver *bool `pulumi:"zscalerIncidentReceiver"`
}

type DLPWebRulesState struct {
	// The action taken when traffic matches the DLP policy rule criteria.
	Action pulumi.StringPtrInput
	// The auditor to which the DLP policy rule must be applied.
	Auditors DLPWebRulesAuditorArrayInput
	// The list of cloud applications to which the DLP policy rule must be applied.
	CloudApplications pulumi.StringArrayInput
	// The Name-ID pairs of departments to which the DLP policy rule must be applied.
	Departments DLPWebRulesDepartmentsPtrInput
	// The description of the DLP policy rule.
	Description pulumi.StringPtrInput
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	DlpDownloadScanEnabled pulumi.BoolPtrInput
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines DLPWebRulesDlpEnginesPtrInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedDepartments DLPWebRulesExcludedDepartmentsPtrInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedDomainProfiles DLPWebRulesExcludedDomainProfilesPtrInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedGroups DLPWebRulesExcludedGroupsPtrInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedUsers DLPWebRulesExcludedUsersPtrInput
	// The email address of an external auditor to whom DLP email notifications are sent
	ExternalAuditorEmail pulumi.StringPtrInput
	// The list of file types for which the DLP policy rule must be applied.
	FileTypes pulumi.StringArrayInput
	// The Name-ID pairs of groups to which the DLP policy rule must be applied.
	Groups DLPWebRulesGroupsPtrInput
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServers DLPWebRulesIcapServerArrayInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	IncludedDomainProfiles DLPWebRulesIncludedDomainProfilesPtrInput
	InspectHttpGetEnabled  pulumi.BoolPtrInput
	// list of Labels that are applicable to the rule.
	Labels DLPWebRulesLabelsPtrInput
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
	LocationGroups DLPWebRulesLocationGroupsPtrInput
	// The Name-ID pairs of locations to which the DLP policy rule must be applied.
	Locations DLPWebRulesLocationsPtrInput
	// The match only criteria for DLP engines.
	MatchOnly pulumi.BoolPtrInput
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize pulumi.IntPtrInput
	// The DLP policy rule name.
	Name pulumi.StringPtrInput
	// The template used for DLP notification emails.
	NotificationTemplates DLPWebRulesNotificationTemplateArrayInput
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order pulumi.IntPtrInput
	// The unique identifier of the parent rule under which an exception rule is added
	ParentRule pulumi.IntPtrInput
	// The protocol criteria specified for the DLP policy rule.
	Protocols pulumi.StringArrayInput
	// Admin rank of the admin who creates this rule
	Rank   pulumi.IntPtrInput
	RuleId pulumi.IntPtrInput
	// Indicates the severity selected for the DLP rule violation
	Severity pulumi.StringPtrInput
	// list of source ip groups
	SourceIpGroups DLPWebRulesSourceIpGroupsPtrInput
	// Enables or disables the DLP policy rule.
	State pulumi.StringPtrInput
	// The list of exception rules added to a parent rule
	SubRules pulumi.StringArrayInput
	// list of time interval during which rule must be enforced.
	TimeWindows DLPWebRulesTimeWindowsPtrInput
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories       DLPWebRulesUrlCategoriesPtrInput
	UserRiskScoreLevels pulumi.StringArrayInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	Users DLPWebRulesUsersPtrInput
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection pulumi.BoolPtrInput
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups DLPWebRulesWorkloadGroupArrayInput
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	ZccNotificationsEnabled pulumi.BoolPtrInput
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReceiver pulumi.BoolPtrInput
}

func (DLPWebRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpwebRulesState)(nil)).Elem()
}

type dlpwebRulesArgs struct {
	// The action taken when traffic matches the DLP policy rule criteria.
	Action *string `pulumi:"action"`
	// The auditor to which the DLP policy rule must be applied.
	Auditors []DLPWebRulesAuditor `pulumi:"auditors"`
	// The list of cloud applications to which the DLP policy rule must be applied.
	CloudApplications []string `pulumi:"cloudApplications"`
	// The Name-ID pairs of departments to which the DLP policy rule must be applied.
	Departments *DLPWebRulesDepartments `pulumi:"departments"`
	// The description of the DLP policy rule.
	Description *string `pulumi:"description"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	DlpDownloadScanEnabled *bool `pulumi:"dlpDownloadScanEnabled"`
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines *DLPWebRulesDlpEngines `pulumi:"dlpEngines"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedDepartments *DLPWebRulesExcludedDepartments `pulumi:"excludedDepartments"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedDomainProfiles *DLPWebRulesExcludedDomainProfiles `pulumi:"excludedDomainProfiles"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedGroups *DLPWebRulesExcludedGroups `pulumi:"excludedGroups"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedUsers *DLPWebRulesExcludedUsers `pulumi:"excludedUsers"`
	// The email address of an external auditor to whom DLP email notifications are sent
	ExternalAuditorEmail *string `pulumi:"externalAuditorEmail"`
	// The list of file types for which the DLP policy rule must be applied.
	FileTypes []string `pulumi:"fileTypes"`
	// The Name-ID pairs of groups to which the DLP policy rule must be applied.
	Groups *DLPWebRulesGroups `pulumi:"groups"`
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServers []DLPWebRulesIcapServer `pulumi:"icapServers"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	IncludedDomainProfiles *DLPWebRulesIncludedDomainProfiles `pulumi:"includedDomainProfiles"`
	InspectHttpGetEnabled  *bool                              `pulumi:"inspectHttpGetEnabled"`
	// list of Labels that are applicable to the rule.
	Labels *DLPWebRulesLabels `pulumi:"labels"`
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
	LocationGroups *DLPWebRulesLocationGroups `pulumi:"locationGroups"`
	// The Name-ID pairs of locations to which the DLP policy rule must be applied.
	Locations *DLPWebRulesLocations `pulumi:"locations"`
	// The match only criteria for DLP engines.
	MatchOnly *bool `pulumi:"matchOnly"`
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize *int `pulumi:"minSize"`
	// The DLP policy rule name.
	Name *string `pulumi:"name"`
	// The template used for DLP notification emails.
	NotificationTemplates []DLPWebRulesNotificationTemplate `pulumi:"notificationTemplates"`
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order int `pulumi:"order"`
	// The unique identifier of the parent rule under which an exception rule is added
	ParentRule *int `pulumi:"parentRule"`
	// The protocol criteria specified for the DLP policy rule.
	Protocols []string `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank *int `pulumi:"rank"`
	// Indicates the severity selected for the DLP rule violation
	Severity *string `pulumi:"severity"`
	// list of source ip groups
	SourceIpGroups *DLPWebRulesSourceIpGroups `pulumi:"sourceIpGroups"`
	// Enables or disables the DLP policy rule.
	State *string `pulumi:"state"`
	// The list of exception rules added to a parent rule
	SubRules []string `pulumi:"subRules"`
	// list of time interval during which rule must be enforced.
	TimeWindows *DLPWebRulesTimeWindows `pulumi:"timeWindows"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories       *DLPWebRulesUrlCategories `pulumi:"urlCategories"`
	UserRiskScoreLevels []string                  `pulumi:"userRiskScoreLevels"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	Users *DLPWebRulesUsers `pulumi:"users"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection *bool `pulumi:"withoutContentInspection"`
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups []DLPWebRulesWorkloadGroup `pulumi:"workloadGroups"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	ZccNotificationsEnabled *bool `pulumi:"zccNotificationsEnabled"`
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReceiver *bool `pulumi:"zscalerIncidentReceiver"`
}

// The set of arguments for constructing a DLPWebRules resource.
type DLPWebRulesArgs struct {
	// The action taken when traffic matches the DLP policy rule criteria.
	Action pulumi.StringPtrInput
	// The auditor to which the DLP policy rule must be applied.
	Auditors DLPWebRulesAuditorArrayInput
	// The list of cloud applications to which the DLP policy rule must be applied.
	CloudApplications pulumi.StringArrayInput
	// The Name-ID pairs of departments to which the DLP policy rule must be applied.
	Departments DLPWebRulesDepartmentsPtrInput
	// The description of the DLP policy rule.
	Description pulumi.StringPtrInput
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	DlpDownloadScanEnabled pulumi.BoolPtrInput
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines DLPWebRulesDlpEnginesPtrInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedDepartments DLPWebRulesExcludedDepartmentsPtrInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedDomainProfiles DLPWebRulesExcludedDomainProfilesPtrInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedGroups DLPWebRulesExcludedGroupsPtrInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	ExcludedUsers DLPWebRulesExcludedUsersPtrInput
	// The email address of an external auditor to whom DLP email notifications are sent
	ExternalAuditorEmail pulumi.StringPtrInput
	// The list of file types for which the DLP policy rule must be applied.
	FileTypes pulumi.StringArrayInput
	// The Name-ID pairs of groups to which the DLP policy rule must be applied.
	Groups DLPWebRulesGroupsPtrInput
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServers DLPWebRulesIcapServerArrayInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	IncludedDomainProfiles DLPWebRulesIncludedDomainProfilesPtrInput
	InspectHttpGetEnabled  pulumi.BoolPtrInput
	// list of Labels that are applicable to the rule.
	Labels DLPWebRulesLabelsPtrInput
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
	LocationGroups DLPWebRulesLocationGroupsPtrInput
	// The Name-ID pairs of locations to which the DLP policy rule must be applied.
	Locations DLPWebRulesLocationsPtrInput
	// The match only criteria for DLP engines.
	MatchOnly pulumi.BoolPtrInput
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize pulumi.IntPtrInput
	// The DLP policy rule name.
	Name pulumi.StringPtrInput
	// The template used for DLP notification emails.
	NotificationTemplates DLPWebRulesNotificationTemplateArrayInput
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order pulumi.IntInput
	// The unique identifier of the parent rule under which an exception rule is added
	ParentRule pulumi.IntPtrInput
	// The protocol criteria specified for the DLP policy rule.
	Protocols pulumi.StringArrayInput
	// Admin rank of the admin who creates this rule
	Rank pulumi.IntPtrInput
	// Indicates the severity selected for the DLP rule violation
	Severity pulumi.StringPtrInput
	// list of source ip groups
	SourceIpGroups DLPWebRulesSourceIpGroupsPtrInput
	// Enables or disables the DLP policy rule.
	State pulumi.StringPtrInput
	// The list of exception rules added to a parent rule
	SubRules pulumi.StringArrayInput
	// list of time interval during which rule must be enforced.
	TimeWindows DLPWebRulesTimeWindowsPtrInput
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories       DLPWebRulesUrlCategoriesPtrInput
	UserRiskScoreLevels pulumi.StringArrayInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied.
	Users DLPWebRulesUsersPtrInput
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection pulumi.BoolPtrInput
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups DLPWebRulesWorkloadGroupArrayInput
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	ZccNotificationsEnabled pulumi.BoolPtrInput
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReceiver pulumi.BoolPtrInput
}

func (DLPWebRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpwebRulesArgs)(nil)).Elem()
}

type DLPWebRulesInput interface {
	pulumi.Input

	ToDLPWebRulesOutput() DLPWebRulesOutput
	ToDLPWebRulesOutputWithContext(ctx context.Context) DLPWebRulesOutput
}

func (*DLPWebRules) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRules)(nil)).Elem()
}

func (i *DLPWebRules) ToDLPWebRulesOutput() DLPWebRulesOutput {
	return i.ToDLPWebRulesOutputWithContext(context.Background())
}

func (i *DLPWebRules) ToDLPWebRulesOutputWithContext(ctx context.Context) DLPWebRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesOutput)
}

// DLPWebRulesArrayInput is an input type that accepts DLPWebRulesArray and DLPWebRulesArrayOutput values.
// You can construct a concrete instance of `DLPWebRulesArrayInput` via:
//
//	DLPWebRulesArray{ DLPWebRulesArgs{...} }
type DLPWebRulesArrayInput interface {
	pulumi.Input

	ToDLPWebRulesArrayOutput() DLPWebRulesArrayOutput
	ToDLPWebRulesArrayOutputWithContext(context.Context) DLPWebRulesArrayOutput
}

type DLPWebRulesArray []DLPWebRulesInput

func (DLPWebRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DLPWebRules)(nil)).Elem()
}

func (i DLPWebRulesArray) ToDLPWebRulesArrayOutput() DLPWebRulesArrayOutput {
	return i.ToDLPWebRulesArrayOutputWithContext(context.Background())
}

func (i DLPWebRulesArray) ToDLPWebRulesArrayOutputWithContext(ctx context.Context) DLPWebRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesArrayOutput)
}

// DLPWebRulesMapInput is an input type that accepts DLPWebRulesMap and DLPWebRulesMapOutput values.
// You can construct a concrete instance of `DLPWebRulesMapInput` via:
//
//	DLPWebRulesMap{ "key": DLPWebRulesArgs{...} }
type DLPWebRulesMapInput interface {
	pulumi.Input

	ToDLPWebRulesMapOutput() DLPWebRulesMapOutput
	ToDLPWebRulesMapOutputWithContext(context.Context) DLPWebRulesMapOutput
}

type DLPWebRulesMap map[string]DLPWebRulesInput

func (DLPWebRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DLPWebRules)(nil)).Elem()
}

func (i DLPWebRulesMap) ToDLPWebRulesMapOutput() DLPWebRulesMapOutput {
	return i.ToDLPWebRulesMapOutputWithContext(context.Background())
}

func (i DLPWebRulesMap) ToDLPWebRulesMapOutputWithContext(ctx context.Context) DLPWebRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesMapOutput)
}

type DLPWebRulesOutput struct{ *pulumi.OutputState }

func (DLPWebRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRules)(nil)).Elem()
}

func (o DLPWebRulesOutput) ToDLPWebRulesOutput() DLPWebRulesOutput {
	return o
}

func (o DLPWebRulesOutput) ToDLPWebRulesOutputWithContext(ctx context.Context) DLPWebRulesOutput {
	return o
}

// The action taken when traffic matches the DLP policy rule criteria.
func (o DLPWebRulesOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The auditor to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) Auditors() DLPWebRulesAuditorArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesAuditorArrayOutput { return v.Auditors }).(DLPWebRulesAuditorArrayOutput)
}

// The list of cloud applications to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) CloudApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringArrayOutput { return v.CloudApplications }).(pulumi.StringArrayOutput)
}

// The Name-ID pairs of departments to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) Departments() DLPWebRulesDepartmentsPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesDepartmentsPtrOutput { return v.Departments }).(DLPWebRulesDepartmentsPtrOutput)
}

// The description of the DLP policy rule.
func (o DLPWebRulesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates a DLP policy rule without content inspection, when the value is set to true.
func (o DLPWebRulesOutput) DlpDownloadScanEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolOutput { return v.DlpDownloadScanEnabled }).(pulumi.BoolOutput)
}

// The list of DLP engines to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) DlpEngines() DLPWebRulesDlpEnginesPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesDlpEnginesPtrOutput { return v.DlpEngines }).(DLPWebRulesDlpEnginesPtrOutput)
}

// The Name-ID pairs of users to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) ExcludedDepartments() DLPWebRulesExcludedDepartmentsPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesExcludedDepartmentsPtrOutput { return v.ExcludedDepartments }).(DLPWebRulesExcludedDepartmentsPtrOutput)
}

// The Name-ID pairs of users to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) ExcludedDomainProfiles() DLPWebRulesExcludedDomainProfilesPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesExcludedDomainProfilesPtrOutput { return v.ExcludedDomainProfiles }).(DLPWebRulesExcludedDomainProfilesPtrOutput)
}

// The Name-ID pairs of users to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) ExcludedGroups() DLPWebRulesExcludedGroupsPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesExcludedGroupsPtrOutput { return v.ExcludedGroups }).(DLPWebRulesExcludedGroupsPtrOutput)
}

// The Name-ID pairs of users to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) ExcludedUsers() DLPWebRulesExcludedUsersPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesExcludedUsersPtrOutput { return v.ExcludedUsers }).(DLPWebRulesExcludedUsersPtrOutput)
}

// The email address of an external auditor to whom DLP email notifications are sent
func (o DLPWebRulesOutput) ExternalAuditorEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringPtrOutput { return v.ExternalAuditorEmail }).(pulumi.StringPtrOutput)
}

// The list of file types for which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) FileTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringArrayOutput { return v.FileTypes }).(pulumi.StringArrayOutput)
}

// The Name-ID pairs of groups to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) Groups() DLPWebRulesGroupsPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesGroupsPtrOutput { return v.Groups }).(DLPWebRulesGroupsPtrOutput)
}

// The DLP server, using ICAP, to which the transaction content is forwarded.
func (o DLPWebRulesOutput) IcapServers() DLPWebRulesIcapServerArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesIcapServerArrayOutput { return v.IcapServers }).(DLPWebRulesIcapServerArrayOutput)
}

// The Name-ID pairs of users to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) IncludedDomainProfiles() DLPWebRulesIncludedDomainProfilesPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesIncludedDomainProfilesPtrOutput { return v.IncludedDomainProfiles }).(DLPWebRulesIncludedDomainProfilesPtrOutput)
}

func (o DLPWebRulesOutput) InspectHttpGetEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolPtrOutput { return v.InspectHttpGetEnabled }).(pulumi.BoolPtrOutput)
}

// list of Labels that are applicable to the rule.
func (o DLPWebRulesOutput) Labels() DLPWebRulesLabelsPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesLabelsPtrOutput { return v.Labels }).(DLPWebRulesLabelsPtrOutput)
}

// The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) LocationGroups() DLPWebRulesLocationGroupsPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesLocationGroupsPtrOutput { return v.LocationGroups }).(DLPWebRulesLocationGroupsPtrOutput)
}

// The Name-ID pairs of locations to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) Locations() DLPWebRulesLocationsPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesLocationsPtrOutput { return v.Locations }).(DLPWebRulesLocationsPtrOutput)
}

// The match only criteria for DLP engines.
func (o DLPWebRulesOutput) MatchOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolOutput { return v.MatchOnly }).(pulumi.BoolOutput)
}

// The minimum file size (in KB) used for evaluation of the DLP policy rule.
func (o DLPWebRulesOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.IntOutput { return v.MinSize }).(pulumi.IntOutput)
}

// The DLP policy rule name.
func (o DLPWebRulesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The template used for DLP notification emails.
func (o DLPWebRulesOutput) NotificationTemplates() DLPWebRulesNotificationTemplateArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesNotificationTemplateArrayOutput { return v.NotificationTemplates }).(DLPWebRulesNotificationTemplateArrayOutput)
}

// The rule order of execution for the DLP policy rule with respect to other rules.
func (o DLPWebRulesOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// The unique identifier of the parent rule under which an exception rule is added
func (o DLPWebRulesOutput) ParentRule() pulumi.IntOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.IntOutput { return v.ParentRule }).(pulumi.IntOutput)
}

// The protocol criteria specified for the DLP policy rule.
func (o DLPWebRulesOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// Admin rank of the admin who creates this rule
func (o DLPWebRulesOutput) Rank() pulumi.IntOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.IntOutput { return v.Rank }).(pulumi.IntOutput)
}

func (o DLPWebRulesOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.IntOutput { return v.RuleId }).(pulumi.IntOutput)
}

// Indicates the severity selected for the DLP rule violation
func (o DLPWebRulesOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

// list of source ip groups
func (o DLPWebRulesOutput) SourceIpGroups() DLPWebRulesSourceIpGroupsPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesSourceIpGroupsPtrOutput { return v.SourceIpGroups }).(DLPWebRulesSourceIpGroupsPtrOutput)
}

// Enables or disables the DLP policy rule.
func (o DLPWebRulesOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The list of exception rules added to a parent rule
func (o DLPWebRulesOutput) SubRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringArrayOutput { return v.SubRules }).(pulumi.StringArrayOutput)
}

// list of time interval during which rule must be enforced.
func (o DLPWebRulesOutput) TimeWindows() DLPWebRulesTimeWindowsPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesTimeWindowsPtrOutput { return v.TimeWindows }).(DLPWebRulesTimeWindowsPtrOutput)
}

// The list of URL categories to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) UrlCategories() DLPWebRulesUrlCategoriesPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesUrlCategoriesPtrOutput { return v.UrlCategories }).(DLPWebRulesUrlCategoriesPtrOutput)
}

func (o DLPWebRulesOutput) UserRiskScoreLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringArrayOutput { return v.UserRiskScoreLevels }).(pulumi.StringArrayOutput)
}

// The Name-ID pairs of users to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) Users() DLPWebRulesUsersPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesUsersPtrOutput { return v.Users }).(DLPWebRulesUsersPtrOutput)
}

// Indicates a DLP policy rule without content inspection, when the value is set to true.
func (o DLPWebRulesOutput) WithoutContentInspection() pulumi.BoolOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolOutput { return v.WithoutContentInspection }).(pulumi.BoolOutput)
}

// The list of preconfigured workload groups to which the policy must be applied
func (o DLPWebRulesOutput) WorkloadGroups() DLPWebRulesWorkloadGroupArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesWorkloadGroupArrayOutput { return v.WorkloadGroups }).(DLPWebRulesWorkloadGroupArrayOutput)
}

// Indicates a DLP policy rule without content inspection, when the value is set to true.
func (o DLPWebRulesOutput) ZccNotificationsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolOutput { return v.ZccNotificationsEnabled }).(pulumi.BoolOutput)
}

// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
func (o DLPWebRulesOutput) ZscalerIncidentReceiver() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolPtrOutput { return v.ZscalerIncidentReceiver }).(pulumi.BoolPtrOutput)
}

type DLPWebRulesArrayOutput struct{ *pulumi.OutputState }

func (DLPWebRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DLPWebRules)(nil)).Elem()
}

func (o DLPWebRulesArrayOutput) ToDLPWebRulesArrayOutput() DLPWebRulesArrayOutput {
	return o
}

func (o DLPWebRulesArrayOutput) ToDLPWebRulesArrayOutputWithContext(ctx context.Context) DLPWebRulesArrayOutput {
	return o
}

func (o DLPWebRulesArrayOutput) Index(i pulumi.IntInput) DLPWebRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DLPWebRules {
		return vs[0].([]*DLPWebRules)[vs[1].(int)]
	}).(DLPWebRulesOutput)
}

type DLPWebRulesMapOutput struct{ *pulumi.OutputState }

func (DLPWebRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DLPWebRules)(nil)).Elem()
}

func (o DLPWebRulesMapOutput) ToDLPWebRulesMapOutput() DLPWebRulesMapOutput {
	return o
}

func (o DLPWebRulesMapOutput) ToDLPWebRulesMapOutputWithContext(ctx context.Context) DLPWebRulesMapOutput {
	return o
}

func (o DLPWebRulesMapOutput) MapIndex(k pulumi.StringInput) DLPWebRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DLPWebRules {
		return vs[0].(map[string]*DLPWebRules)[vs[1].(string)]
	}).(DLPWebRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesInput)(nil)).Elem(), &DLPWebRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesArrayInput)(nil)).Elem(), DLPWebRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesMapInput)(nil)).Elem(), DLPWebRulesMap{})
	pulumi.RegisterOutputType(DLPWebRulesOutput{})
	pulumi.RegisterOutputType(DLPWebRulesArrayOutput{})
	pulumi.RegisterOutputType(DLPWebRulesMapOutput{})
}
