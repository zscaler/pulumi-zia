// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// The **zia_dlp_web_rules** resource allows the creation and management of ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.
//
// ⚠️ **WARNING:** Zscaler Internet Access DLP supports a maximum of 127 Web DLP Rules to be created via API.
//
// ## Example Usage
//
// ### OCR ENABLED
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.NewDLPWebRules(ctx, "test", &zia.DLPWebRulesArgs{
//				Action: pulumi.String("ALLOW"),
//				CloudApplications: pulumi.StringArray{
//					pulumi.String("ZENDESK"),
//					pulumi.String("LUCKY_ORANGE"),
//					pulumi.String("MICROSOFT_POWERAPPS"),
//					pulumi.String("MICROSOFTLIVEMEETING"),
//				},
//				Description: pulumi.String("Test"),
//				FileTypes: pulumi.StringArray{
//					pulumi.String("BITMAP"),
//					pulumi.String("JPEG"),
//					pulumi.String("PNG"),
//					pulumi.String("TIFF"),
//				},
//				MatchOnly:  pulumi.Bool(false),
//				MinSize:    pulumi.Int(20),
//				OcrEnabled: pulumi.Bool(true),
//				Order:      pulumi.Int(1),
//				Protocols: pulumi.StringArray{
//					pulumi.String("FTP_RULE"),
//					pulumi.String("HTTPS_RULE"),
//					pulumi.String("HTTP_RULE"),
//				},
//				Rank:                     pulumi.Int(7),
//				State:                    pulumi.String("ENABLED"),
//				WithoutContentInspection: pulumi.Bool(false),
//				ZscalerIncidentReceiver:  pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ### "ALL_OUTBOUND" File Type
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			thisDLPEngines, err := zia.LookupDLPEngines(ctx, &zia.LookupDLPEnginesArgs{
//				PredefinedEngineName: pulumi.StringRef("EXTERNAL"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = zia.NewDLPWebRules(ctx, "thisDLPWebRules", &zia.DLPWebRulesArgs{
//				Description: pulumi.String("Example"),
//				Action:      pulumi.String("BLOCK"),
//				Order:       pulumi.Int(1),
//				Rank:        pulumi.Int(7),
//				State:       pulumi.String("ENABLED"),
//				Protocols: pulumi.StringArray{
//					pulumi.String("FTP_RULE"),
//					pulumi.String("HTTPS_RULE"),
//					pulumi.String("HTTP_RULE"),
//				},
//				FileTypes: pulumi.StringArray{
//					pulumi.String("ALL_OUTBOUND"),
//				},
//				ZscalerIncidentReceiver:  pulumi.Bool(true),
//				WithoutContentInspection: pulumi.Bool(false),
//				UserRiskScoreLevels: pulumi.StringArray{
//					pulumi.String("LOW"),
//					pulumi.String("MEDIUM"),
//					pulumi.String("HIGH"),
//					pulumi.String("CRITICAL"),
//				},
//				Severity: pulumi.String("RULE_SEVERITY_HIGH"),
//				DlpEngines: &zia.DLPWebRulesDlpEnginesArgs{
//					Ids: pulumi.IntArray{
//						pulumi.Int(thisDLPEngines.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_dlp_web_rules** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/dLPWebRules:DLPWebRules example <rule_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zia:index/dLPWebRules:DLPWebRules example <rule_name>
// ```
type DLPWebRules struct {
	pulumi.CustomResourceState

	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action pulumi.StringOutput `pulumi:"action"`
	// The auditor to which the DLP policy rule must be applied.
	Auditor DLPWebRulesAuditorOutput `pulumi:"auditor"`
	// The list of cloud applications to which the DLP policy rule must be applied.
	CloudApplications pulumi.StringArrayOutput `pulumi:"cloudApplications"`
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments DLPWebRulesDepartmentsOutput `pulumi:"departments"`
	// The description of the DLP policy rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	DlpDownloadScanEnabled pulumi.BoolOutput `pulumi:"dlpDownloadScanEnabled"`
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines DLPWebRulesDlpEnginesOutput `pulumi:"dlpEngines"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments DLPWebRulesExcludedDepartmentsOutput `pulumi:"excludedDepartments"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups DLPWebRulesExcludedGroupsOutput `pulumi:"excludedGroups"`
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers DLPWebRulesExcludedUsersOutput `pulumi:"excludedUsers"`
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail pulumi.StringOutput `pulumi:"externalAuditorEmail"`
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	//
	// * > Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocrEnabled` is set to `true` for DLP rules with content inspection.
	//
	// * > Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `withoutContentInspection` is set to `false`.
	//
	// * > Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.
	FileTypes pulumi.StringArrayOutput `pulumi:"fileTypes"`
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups DLPWebRulesGroupsOutput `pulumi:"groups"`
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer DLPWebRulesIcapServerOutput `pulumi:"icapServer"`
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels DLPWebRulesLabelsOutput `pulumi:"labels"`
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups DLPWebRulesLocationGroupsOutput `pulumi:"locationGroups"`
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations DLPWebRulesLocationsOutput `pulumi:"locations"`
	// The match only criteria for DLP engines.
	MatchOnly pulumi.BoolOutput `pulumi:"matchOnly"`
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize pulumi.IntOutput `pulumi:"minSize"`
	// The name of the workload group
	Name pulumi.StringOutput `pulumi:"name"`
	// The template used for DLP notification emails.
	NotificationTemplate DLPWebRulesNotificationTemplateOutput `pulumi:"notificationTemplate"`
	// Enables or disables image file scanning. When OCR is enabled only the following ``fileTypes`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``
	OcrEnabled pulumi.BoolOutput `pulumi:"ocrEnabled"`
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order pulumi.IntOutput `pulumi:"order"`
	// The unique identifier of the parent rule under which an exception rule is added.
	// > Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
	ParentRule pulumi.IntOutput `pulumi:"parentRule"`
	// The protocol criteria specified for the DLP policy rule.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank   pulumi.IntPtrOutput `pulumi:"rank"`
	RuleId pulumi.IntOutput    `pulumi:"ruleId"`
	// Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`
	Severity pulumi.StringOutput `pulumi:"severity"`
	// Enables or disables the DLP policy rule.. The supported values are:
	State pulumi.StringOutput `pulumi:"state"`
	// The list of exception rules added to a parent rule.
	// > Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
	SubRules pulumi.StringArrayOutput `pulumi:"subRules"`
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows DLPWebRulesTimeWindowsOutput `pulumi:"timeWindows"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories DLPWebRulesUrlCategoriesOutput `pulumi:"urlCategories"`
	// Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
	UserRiskScoreLevels pulumi.StringArrayOutput `pulumi:"userRiskScoreLevels"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users DLPWebRulesUsersOutput `pulumi:"users"`
	// must be set to false if `fileTypes` is not defined.
	WithoutContentInspection pulumi.BoolOutput `pulumi:"withoutContentInspection"`
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups DLPWebRulesWorkloadGroupArrayOutput `pulumi:"workloadGroups"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	ZccNotificationsEnabled pulumi.BoolOutput `pulumi:"zccNotificationsEnabled"`
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReceiver pulumi.BoolOutput `pulumi:"zscalerIncidentReceiver"`
}

// NewDLPWebRules registers a new resource with the given unique name, arguments, and options.
func NewDLPWebRules(ctx *pulumi.Context,
	name string, args *DLPWebRulesArgs, opts ...pulumi.ResourceOption) (*DLPWebRules, error) {
	if args == nil {
		args = &DLPWebRulesArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DLPWebRules
	err := ctx.RegisterResource("zia:index/dLPWebRules:DLPWebRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDLPWebRules gets an existing DLPWebRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDLPWebRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DLPWebRulesState, opts ...pulumi.ResourceOption) (*DLPWebRules, error) {
	var resource DLPWebRules
	err := ctx.ReadResource("zia:index/dLPWebRules:DLPWebRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DLPWebRules resources.
type dlpwebRulesState struct {
	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action *string `pulumi:"action"`
	// The auditor to which the DLP policy rule must be applied.
	Auditor *DLPWebRulesAuditor `pulumi:"auditor"`
	// The list of cloud applications to which the DLP policy rule must be applied.
	CloudApplications []string `pulumi:"cloudApplications"`
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments *DLPWebRulesDepartments `pulumi:"departments"`
	// The description of the DLP policy rule.
	Description *string `pulumi:"description"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	DlpDownloadScanEnabled *bool `pulumi:"dlpDownloadScanEnabled"`
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines *DLPWebRulesDlpEngines `pulumi:"dlpEngines"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments *DLPWebRulesExcludedDepartments `pulumi:"excludedDepartments"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups *DLPWebRulesExcludedGroups `pulumi:"excludedGroups"`
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers *DLPWebRulesExcludedUsers `pulumi:"excludedUsers"`
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail *string `pulumi:"externalAuditorEmail"`
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	//
	// * > Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocrEnabled` is set to `true` for DLP rules with content inspection.
	//
	// * > Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `withoutContentInspection` is set to `false`.
	//
	// * > Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.
	FileTypes []string `pulumi:"fileTypes"`
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups *DLPWebRulesGroups `pulumi:"groups"`
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer *DLPWebRulesIcapServer `pulumi:"icapServer"`
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels *DLPWebRulesLabels `pulumi:"labels"`
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups *DLPWebRulesLocationGroups `pulumi:"locationGroups"`
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations *DLPWebRulesLocations `pulumi:"locations"`
	// The match only criteria for DLP engines.
	MatchOnly *bool `pulumi:"matchOnly"`
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize *int `pulumi:"minSize"`
	// The name of the workload group
	Name *string `pulumi:"name"`
	// The template used for DLP notification emails.
	NotificationTemplate *DLPWebRulesNotificationTemplate `pulumi:"notificationTemplate"`
	// Enables or disables image file scanning. When OCR is enabled only the following ``fileTypes`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``
	OcrEnabled *bool `pulumi:"ocrEnabled"`
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order *int `pulumi:"order"`
	// The unique identifier of the parent rule under which an exception rule is added.
	// > Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
	ParentRule *int `pulumi:"parentRule"`
	// The protocol criteria specified for the DLP policy rule.
	Protocols []string `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank   *int `pulumi:"rank"`
	RuleId *int `pulumi:"ruleId"`
	// Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`
	Severity *string `pulumi:"severity"`
	// Enables or disables the DLP policy rule.. The supported values are:
	State *string `pulumi:"state"`
	// The list of exception rules added to a parent rule.
	// > Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
	SubRules []string `pulumi:"subRules"`
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows *DLPWebRulesTimeWindows `pulumi:"timeWindows"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories *DLPWebRulesUrlCategories `pulumi:"urlCategories"`
	// Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
	UserRiskScoreLevels []string `pulumi:"userRiskScoreLevels"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users *DLPWebRulesUsers `pulumi:"users"`
	// must be set to false if `fileTypes` is not defined.
	WithoutContentInspection *bool `pulumi:"withoutContentInspection"`
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups []DLPWebRulesWorkloadGroup `pulumi:"workloadGroups"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	ZccNotificationsEnabled *bool `pulumi:"zccNotificationsEnabled"`
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReceiver *bool `pulumi:"zscalerIncidentReceiver"`
}

type DLPWebRulesState struct {
	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action pulumi.StringPtrInput
	// The auditor to which the DLP policy rule must be applied.
	Auditor DLPWebRulesAuditorPtrInput
	// The list of cloud applications to which the DLP policy rule must be applied.
	CloudApplications pulumi.StringArrayInput
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments DLPWebRulesDepartmentsPtrInput
	// The description of the DLP policy rule.
	Description pulumi.StringPtrInput
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	DlpDownloadScanEnabled pulumi.BoolPtrInput
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines DLPWebRulesDlpEnginesPtrInput
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments DLPWebRulesExcludedDepartmentsPtrInput
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups DLPWebRulesExcludedGroupsPtrInput
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers DLPWebRulesExcludedUsersPtrInput
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail pulumi.StringPtrInput
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	//
	// * > Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocrEnabled` is set to `true` for DLP rules with content inspection.
	//
	// * > Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `withoutContentInspection` is set to `false`.
	//
	// * > Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.
	FileTypes pulumi.StringArrayInput
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups DLPWebRulesGroupsPtrInput
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer DLPWebRulesIcapServerPtrInput
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels DLPWebRulesLabelsPtrInput
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups DLPWebRulesLocationGroupsPtrInput
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations DLPWebRulesLocationsPtrInput
	// The match only criteria for DLP engines.
	MatchOnly pulumi.BoolPtrInput
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize pulumi.IntPtrInput
	// The name of the workload group
	Name pulumi.StringPtrInput
	// The template used for DLP notification emails.
	NotificationTemplate DLPWebRulesNotificationTemplatePtrInput
	// Enables or disables image file scanning. When OCR is enabled only the following ``fileTypes`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``
	OcrEnabled pulumi.BoolPtrInput
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order pulumi.IntPtrInput
	// The unique identifier of the parent rule under which an exception rule is added.
	// > Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
	ParentRule pulumi.IntPtrInput
	// The protocol criteria specified for the DLP policy rule.
	Protocols pulumi.StringArrayInput
	// Admin rank of the admin who creates this rule
	Rank   pulumi.IntPtrInput
	RuleId pulumi.IntPtrInput
	// Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`
	Severity pulumi.StringPtrInput
	// Enables or disables the DLP policy rule.. The supported values are:
	State pulumi.StringPtrInput
	// The list of exception rules added to a parent rule.
	// > Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
	SubRules pulumi.StringArrayInput
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows DLPWebRulesTimeWindowsPtrInput
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories DLPWebRulesUrlCategoriesPtrInput
	// Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
	UserRiskScoreLevels pulumi.StringArrayInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users DLPWebRulesUsersPtrInput
	// must be set to false if `fileTypes` is not defined.
	WithoutContentInspection pulumi.BoolPtrInput
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups DLPWebRulesWorkloadGroupArrayInput
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	ZccNotificationsEnabled pulumi.BoolPtrInput
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReceiver pulumi.BoolPtrInput
}

func (DLPWebRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpwebRulesState)(nil)).Elem()
}

type dlpwebRulesArgs struct {
	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action *string `pulumi:"action"`
	// The auditor to which the DLP policy rule must be applied.
	Auditor *DLPWebRulesAuditor `pulumi:"auditor"`
	// The list of cloud applications to which the DLP policy rule must be applied.
	CloudApplications []string `pulumi:"cloudApplications"`
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments *DLPWebRulesDepartments `pulumi:"departments"`
	// The description of the DLP policy rule.
	Description *string `pulumi:"description"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	DlpDownloadScanEnabled *bool `pulumi:"dlpDownloadScanEnabled"`
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines *DLPWebRulesDlpEngines `pulumi:"dlpEngines"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments *DLPWebRulesExcludedDepartments `pulumi:"excludedDepartments"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups *DLPWebRulesExcludedGroups `pulumi:"excludedGroups"`
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers *DLPWebRulesExcludedUsers `pulumi:"excludedUsers"`
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail *string `pulumi:"externalAuditorEmail"`
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	//
	// * > Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocrEnabled` is set to `true` for DLP rules with content inspection.
	//
	// * > Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `withoutContentInspection` is set to `false`.
	//
	// * > Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.
	FileTypes []string `pulumi:"fileTypes"`
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups *DLPWebRulesGroups `pulumi:"groups"`
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer *DLPWebRulesIcapServer `pulumi:"icapServer"`
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels *DLPWebRulesLabels `pulumi:"labels"`
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups *DLPWebRulesLocationGroups `pulumi:"locationGroups"`
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations *DLPWebRulesLocations `pulumi:"locations"`
	// The match only criteria for DLP engines.
	MatchOnly *bool `pulumi:"matchOnly"`
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize *int `pulumi:"minSize"`
	// The name of the workload group
	Name *string `pulumi:"name"`
	// The template used for DLP notification emails.
	NotificationTemplate *DLPWebRulesNotificationTemplate `pulumi:"notificationTemplate"`
	// Enables or disables image file scanning. When OCR is enabled only the following ``fileTypes`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``
	OcrEnabled *bool `pulumi:"ocrEnabled"`
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order *int `pulumi:"order"`
	// The unique identifier of the parent rule under which an exception rule is added.
	// > Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
	ParentRule *int `pulumi:"parentRule"`
	// The protocol criteria specified for the DLP policy rule.
	Protocols []string `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank *int `pulumi:"rank"`
	// Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`
	Severity *string `pulumi:"severity"`
	// Enables or disables the DLP policy rule.. The supported values are:
	State *string `pulumi:"state"`
	// The list of exception rules added to a parent rule.
	// > Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
	SubRules []string `pulumi:"subRules"`
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows *DLPWebRulesTimeWindows `pulumi:"timeWindows"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories *DLPWebRulesUrlCategories `pulumi:"urlCategories"`
	// Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
	UserRiskScoreLevels []string `pulumi:"userRiskScoreLevels"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users *DLPWebRulesUsers `pulumi:"users"`
	// must be set to false if `fileTypes` is not defined.
	WithoutContentInspection *bool `pulumi:"withoutContentInspection"`
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups []DLPWebRulesWorkloadGroup `pulumi:"workloadGroups"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	ZccNotificationsEnabled *bool `pulumi:"zccNotificationsEnabled"`
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReceiver *bool `pulumi:"zscalerIncidentReceiver"`
}

// The set of arguments for constructing a DLPWebRules resource.
type DLPWebRulesArgs struct {
	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action pulumi.StringPtrInput
	// The auditor to which the DLP policy rule must be applied.
	Auditor DLPWebRulesAuditorPtrInput
	// The list of cloud applications to which the DLP policy rule must be applied.
	CloudApplications pulumi.StringArrayInput
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments DLPWebRulesDepartmentsPtrInput
	// The description of the DLP policy rule.
	Description pulumi.StringPtrInput
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	DlpDownloadScanEnabled pulumi.BoolPtrInput
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines DLPWebRulesDlpEnginesPtrInput
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments DLPWebRulesExcludedDepartmentsPtrInput
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups DLPWebRulesExcludedGroupsPtrInput
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers DLPWebRulesExcludedUsersPtrInput
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail pulumi.StringPtrInput
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	//
	// * > Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocrEnabled` is set to `true` for DLP rules with content inspection.
	//
	// * > Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `withoutContentInspection` is set to `false`.
	//
	// * > Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.
	FileTypes pulumi.StringArrayInput
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups DLPWebRulesGroupsPtrInput
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer DLPWebRulesIcapServerPtrInput
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels DLPWebRulesLabelsPtrInput
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups DLPWebRulesLocationGroupsPtrInput
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations DLPWebRulesLocationsPtrInput
	// The match only criteria for DLP engines.
	MatchOnly pulumi.BoolPtrInput
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize pulumi.IntPtrInput
	// The name of the workload group
	Name pulumi.StringPtrInput
	// The template used for DLP notification emails.
	NotificationTemplate DLPWebRulesNotificationTemplatePtrInput
	// Enables or disables image file scanning. When OCR is enabled only the following ``fileTypes`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``
	OcrEnabled pulumi.BoolPtrInput
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order pulumi.IntPtrInput
	// The unique identifier of the parent rule under which an exception rule is added.
	// > Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
	ParentRule pulumi.IntPtrInput
	// The protocol criteria specified for the DLP policy rule.
	Protocols pulumi.StringArrayInput
	// Admin rank of the admin who creates this rule
	Rank pulumi.IntPtrInput
	// Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`
	Severity pulumi.StringPtrInput
	// Enables or disables the DLP policy rule.. The supported values are:
	State pulumi.StringPtrInput
	// The list of exception rules added to a parent rule.
	// > Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
	SubRules pulumi.StringArrayInput
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows DLPWebRulesTimeWindowsPtrInput
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories DLPWebRulesUrlCategoriesPtrInput
	// Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
	UserRiskScoreLevels pulumi.StringArrayInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users DLPWebRulesUsersPtrInput
	// must be set to false if `fileTypes` is not defined.
	WithoutContentInspection pulumi.BoolPtrInput
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups DLPWebRulesWorkloadGroupArrayInput
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	ZccNotificationsEnabled pulumi.BoolPtrInput
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReceiver pulumi.BoolPtrInput
}

func (DLPWebRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpwebRulesArgs)(nil)).Elem()
}

type DLPWebRulesInput interface {
	pulumi.Input

	ToDLPWebRulesOutput() DLPWebRulesOutput
	ToDLPWebRulesOutputWithContext(ctx context.Context) DLPWebRulesOutput
}

func (*DLPWebRules) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRules)(nil)).Elem()
}

func (i *DLPWebRules) ToDLPWebRulesOutput() DLPWebRulesOutput {
	return i.ToDLPWebRulesOutputWithContext(context.Background())
}

func (i *DLPWebRules) ToDLPWebRulesOutputWithContext(ctx context.Context) DLPWebRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesOutput)
}

// DLPWebRulesArrayInput is an input type that accepts DLPWebRulesArray and DLPWebRulesArrayOutput values.
// You can construct a concrete instance of `DLPWebRulesArrayInput` via:
//
//	DLPWebRulesArray{ DLPWebRulesArgs{...} }
type DLPWebRulesArrayInput interface {
	pulumi.Input

	ToDLPWebRulesArrayOutput() DLPWebRulesArrayOutput
	ToDLPWebRulesArrayOutputWithContext(context.Context) DLPWebRulesArrayOutput
}

type DLPWebRulesArray []DLPWebRulesInput

func (DLPWebRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DLPWebRules)(nil)).Elem()
}

func (i DLPWebRulesArray) ToDLPWebRulesArrayOutput() DLPWebRulesArrayOutput {
	return i.ToDLPWebRulesArrayOutputWithContext(context.Background())
}

func (i DLPWebRulesArray) ToDLPWebRulesArrayOutputWithContext(ctx context.Context) DLPWebRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesArrayOutput)
}

// DLPWebRulesMapInput is an input type that accepts DLPWebRulesMap and DLPWebRulesMapOutput values.
// You can construct a concrete instance of `DLPWebRulesMapInput` via:
//
//	DLPWebRulesMap{ "key": DLPWebRulesArgs{...} }
type DLPWebRulesMapInput interface {
	pulumi.Input

	ToDLPWebRulesMapOutput() DLPWebRulesMapOutput
	ToDLPWebRulesMapOutputWithContext(context.Context) DLPWebRulesMapOutput
}

type DLPWebRulesMap map[string]DLPWebRulesInput

func (DLPWebRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DLPWebRules)(nil)).Elem()
}

func (i DLPWebRulesMap) ToDLPWebRulesMapOutput() DLPWebRulesMapOutput {
	return i.ToDLPWebRulesMapOutputWithContext(context.Background())
}

func (i DLPWebRulesMap) ToDLPWebRulesMapOutputWithContext(ctx context.Context) DLPWebRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesMapOutput)
}

type DLPWebRulesOutput struct{ *pulumi.OutputState }

func (DLPWebRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRules)(nil)).Elem()
}

func (o DLPWebRulesOutput) ToDLPWebRulesOutput() DLPWebRulesOutput {
	return o
}

func (o DLPWebRulesOutput) ToDLPWebRulesOutputWithContext(ctx context.Context) DLPWebRulesOutput {
	return o
}

// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
func (o DLPWebRulesOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The auditor to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) Auditor() DLPWebRulesAuditorOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesAuditorOutput { return v.Auditor }).(DLPWebRulesAuditorOutput)
}

// The list of cloud applications to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) CloudApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringArrayOutput { return v.CloudApplications }).(pulumi.StringArrayOutput)
}

// The name-ID pairs of the departments that are excluded from the DLP policy rule.
func (o DLPWebRulesOutput) Departments() DLPWebRulesDepartmentsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesDepartmentsOutput { return v.Departments }).(DLPWebRulesDepartmentsOutput)
}

// The description of the DLP policy rule.
func (o DLPWebRulesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates a DLP policy rule without content inspection, when the value is set to true.
func (o DLPWebRulesOutput) DlpDownloadScanEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolOutput { return v.DlpDownloadScanEnabled }).(pulumi.BoolOutput)
}

// The list of DLP engines to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) DlpEngines() DLPWebRulesDlpEnginesOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesDlpEnginesOutput { return v.DlpEngines }).(DLPWebRulesDlpEnginesOutput)
}

// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
func (o DLPWebRulesOutput) ExcludedDepartments() DLPWebRulesExcludedDepartmentsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesExcludedDepartmentsOutput { return v.ExcludedDepartments }).(DLPWebRulesExcludedDepartmentsOutput)
}

// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
func (o DLPWebRulesOutput) ExcludedGroups() DLPWebRulesExcludedGroupsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesExcludedGroupsOutput { return v.ExcludedGroups }).(DLPWebRulesExcludedGroupsOutput)
}

// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
func (o DLPWebRulesOutput) ExcludedUsers() DLPWebRulesExcludedUsersOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesExcludedUsersOutput { return v.ExcludedUsers }).(DLPWebRulesExcludedUsersOutput)
}

// The email address of an external auditor to whom DLP email notifications are sent.
func (o DLPWebRulesOutput) ExternalAuditorEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.ExternalAuditorEmail }).(pulumi.StringOutput)
}

// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
//
// * > Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocrEnabled` is set to `true` for DLP rules with content inspection.
//
// * > Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `withoutContentInspection` is set to `false`.
//
// * > Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.
func (o DLPWebRulesOutput) FileTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringArrayOutput { return v.FileTypes }).(pulumi.StringArrayOutput)
}

// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
func (o DLPWebRulesOutput) Groups() DLPWebRulesGroupsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesGroupsOutput { return v.Groups }).(DLPWebRulesGroupsOutput)
}

// The DLP server, using ICAP, to which the transaction content is forwarded.
func (o DLPWebRulesOutput) IcapServer() DLPWebRulesIcapServerOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesIcapServerOutput { return v.IcapServer }).(DLPWebRulesIcapServerOutput)
}

// The Name-ID pairs of rule labels associated to the DLP policy rule.
func (o DLPWebRulesOutput) Labels() DLPWebRulesLabelsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesLabelsOutput { return v.Labels }).(DLPWebRulesLabelsOutput)
}

// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
func (o DLPWebRulesOutput) LocationGroups() DLPWebRulesLocationGroupsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesLocationGroupsOutput { return v.LocationGroups }).(DLPWebRulesLocationGroupsOutput)
}

// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
func (o DLPWebRulesOutput) Locations() DLPWebRulesLocationsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesLocationsOutput { return v.Locations }).(DLPWebRulesLocationsOutput)
}

// The match only criteria for DLP engines.
func (o DLPWebRulesOutput) MatchOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolOutput { return v.MatchOnly }).(pulumi.BoolOutput)
}

// The minimum file size (in KB) used for evaluation of the DLP policy rule.
func (o DLPWebRulesOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.IntOutput { return v.MinSize }).(pulumi.IntOutput)
}

// The name of the workload group
func (o DLPWebRulesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The template used for DLP notification emails.
func (o DLPWebRulesOutput) NotificationTemplate() DLPWebRulesNotificationTemplateOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesNotificationTemplateOutput { return v.NotificationTemplate }).(DLPWebRulesNotificationTemplateOutput)
}

// Enables or disables image file scanning. When OCR is enabled only the following “fileTypes“ are supported: “WINDOWS_META_FORMAT“, “BITMAP“, “JPEG“, “PNG“, “TIFF“
func (o DLPWebRulesOutput) OcrEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolOutput { return v.OcrEnabled }).(pulumi.BoolOutput)
}

// The rule order of execution for the DLP policy rule with respect to other rules.
func (o DLPWebRulesOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// The unique identifier of the parent rule under which an exception rule is added.
// > Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
func (o DLPWebRulesOutput) ParentRule() pulumi.IntOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.IntOutput { return v.ParentRule }).(pulumi.IntOutput)
}

// The protocol criteria specified for the DLP policy rule.
func (o DLPWebRulesOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// Admin rank of the admin who creates this rule
func (o DLPWebRulesOutput) Rank() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.IntPtrOutput { return v.Rank }).(pulumi.IntPtrOutput)
}

func (o DLPWebRulesOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.IntOutput { return v.RuleId }).(pulumi.IntOutput)
}

// Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`
func (o DLPWebRulesOutput) Severity() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.Severity }).(pulumi.StringOutput)
}

// Enables or disables the DLP policy rule.. The supported values are:
func (o DLPWebRulesOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The list of exception rules added to a parent rule.
// > Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
func (o DLPWebRulesOutput) SubRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringArrayOutput { return v.SubRules }).(pulumi.StringArrayOutput)
}

// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
func (o DLPWebRulesOutput) TimeWindows() DLPWebRulesTimeWindowsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesTimeWindowsOutput { return v.TimeWindows }).(DLPWebRulesTimeWindowsOutput)
}

// The list of URL categories to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) UrlCategories() DLPWebRulesUrlCategoriesOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesUrlCategoriesOutput { return v.UrlCategories }).(DLPWebRulesUrlCategoriesOutput)
}

// Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
func (o DLPWebRulesOutput) UserRiskScoreLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringArrayOutput { return v.UserRiskScoreLevels }).(pulumi.StringArrayOutput)
}

// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
func (o DLPWebRulesOutput) Users() DLPWebRulesUsersOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesUsersOutput { return v.Users }).(DLPWebRulesUsersOutput)
}

// must be set to false if `fileTypes` is not defined.
func (o DLPWebRulesOutput) WithoutContentInspection() pulumi.BoolOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolOutput { return v.WithoutContentInspection }).(pulumi.BoolOutput)
}

// The list of preconfigured workload groups to which the policy must be applied
func (o DLPWebRulesOutput) WorkloadGroups() DLPWebRulesWorkloadGroupArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesWorkloadGroupArrayOutput { return v.WorkloadGroups }).(DLPWebRulesWorkloadGroupArrayOutput)
}

// Indicates a DLP policy rule without content inspection, when the value is set to true.
func (o DLPWebRulesOutput) ZccNotificationsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolOutput { return v.ZccNotificationsEnabled }).(pulumi.BoolOutput)
}

// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
func (o DLPWebRulesOutput) ZscalerIncidentReceiver() pulumi.BoolOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolOutput { return v.ZscalerIncidentReceiver }).(pulumi.BoolOutput)
}

type DLPWebRulesArrayOutput struct{ *pulumi.OutputState }

func (DLPWebRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DLPWebRules)(nil)).Elem()
}

func (o DLPWebRulesArrayOutput) ToDLPWebRulesArrayOutput() DLPWebRulesArrayOutput {
	return o
}

func (o DLPWebRulesArrayOutput) ToDLPWebRulesArrayOutputWithContext(ctx context.Context) DLPWebRulesArrayOutput {
	return o
}

func (o DLPWebRulesArrayOutput) Index(i pulumi.IntInput) DLPWebRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DLPWebRules {
		return vs[0].([]*DLPWebRules)[vs[1].(int)]
	}).(DLPWebRulesOutput)
}

type DLPWebRulesMapOutput struct{ *pulumi.OutputState }

func (DLPWebRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DLPWebRules)(nil)).Elem()
}

func (o DLPWebRulesMapOutput) ToDLPWebRulesMapOutput() DLPWebRulesMapOutput {
	return o
}

func (o DLPWebRulesMapOutput) ToDLPWebRulesMapOutputWithContext(ctx context.Context) DLPWebRulesMapOutput {
	return o
}

func (o DLPWebRulesMapOutput) MapIndex(k pulumi.StringInput) DLPWebRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DLPWebRules {
		return vs[0].(map[string]*DLPWebRules)[vs[1].(string)]
	}).(DLPWebRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesInput)(nil)).Elem(), &DLPWebRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesArrayInput)(nil)).Elem(), DLPWebRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesMapInput)(nil)).Elem(), DLPWebRulesMap{})
	pulumi.RegisterOutputType(DLPWebRulesOutput{})
	pulumi.RegisterOutputType(DLPWebRulesArrayOutput{})
	pulumi.RegisterOutputType(DLPWebRulesMapOutput{})
}
