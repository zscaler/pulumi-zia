// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/about-dlp-engines)
// * [API documentation](https://help.zscaler.com/zia/data-loss-prevention#/dlpEngines-get)
//
// Use the **zia_dlp_engines** data source to get information about a ZIA DLP Engines in the Zscaler Internet Access cloud or via the API.
//
// ## Example Usage
func LookupDLPEngines(ctx *pulumi.Context, args *LookupDLPEnginesArgs, opts ...pulumi.InvokeOption) (*LookupDLPEnginesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDLPEnginesResult
	err := ctx.Invoke("zia:index/getDLPEngines:getDLPEngines", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDLPEngines.
type LookupDLPEnginesArgs struct {
	Id                   *int    `pulumi:"id"`
	Name                 *string `pulumi:"name"`
	PredefinedEngineName *string `pulumi:"predefinedEngineName"`
}

// A collection of values returned by getDLPEngines.
type LookupDLPEnginesResult struct {
	CustomDlpEngine      bool    `pulumi:"customDlpEngine"`
	Description          string  `pulumi:"description"`
	EngineExpression     string  `pulumi:"engineExpression"`
	Id                   *int    `pulumi:"id"`
	Name                 *string `pulumi:"name"`
	PredefinedEngineName *string `pulumi:"predefinedEngineName"`
}

func LookupDLPEnginesOutput(ctx *pulumi.Context, args LookupDLPEnginesOutputArgs, opts ...pulumi.InvokeOption) LookupDLPEnginesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupDLPEnginesResultOutput, error) {
			args := v.(LookupDLPEnginesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("zia:index/getDLPEngines:getDLPEngines", args, LookupDLPEnginesResultOutput{}, options).(LookupDLPEnginesResultOutput), nil
		}).(LookupDLPEnginesResultOutput)
}

// A collection of arguments for invoking getDLPEngines.
type LookupDLPEnginesOutputArgs struct {
	Id                   pulumi.IntPtrInput    `pulumi:"id"`
	Name                 pulumi.StringPtrInput `pulumi:"name"`
	PredefinedEngineName pulumi.StringPtrInput `pulumi:"predefinedEngineName"`
}

func (LookupDLPEnginesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDLPEnginesArgs)(nil)).Elem()
}

// A collection of values returned by getDLPEngines.
type LookupDLPEnginesResultOutput struct{ *pulumi.OutputState }

func (LookupDLPEnginesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDLPEnginesResult)(nil)).Elem()
}

func (o LookupDLPEnginesResultOutput) ToLookupDLPEnginesResultOutput() LookupDLPEnginesResultOutput {
	return o
}

func (o LookupDLPEnginesResultOutput) ToLookupDLPEnginesResultOutputWithContext(ctx context.Context) LookupDLPEnginesResultOutput {
	return o
}

func (o LookupDLPEnginesResultOutput) CustomDlpEngine() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDLPEnginesResult) bool { return v.CustomDlpEngine }).(pulumi.BoolOutput)
}

func (o LookupDLPEnginesResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDLPEnginesResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupDLPEnginesResultOutput) EngineExpression() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDLPEnginesResult) string { return v.EngineExpression }).(pulumi.StringOutput)
}

func (o LookupDLPEnginesResultOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupDLPEnginesResult) *int { return v.Id }).(pulumi.IntPtrOutput)
}

func (o LookupDLPEnginesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDLPEnginesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o LookupDLPEnginesResultOutput) PredefinedEngineName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDLPEnginesResult) *string { return v.PredefinedEngineName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDLPEnginesResultOutput{})
}
