// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/configuring-malware-protection-policy)
// * [API documentation](https://help.zscaler.com/zia/malware-protection-policy#/cyberThreatProtection/atpMalwareInspection-put)
//
// The **zia_atp_malware_protocols** resource allows you to update protocol inspection configurations of Malware Protection policy. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)
//
// ## Example Usage
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **atp_malware_protocols** can be imported by using `protocol` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/aTPMalwareProtocols:ATPMalwareProtocols this "protocol"
// ```
type ATPMalwareProtocols struct {
	pulumi.CustomResourceState

	// A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
	InspectFtp pulumi.BoolOutput `pulumi:"inspectFtp"`
	// A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
	InspectFtpOverHttp pulumi.BoolOutput `pulumi:"inspectFtpOverHttp"`
	// A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
	// malicious content in real time
	InspectHttp pulumi.BoolOutput `pulumi:"inspectHttp"`
}

// NewATPMalwareProtocols registers a new resource with the given unique name, arguments, and options.
func NewATPMalwareProtocols(ctx *pulumi.Context,
	name string, args *ATPMalwareProtocolsArgs, opts ...pulumi.ResourceOption) (*ATPMalwareProtocols, error) {
	if args == nil {
		args = &ATPMalwareProtocolsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ATPMalwareProtocols
	err := ctx.RegisterResource("zia:index/aTPMalwareProtocols:ATPMalwareProtocols", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetATPMalwareProtocols gets an existing ATPMalwareProtocols resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetATPMalwareProtocols(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ATPMalwareProtocolsState, opts ...pulumi.ResourceOption) (*ATPMalwareProtocols, error) {
	var resource ATPMalwareProtocols
	err := ctx.ReadResource("zia:index/aTPMalwareProtocols:ATPMalwareProtocols", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ATPMalwareProtocols resources.
type atpmalwareProtocolsState struct {
	// A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
	InspectFtp *bool `pulumi:"inspectFtp"`
	// A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
	InspectFtpOverHttp *bool `pulumi:"inspectFtpOverHttp"`
	// A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
	// malicious content in real time
	InspectHttp *bool `pulumi:"inspectHttp"`
}

type ATPMalwareProtocolsState struct {
	// A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
	InspectFtp pulumi.BoolPtrInput
	// A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
	InspectFtpOverHttp pulumi.BoolPtrInput
	// A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
	// malicious content in real time
	InspectHttp pulumi.BoolPtrInput
}

func (ATPMalwareProtocolsState) ElementType() reflect.Type {
	return reflect.TypeOf((*atpmalwareProtocolsState)(nil)).Elem()
}

type atpmalwareProtocolsArgs struct {
	// A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
	InspectFtp *bool `pulumi:"inspectFtp"`
	// A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
	InspectFtpOverHttp *bool `pulumi:"inspectFtpOverHttp"`
	// A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
	// malicious content in real time
	InspectHttp *bool `pulumi:"inspectHttp"`
}

// The set of arguments for constructing a ATPMalwareProtocols resource.
type ATPMalwareProtocolsArgs struct {
	// A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
	InspectFtp pulumi.BoolPtrInput
	// A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
	InspectFtpOverHttp pulumi.BoolPtrInput
	// A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
	// malicious content in real time
	InspectHttp pulumi.BoolPtrInput
}

func (ATPMalwareProtocolsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*atpmalwareProtocolsArgs)(nil)).Elem()
}

type ATPMalwareProtocolsInput interface {
	pulumi.Input

	ToATPMalwareProtocolsOutput() ATPMalwareProtocolsOutput
	ToATPMalwareProtocolsOutputWithContext(ctx context.Context) ATPMalwareProtocolsOutput
}

func (*ATPMalwareProtocols) ElementType() reflect.Type {
	return reflect.TypeOf((**ATPMalwareProtocols)(nil)).Elem()
}

func (i *ATPMalwareProtocols) ToATPMalwareProtocolsOutput() ATPMalwareProtocolsOutput {
	return i.ToATPMalwareProtocolsOutputWithContext(context.Background())
}

func (i *ATPMalwareProtocols) ToATPMalwareProtocolsOutputWithContext(ctx context.Context) ATPMalwareProtocolsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ATPMalwareProtocolsOutput)
}

// ATPMalwareProtocolsArrayInput is an input type that accepts ATPMalwareProtocolsArray and ATPMalwareProtocolsArrayOutput values.
// You can construct a concrete instance of `ATPMalwareProtocolsArrayInput` via:
//
//	ATPMalwareProtocolsArray{ ATPMalwareProtocolsArgs{...} }
type ATPMalwareProtocolsArrayInput interface {
	pulumi.Input

	ToATPMalwareProtocolsArrayOutput() ATPMalwareProtocolsArrayOutput
	ToATPMalwareProtocolsArrayOutputWithContext(context.Context) ATPMalwareProtocolsArrayOutput
}

type ATPMalwareProtocolsArray []ATPMalwareProtocolsInput

func (ATPMalwareProtocolsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ATPMalwareProtocols)(nil)).Elem()
}

func (i ATPMalwareProtocolsArray) ToATPMalwareProtocolsArrayOutput() ATPMalwareProtocolsArrayOutput {
	return i.ToATPMalwareProtocolsArrayOutputWithContext(context.Background())
}

func (i ATPMalwareProtocolsArray) ToATPMalwareProtocolsArrayOutputWithContext(ctx context.Context) ATPMalwareProtocolsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ATPMalwareProtocolsArrayOutput)
}

// ATPMalwareProtocolsMapInput is an input type that accepts ATPMalwareProtocolsMap and ATPMalwareProtocolsMapOutput values.
// You can construct a concrete instance of `ATPMalwareProtocolsMapInput` via:
//
//	ATPMalwareProtocolsMap{ "key": ATPMalwareProtocolsArgs{...} }
type ATPMalwareProtocolsMapInput interface {
	pulumi.Input

	ToATPMalwareProtocolsMapOutput() ATPMalwareProtocolsMapOutput
	ToATPMalwareProtocolsMapOutputWithContext(context.Context) ATPMalwareProtocolsMapOutput
}

type ATPMalwareProtocolsMap map[string]ATPMalwareProtocolsInput

func (ATPMalwareProtocolsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ATPMalwareProtocols)(nil)).Elem()
}

func (i ATPMalwareProtocolsMap) ToATPMalwareProtocolsMapOutput() ATPMalwareProtocolsMapOutput {
	return i.ToATPMalwareProtocolsMapOutputWithContext(context.Background())
}

func (i ATPMalwareProtocolsMap) ToATPMalwareProtocolsMapOutputWithContext(ctx context.Context) ATPMalwareProtocolsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ATPMalwareProtocolsMapOutput)
}

type ATPMalwareProtocolsOutput struct{ *pulumi.OutputState }

func (ATPMalwareProtocolsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ATPMalwareProtocols)(nil)).Elem()
}

func (o ATPMalwareProtocolsOutput) ToATPMalwareProtocolsOutput() ATPMalwareProtocolsOutput {
	return o
}

func (o ATPMalwareProtocolsOutput) ToATPMalwareProtocolsOutputWithContext(ctx context.Context) ATPMalwareProtocolsOutput {
	return o
}

// A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
func (o ATPMalwareProtocolsOutput) InspectFtp() pulumi.BoolOutput {
	return o.ApplyT(func(v *ATPMalwareProtocols) pulumi.BoolOutput { return v.InspectFtp }).(pulumi.BoolOutput)
}

// A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
func (o ATPMalwareProtocolsOutput) InspectFtpOverHttp() pulumi.BoolOutput {
	return o.ApplyT(func(v *ATPMalwareProtocols) pulumi.BoolOutput { return v.InspectFtpOverHttp }).(pulumi.BoolOutput)
}

// A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
// malicious content in real time
func (o ATPMalwareProtocolsOutput) InspectHttp() pulumi.BoolOutput {
	return o.ApplyT(func(v *ATPMalwareProtocols) pulumi.BoolOutput { return v.InspectHttp }).(pulumi.BoolOutput)
}

type ATPMalwareProtocolsArrayOutput struct{ *pulumi.OutputState }

func (ATPMalwareProtocolsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ATPMalwareProtocols)(nil)).Elem()
}

func (o ATPMalwareProtocolsArrayOutput) ToATPMalwareProtocolsArrayOutput() ATPMalwareProtocolsArrayOutput {
	return o
}

func (o ATPMalwareProtocolsArrayOutput) ToATPMalwareProtocolsArrayOutputWithContext(ctx context.Context) ATPMalwareProtocolsArrayOutput {
	return o
}

func (o ATPMalwareProtocolsArrayOutput) Index(i pulumi.IntInput) ATPMalwareProtocolsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ATPMalwareProtocols {
		return vs[0].([]*ATPMalwareProtocols)[vs[1].(int)]
	}).(ATPMalwareProtocolsOutput)
}

type ATPMalwareProtocolsMapOutput struct{ *pulumi.OutputState }

func (ATPMalwareProtocolsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ATPMalwareProtocols)(nil)).Elem()
}

func (o ATPMalwareProtocolsMapOutput) ToATPMalwareProtocolsMapOutput() ATPMalwareProtocolsMapOutput {
	return o
}

func (o ATPMalwareProtocolsMapOutput) ToATPMalwareProtocolsMapOutputWithContext(ctx context.Context) ATPMalwareProtocolsMapOutput {
	return o
}

func (o ATPMalwareProtocolsMapOutput) MapIndex(k pulumi.StringInput) ATPMalwareProtocolsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ATPMalwareProtocols {
		return vs[0].(map[string]*ATPMalwareProtocols)[vs[1].(string)]
	}).(ATPMalwareProtocolsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ATPMalwareProtocolsInput)(nil)).Elem(), &ATPMalwareProtocols{})
	pulumi.RegisterInputType(reflect.TypeOf((*ATPMalwareProtocolsArrayInput)(nil)).Elem(), ATPMalwareProtocolsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ATPMalwareProtocolsMapInput)(nil)).Elem(), ATPMalwareProtocolsMap{})
	pulumi.RegisterOutputType(ATPMalwareProtocolsOutput{})
	pulumi.RegisterOutputType(ATPMalwareProtocolsArrayOutput{})
	pulumi.RegisterOutputType(ATPMalwareProtocolsMapOutput{})
}
