// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/about-dlp-engines)
// * [API documentation](https://help.zscaler.com/zia/data-loss-prevention#/dlpEngines-get)
//
// Use the **zia_dlp_engines** resource allows the creation and management of ZIA DLP Engines in the Zscaler Internet Access cloud or via the API.
//
// ⚠️ **WARNING:** "Before using the new “DLPEngines“ resource contact [Zscaler Support](https://help.zscaler.com/login-tickets)." and request the following API methods “POST“, “PUT“, and “DELETE“ to be enabled for your organization.
//
// ## Example Usage
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_dlp_engines** can be imported by using `<ENGINE_ID>` or `<ENGINE_NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/dLPEngines:DLPEngines example <engine_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zia:index/dLPEngines:DLPEngines example <engine_name>
// ```
type DLPEngines struct {
	pulumi.CustomResourceState

	// Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.
	CustomDlpEngine pulumi.BoolPtrOutput `pulumi:"customDlpEngine"`
	// The DLP engine's description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.
	EngineExpression pulumi.StringPtrOutput `pulumi:"engineExpression"`
	EngineId         pulumi.IntOutput       `pulumi:"engineId"`
	// The DLP engine name as configured by the admin.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewDLPEngines registers a new resource with the given unique name, arguments, and options.
func NewDLPEngines(ctx *pulumi.Context,
	name string, args *DLPEnginesArgs, opts ...pulumi.ResourceOption) (*DLPEngines, error) {
	if args == nil {
		args = &DLPEnginesArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DLPEngines
	err := ctx.RegisterResource("zia:index/dLPEngines:DLPEngines", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDLPEngines gets an existing DLPEngines resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDLPEngines(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DLPEnginesState, opts ...pulumi.ResourceOption) (*DLPEngines, error) {
	var resource DLPEngines
	err := ctx.ReadResource("zia:index/dLPEngines:DLPEngines", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DLPEngines resources.
type dlpenginesState struct {
	// Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.
	CustomDlpEngine *bool `pulumi:"customDlpEngine"`
	// The DLP engine's description.
	Description *string `pulumi:"description"`
	// The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.
	EngineExpression *string `pulumi:"engineExpression"`
	EngineId         *int    `pulumi:"engineId"`
	// The DLP engine name as configured by the admin.
	Name *string `pulumi:"name"`
}

type DLPEnginesState struct {
	// Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.
	CustomDlpEngine pulumi.BoolPtrInput
	// The DLP engine's description.
	Description pulumi.StringPtrInput
	// The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.
	EngineExpression pulumi.StringPtrInput
	EngineId         pulumi.IntPtrInput
	// The DLP engine name as configured by the admin.
	Name pulumi.StringPtrInput
}

func (DLPEnginesState) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpenginesState)(nil)).Elem()
}

type dlpenginesArgs struct {
	// Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.
	CustomDlpEngine *bool `pulumi:"customDlpEngine"`
	// The DLP engine's description.
	Description *string `pulumi:"description"`
	// The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.
	EngineExpression *string `pulumi:"engineExpression"`
	// The DLP engine name as configured by the admin.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DLPEngines resource.
type DLPEnginesArgs struct {
	// Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.
	CustomDlpEngine pulumi.BoolPtrInput
	// The DLP engine's description.
	Description pulumi.StringPtrInput
	// The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.
	EngineExpression pulumi.StringPtrInput
	// The DLP engine name as configured by the admin.
	Name pulumi.StringPtrInput
}

func (DLPEnginesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpenginesArgs)(nil)).Elem()
}

type DLPEnginesInput interface {
	pulumi.Input

	ToDLPEnginesOutput() DLPEnginesOutput
	ToDLPEnginesOutputWithContext(ctx context.Context) DLPEnginesOutput
}

func (*DLPEngines) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPEngines)(nil)).Elem()
}

func (i *DLPEngines) ToDLPEnginesOutput() DLPEnginesOutput {
	return i.ToDLPEnginesOutputWithContext(context.Background())
}

func (i *DLPEngines) ToDLPEnginesOutputWithContext(ctx context.Context) DLPEnginesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPEnginesOutput)
}

// DLPEnginesArrayInput is an input type that accepts DLPEnginesArray and DLPEnginesArrayOutput values.
// You can construct a concrete instance of `DLPEnginesArrayInput` via:
//
//	DLPEnginesArray{ DLPEnginesArgs{...} }
type DLPEnginesArrayInput interface {
	pulumi.Input

	ToDLPEnginesArrayOutput() DLPEnginesArrayOutput
	ToDLPEnginesArrayOutputWithContext(context.Context) DLPEnginesArrayOutput
}

type DLPEnginesArray []DLPEnginesInput

func (DLPEnginesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DLPEngines)(nil)).Elem()
}

func (i DLPEnginesArray) ToDLPEnginesArrayOutput() DLPEnginesArrayOutput {
	return i.ToDLPEnginesArrayOutputWithContext(context.Background())
}

func (i DLPEnginesArray) ToDLPEnginesArrayOutputWithContext(ctx context.Context) DLPEnginesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPEnginesArrayOutput)
}

// DLPEnginesMapInput is an input type that accepts DLPEnginesMap and DLPEnginesMapOutput values.
// You can construct a concrete instance of `DLPEnginesMapInput` via:
//
//	DLPEnginesMap{ "key": DLPEnginesArgs{...} }
type DLPEnginesMapInput interface {
	pulumi.Input

	ToDLPEnginesMapOutput() DLPEnginesMapOutput
	ToDLPEnginesMapOutputWithContext(context.Context) DLPEnginesMapOutput
}

type DLPEnginesMap map[string]DLPEnginesInput

func (DLPEnginesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DLPEngines)(nil)).Elem()
}

func (i DLPEnginesMap) ToDLPEnginesMapOutput() DLPEnginesMapOutput {
	return i.ToDLPEnginesMapOutputWithContext(context.Background())
}

func (i DLPEnginesMap) ToDLPEnginesMapOutputWithContext(ctx context.Context) DLPEnginesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPEnginesMapOutput)
}

type DLPEnginesOutput struct{ *pulumi.OutputState }

func (DLPEnginesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPEngines)(nil)).Elem()
}

func (o DLPEnginesOutput) ToDLPEnginesOutput() DLPEnginesOutput {
	return o
}

func (o DLPEnginesOutput) ToDLPEnginesOutputWithContext(ctx context.Context) DLPEnginesOutput {
	return o
}

// Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.
func (o DLPEnginesOutput) CustomDlpEngine() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DLPEngines) pulumi.BoolPtrOutput { return v.CustomDlpEngine }).(pulumi.BoolPtrOutput)
}

// The DLP engine's description.
func (o DLPEnginesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DLPEngines) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.
func (o DLPEnginesOutput) EngineExpression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DLPEngines) pulumi.StringPtrOutput { return v.EngineExpression }).(pulumi.StringPtrOutput)
}

func (o DLPEnginesOutput) EngineId() pulumi.IntOutput {
	return o.ApplyT(func(v *DLPEngines) pulumi.IntOutput { return v.EngineId }).(pulumi.IntOutput)
}

// The DLP engine name as configured by the admin.
func (o DLPEnginesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPEngines) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type DLPEnginesArrayOutput struct{ *pulumi.OutputState }

func (DLPEnginesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DLPEngines)(nil)).Elem()
}

func (o DLPEnginesArrayOutput) ToDLPEnginesArrayOutput() DLPEnginesArrayOutput {
	return o
}

func (o DLPEnginesArrayOutput) ToDLPEnginesArrayOutputWithContext(ctx context.Context) DLPEnginesArrayOutput {
	return o
}

func (o DLPEnginesArrayOutput) Index(i pulumi.IntInput) DLPEnginesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DLPEngines {
		return vs[0].([]*DLPEngines)[vs[1].(int)]
	}).(DLPEnginesOutput)
}

type DLPEnginesMapOutput struct{ *pulumi.OutputState }

func (DLPEnginesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DLPEngines)(nil)).Elem()
}

func (o DLPEnginesMapOutput) ToDLPEnginesMapOutput() DLPEnginesMapOutput {
	return o
}

func (o DLPEnginesMapOutput) ToDLPEnginesMapOutputWithContext(ctx context.Context) DLPEnginesMapOutput {
	return o
}

func (o DLPEnginesMapOutput) MapIndex(k pulumi.StringInput) DLPEnginesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DLPEngines {
		return vs[0].(map[string]*DLPEngines)[vs[1].(string)]
	}).(DLPEnginesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DLPEnginesInput)(nil)).Elem(), &DLPEngines{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPEnginesArrayInput)(nil)).Elem(), DLPEnginesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPEnginesMapInput)(nil)).Elem(), DLPEnginesMap{})
	pulumi.RegisterOutputType(DLPEnginesOutput{})
	pulumi.RegisterOutputType(DLPEnginesArrayOutput{})
	pulumi.RegisterOutputType(DLPEnginesMapOutput{})
}
