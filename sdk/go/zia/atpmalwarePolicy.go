// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/configuring-malware-protection-policy)
// * [API documentation](https://help.zscaler.com/zia/malware-protection-policy#/cyberThreatProtection/atpMalwareInspection-put)
//
// The **zia_atp_malware_policy** resource allows you to update security exceptions for the Malware Protection policy. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)
//
// ## Example Usage
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_atp_malware_policy** can be imported by using `policy` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/aTPMalwarePolicy:ATPMalwarePolicy this "policy"
// ```
type ATPMalwarePolicy struct {
	pulumi.CustomResourceState

	// A Boolean value indicating whether to allow or block users from uploading or downloading password-protected files
	BlockPasswordProtectedArchiveFiles pulumi.BoolOutput `pulumi:"blockPasswordProtectedArchiveFiles"`
	// A Boolean value indicating whether to allow or block users from uploading or downloading files that the Zscaler service
	// is unable to scan.
	BlockUnscannableFiles pulumi.BoolOutput `pulumi:"blockUnscannableFiles"`
}

// NewATPMalwarePolicy registers a new resource with the given unique name, arguments, and options.
func NewATPMalwarePolicy(ctx *pulumi.Context,
	name string, args *ATPMalwarePolicyArgs, opts ...pulumi.ResourceOption) (*ATPMalwarePolicy, error) {
	if args == nil {
		args = &ATPMalwarePolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ATPMalwarePolicy
	err := ctx.RegisterResource("zia:index/aTPMalwarePolicy:ATPMalwarePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetATPMalwarePolicy gets an existing ATPMalwarePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetATPMalwarePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ATPMalwarePolicyState, opts ...pulumi.ResourceOption) (*ATPMalwarePolicy, error) {
	var resource ATPMalwarePolicy
	err := ctx.ReadResource("zia:index/aTPMalwarePolicy:ATPMalwarePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ATPMalwarePolicy resources.
type atpmalwarePolicyState struct {
	// A Boolean value indicating whether to allow or block users from uploading or downloading password-protected files
	BlockPasswordProtectedArchiveFiles *bool `pulumi:"blockPasswordProtectedArchiveFiles"`
	// A Boolean value indicating whether to allow or block users from uploading or downloading files that the Zscaler service
	// is unable to scan.
	BlockUnscannableFiles *bool `pulumi:"blockUnscannableFiles"`
}

type ATPMalwarePolicyState struct {
	// A Boolean value indicating whether to allow or block users from uploading or downloading password-protected files
	BlockPasswordProtectedArchiveFiles pulumi.BoolPtrInput
	// A Boolean value indicating whether to allow or block users from uploading or downloading files that the Zscaler service
	// is unable to scan.
	BlockUnscannableFiles pulumi.BoolPtrInput
}

func (ATPMalwarePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*atpmalwarePolicyState)(nil)).Elem()
}

type atpmalwarePolicyArgs struct {
	// A Boolean value indicating whether to allow or block users from uploading or downloading password-protected files
	BlockPasswordProtectedArchiveFiles *bool `pulumi:"blockPasswordProtectedArchiveFiles"`
	// A Boolean value indicating whether to allow or block users from uploading or downloading files that the Zscaler service
	// is unable to scan.
	BlockUnscannableFiles *bool `pulumi:"blockUnscannableFiles"`
}

// The set of arguments for constructing a ATPMalwarePolicy resource.
type ATPMalwarePolicyArgs struct {
	// A Boolean value indicating whether to allow or block users from uploading or downloading password-protected files
	BlockPasswordProtectedArchiveFiles pulumi.BoolPtrInput
	// A Boolean value indicating whether to allow or block users from uploading or downloading files that the Zscaler service
	// is unable to scan.
	BlockUnscannableFiles pulumi.BoolPtrInput
}

func (ATPMalwarePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*atpmalwarePolicyArgs)(nil)).Elem()
}

type ATPMalwarePolicyInput interface {
	pulumi.Input

	ToATPMalwarePolicyOutput() ATPMalwarePolicyOutput
	ToATPMalwarePolicyOutputWithContext(ctx context.Context) ATPMalwarePolicyOutput
}

func (*ATPMalwarePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ATPMalwarePolicy)(nil)).Elem()
}

func (i *ATPMalwarePolicy) ToATPMalwarePolicyOutput() ATPMalwarePolicyOutput {
	return i.ToATPMalwarePolicyOutputWithContext(context.Background())
}

func (i *ATPMalwarePolicy) ToATPMalwarePolicyOutputWithContext(ctx context.Context) ATPMalwarePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ATPMalwarePolicyOutput)
}

// ATPMalwarePolicyArrayInput is an input type that accepts ATPMalwarePolicyArray and ATPMalwarePolicyArrayOutput values.
// You can construct a concrete instance of `ATPMalwarePolicyArrayInput` via:
//
//	ATPMalwarePolicyArray{ ATPMalwarePolicyArgs{...} }
type ATPMalwarePolicyArrayInput interface {
	pulumi.Input

	ToATPMalwarePolicyArrayOutput() ATPMalwarePolicyArrayOutput
	ToATPMalwarePolicyArrayOutputWithContext(context.Context) ATPMalwarePolicyArrayOutput
}

type ATPMalwarePolicyArray []ATPMalwarePolicyInput

func (ATPMalwarePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ATPMalwarePolicy)(nil)).Elem()
}

func (i ATPMalwarePolicyArray) ToATPMalwarePolicyArrayOutput() ATPMalwarePolicyArrayOutput {
	return i.ToATPMalwarePolicyArrayOutputWithContext(context.Background())
}

func (i ATPMalwarePolicyArray) ToATPMalwarePolicyArrayOutputWithContext(ctx context.Context) ATPMalwarePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ATPMalwarePolicyArrayOutput)
}

// ATPMalwarePolicyMapInput is an input type that accepts ATPMalwarePolicyMap and ATPMalwarePolicyMapOutput values.
// You can construct a concrete instance of `ATPMalwarePolicyMapInput` via:
//
//	ATPMalwarePolicyMap{ "key": ATPMalwarePolicyArgs{...} }
type ATPMalwarePolicyMapInput interface {
	pulumi.Input

	ToATPMalwarePolicyMapOutput() ATPMalwarePolicyMapOutput
	ToATPMalwarePolicyMapOutputWithContext(context.Context) ATPMalwarePolicyMapOutput
}

type ATPMalwarePolicyMap map[string]ATPMalwarePolicyInput

func (ATPMalwarePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ATPMalwarePolicy)(nil)).Elem()
}

func (i ATPMalwarePolicyMap) ToATPMalwarePolicyMapOutput() ATPMalwarePolicyMapOutput {
	return i.ToATPMalwarePolicyMapOutputWithContext(context.Background())
}

func (i ATPMalwarePolicyMap) ToATPMalwarePolicyMapOutputWithContext(ctx context.Context) ATPMalwarePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ATPMalwarePolicyMapOutput)
}

type ATPMalwarePolicyOutput struct{ *pulumi.OutputState }

func (ATPMalwarePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ATPMalwarePolicy)(nil)).Elem()
}

func (o ATPMalwarePolicyOutput) ToATPMalwarePolicyOutput() ATPMalwarePolicyOutput {
	return o
}

func (o ATPMalwarePolicyOutput) ToATPMalwarePolicyOutputWithContext(ctx context.Context) ATPMalwarePolicyOutput {
	return o
}

// A Boolean value indicating whether to allow or block users from uploading or downloading password-protected files
func (o ATPMalwarePolicyOutput) BlockPasswordProtectedArchiveFiles() pulumi.BoolOutput {
	return o.ApplyT(func(v *ATPMalwarePolicy) pulumi.BoolOutput { return v.BlockPasswordProtectedArchiveFiles }).(pulumi.BoolOutput)
}

// A Boolean value indicating whether to allow or block users from uploading or downloading files that the Zscaler service
// is unable to scan.
func (o ATPMalwarePolicyOutput) BlockUnscannableFiles() pulumi.BoolOutput {
	return o.ApplyT(func(v *ATPMalwarePolicy) pulumi.BoolOutput { return v.BlockUnscannableFiles }).(pulumi.BoolOutput)
}

type ATPMalwarePolicyArrayOutput struct{ *pulumi.OutputState }

func (ATPMalwarePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ATPMalwarePolicy)(nil)).Elem()
}

func (o ATPMalwarePolicyArrayOutput) ToATPMalwarePolicyArrayOutput() ATPMalwarePolicyArrayOutput {
	return o
}

func (o ATPMalwarePolicyArrayOutput) ToATPMalwarePolicyArrayOutputWithContext(ctx context.Context) ATPMalwarePolicyArrayOutput {
	return o
}

func (o ATPMalwarePolicyArrayOutput) Index(i pulumi.IntInput) ATPMalwarePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ATPMalwarePolicy {
		return vs[0].([]*ATPMalwarePolicy)[vs[1].(int)]
	}).(ATPMalwarePolicyOutput)
}

type ATPMalwarePolicyMapOutput struct{ *pulumi.OutputState }

func (ATPMalwarePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ATPMalwarePolicy)(nil)).Elem()
}

func (o ATPMalwarePolicyMapOutput) ToATPMalwarePolicyMapOutput() ATPMalwarePolicyMapOutput {
	return o
}

func (o ATPMalwarePolicyMapOutput) ToATPMalwarePolicyMapOutputWithContext(ctx context.Context) ATPMalwarePolicyMapOutput {
	return o
}

func (o ATPMalwarePolicyMapOutput) MapIndex(k pulumi.StringInput) ATPMalwarePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ATPMalwarePolicy {
		return vs[0].(map[string]*ATPMalwarePolicy)[vs[1].(string)]
	}).(ATPMalwarePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ATPMalwarePolicyInput)(nil)).Elem(), &ATPMalwarePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ATPMalwarePolicyArrayInput)(nil)).Elem(), ATPMalwarePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ATPMalwarePolicyMapInput)(nil)).Elem(), ATPMalwarePolicyMap{})
	pulumi.RegisterOutputType(ATPMalwarePolicyOutput{})
	pulumi.RegisterOutputType(ATPMalwarePolicyArrayOutput{})
	pulumi.RegisterOutputType(ATPMalwarePolicyMapOutput{})
}
