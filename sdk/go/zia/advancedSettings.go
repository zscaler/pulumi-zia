// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// The **zia_advanced_settings** resource alows you to updates the advanced settings configuration in the ZIA Admin Portal. To learn more see [Configuring Advanced Settings](https://help.zscaler.com/zia/configuring-advanced-settings)
//
// ## Example Usage
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_advanced_settings** can be imported by using `advanced_settings` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/advancedSettings:AdvancedSettings this "advanced_settings"
// ```
type AdvancedSettings struct {
	pulumi.CustomResourceState

	// Cloud applications that are exempted from cookie authentication
	AuthBypassApps pulumi.StringArrayOutput `pulumi:"authBypassApps"`
	// URL categories that are exempted from cookie authentication
	AuthBypassUrlCategories pulumi.StringArrayOutput `pulumi:"authBypassUrlCategories"`
	// Custom URLs that are exempted from cookie authentication for users
	AuthBypassUrls pulumi.StringArrayOutput `pulumi:"authBypassUrls"`
	// Cloud applications that are exempted from Basic authentication
	BasicBypassApps pulumi.StringArrayOutput `pulumi:"basicBypassApps"`
	// URL categories that are exempted from Basic authentication
	BasicBypassUrlCategories pulumi.StringArrayOutput `pulumi:"basicBypassUrlCategories"`
	// Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
	// is blocked or not
	BlockConnectHostSniMismatch pulumi.BoolOutput `pulumi:"blockConnectHostSniMismatch"`
	// Applications which are subjected to Domain Fronting
	BlockDomainFrontingApps pulumi.StringArrayOutput `pulumi:"blockDomainFrontingApps"`
	// Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
	// the FQDN of the request's host header
	BlockDomainFrontingOnHostHeader pulumi.BoolOutput `pulumi:"blockDomainFrontingOnHostHeader"`
	// Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
	// to ports other than the standard HTTP/S ports 80 and 443)
	BlockHttpTunnelOnNonHttpPorts pulumi.BoolOutput `pulumi:"blockHttpTunnelOnNonHttpPorts"`
	// Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
	BlockNonCompliantHttpRequestOnHttpPorts pulumi.BoolOutput `pulumi:"blockNonCompliantHttpRequestOnHttpPorts"`
	// Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
	BlockNonHttpOnHttpPortEnabled pulumi.BoolOutput `pulumi:"blockNonHttpOnHttpPortEnabled"`
	// Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
	// transaction explicitly
	CascadeUrlFiltering pulumi.BoolOutput `pulumi:"cascadeUrlFiltering"`
	// Cloud applications that are exempted from Digest authentication
	DigestAuthBypassApps pulumi.StringArrayOutput `pulumi:"digestAuthBypassApps"`
	// URL categories that are exempted from Digest authentication
	DigestAuthBypassUrlCategories pulumi.StringArrayOutput `pulumi:"digestAuthBypassUrlCategories"`
	// Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
	// authentication
	DigestAuthBypassUrls pulumi.StringArrayOutput `pulumi:"digestAuthBypassUrls"`
	// Cloud applications to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyApps pulumi.StringArrayOutput `pulumi:"dnsResolutionOnTransparentProxyApps"`
	// Cloud applications that are excluded from DNS optimization on transparent proxy mode
	DnsResolutionOnTransparentProxyExemptApps          pulumi.StringArrayOutput `pulumi:"dnsResolutionOnTransparentProxyExemptApps"`
	DnsResolutionOnTransparentProxyExemptUrlCategories pulumi.StringArrayOutput `pulumi:"dnsResolutionOnTransparentProxyExemptUrlCategories"`
	// URLs that are excluded from DNS optimization on transparent proxy mode
	DnsResolutionOnTransparentProxyExemptUrls pulumi.StringArrayOutput `pulumi:"dnsResolutionOnTransparentProxyExemptUrls"`
	// Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
	DnsResolutionOnTransparentProxyIpv6Apps pulumi.StringArrayOutput `pulumi:"dnsResolutionOnTransparentProxyIpv6Apps"`
	// Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
	DnsResolutionOnTransparentProxyIpv6ExemptApps          pulumi.StringArrayOutput `pulumi:"dnsResolutionOnTransparentProxyIpv6ExemptApps"`
	DnsResolutionOnTransparentProxyIpv6ExemptUrlCategories pulumi.StringArrayOutput `pulumi:"dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories"`
	// IPv6 URL categories to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyIpv6UrlCategories pulumi.StringArrayOutput `pulumi:"dnsResolutionOnTransparentProxyIpv6UrlCategories"`
	// URL categories to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyUrlCategories pulumi.StringArrayOutput `pulumi:"dnsResolutionOnTransparentProxyUrlCategories"`
	// URLs to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyUrls pulumi.StringArrayOutput `pulumi:"dnsResolutionOnTransparentProxyUrls"`
	// URL categories that are exempted from domain fronting
	DomainFrontingBypassUrlCategories pulumi.StringArrayOutput `pulumi:"domainFrontingBypassUrlCategories"`
	// Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
	DynamicUserRiskEnabled pulumi.BoolOutput `pulumi:"dynamicUserRiskEnabled"`
	// Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
	// users.
	EcsForAllEnabled pulumi.BoolOutput `pulumi:"ecsForAllEnabled"`
	// Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
	EnableAdminRankAccess pulumi.BoolOutput `pulumi:"enableAdminRankAccess"`
	// Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
	// (e.g., traffic via GRE or IPSec tunnels without a PAC file).
	EnableDnsResolutionOnTransparentProxy pulumi.BoolOutput `pulumi:"enableDnsResolutionOnTransparentProxy"`
	// Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
	EnableEvaluatePolicyOnGlobalSslBypass pulumi.BoolOutput `pulumi:"enableEvaluatePolicyOnGlobalSslBypass"`
	// Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
	EnableIpv6DnsOptimizationOnAllTransparentProxy pulumi.BoolOutput `pulumi:"enableIpv6DnsOptimizationOnAllTransparentProxy"`
	// Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
	// destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
	// PAC file).
	EnableIpv6DnsResolutionOnTransparentProxy pulumi.BoolOutput `pulumi:"enableIpv6DnsResolutionOnTransparentProxy"`
	// Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
	EnableOffice365 pulumi.BoolOutput `pulumi:"enableOffice365"`
	// Value indicating whether policies that include user and department criteria can be configured and applied for
	// unauthenticated traffic
	EnablePolicyForUnauthenticatedTraffic pulumi.BoolOutput `pulumi:"enablePolicyForUnauthenticatedTraffic"`
	// Enforce Surrogate IP authentication for Windows app traffic
	EnforceSurrogateIpForWindowsApp pulumi.BoolOutput `pulumi:"enforceSurrogateIpForWindowsApp"`
	// Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
	// organizational level
	Http2NonbrowserTrafficEnabled pulumi.BoolOutput `pulumi:"http2NonbrowserTrafficEnabled"`
	// URL categories for which HTTP range headers must be removed
	HttpRangeHeaderRemoveUrlCategories pulumi.StringArrayOutput `pulumi:"httpRangeHeaderRemoveUrlCategories"`
	// Cloud applications that are exempted from Kerberos authentication
	KerberosBypassApps pulumi.StringArrayOutput `pulumi:"kerberosBypassApps"`
	// URL categories that are exempted from Kerberos authentication
	KerberosBypassUrlCategories pulumi.StringArrayOutput `pulumi:"kerberosBypassUrlCategories"`
	// Custom URLs that are exempted from Kerberos authentication
	KerberosBypassUrls pulumi.StringArrayOutput `pulumi:"kerberosBypassUrls"`
	// Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
	LogInternalIp pulumi.BoolOutput `pulumi:"logInternalIp"`
	// Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
	// forward proxy connections
	PreferSniOverConnHost pulumi.BoolOutput `pulumi:"preferSniOverConnHost"`
	// Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
	// resolution instead of the CONNECT host for forward proxy connections)
	PreferSniOverConnHostApps pulumi.StringArrayOutput `pulumi:"preferSniOverConnHostApps"`
	// Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
	// IP-anchored and ZIA-inspected ZPA application traffic.
	SipaXffHeaderEnabled pulumi.BoolOutput `pulumi:"sipaXffHeaderEnabled"`
	// URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
	// resolution instead of the CONNECT host for forward proxy connections)
	SniDnsOptimizationBypassUrlCategories pulumi.StringArrayOutput `pulumi:"sniDnsOptimizationBypassUrlCategories"`
	// Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
	// 80
	TrackHttpTunnelOnHttpPorts pulumi.BoolOutput `pulumi:"trackHttpTunnelOnHttpPorts"`
	// Specifies the login session timeout for admins accessing the ZIA Admin Portal
	UiSessionTimeout pulumi.IntOutput `pulumi:"uiSessionTimeout"`
	// Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
	// Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
	ZscalerClientConnector1AndPacRoadWarriorInFirewall pulumi.BoolOutput `pulumi:"zscalerClientConnector1AndPacRoadWarriorInFirewall"`
}

// NewAdvancedSettings registers a new resource with the given unique name, arguments, and options.
func NewAdvancedSettings(ctx *pulumi.Context,
	name string, args *AdvancedSettingsArgs, opts ...pulumi.ResourceOption) (*AdvancedSettings, error) {
	if args == nil {
		args = &AdvancedSettingsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AdvancedSettings
	err := ctx.RegisterResource("zia:index/advancedSettings:AdvancedSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdvancedSettings gets an existing AdvancedSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdvancedSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdvancedSettingsState, opts ...pulumi.ResourceOption) (*AdvancedSettings, error) {
	var resource AdvancedSettings
	err := ctx.ReadResource("zia:index/advancedSettings:AdvancedSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdvancedSettings resources.
type advancedSettingsState struct {
	// Cloud applications that are exempted from cookie authentication
	AuthBypassApps []string `pulumi:"authBypassApps"`
	// URL categories that are exempted from cookie authentication
	AuthBypassUrlCategories []string `pulumi:"authBypassUrlCategories"`
	// Custom URLs that are exempted from cookie authentication for users
	AuthBypassUrls []string `pulumi:"authBypassUrls"`
	// Cloud applications that are exempted from Basic authentication
	BasicBypassApps []string `pulumi:"basicBypassApps"`
	// URL categories that are exempted from Basic authentication
	BasicBypassUrlCategories []string `pulumi:"basicBypassUrlCategories"`
	// Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
	// is blocked or not
	BlockConnectHostSniMismatch *bool `pulumi:"blockConnectHostSniMismatch"`
	// Applications which are subjected to Domain Fronting
	BlockDomainFrontingApps []string `pulumi:"blockDomainFrontingApps"`
	// Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
	// the FQDN of the request's host header
	BlockDomainFrontingOnHostHeader *bool `pulumi:"blockDomainFrontingOnHostHeader"`
	// Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
	// to ports other than the standard HTTP/S ports 80 and 443)
	BlockHttpTunnelOnNonHttpPorts *bool `pulumi:"blockHttpTunnelOnNonHttpPorts"`
	// Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
	BlockNonCompliantHttpRequestOnHttpPorts *bool `pulumi:"blockNonCompliantHttpRequestOnHttpPorts"`
	// Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
	BlockNonHttpOnHttpPortEnabled *bool `pulumi:"blockNonHttpOnHttpPortEnabled"`
	// Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
	// transaction explicitly
	CascadeUrlFiltering *bool `pulumi:"cascadeUrlFiltering"`
	// Cloud applications that are exempted from Digest authentication
	DigestAuthBypassApps []string `pulumi:"digestAuthBypassApps"`
	// URL categories that are exempted from Digest authentication
	DigestAuthBypassUrlCategories []string `pulumi:"digestAuthBypassUrlCategories"`
	// Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
	// authentication
	DigestAuthBypassUrls []string `pulumi:"digestAuthBypassUrls"`
	// Cloud applications to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyApps []string `pulumi:"dnsResolutionOnTransparentProxyApps"`
	// Cloud applications that are excluded from DNS optimization on transparent proxy mode
	DnsResolutionOnTransparentProxyExemptApps          []string `pulumi:"dnsResolutionOnTransparentProxyExemptApps"`
	DnsResolutionOnTransparentProxyExemptUrlCategories []string `pulumi:"dnsResolutionOnTransparentProxyExemptUrlCategories"`
	// URLs that are excluded from DNS optimization on transparent proxy mode
	DnsResolutionOnTransparentProxyExemptUrls []string `pulumi:"dnsResolutionOnTransparentProxyExemptUrls"`
	// Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
	DnsResolutionOnTransparentProxyIpv6Apps []string `pulumi:"dnsResolutionOnTransparentProxyIpv6Apps"`
	// Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
	DnsResolutionOnTransparentProxyIpv6ExemptApps          []string `pulumi:"dnsResolutionOnTransparentProxyIpv6ExemptApps"`
	DnsResolutionOnTransparentProxyIpv6ExemptUrlCategories []string `pulumi:"dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories"`
	// IPv6 URL categories to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyIpv6UrlCategories []string `pulumi:"dnsResolutionOnTransparentProxyIpv6UrlCategories"`
	// URL categories to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyUrlCategories []string `pulumi:"dnsResolutionOnTransparentProxyUrlCategories"`
	// URLs to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyUrls []string `pulumi:"dnsResolutionOnTransparentProxyUrls"`
	// URL categories that are exempted from domain fronting
	DomainFrontingBypassUrlCategories []string `pulumi:"domainFrontingBypassUrlCategories"`
	// Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
	DynamicUserRiskEnabled *bool `pulumi:"dynamicUserRiskEnabled"`
	// Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
	// users.
	EcsForAllEnabled *bool `pulumi:"ecsForAllEnabled"`
	// Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
	EnableAdminRankAccess *bool `pulumi:"enableAdminRankAccess"`
	// Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
	// (e.g., traffic via GRE or IPSec tunnels without a PAC file).
	EnableDnsResolutionOnTransparentProxy *bool `pulumi:"enableDnsResolutionOnTransparentProxy"`
	// Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
	EnableEvaluatePolicyOnGlobalSslBypass *bool `pulumi:"enableEvaluatePolicyOnGlobalSslBypass"`
	// Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
	EnableIpv6DnsOptimizationOnAllTransparentProxy *bool `pulumi:"enableIpv6DnsOptimizationOnAllTransparentProxy"`
	// Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
	// destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
	// PAC file).
	EnableIpv6DnsResolutionOnTransparentProxy *bool `pulumi:"enableIpv6DnsResolutionOnTransparentProxy"`
	// Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
	EnableOffice365 *bool `pulumi:"enableOffice365"`
	// Value indicating whether policies that include user and department criteria can be configured and applied for
	// unauthenticated traffic
	EnablePolicyForUnauthenticatedTraffic *bool `pulumi:"enablePolicyForUnauthenticatedTraffic"`
	// Enforce Surrogate IP authentication for Windows app traffic
	EnforceSurrogateIpForWindowsApp *bool `pulumi:"enforceSurrogateIpForWindowsApp"`
	// Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
	// organizational level
	Http2NonbrowserTrafficEnabled *bool `pulumi:"http2NonbrowserTrafficEnabled"`
	// URL categories for which HTTP range headers must be removed
	HttpRangeHeaderRemoveUrlCategories []string `pulumi:"httpRangeHeaderRemoveUrlCategories"`
	// Cloud applications that are exempted from Kerberos authentication
	KerberosBypassApps []string `pulumi:"kerberosBypassApps"`
	// URL categories that are exempted from Kerberos authentication
	KerberosBypassUrlCategories []string `pulumi:"kerberosBypassUrlCategories"`
	// Custom URLs that are exempted from Kerberos authentication
	KerberosBypassUrls []string `pulumi:"kerberosBypassUrls"`
	// Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
	LogInternalIp *bool `pulumi:"logInternalIp"`
	// Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
	// forward proxy connections
	PreferSniOverConnHost *bool `pulumi:"preferSniOverConnHost"`
	// Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
	// resolution instead of the CONNECT host for forward proxy connections)
	PreferSniOverConnHostApps []string `pulumi:"preferSniOverConnHostApps"`
	// Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
	// IP-anchored and ZIA-inspected ZPA application traffic.
	SipaXffHeaderEnabled *bool `pulumi:"sipaXffHeaderEnabled"`
	// URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
	// resolution instead of the CONNECT host for forward proxy connections)
	SniDnsOptimizationBypassUrlCategories []string `pulumi:"sniDnsOptimizationBypassUrlCategories"`
	// Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
	// 80
	TrackHttpTunnelOnHttpPorts *bool `pulumi:"trackHttpTunnelOnHttpPorts"`
	// Specifies the login session timeout for admins accessing the ZIA Admin Portal
	UiSessionTimeout *int `pulumi:"uiSessionTimeout"`
	// Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
	// Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
	ZscalerClientConnector1AndPacRoadWarriorInFirewall *bool `pulumi:"zscalerClientConnector1AndPacRoadWarriorInFirewall"`
}

type AdvancedSettingsState struct {
	// Cloud applications that are exempted from cookie authentication
	AuthBypassApps pulumi.StringArrayInput
	// URL categories that are exempted from cookie authentication
	AuthBypassUrlCategories pulumi.StringArrayInput
	// Custom URLs that are exempted from cookie authentication for users
	AuthBypassUrls pulumi.StringArrayInput
	// Cloud applications that are exempted from Basic authentication
	BasicBypassApps pulumi.StringArrayInput
	// URL categories that are exempted from Basic authentication
	BasicBypassUrlCategories pulumi.StringArrayInput
	// Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
	// is blocked or not
	BlockConnectHostSniMismatch pulumi.BoolPtrInput
	// Applications which are subjected to Domain Fronting
	BlockDomainFrontingApps pulumi.StringArrayInput
	// Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
	// the FQDN of the request's host header
	BlockDomainFrontingOnHostHeader pulumi.BoolPtrInput
	// Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
	// to ports other than the standard HTTP/S ports 80 and 443)
	BlockHttpTunnelOnNonHttpPorts pulumi.BoolPtrInput
	// Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
	BlockNonCompliantHttpRequestOnHttpPorts pulumi.BoolPtrInput
	// Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
	BlockNonHttpOnHttpPortEnabled pulumi.BoolPtrInput
	// Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
	// transaction explicitly
	CascadeUrlFiltering pulumi.BoolPtrInput
	// Cloud applications that are exempted from Digest authentication
	DigestAuthBypassApps pulumi.StringArrayInput
	// URL categories that are exempted from Digest authentication
	DigestAuthBypassUrlCategories pulumi.StringArrayInput
	// Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
	// authentication
	DigestAuthBypassUrls pulumi.StringArrayInput
	// Cloud applications to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyApps pulumi.StringArrayInput
	// Cloud applications that are excluded from DNS optimization on transparent proxy mode
	DnsResolutionOnTransparentProxyExemptApps          pulumi.StringArrayInput
	DnsResolutionOnTransparentProxyExemptUrlCategories pulumi.StringArrayInput
	// URLs that are excluded from DNS optimization on transparent proxy mode
	DnsResolutionOnTransparentProxyExemptUrls pulumi.StringArrayInput
	// Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
	DnsResolutionOnTransparentProxyIpv6Apps pulumi.StringArrayInput
	// Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
	DnsResolutionOnTransparentProxyIpv6ExemptApps          pulumi.StringArrayInput
	DnsResolutionOnTransparentProxyIpv6ExemptUrlCategories pulumi.StringArrayInput
	// IPv6 URL categories to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyIpv6UrlCategories pulumi.StringArrayInput
	// URL categories to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyUrlCategories pulumi.StringArrayInput
	// URLs to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyUrls pulumi.StringArrayInput
	// URL categories that are exempted from domain fronting
	DomainFrontingBypassUrlCategories pulumi.StringArrayInput
	// Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
	DynamicUserRiskEnabled pulumi.BoolPtrInput
	// Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
	// users.
	EcsForAllEnabled pulumi.BoolPtrInput
	// Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
	EnableAdminRankAccess pulumi.BoolPtrInput
	// Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
	// (e.g., traffic via GRE or IPSec tunnels without a PAC file).
	EnableDnsResolutionOnTransparentProxy pulumi.BoolPtrInput
	// Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
	EnableEvaluatePolicyOnGlobalSslBypass pulumi.BoolPtrInput
	// Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
	EnableIpv6DnsOptimizationOnAllTransparentProxy pulumi.BoolPtrInput
	// Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
	// destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
	// PAC file).
	EnableIpv6DnsResolutionOnTransparentProxy pulumi.BoolPtrInput
	// Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
	EnableOffice365 pulumi.BoolPtrInput
	// Value indicating whether policies that include user and department criteria can be configured and applied for
	// unauthenticated traffic
	EnablePolicyForUnauthenticatedTraffic pulumi.BoolPtrInput
	// Enforce Surrogate IP authentication for Windows app traffic
	EnforceSurrogateIpForWindowsApp pulumi.BoolPtrInput
	// Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
	// organizational level
	Http2NonbrowserTrafficEnabled pulumi.BoolPtrInput
	// URL categories for which HTTP range headers must be removed
	HttpRangeHeaderRemoveUrlCategories pulumi.StringArrayInput
	// Cloud applications that are exempted from Kerberos authentication
	KerberosBypassApps pulumi.StringArrayInput
	// URL categories that are exempted from Kerberos authentication
	KerberosBypassUrlCategories pulumi.StringArrayInput
	// Custom URLs that are exempted from Kerberos authentication
	KerberosBypassUrls pulumi.StringArrayInput
	// Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
	LogInternalIp pulumi.BoolPtrInput
	// Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
	// forward proxy connections
	PreferSniOverConnHost pulumi.BoolPtrInput
	// Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
	// resolution instead of the CONNECT host for forward proxy connections)
	PreferSniOverConnHostApps pulumi.StringArrayInput
	// Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
	// IP-anchored and ZIA-inspected ZPA application traffic.
	SipaXffHeaderEnabled pulumi.BoolPtrInput
	// URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
	// resolution instead of the CONNECT host for forward proxy connections)
	SniDnsOptimizationBypassUrlCategories pulumi.StringArrayInput
	// Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
	// 80
	TrackHttpTunnelOnHttpPorts pulumi.BoolPtrInput
	// Specifies the login session timeout for admins accessing the ZIA Admin Portal
	UiSessionTimeout pulumi.IntPtrInput
	// Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
	// Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
	ZscalerClientConnector1AndPacRoadWarriorInFirewall pulumi.BoolPtrInput
}

func (AdvancedSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*advancedSettingsState)(nil)).Elem()
}

type advancedSettingsArgs struct {
	// Cloud applications that are exempted from cookie authentication
	AuthBypassApps []string `pulumi:"authBypassApps"`
	// URL categories that are exempted from cookie authentication
	AuthBypassUrlCategories []string `pulumi:"authBypassUrlCategories"`
	// Custom URLs that are exempted from cookie authentication for users
	AuthBypassUrls []string `pulumi:"authBypassUrls"`
	// Cloud applications that are exempted from Basic authentication
	BasicBypassApps []string `pulumi:"basicBypassApps"`
	// URL categories that are exempted from Basic authentication
	BasicBypassUrlCategories []string `pulumi:"basicBypassUrlCategories"`
	// Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
	// is blocked or not
	BlockConnectHostSniMismatch *bool `pulumi:"blockConnectHostSniMismatch"`
	// Applications which are subjected to Domain Fronting
	BlockDomainFrontingApps []string `pulumi:"blockDomainFrontingApps"`
	// Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
	// the FQDN of the request's host header
	BlockDomainFrontingOnHostHeader *bool `pulumi:"blockDomainFrontingOnHostHeader"`
	// Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
	// to ports other than the standard HTTP/S ports 80 and 443)
	BlockHttpTunnelOnNonHttpPorts *bool `pulumi:"blockHttpTunnelOnNonHttpPorts"`
	// Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
	BlockNonCompliantHttpRequestOnHttpPorts *bool `pulumi:"blockNonCompliantHttpRequestOnHttpPorts"`
	// Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
	BlockNonHttpOnHttpPortEnabled *bool `pulumi:"blockNonHttpOnHttpPortEnabled"`
	// Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
	// transaction explicitly
	CascadeUrlFiltering *bool `pulumi:"cascadeUrlFiltering"`
	// Cloud applications that are exempted from Digest authentication
	DigestAuthBypassApps []string `pulumi:"digestAuthBypassApps"`
	// URL categories that are exempted from Digest authentication
	DigestAuthBypassUrlCategories []string `pulumi:"digestAuthBypassUrlCategories"`
	// Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
	// authentication
	DigestAuthBypassUrls []string `pulumi:"digestAuthBypassUrls"`
	// Cloud applications to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyApps []string `pulumi:"dnsResolutionOnTransparentProxyApps"`
	// Cloud applications that are excluded from DNS optimization on transparent proxy mode
	DnsResolutionOnTransparentProxyExemptApps          []string `pulumi:"dnsResolutionOnTransparentProxyExemptApps"`
	DnsResolutionOnTransparentProxyExemptUrlCategories []string `pulumi:"dnsResolutionOnTransparentProxyExemptUrlCategories"`
	// URLs that are excluded from DNS optimization on transparent proxy mode
	DnsResolutionOnTransparentProxyExemptUrls []string `pulumi:"dnsResolutionOnTransparentProxyExemptUrls"`
	// Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
	DnsResolutionOnTransparentProxyIpv6Apps []string `pulumi:"dnsResolutionOnTransparentProxyIpv6Apps"`
	// Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
	DnsResolutionOnTransparentProxyIpv6ExemptApps          []string `pulumi:"dnsResolutionOnTransparentProxyIpv6ExemptApps"`
	DnsResolutionOnTransparentProxyIpv6ExemptUrlCategories []string `pulumi:"dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories"`
	// IPv6 URL categories to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyIpv6UrlCategories []string `pulumi:"dnsResolutionOnTransparentProxyIpv6UrlCategories"`
	// URL categories to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyUrlCategories []string `pulumi:"dnsResolutionOnTransparentProxyUrlCategories"`
	// URLs to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyUrls []string `pulumi:"dnsResolutionOnTransparentProxyUrls"`
	// URL categories that are exempted from domain fronting
	DomainFrontingBypassUrlCategories []string `pulumi:"domainFrontingBypassUrlCategories"`
	// Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
	DynamicUserRiskEnabled *bool `pulumi:"dynamicUserRiskEnabled"`
	// Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
	// users.
	EcsForAllEnabled *bool `pulumi:"ecsForAllEnabled"`
	// Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
	EnableAdminRankAccess *bool `pulumi:"enableAdminRankAccess"`
	// Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
	// (e.g., traffic via GRE or IPSec tunnels without a PAC file).
	EnableDnsResolutionOnTransparentProxy *bool `pulumi:"enableDnsResolutionOnTransparentProxy"`
	// Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
	EnableEvaluatePolicyOnGlobalSslBypass *bool `pulumi:"enableEvaluatePolicyOnGlobalSslBypass"`
	// Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
	EnableIpv6DnsOptimizationOnAllTransparentProxy *bool `pulumi:"enableIpv6DnsOptimizationOnAllTransparentProxy"`
	// Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
	// destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
	// PAC file).
	EnableIpv6DnsResolutionOnTransparentProxy *bool `pulumi:"enableIpv6DnsResolutionOnTransparentProxy"`
	// Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
	EnableOffice365 *bool `pulumi:"enableOffice365"`
	// Value indicating whether policies that include user and department criteria can be configured and applied for
	// unauthenticated traffic
	EnablePolicyForUnauthenticatedTraffic *bool `pulumi:"enablePolicyForUnauthenticatedTraffic"`
	// Enforce Surrogate IP authentication for Windows app traffic
	EnforceSurrogateIpForWindowsApp *bool `pulumi:"enforceSurrogateIpForWindowsApp"`
	// Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
	// organizational level
	Http2NonbrowserTrafficEnabled *bool `pulumi:"http2NonbrowserTrafficEnabled"`
	// URL categories for which HTTP range headers must be removed
	HttpRangeHeaderRemoveUrlCategories []string `pulumi:"httpRangeHeaderRemoveUrlCategories"`
	// Cloud applications that are exempted from Kerberos authentication
	KerberosBypassApps []string `pulumi:"kerberosBypassApps"`
	// URL categories that are exempted from Kerberos authentication
	KerberosBypassUrlCategories []string `pulumi:"kerberosBypassUrlCategories"`
	// Custom URLs that are exempted from Kerberos authentication
	KerberosBypassUrls []string `pulumi:"kerberosBypassUrls"`
	// Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
	LogInternalIp *bool `pulumi:"logInternalIp"`
	// Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
	// forward proxy connections
	PreferSniOverConnHost *bool `pulumi:"preferSniOverConnHost"`
	// Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
	// resolution instead of the CONNECT host for forward proxy connections)
	PreferSniOverConnHostApps []string `pulumi:"preferSniOverConnHostApps"`
	// Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
	// IP-anchored and ZIA-inspected ZPA application traffic.
	SipaXffHeaderEnabled *bool `pulumi:"sipaXffHeaderEnabled"`
	// URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
	// resolution instead of the CONNECT host for forward proxy connections)
	SniDnsOptimizationBypassUrlCategories []string `pulumi:"sniDnsOptimizationBypassUrlCategories"`
	// Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
	// 80
	TrackHttpTunnelOnHttpPorts *bool `pulumi:"trackHttpTunnelOnHttpPorts"`
	// Specifies the login session timeout for admins accessing the ZIA Admin Portal
	UiSessionTimeout *int `pulumi:"uiSessionTimeout"`
	// Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
	// Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
	ZscalerClientConnector1AndPacRoadWarriorInFirewall *bool `pulumi:"zscalerClientConnector1AndPacRoadWarriorInFirewall"`
}

// The set of arguments for constructing a AdvancedSettings resource.
type AdvancedSettingsArgs struct {
	// Cloud applications that are exempted from cookie authentication
	AuthBypassApps pulumi.StringArrayInput
	// URL categories that are exempted from cookie authentication
	AuthBypassUrlCategories pulumi.StringArrayInput
	// Custom URLs that are exempted from cookie authentication for users
	AuthBypassUrls pulumi.StringArrayInput
	// Cloud applications that are exempted from Basic authentication
	BasicBypassApps pulumi.StringArrayInput
	// URL categories that are exempted from Basic authentication
	BasicBypassUrlCategories pulumi.StringArrayInput
	// Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
	// is blocked or not
	BlockConnectHostSniMismatch pulumi.BoolPtrInput
	// Applications which are subjected to Domain Fronting
	BlockDomainFrontingApps pulumi.StringArrayInput
	// Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
	// the FQDN of the request's host header
	BlockDomainFrontingOnHostHeader pulumi.BoolPtrInput
	// Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
	// to ports other than the standard HTTP/S ports 80 and 443)
	BlockHttpTunnelOnNonHttpPorts pulumi.BoolPtrInput
	// Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
	BlockNonCompliantHttpRequestOnHttpPorts pulumi.BoolPtrInput
	// Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
	BlockNonHttpOnHttpPortEnabled pulumi.BoolPtrInput
	// Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
	// transaction explicitly
	CascadeUrlFiltering pulumi.BoolPtrInput
	// Cloud applications that are exempted from Digest authentication
	DigestAuthBypassApps pulumi.StringArrayInput
	// URL categories that are exempted from Digest authentication
	DigestAuthBypassUrlCategories pulumi.StringArrayInput
	// Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
	// authentication
	DigestAuthBypassUrls pulumi.StringArrayInput
	// Cloud applications to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyApps pulumi.StringArrayInput
	// Cloud applications that are excluded from DNS optimization on transparent proxy mode
	DnsResolutionOnTransparentProxyExemptApps          pulumi.StringArrayInput
	DnsResolutionOnTransparentProxyExemptUrlCategories pulumi.StringArrayInput
	// URLs that are excluded from DNS optimization on transparent proxy mode
	DnsResolutionOnTransparentProxyExemptUrls pulumi.StringArrayInput
	// Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
	DnsResolutionOnTransparentProxyIpv6Apps pulumi.StringArrayInput
	// Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
	DnsResolutionOnTransparentProxyIpv6ExemptApps          pulumi.StringArrayInput
	DnsResolutionOnTransparentProxyIpv6ExemptUrlCategories pulumi.StringArrayInput
	// IPv6 URL categories to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyIpv6UrlCategories pulumi.StringArrayInput
	// URL categories to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyUrlCategories pulumi.StringArrayInput
	// URLs to which DNS optimization on transparent proxy mode applies
	DnsResolutionOnTransparentProxyUrls pulumi.StringArrayInput
	// URL categories that are exempted from domain fronting
	DomainFrontingBypassUrlCategories pulumi.StringArrayInput
	// Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
	DynamicUserRiskEnabled pulumi.BoolPtrInput
	// Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
	// users.
	EcsForAllEnabled pulumi.BoolPtrInput
	// Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
	EnableAdminRankAccess pulumi.BoolPtrInput
	// Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
	// (e.g., traffic via GRE or IPSec tunnels without a PAC file).
	EnableDnsResolutionOnTransparentProxy pulumi.BoolPtrInput
	// Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
	EnableEvaluatePolicyOnGlobalSslBypass pulumi.BoolPtrInput
	// Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
	EnableIpv6DnsOptimizationOnAllTransparentProxy pulumi.BoolPtrInput
	// Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
	// destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
	// PAC file).
	EnableIpv6DnsResolutionOnTransparentProxy pulumi.BoolPtrInput
	// Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
	EnableOffice365 pulumi.BoolPtrInput
	// Value indicating whether policies that include user and department criteria can be configured and applied for
	// unauthenticated traffic
	EnablePolicyForUnauthenticatedTraffic pulumi.BoolPtrInput
	// Enforce Surrogate IP authentication for Windows app traffic
	EnforceSurrogateIpForWindowsApp pulumi.BoolPtrInput
	// Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
	// organizational level
	Http2NonbrowserTrafficEnabled pulumi.BoolPtrInput
	// URL categories for which HTTP range headers must be removed
	HttpRangeHeaderRemoveUrlCategories pulumi.StringArrayInput
	// Cloud applications that are exempted from Kerberos authentication
	KerberosBypassApps pulumi.StringArrayInput
	// URL categories that are exempted from Kerberos authentication
	KerberosBypassUrlCategories pulumi.StringArrayInput
	// Custom URLs that are exempted from Kerberos authentication
	KerberosBypassUrls pulumi.StringArrayInput
	// Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
	LogInternalIp pulumi.BoolPtrInput
	// Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
	// forward proxy connections
	PreferSniOverConnHost pulumi.BoolPtrInput
	// Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
	// resolution instead of the CONNECT host for forward proxy connections)
	PreferSniOverConnHostApps pulumi.StringArrayInput
	// Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
	// IP-anchored and ZIA-inspected ZPA application traffic.
	SipaXffHeaderEnabled pulumi.BoolPtrInput
	// URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
	// resolution instead of the CONNECT host for forward proxy connections)
	SniDnsOptimizationBypassUrlCategories pulumi.StringArrayInput
	// Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
	// 80
	TrackHttpTunnelOnHttpPorts pulumi.BoolPtrInput
	// Specifies the login session timeout for admins accessing the ZIA Admin Portal
	UiSessionTimeout pulumi.IntPtrInput
	// Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
	// Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
	ZscalerClientConnector1AndPacRoadWarriorInFirewall pulumi.BoolPtrInput
}

func (AdvancedSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*advancedSettingsArgs)(nil)).Elem()
}

type AdvancedSettingsInput interface {
	pulumi.Input

	ToAdvancedSettingsOutput() AdvancedSettingsOutput
	ToAdvancedSettingsOutputWithContext(ctx context.Context) AdvancedSettingsOutput
}

func (*AdvancedSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedSettings)(nil)).Elem()
}

func (i *AdvancedSettings) ToAdvancedSettingsOutput() AdvancedSettingsOutput {
	return i.ToAdvancedSettingsOutputWithContext(context.Background())
}

func (i *AdvancedSettings) ToAdvancedSettingsOutputWithContext(ctx context.Context) AdvancedSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedSettingsOutput)
}

// AdvancedSettingsArrayInput is an input type that accepts AdvancedSettingsArray and AdvancedSettingsArrayOutput values.
// You can construct a concrete instance of `AdvancedSettingsArrayInput` via:
//
//	AdvancedSettingsArray{ AdvancedSettingsArgs{...} }
type AdvancedSettingsArrayInput interface {
	pulumi.Input

	ToAdvancedSettingsArrayOutput() AdvancedSettingsArrayOutput
	ToAdvancedSettingsArrayOutputWithContext(context.Context) AdvancedSettingsArrayOutput
}

type AdvancedSettingsArray []AdvancedSettingsInput

func (AdvancedSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdvancedSettings)(nil)).Elem()
}

func (i AdvancedSettingsArray) ToAdvancedSettingsArrayOutput() AdvancedSettingsArrayOutput {
	return i.ToAdvancedSettingsArrayOutputWithContext(context.Background())
}

func (i AdvancedSettingsArray) ToAdvancedSettingsArrayOutputWithContext(ctx context.Context) AdvancedSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedSettingsArrayOutput)
}

// AdvancedSettingsMapInput is an input type that accepts AdvancedSettingsMap and AdvancedSettingsMapOutput values.
// You can construct a concrete instance of `AdvancedSettingsMapInput` via:
//
//	AdvancedSettingsMap{ "key": AdvancedSettingsArgs{...} }
type AdvancedSettingsMapInput interface {
	pulumi.Input

	ToAdvancedSettingsMapOutput() AdvancedSettingsMapOutput
	ToAdvancedSettingsMapOutputWithContext(context.Context) AdvancedSettingsMapOutput
}

type AdvancedSettingsMap map[string]AdvancedSettingsInput

func (AdvancedSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdvancedSettings)(nil)).Elem()
}

func (i AdvancedSettingsMap) ToAdvancedSettingsMapOutput() AdvancedSettingsMapOutput {
	return i.ToAdvancedSettingsMapOutputWithContext(context.Background())
}

func (i AdvancedSettingsMap) ToAdvancedSettingsMapOutputWithContext(ctx context.Context) AdvancedSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedSettingsMapOutput)
}

type AdvancedSettingsOutput struct{ *pulumi.OutputState }

func (AdvancedSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedSettings)(nil)).Elem()
}

func (o AdvancedSettingsOutput) ToAdvancedSettingsOutput() AdvancedSettingsOutput {
	return o
}

func (o AdvancedSettingsOutput) ToAdvancedSettingsOutputWithContext(ctx context.Context) AdvancedSettingsOutput {
	return o
}

// Cloud applications that are exempted from cookie authentication
func (o AdvancedSettingsOutput) AuthBypassApps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.AuthBypassApps }).(pulumi.StringArrayOutput)
}

// URL categories that are exempted from cookie authentication
func (o AdvancedSettingsOutput) AuthBypassUrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.AuthBypassUrlCategories }).(pulumi.StringArrayOutput)
}

// Custom URLs that are exempted from cookie authentication for users
func (o AdvancedSettingsOutput) AuthBypassUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.AuthBypassUrls }).(pulumi.StringArrayOutput)
}

// Cloud applications that are exempted from Basic authentication
func (o AdvancedSettingsOutput) BasicBypassApps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.BasicBypassApps }).(pulumi.StringArrayOutput)
}

// URL categories that are exempted from Basic authentication
func (o AdvancedSettingsOutput) BasicBypassUrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.BasicBypassUrlCategories }).(pulumi.StringArrayOutput)
}

// Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
// is blocked or not
func (o AdvancedSettingsOutput) BlockConnectHostSniMismatch() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.BlockConnectHostSniMismatch }).(pulumi.BoolOutput)
}

// Applications which are subjected to Domain Fronting
func (o AdvancedSettingsOutput) BlockDomainFrontingApps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.BlockDomainFrontingApps }).(pulumi.StringArrayOutput)
}

// Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
// the FQDN of the request's host header
func (o AdvancedSettingsOutput) BlockDomainFrontingOnHostHeader() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.BlockDomainFrontingOnHostHeader }).(pulumi.BoolOutput)
}

// Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
// to ports other than the standard HTTP/S ports 80 and 443)
func (o AdvancedSettingsOutput) BlockHttpTunnelOnNonHttpPorts() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.BlockHttpTunnelOnNonHttpPorts }).(pulumi.BoolOutput)
}

// Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
func (o AdvancedSettingsOutput) BlockNonCompliantHttpRequestOnHttpPorts() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.BlockNonCompliantHttpRequestOnHttpPorts }).(pulumi.BoolOutput)
}

// Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
func (o AdvancedSettingsOutput) BlockNonHttpOnHttpPortEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.BlockNonHttpOnHttpPortEnabled }).(pulumi.BoolOutput)
}

// Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
// transaction explicitly
func (o AdvancedSettingsOutput) CascadeUrlFiltering() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.CascadeUrlFiltering }).(pulumi.BoolOutput)
}

// Cloud applications that are exempted from Digest authentication
func (o AdvancedSettingsOutput) DigestAuthBypassApps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.DigestAuthBypassApps }).(pulumi.StringArrayOutput)
}

// URL categories that are exempted from Digest authentication
func (o AdvancedSettingsOutput) DigestAuthBypassUrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.DigestAuthBypassUrlCategories }).(pulumi.StringArrayOutput)
}

// Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
// authentication
func (o AdvancedSettingsOutput) DigestAuthBypassUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.DigestAuthBypassUrls }).(pulumi.StringArrayOutput)
}

// Cloud applications to which DNS optimization on transparent proxy mode applies
func (o AdvancedSettingsOutput) DnsResolutionOnTransparentProxyApps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.DnsResolutionOnTransparentProxyApps }).(pulumi.StringArrayOutput)
}

// Cloud applications that are excluded from DNS optimization on transparent proxy mode
func (o AdvancedSettingsOutput) DnsResolutionOnTransparentProxyExemptApps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.DnsResolutionOnTransparentProxyExemptApps }).(pulumi.StringArrayOutput)
}

func (o AdvancedSettingsOutput) DnsResolutionOnTransparentProxyExemptUrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput {
		return v.DnsResolutionOnTransparentProxyExemptUrlCategories
	}).(pulumi.StringArrayOutput)
}

// URLs that are excluded from DNS optimization on transparent proxy mode
func (o AdvancedSettingsOutput) DnsResolutionOnTransparentProxyExemptUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.DnsResolutionOnTransparentProxyExemptUrls }).(pulumi.StringArrayOutput)
}

// Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
func (o AdvancedSettingsOutput) DnsResolutionOnTransparentProxyIpv6Apps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.DnsResolutionOnTransparentProxyIpv6Apps }).(pulumi.StringArrayOutput)
}

// Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
func (o AdvancedSettingsOutput) DnsResolutionOnTransparentProxyIpv6ExemptApps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput {
		return v.DnsResolutionOnTransparentProxyIpv6ExemptApps
	}).(pulumi.StringArrayOutput)
}

func (o AdvancedSettingsOutput) DnsResolutionOnTransparentProxyIpv6ExemptUrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput {
		return v.DnsResolutionOnTransparentProxyIpv6ExemptUrlCategories
	}).(pulumi.StringArrayOutput)
}

// IPv6 URL categories to which DNS optimization on transparent proxy mode applies
func (o AdvancedSettingsOutput) DnsResolutionOnTransparentProxyIpv6UrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput {
		return v.DnsResolutionOnTransparentProxyIpv6UrlCategories
	}).(pulumi.StringArrayOutput)
}

// URL categories to which DNS optimization on transparent proxy mode applies
func (o AdvancedSettingsOutput) DnsResolutionOnTransparentProxyUrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput {
		return v.DnsResolutionOnTransparentProxyUrlCategories
	}).(pulumi.StringArrayOutput)
}

// URLs to which DNS optimization on transparent proxy mode applies
func (o AdvancedSettingsOutput) DnsResolutionOnTransparentProxyUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.DnsResolutionOnTransparentProxyUrls }).(pulumi.StringArrayOutput)
}

// URL categories that are exempted from domain fronting
func (o AdvancedSettingsOutput) DomainFrontingBypassUrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.DomainFrontingBypassUrlCategories }).(pulumi.StringArrayOutput)
}

// Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
func (o AdvancedSettingsOutput) DynamicUserRiskEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.DynamicUserRiskEnabled }).(pulumi.BoolOutput)
}

// Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
// users.
func (o AdvancedSettingsOutput) EcsForAllEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.EcsForAllEnabled }).(pulumi.BoolOutput)
}

// Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
func (o AdvancedSettingsOutput) EnableAdminRankAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.EnableAdminRankAccess }).(pulumi.BoolOutput)
}

// Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
// (e.g., traffic via GRE or IPSec tunnels without a PAC file).
func (o AdvancedSettingsOutput) EnableDnsResolutionOnTransparentProxy() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.EnableDnsResolutionOnTransparentProxy }).(pulumi.BoolOutput)
}

// Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
func (o AdvancedSettingsOutput) EnableEvaluatePolicyOnGlobalSslBypass() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.EnableEvaluatePolicyOnGlobalSslBypass }).(pulumi.BoolOutput)
}

// Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
func (o AdvancedSettingsOutput) EnableIpv6DnsOptimizationOnAllTransparentProxy() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.EnableIpv6DnsOptimizationOnAllTransparentProxy }).(pulumi.BoolOutput)
}

// Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
// destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
// PAC file).
func (o AdvancedSettingsOutput) EnableIpv6DnsResolutionOnTransparentProxy() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.EnableIpv6DnsResolutionOnTransparentProxy }).(pulumi.BoolOutput)
}

// Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
func (o AdvancedSettingsOutput) EnableOffice365() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.EnableOffice365 }).(pulumi.BoolOutput)
}

// Value indicating whether policies that include user and department criteria can be configured and applied for
// unauthenticated traffic
func (o AdvancedSettingsOutput) EnablePolicyForUnauthenticatedTraffic() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.EnablePolicyForUnauthenticatedTraffic }).(pulumi.BoolOutput)
}

// Enforce Surrogate IP authentication for Windows app traffic
func (o AdvancedSettingsOutput) EnforceSurrogateIpForWindowsApp() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.EnforceSurrogateIpForWindowsApp }).(pulumi.BoolOutput)
}

// Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
// organizational level
func (o AdvancedSettingsOutput) Http2NonbrowserTrafficEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.Http2NonbrowserTrafficEnabled }).(pulumi.BoolOutput)
}

// URL categories for which HTTP range headers must be removed
func (o AdvancedSettingsOutput) HttpRangeHeaderRemoveUrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.HttpRangeHeaderRemoveUrlCategories }).(pulumi.StringArrayOutput)
}

// Cloud applications that are exempted from Kerberos authentication
func (o AdvancedSettingsOutput) KerberosBypassApps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.KerberosBypassApps }).(pulumi.StringArrayOutput)
}

// URL categories that are exempted from Kerberos authentication
func (o AdvancedSettingsOutput) KerberosBypassUrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.KerberosBypassUrlCategories }).(pulumi.StringArrayOutput)
}

// Custom URLs that are exempted from Kerberos authentication
func (o AdvancedSettingsOutput) KerberosBypassUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.KerberosBypassUrls }).(pulumi.StringArrayOutput)
}

// Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
func (o AdvancedSettingsOutput) LogInternalIp() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.LogInternalIp }).(pulumi.BoolOutput)
}

// Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
// forward proxy connections
func (o AdvancedSettingsOutput) PreferSniOverConnHost() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.PreferSniOverConnHost }).(pulumi.BoolOutput)
}

// Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
// resolution instead of the CONNECT host for forward proxy connections)
func (o AdvancedSettingsOutput) PreferSniOverConnHostApps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.PreferSniOverConnHostApps }).(pulumi.StringArrayOutput)
}

// Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
// IP-anchored and ZIA-inspected ZPA application traffic.
func (o AdvancedSettingsOutput) SipaXffHeaderEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.SipaXffHeaderEnabled }).(pulumi.BoolOutput)
}

// URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
// resolution instead of the CONNECT host for forward proxy connections)
func (o AdvancedSettingsOutput) SniDnsOptimizationBypassUrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.StringArrayOutput { return v.SniDnsOptimizationBypassUrlCategories }).(pulumi.StringArrayOutput)
}

// Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
// 80
func (o AdvancedSettingsOutput) TrackHttpTunnelOnHttpPorts() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput { return v.TrackHttpTunnelOnHttpPorts }).(pulumi.BoolOutput)
}

// Specifies the login session timeout for admins accessing the ZIA Admin Portal
func (o AdvancedSettingsOutput) UiSessionTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.IntOutput { return v.UiSessionTimeout }).(pulumi.IntOutput)
}

// Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
// Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
func (o AdvancedSettingsOutput) ZscalerClientConnector1AndPacRoadWarriorInFirewall() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedSettings) pulumi.BoolOutput {
		return v.ZscalerClientConnector1AndPacRoadWarriorInFirewall
	}).(pulumi.BoolOutput)
}

type AdvancedSettingsArrayOutput struct{ *pulumi.OutputState }

func (AdvancedSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdvancedSettings)(nil)).Elem()
}

func (o AdvancedSettingsArrayOutput) ToAdvancedSettingsArrayOutput() AdvancedSettingsArrayOutput {
	return o
}

func (o AdvancedSettingsArrayOutput) ToAdvancedSettingsArrayOutputWithContext(ctx context.Context) AdvancedSettingsArrayOutput {
	return o
}

func (o AdvancedSettingsArrayOutput) Index(i pulumi.IntInput) AdvancedSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AdvancedSettings {
		return vs[0].([]*AdvancedSettings)[vs[1].(int)]
	}).(AdvancedSettingsOutput)
}

type AdvancedSettingsMapOutput struct{ *pulumi.OutputState }

func (AdvancedSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdvancedSettings)(nil)).Elem()
}

func (o AdvancedSettingsMapOutput) ToAdvancedSettingsMapOutput() AdvancedSettingsMapOutput {
	return o
}

func (o AdvancedSettingsMapOutput) ToAdvancedSettingsMapOutputWithContext(ctx context.Context) AdvancedSettingsMapOutput {
	return o
}

func (o AdvancedSettingsMapOutput) MapIndex(k pulumi.StringInput) AdvancedSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AdvancedSettings {
		return vs[0].(map[string]*AdvancedSettings)[vs[1].(string)]
	}).(AdvancedSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedSettingsInput)(nil)).Elem(), &AdvancedSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedSettingsArrayInput)(nil)).Elem(), AdvancedSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedSettingsMapInput)(nil)).Elem(), AdvancedSettingsMap{})
	pulumi.RegisterOutputType(AdvancedSettingsOutput{})
	pulumi.RegisterOutputType(AdvancedSettingsArrayOutput{})
	pulumi.RegisterOutputType(AdvancedSettingsMapOutput{})
}
