// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/about-virtual-service-edge-clusters)
// * [API documentation](https://help.zscaler.com/zia/service-edges#/virtualZenClusters-get)
//
// Use the **zia_virtual_service_edge_cluster** resource allows the creation and management of Service Edge Cluster objects in the Zscaler Internet Access.
//
// ## Example Usage
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_virtual_service_edge_cluster** can be imported by using `<CLUSTER_ID>` or `<CLUSTER_NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/virtualServiceEdgeCluster:VirtualServiceEdgeCluster example <cluster_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zia:index/virtualServiceEdgeCluster:VirtualServiceEdgeCluster example <cluster_name>
// ```
type VirtualServiceEdgeCluster struct {
	pulumi.CustomResourceState

	ClusterId pulumi.IntOutput `pulumi:"clusterId"`
	// (String) The IP address of the default gateway to the internet
	DefaultGateway pulumi.StringPtrOutput `pulumi:"defaultGateway"`
	// (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
	IpAddress pulumi.StringPtrOutput `pulumi:"ipAddress"`
	// (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
	IpSecEnabled pulumi.BoolPtrOutput `pulumi:"ipSecEnabled"`
	// Name of the Virtual Service Edge cluster
	Name pulumi.StringOutput `pulumi:"name"`
	// (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
	Status pulumi.StringPtrOutput `pulumi:"status"`
	// (String) The Virtual Service Edge cluster subnet mask
	SubnetMask pulumi.StringPtrOutput `pulumi:"subnetMask"`
	// (String) The Virtual Service Edge cluster type
	// `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
	// `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
	// `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
	// `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`, `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,`SMBAM`, `ZWACLT`
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
	VirtualZenNodes VirtualServiceEdgeClusterVirtualZenNodesPtrOutput `pulumi:"virtualZenNodes"`
}

// NewVirtualServiceEdgeCluster registers a new resource with the given unique name, arguments, and options.
func NewVirtualServiceEdgeCluster(ctx *pulumi.Context,
	name string, args *VirtualServiceEdgeClusterArgs, opts ...pulumi.ResourceOption) (*VirtualServiceEdgeCluster, error) {
	if args == nil {
		args = &VirtualServiceEdgeClusterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VirtualServiceEdgeCluster
	err := ctx.RegisterResource("zia:index/virtualServiceEdgeCluster:VirtualServiceEdgeCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualServiceEdgeCluster gets an existing VirtualServiceEdgeCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualServiceEdgeCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualServiceEdgeClusterState, opts ...pulumi.ResourceOption) (*VirtualServiceEdgeCluster, error) {
	var resource VirtualServiceEdgeCluster
	err := ctx.ReadResource("zia:index/virtualServiceEdgeCluster:VirtualServiceEdgeCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualServiceEdgeCluster resources.
type virtualServiceEdgeClusterState struct {
	ClusterId *int `pulumi:"clusterId"`
	// (String) The IP address of the default gateway to the internet
	DefaultGateway *string `pulumi:"defaultGateway"`
	// (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
	IpAddress *string `pulumi:"ipAddress"`
	// (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
	IpSecEnabled *bool `pulumi:"ipSecEnabled"`
	// Name of the Virtual Service Edge cluster
	Name *string `pulumi:"name"`
	// (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
	Status *string `pulumi:"status"`
	// (String) The Virtual Service Edge cluster subnet mask
	SubnetMask *string `pulumi:"subnetMask"`
	// (String) The Virtual Service Edge cluster type
	// `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
	// `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
	// `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
	// `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`, `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,`SMBAM`, `ZWACLT`
	Type *string `pulumi:"type"`
	// (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
	VirtualZenNodes *VirtualServiceEdgeClusterVirtualZenNodes `pulumi:"virtualZenNodes"`
}

type VirtualServiceEdgeClusterState struct {
	ClusterId pulumi.IntPtrInput
	// (String) The IP address of the default gateway to the internet
	DefaultGateway pulumi.StringPtrInput
	// (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
	IpAddress pulumi.StringPtrInput
	// (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
	IpSecEnabled pulumi.BoolPtrInput
	// Name of the Virtual Service Edge cluster
	Name pulumi.StringPtrInput
	// (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
	Status pulumi.StringPtrInput
	// (String) The Virtual Service Edge cluster subnet mask
	SubnetMask pulumi.StringPtrInput
	// (String) The Virtual Service Edge cluster type
	// `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
	// `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
	// `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
	// `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`, `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,`SMBAM`, `ZWACLT`
	Type pulumi.StringPtrInput
	// (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
	VirtualZenNodes VirtualServiceEdgeClusterVirtualZenNodesPtrInput
}

func (VirtualServiceEdgeClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualServiceEdgeClusterState)(nil)).Elem()
}

type virtualServiceEdgeClusterArgs struct {
	// (String) The IP address of the default gateway to the internet
	DefaultGateway *string `pulumi:"defaultGateway"`
	// (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
	IpAddress *string `pulumi:"ipAddress"`
	// (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
	IpSecEnabled *bool `pulumi:"ipSecEnabled"`
	// Name of the Virtual Service Edge cluster
	Name *string `pulumi:"name"`
	// (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
	Status *string `pulumi:"status"`
	// (String) The Virtual Service Edge cluster subnet mask
	SubnetMask *string `pulumi:"subnetMask"`
	// (String) The Virtual Service Edge cluster type
	// `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
	// `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
	// `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
	// `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`, `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,`SMBAM`, `ZWACLT`
	Type *string `pulumi:"type"`
	// (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
	VirtualZenNodes *VirtualServiceEdgeClusterVirtualZenNodes `pulumi:"virtualZenNodes"`
}

// The set of arguments for constructing a VirtualServiceEdgeCluster resource.
type VirtualServiceEdgeClusterArgs struct {
	// (String) The IP address of the default gateway to the internet
	DefaultGateway pulumi.StringPtrInput
	// (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
	IpAddress pulumi.StringPtrInput
	// (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
	IpSecEnabled pulumi.BoolPtrInput
	// Name of the Virtual Service Edge cluster
	Name pulumi.StringPtrInput
	// (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
	Status pulumi.StringPtrInput
	// (String) The Virtual Service Edge cluster subnet mask
	SubnetMask pulumi.StringPtrInput
	// (String) The Virtual Service Edge cluster type
	// `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
	// `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
	// `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
	// `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`, `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,`SMBAM`, `ZWACLT`
	Type pulumi.StringPtrInput
	// (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
	VirtualZenNodes VirtualServiceEdgeClusterVirtualZenNodesPtrInput
}

func (VirtualServiceEdgeClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualServiceEdgeClusterArgs)(nil)).Elem()
}

type VirtualServiceEdgeClusterInput interface {
	pulumi.Input

	ToVirtualServiceEdgeClusterOutput() VirtualServiceEdgeClusterOutput
	ToVirtualServiceEdgeClusterOutputWithContext(ctx context.Context) VirtualServiceEdgeClusterOutput
}

func (*VirtualServiceEdgeCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceEdgeCluster)(nil)).Elem()
}

func (i *VirtualServiceEdgeCluster) ToVirtualServiceEdgeClusterOutput() VirtualServiceEdgeClusterOutput {
	return i.ToVirtualServiceEdgeClusterOutputWithContext(context.Background())
}

func (i *VirtualServiceEdgeCluster) ToVirtualServiceEdgeClusterOutputWithContext(ctx context.Context) VirtualServiceEdgeClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceEdgeClusterOutput)
}

// VirtualServiceEdgeClusterArrayInput is an input type that accepts VirtualServiceEdgeClusterArray and VirtualServiceEdgeClusterArrayOutput values.
// You can construct a concrete instance of `VirtualServiceEdgeClusterArrayInput` via:
//
//	VirtualServiceEdgeClusterArray{ VirtualServiceEdgeClusterArgs{...} }
type VirtualServiceEdgeClusterArrayInput interface {
	pulumi.Input

	ToVirtualServiceEdgeClusterArrayOutput() VirtualServiceEdgeClusterArrayOutput
	ToVirtualServiceEdgeClusterArrayOutputWithContext(context.Context) VirtualServiceEdgeClusterArrayOutput
}

type VirtualServiceEdgeClusterArray []VirtualServiceEdgeClusterInput

func (VirtualServiceEdgeClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualServiceEdgeCluster)(nil)).Elem()
}

func (i VirtualServiceEdgeClusterArray) ToVirtualServiceEdgeClusterArrayOutput() VirtualServiceEdgeClusterArrayOutput {
	return i.ToVirtualServiceEdgeClusterArrayOutputWithContext(context.Background())
}

func (i VirtualServiceEdgeClusterArray) ToVirtualServiceEdgeClusterArrayOutputWithContext(ctx context.Context) VirtualServiceEdgeClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceEdgeClusterArrayOutput)
}

// VirtualServiceEdgeClusterMapInput is an input type that accepts VirtualServiceEdgeClusterMap and VirtualServiceEdgeClusterMapOutput values.
// You can construct a concrete instance of `VirtualServiceEdgeClusterMapInput` via:
//
//	VirtualServiceEdgeClusterMap{ "key": VirtualServiceEdgeClusterArgs{...} }
type VirtualServiceEdgeClusterMapInput interface {
	pulumi.Input

	ToVirtualServiceEdgeClusterMapOutput() VirtualServiceEdgeClusterMapOutput
	ToVirtualServiceEdgeClusterMapOutputWithContext(context.Context) VirtualServiceEdgeClusterMapOutput
}

type VirtualServiceEdgeClusterMap map[string]VirtualServiceEdgeClusterInput

func (VirtualServiceEdgeClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualServiceEdgeCluster)(nil)).Elem()
}

func (i VirtualServiceEdgeClusterMap) ToVirtualServiceEdgeClusterMapOutput() VirtualServiceEdgeClusterMapOutput {
	return i.ToVirtualServiceEdgeClusterMapOutputWithContext(context.Background())
}

func (i VirtualServiceEdgeClusterMap) ToVirtualServiceEdgeClusterMapOutputWithContext(ctx context.Context) VirtualServiceEdgeClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualServiceEdgeClusterMapOutput)
}

type VirtualServiceEdgeClusterOutput struct{ *pulumi.OutputState }

func (VirtualServiceEdgeClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualServiceEdgeCluster)(nil)).Elem()
}

func (o VirtualServiceEdgeClusterOutput) ToVirtualServiceEdgeClusterOutput() VirtualServiceEdgeClusterOutput {
	return o
}

func (o VirtualServiceEdgeClusterOutput) ToVirtualServiceEdgeClusterOutputWithContext(ctx context.Context) VirtualServiceEdgeClusterOutput {
	return o
}

func (o VirtualServiceEdgeClusterOutput) ClusterId() pulumi.IntOutput {
	return o.ApplyT(func(v *VirtualServiceEdgeCluster) pulumi.IntOutput { return v.ClusterId }).(pulumi.IntOutput)
}

// (String) The IP address of the default gateway to the internet
func (o VirtualServiceEdgeClusterOutput) DefaultGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceEdgeCluster) pulumi.StringPtrOutput { return v.DefaultGateway }).(pulumi.StringPtrOutput)
}

// (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
func (o VirtualServiceEdgeClusterOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceEdgeCluster) pulumi.StringPtrOutput { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
func (o VirtualServiceEdgeClusterOutput) IpSecEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *VirtualServiceEdgeCluster) pulumi.BoolPtrOutput { return v.IpSecEnabled }).(pulumi.BoolPtrOutput)
}

// Name of the Virtual Service Edge cluster
func (o VirtualServiceEdgeClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VirtualServiceEdgeCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
func (o VirtualServiceEdgeClusterOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceEdgeCluster) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

// (String) The Virtual Service Edge cluster subnet mask
func (o VirtualServiceEdgeClusterOutput) SubnetMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceEdgeCluster) pulumi.StringPtrOutput { return v.SubnetMask }).(pulumi.StringPtrOutput)
}

// (String) The Virtual Service Edge cluster type
// `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
// `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
// `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
// `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`, `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,`SMBAM`, `ZWACLT`
func (o VirtualServiceEdgeClusterOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VirtualServiceEdgeCluster) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
func (o VirtualServiceEdgeClusterOutput) VirtualZenNodes() VirtualServiceEdgeClusterVirtualZenNodesPtrOutput {
	return o.ApplyT(func(v *VirtualServiceEdgeCluster) VirtualServiceEdgeClusterVirtualZenNodesPtrOutput {
		return v.VirtualZenNodes
	}).(VirtualServiceEdgeClusterVirtualZenNodesPtrOutput)
}

type VirtualServiceEdgeClusterArrayOutput struct{ *pulumi.OutputState }

func (VirtualServiceEdgeClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualServiceEdgeCluster)(nil)).Elem()
}

func (o VirtualServiceEdgeClusterArrayOutput) ToVirtualServiceEdgeClusterArrayOutput() VirtualServiceEdgeClusterArrayOutput {
	return o
}

func (o VirtualServiceEdgeClusterArrayOutput) ToVirtualServiceEdgeClusterArrayOutputWithContext(ctx context.Context) VirtualServiceEdgeClusterArrayOutput {
	return o
}

func (o VirtualServiceEdgeClusterArrayOutput) Index(i pulumi.IntInput) VirtualServiceEdgeClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VirtualServiceEdgeCluster {
		return vs[0].([]*VirtualServiceEdgeCluster)[vs[1].(int)]
	}).(VirtualServiceEdgeClusterOutput)
}

type VirtualServiceEdgeClusterMapOutput struct{ *pulumi.OutputState }

func (VirtualServiceEdgeClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualServiceEdgeCluster)(nil)).Elem()
}

func (o VirtualServiceEdgeClusterMapOutput) ToVirtualServiceEdgeClusterMapOutput() VirtualServiceEdgeClusterMapOutput {
	return o
}

func (o VirtualServiceEdgeClusterMapOutput) ToVirtualServiceEdgeClusterMapOutputWithContext(ctx context.Context) VirtualServiceEdgeClusterMapOutput {
	return o
}

func (o VirtualServiceEdgeClusterMapOutput) MapIndex(k pulumi.StringInput) VirtualServiceEdgeClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VirtualServiceEdgeCluster {
		return vs[0].(map[string]*VirtualServiceEdgeCluster)[vs[1].(string)]
	}).(VirtualServiceEdgeClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceEdgeClusterInput)(nil)).Elem(), &VirtualServiceEdgeCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceEdgeClusterArrayInput)(nil)).Elem(), VirtualServiceEdgeClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VirtualServiceEdgeClusterMapInput)(nil)).Elem(), VirtualServiceEdgeClusterMap{})
	pulumi.RegisterOutputType(VirtualServiceEdgeClusterOutput{})
	pulumi.RegisterOutputType(VirtualServiceEdgeClusterArrayOutput{})
	pulumi.RegisterOutputType(VirtualServiceEdgeClusterMapOutput{})
}
