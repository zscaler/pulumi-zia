// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/about-role-management)
// * [API documentation](https://help.zscaler.com/zia/admin-role-management#/adminRoles-get)
//
// The **zia_admin_roles** resource allows the creation and management of admin roles in the Zscaler Internet Access cloud or via the API.
//
// ## Example Usage
//
// ### Create Admin Role
//
// ### Create Admin SDWAN Role
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_rule_labels** can be imported by using `<LABEL_ID>` or `<LABEL_NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/adminRoles:AdminRoles example <label_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zia:index/adminRoles:AdminRoles example <label_name>
// ```
type AdminRoles struct {
	pulumi.CustomResourceState

	// Admin and role management access permission.
	AdminAcctAccess pulumi.StringOutput `pulumi:"adminAcctAccess"`
	// Alerting access permission
	AlertingAccess pulumi.StringOutput `pulumi:"alertingAccess"`
	// Insights logs access permission.
	AnalysisAccess pulumi.StringOutput `pulumi:"analysisAccess"`
	// Dashboard access permission.
	DashboardAccess pulumi.StringOutput `pulumi:"dashboardAccess"`
	// Device information access permission. When set to NONE, device information is obfuscated.
	DeviceInfoAccess pulumi.StringOutput `pulumi:"deviceInfoAccess"`
	// External feature access permission.
	ExtFeaturePermissions pulumi.StringMapOutput `pulumi:"extFeaturePermissions"`
	// Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
	// access, or read-only access.
	FeaturePermissions pulumi.StringMapOutput `pulumi:"featurePermissions"`
	// Indicates whether this is an auditor role.
	IsAuditor pulumi.BoolPtrOutput `pulumi:"isAuditor"`
	// Indicates whether or not this admin user is editable/deletable.
	IsNonEditable pulumi.BoolPtrOutput `pulumi:"isNonEditable"`
	// Log range limit.
	LogsLimit pulumi.StringPtrOutput `pulumi:"logsLimit"`
	// The Name of the admin role
	Name pulumi.StringOutput `pulumi:"name"`
	// Request method for which the rule must be applied. If not set, rule will be applied to all methods
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
	// Policy access permission.
	PolicyAccess pulumi.StringOutput `pulumi:"policyAccess"`
	// Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
	// value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
	// which rule orders this admin can access.
	Rank pulumi.IntPtrOutput `pulumi:"rank"`
	// Report access permission.
	ReportAccess pulumi.StringOutput `pulumi:"reportAccess"`
	// Time duration allocated to the report dashboard.
	ReportTimeDuration pulumi.IntOutput `pulumi:"reportTimeDuration"`
	RoleId             pulumi.IntOutput `pulumi:"roleId"`
	// The admin role type. ()This attribute is subject to change.)
	RoleType pulumi.StringPtrOutput `pulumi:"roleType"`
	// Username access permission. When set to NONE, the username will be obfuscated.
	UsernameAccess pulumi.StringOutput `pulumi:"usernameAccess"`
}

// NewAdminRoles registers a new resource with the given unique name, arguments, and options.
func NewAdminRoles(ctx *pulumi.Context,
	name string, args *AdminRolesArgs, opts ...pulumi.ResourceOption) (*AdminRoles, error) {
	if args == nil {
		args = &AdminRolesArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AdminRoles
	err := ctx.RegisterResource("zia:index/adminRoles:AdminRoles", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdminRoles gets an existing AdminRoles resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdminRoles(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdminRolesState, opts ...pulumi.ResourceOption) (*AdminRoles, error) {
	var resource AdminRoles
	err := ctx.ReadResource("zia:index/adminRoles:AdminRoles", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdminRoles resources.
type adminRolesState struct {
	// Admin and role management access permission.
	AdminAcctAccess *string `pulumi:"adminAcctAccess"`
	// Alerting access permission
	AlertingAccess *string `pulumi:"alertingAccess"`
	// Insights logs access permission.
	AnalysisAccess *string `pulumi:"analysisAccess"`
	// Dashboard access permission.
	DashboardAccess *string `pulumi:"dashboardAccess"`
	// Device information access permission. When set to NONE, device information is obfuscated.
	DeviceInfoAccess *string `pulumi:"deviceInfoAccess"`
	// External feature access permission.
	ExtFeaturePermissions map[string]string `pulumi:"extFeaturePermissions"`
	// Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
	// access, or read-only access.
	FeaturePermissions map[string]string `pulumi:"featurePermissions"`
	// Indicates whether this is an auditor role.
	IsAuditor *bool `pulumi:"isAuditor"`
	// Indicates whether or not this admin user is editable/deletable.
	IsNonEditable *bool `pulumi:"isNonEditable"`
	// Log range limit.
	LogsLimit *string `pulumi:"logsLimit"`
	// The Name of the admin role
	Name *string `pulumi:"name"`
	// Request method for which the rule must be applied. If not set, rule will be applied to all methods
	Permissions []string `pulumi:"permissions"`
	// Policy access permission.
	PolicyAccess *string `pulumi:"policyAccess"`
	// Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
	// value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
	// which rule orders this admin can access.
	Rank *int `pulumi:"rank"`
	// Report access permission.
	ReportAccess *string `pulumi:"reportAccess"`
	// Time duration allocated to the report dashboard.
	ReportTimeDuration *int `pulumi:"reportTimeDuration"`
	RoleId             *int `pulumi:"roleId"`
	// The admin role type. ()This attribute is subject to change.)
	RoleType *string `pulumi:"roleType"`
	// Username access permission. When set to NONE, the username will be obfuscated.
	UsernameAccess *string `pulumi:"usernameAccess"`
}

type AdminRolesState struct {
	// Admin and role management access permission.
	AdminAcctAccess pulumi.StringPtrInput
	// Alerting access permission
	AlertingAccess pulumi.StringPtrInput
	// Insights logs access permission.
	AnalysisAccess pulumi.StringPtrInput
	// Dashboard access permission.
	DashboardAccess pulumi.StringPtrInput
	// Device information access permission. When set to NONE, device information is obfuscated.
	DeviceInfoAccess pulumi.StringPtrInput
	// External feature access permission.
	ExtFeaturePermissions pulumi.StringMapInput
	// Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
	// access, or read-only access.
	FeaturePermissions pulumi.StringMapInput
	// Indicates whether this is an auditor role.
	IsAuditor pulumi.BoolPtrInput
	// Indicates whether or not this admin user is editable/deletable.
	IsNonEditable pulumi.BoolPtrInput
	// Log range limit.
	LogsLimit pulumi.StringPtrInput
	// The Name of the admin role
	Name pulumi.StringPtrInput
	// Request method for which the rule must be applied. If not set, rule will be applied to all methods
	Permissions pulumi.StringArrayInput
	// Policy access permission.
	PolicyAccess pulumi.StringPtrInput
	// Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
	// value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
	// which rule orders this admin can access.
	Rank pulumi.IntPtrInput
	// Report access permission.
	ReportAccess pulumi.StringPtrInput
	// Time duration allocated to the report dashboard.
	ReportTimeDuration pulumi.IntPtrInput
	RoleId             pulumi.IntPtrInput
	// The admin role type. ()This attribute is subject to change.)
	RoleType pulumi.StringPtrInput
	// Username access permission. When set to NONE, the username will be obfuscated.
	UsernameAccess pulumi.StringPtrInput
}

func (AdminRolesState) ElementType() reflect.Type {
	return reflect.TypeOf((*adminRolesState)(nil)).Elem()
}

type adminRolesArgs struct {
	// Admin and role management access permission.
	AdminAcctAccess *string `pulumi:"adminAcctAccess"`
	// Alerting access permission
	AlertingAccess *string `pulumi:"alertingAccess"`
	// Insights logs access permission.
	AnalysisAccess *string `pulumi:"analysisAccess"`
	// Dashboard access permission.
	DashboardAccess *string `pulumi:"dashboardAccess"`
	// Device information access permission. When set to NONE, device information is obfuscated.
	DeviceInfoAccess *string `pulumi:"deviceInfoAccess"`
	// External feature access permission.
	ExtFeaturePermissions map[string]string `pulumi:"extFeaturePermissions"`
	// Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
	// access, or read-only access.
	FeaturePermissions map[string]string `pulumi:"featurePermissions"`
	// Indicates whether this is an auditor role.
	IsAuditor *bool `pulumi:"isAuditor"`
	// Indicates whether or not this admin user is editable/deletable.
	IsNonEditable *bool `pulumi:"isNonEditable"`
	// Log range limit.
	LogsLimit *string `pulumi:"logsLimit"`
	// The Name of the admin role
	Name *string `pulumi:"name"`
	// Request method for which the rule must be applied. If not set, rule will be applied to all methods
	Permissions []string `pulumi:"permissions"`
	// Policy access permission.
	PolicyAccess *string `pulumi:"policyAccess"`
	// Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
	// value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
	// which rule orders this admin can access.
	Rank *int `pulumi:"rank"`
	// Report access permission.
	ReportAccess *string `pulumi:"reportAccess"`
	// Time duration allocated to the report dashboard.
	ReportTimeDuration *int `pulumi:"reportTimeDuration"`
	// The admin role type. ()This attribute is subject to change.)
	RoleType *string `pulumi:"roleType"`
	// Username access permission. When set to NONE, the username will be obfuscated.
	UsernameAccess *string `pulumi:"usernameAccess"`
}

// The set of arguments for constructing a AdminRoles resource.
type AdminRolesArgs struct {
	// Admin and role management access permission.
	AdminAcctAccess pulumi.StringPtrInput
	// Alerting access permission
	AlertingAccess pulumi.StringPtrInput
	// Insights logs access permission.
	AnalysisAccess pulumi.StringPtrInput
	// Dashboard access permission.
	DashboardAccess pulumi.StringPtrInput
	// Device information access permission. When set to NONE, device information is obfuscated.
	DeviceInfoAccess pulumi.StringPtrInput
	// External feature access permission.
	ExtFeaturePermissions pulumi.StringMapInput
	// Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
	// access, or read-only access.
	FeaturePermissions pulumi.StringMapInput
	// Indicates whether this is an auditor role.
	IsAuditor pulumi.BoolPtrInput
	// Indicates whether or not this admin user is editable/deletable.
	IsNonEditable pulumi.BoolPtrInput
	// Log range limit.
	LogsLimit pulumi.StringPtrInput
	// The Name of the admin role
	Name pulumi.StringPtrInput
	// Request method for which the rule must be applied. If not set, rule will be applied to all methods
	Permissions pulumi.StringArrayInput
	// Policy access permission.
	PolicyAccess pulumi.StringPtrInput
	// Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
	// value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
	// which rule orders this admin can access.
	Rank pulumi.IntPtrInput
	// Report access permission.
	ReportAccess pulumi.StringPtrInput
	// Time duration allocated to the report dashboard.
	ReportTimeDuration pulumi.IntPtrInput
	// The admin role type. ()This attribute is subject to change.)
	RoleType pulumi.StringPtrInput
	// Username access permission. When set to NONE, the username will be obfuscated.
	UsernameAccess pulumi.StringPtrInput
}

func (AdminRolesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*adminRolesArgs)(nil)).Elem()
}

type AdminRolesInput interface {
	pulumi.Input

	ToAdminRolesOutput() AdminRolesOutput
	ToAdminRolesOutputWithContext(ctx context.Context) AdminRolesOutput
}

func (*AdminRoles) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminRoles)(nil)).Elem()
}

func (i *AdminRoles) ToAdminRolesOutput() AdminRolesOutput {
	return i.ToAdminRolesOutputWithContext(context.Background())
}

func (i *AdminRoles) ToAdminRolesOutputWithContext(ctx context.Context) AdminRolesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminRolesOutput)
}

// AdminRolesArrayInput is an input type that accepts AdminRolesArray and AdminRolesArrayOutput values.
// You can construct a concrete instance of `AdminRolesArrayInput` via:
//
//	AdminRolesArray{ AdminRolesArgs{...} }
type AdminRolesArrayInput interface {
	pulumi.Input

	ToAdminRolesArrayOutput() AdminRolesArrayOutput
	ToAdminRolesArrayOutputWithContext(context.Context) AdminRolesArrayOutput
}

type AdminRolesArray []AdminRolesInput

func (AdminRolesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminRoles)(nil)).Elem()
}

func (i AdminRolesArray) ToAdminRolesArrayOutput() AdminRolesArrayOutput {
	return i.ToAdminRolesArrayOutputWithContext(context.Background())
}

func (i AdminRolesArray) ToAdminRolesArrayOutputWithContext(ctx context.Context) AdminRolesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminRolesArrayOutput)
}

// AdminRolesMapInput is an input type that accepts AdminRolesMap and AdminRolesMapOutput values.
// You can construct a concrete instance of `AdminRolesMapInput` via:
//
//	AdminRolesMap{ "key": AdminRolesArgs{...} }
type AdminRolesMapInput interface {
	pulumi.Input

	ToAdminRolesMapOutput() AdminRolesMapOutput
	ToAdminRolesMapOutputWithContext(context.Context) AdminRolesMapOutput
}

type AdminRolesMap map[string]AdminRolesInput

func (AdminRolesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminRoles)(nil)).Elem()
}

func (i AdminRolesMap) ToAdminRolesMapOutput() AdminRolesMapOutput {
	return i.ToAdminRolesMapOutputWithContext(context.Background())
}

func (i AdminRolesMap) ToAdminRolesMapOutputWithContext(ctx context.Context) AdminRolesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdminRolesMapOutput)
}

type AdminRolesOutput struct{ *pulumi.OutputState }

func (AdminRolesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdminRoles)(nil)).Elem()
}

func (o AdminRolesOutput) ToAdminRolesOutput() AdminRolesOutput {
	return o
}

func (o AdminRolesOutput) ToAdminRolesOutputWithContext(ctx context.Context) AdminRolesOutput {
	return o
}

// Admin and role management access permission.
func (o AdminRolesOutput) AdminAcctAccess() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.StringOutput { return v.AdminAcctAccess }).(pulumi.StringOutput)
}

// Alerting access permission
func (o AdminRolesOutput) AlertingAccess() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.StringOutput { return v.AlertingAccess }).(pulumi.StringOutput)
}

// Insights logs access permission.
func (o AdminRolesOutput) AnalysisAccess() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.StringOutput { return v.AnalysisAccess }).(pulumi.StringOutput)
}

// Dashboard access permission.
func (o AdminRolesOutput) DashboardAccess() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.StringOutput { return v.DashboardAccess }).(pulumi.StringOutput)
}

// Device information access permission. When set to NONE, device information is obfuscated.
func (o AdminRolesOutput) DeviceInfoAccess() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.StringOutput { return v.DeviceInfoAccess }).(pulumi.StringOutput)
}

// External feature access permission.
func (o AdminRolesOutput) ExtFeaturePermissions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.StringMapOutput { return v.ExtFeaturePermissions }).(pulumi.StringMapOutput)
}

// Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
// access, or read-only access.
func (o AdminRolesOutput) FeaturePermissions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.StringMapOutput { return v.FeaturePermissions }).(pulumi.StringMapOutput)
}

// Indicates whether this is an auditor role.
func (o AdminRolesOutput) IsAuditor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.BoolPtrOutput { return v.IsAuditor }).(pulumi.BoolPtrOutput)
}

// Indicates whether or not this admin user is editable/deletable.
func (o AdminRolesOutput) IsNonEditable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.BoolPtrOutput { return v.IsNonEditable }).(pulumi.BoolPtrOutput)
}

// Log range limit.
func (o AdminRolesOutput) LogsLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.StringPtrOutput { return v.LogsLimit }).(pulumi.StringPtrOutput)
}

// The Name of the admin role
func (o AdminRolesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Request method for which the rule must be applied. If not set, rule will be applied to all methods
func (o AdminRolesOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

// Policy access permission.
func (o AdminRolesOutput) PolicyAccess() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.StringOutput { return v.PolicyAccess }).(pulumi.StringOutput)
}

// Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
// value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
// which rule orders this admin can access.
func (o AdminRolesOutput) Rank() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.IntPtrOutput { return v.Rank }).(pulumi.IntPtrOutput)
}

// Report access permission.
func (o AdminRolesOutput) ReportAccess() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.StringOutput { return v.ReportAccess }).(pulumi.StringOutput)
}

// Time duration allocated to the report dashboard.
func (o AdminRolesOutput) ReportTimeDuration() pulumi.IntOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.IntOutput { return v.ReportTimeDuration }).(pulumi.IntOutput)
}

func (o AdminRolesOutput) RoleId() pulumi.IntOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.IntOutput { return v.RoleId }).(pulumi.IntOutput)
}

// The admin role type. ()This attribute is subject to change.)
func (o AdminRolesOutput) RoleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.StringPtrOutput { return v.RoleType }).(pulumi.StringPtrOutput)
}

// Username access permission. When set to NONE, the username will be obfuscated.
func (o AdminRolesOutput) UsernameAccess() pulumi.StringOutput {
	return o.ApplyT(func(v *AdminRoles) pulumi.StringOutput { return v.UsernameAccess }).(pulumi.StringOutput)
}

type AdminRolesArrayOutput struct{ *pulumi.OutputState }

func (AdminRolesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdminRoles)(nil)).Elem()
}

func (o AdminRolesArrayOutput) ToAdminRolesArrayOutput() AdminRolesArrayOutput {
	return o
}

func (o AdminRolesArrayOutput) ToAdminRolesArrayOutputWithContext(ctx context.Context) AdminRolesArrayOutput {
	return o
}

func (o AdminRolesArrayOutput) Index(i pulumi.IntInput) AdminRolesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AdminRoles {
		return vs[0].([]*AdminRoles)[vs[1].(int)]
	}).(AdminRolesOutput)
}

type AdminRolesMapOutput struct{ *pulumi.OutputState }

func (AdminRolesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdminRoles)(nil)).Elem()
}

func (o AdminRolesMapOutput) ToAdminRolesMapOutput() AdminRolesMapOutput {
	return o
}

func (o AdminRolesMapOutput) ToAdminRolesMapOutputWithContext(ctx context.Context) AdminRolesMapOutput {
	return o
}

func (o AdminRolesMapOutput) MapIndex(k pulumi.StringInput) AdminRolesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AdminRoles {
		return vs[0].(map[string]*AdminRoles)[vs[1].(string)]
	}).(AdminRolesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdminRolesInput)(nil)).Elem(), &AdminRoles{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminRolesArrayInput)(nil)).Elem(), AdminRolesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdminRolesMapInput)(nil)).Elem(), AdminRolesMap{})
	pulumi.RegisterOutputType(AdminRolesOutput{})
	pulumi.RegisterOutputType(AdminRolesArrayOutput{})
	pulumi.RegisterOutputType(AdminRolesMapOutput{})
}
