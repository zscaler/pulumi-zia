// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// The **zia_atp_malicious_urls** resource alows you to Updates the malicious URLs added to the denylist in ATP policy. To learn more see [Advanced Threat Protection](https://help.zscaler.com/unified/configuring-security-exceptions-advanced-threat-protection-policy)
//
// ## Example Usage
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_atp_malicious_urls** can be imported by using `all_urls` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/aTPMaliciousURLs:ATPMaliciousURLs this all_urls
// ```
type ATPMaliciousURLs struct {
	pulumi.CustomResourceState

	MaliciousUrls pulumi.StringArrayOutput `pulumi:"maliciousUrls"`
}

// NewATPMaliciousURLs registers a new resource with the given unique name, arguments, and options.
func NewATPMaliciousURLs(ctx *pulumi.Context,
	name string, args *ATPMaliciousURLsArgs, opts ...pulumi.ResourceOption) (*ATPMaliciousURLs, error) {
	if args == nil {
		args = &ATPMaliciousURLsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ATPMaliciousURLs
	err := ctx.RegisterResource("zia:index/aTPMaliciousURLs:ATPMaliciousURLs", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetATPMaliciousURLs gets an existing ATPMaliciousURLs resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetATPMaliciousURLs(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ATPMaliciousURLsState, opts ...pulumi.ResourceOption) (*ATPMaliciousURLs, error) {
	var resource ATPMaliciousURLs
	err := ctx.ReadResource("zia:index/aTPMaliciousURLs:ATPMaliciousURLs", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ATPMaliciousURLs resources.
type atpmaliciousURLsState struct {
	MaliciousUrls []string `pulumi:"maliciousUrls"`
}

type ATPMaliciousURLsState struct {
	MaliciousUrls pulumi.StringArrayInput
}

func (ATPMaliciousURLsState) ElementType() reflect.Type {
	return reflect.TypeOf((*atpmaliciousURLsState)(nil)).Elem()
}

type atpmaliciousURLsArgs struct {
	MaliciousUrls []string `pulumi:"maliciousUrls"`
}

// The set of arguments for constructing a ATPMaliciousURLs resource.
type ATPMaliciousURLsArgs struct {
	MaliciousUrls pulumi.StringArrayInput
}

func (ATPMaliciousURLsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*atpmaliciousURLsArgs)(nil)).Elem()
}

type ATPMaliciousURLsInput interface {
	pulumi.Input

	ToATPMaliciousURLsOutput() ATPMaliciousURLsOutput
	ToATPMaliciousURLsOutputWithContext(ctx context.Context) ATPMaliciousURLsOutput
}

func (*ATPMaliciousURLs) ElementType() reflect.Type {
	return reflect.TypeOf((**ATPMaliciousURLs)(nil)).Elem()
}

func (i *ATPMaliciousURLs) ToATPMaliciousURLsOutput() ATPMaliciousURLsOutput {
	return i.ToATPMaliciousURLsOutputWithContext(context.Background())
}

func (i *ATPMaliciousURLs) ToATPMaliciousURLsOutputWithContext(ctx context.Context) ATPMaliciousURLsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ATPMaliciousURLsOutput)
}

// ATPMaliciousURLsArrayInput is an input type that accepts ATPMaliciousURLsArray and ATPMaliciousURLsArrayOutput values.
// You can construct a concrete instance of `ATPMaliciousURLsArrayInput` via:
//
//	ATPMaliciousURLsArray{ ATPMaliciousURLsArgs{...} }
type ATPMaliciousURLsArrayInput interface {
	pulumi.Input

	ToATPMaliciousURLsArrayOutput() ATPMaliciousURLsArrayOutput
	ToATPMaliciousURLsArrayOutputWithContext(context.Context) ATPMaliciousURLsArrayOutput
}

type ATPMaliciousURLsArray []ATPMaliciousURLsInput

func (ATPMaliciousURLsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ATPMaliciousURLs)(nil)).Elem()
}

func (i ATPMaliciousURLsArray) ToATPMaliciousURLsArrayOutput() ATPMaliciousURLsArrayOutput {
	return i.ToATPMaliciousURLsArrayOutputWithContext(context.Background())
}

func (i ATPMaliciousURLsArray) ToATPMaliciousURLsArrayOutputWithContext(ctx context.Context) ATPMaliciousURLsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ATPMaliciousURLsArrayOutput)
}

// ATPMaliciousURLsMapInput is an input type that accepts ATPMaliciousURLsMap and ATPMaliciousURLsMapOutput values.
// You can construct a concrete instance of `ATPMaliciousURLsMapInput` via:
//
//	ATPMaliciousURLsMap{ "key": ATPMaliciousURLsArgs{...} }
type ATPMaliciousURLsMapInput interface {
	pulumi.Input

	ToATPMaliciousURLsMapOutput() ATPMaliciousURLsMapOutput
	ToATPMaliciousURLsMapOutputWithContext(context.Context) ATPMaliciousURLsMapOutput
}

type ATPMaliciousURLsMap map[string]ATPMaliciousURLsInput

func (ATPMaliciousURLsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ATPMaliciousURLs)(nil)).Elem()
}

func (i ATPMaliciousURLsMap) ToATPMaliciousURLsMapOutput() ATPMaliciousURLsMapOutput {
	return i.ToATPMaliciousURLsMapOutputWithContext(context.Background())
}

func (i ATPMaliciousURLsMap) ToATPMaliciousURLsMapOutputWithContext(ctx context.Context) ATPMaliciousURLsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ATPMaliciousURLsMapOutput)
}

type ATPMaliciousURLsOutput struct{ *pulumi.OutputState }

func (ATPMaliciousURLsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ATPMaliciousURLs)(nil)).Elem()
}

func (o ATPMaliciousURLsOutput) ToATPMaliciousURLsOutput() ATPMaliciousURLsOutput {
	return o
}

func (o ATPMaliciousURLsOutput) ToATPMaliciousURLsOutputWithContext(ctx context.Context) ATPMaliciousURLsOutput {
	return o
}

func (o ATPMaliciousURLsOutput) MaliciousUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ATPMaliciousURLs) pulumi.StringArrayOutput { return v.MaliciousUrls }).(pulumi.StringArrayOutput)
}

type ATPMaliciousURLsArrayOutput struct{ *pulumi.OutputState }

func (ATPMaliciousURLsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ATPMaliciousURLs)(nil)).Elem()
}

func (o ATPMaliciousURLsArrayOutput) ToATPMaliciousURLsArrayOutput() ATPMaliciousURLsArrayOutput {
	return o
}

func (o ATPMaliciousURLsArrayOutput) ToATPMaliciousURLsArrayOutputWithContext(ctx context.Context) ATPMaliciousURLsArrayOutput {
	return o
}

func (o ATPMaliciousURLsArrayOutput) Index(i pulumi.IntInput) ATPMaliciousURLsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ATPMaliciousURLs {
		return vs[0].([]*ATPMaliciousURLs)[vs[1].(int)]
	}).(ATPMaliciousURLsOutput)
}

type ATPMaliciousURLsMapOutput struct{ *pulumi.OutputState }

func (ATPMaliciousURLsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ATPMaliciousURLs)(nil)).Elem()
}

func (o ATPMaliciousURLsMapOutput) ToATPMaliciousURLsMapOutput() ATPMaliciousURLsMapOutput {
	return o
}

func (o ATPMaliciousURLsMapOutput) ToATPMaliciousURLsMapOutputWithContext(ctx context.Context) ATPMaliciousURLsMapOutput {
	return o
}

func (o ATPMaliciousURLsMapOutput) MapIndex(k pulumi.StringInput) ATPMaliciousURLsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ATPMaliciousURLs {
		return vs[0].(map[string]*ATPMaliciousURLs)[vs[1].(string)]
	}).(ATPMaliciousURLsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ATPMaliciousURLsInput)(nil)).Elem(), &ATPMaliciousURLs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ATPMaliciousURLsArrayInput)(nil)).Elem(), ATPMaliciousURLsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ATPMaliciousURLsMapInput)(nil)).Elem(), ATPMaliciousURLsMap{})
	pulumi.RegisterOutputType(ATPMaliciousURLsOutput{})
	pulumi.RegisterOutputType(ATPMaliciousURLsArrayOutput{})
	pulumi.RegisterOutputType(ATPMaliciousURLsMapOutput{})
}
