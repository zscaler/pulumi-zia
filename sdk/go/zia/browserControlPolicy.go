// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/configuring-browser-control-policy)
// * [API documentation](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
//
// The **zia_browser_control_policy** resource allows you to update the malware protection policy configuration details. To learn more see [Configuring the Browser Control Policy](https://help.zscaler.com/zia/configuring-browser-control-policy)
//
// ## Example Usage
//
// ### Enable Smart Isolation
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_browser_control_policy** can be imported by using `browser_settings` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/browserControlPolicy:BrowserControlPolicy this "browser_settings"
// ```
//
// Deprecated: zia.index/browsercontrolpolicy.BrowserControlPolicy has been deprecated in favor of zia.index/browsercontrolsettings.BrowserControlSettings
type BrowserControlPolicy struct {
	pulumi.CustomResourceState

	// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
	// internet
	AllowAllBrowsers pulumi.BoolOutput `pulumi:"allowAllBrowsers"`
	// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
	BlockedChromeVersions pulumi.StringArrayOutput `pulumi:"blockedChromeVersions"`
	// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
	BlockedFirefoxVersions pulumi.StringArrayOutput `pulumi:"blockedFirefoxVersions"`
	// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
	BlockedInternetExplorerVersions pulumi.StringArrayOutput `pulumi:"blockedInternetExplorerVersions"`
	// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
	BlockedOperaVersions pulumi.StringArrayOutput `pulumi:"blockedOperaVersions"`
	// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
	BlockedSafariVersions pulumi.StringArrayOutput `pulumi:"blockedSafariVersions"`
	// If set to true, all the browsers are bypassed for warnings
	BypassAllBrowsers pulumi.BoolOutput `pulumi:"bypassAllBrowsers"`
	// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
	// attribute is set to true. If not set, all vulnerable applications are warned
	BypassApplications pulumi.StringArrayOutput `pulumi:"bypassApplications"`
	// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
	// is set to true. If not set, all vulnerable plugins are warned
	BypassPlugins pulumi.StringArrayOutput `pulumi:"bypassPlugins"`
	// A Boolean value that specifies if Smart Browser Isolation is enabled
	EnableSmartBrowserIsolation pulumi.BoolOutput `pulumi:"enableSmartBrowserIsolation"`
	// A Boolean value that specifies if the warnings are enabled
	EnableWarnings pulumi.BoolOutput `pulumi:"enableWarnings"`
	// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
	// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
	PluginCheckFrequency pulumi.StringPtrOutput `pulumi:"pluginCheckFrequency"`
	// Name-ID pairs of groups for which the rule is applied
	SmartIsolationGroups BrowserControlPolicySmartIsolationGroupsPtrOutput `pulumi:"smartIsolationGroups"`
	// The isolation profile
	SmartIsolationProfiles BrowserControlPolicySmartIsolationProfileArrayOutput `pulumi:"smartIsolationProfiles"`
	// Name-ID pairs of users for which the rule is applied
	SmartIsolationUsers BrowserControlPolicySmartIsolationUsersPtrOutput `pulumi:"smartIsolationUsers"`
}

// NewBrowserControlPolicy registers a new resource with the given unique name, arguments, and options.
func NewBrowserControlPolicy(ctx *pulumi.Context,
	name string, args *BrowserControlPolicyArgs, opts ...pulumi.ResourceOption) (*BrowserControlPolicy, error) {
	if args == nil {
		args = &BrowserControlPolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BrowserControlPolicy
	err := ctx.RegisterResource("zia:index/browserControlPolicy:BrowserControlPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBrowserControlPolicy gets an existing BrowserControlPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBrowserControlPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BrowserControlPolicyState, opts ...pulumi.ResourceOption) (*BrowserControlPolicy, error) {
	var resource BrowserControlPolicy
	err := ctx.ReadResource("zia:index/browserControlPolicy:BrowserControlPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BrowserControlPolicy resources.
type browserControlPolicyState struct {
	// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
	// internet
	AllowAllBrowsers *bool `pulumi:"allowAllBrowsers"`
	// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
	BlockedChromeVersions []string `pulumi:"blockedChromeVersions"`
	// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
	BlockedFirefoxVersions []string `pulumi:"blockedFirefoxVersions"`
	// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
	BlockedInternetExplorerVersions []string `pulumi:"blockedInternetExplorerVersions"`
	// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
	BlockedOperaVersions []string `pulumi:"blockedOperaVersions"`
	// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
	BlockedSafariVersions []string `pulumi:"blockedSafariVersions"`
	// If set to true, all the browsers are bypassed for warnings
	BypassAllBrowsers *bool `pulumi:"bypassAllBrowsers"`
	// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
	// attribute is set to true. If not set, all vulnerable applications are warned
	BypassApplications []string `pulumi:"bypassApplications"`
	// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
	// is set to true. If not set, all vulnerable plugins are warned
	BypassPlugins []string `pulumi:"bypassPlugins"`
	// A Boolean value that specifies if Smart Browser Isolation is enabled
	EnableSmartBrowserIsolation *bool `pulumi:"enableSmartBrowserIsolation"`
	// A Boolean value that specifies if the warnings are enabled
	EnableWarnings *bool `pulumi:"enableWarnings"`
	// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
	// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
	PluginCheckFrequency *string `pulumi:"pluginCheckFrequency"`
	// Name-ID pairs of groups for which the rule is applied
	SmartIsolationGroups *BrowserControlPolicySmartIsolationGroups `pulumi:"smartIsolationGroups"`
	// The isolation profile
	SmartIsolationProfiles []BrowserControlPolicySmartIsolationProfile `pulumi:"smartIsolationProfiles"`
	// Name-ID pairs of users for which the rule is applied
	SmartIsolationUsers *BrowserControlPolicySmartIsolationUsers `pulumi:"smartIsolationUsers"`
}

type BrowserControlPolicyState struct {
	// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
	// internet
	AllowAllBrowsers pulumi.BoolPtrInput
	// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
	BlockedChromeVersions pulumi.StringArrayInput
	// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
	BlockedFirefoxVersions pulumi.StringArrayInput
	// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
	BlockedInternetExplorerVersions pulumi.StringArrayInput
	// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
	BlockedOperaVersions pulumi.StringArrayInput
	// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
	BlockedSafariVersions pulumi.StringArrayInput
	// If set to true, all the browsers are bypassed for warnings
	BypassAllBrowsers pulumi.BoolPtrInput
	// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
	// attribute is set to true. If not set, all vulnerable applications are warned
	BypassApplications pulumi.StringArrayInput
	// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
	// is set to true. If not set, all vulnerable plugins are warned
	BypassPlugins pulumi.StringArrayInput
	// A Boolean value that specifies if Smart Browser Isolation is enabled
	EnableSmartBrowserIsolation pulumi.BoolPtrInput
	// A Boolean value that specifies if the warnings are enabled
	EnableWarnings pulumi.BoolPtrInput
	// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
	// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
	PluginCheckFrequency pulumi.StringPtrInput
	// Name-ID pairs of groups for which the rule is applied
	SmartIsolationGroups BrowserControlPolicySmartIsolationGroupsPtrInput
	// The isolation profile
	SmartIsolationProfiles BrowserControlPolicySmartIsolationProfileArrayInput
	// Name-ID pairs of users for which the rule is applied
	SmartIsolationUsers BrowserControlPolicySmartIsolationUsersPtrInput
}

func (BrowserControlPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*browserControlPolicyState)(nil)).Elem()
}

type browserControlPolicyArgs struct {
	// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
	// internet
	AllowAllBrowsers *bool `pulumi:"allowAllBrowsers"`
	// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
	BlockedChromeVersions []string `pulumi:"blockedChromeVersions"`
	// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
	BlockedFirefoxVersions []string `pulumi:"blockedFirefoxVersions"`
	// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
	BlockedInternetExplorerVersions []string `pulumi:"blockedInternetExplorerVersions"`
	// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
	BlockedOperaVersions []string `pulumi:"blockedOperaVersions"`
	// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
	BlockedSafariVersions []string `pulumi:"blockedSafariVersions"`
	// If set to true, all the browsers are bypassed for warnings
	BypassAllBrowsers *bool `pulumi:"bypassAllBrowsers"`
	// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
	// attribute is set to true. If not set, all vulnerable applications are warned
	BypassApplications []string `pulumi:"bypassApplications"`
	// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
	// is set to true. If not set, all vulnerable plugins are warned
	BypassPlugins []string `pulumi:"bypassPlugins"`
	// A Boolean value that specifies if Smart Browser Isolation is enabled
	EnableSmartBrowserIsolation *bool `pulumi:"enableSmartBrowserIsolation"`
	// A Boolean value that specifies if the warnings are enabled
	EnableWarnings *bool `pulumi:"enableWarnings"`
	// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
	// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
	PluginCheckFrequency *string `pulumi:"pluginCheckFrequency"`
	// Name-ID pairs of groups for which the rule is applied
	SmartIsolationGroups *BrowserControlPolicySmartIsolationGroups `pulumi:"smartIsolationGroups"`
	// The isolation profile
	SmartIsolationProfiles []BrowserControlPolicySmartIsolationProfile `pulumi:"smartIsolationProfiles"`
	// Name-ID pairs of users for which the rule is applied
	SmartIsolationUsers *BrowserControlPolicySmartIsolationUsers `pulumi:"smartIsolationUsers"`
}

// The set of arguments for constructing a BrowserControlPolicy resource.
type BrowserControlPolicyArgs struct {
	// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
	// internet
	AllowAllBrowsers pulumi.BoolPtrInput
	// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
	BlockedChromeVersions pulumi.StringArrayInput
	// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
	BlockedFirefoxVersions pulumi.StringArrayInput
	// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
	BlockedInternetExplorerVersions pulumi.StringArrayInput
	// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
	BlockedOperaVersions pulumi.StringArrayInput
	// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
	BlockedSafariVersions pulumi.StringArrayInput
	// If set to true, all the browsers are bypassed for warnings
	BypassAllBrowsers pulumi.BoolPtrInput
	// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
	// attribute is set to true. If not set, all vulnerable applications are warned
	BypassApplications pulumi.StringArrayInput
	// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
	// is set to true. If not set, all vulnerable plugins are warned
	BypassPlugins pulumi.StringArrayInput
	// A Boolean value that specifies if Smart Browser Isolation is enabled
	EnableSmartBrowserIsolation pulumi.BoolPtrInput
	// A Boolean value that specifies if the warnings are enabled
	EnableWarnings pulumi.BoolPtrInput
	// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
	// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
	PluginCheckFrequency pulumi.StringPtrInput
	// Name-ID pairs of groups for which the rule is applied
	SmartIsolationGroups BrowserControlPolicySmartIsolationGroupsPtrInput
	// The isolation profile
	SmartIsolationProfiles BrowserControlPolicySmartIsolationProfileArrayInput
	// Name-ID pairs of users for which the rule is applied
	SmartIsolationUsers BrowserControlPolicySmartIsolationUsersPtrInput
}

func (BrowserControlPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*browserControlPolicyArgs)(nil)).Elem()
}

type BrowserControlPolicyInput interface {
	pulumi.Input

	ToBrowserControlPolicyOutput() BrowserControlPolicyOutput
	ToBrowserControlPolicyOutputWithContext(ctx context.Context) BrowserControlPolicyOutput
}

func (*BrowserControlPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserControlPolicy)(nil)).Elem()
}

func (i *BrowserControlPolicy) ToBrowserControlPolicyOutput() BrowserControlPolicyOutput {
	return i.ToBrowserControlPolicyOutputWithContext(context.Background())
}

func (i *BrowserControlPolicy) ToBrowserControlPolicyOutputWithContext(ctx context.Context) BrowserControlPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserControlPolicyOutput)
}

// BrowserControlPolicyArrayInput is an input type that accepts BrowserControlPolicyArray and BrowserControlPolicyArrayOutput values.
// You can construct a concrete instance of `BrowserControlPolicyArrayInput` via:
//
//	BrowserControlPolicyArray{ BrowserControlPolicyArgs{...} }
type BrowserControlPolicyArrayInput interface {
	pulumi.Input

	ToBrowserControlPolicyArrayOutput() BrowserControlPolicyArrayOutput
	ToBrowserControlPolicyArrayOutputWithContext(context.Context) BrowserControlPolicyArrayOutput
}

type BrowserControlPolicyArray []BrowserControlPolicyInput

func (BrowserControlPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserControlPolicy)(nil)).Elem()
}

func (i BrowserControlPolicyArray) ToBrowserControlPolicyArrayOutput() BrowserControlPolicyArrayOutput {
	return i.ToBrowserControlPolicyArrayOutputWithContext(context.Background())
}

func (i BrowserControlPolicyArray) ToBrowserControlPolicyArrayOutputWithContext(ctx context.Context) BrowserControlPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserControlPolicyArrayOutput)
}

// BrowserControlPolicyMapInput is an input type that accepts BrowserControlPolicyMap and BrowserControlPolicyMapOutput values.
// You can construct a concrete instance of `BrowserControlPolicyMapInput` via:
//
//	BrowserControlPolicyMap{ "key": BrowserControlPolicyArgs{...} }
type BrowserControlPolicyMapInput interface {
	pulumi.Input

	ToBrowserControlPolicyMapOutput() BrowserControlPolicyMapOutput
	ToBrowserControlPolicyMapOutputWithContext(context.Context) BrowserControlPolicyMapOutput
}

type BrowserControlPolicyMap map[string]BrowserControlPolicyInput

func (BrowserControlPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserControlPolicy)(nil)).Elem()
}

func (i BrowserControlPolicyMap) ToBrowserControlPolicyMapOutput() BrowserControlPolicyMapOutput {
	return i.ToBrowserControlPolicyMapOutputWithContext(context.Background())
}

func (i BrowserControlPolicyMap) ToBrowserControlPolicyMapOutputWithContext(ctx context.Context) BrowserControlPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BrowserControlPolicyMapOutput)
}

type BrowserControlPolicyOutput struct{ *pulumi.OutputState }

func (BrowserControlPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BrowserControlPolicy)(nil)).Elem()
}

func (o BrowserControlPolicyOutput) ToBrowserControlPolicyOutput() BrowserControlPolicyOutput {
	return o
}

func (o BrowserControlPolicyOutput) ToBrowserControlPolicyOutputWithContext(ctx context.Context) BrowserControlPolicyOutput {
	return o
}

// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
// internet
func (o BrowserControlPolicyOutput) AllowAllBrowsers() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) pulumi.BoolOutput { return v.AllowAllBrowsers }).(pulumi.BoolOutput)
}

// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
func (o BrowserControlPolicyOutput) BlockedChromeVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) pulumi.StringArrayOutput { return v.BlockedChromeVersions }).(pulumi.StringArrayOutput)
}

// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
func (o BrowserControlPolicyOutput) BlockedFirefoxVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) pulumi.StringArrayOutput { return v.BlockedFirefoxVersions }).(pulumi.StringArrayOutput)
}

// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
func (o BrowserControlPolicyOutput) BlockedInternetExplorerVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) pulumi.StringArrayOutput { return v.BlockedInternetExplorerVersions }).(pulumi.StringArrayOutput)
}

// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
func (o BrowserControlPolicyOutput) BlockedOperaVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) pulumi.StringArrayOutput { return v.BlockedOperaVersions }).(pulumi.StringArrayOutput)
}

// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
func (o BrowserControlPolicyOutput) BlockedSafariVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) pulumi.StringArrayOutput { return v.BlockedSafariVersions }).(pulumi.StringArrayOutput)
}

// If set to true, all the browsers are bypassed for warnings
func (o BrowserControlPolicyOutput) BypassAllBrowsers() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) pulumi.BoolOutput { return v.BypassAllBrowsers }).(pulumi.BoolOutput)
}

// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
// attribute is set to true. If not set, all vulnerable applications are warned
func (o BrowserControlPolicyOutput) BypassApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) pulumi.StringArrayOutput { return v.BypassApplications }).(pulumi.StringArrayOutput)
}

// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
// is set to true. If not set, all vulnerable plugins are warned
func (o BrowserControlPolicyOutput) BypassPlugins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) pulumi.StringArrayOutput { return v.BypassPlugins }).(pulumi.StringArrayOutput)
}

// A Boolean value that specifies if Smart Browser Isolation is enabled
func (o BrowserControlPolicyOutput) EnableSmartBrowserIsolation() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) pulumi.BoolOutput { return v.EnableSmartBrowserIsolation }).(pulumi.BoolOutput)
}

// A Boolean value that specifies if the warnings are enabled
func (o BrowserControlPolicyOutput) EnableWarnings() pulumi.BoolOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) pulumi.BoolOutput { return v.EnableWarnings }).(pulumi.BoolOutput)
}

// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
func (o BrowserControlPolicyOutput) PluginCheckFrequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) pulumi.StringPtrOutput { return v.PluginCheckFrequency }).(pulumi.StringPtrOutput)
}

// Name-ID pairs of groups for which the rule is applied
func (o BrowserControlPolicyOutput) SmartIsolationGroups() BrowserControlPolicySmartIsolationGroupsPtrOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) BrowserControlPolicySmartIsolationGroupsPtrOutput {
		return v.SmartIsolationGroups
	}).(BrowserControlPolicySmartIsolationGroupsPtrOutput)
}

// The isolation profile
func (o BrowserControlPolicyOutput) SmartIsolationProfiles() BrowserControlPolicySmartIsolationProfileArrayOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) BrowserControlPolicySmartIsolationProfileArrayOutput {
		return v.SmartIsolationProfiles
	}).(BrowserControlPolicySmartIsolationProfileArrayOutput)
}

// Name-ID pairs of users for which the rule is applied
func (o BrowserControlPolicyOutput) SmartIsolationUsers() BrowserControlPolicySmartIsolationUsersPtrOutput {
	return o.ApplyT(func(v *BrowserControlPolicy) BrowserControlPolicySmartIsolationUsersPtrOutput {
		return v.SmartIsolationUsers
	}).(BrowserControlPolicySmartIsolationUsersPtrOutput)
}

type BrowserControlPolicyArrayOutput struct{ *pulumi.OutputState }

func (BrowserControlPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BrowserControlPolicy)(nil)).Elem()
}

func (o BrowserControlPolicyArrayOutput) ToBrowserControlPolicyArrayOutput() BrowserControlPolicyArrayOutput {
	return o
}

func (o BrowserControlPolicyArrayOutput) ToBrowserControlPolicyArrayOutputWithContext(ctx context.Context) BrowserControlPolicyArrayOutput {
	return o
}

func (o BrowserControlPolicyArrayOutput) Index(i pulumi.IntInput) BrowserControlPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BrowserControlPolicy {
		return vs[0].([]*BrowserControlPolicy)[vs[1].(int)]
	}).(BrowserControlPolicyOutput)
}

type BrowserControlPolicyMapOutput struct{ *pulumi.OutputState }

func (BrowserControlPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BrowserControlPolicy)(nil)).Elem()
}

func (o BrowserControlPolicyMapOutput) ToBrowserControlPolicyMapOutput() BrowserControlPolicyMapOutput {
	return o
}

func (o BrowserControlPolicyMapOutput) ToBrowserControlPolicyMapOutputWithContext(ctx context.Context) BrowserControlPolicyMapOutput {
	return o
}

func (o BrowserControlPolicyMapOutput) MapIndex(k pulumi.StringInput) BrowserControlPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BrowserControlPolicy {
		return vs[0].(map[string]*BrowserControlPolicy)[vs[1].(string)]
	}).(BrowserControlPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserControlPolicyInput)(nil)).Elem(), &BrowserControlPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserControlPolicyArrayInput)(nil)).Elem(), BrowserControlPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BrowserControlPolicyMapInput)(nil)).Elem(), BrowserControlPolicyMap{})
	pulumi.RegisterOutputType(BrowserControlPolicyOutput{})
	pulumi.RegisterOutputType(BrowserControlPolicyArrayOutput{})
	pulumi.RegisterOutputType(BrowserControlPolicyMapOutput{})
}
