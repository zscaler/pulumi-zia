// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// * [Official documentation](https://help.zscaler.com/zia/about-nss-servers)
// * [API documentation](https://help.zscaler.com/zia/cloud-nanolog-streaming-service-nss#/nssServers-get)
//
// Use the **zia_nss_server** data source to get information about a nss server resource in the Zscaler Internet Access cloud or via the API.
// See [Adding NSS Servers](https://help.zscaler.com/zia/adding-nss-servers) for more details.
//
// ## Example Usage
//
// ### Retrieve By Name
//
// ### Retrieve By ID
func LookupNssServer(ctx *pulumi.Context, args *LookupNssServerArgs, opts ...pulumi.InvokeOption) (*LookupNssServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNssServerResult
	err := ctx.Invoke("zia:index/getNssServer:getNssServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNssServer.
type LookupNssServerArgs struct {
	// System-generated identifier of the NSS server based on the software platform
	Id *int `pulumi:"id"`
	// The name of the nss server to be exported.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getNssServer.
type LookupNssServerResult struct {
	// (integer) The ICAP server ID
	IcapSvrId int    `pulumi:"icapSvrId"`
	Id        int    `pulumi:"id"`
	Name      string `pulumi:"name"`
	// (String) The health of the NSS server. Returned Values:  `UNHEALTHY`, `HEALTHY`, `UNKNOWN`
	State string `pulumi:"state"`
	// (String) Enables or disables the status of the NSS server. Returned Values: `ENABLED`, `DISABLED`, `DISABLED_BY_SERVICE_PROVIDER`, `NOT_PROVISIONED_IN_SERVICE_PROVIDER`, `IN_TRIAL`
	Status string `pulumi:"status"`
	// (String) Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
	Type string `pulumi:"type"`
}

func LookupNssServerOutput(ctx *pulumi.Context, args LookupNssServerOutputArgs, opts ...pulumi.InvokeOption) LookupNssServerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNssServerResultOutput, error) {
			args := v.(LookupNssServerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("zia:index/getNssServer:getNssServer", args, LookupNssServerResultOutput{}, options).(LookupNssServerResultOutput), nil
		}).(LookupNssServerResultOutput)
}

// A collection of arguments for invoking getNssServer.
type LookupNssServerOutputArgs struct {
	// System-generated identifier of the NSS server based on the software platform
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The name of the nss server to be exported.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupNssServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNssServerArgs)(nil)).Elem()
}

// A collection of values returned by getNssServer.
type LookupNssServerResultOutput struct{ *pulumi.OutputState }

func (LookupNssServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNssServerResult)(nil)).Elem()
}

func (o LookupNssServerResultOutput) ToLookupNssServerResultOutput() LookupNssServerResultOutput {
	return o
}

func (o LookupNssServerResultOutput) ToLookupNssServerResultOutputWithContext(ctx context.Context) LookupNssServerResultOutput {
	return o
}

// (integer) The ICAP server ID
func (o LookupNssServerResultOutput) IcapSvrId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNssServerResult) int { return v.IcapSvrId }).(pulumi.IntOutput)
}

func (o LookupNssServerResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNssServerResult) int { return v.Id }).(pulumi.IntOutput)
}

func (o LookupNssServerResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNssServerResult) string { return v.Name }).(pulumi.StringOutput)
}

// (String) The health of the NSS server. Returned Values:  `UNHEALTHY`, `HEALTHY`, `UNKNOWN`
func (o LookupNssServerResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNssServerResult) string { return v.State }).(pulumi.StringOutput)
}

// (String) Enables or disables the status of the NSS server. Returned Values: `ENABLED`, `DISABLED`, `DISABLED_BY_SERVICE_PROVIDER`, `NOT_PROVISIONED_IN_SERVICE_PROVIDER`, `IN_TRIAL`
func (o LookupNssServerResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNssServerResult) string { return v.Status }).(pulumi.StringOutput)
}

// (String) Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
func (o LookupNssServerResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNssServerResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNssServerResultOutput{})
}
