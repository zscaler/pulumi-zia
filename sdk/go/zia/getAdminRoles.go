// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// Use the **zia_admin_roles** data source to get information about an admin role created in the Zscaler Internet Access cloud or via the API. This data source can then be associated with a ZIA administrator account.
//
// ## Example Usage
func LookupAdminRoles(ctx *pulumi.Context, args *LookupAdminRolesArgs, opts ...pulumi.InvokeOption) (*LookupAdminRolesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAdminRolesResult
	err := ctx.Invoke("zia:index/getAdminRoles:getAdminRoles", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAdminRoles.
type LookupAdminRolesArgs struct {
	// The ID of the admin role to be exported.
	Id *int `pulumi:"id"`
	// The name of the Admin role to be exported.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getAdminRoles.
type LookupAdminRolesResult struct {
	// (String)
	AdminAcctAccess string `pulumi:"adminAcctAccess"`
	AlertingAccess  string `pulumi:"alertingAccess"`
	// (String)
	AnalysisAccess string `pulumi:"analysisAccess"`
	// (String) Dashboard access permission. Supported values are: `NONE`, `READ_ONLY`
	DashboardAccess       string            `pulumi:"dashboardAccess"`
	DeviceInfoAccess      string            `pulumi:"deviceInfoAccess"`
	ExtFeaturePermissions map[string]string `pulumi:"extFeaturePermissions"`
	FeaturePermissions    map[string]string `pulumi:"featurePermissions"`
	Id                    int               `pulumi:"id"`
	// (Boolean) Indicates whether this is an auditor role.
	IsAuditor bool `pulumi:"isAuditor"`
	// (Boolean) Indicates whether or not this admin user is editable/deletable.
	IsNonEditable bool `pulumi:"isNonEditable"`
	// (String) Log range limit. Returned values are: `UNRESTRICTED`, `MONTH_1`, `MONTH_2`, `MONTH_3`, `MONTH_4`, `MONTH_5`, `MONTH_6`
	LogsLimit string  `pulumi:"logsLimit"`
	Name      *string `pulumi:"name"`
	// (List of String) List of functional areas to which this role has access. This attribute is subject to change.
	Permissions []string `pulumi:"permissions"`
	// (String) Policy access permission. Returned values are: `NONE`, `READ_ONLY`,`READ_WRITE`
	PolicyAccess string `pulumi:"policyAccess"`
	// (Number) Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and which rule orders this admin can access.
	Rank int `pulumi:"rank"`
	// (String) Report access permission. Returned values are: `NONE`, `READ_ONLY`,`READ_WRITE`
	ReportAccess       string `pulumi:"reportAccess"`
	ReportTimeDuration int    `pulumi:"reportTimeDuration"`
	// (String) The admin role type. ()This attribute is subject to change.) Supported values are:  `ORG_ADMIN`, `EXEC_INSIGHT`, `EXEC_INSIGHT_AND_ORG_ADMIN`, `SDWAN`
	RoleType string `pulumi:"roleType"`
	// (String) Username access permission. When set to NONE, the username will be obfuscated. Supported values are: `NONE|READ_ONLY`
	UsernameAccess string `pulumi:"usernameAccess"`
}

func LookupAdminRolesOutput(ctx *pulumi.Context, args LookupAdminRolesOutputArgs, opts ...pulumi.InvokeOption) LookupAdminRolesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAdminRolesResultOutput, error) {
			args := v.(LookupAdminRolesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("zia:index/getAdminRoles:getAdminRoles", args, LookupAdminRolesResultOutput{}, options).(LookupAdminRolesResultOutput), nil
		}).(LookupAdminRolesResultOutput)
}

// A collection of arguments for invoking getAdminRoles.
type LookupAdminRolesOutputArgs struct {
	// The ID of the admin role to be exported.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The name of the Admin role to be exported.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupAdminRolesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAdminRolesArgs)(nil)).Elem()
}

// A collection of values returned by getAdminRoles.
type LookupAdminRolesResultOutput struct{ *pulumi.OutputState }

func (LookupAdminRolesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAdminRolesResult)(nil)).Elem()
}

func (o LookupAdminRolesResultOutput) ToLookupAdminRolesResultOutput() LookupAdminRolesResultOutput {
	return o
}

func (o LookupAdminRolesResultOutput) ToLookupAdminRolesResultOutputWithContext(ctx context.Context) LookupAdminRolesResultOutput {
	return o
}

// (String)
func (o LookupAdminRolesResultOutput) AdminAcctAccess() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) string { return v.AdminAcctAccess }).(pulumi.StringOutput)
}

func (o LookupAdminRolesResultOutput) AlertingAccess() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) string { return v.AlertingAccess }).(pulumi.StringOutput)
}

// (String)
func (o LookupAdminRolesResultOutput) AnalysisAccess() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) string { return v.AnalysisAccess }).(pulumi.StringOutput)
}

// (String) Dashboard access permission. Supported values are: `NONE`, `READ_ONLY`
func (o LookupAdminRolesResultOutput) DashboardAccess() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) string { return v.DashboardAccess }).(pulumi.StringOutput)
}

func (o LookupAdminRolesResultOutput) DeviceInfoAccess() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) string { return v.DeviceInfoAccess }).(pulumi.StringOutput)
}

func (o LookupAdminRolesResultOutput) ExtFeaturePermissions() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) map[string]string { return v.ExtFeaturePermissions }).(pulumi.StringMapOutput)
}

func (o LookupAdminRolesResultOutput) FeaturePermissions() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) map[string]string { return v.FeaturePermissions }).(pulumi.StringMapOutput)
}

func (o LookupAdminRolesResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) int { return v.Id }).(pulumi.IntOutput)
}

// (Boolean) Indicates whether this is an auditor role.
func (o LookupAdminRolesResultOutput) IsAuditor() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) bool { return v.IsAuditor }).(pulumi.BoolOutput)
}

// (Boolean) Indicates whether or not this admin user is editable/deletable.
func (o LookupAdminRolesResultOutput) IsNonEditable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) bool { return v.IsNonEditable }).(pulumi.BoolOutput)
}

// (String) Log range limit. Returned values are: `UNRESTRICTED`, `MONTH_1`, `MONTH_2`, `MONTH_3`, `MONTH_4`, `MONTH_5`, `MONTH_6`
func (o LookupAdminRolesResultOutput) LogsLimit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) string { return v.LogsLimit }).(pulumi.StringOutput)
}

func (o LookupAdminRolesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (List of String) List of functional areas to which this role has access. This attribute is subject to change.
func (o LookupAdminRolesResultOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// (String) Policy access permission. Returned values are: `NONE`, `READ_ONLY`,`READ_WRITE`
func (o LookupAdminRolesResultOutput) PolicyAccess() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) string { return v.PolicyAccess }).(pulumi.StringOutput)
}

// (Number) Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and which rule orders this admin can access.
func (o LookupAdminRolesResultOutput) Rank() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) int { return v.Rank }).(pulumi.IntOutput)
}

// (String) Report access permission. Returned values are: `NONE`, `READ_ONLY`,`READ_WRITE`
func (o LookupAdminRolesResultOutput) ReportAccess() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) string { return v.ReportAccess }).(pulumi.StringOutput)
}

func (o LookupAdminRolesResultOutput) ReportTimeDuration() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) int { return v.ReportTimeDuration }).(pulumi.IntOutput)
}

// (String) The admin role type. ()This attribute is subject to change.) Supported values are:  `ORG_ADMIN`, `EXEC_INSIGHT`, `EXEC_INSIGHT_AND_ORG_ADMIN`, `SDWAN`
func (o LookupAdminRolesResultOutput) RoleType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) string { return v.RoleType }).(pulumi.StringOutput)
}

// (String) Username access permission. When set to NONE, the username will be obfuscated. Supported values are: `NONE|READ_ONLY`
func (o LookupAdminRolesResultOutput) UsernameAccess() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdminRolesResult) string { return v.UsernameAccess }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAdminRolesResultOutput{})
}
