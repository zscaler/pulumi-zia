// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// Use the **zia_admin_roles** data source to get information about an admin role created in the Zscaler Internet Access cloud or via the API. This data source can then be associated with a ZIA administrator account.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.GetAdminRoles(ctx, &zia.GetAdminRolesArgs{
//				Name: pulumi.StringRef("Super Admin"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func GetAdminRoles(ctx *pulumi.Context, args *GetAdminRolesArgs, opts ...pulumi.InvokeOption) (*GetAdminRolesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAdminRolesResult
	err := ctx.Invoke("zia:index/getAdminRoles:getAdminRoles", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAdminRoles.
type GetAdminRolesArgs struct {
	// The name of the Admin role to be exported.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getAdminRoles.
type GetAdminRolesResult struct {
	// (String)
	AdminAcctAccess string `pulumi:"adminAcctAccess"`
	// (String)
	AnalysisAccess string `pulumi:"analysisAccess"`
	// (String) Dashboard access permission. Supported values are: `NONE`, `READ_ONLY`
	DashboardAccess string `pulumi:"dashboardAccess"`
	Id              int    `pulumi:"id"`
	// (Boolean) Indicates whether this is an auditor role.
	IsAuditor bool `pulumi:"isAuditor"`
	// (Boolean) Indicates whether or not this admin user is editable/deletable.
	IsNonEditable bool `pulumi:"isNonEditable"`
	// (String) Log range limit. Returned values are: `UNRESTRICTED`, `MONTH_1`, `MONTH_2`, `MONTH_3`, `MONTH_4`, `MONTH_5`, `MONTH_6`
	LogsLimit string  `pulumi:"logsLimit"`
	Name      *string `pulumi:"name"`
	// (List of String) List of functional areas to which this role has access. This attribute is subject to change.
	Permissions []string `pulumi:"permissions"`
	// (String) Policy access permission. Returned values are: `NONE`, `READ_ONLY`,`READ_WRITE`
	PolicyAccess string `pulumi:"policyAccess"`
	// (Number) Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and which rule orders this admin can access.
	Rank int `pulumi:"rank"`
	// (String) Report access permission. Returned values are: `NONE`, `READ_ONLY`,`READ_WRITE`
	ReportAccess string `pulumi:"reportAccess"`
	// (String) The admin role type. ()This attribute is subject to change.) Supported values are:  `ORG_ADMIN`, `EXEC_INSIGHT`, `EXEC_INSIGHT_AND_ORG_ADMIN`, `SDWAN`
	RoleType string `pulumi:"roleType"`
	// (String) Username access permission. When set to NONE, the username will be obfuscated. Supported values are: `NONE|READ_ONLY`
	UsernameAccess string `pulumi:"usernameAccess"`
}

func GetAdminRolesOutput(ctx *pulumi.Context, args GetAdminRolesOutputArgs, opts ...pulumi.InvokeOption) GetAdminRolesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAdminRolesResult, error) {
			args := v.(GetAdminRolesArgs)
			r, err := GetAdminRoles(ctx, &args, opts...)
			var s GetAdminRolesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAdminRolesResultOutput)
}

// A collection of arguments for invoking getAdminRoles.
type GetAdminRolesOutputArgs struct {
	// The name of the Admin role to be exported.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (GetAdminRolesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAdminRolesArgs)(nil)).Elem()
}

// A collection of values returned by getAdminRoles.
type GetAdminRolesResultOutput struct{ *pulumi.OutputState }

func (GetAdminRolesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAdminRolesResult)(nil)).Elem()
}

func (o GetAdminRolesResultOutput) ToGetAdminRolesResultOutput() GetAdminRolesResultOutput {
	return o
}

func (o GetAdminRolesResultOutput) ToGetAdminRolesResultOutputWithContext(ctx context.Context) GetAdminRolesResultOutput {
	return o
}

// (String)
func (o GetAdminRolesResultOutput) AdminAcctAccess() pulumi.StringOutput {
	return o.ApplyT(func(v GetAdminRolesResult) string { return v.AdminAcctAccess }).(pulumi.StringOutput)
}

// (String)
func (o GetAdminRolesResultOutput) AnalysisAccess() pulumi.StringOutput {
	return o.ApplyT(func(v GetAdminRolesResult) string { return v.AnalysisAccess }).(pulumi.StringOutput)
}

// (String) Dashboard access permission. Supported values are: `NONE`, `READ_ONLY`
func (o GetAdminRolesResultOutput) DashboardAccess() pulumi.StringOutput {
	return o.ApplyT(func(v GetAdminRolesResult) string { return v.DashboardAccess }).(pulumi.StringOutput)
}

func (o GetAdminRolesResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetAdminRolesResult) int { return v.Id }).(pulumi.IntOutput)
}

// (Boolean) Indicates whether this is an auditor role.
func (o GetAdminRolesResultOutput) IsAuditor() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAdminRolesResult) bool { return v.IsAuditor }).(pulumi.BoolOutput)
}

// (Boolean) Indicates whether or not this admin user is editable/deletable.
func (o GetAdminRolesResultOutput) IsNonEditable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAdminRolesResult) bool { return v.IsNonEditable }).(pulumi.BoolOutput)
}

// (String) Log range limit. Returned values are: `UNRESTRICTED`, `MONTH_1`, `MONTH_2`, `MONTH_3`, `MONTH_4`, `MONTH_5`, `MONTH_6`
func (o GetAdminRolesResultOutput) LogsLimit() pulumi.StringOutput {
	return o.ApplyT(func(v GetAdminRolesResult) string { return v.LogsLimit }).(pulumi.StringOutput)
}

func (o GetAdminRolesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAdminRolesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (List of String) List of functional areas to which this role has access. This attribute is subject to change.
func (o GetAdminRolesResultOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAdminRolesResult) []string { return v.Permissions }).(pulumi.StringArrayOutput)
}

// (String) Policy access permission. Returned values are: `NONE`, `READ_ONLY`,`READ_WRITE`
func (o GetAdminRolesResultOutput) PolicyAccess() pulumi.StringOutput {
	return o.ApplyT(func(v GetAdminRolesResult) string { return v.PolicyAccess }).(pulumi.StringOutput)
}

// (Number) Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and which rule orders this admin can access.
func (o GetAdminRolesResultOutput) Rank() pulumi.IntOutput {
	return o.ApplyT(func(v GetAdminRolesResult) int { return v.Rank }).(pulumi.IntOutput)
}

// (String) Report access permission. Returned values are: `NONE`, `READ_ONLY`,`READ_WRITE`
func (o GetAdminRolesResultOutput) ReportAccess() pulumi.StringOutput {
	return o.ApplyT(func(v GetAdminRolesResult) string { return v.ReportAccess }).(pulumi.StringOutput)
}

// (String) The admin role type. ()This attribute is subject to change.) Supported values are:  `ORG_ADMIN`, `EXEC_INSIGHT`, `EXEC_INSIGHT_AND_ORG_ADMIN`, `SDWAN`
func (o GetAdminRolesResultOutput) RoleType() pulumi.StringOutput {
	return o.ApplyT(func(v GetAdminRolesResult) string { return v.RoleType }).(pulumi.StringOutput)
}

// (String) Username access permission. When set to NONE, the username will be obfuscated. Supported values are: `NONE|READ_ONLY`
func (o GetAdminRolesResultOutput) UsernameAccess() pulumi.StringOutput {
	return o.ApplyT(func(v GetAdminRolesResult) string { return v.UsernameAccess }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAdminRolesResultOutput{})
}
