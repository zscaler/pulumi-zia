// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// The **zia_location_management** resource allows the creation and management of ZIA locations in the Zscaler Internet Access. This resource can then be associated with a:
//
// * Static IP resource
// * GRE Tunnel resource
// * VPN credentials resource
// * URL filtering and firewall filtering rules
//
// ## Example Usage
//
// ### Location Management With UFQDN VPN Credential
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			usaSjc37TrafficForwardingVPNCredentials, err := zia.NewTrafficForwardingVPNCredentials(ctx, "usaSjc37TrafficForwardingVPNCredentials", &zia.TrafficForwardingVPNCredentialsArgs{
//				Type:         pulumi.String("UFQDN"),
//				Fqdn:         pulumi.String("usa_sjc37@acme.com"),
//				Comments:     pulumi.String("USA - San Jose IPSec Tunnel"),
//				PreSharedKey: pulumi.String("***************"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = zia.NewLocationManagement(ctx, "usaSjc37LocationManagement", &zia.LocationManagementArgs{
//				Description:       pulumi.String("Created with Terraform"),
//				Country:           pulumi.String("UNITED_STATES"),
//				Tz:                pulumi.String("UNITED_STATES_AMERICA_LOS_ANGELES"),
//				AuthRequired:      pulumi.Bool(true),
//				IdleTimeInMinutes: pulumi.Int(720),
//				DisplayTimeUnit:   pulumi.String("HOUR"),
//				SurrogateIp:       pulumi.Bool(true),
//				XffForwardEnabled: pulumi.Bool(true),
//				OfwEnabled:        pulumi.Bool(true),
//				IpsControl:        pulumi.Bool(true),
//				VpnCredentials: zia.LocationManagementVpnCredentialArray{
//					&zia.LocationManagementVpnCredentialArgs{
//						Id:   usaSjc37TrafficForwardingVPNCredentials.ID(),
//						Type: usaSjc37TrafficForwardingVPNCredentials.Type,
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				usaSjc37TrafficForwardingVPNCredentials,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Location Management With IP VPN Credential
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			usaSjc37TrafficForwardingStaticIP, err := zia.NewTrafficForwardingStaticIP(ctx, "usaSjc37TrafficForwardingStaticIP", &zia.TrafficForwardingStaticIPArgs{
//				IpAddress:   pulumi.String("1.1.1.1"),
//				RoutableIp:  pulumi.Bool(true),
//				Comment:     pulumi.String("SJC37 - Static IP"),
//				GeoOverride: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			usaSjc37TrafficForwardingVPNCredentials, err := zia.NewTrafficForwardingVPNCredentials(ctx, "usaSjc37TrafficForwardingVPNCredentials", &zia.TrafficForwardingVPNCredentialsArgs{
//				Type:         pulumi.String("IP"),
//				IpAddress:    usaSjc37TrafficForwardingStaticIP.IpAddress,
//				Comments:     pulumi.String("Created via Terraform"),
//				PreSharedKey: pulumi.String("******************"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				usaSjc37TrafficForwardingStaticIP,
//			}))
//			if err != nil {
//				return err
//			}
//			// ZIA Location Management with IP VPN Credential
//			_, err = zia.NewLocationManagement(ctx, "usaSjc37LocationManagement", &zia.LocationManagementArgs{
//				Description:       pulumi.String("Created with Terraform"),
//				Country:           pulumi.String("UNITED_STATES"),
//				Tz:                pulumi.String("UNITED_STATES_AMERICA_LOS_ANGELES"),
//				AuthRequired:      pulumi.Bool(true),
//				IdleTimeInMinutes: pulumi.Int(720),
//				DisplayTimeUnit:   pulumi.String("HOUR"),
//				SurrogateIp:       pulumi.Bool(true),
//				XffForwardEnabled: pulumi.Bool(true),
//				OfwEnabled:        pulumi.Bool(true),
//				IpsControl:        pulumi.Bool(true),
//				IpAddresses: pulumi.StringArray{
//					usaSjc37TrafficForwardingStaticIP.IpAddress,
//				},
//				VpnCredentials: zia.LocationManagementVpnCredentialArray{
//					&zia.LocationManagementVpnCredentialArgs{
//						Id:        usaSjc37TrafficForwardingVPNCredentials.ID(),
//						Type:      usaSjc37TrafficForwardingVPNCredentials.Type,
//						IpAddress: usaSjc37TrafficForwardingStaticIP.IpAddress,
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				usaSjc37TrafficForwardingStaticIP,
//				usaSjc37TrafficForwardingVPNCredentials,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Location Management With Manual And Dynamic Location Groups
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			this, err := zia.GetLocationGroups(ctx, &zia.GetLocationGroupsArgs{
//				Name: pulumi.StringRef("SDWAN_CAN"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			usaSjc37TrafficForwardingVPNCredentials, err := zia.NewTrafficForwardingVPNCredentials(ctx, "usaSjc37TrafficForwardingVPNCredentials", &zia.TrafficForwardingVPNCredentialsArgs{
//				Type:         pulumi.String("UFQDN"),
//				Fqdn:         pulumi.String("usa_sjc37@acme.com"),
//				Comments:     pulumi.String("USA - San Jose IPSec Tunnel"),
//				PreSharedKey: pulumi.String("***************"),
//			})
//			if err != nil {
//				return err
//			}
//			// ZIA Location Management with UFQDN VPN Credential
//			_, err = zia.NewLocationManagement(ctx, "usaSjc37LocationManagement", &zia.LocationManagementArgs{
//				Description:       pulumi.String("Created with Terraform"),
//				Country:           pulumi.String("UNITED_STATES"),
//				Tz:                pulumi.String("UNITED_STATES_AMERICA_LOS_ANGELES"),
//				State:             pulumi.String("California"),
//				AuthRequired:      pulumi.Bool(true),
//				IdleTimeInMinutes: pulumi.Int(720),
//				DisplayTimeUnit:   pulumi.String("HOUR"),
//				SurrogateIp:       pulumi.Bool(true),
//				XffForwardEnabled: pulumi.Bool(true),
//				OfwEnabled:        pulumi.Bool(true),
//				IpsControl:        pulumi.Bool(true),
//				Profile:           pulumi.String("CORPORATE"),
//				VpnCredentials: zia.LocationManagementVpnCredentialArray{
//					&zia.LocationManagementVpnCredentialArgs{
//						Id:   usaSjc37TrafficForwardingVPNCredentials.ID(),
//						Type: usaSjc37TrafficForwardingVPNCredentials.Type,
//					},
//				},
//				StaticLocationGroups: &zia.LocationManagementStaticLocationGroupsArgs{
//					Ids: pulumi.IntArray{
//						pulumi.Int(this.Id),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				usaSjc37TrafficForwardingVPNCredentials,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Location Management With Excluded Manual And Dynamic Location Groups
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.GetLocationGroups(ctx, &zia.GetLocationGroupsArgs{
//				Name: pulumi.StringRef("SDWAN_CAN"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			usaSjc37TrafficForwardingVPNCredentials, err := zia.NewTrafficForwardingVPNCredentials(ctx, "usaSjc37TrafficForwardingVPNCredentials", &zia.TrafficForwardingVPNCredentialsArgs{
//				Type:         pulumi.String("UFQDN"),
//				Fqdn:         pulumi.String("usa_sjc37@acme.com"),
//				Comments:     pulumi.String("USA - San Jose IPSec Tunnel"),
//				PreSharedKey: pulumi.String("***************"),
//			})
//			if err != nil {
//				return err
//			}
//			// ZIA Location Management with UFQDN VPN Credential
//			_, err = zia.NewLocationManagement(ctx, "usaSjc37LocationManagement", &zia.LocationManagementArgs{
//				Description:              pulumi.String("Created with Terraform"),
//				Country:                  pulumi.String("UNITED_STATES"),
//				Tz:                       pulumi.String("UNITED_STATES_AMERICA_LOS_ANGELES"),
//				State:                    pulumi.String("California"),
//				AuthRequired:             pulumi.Bool(true),
//				IdleTimeInMinutes:        pulumi.Int(720),
//				DisplayTimeUnit:          pulumi.String("HOUR"),
//				SurrogateIp:              pulumi.Bool(true),
//				XffForwardEnabled:        pulumi.Bool(true),
//				OfwEnabled:               pulumi.Bool(true),
//				IpsControl:               pulumi.Bool(true),
//				ExcludeFromDynamicGroups: pulumi.Bool(true),
//				ExcludeFromManualGroups:  pulumi.Bool(true),
//				Profile:                  pulumi.String("CORPORATE"),
//				VpnCredentials: zia.LocationManagementVpnCredentialArray{
//					&zia.LocationManagementVpnCredentialArgs{
//						Id:   usaSjc37TrafficForwardingVPNCredentials.ID(),
//						Type: usaSjc37TrafficForwardingVPNCredentials.Type,
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				usaSjc37TrafficForwardingVPNCredentials,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_location_management** can be imported by using `<LOCATION_ID>` or `<LOCATION_NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/locationManagement:LocationManagement example <location_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zia:index/locationManagement:LocationManagement example <location_name>
// ```
type LocationManagement struct {
	pulumi.CustomResourceState

	// For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is
	// disabled until the user accepts the AUP.
	AupBlockInternetUntilAccepted pulumi.BoolOutput `pulumi:"aupBlockInternetUntilAccepted"`
	// Enable AUP. When set to true, AUP is enabled for the location.
	AupEnabled pulumi.BoolOutput `pulumi:"aupEnabled"`
	// For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP
	// for HTTPS traffic.
	AupForceSslInspection pulumi.BoolOutput `pulumi:"aupForceSslInspection"`
	// Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.
	AupTimeoutInDays pulumi.IntPtrOutput `pulumi:"aupTimeoutInDays"`
	// Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
	AuthRequired pulumi.BoolOutput `pulumi:"authRequired"`
	// Enable Basic Authentication at the location
	BasicAuthEnabled pulumi.BoolOutput `pulumi:"basicAuthEnabled"`
	// Enable Caution. When set to true, a caution notifcation is enabled for the location.
	CautionEnabled  pulumi.BoolOutput `pulumi:"cautionEnabled"`
	CookiesAndProxy pulumi.BoolOutput `pulumi:"cookiesAndProxy"`
	// Supported Countries
	Country pulumi.StringOutput `pulumi:"country"`
	// Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enable Digest Authentication at the location
	DigestAuthEnabled pulumi.BoolOutput `pulumi:"digestAuthEnabled"`
	// Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.
	DisplayTimeUnit pulumi.StringPtrOutput `pulumi:"displayTimeUnit"`
	// Download bandwidth in bytes. The value 0 implies no Bandwidth Control enforcement.
	DnBandwidth pulumi.IntPtrOutput `pulumi:"dnBandwidth"`
	// Name-ID pairs of locations for which rule must be applied
	DynamicLocationGroups    LocationManagementDynamicLocationGroupsOutput `pulumi:"dynamicLocationGroups"`
	ExcludeFromDynamicGroups pulumi.BoolPtrOutput                          `pulumi:"excludeFromDynamicGroups"`
	ExcludeFromManualGroups  pulumi.BoolPtrOutput                          `pulumi:"excludeFromManualGroups"`
	// Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.
	IdleTimeInMinutes pulumi.IntPtrOutput `pulumi:"idleTimeInMinutes"`
	// Enable IOT Discovery at the location
	IotDiscoveryEnabled pulumi.BoolOutput `pulumi:"iotDiscoveryEnabled"`
	IotEnforcePolicySet pulumi.BoolOutput `pulumi:"iotEnforcePolicySet"`
	// For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP
	// address (e.g., 238.10.33.9).
	IpAddresses pulumi.StringArrayOutput `pulumi:"ipAddresses"`
	// Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
	IpsControl pulumi.BoolOutput `pulumi:"ipsControl"`
	// (Optional) Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64
	// prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of
	// supported prefixes.
	Ipv6Dns64prefix pulumi.BoolPtrOutput `pulumi:"ipv6Dns64prefix"`
	// If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler
	// service to enforce security policies.
	Ipv6Enabled pulumi.BoolPtrOutput `pulumi:"ipv6Enabled"`
	// Enable Kerberos Authentication at the location
	KerberosAuthEnabled pulumi.BoolOutput `pulumi:"kerberosAuthEnabled"`
	LocationId          pulumi.IntOutput  `pulumi:"locationId"`
	// Location Name.
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable Firewall. When set to true, Firewall is enabled for the location.
	OfwEnabled pulumi.BoolOutput `pulumi:"ofwEnabled"`
	// If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6
	// addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6
	// and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.
	Other6Sublocation pulumi.BoolOutput `pulumi:"other6Sublocation"`
	// If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4
	// addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other
	// and it can be renamed, if required.
	OtherSublocation pulumi.BoolOutput `pulumi:"otherSublocation"`
	// Parent Location ID. If this ID does not exist or is 0, it is implied that it is a parent location. Otherwise, it is a
	// sub-location whose parent has this ID. x-applicableTo: SUB
	ParentId pulumi.IntPtrOutput `pulumi:"parentId"`
	// IP ports that are associated with the location.
	Ports pulumi.StringPtrOutput `pulumi:"ports"`
	// Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`.
	Profile pulumi.StringOutput `pulumi:"profile"`
	// Enable SSL Inspection. Set to true in order to apply your SSL Inspection policy to HTTPS traffic in the location and
	// inspect HTTPS transactions for data leakage, malicious content, and viruses.
	SslScanEnabled pulumi.BoolOutput `pulumi:"sslScanEnabled"`
	// IP ports that are associated with the location.
	State pulumi.StringPtrOutput `pulumi:"state"`
	// Name-ID pairs of locations for which rule must be applied
	StaticLocationGroups LocationManagementStaticLocationGroupsOutput `pulumi:"staticLocationGroups"`
	// Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
	SurrogateIp pulumi.BoolOutput `pulumi:"surrogateIp"`
	// Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
	SurrogateIpEnforcedForKnownBrowsers pulumi.BoolOutput `pulumi:"surrogateIpEnforcedForKnownBrowsers"`
	// Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.
	SurrogateRefreshTimeInMinutes pulumi.IntPtrOutput `pulumi:"surrogateRefreshTimeInMinutes"`
	// Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.
	SurrogateRefreshTimeUnit pulumi.StringPtrOutput `pulumi:"surrogateRefreshTimeUnit"`
	// Timezone of the location. If not specified, it defaults to GMT.
	Tz pulumi.StringOutput `pulumi:"tz"`
	// Upload bandwidth in bytes. The value 0 implies no Bandwidth Control enforcement.
	UpBandwidth    pulumi.IntPtrOutput                        `pulumi:"upBandwidth"`
	VpnCredentials LocationManagementVpnCredentialArrayOutput `pulumi:"vpnCredentials"`
	// Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
	XffForwardEnabled pulumi.BoolOutput `pulumi:"xffForwardEnabled"`
	// Enable Zscaler App SSL Setting. When set to true, the Zscaler App SSL Scan Setting will take effect, irrespective of the
	// SSL policy that is configured for the location.
	ZappSslScanEnabled pulumi.BoolOutput `pulumi:"zappSslScanEnabled"`
}

// NewLocationManagement registers a new resource with the given unique name, arguments, and options.
func NewLocationManagement(ctx *pulumi.Context,
	name string, args *LocationManagementArgs, opts ...pulumi.ResourceOption) (*LocationManagement, error) {
	if args == nil {
		args = &LocationManagementArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LocationManagement
	err := ctx.RegisterResource("zia:index/locationManagement:LocationManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocationManagement gets an existing LocationManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocationManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationManagementState, opts ...pulumi.ResourceOption) (*LocationManagement, error) {
	var resource LocationManagement
	err := ctx.ReadResource("zia:index/locationManagement:LocationManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LocationManagement resources.
type locationManagementState struct {
	// For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is
	// disabled until the user accepts the AUP.
	AupBlockInternetUntilAccepted *bool `pulumi:"aupBlockInternetUntilAccepted"`
	// Enable AUP. When set to true, AUP is enabled for the location.
	AupEnabled *bool `pulumi:"aupEnabled"`
	// For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP
	// for HTTPS traffic.
	AupForceSslInspection *bool `pulumi:"aupForceSslInspection"`
	// Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.
	AupTimeoutInDays *int `pulumi:"aupTimeoutInDays"`
	// Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
	AuthRequired *bool `pulumi:"authRequired"`
	// Enable Basic Authentication at the location
	BasicAuthEnabled *bool `pulumi:"basicAuthEnabled"`
	// Enable Caution. When set to true, a caution notifcation is enabled for the location.
	CautionEnabled  *bool `pulumi:"cautionEnabled"`
	CookiesAndProxy *bool `pulumi:"cookiesAndProxy"`
	// Supported Countries
	Country *string `pulumi:"country"`
	// Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.
	Description *string `pulumi:"description"`
	// Enable Digest Authentication at the location
	DigestAuthEnabled *bool `pulumi:"digestAuthEnabled"`
	// Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.
	DisplayTimeUnit *string `pulumi:"displayTimeUnit"`
	// Download bandwidth in bytes. The value 0 implies no Bandwidth Control enforcement.
	DnBandwidth *int `pulumi:"dnBandwidth"`
	// Name-ID pairs of locations for which rule must be applied
	DynamicLocationGroups    *LocationManagementDynamicLocationGroups `pulumi:"dynamicLocationGroups"`
	ExcludeFromDynamicGroups *bool                                    `pulumi:"excludeFromDynamicGroups"`
	ExcludeFromManualGroups  *bool                                    `pulumi:"excludeFromManualGroups"`
	// Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.
	IdleTimeInMinutes *int `pulumi:"idleTimeInMinutes"`
	// Enable IOT Discovery at the location
	IotDiscoveryEnabled *bool `pulumi:"iotDiscoveryEnabled"`
	IotEnforcePolicySet *bool `pulumi:"iotEnforcePolicySet"`
	// For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP
	// address (e.g., 238.10.33.9).
	IpAddresses []string `pulumi:"ipAddresses"`
	// Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
	IpsControl *bool `pulumi:"ipsControl"`
	// (Optional) Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64
	// prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of
	// supported prefixes.
	Ipv6Dns64prefix *bool `pulumi:"ipv6Dns64prefix"`
	// If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler
	// service to enforce security policies.
	Ipv6Enabled *bool `pulumi:"ipv6Enabled"`
	// Enable Kerberos Authentication at the location
	KerberosAuthEnabled *bool `pulumi:"kerberosAuthEnabled"`
	LocationId          *int  `pulumi:"locationId"`
	// Location Name.
	Name *string `pulumi:"name"`
	// Enable Firewall. When set to true, Firewall is enabled for the location.
	OfwEnabled *bool `pulumi:"ofwEnabled"`
	// If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6
	// addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6
	// and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.
	Other6Sublocation *bool `pulumi:"other6Sublocation"`
	// If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4
	// addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other
	// and it can be renamed, if required.
	OtherSublocation *bool `pulumi:"otherSublocation"`
	// Parent Location ID. If this ID does not exist or is 0, it is implied that it is a parent location. Otherwise, it is a
	// sub-location whose parent has this ID. x-applicableTo: SUB
	ParentId *int `pulumi:"parentId"`
	// IP ports that are associated with the location.
	Ports *string `pulumi:"ports"`
	// Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`.
	Profile *string `pulumi:"profile"`
	// Enable SSL Inspection. Set to true in order to apply your SSL Inspection policy to HTTPS traffic in the location and
	// inspect HTTPS transactions for data leakage, malicious content, and viruses.
	SslScanEnabled *bool `pulumi:"sslScanEnabled"`
	// IP ports that are associated with the location.
	State *string `pulumi:"state"`
	// Name-ID pairs of locations for which rule must be applied
	StaticLocationGroups *LocationManagementStaticLocationGroups `pulumi:"staticLocationGroups"`
	// Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
	SurrogateIp *bool `pulumi:"surrogateIp"`
	// Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
	SurrogateIpEnforcedForKnownBrowsers *bool `pulumi:"surrogateIpEnforcedForKnownBrowsers"`
	// Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.
	SurrogateRefreshTimeInMinutes *int `pulumi:"surrogateRefreshTimeInMinutes"`
	// Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.
	SurrogateRefreshTimeUnit *string `pulumi:"surrogateRefreshTimeUnit"`
	// Timezone of the location. If not specified, it defaults to GMT.
	Tz *string `pulumi:"tz"`
	// Upload bandwidth in bytes. The value 0 implies no Bandwidth Control enforcement.
	UpBandwidth    *int                              `pulumi:"upBandwidth"`
	VpnCredentials []LocationManagementVpnCredential `pulumi:"vpnCredentials"`
	// Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
	XffForwardEnabled *bool `pulumi:"xffForwardEnabled"`
	// Enable Zscaler App SSL Setting. When set to true, the Zscaler App SSL Scan Setting will take effect, irrespective of the
	// SSL policy that is configured for the location.
	ZappSslScanEnabled *bool `pulumi:"zappSslScanEnabled"`
}

type LocationManagementState struct {
	// For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is
	// disabled until the user accepts the AUP.
	AupBlockInternetUntilAccepted pulumi.BoolPtrInput
	// Enable AUP. When set to true, AUP is enabled for the location.
	AupEnabled pulumi.BoolPtrInput
	// For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP
	// for HTTPS traffic.
	AupForceSslInspection pulumi.BoolPtrInput
	// Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.
	AupTimeoutInDays pulumi.IntPtrInput
	// Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
	AuthRequired pulumi.BoolPtrInput
	// Enable Basic Authentication at the location
	BasicAuthEnabled pulumi.BoolPtrInput
	// Enable Caution. When set to true, a caution notifcation is enabled for the location.
	CautionEnabled  pulumi.BoolPtrInput
	CookiesAndProxy pulumi.BoolPtrInput
	// Supported Countries
	Country pulumi.StringPtrInput
	// Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.
	Description pulumi.StringPtrInput
	// Enable Digest Authentication at the location
	DigestAuthEnabled pulumi.BoolPtrInput
	// Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.
	DisplayTimeUnit pulumi.StringPtrInput
	// Download bandwidth in bytes. The value 0 implies no Bandwidth Control enforcement.
	DnBandwidth pulumi.IntPtrInput
	// Name-ID pairs of locations for which rule must be applied
	DynamicLocationGroups    LocationManagementDynamicLocationGroupsPtrInput
	ExcludeFromDynamicGroups pulumi.BoolPtrInput
	ExcludeFromManualGroups  pulumi.BoolPtrInput
	// Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.
	IdleTimeInMinutes pulumi.IntPtrInput
	// Enable IOT Discovery at the location
	IotDiscoveryEnabled pulumi.BoolPtrInput
	IotEnforcePolicySet pulumi.BoolPtrInput
	// For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP
	// address (e.g., 238.10.33.9).
	IpAddresses pulumi.StringArrayInput
	// Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
	IpsControl pulumi.BoolPtrInput
	// (Optional) Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64
	// prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of
	// supported prefixes.
	Ipv6Dns64prefix pulumi.BoolPtrInput
	// If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler
	// service to enforce security policies.
	Ipv6Enabled pulumi.BoolPtrInput
	// Enable Kerberos Authentication at the location
	KerberosAuthEnabled pulumi.BoolPtrInput
	LocationId          pulumi.IntPtrInput
	// Location Name.
	Name pulumi.StringPtrInput
	// Enable Firewall. When set to true, Firewall is enabled for the location.
	OfwEnabled pulumi.BoolPtrInput
	// If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6
	// addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6
	// and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.
	Other6Sublocation pulumi.BoolPtrInput
	// If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4
	// addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other
	// and it can be renamed, if required.
	OtherSublocation pulumi.BoolPtrInput
	// Parent Location ID. If this ID does not exist or is 0, it is implied that it is a parent location. Otherwise, it is a
	// sub-location whose parent has this ID. x-applicableTo: SUB
	ParentId pulumi.IntPtrInput
	// IP ports that are associated with the location.
	Ports pulumi.StringPtrInput
	// Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`.
	Profile pulumi.StringPtrInput
	// Enable SSL Inspection. Set to true in order to apply your SSL Inspection policy to HTTPS traffic in the location and
	// inspect HTTPS transactions for data leakage, malicious content, and viruses.
	SslScanEnabled pulumi.BoolPtrInput
	// IP ports that are associated with the location.
	State pulumi.StringPtrInput
	// Name-ID pairs of locations for which rule must be applied
	StaticLocationGroups LocationManagementStaticLocationGroupsPtrInput
	// Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
	SurrogateIp pulumi.BoolPtrInput
	// Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
	SurrogateIpEnforcedForKnownBrowsers pulumi.BoolPtrInput
	// Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.
	SurrogateRefreshTimeInMinutes pulumi.IntPtrInput
	// Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.
	SurrogateRefreshTimeUnit pulumi.StringPtrInput
	// Timezone of the location. If not specified, it defaults to GMT.
	Tz pulumi.StringPtrInput
	// Upload bandwidth in bytes. The value 0 implies no Bandwidth Control enforcement.
	UpBandwidth    pulumi.IntPtrInput
	VpnCredentials LocationManagementVpnCredentialArrayInput
	// Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
	XffForwardEnabled pulumi.BoolPtrInput
	// Enable Zscaler App SSL Setting. When set to true, the Zscaler App SSL Scan Setting will take effect, irrespective of the
	// SSL policy that is configured for the location.
	ZappSslScanEnabled pulumi.BoolPtrInput
}

func (LocationManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationManagementState)(nil)).Elem()
}

type locationManagementArgs struct {
	// For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is
	// disabled until the user accepts the AUP.
	AupBlockInternetUntilAccepted *bool `pulumi:"aupBlockInternetUntilAccepted"`
	// Enable AUP. When set to true, AUP is enabled for the location.
	AupEnabled *bool `pulumi:"aupEnabled"`
	// For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP
	// for HTTPS traffic.
	AupForceSslInspection *bool `pulumi:"aupForceSslInspection"`
	// Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.
	AupTimeoutInDays *int `pulumi:"aupTimeoutInDays"`
	// Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
	AuthRequired *bool `pulumi:"authRequired"`
	// Enable Basic Authentication at the location
	BasicAuthEnabled *bool `pulumi:"basicAuthEnabled"`
	// Enable Caution. When set to true, a caution notifcation is enabled for the location.
	CautionEnabled  *bool `pulumi:"cautionEnabled"`
	CookiesAndProxy *bool `pulumi:"cookiesAndProxy"`
	// Supported Countries
	Country *string `pulumi:"country"`
	// Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.
	Description *string `pulumi:"description"`
	// Enable Digest Authentication at the location
	DigestAuthEnabled *bool `pulumi:"digestAuthEnabled"`
	// Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.
	DisplayTimeUnit *string `pulumi:"displayTimeUnit"`
	// Download bandwidth in bytes. The value 0 implies no Bandwidth Control enforcement.
	DnBandwidth *int `pulumi:"dnBandwidth"`
	// Name-ID pairs of locations for which rule must be applied
	DynamicLocationGroups    *LocationManagementDynamicLocationGroups `pulumi:"dynamicLocationGroups"`
	ExcludeFromDynamicGroups *bool                                    `pulumi:"excludeFromDynamicGroups"`
	ExcludeFromManualGroups  *bool                                    `pulumi:"excludeFromManualGroups"`
	// Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.
	IdleTimeInMinutes *int `pulumi:"idleTimeInMinutes"`
	// Enable IOT Discovery at the location
	IotDiscoveryEnabled *bool `pulumi:"iotDiscoveryEnabled"`
	IotEnforcePolicySet *bool `pulumi:"iotEnforcePolicySet"`
	// For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP
	// address (e.g., 238.10.33.9).
	IpAddresses []string `pulumi:"ipAddresses"`
	// Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
	IpsControl *bool `pulumi:"ipsControl"`
	// (Optional) Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64
	// prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of
	// supported prefixes.
	Ipv6Dns64prefix *bool `pulumi:"ipv6Dns64prefix"`
	// If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler
	// service to enforce security policies.
	Ipv6Enabled *bool `pulumi:"ipv6Enabled"`
	// Enable Kerberos Authentication at the location
	KerberosAuthEnabled *bool `pulumi:"kerberosAuthEnabled"`
	// Location Name.
	Name *string `pulumi:"name"`
	// Enable Firewall. When set to true, Firewall is enabled for the location.
	OfwEnabled *bool `pulumi:"ofwEnabled"`
	// If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6
	// addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6
	// and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.
	Other6Sublocation *bool `pulumi:"other6Sublocation"`
	// If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4
	// addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other
	// and it can be renamed, if required.
	OtherSublocation *bool `pulumi:"otherSublocation"`
	// Parent Location ID. If this ID does not exist or is 0, it is implied that it is a parent location. Otherwise, it is a
	// sub-location whose parent has this ID. x-applicableTo: SUB
	ParentId *int `pulumi:"parentId"`
	// IP ports that are associated with the location.
	Ports *string `pulumi:"ports"`
	// Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`.
	Profile *string `pulumi:"profile"`
	// Enable SSL Inspection. Set to true in order to apply your SSL Inspection policy to HTTPS traffic in the location and
	// inspect HTTPS transactions for data leakage, malicious content, and viruses.
	SslScanEnabled *bool `pulumi:"sslScanEnabled"`
	// IP ports that are associated with the location.
	State *string `pulumi:"state"`
	// Name-ID pairs of locations for which rule must be applied
	StaticLocationGroups *LocationManagementStaticLocationGroups `pulumi:"staticLocationGroups"`
	// Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
	SurrogateIp *bool `pulumi:"surrogateIp"`
	// Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
	SurrogateIpEnforcedForKnownBrowsers *bool `pulumi:"surrogateIpEnforcedForKnownBrowsers"`
	// Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.
	SurrogateRefreshTimeInMinutes *int `pulumi:"surrogateRefreshTimeInMinutes"`
	// Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.
	SurrogateRefreshTimeUnit *string `pulumi:"surrogateRefreshTimeUnit"`
	// Timezone of the location. If not specified, it defaults to GMT.
	Tz *string `pulumi:"tz"`
	// Upload bandwidth in bytes. The value 0 implies no Bandwidth Control enforcement.
	UpBandwidth    *int                              `pulumi:"upBandwidth"`
	VpnCredentials []LocationManagementVpnCredential `pulumi:"vpnCredentials"`
	// Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
	XffForwardEnabled *bool `pulumi:"xffForwardEnabled"`
	// Enable Zscaler App SSL Setting. When set to true, the Zscaler App SSL Scan Setting will take effect, irrespective of the
	// SSL policy that is configured for the location.
	ZappSslScanEnabled *bool `pulumi:"zappSslScanEnabled"`
}

// The set of arguments for constructing a LocationManagement resource.
type LocationManagementArgs struct {
	// For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is
	// disabled until the user accepts the AUP.
	AupBlockInternetUntilAccepted pulumi.BoolPtrInput
	// Enable AUP. When set to true, AUP is enabled for the location.
	AupEnabled pulumi.BoolPtrInput
	// For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP
	// for HTTPS traffic.
	AupForceSslInspection pulumi.BoolPtrInput
	// Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.
	AupTimeoutInDays pulumi.IntPtrInput
	// Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
	AuthRequired pulumi.BoolPtrInput
	// Enable Basic Authentication at the location
	BasicAuthEnabled pulumi.BoolPtrInput
	// Enable Caution. When set to true, a caution notifcation is enabled for the location.
	CautionEnabled  pulumi.BoolPtrInput
	CookiesAndProxy pulumi.BoolPtrInput
	// Supported Countries
	Country pulumi.StringPtrInput
	// Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.
	Description pulumi.StringPtrInput
	// Enable Digest Authentication at the location
	DigestAuthEnabled pulumi.BoolPtrInput
	// Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.
	DisplayTimeUnit pulumi.StringPtrInput
	// Download bandwidth in bytes. The value 0 implies no Bandwidth Control enforcement.
	DnBandwidth pulumi.IntPtrInput
	// Name-ID pairs of locations for which rule must be applied
	DynamicLocationGroups    LocationManagementDynamicLocationGroupsPtrInput
	ExcludeFromDynamicGroups pulumi.BoolPtrInput
	ExcludeFromManualGroups  pulumi.BoolPtrInput
	// Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.
	IdleTimeInMinutes pulumi.IntPtrInput
	// Enable IOT Discovery at the location
	IotDiscoveryEnabled pulumi.BoolPtrInput
	IotEnforcePolicySet pulumi.BoolPtrInput
	// For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP
	// address (e.g., 238.10.33.9).
	IpAddresses pulumi.StringArrayInput
	// Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
	IpsControl pulumi.BoolPtrInput
	// (Optional) Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64
	// prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of
	// supported prefixes.
	Ipv6Dns64prefix pulumi.BoolPtrInput
	// If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler
	// service to enforce security policies.
	Ipv6Enabled pulumi.BoolPtrInput
	// Enable Kerberos Authentication at the location
	KerberosAuthEnabled pulumi.BoolPtrInput
	// Location Name.
	Name pulumi.StringPtrInput
	// Enable Firewall. When set to true, Firewall is enabled for the location.
	OfwEnabled pulumi.BoolPtrInput
	// If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6
	// addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6
	// and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.
	Other6Sublocation pulumi.BoolPtrInput
	// If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4
	// addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other
	// and it can be renamed, if required.
	OtherSublocation pulumi.BoolPtrInput
	// Parent Location ID. If this ID does not exist or is 0, it is implied that it is a parent location. Otherwise, it is a
	// sub-location whose parent has this ID. x-applicableTo: SUB
	ParentId pulumi.IntPtrInput
	// IP ports that are associated with the location.
	Ports pulumi.StringPtrInput
	// Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`.
	Profile pulumi.StringPtrInput
	// Enable SSL Inspection. Set to true in order to apply your SSL Inspection policy to HTTPS traffic in the location and
	// inspect HTTPS transactions for data leakage, malicious content, and viruses.
	SslScanEnabled pulumi.BoolPtrInput
	// IP ports that are associated with the location.
	State pulumi.StringPtrInput
	// Name-ID pairs of locations for which rule must be applied
	StaticLocationGroups LocationManagementStaticLocationGroupsPtrInput
	// Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
	SurrogateIp pulumi.BoolPtrInput
	// Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
	SurrogateIpEnforcedForKnownBrowsers pulumi.BoolPtrInput
	// Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.
	SurrogateRefreshTimeInMinutes pulumi.IntPtrInput
	// Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.
	SurrogateRefreshTimeUnit pulumi.StringPtrInput
	// Timezone of the location. If not specified, it defaults to GMT.
	Tz pulumi.StringPtrInput
	// Upload bandwidth in bytes. The value 0 implies no Bandwidth Control enforcement.
	UpBandwidth    pulumi.IntPtrInput
	VpnCredentials LocationManagementVpnCredentialArrayInput
	// Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
	XffForwardEnabled pulumi.BoolPtrInput
	// Enable Zscaler App SSL Setting. When set to true, the Zscaler App SSL Scan Setting will take effect, irrespective of the
	// SSL policy that is configured for the location.
	ZappSslScanEnabled pulumi.BoolPtrInput
}

func (LocationManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationManagementArgs)(nil)).Elem()
}

type LocationManagementInput interface {
	pulumi.Input

	ToLocationManagementOutput() LocationManagementOutput
	ToLocationManagementOutputWithContext(ctx context.Context) LocationManagementOutput
}

func (*LocationManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationManagement)(nil)).Elem()
}

func (i *LocationManagement) ToLocationManagementOutput() LocationManagementOutput {
	return i.ToLocationManagementOutputWithContext(context.Background())
}

func (i *LocationManagement) ToLocationManagementOutputWithContext(ctx context.Context) LocationManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationManagementOutput)
}

// LocationManagementArrayInput is an input type that accepts LocationManagementArray and LocationManagementArrayOutput values.
// You can construct a concrete instance of `LocationManagementArrayInput` via:
//
//	LocationManagementArray{ LocationManagementArgs{...} }
type LocationManagementArrayInput interface {
	pulumi.Input

	ToLocationManagementArrayOutput() LocationManagementArrayOutput
	ToLocationManagementArrayOutputWithContext(context.Context) LocationManagementArrayOutput
}

type LocationManagementArray []LocationManagementInput

func (LocationManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocationManagement)(nil)).Elem()
}

func (i LocationManagementArray) ToLocationManagementArrayOutput() LocationManagementArrayOutput {
	return i.ToLocationManagementArrayOutputWithContext(context.Background())
}

func (i LocationManagementArray) ToLocationManagementArrayOutputWithContext(ctx context.Context) LocationManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationManagementArrayOutput)
}

// LocationManagementMapInput is an input type that accepts LocationManagementMap and LocationManagementMapOutput values.
// You can construct a concrete instance of `LocationManagementMapInput` via:
//
//	LocationManagementMap{ "key": LocationManagementArgs{...} }
type LocationManagementMapInput interface {
	pulumi.Input

	ToLocationManagementMapOutput() LocationManagementMapOutput
	ToLocationManagementMapOutputWithContext(context.Context) LocationManagementMapOutput
}

type LocationManagementMap map[string]LocationManagementInput

func (LocationManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocationManagement)(nil)).Elem()
}

func (i LocationManagementMap) ToLocationManagementMapOutput() LocationManagementMapOutput {
	return i.ToLocationManagementMapOutputWithContext(context.Background())
}

func (i LocationManagementMap) ToLocationManagementMapOutputWithContext(ctx context.Context) LocationManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationManagementMapOutput)
}

type LocationManagementOutput struct{ *pulumi.OutputState }

func (LocationManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LocationManagement)(nil)).Elem()
}

func (o LocationManagementOutput) ToLocationManagementOutput() LocationManagementOutput {
	return o
}

func (o LocationManagementOutput) ToLocationManagementOutputWithContext(ctx context.Context) LocationManagementOutput {
	return o
}

// For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is
// disabled until the user accepts the AUP.
func (o LocationManagementOutput) AupBlockInternetUntilAccepted() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.AupBlockInternetUntilAccepted }).(pulumi.BoolOutput)
}

// Enable AUP. When set to true, AUP is enabled for the location.
func (o LocationManagementOutput) AupEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.AupEnabled }).(pulumi.BoolOutput)
}

// For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP
// for HTTPS traffic.
func (o LocationManagementOutput) AupForceSslInspection() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.AupForceSslInspection }).(pulumi.BoolOutput)
}

// Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.
func (o LocationManagementOutput) AupTimeoutInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.IntPtrOutput { return v.AupTimeoutInDays }).(pulumi.IntPtrOutput)
}

// Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
func (o LocationManagementOutput) AuthRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.AuthRequired }).(pulumi.BoolOutput)
}

// Enable Basic Authentication at the location
func (o LocationManagementOutput) BasicAuthEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.BasicAuthEnabled }).(pulumi.BoolOutput)
}

// Enable Caution. When set to true, a caution notifcation is enabled for the location.
func (o LocationManagementOutput) CautionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.CautionEnabled }).(pulumi.BoolOutput)
}

func (o LocationManagementOutput) CookiesAndProxy() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.CookiesAndProxy }).(pulumi.BoolOutput)
}

// Supported Countries
func (o LocationManagementOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.StringOutput { return v.Country }).(pulumi.StringOutput)
}

// Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.
func (o LocationManagementOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enable Digest Authentication at the location
func (o LocationManagementOutput) DigestAuthEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.DigestAuthEnabled }).(pulumi.BoolOutput)
}

// Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.
func (o LocationManagementOutput) DisplayTimeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.StringPtrOutput { return v.DisplayTimeUnit }).(pulumi.StringPtrOutput)
}

// Download bandwidth in bytes. The value 0 implies no Bandwidth Control enforcement.
func (o LocationManagementOutput) DnBandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.IntPtrOutput { return v.DnBandwidth }).(pulumi.IntPtrOutput)
}

// Name-ID pairs of locations for which rule must be applied
func (o LocationManagementOutput) DynamicLocationGroups() LocationManagementDynamicLocationGroupsOutput {
	return o.ApplyT(func(v *LocationManagement) LocationManagementDynamicLocationGroupsOutput {
		return v.DynamicLocationGroups
	}).(LocationManagementDynamicLocationGroupsOutput)
}

func (o LocationManagementOutput) ExcludeFromDynamicGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolPtrOutput { return v.ExcludeFromDynamicGroups }).(pulumi.BoolPtrOutput)
}

func (o LocationManagementOutput) ExcludeFromManualGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolPtrOutput { return v.ExcludeFromManualGroups }).(pulumi.BoolPtrOutput)
}

// Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.
func (o LocationManagementOutput) IdleTimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.IntPtrOutput { return v.IdleTimeInMinutes }).(pulumi.IntPtrOutput)
}

// Enable IOT Discovery at the location
func (o LocationManagementOutput) IotDiscoveryEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.IotDiscoveryEnabled }).(pulumi.BoolOutput)
}

func (o LocationManagementOutput) IotEnforcePolicySet() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.IotEnforcePolicySet }).(pulumi.BoolOutput)
}

// For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP
// address (e.g., 238.10.33.9).
func (o LocationManagementOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.StringArrayOutput { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

// Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
func (o LocationManagementOutput) IpsControl() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.IpsControl }).(pulumi.BoolOutput)
}

// (Optional) Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64
// prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of
// supported prefixes.
func (o LocationManagementOutput) Ipv6Dns64prefix() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolPtrOutput { return v.Ipv6Dns64prefix }).(pulumi.BoolPtrOutput)
}

// If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler
// service to enforce security policies.
func (o LocationManagementOutput) Ipv6Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolPtrOutput { return v.Ipv6Enabled }).(pulumi.BoolPtrOutput)
}

// Enable Kerberos Authentication at the location
func (o LocationManagementOutput) KerberosAuthEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.KerberosAuthEnabled }).(pulumi.BoolOutput)
}

func (o LocationManagementOutput) LocationId() pulumi.IntOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.IntOutput { return v.LocationId }).(pulumi.IntOutput)
}

// Location Name.
func (o LocationManagementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable Firewall. When set to true, Firewall is enabled for the location.
func (o LocationManagementOutput) OfwEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.OfwEnabled }).(pulumi.BoolOutput)
}

// If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6
// addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6
// and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.
func (o LocationManagementOutput) Other6Sublocation() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.Other6Sublocation }).(pulumi.BoolOutput)
}

// If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4
// addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other
// and it can be renamed, if required.
func (o LocationManagementOutput) OtherSublocation() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.OtherSublocation }).(pulumi.BoolOutput)
}

// Parent Location ID. If this ID does not exist or is 0, it is implied that it is a parent location. Otherwise, it is a
// sub-location whose parent has this ID. x-applicableTo: SUB
func (o LocationManagementOutput) ParentId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.IntPtrOutput { return v.ParentId }).(pulumi.IntPtrOutput)
}

// IP ports that are associated with the location.
func (o LocationManagementOutput) Ports() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.StringPtrOutput { return v.Ports }).(pulumi.StringPtrOutput)
}

// Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`.
func (o LocationManagementOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.StringOutput { return v.Profile }).(pulumi.StringOutput)
}

// Enable SSL Inspection. Set to true in order to apply your SSL Inspection policy to HTTPS traffic in the location and
// inspect HTTPS transactions for data leakage, malicious content, and viruses.
func (o LocationManagementOutput) SslScanEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.SslScanEnabled }).(pulumi.BoolOutput)
}

// IP ports that are associated with the location.
func (o LocationManagementOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// Name-ID pairs of locations for which rule must be applied
func (o LocationManagementOutput) StaticLocationGroups() LocationManagementStaticLocationGroupsOutput {
	return o.ApplyT(func(v *LocationManagement) LocationManagementStaticLocationGroupsOutput {
		return v.StaticLocationGroups
	}).(LocationManagementStaticLocationGroupsOutput)
}

// Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
func (o LocationManagementOutput) SurrogateIp() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.SurrogateIp }).(pulumi.BoolOutput)
}

// Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
func (o LocationManagementOutput) SurrogateIpEnforcedForKnownBrowsers() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.SurrogateIpEnforcedForKnownBrowsers }).(pulumi.BoolOutput)
}

// Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.
func (o LocationManagementOutput) SurrogateRefreshTimeInMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.IntPtrOutput { return v.SurrogateRefreshTimeInMinutes }).(pulumi.IntPtrOutput)
}

// Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.
func (o LocationManagementOutput) SurrogateRefreshTimeUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.StringPtrOutput { return v.SurrogateRefreshTimeUnit }).(pulumi.StringPtrOutput)
}

// Timezone of the location. If not specified, it defaults to GMT.
func (o LocationManagementOutput) Tz() pulumi.StringOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.StringOutput { return v.Tz }).(pulumi.StringOutput)
}

// Upload bandwidth in bytes. The value 0 implies no Bandwidth Control enforcement.
func (o LocationManagementOutput) UpBandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.IntPtrOutput { return v.UpBandwidth }).(pulumi.IntPtrOutput)
}

func (o LocationManagementOutput) VpnCredentials() LocationManagementVpnCredentialArrayOutput {
	return o.ApplyT(func(v *LocationManagement) LocationManagementVpnCredentialArrayOutput { return v.VpnCredentials }).(LocationManagementVpnCredentialArrayOutput)
}

// Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
func (o LocationManagementOutput) XffForwardEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.XffForwardEnabled }).(pulumi.BoolOutput)
}

// Enable Zscaler App SSL Setting. When set to true, the Zscaler App SSL Scan Setting will take effect, irrespective of the
// SSL policy that is configured for the location.
func (o LocationManagementOutput) ZappSslScanEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *LocationManagement) pulumi.BoolOutput { return v.ZappSslScanEnabled }).(pulumi.BoolOutput)
}

type LocationManagementArrayOutput struct{ *pulumi.OutputState }

func (LocationManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LocationManagement)(nil)).Elem()
}

func (o LocationManagementArrayOutput) ToLocationManagementArrayOutput() LocationManagementArrayOutput {
	return o
}

func (o LocationManagementArrayOutput) ToLocationManagementArrayOutputWithContext(ctx context.Context) LocationManagementArrayOutput {
	return o
}

func (o LocationManagementArrayOutput) Index(i pulumi.IntInput) LocationManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LocationManagement {
		return vs[0].([]*LocationManagement)[vs[1].(int)]
	}).(LocationManagementOutput)
}

type LocationManagementMapOutput struct{ *pulumi.OutputState }

func (LocationManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LocationManagement)(nil)).Elem()
}

func (o LocationManagementMapOutput) ToLocationManagementMapOutput() LocationManagementMapOutput {
	return o
}

func (o LocationManagementMapOutput) ToLocationManagementMapOutputWithContext(ctx context.Context) LocationManagementMapOutput {
	return o
}

func (o LocationManagementMapOutput) MapIndex(k pulumi.StringInput) LocationManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LocationManagement {
		return vs[0].(map[string]*LocationManagement)[vs[1].(string)]
	}).(LocationManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationManagementInput)(nil)).Elem(), &LocationManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationManagementArrayInput)(nil)).Elem(), LocationManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationManagementMapInput)(nil)).Elem(), LocationManagementMap{})
	pulumi.RegisterOutputType(LocationManagementOutput{})
	pulumi.RegisterOutputType(LocationManagementArrayOutput{})
	pulumi.RegisterOutputType(LocationManagementMapOutput{})
}
