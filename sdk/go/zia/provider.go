// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// The provider type for the zia package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	ApiKey pulumi.StringPtrOutput `pulumi:"apiKey"`
	// zpa client id
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// zpa client secret
	ClientSecret pulumi.StringPtrOutput `pulumi:"clientSecret"`
	// Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
	HttpProxy pulumi.StringPtrOutput `pulumi:"httpProxy"`
	Password  pulumi.StringPtrOutput `pulumi:"password"`
	// zpa private key
	PrivateKey pulumi.StringPtrOutput `pulumi:"privateKey"`
	// Zscaler Sandbox Cloud
	SandboxCloud pulumi.StringPtrOutput `pulumi:"sandboxCloud"`
	// Zscaler Sandbox Token
	SandboxToken pulumi.StringPtrOutput `pulumi:"sandboxToken"`
	Username     pulumi.StringPtrOutput `pulumi:"username"`
	// Zscaler Vanity Domain
	VanityDomain pulumi.StringPtrOutput `pulumi:"vanityDomain"`
	ZiaCloud     pulumi.StringPtrOutput `pulumi:"ziaCloud"`
	// Zscaler Cloud Name
	ZscalerCloud pulumi.StringPtrOutput `pulumi:"zscalerCloud"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.ApiKey == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZIA_API_KEY"); d != nil {
			args.ApiKey = pulumi.StringPtr(d.(string))
		}
	}
	if args.ClientId == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZSCALER_CLIENT_ID"); d != nil {
			args.ClientId = pulumi.StringPtr(d.(string))
		}
	}
	if args.ClientSecret == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZSCALER_CLIENT_SECRET"); d != nil {
			args.ClientSecret = pulumi.StringPtr(d.(string))
		}
	}
	if args.Password == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZIA_PASSWORD"); d != nil {
			args.Password = pulumi.StringPtr(d.(string))
		}
	}
	if args.PrivateKey == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZSCALER_PRIVATE_KEY"); d != nil {
			args.PrivateKey = pulumi.StringPtr(d.(string))
		}
	}
	if args.SandboxCloud == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZSCALER_SANDBOX_CLOUD"); d != nil {
			args.SandboxCloud = pulumi.StringPtr(d.(string))
		}
	}
	if args.SandboxToken == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZSCALER_SANDBOX_TOKEN"); d != nil {
			args.SandboxToken = pulumi.StringPtr(d.(string))
		}
	}
	if args.UseLegacyClient == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "ZSCALER_USE_LEGACY_CLIENT"); d != nil {
			args.UseLegacyClient = pulumi.BoolPtr(d.(bool))
		}
	}
	if args.Username == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZIA_USERNAME"); d != nil {
			args.Username = pulumi.StringPtr(d.(string))
		}
	}
	if args.VanityDomain == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZSCALER_VANITY_DOMAIN"); d != nil {
			args.VanityDomain = pulumi.StringPtr(d.(string))
		}
	}
	if args.ZiaCloud == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZIA_CLOUD"); d != nil {
			args.ZiaCloud = pulumi.StringPtr(d.(string))
		}
	}
	if args.ZscalerCloud == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "ZSCALER_CLOUD"); d != nil {
			args.ZscalerCloud = pulumi.StringPtr(d.(string))
		}
	}
	if args.ApiKey != nil {
		args.ApiKey = pulumi.ToSecret(args.ApiKey).(pulumi.StringPtrInput)
	}
	if args.ClientSecret != nil {
		args.ClientSecret = pulumi.ToSecret(args.ClientSecret).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	if args.PrivateKey != nil {
		args.PrivateKey = pulumi.ToSecret(args.PrivateKey).(pulumi.StringPtrInput)
	}
	if args.SandboxCloud != nil {
		args.SandboxCloud = pulumi.ToSecret(args.SandboxCloud).(pulumi.StringPtrInput)
	}
	if args.SandboxToken != nil {
		args.SandboxToken = pulumi.ToSecret(args.SandboxToken).(pulumi.StringPtrInput)
	}
	if args.VanityDomain != nil {
		args.VanityDomain = pulumi.ToSecret(args.VanityDomain).(pulumi.StringPtrInput)
	}
	if args.ZscalerCloud != nil {
		args.ZscalerCloud = pulumi.ToSecret(args.ZscalerCloud).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"apiKey",
		"clientSecret",
		"password",
		"privateKey",
		"sandboxCloud",
		"sandboxToken",
		"vanityDomain",
		"zscalerCloud",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:zia", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	ApiKey *string `pulumi:"apiKey"`
	// zpa client id
	ClientId *string `pulumi:"clientId"`
	// zpa client secret
	ClientSecret *string `pulumi:"clientSecret"`
	// Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
	HttpProxy *string `pulumi:"httpProxy"`
	// maximum number of retries to attempt before erroring out.
	MaxRetries *int `pulumi:"maxRetries"`
	// Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
	// https://help.zscaler.com/oneapi/understanding-rate-limiting.
	Parallelism *int    `pulumi:"parallelism"`
	Password    *string `pulumi:"password"`
	// zpa private key
	PrivateKey *string `pulumi:"privateKey"`
	// Timeout for single request (in seconds) which is made to Zscaler, the default is `0` (means no limit is set). The
	// maximum value can be `300`.
	RequestTimeout *int `pulumi:"requestTimeout"`
	// Zscaler Sandbox Cloud
	SandboxCloud *string `pulumi:"sandboxCloud"`
	// Zscaler Sandbox Token
	SandboxToken    *string `pulumi:"sandboxToken"`
	UseLegacyClient *bool   `pulumi:"useLegacyClient"`
	Username        *string `pulumi:"username"`
	// Zscaler Vanity Domain
	VanityDomain *string `pulumi:"vanityDomain"`
	ZiaCloud     *string `pulumi:"ziaCloud"`
	// Zscaler Cloud Name
	ZscalerCloud *string `pulumi:"zscalerCloud"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	ApiKey pulumi.StringPtrInput
	// zpa client id
	ClientId pulumi.StringPtrInput
	// zpa client secret
	ClientSecret pulumi.StringPtrInput
	// Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
	HttpProxy pulumi.StringPtrInput
	// maximum number of retries to attempt before erroring out.
	MaxRetries pulumi.IntPtrInput
	// Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
	// https://help.zscaler.com/oneapi/understanding-rate-limiting.
	Parallelism pulumi.IntPtrInput
	Password    pulumi.StringPtrInput
	// zpa private key
	PrivateKey pulumi.StringPtrInput
	// Timeout for single request (in seconds) which is made to Zscaler, the default is `0` (means no limit is set). The
	// maximum value can be `300`.
	RequestTimeout pulumi.IntPtrInput
	// Zscaler Sandbox Cloud
	SandboxCloud pulumi.StringPtrInput
	// Zscaler Sandbox Token
	SandboxToken    pulumi.StringPtrInput
	UseLegacyClient pulumi.BoolPtrInput
	Username        pulumi.StringPtrInput
	// Zscaler Vanity Domain
	VanityDomain pulumi.StringPtrInput
	ZiaCloud     pulumi.StringPtrInput
	// Zscaler Cloud Name
	ZscalerCloud pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
func (r *Provider) TerraformConfig(ctx *pulumi.Context) (ProviderTerraformConfigResultOutput, error) {
	out, err := ctx.Call("pulumi:providers:zia/terraformConfig", nil, ProviderTerraformConfigResultOutput{}, r)
	if err != nil {
		return ProviderTerraformConfigResultOutput{}, err
	}
	return out.(ProviderTerraformConfigResultOutput), nil
}

type ProviderTerraformConfigResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

type ProviderTerraformConfigResultOutput struct{ *pulumi.OutputState }

func (ProviderTerraformConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTerraformConfigResult)(nil)).Elem()
}

func (o ProviderTerraformConfigResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v ProviderTerraformConfigResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) ApiKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ApiKey }).(pulumi.StringPtrOutput)
}

// zpa client id
func (o ProviderOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// zpa client secret
func (o ProviderOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
func (o ProviderOutput) HttpProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.HttpProxy }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// zpa private key
func (o ProviderOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Zscaler Sandbox Cloud
func (o ProviderOutput) SandboxCloud() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.SandboxCloud }).(pulumi.StringPtrOutput)
}

// Zscaler Sandbox Token
func (o ProviderOutput) SandboxToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.SandboxToken }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

// Zscaler Vanity Domain
func (o ProviderOutput) VanityDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.VanityDomain }).(pulumi.StringPtrOutput)
}

func (o ProviderOutput) ZiaCloud() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ZiaCloud }).(pulumi.StringPtrOutput)
}

// Zscaler Cloud Name
func (o ProviderOutput) ZscalerCloud() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ZscalerCloud }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderTerraformConfigResultOutput{})
}
