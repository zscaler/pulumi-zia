// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// The **zia_firewall_filtering_rule** resource allows the creation and management of ZIA Cloud Firewall filtering rules in the Zscaler Internet Access.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zscalerProxyNwServices, err := zia.LookupFirewallFilteringNetworkServices(ctx, &zia.LookupFirewallFilteringNetworkServicesArgs{
//				Name: pulumi.StringRef("ZSCALER_PROXY_NW_SERVICES"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			engineering, err := zia.GetDepartmentManagement(ctx, &zia.GetDepartmentManagementArgs{
//				Name: pulumi.StringRef("Engineering"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			normalInternet, err := zia.GetGroupManagement(ctx, &zia.GetGroupManagementArgs{
//				Name: pulumi.StringRef("Normal_Internet"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			workHours, err := zia.GetTimeWindow(ctx, &zia.GetTimeWindowArgs{
//				Name: pulumi.StringRef("Work hours"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = zia.NewFirewallFilteringRule(ctx, "example", &zia.FirewallFilteringRuleArgs{
//				Description:       pulumi.String("Example"),
//				Action:            pulumi.String("ALLOW"),
//				State:             pulumi.String("ENABLED"),
//				Order:             pulumi.Int(1),
//				EnableFullLogging: pulumi.Bool(true),
//				NwServices: &zia.FirewallFilteringRuleNwServicesArgs{
//					Ids: pulumi.IntArray{
//						pulumi.Int(zscalerProxyNwServices.Id),
//					},
//				},
//				Departments: &zia.FirewallFilteringRuleDepartmentsArgs{
//					Ids: pulumi.IntArray{
//						pulumi.Int(engineering.Id),
//					},
//				},
//				Groups: &zia.FirewallFilteringRuleGroupsArgs{
//					Ids: pulumi.IntArray{
//						pulumi.Int(normalInternet.Id),
//					},
//				},
//				TimeWindows: &zia.FirewallFilteringRuleTimeWindowsArgs{
//					Ids: pulumi.IntArray{
//						pulumi.Int(workHours.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
//
// # Visit
//
// **zia_firewall_filtering_rule** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.
//
// For example:
//
// ```sh
// $ pulumi import zia:index/firewallFilteringRule:FirewallFilteringRule example <rule_id>
// ```
//
// or
//
// ```sh
// $ pulumi import zia:index/firewallFilteringRule:FirewallFilteringRule example <rule_name>
// ```
type FirewallFilteringRule struct {
	pulumi.CustomResourceState

	// The action the Firewall Filtering policy rule takes when packets match the rule
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// list of application service groups
	AppServiceGroups FirewallFilteringRuleAppServiceGroupsOutput `pulumi:"appServiceGroups"`
	// list of application services
	AppServices FirewallFilteringRuleAppServicesOutput `pulumi:"appServices"`
	// If set to true, the default rule is applied
	DefaultRule pulumi.BoolPtrOutput `pulumi:"defaultRule"`
	// list of departments for which rule must be applied
	Departments FirewallFilteringRuleDepartmentsOutput `pulumi:"departments"`
	// Additional information about the rule
	Description   pulumi.StringPtrOutput   `pulumi:"description"`
	DestAddresses pulumi.StringArrayOutput `pulumi:"destAddresses"`
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	DestCountries    pulumi.StringArrayOutput `pulumi:"destCountries"`
	DestIpCategories pulumi.StringArrayOutput `pulumi:"destIpCategories"`
	// list of destination ip groups
	DestIpGroups FirewallFilteringRuleDestIpGroupsOutput `pulumi:"destIpGroups"`
	// This field is applicable for devices that are managed using Zscaler Client Connector.
	DeviceGroups FirewallFilteringRuleDeviceGroupsOutput `pulumi:"deviceGroups"`
	// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
	// using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
	// Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
	DeviceTrustLevels pulumi.StringArrayOutput `pulumi:"deviceTrustLevels"`
	// Name-ID pairs of devices for which rule must be applied.
	Devices           FirewallFilteringRuleDevicesOutput `pulumi:"devices"`
	EnableFullLogging pulumi.BoolPtrOutput               `pulumi:"enableFullLogging"`
	// list of groups for which rule must be applied
	Groups FirewallFilteringRuleGroupsOutput `pulumi:"groups"`
	// list of Labels that are applicable to the rule.
	Labels FirewallFilteringRuleLabelsOutput `pulumi:"labels"`
	// list of locations groups
	LocationGroups FirewallFilteringRuleLocationGroupsOutput `pulumi:"locationGroups"`
	// list of locations for which rule must be applied
	Locations FirewallFilteringRuleLocationsOutput `pulumi:"locations"`
	// Name of the Firewall Filtering policy rule
	Name pulumi.StringOutput `pulumi:"name"`
	// list of nw application groups
	NwApplicationGroups FirewallFilteringRuleNwApplicationGroupsOutput `pulumi:"nwApplicationGroups"`
	// User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
	// specific network service application.
	NwApplications pulumi.StringArrayOutput `pulumi:"nwApplications"`
	// list of nw service groups
	NwServiceGroups FirewallFilteringRuleNwServiceGroupsOutput `pulumi:"nwServiceGroups"`
	// list of nw services
	NwServices FirewallFilteringRuleNwServicesOutput `pulumi:"nwServices"`
	// Rule order number of the Firewall Filtering policy rule
	Order pulumi.IntOutput `pulumi:"order"`
	// If set to true, a predefined rule is applied
	Predefined pulumi.BoolPtrOutput `pulumi:"predefined"`
	// Admin rank of the Firewall Filtering policy rule
	Rank   pulumi.IntPtrOutput `pulumi:"rank"`
	RuleId pulumi.IntOutput    `pulumi:"ruleId"`
	// list of source ip groups
	SrcIpGroups FirewallFilteringRuleSrcIpGroupsOutput `pulumi:"srcIpGroups"`
	// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
	// source IP address.
	SrcIps pulumi.StringArrayOutput `pulumi:"srcIps"`
	// Determines whether the Firewall Filtering policy rule is enabled or disabled
	State pulumi.StringPtrOutput `pulumi:"state"`
	// The time interval in which the Firewall Filtering policy rule applies
	TimeWindows FirewallFilteringRuleTimeWindowsOutput `pulumi:"timeWindows"`
	// list of users for which rule must be applied
	Users FirewallFilteringRuleUsersOutput `pulumi:"users"`
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups FirewallFilteringRuleWorkloadGroupArrayOutput `pulumi:"workloadGroups"`
	// The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
	// Gateway forwarding method.
	ZpaAppSegments FirewallFilteringRuleZpaAppSegmentArrayOutput `pulumi:"zpaAppSegments"`
}

// NewFirewallFilteringRule registers a new resource with the given unique name, arguments, and options.
func NewFirewallFilteringRule(ctx *pulumi.Context,
	name string, args *FirewallFilteringRuleArgs, opts ...pulumi.ResourceOption) (*FirewallFilteringRule, error) {
	if args == nil {
		args = &FirewallFilteringRuleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FirewallFilteringRule
	err := ctx.RegisterResource("zia:index/firewallFilteringRule:FirewallFilteringRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallFilteringRule gets an existing FirewallFilteringRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallFilteringRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallFilteringRuleState, opts ...pulumi.ResourceOption) (*FirewallFilteringRule, error) {
	var resource FirewallFilteringRule
	err := ctx.ReadResource("zia:index/firewallFilteringRule:FirewallFilteringRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallFilteringRule resources.
type firewallFilteringRuleState struct {
	// The action the Firewall Filtering policy rule takes when packets match the rule
	Action *string `pulumi:"action"`
	// list of application service groups
	AppServiceGroups *FirewallFilteringRuleAppServiceGroups `pulumi:"appServiceGroups"`
	// list of application services
	AppServices *FirewallFilteringRuleAppServices `pulumi:"appServices"`
	// If set to true, the default rule is applied
	DefaultRule *bool `pulumi:"defaultRule"`
	// list of departments for which rule must be applied
	Departments *FirewallFilteringRuleDepartments `pulumi:"departments"`
	// Additional information about the rule
	Description   *string  `pulumi:"description"`
	DestAddresses []string `pulumi:"destAddresses"`
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	DestCountries    []string `pulumi:"destCountries"`
	DestIpCategories []string `pulumi:"destIpCategories"`
	// list of destination ip groups
	DestIpGroups *FirewallFilteringRuleDestIpGroups `pulumi:"destIpGroups"`
	// This field is applicable for devices that are managed using Zscaler Client Connector.
	DeviceGroups *FirewallFilteringRuleDeviceGroups `pulumi:"deviceGroups"`
	// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
	// using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
	// Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
	DeviceTrustLevels []string `pulumi:"deviceTrustLevels"`
	// Name-ID pairs of devices for which rule must be applied.
	Devices           *FirewallFilteringRuleDevices `pulumi:"devices"`
	EnableFullLogging *bool                         `pulumi:"enableFullLogging"`
	// list of groups for which rule must be applied
	Groups *FirewallFilteringRuleGroups `pulumi:"groups"`
	// list of Labels that are applicable to the rule.
	Labels *FirewallFilteringRuleLabels `pulumi:"labels"`
	// list of locations groups
	LocationGroups *FirewallFilteringRuleLocationGroups `pulumi:"locationGroups"`
	// list of locations for which rule must be applied
	Locations *FirewallFilteringRuleLocations `pulumi:"locations"`
	// Name of the Firewall Filtering policy rule
	Name *string `pulumi:"name"`
	// list of nw application groups
	NwApplicationGroups *FirewallFilteringRuleNwApplicationGroups `pulumi:"nwApplicationGroups"`
	// User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
	// specific network service application.
	NwApplications []string `pulumi:"nwApplications"`
	// list of nw service groups
	NwServiceGroups *FirewallFilteringRuleNwServiceGroups `pulumi:"nwServiceGroups"`
	// list of nw services
	NwServices *FirewallFilteringRuleNwServices `pulumi:"nwServices"`
	// Rule order number of the Firewall Filtering policy rule
	Order *int `pulumi:"order"`
	// If set to true, a predefined rule is applied
	Predefined *bool `pulumi:"predefined"`
	// Admin rank of the Firewall Filtering policy rule
	Rank   *int `pulumi:"rank"`
	RuleId *int `pulumi:"ruleId"`
	// list of source ip groups
	SrcIpGroups *FirewallFilteringRuleSrcIpGroups `pulumi:"srcIpGroups"`
	// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
	// source IP address.
	SrcIps []string `pulumi:"srcIps"`
	// Determines whether the Firewall Filtering policy rule is enabled or disabled
	State *string `pulumi:"state"`
	// The time interval in which the Firewall Filtering policy rule applies
	TimeWindows *FirewallFilteringRuleTimeWindows `pulumi:"timeWindows"`
	// list of users for which rule must be applied
	Users *FirewallFilteringRuleUsers `pulumi:"users"`
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups []FirewallFilteringRuleWorkloadGroup `pulumi:"workloadGroups"`
	// The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
	// Gateway forwarding method.
	ZpaAppSegments []FirewallFilteringRuleZpaAppSegment `pulumi:"zpaAppSegments"`
}

type FirewallFilteringRuleState struct {
	// The action the Firewall Filtering policy rule takes when packets match the rule
	Action pulumi.StringPtrInput
	// list of application service groups
	AppServiceGroups FirewallFilteringRuleAppServiceGroupsPtrInput
	// list of application services
	AppServices FirewallFilteringRuleAppServicesPtrInput
	// If set to true, the default rule is applied
	DefaultRule pulumi.BoolPtrInput
	// list of departments for which rule must be applied
	Departments FirewallFilteringRuleDepartmentsPtrInput
	// Additional information about the rule
	Description   pulumi.StringPtrInput
	DestAddresses pulumi.StringArrayInput
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	DestCountries    pulumi.StringArrayInput
	DestIpCategories pulumi.StringArrayInput
	// list of destination ip groups
	DestIpGroups FirewallFilteringRuleDestIpGroupsPtrInput
	// This field is applicable for devices that are managed using Zscaler Client Connector.
	DeviceGroups FirewallFilteringRuleDeviceGroupsPtrInput
	// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
	// using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
	// Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
	DeviceTrustLevels pulumi.StringArrayInput
	// Name-ID pairs of devices for which rule must be applied.
	Devices           FirewallFilteringRuleDevicesPtrInput
	EnableFullLogging pulumi.BoolPtrInput
	// list of groups for which rule must be applied
	Groups FirewallFilteringRuleGroupsPtrInput
	// list of Labels that are applicable to the rule.
	Labels FirewallFilteringRuleLabelsPtrInput
	// list of locations groups
	LocationGroups FirewallFilteringRuleLocationGroupsPtrInput
	// list of locations for which rule must be applied
	Locations FirewallFilteringRuleLocationsPtrInput
	// Name of the Firewall Filtering policy rule
	Name pulumi.StringPtrInput
	// list of nw application groups
	NwApplicationGroups FirewallFilteringRuleNwApplicationGroupsPtrInput
	// User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
	// specific network service application.
	NwApplications pulumi.StringArrayInput
	// list of nw service groups
	NwServiceGroups FirewallFilteringRuleNwServiceGroupsPtrInput
	// list of nw services
	NwServices FirewallFilteringRuleNwServicesPtrInput
	// Rule order number of the Firewall Filtering policy rule
	Order pulumi.IntPtrInput
	// If set to true, a predefined rule is applied
	Predefined pulumi.BoolPtrInput
	// Admin rank of the Firewall Filtering policy rule
	Rank   pulumi.IntPtrInput
	RuleId pulumi.IntPtrInput
	// list of source ip groups
	SrcIpGroups FirewallFilteringRuleSrcIpGroupsPtrInput
	// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
	// source IP address.
	SrcIps pulumi.StringArrayInput
	// Determines whether the Firewall Filtering policy rule is enabled or disabled
	State pulumi.StringPtrInput
	// The time interval in which the Firewall Filtering policy rule applies
	TimeWindows FirewallFilteringRuleTimeWindowsPtrInput
	// list of users for which rule must be applied
	Users FirewallFilteringRuleUsersPtrInput
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups FirewallFilteringRuleWorkloadGroupArrayInput
	// The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
	// Gateway forwarding method.
	ZpaAppSegments FirewallFilteringRuleZpaAppSegmentArrayInput
}

func (FirewallFilteringRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallFilteringRuleState)(nil)).Elem()
}

type firewallFilteringRuleArgs struct {
	// The action the Firewall Filtering policy rule takes when packets match the rule
	Action *string `pulumi:"action"`
	// list of application service groups
	AppServiceGroups *FirewallFilteringRuleAppServiceGroups `pulumi:"appServiceGroups"`
	// list of application services
	AppServices *FirewallFilteringRuleAppServices `pulumi:"appServices"`
	// If set to true, the default rule is applied
	DefaultRule *bool `pulumi:"defaultRule"`
	// list of departments for which rule must be applied
	Departments *FirewallFilteringRuleDepartments `pulumi:"departments"`
	// Additional information about the rule
	Description   *string  `pulumi:"description"`
	DestAddresses []string `pulumi:"destAddresses"`
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	DestCountries    []string `pulumi:"destCountries"`
	DestIpCategories []string `pulumi:"destIpCategories"`
	// list of destination ip groups
	DestIpGroups *FirewallFilteringRuleDestIpGroups `pulumi:"destIpGroups"`
	// This field is applicable for devices that are managed using Zscaler Client Connector.
	DeviceGroups *FirewallFilteringRuleDeviceGroups `pulumi:"deviceGroups"`
	// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
	// using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
	// Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
	DeviceTrustLevels []string `pulumi:"deviceTrustLevels"`
	// Name-ID pairs of devices for which rule must be applied.
	Devices           *FirewallFilteringRuleDevices `pulumi:"devices"`
	EnableFullLogging *bool                         `pulumi:"enableFullLogging"`
	// list of groups for which rule must be applied
	Groups *FirewallFilteringRuleGroups `pulumi:"groups"`
	// list of Labels that are applicable to the rule.
	Labels *FirewallFilteringRuleLabels `pulumi:"labels"`
	// list of locations groups
	LocationGroups *FirewallFilteringRuleLocationGroups `pulumi:"locationGroups"`
	// list of locations for which rule must be applied
	Locations *FirewallFilteringRuleLocations `pulumi:"locations"`
	// Name of the Firewall Filtering policy rule
	Name *string `pulumi:"name"`
	// list of nw application groups
	NwApplicationGroups *FirewallFilteringRuleNwApplicationGroups `pulumi:"nwApplicationGroups"`
	// User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
	// specific network service application.
	NwApplications []string `pulumi:"nwApplications"`
	// list of nw service groups
	NwServiceGroups *FirewallFilteringRuleNwServiceGroups `pulumi:"nwServiceGroups"`
	// list of nw services
	NwServices *FirewallFilteringRuleNwServices `pulumi:"nwServices"`
	// Rule order number of the Firewall Filtering policy rule
	Order *int `pulumi:"order"`
	// If set to true, a predefined rule is applied
	Predefined *bool `pulumi:"predefined"`
	// Admin rank of the Firewall Filtering policy rule
	Rank *int `pulumi:"rank"`
	// list of source ip groups
	SrcIpGroups *FirewallFilteringRuleSrcIpGroups `pulumi:"srcIpGroups"`
	// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
	// source IP address.
	SrcIps []string `pulumi:"srcIps"`
	// Determines whether the Firewall Filtering policy rule is enabled or disabled
	State *string `pulumi:"state"`
	// The time interval in which the Firewall Filtering policy rule applies
	TimeWindows *FirewallFilteringRuleTimeWindows `pulumi:"timeWindows"`
	// list of users for which rule must be applied
	Users *FirewallFilteringRuleUsers `pulumi:"users"`
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups []FirewallFilteringRuleWorkloadGroup `pulumi:"workloadGroups"`
	// The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
	// Gateway forwarding method.
	ZpaAppSegments []FirewallFilteringRuleZpaAppSegment `pulumi:"zpaAppSegments"`
}

// The set of arguments for constructing a FirewallFilteringRule resource.
type FirewallFilteringRuleArgs struct {
	// The action the Firewall Filtering policy rule takes when packets match the rule
	Action pulumi.StringPtrInput
	// list of application service groups
	AppServiceGroups FirewallFilteringRuleAppServiceGroupsPtrInput
	// list of application services
	AppServices FirewallFilteringRuleAppServicesPtrInput
	// If set to true, the default rule is applied
	DefaultRule pulumi.BoolPtrInput
	// list of departments for which rule must be applied
	Departments FirewallFilteringRuleDepartmentsPtrInput
	// Additional information about the rule
	Description   pulumi.StringPtrInput
	DestAddresses pulumi.StringArrayInput
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	DestCountries    pulumi.StringArrayInput
	DestIpCategories pulumi.StringArrayInput
	// list of destination ip groups
	DestIpGroups FirewallFilteringRuleDestIpGroupsPtrInput
	// This field is applicable for devices that are managed using Zscaler Client Connector.
	DeviceGroups FirewallFilteringRuleDeviceGroupsPtrInput
	// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
	// using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
	// Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
	DeviceTrustLevels pulumi.StringArrayInput
	// Name-ID pairs of devices for which rule must be applied.
	Devices           FirewallFilteringRuleDevicesPtrInput
	EnableFullLogging pulumi.BoolPtrInput
	// list of groups for which rule must be applied
	Groups FirewallFilteringRuleGroupsPtrInput
	// list of Labels that are applicable to the rule.
	Labels FirewallFilteringRuleLabelsPtrInput
	// list of locations groups
	LocationGroups FirewallFilteringRuleLocationGroupsPtrInput
	// list of locations for which rule must be applied
	Locations FirewallFilteringRuleLocationsPtrInput
	// Name of the Firewall Filtering policy rule
	Name pulumi.StringPtrInput
	// list of nw application groups
	NwApplicationGroups FirewallFilteringRuleNwApplicationGroupsPtrInput
	// User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
	// specific network service application.
	NwApplications pulumi.StringArrayInput
	// list of nw service groups
	NwServiceGroups FirewallFilteringRuleNwServiceGroupsPtrInput
	// list of nw services
	NwServices FirewallFilteringRuleNwServicesPtrInput
	// Rule order number of the Firewall Filtering policy rule
	Order pulumi.IntPtrInput
	// If set to true, a predefined rule is applied
	Predefined pulumi.BoolPtrInput
	// Admin rank of the Firewall Filtering policy rule
	Rank pulumi.IntPtrInput
	// list of source ip groups
	SrcIpGroups FirewallFilteringRuleSrcIpGroupsPtrInput
	// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
	// source IP address.
	SrcIps pulumi.StringArrayInput
	// Determines whether the Firewall Filtering policy rule is enabled or disabled
	State pulumi.StringPtrInput
	// The time interval in which the Firewall Filtering policy rule applies
	TimeWindows FirewallFilteringRuleTimeWindowsPtrInput
	// list of users for which rule must be applied
	Users FirewallFilteringRuleUsersPtrInput
	// The list of preconfigured workload groups to which the policy must be applied
	WorkloadGroups FirewallFilteringRuleWorkloadGroupArrayInput
	// The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
	// Gateway forwarding method.
	ZpaAppSegments FirewallFilteringRuleZpaAppSegmentArrayInput
}

func (FirewallFilteringRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallFilteringRuleArgs)(nil)).Elem()
}

type FirewallFilteringRuleInput interface {
	pulumi.Input

	ToFirewallFilteringRuleOutput() FirewallFilteringRuleOutput
	ToFirewallFilteringRuleOutputWithContext(ctx context.Context) FirewallFilteringRuleOutput
}

func (*FirewallFilteringRule) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallFilteringRule)(nil)).Elem()
}

func (i *FirewallFilteringRule) ToFirewallFilteringRuleOutput() FirewallFilteringRuleOutput {
	return i.ToFirewallFilteringRuleOutputWithContext(context.Background())
}

func (i *FirewallFilteringRule) ToFirewallFilteringRuleOutputWithContext(ctx context.Context) FirewallFilteringRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallFilteringRuleOutput)
}

// FirewallFilteringRuleArrayInput is an input type that accepts FirewallFilteringRuleArray and FirewallFilteringRuleArrayOutput values.
// You can construct a concrete instance of `FirewallFilteringRuleArrayInput` via:
//
//	FirewallFilteringRuleArray{ FirewallFilteringRuleArgs{...} }
type FirewallFilteringRuleArrayInput interface {
	pulumi.Input

	ToFirewallFilteringRuleArrayOutput() FirewallFilteringRuleArrayOutput
	ToFirewallFilteringRuleArrayOutputWithContext(context.Context) FirewallFilteringRuleArrayOutput
}

type FirewallFilteringRuleArray []FirewallFilteringRuleInput

func (FirewallFilteringRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallFilteringRule)(nil)).Elem()
}

func (i FirewallFilteringRuleArray) ToFirewallFilteringRuleArrayOutput() FirewallFilteringRuleArrayOutput {
	return i.ToFirewallFilteringRuleArrayOutputWithContext(context.Background())
}

func (i FirewallFilteringRuleArray) ToFirewallFilteringRuleArrayOutputWithContext(ctx context.Context) FirewallFilteringRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallFilteringRuleArrayOutput)
}

// FirewallFilteringRuleMapInput is an input type that accepts FirewallFilteringRuleMap and FirewallFilteringRuleMapOutput values.
// You can construct a concrete instance of `FirewallFilteringRuleMapInput` via:
//
//	FirewallFilteringRuleMap{ "key": FirewallFilteringRuleArgs{...} }
type FirewallFilteringRuleMapInput interface {
	pulumi.Input

	ToFirewallFilteringRuleMapOutput() FirewallFilteringRuleMapOutput
	ToFirewallFilteringRuleMapOutputWithContext(context.Context) FirewallFilteringRuleMapOutput
}

type FirewallFilteringRuleMap map[string]FirewallFilteringRuleInput

func (FirewallFilteringRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallFilteringRule)(nil)).Elem()
}

func (i FirewallFilteringRuleMap) ToFirewallFilteringRuleMapOutput() FirewallFilteringRuleMapOutput {
	return i.ToFirewallFilteringRuleMapOutputWithContext(context.Background())
}

func (i FirewallFilteringRuleMap) ToFirewallFilteringRuleMapOutputWithContext(ctx context.Context) FirewallFilteringRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallFilteringRuleMapOutput)
}

type FirewallFilteringRuleOutput struct{ *pulumi.OutputState }

func (FirewallFilteringRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallFilteringRule)(nil)).Elem()
}

func (o FirewallFilteringRuleOutput) ToFirewallFilteringRuleOutput() FirewallFilteringRuleOutput {
	return o
}

func (o FirewallFilteringRuleOutput) ToFirewallFilteringRuleOutputWithContext(ctx context.Context) FirewallFilteringRuleOutput {
	return o
}

// The action the Firewall Filtering policy rule takes when packets match the rule
func (o FirewallFilteringRuleOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// list of application service groups
func (o FirewallFilteringRuleOutput) AppServiceGroups() FirewallFilteringRuleAppServiceGroupsOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleAppServiceGroupsOutput { return v.AppServiceGroups }).(FirewallFilteringRuleAppServiceGroupsOutput)
}

// list of application services
func (o FirewallFilteringRuleOutput) AppServices() FirewallFilteringRuleAppServicesOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleAppServicesOutput { return v.AppServices }).(FirewallFilteringRuleAppServicesOutput)
}

// If set to true, the default rule is applied
func (o FirewallFilteringRuleOutput) DefaultRule() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.BoolPtrOutput { return v.DefaultRule }).(pulumi.BoolPtrOutput)
}

// list of departments for which rule must be applied
func (o FirewallFilteringRuleOutput) Departments() FirewallFilteringRuleDepartmentsOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleDepartmentsOutput { return v.Departments }).(FirewallFilteringRuleDepartmentsOutput)
}

// Additional information about the rule
func (o FirewallFilteringRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FirewallFilteringRuleOutput) DestAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.StringArrayOutput { return v.DestAddresses }).(pulumi.StringArrayOutput)
}

// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
// countries.
func (o FirewallFilteringRuleOutput) DestCountries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.StringArrayOutput { return v.DestCountries }).(pulumi.StringArrayOutput)
}

func (o FirewallFilteringRuleOutput) DestIpCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.StringArrayOutput { return v.DestIpCategories }).(pulumi.StringArrayOutput)
}

// list of destination ip groups
func (o FirewallFilteringRuleOutput) DestIpGroups() FirewallFilteringRuleDestIpGroupsOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleDestIpGroupsOutput { return v.DestIpGroups }).(FirewallFilteringRuleDestIpGroupsOutput)
}

// This field is applicable for devices that are managed using Zscaler Client Connector.
func (o FirewallFilteringRuleOutput) DeviceGroups() FirewallFilteringRuleDeviceGroupsOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleDeviceGroupsOutput { return v.DeviceGroups }).(FirewallFilteringRuleDeviceGroupsOutput)
}

// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
// using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
// Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
func (o FirewallFilteringRuleOutput) DeviceTrustLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.StringArrayOutput { return v.DeviceTrustLevels }).(pulumi.StringArrayOutput)
}

// Name-ID pairs of devices for which rule must be applied.
func (o FirewallFilteringRuleOutput) Devices() FirewallFilteringRuleDevicesOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleDevicesOutput { return v.Devices }).(FirewallFilteringRuleDevicesOutput)
}

func (o FirewallFilteringRuleOutput) EnableFullLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.BoolPtrOutput { return v.EnableFullLogging }).(pulumi.BoolPtrOutput)
}

// list of groups for which rule must be applied
func (o FirewallFilteringRuleOutput) Groups() FirewallFilteringRuleGroupsOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleGroupsOutput { return v.Groups }).(FirewallFilteringRuleGroupsOutput)
}

// list of Labels that are applicable to the rule.
func (o FirewallFilteringRuleOutput) Labels() FirewallFilteringRuleLabelsOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleLabelsOutput { return v.Labels }).(FirewallFilteringRuleLabelsOutput)
}

// list of locations groups
func (o FirewallFilteringRuleOutput) LocationGroups() FirewallFilteringRuleLocationGroupsOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleLocationGroupsOutput { return v.LocationGroups }).(FirewallFilteringRuleLocationGroupsOutput)
}

// list of locations for which rule must be applied
func (o FirewallFilteringRuleOutput) Locations() FirewallFilteringRuleLocationsOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleLocationsOutput { return v.Locations }).(FirewallFilteringRuleLocationsOutput)
}

// Name of the Firewall Filtering policy rule
func (o FirewallFilteringRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// list of nw application groups
func (o FirewallFilteringRuleOutput) NwApplicationGroups() FirewallFilteringRuleNwApplicationGroupsOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleNwApplicationGroupsOutput {
		return v.NwApplicationGroups
	}).(FirewallFilteringRuleNwApplicationGroupsOutput)
}

// User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
// specific network service application.
func (o FirewallFilteringRuleOutput) NwApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.StringArrayOutput { return v.NwApplications }).(pulumi.StringArrayOutput)
}

// list of nw service groups
func (o FirewallFilteringRuleOutput) NwServiceGroups() FirewallFilteringRuleNwServiceGroupsOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleNwServiceGroupsOutput { return v.NwServiceGroups }).(FirewallFilteringRuleNwServiceGroupsOutput)
}

// list of nw services
func (o FirewallFilteringRuleOutput) NwServices() FirewallFilteringRuleNwServicesOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleNwServicesOutput { return v.NwServices }).(FirewallFilteringRuleNwServicesOutput)
}

// Rule order number of the Firewall Filtering policy rule
func (o FirewallFilteringRuleOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// If set to true, a predefined rule is applied
func (o FirewallFilteringRuleOutput) Predefined() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.BoolPtrOutput { return v.Predefined }).(pulumi.BoolPtrOutput)
}

// Admin rank of the Firewall Filtering policy rule
func (o FirewallFilteringRuleOutput) Rank() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.IntPtrOutput { return v.Rank }).(pulumi.IntPtrOutput)
}

func (o FirewallFilteringRuleOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.IntOutput { return v.RuleId }).(pulumi.IntOutput)
}

// list of source ip groups
func (o FirewallFilteringRuleOutput) SrcIpGroups() FirewallFilteringRuleSrcIpGroupsOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleSrcIpGroupsOutput { return v.SrcIpGroups }).(FirewallFilteringRuleSrcIpGroupsOutput)
}

// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
// source IP address.
func (o FirewallFilteringRuleOutput) SrcIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.StringArrayOutput { return v.SrcIps }).(pulumi.StringArrayOutput)
}

// Determines whether the Firewall Filtering policy rule is enabled or disabled
func (o FirewallFilteringRuleOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// The time interval in which the Firewall Filtering policy rule applies
func (o FirewallFilteringRuleOutput) TimeWindows() FirewallFilteringRuleTimeWindowsOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleTimeWindowsOutput { return v.TimeWindows }).(FirewallFilteringRuleTimeWindowsOutput)
}

// list of users for which rule must be applied
func (o FirewallFilteringRuleOutput) Users() FirewallFilteringRuleUsersOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleUsersOutput { return v.Users }).(FirewallFilteringRuleUsersOutput)
}

// The list of preconfigured workload groups to which the policy must be applied
func (o FirewallFilteringRuleOutput) WorkloadGroups() FirewallFilteringRuleWorkloadGroupArrayOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleWorkloadGroupArrayOutput { return v.WorkloadGroups }).(FirewallFilteringRuleWorkloadGroupArrayOutput)
}

// The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
// Gateway forwarding method.
func (o FirewallFilteringRuleOutput) ZpaAppSegments() FirewallFilteringRuleZpaAppSegmentArrayOutput {
	return o.ApplyT(func(v *FirewallFilteringRule) FirewallFilteringRuleZpaAppSegmentArrayOutput { return v.ZpaAppSegments }).(FirewallFilteringRuleZpaAppSegmentArrayOutput)
}

type FirewallFilteringRuleArrayOutput struct{ *pulumi.OutputState }

func (FirewallFilteringRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallFilteringRule)(nil)).Elem()
}

func (o FirewallFilteringRuleArrayOutput) ToFirewallFilteringRuleArrayOutput() FirewallFilteringRuleArrayOutput {
	return o
}

func (o FirewallFilteringRuleArrayOutput) ToFirewallFilteringRuleArrayOutputWithContext(ctx context.Context) FirewallFilteringRuleArrayOutput {
	return o
}

func (o FirewallFilteringRuleArrayOutput) Index(i pulumi.IntInput) FirewallFilteringRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallFilteringRule {
		return vs[0].([]*FirewallFilteringRule)[vs[1].(int)]
	}).(FirewallFilteringRuleOutput)
}

type FirewallFilteringRuleMapOutput struct{ *pulumi.OutputState }

func (FirewallFilteringRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallFilteringRule)(nil)).Elem()
}

func (o FirewallFilteringRuleMapOutput) ToFirewallFilteringRuleMapOutput() FirewallFilteringRuleMapOutput {
	return o
}

func (o FirewallFilteringRuleMapOutput) ToFirewallFilteringRuleMapOutputWithContext(ctx context.Context) FirewallFilteringRuleMapOutput {
	return o
}

func (o FirewallFilteringRuleMapOutput) MapIndex(k pulumi.StringInput) FirewallFilteringRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallFilteringRule {
		return vs[0].(map[string]*FirewallFilteringRule)[vs[1].(string)]
	}).(FirewallFilteringRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallFilteringRuleInput)(nil)).Elem(), &FirewallFilteringRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallFilteringRuleArrayInput)(nil)).Elem(), FirewallFilteringRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallFilteringRuleMapInput)(nil)).Elem(), FirewallFilteringRuleMap{})
	pulumi.RegisterOutputType(FirewallFilteringRuleOutput{})
	pulumi.RegisterOutputType(FirewallFilteringRuleArrayOutput{})
	pulumi.RegisterOutputType(FirewallFilteringRuleMapOutput{})
}
