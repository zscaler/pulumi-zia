// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/zscaler/pulumi-zia/sdk/go/zia/internal"
)

// Use the **zia_traffic_forwarding_gre_vip_recommended_list** data source to get information about a list of recommended GRE tunnel virtual IP addresses (VIPs), based on source IP address or latitude/longitude coordinates.
//
// ## Example Usage
//
// ### With Overridden Geo Coordinates
func GetTrafficForwardingVIPRecommendedList(ctx *pulumi.Context, args *GetTrafficForwardingVIPRecommendedListArgs, opts ...pulumi.InvokeOption) (*GetTrafficForwardingVIPRecommendedListResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTrafficForwardingVIPRecommendedListResult
	err := ctx.Invoke("zia:index/getTrafficForwardingVIPRecommendedList:getTrafficForwardingVIPRecommendedList", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTrafficForwardingVIPRecommendedList.
type GetTrafficForwardingVIPRecommendedListArgs struct {
	// (Boolean) Include currently assigned VIPs.
	IncludeCurrentVips *bool `pulumi:"includeCurrentVips"`
	// (Boolean) Include ZIA Private Service Edge VIPs.
	IncludePrivateServiceEdge *bool `pulumi:"includePrivateServiceEdge"`
	// (Number) The latitude coordinate of the GRE tunnel source.
	Latitude *float64 `pulumi:"latitude"`
	// (Number) The longitude coordinate of the GRE tunnel source.
	Longitude *float64 `pulumi:"longitude"`
	// Number of IP address to be exported.
	RequiredCount *int `pulumi:"requiredCount"`
	// (Boolean) The routable IP address.
	RoutableIp *bool `pulumi:"routableIp"`
	// Filter based on an IP address range.
	SourceIp *string `pulumi:"sourceIp"`
	// (String) The longitude coordinate of the GRE tunnel source.
	Subcloud *string `pulumi:"subcloud"`
	// (Boolean) Search within country only.
	WithinCountryOnly *bool `pulumi:"withinCountryOnly"`
}

// A collection of values returned by getTrafficForwardingVIPRecommendedList.
type GetTrafficForwardingVIPRecommendedListResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// (Boolean) Include currently assigned VIPs.
	IncludeCurrentVips *bool `pulumi:"includeCurrentVips"`
	// (Boolean) Include ZIA Private Service Edge VIPs.
	IncludePrivateServiceEdge *bool `pulumi:"includePrivateServiceEdge"`
	// (Number) The latitude coordinate of the GRE tunnel source.
	Latitude *float64 `pulumi:"latitude"`
	// The list of all recommended returned Virtual IP Addresses (VIPs)
	Lists []GetTrafficForwardingVIPRecommendedListList `pulumi:"lists"`
	// (Number) The longitude coordinate of the GRE tunnel source.
	Longitude     *float64 `pulumi:"longitude"`
	RequiredCount *int     `pulumi:"requiredCount"`
	// (Boolean) The routable IP address.
	RoutableIp *bool `pulumi:"routableIp"`
	// (String) The public source IP address.
	SourceIp *string `pulumi:"sourceIp"`
	// (String) The longitude coordinate of the GRE tunnel source.
	Subcloud *string `pulumi:"subcloud"`
	// (Boolean) Search within country only.
	WithinCountryOnly *bool `pulumi:"withinCountryOnly"`
}

func GetTrafficForwardingVIPRecommendedListOutput(ctx *pulumi.Context, args GetTrafficForwardingVIPRecommendedListOutputArgs, opts ...pulumi.InvokeOption) GetTrafficForwardingVIPRecommendedListResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetTrafficForwardingVIPRecommendedListResultOutput, error) {
			args := v.(GetTrafficForwardingVIPRecommendedListArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("zia:index/getTrafficForwardingVIPRecommendedList:getTrafficForwardingVIPRecommendedList", args, GetTrafficForwardingVIPRecommendedListResultOutput{}, options).(GetTrafficForwardingVIPRecommendedListResultOutput), nil
		}).(GetTrafficForwardingVIPRecommendedListResultOutput)
}

// A collection of arguments for invoking getTrafficForwardingVIPRecommendedList.
type GetTrafficForwardingVIPRecommendedListOutputArgs struct {
	// (Boolean) Include currently assigned VIPs.
	IncludeCurrentVips pulumi.BoolPtrInput `pulumi:"includeCurrentVips"`
	// (Boolean) Include ZIA Private Service Edge VIPs.
	IncludePrivateServiceEdge pulumi.BoolPtrInput `pulumi:"includePrivateServiceEdge"`
	// (Number) The latitude coordinate of the GRE tunnel source.
	Latitude pulumi.Float64PtrInput `pulumi:"latitude"`
	// (Number) The longitude coordinate of the GRE tunnel source.
	Longitude pulumi.Float64PtrInput `pulumi:"longitude"`
	// Number of IP address to be exported.
	RequiredCount pulumi.IntPtrInput `pulumi:"requiredCount"`
	// (Boolean) The routable IP address.
	RoutableIp pulumi.BoolPtrInput `pulumi:"routableIp"`
	// Filter based on an IP address range.
	SourceIp pulumi.StringPtrInput `pulumi:"sourceIp"`
	// (String) The longitude coordinate of the GRE tunnel source.
	Subcloud pulumi.StringPtrInput `pulumi:"subcloud"`
	// (Boolean) Search within country only.
	WithinCountryOnly pulumi.BoolPtrInput `pulumi:"withinCountryOnly"`
}

func (GetTrafficForwardingVIPRecommendedListOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficForwardingVIPRecommendedListArgs)(nil)).Elem()
}

// A collection of values returned by getTrafficForwardingVIPRecommendedList.
type GetTrafficForwardingVIPRecommendedListResultOutput struct{ *pulumi.OutputState }

func (GetTrafficForwardingVIPRecommendedListResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTrafficForwardingVIPRecommendedListResult)(nil)).Elem()
}

func (o GetTrafficForwardingVIPRecommendedListResultOutput) ToGetTrafficForwardingVIPRecommendedListResultOutput() GetTrafficForwardingVIPRecommendedListResultOutput {
	return o
}

func (o GetTrafficForwardingVIPRecommendedListResultOutput) ToGetTrafficForwardingVIPRecommendedListResultOutputWithContext(ctx context.Context) GetTrafficForwardingVIPRecommendedListResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetTrafficForwardingVIPRecommendedListResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTrafficForwardingVIPRecommendedListResult) string { return v.Id }).(pulumi.StringOutput)
}

// (Boolean) Include currently assigned VIPs.
func (o GetTrafficForwardingVIPRecommendedListResultOutput) IncludeCurrentVips() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficForwardingVIPRecommendedListResult) *bool { return v.IncludeCurrentVips }).(pulumi.BoolPtrOutput)
}

// (Boolean) Include ZIA Private Service Edge VIPs.
func (o GetTrafficForwardingVIPRecommendedListResultOutput) IncludePrivateServiceEdge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficForwardingVIPRecommendedListResult) *bool { return v.IncludePrivateServiceEdge }).(pulumi.BoolPtrOutput)
}

// (Number) The latitude coordinate of the GRE tunnel source.
func (o GetTrafficForwardingVIPRecommendedListResultOutput) Latitude() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GetTrafficForwardingVIPRecommendedListResult) *float64 { return v.Latitude }).(pulumi.Float64PtrOutput)
}

// The list of all recommended returned Virtual IP Addresses (VIPs)
func (o GetTrafficForwardingVIPRecommendedListResultOutput) Lists() GetTrafficForwardingVIPRecommendedListListArrayOutput {
	return o.ApplyT(func(v GetTrafficForwardingVIPRecommendedListResult) []GetTrafficForwardingVIPRecommendedListList {
		return v.Lists
	}).(GetTrafficForwardingVIPRecommendedListListArrayOutput)
}

// (Number) The longitude coordinate of the GRE tunnel source.
func (o GetTrafficForwardingVIPRecommendedListResultOutput) Longitude() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v GetTrafficForwardingVIPRecommendedListResult) *float64 { return v.Longitude }).(pulumi.Float64PtrOutput)
}

func (o GetTrafficForwardingVIPRecommendedListResultOutput) RequiredCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetTrafficForwardingVIPRecommendedListResult) *int { return v.RequiredCount }).(pulumi.IntPtrOutput)
}

// (Boolean) The routable IP address.
func (o GetTrafficForwardingVIPRecommendedListResultOutput) RoutableIp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficForwardingVIPRecommendedListResult) *bool { return v.RoutableIp }).(pulumi.BoolPtrOutput)
}

// (String) The public source IP address.
func (o GetTrafficForwardingVIPRecommendedListResultOutput) SourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficForwardingVIPRecommendedListResult) *string { return v.SourceIp }).(pulumi.StringPtrOutput)
}

// (String) The longitude coordinate of the GRE tunnel source.
func (o GetTrafficForwardingVIPRecommendedListResultOutput) Subcloud() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTrafficForwardingVIPRecommendedListResult) *string { return v.Subcloud }).(pulumi.StringPtrOutput)
}

// (Boolean) Search within country only.
func (o GetTrafficForwardingVIPRecommendedListResultOutput) WithinCountryOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTrafficForwardingVIPRecommendedListResult) *bool { return v.WithinCountryOnly }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTrafficForwardingVIPRecommendedListResultOutput{})
}
