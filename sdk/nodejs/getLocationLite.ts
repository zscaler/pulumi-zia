// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use the **zia_location_lite** data source to get information about a location in lite mode option available in the Zscaler Internet Access. This data source can be used to retrieve the Road Warrior location to then associated with one of the following resources: ``zia.URLFilteringRules``, ``zia.FirewallFilteringRule`` and ``zia.DLPWebRules`
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 *
 * const this = zia.getLocationLite({
 *     name: "Road Warrior",
 * });
 * ```
 */
export function getLocationLite(args?: GetLocationLiteArgs, opts?: pulumi.InvokeOptions): Promise<GetLocationLiteResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getLocationLite:getLocationLite", {
        "digestAuthEnabled": args.digestAuthEnabled,
        "kerberosAuth": args.kerberosAuth,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getLocationLite.
 */
export interface GetLocationLiteArgs {
    /**
     * (Boolean)
     */
    digestAuthEnabled?: boolean;
    /**
     * (Boolean)
     */
    kerberosAuth?: boolean;
    /**
     * Location group name
     */
    name?: string;
}

/**
 * A collection of values returned by getLocationLite.
 */
export interface GetLocationLiteResult {
    /**
     * (Boolean) For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.
     */
    readonly aupBlockInternetUntilAccepted: boolean;
    /**
     * (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
     */
    readonly aupEnabled: boolean;
    /**
     * (Boolean) For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.
     */
    readonly aupForceSslInspection: boolean;
    /**
     * (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
     */
    readonly cautionEnabled: boolean;
    /**
     * (Boolean)
     */
    readonly digestAuthEnabled?: boolean;
    /**
     * (Boolean)
     */
    readonly ecLocation: boolean;
    readonly id: number;
    /**
     * (Boolean) Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
     */
    readonly ipsControl: boolean;
    /**
     * (Number) If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.
     */
    readonly ipv6Enabled: boolean;
    /**
     * (Boolean)
     */
    readonly kerberosAuth?: boolean;
    readonly name?: string;
    /**
     * (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
     */
    readonly ofwEnabled: boolean;
    /**
     * (Boolean) If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true
     */
    readonly other6SubLocation: boolean;
    /**
     * (Boolean) If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.
     */
    readonly otherSubLocation: boolean;
    /**
     * (Number) - Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`
     */
    readonly parentId: number;
    /**
     * (Boolean) Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
     */
    readonly surrogateIp: boolean;
    /**
     * (Boolean) Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
     */
    readonly surrogateIpEnforcedForKnownBrowsers: boolean;
    /**
     * (String) Timezone of the location. If not specified, it defaults to GMT.
     */
    readonly tz: string;
    /**
     * (Boolean) Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
     */
    readonly xffForwardEnabled: boolean;
    /**
     * (Boolean) This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
     */
    readonly zappSslScanEnabled: boolean;
}
/**
 * Use the **zia_location_lite** data source to get information about a location in lite mode option available in the Zscaler Internet Access. This data source can be used to retrieve the Road Warrior location to then associated with one of the following resources: ``zia.URLFilteringRules``, ``zia.FirewallFilteringRule`` and ``zia.DLPWebRules`
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 *
 * const this = zia.getLocationLite({
 *     name: "Road Warrior",
 * });
 * ```
 */
export function getLocationLiteOutput(args?: GetLocationLiteOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLocationLiteResult> {
    return pulumi.output(args).apply((a: any) => getLocationLite(a, opts))
}

/**
 * A collection of arguments for invoking getLocationLite.
 */
export interface GetLocationLiteOutputArgs {
    /**
     * (Boolean)
     */
    digestAuthEnabled?: pulumi.Input<boolean>;
    /**
     * (Boolean)
     */
    kerberosAuth?: pulumi.Input<boolean>;
    /**
     * Location group name
     */
    name?: pulumi.Input<string>;
}
