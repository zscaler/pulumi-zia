// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getFirewallIpsRule(args?: GetFirewallIpsRuleArgs, opts?: pulumi.InvokeOptions): Promise<GetFirewallIpsRuleResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getFirewallIpsRule:getFirewallIpsRule", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getFirewallIpsRule.
 */
export interface GetFirewallIpsRuleArgs {
    id?: number;
    name?: string;
}

/**
 * A collection of values returned by getFirewallIpsRule.
 */
export interface GetFirewallIpsRuleResult {
    readonly action: string;
    readonly capturePcap: boolean;
    readonly defaultRule: boolean;
    readonly departments: outputs.GetFirewallIpsRuleDepartment[];
    readonly description: string;
    readonly destAddresses: string[];
    readonly destCountries: string[];
    readonly destIpCategories: string[];
    readonly destIpGroups: outputs.GetFirewallIpsRuleDestIpGroup[];
    readonly destIpv6Groups: outputs.GetFirewallIpsRuleDestIpv6Group[];
    readonly deviceGroups: outputs.GetFirewallIpsRuleDeviceGroup[];
    readonly devices: outputs.GetFirewallIpsRuleDevice[];
    readonly enableFullLogging: boolean;
    readonly groups: outputs.GetFirewallIpsRuleGroup[];
    readonly id: number;
    readonly labels: outputs.GetFirewallIpsRuleLabel[];
    readonly lastModifiedBies: outputs.GetFirewallIpsRuleLastModifiedBy[];
    readonly lastModifiedTime: number;
    readonly locationGroups: outputs.GetFirewallIpsRuleLocationGroup[];
    readonly locations: outputs.GetFirewallIpsRuleLocation[];
    readonly name: string;
    readonly nwServiceGroups: outputs.GetFirewallIpsRuleNwServiceGroup[];
    readonly nwServices: outputs.GetFirewallIpsRuleNwService[];
    readonly order: number;
    readonly predefined: boolean;
    readonly rank: number;
    readonly resCategories: string[];
    readonly sourceCountries: string[];
    readonly srcIpGroups: outputs.GetFirewallIpsRuleSrcIpGroup[];
    readonly srcIps: string[];
    readonly srcIpv6Groups: outputs.GetFirewallIpsRuleSrcIpv6Group[];
    readonly state: string;
    readonly threatCategories: outputs.GetFirewallIpsRuleThreatCategory[];
    readonly timeWindows: outputs.GetFirewallIpsRuleTimeWindow[];
    readonly users: outputs.GetFirewallIpsRuleUser[];
    readonly zpaAppSegments: outputs.GetFirewallIpsRuleZpaAppSegment[];
}
export function getFirewallIpsRuleOutput(args?: GetFirewallIpsRuleOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetFirewallIpsRuleResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("zia:index/getFirewallIpsRule:getFirewallIpsRule", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getFirewallIpsRule.
 */
export interface GetFirewallIpsRuleOutputArgs {
    id?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
}
