// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AdminUsersAdminScopeEntities {
    ids?: number[];
}

export interface AdminUsersRole {
    id?: number;
}

export interface CloudAppControlRuleCbiProfile {
    id?: string;
    name?: string;
    /**
     * The browser isolation profile URL
     */
    url?: string;
}

export interface CloudAppControlRuleCloudAppRiskProfile {
    id: number;
}

export interface CloudAppControlRuleDepartments {
    ids?: number[];
}

export interface CloudAppControlRuleDeviceGroups {
    ids?: number[];
}

export interface CloudAppControlRuleDevices {
    ids?: number[];
}

export interface CloudAppControlRuleGroups {
    ids?: number[];
}

export interface CloudAppControlRuleLabels {
    ids?: number[];
}

export interface CloudAppControlRuleLocationGroups {
    ids?: number[];
}

export interface CloudAppControlRuleLocations {
    ids?: number[];
}

export interface CloudAppControlRuleTenancyProfileIds {
    ids?: number[];
}

export interface CloudAppControlRuleTimeWindows {
    ids?: number[];
}

export interface CloudAppControlRuleUsers {
    ids?: number[];
}

export interface DLPDictionariesExactDataMatchDetail {
    /**
     * The unique identifier for the EDM mapping
     */
    dictionaryEdmMappingId: number;
    /**
     * The EDM template's primary field.
     */
    primaryField?: number;
    /**
     * The unique identifier for the EDM template (or schema).
     */
    schemaId: number;
    /**
     * The EDM secondary field to match on.
     */
    secondaryFieldMatchOn?: string;
    /**
     * The EDM template's secondary fields.
     */
    secondaryFields: number[];
}

export interface DLPDictionariesIdmProfileMatchAccuracy {
    /**
     * The action applied to a DLP dictionary using patterns
     */
    adpIdmProfiles: outputs.DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile[];
    /**
     * The IDM template match accuracy.
     */
    matchAccuracy: string;
}

export interface DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile {
    extensions: {[key: string]: string};
    id: number;
}

export interface DLPDictionariesPattern {
    /**
     * The action applied to a DLP dictionary using patterns
     */
    action: string;
    /**
     * DLP dictionary pattern
     */
    pattern: string;
}

export interface DLPDictionariesPhrase {
    action: string;
    /**
     * DLP dictionary phrase
     */
    phrase: string;
}

export interface DLPWebRulesAuditor {
    id: number;
}

export interface DLPWebRulesDepartments {
    ids?: number[];
}

export interface DLPWebRulesDlpEngines {
    ids?: number[];
}

export interface DLPWebRulesExcludedDepartments {
    ids?: number[];
}

export interface DLPWebRulesExcludedDomainProfiles {
    ids?: number[];
}

export interface DLPWebRulesExcludedGroups {
    ids?: number[];
}

export interface DLPWebRulesExcludedUsers {
    ids?: number[];
}

export interface DLPWebRulesGroups {
    ids?: number[];
}

export interface DLPWebRulesIcapServer {
    id: number;
}

export interface DLPWebRulesIncludedDomainProfiles {
    ids?: number[];
}

export interface DLPWebRulesLabels {
    id?: number;
}

export interface DLPWebRulesLocationGroups {
    ids?: number[];
}

export interface DLPWebRulesLocations {
    ids?: number[];
}

export interface DLPWebRulesNotificationTemplate {
    id: number;
}

export interface DLPWebRulesSourceIpGroups {
    ids?: number[];
}

export interface DLPWebRulesTimeWindows {
    ids?: number[];
}

export interface DLPWebRulesUrlCategories {
    ids?: number[];
}

export interface DLPWebRulesUsers {
    ids?: number[];
}

export interface DLPWebRulesWorkloadGroup {
    /**
     * The unique identifier for the resource.
     */
    id: number;
    /**
     * The name of the resource.
     */
    name?: string;
}

export interface FileTypeControlRulesDepartments {
    ids?: number[];
}

export interface FileTypeControlRulesDeviceGroups {
    ids?: number[];
}

export interface FileTypeControlRulesDevices {
    ids?: number[];
}

export interface FileTypeControlRulesGroups {
    ids?: number[];
}

export interface FileTypeControlRulesLabels {
    id?: number;
}

export interface FileTypeControlRulesLocationGroups {
    ids?: number[];
}

export interface FileTypeControlRulesLocations {
    ids?: number[];
}

export interface FileTypeControlRulesTimeWindows {
    ids?: number[];
}

export interface FileTypeControlRulesUsers {
    ids?: number[];
}

export interface FileTypeControlRulesZpaAppSegment {
    /**
     * External ID of the application segment.
     */
    externalId: string;
    /**
     * Name of the application segment.
     */
    name: string;
}

export interface FirewallDNSRuleApplicationGroups {
    ids?: number[];
}

export interface FirewallDNSRuleDepartments {
    ids?: number[];
}

export interface FirewallDNSRuleDestIpGroups {
    ids?: number[];
}

export interface FirewallDNSRuleDestIpv6Groups {
    ids?: number[];
}

export interface FirewallDNSRuleDeviceGroups {
    ids?: number[];
}

export interface FirewallDNSRuleDevices {
    ids?: number[];
}

export interface FirewallDNSRuleDnsGateway {
    /**
     * The unique identifier for the resource.
     */
    id: number;
    /**
     * The name of the resource.
     */
    name?: string;
}

export interface FirewallDNSRuleEdnsEcsObject {
    /**
     * The unique identifier for the resource.
     */
    id: number;
    /**
     * The name of the resource.
     */
    name?: string;
}

export interface FirewallDNSRuleGroups {
    ids?: number[];
}

export interface FirewallDNSRuleLabels {
    id?: number;
}

export interface FirewallDNSRuleLocationGroups {
    ids?: number[];
}

export interface FirewallDNSRuleLocations {
    ids?: number[];
}

export interface FirewallDNSRuleSrcIpGroups {
    ids?: number[];
}

export interface FirewallDNSRuleSrcIpv6Groups {
    ids?: number[];
}

export interface FirewallDNSRuleTimeWindows {
    ids?: number[];
}

export interface FirewallDNSRuleUsers {
    ids?: number[];
}

export interface FirewallDNSRuleZpaIpGroup {
    /**
     * The unique identifier for the resource.
     */
    id: number;
    /**
     * The name of the resource.
     */
    name?: string;
}

export interface FirewallFilteringNetworkServicesDestTcpPort {
    end?: number;
    start?: number;
}

export interface FirewallFilteringNetworkServicesDestUdpPort {
    end?: number;
    start?: number;
}

export interface FirewallFilteringNetworkServicesSrcTcpPort {
    end?: number;
    start?: number;
}

export interface FirewallFilteringNetworkServicesSrcUdpPort {
    end?: number;
    start?: number;
}

export interface FirewallFilteringRuleAppServiceGroups {
    ids?: number[];
}

export interface FirewallFilteringRuleAppServices {
    ids?: number[];
}

export interface FirewallFilteringRuleDepartments {
    ids?: number[];
}

export interface FirewallFilteringRuleDestIpGroups {
    ids?: number[];
}

export interface FirewallFilteringRuleDeviceGroups {
    ids?: number[];
}

export interface FirewallFilteringRuleDevices {
    ids?: number[];
}

export interface FirewallFilteringRuleGroups {
    ids?: number[];
}

export interface FirewallFilteringRuleLabels {
    id?: number;
}

export interface FirewallFilteringRuleLocationGroups {
    ids?: number[];
}

export interface FirewallFilteringRuleLocations {
    ids?: number[];
}

export interface FirewallFilteringRuleNwApplicationGroups {
    ids?: number[];
}

export interface FirewallFilteringRuleNwServiceGroups {
    ids?: number[];
}

export interface FirewallFilteringRuleNwServices {
    ids?: number[];
}

export interface FirewallFilteringRuleSrcIpGroups {
    ids?: number[];
}

export interface FirewallFilteringRuleTimeWindows {
    ids?: number[];
}

export interface FirewallFilteringRuleUsers {
    ids?: number[];
}

export interface FirewallFilteringRuleWorkloadGroup {
    /**
     * The unique identifier for the resource.
     */
    id: number;
    /**
     * The name of the resource.
     */
    name?: string;
}

export interface FirewallFilteringRuleZpaAppSegment {
    /**
     * External ID of the application segment.
     */
    externalId: string;
    /**
     * Name of the application segment.
     */
    name: string;
}

export interface FirewallFilteringServiceGroupsService {
    ids: number[];
}

export interface FirewallIPSRuleDepartments {
    ids?: number[];
}

export interface FirewallIPSRuleDestIpGroups {
    ids?: number[];
}

export interface FirewallIPSRuleDestIpv6Groups {
    ids?: number[];
}

export interface FirewallIPSRuleDeviceGroups {
    ids?: number[];
}

export interface FirewallIPSRuleDevices {
    ids?: number[];
}

export interface FirewallIPSRuleGroups {
    ids?: number[];
}

export interface FirewallIPSRuleLabels {
    id?: number;
}

export interface FirewallIPSRuleLocationGroups {
    ids?: number[];
}

export interface FirewallIPSRuleLocations {
    ids?: number[];
}

export interface FirewallIPSRuleNwServiceGroups {
    ids?: number[];
}

export interface FirewallIPSRuleNwServices {
    ids?: number[];
}

export interface FirewallIPSRuleSrcIpGroups {
    ids?: number[];
}

export interface FirewallIPSRuleSrcIpv6Groups {
    ids?: number[];
}

export interface FirewallIPSRuleThreatCategories {
    ids?: number[];
}

export interface FirewallIPSRuleTimeWindows {
    ids?: number[];
}

export interface FirewallIPSRuleUsers {
    ids?: number[];
}

export interface FirewallIPSRuleZpaAppSegment {
    /**
     * External ID of the application segment.
     */
    externalId: string;
    /**
     * Name of the application segment.
     */
    name: string;
}

export interface ForwardingControlRuleAppServiceGroups {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleDepartments {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleDestIpGroups {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleDestIpv6Groups {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleEcGroups {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleGroups {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleLabels {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    id?: number;
}

export interface ForwardingControlRuleLocationGroups {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleLocations {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleNwApplicationGroups {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleNwServiceGroups {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleNwServices {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleProxyGateway {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * (string) The configured name of the entity
     */
    name?: string;
}

export interface ForwardingControlRuleSrcIpGroups {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleSrcIpv6Groups {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleUsers {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleZpaAppSegment {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    externalId: string;
    /**
     * (string) The configured name of the entity
     */
    name: string;
}

export interface ForwardingControlRuleZpaApplicationSegmentGroups {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleZpaApplicationSegments {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface ForwardingControlRuleZpaGateway {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * (string) The configured name of the entity
     */
    name?: string;
}

export interface ForwardingControlZPAGatewayZpaAppSegment {
    /**
     * An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
     */
    externalId: string;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface ForwardingControlZPAGatewayZpaServerGroup {
    /**
     * An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
     */
    externalId: string;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetAdminUsersAdminScope {
    /**
     * (String) Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
     */
    scopeEntities: outputs.GetAdminUsersAdminScopeScopeEntity[];
    /**
     * (Number) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
     */
    scopeGroupMemberEntities: outputs.GetAdminUsersAdminScopeScopeGroupMemberEntity[];
    /**
     * (String) The admin scope type. The attribute name is subject to change.
     */
    type: string;
}

export interface GetAdminUsersAdminScopeScopeEntity {
    extensions: {[key: string]: string};
    /**
     * The ID of the admin user to be exported.
     */
    id: number;
    /**
     * (String)
     */
    name: string;
}

export interface GetAdminUsersAdminScopeScopeGroupMemberEntity {
    extensions: {[key: string]: string};
    /**
     * The ID of the admin user to be exported.
     */
    id: number;
    /**
     * (String)
     */
    name: string;
}

export interface GetAdminUsersExecMobileAppToken {
    /**
     * (String)
     */
    cloud: string;
    /**
     * (Number)
     */
    createTime: number;
    /**
     * (String)
     */
    deviceId: string;
    /**
     * (String)
     */
    deviceName: string;
    /**
     * (String)
     */
    name: string;
    /**
     * (Number)
     */
    orgId: number;
    /**
     * (String)
     */
    token: string;
    /**
     * (Number)
     */
    tokenExpiry: number;
    /**
     * (String)
     */
    tokenId: string;
}

export interface GetAdminUsersRole {
    extensions: {[key: string]: string};
    /**
     * The ID of the admin user to be exported.
     */
    id: number;
    /**
     * (String)
     */
    name: string;
}

export interface GetCloudAppControlRuleCbiProfile {
    /**
     * The browser isolation profile URL
     */
    defaultProfile: boolean;
    /**
     * The universally unique identifier (UUID) for the browser isolation profile
     */
    id: string;
    /**
     * Name of the browser isolation profile
     */
    name: string;
    /**
     * The browser isolation profile URL
     */
    sandboxMode: boolean;
    /**
     * The browser isolation profile URL
     */
    url: string;
}

export interface GetCloudAppControlRuleDepartment {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetCloudAppControlRuleDevice {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetCloudAppControlRuleDeviceGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetCloudAppControlRuleGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetCloudAppControlRuleLabel {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetCloudAppControlRuleLocation {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetCloudAppControlRuleLocationGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetCloudAppControlRuleUser {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetCloudApplicationsApplication {
    /**
     * (String) Application enum constant
     */
    app: string;
    /**
     * (String) Cloud application name
     */
    appName: string;
    /**
     * (String) pplication category enum constant
     */
    parent: string;
    /**
     * (String) Name of the cloud application category
     */
    parentName: string;
}

export interface GetDLPDictionariesExactDataMatchDetail {
    /**
     * The unique identifier for the EDM mapping
     */
    dictionaryEdmMappingId: number;
    /**
     * The EDM template's primary field.
     */
    primaryField: number;
    /**
     * The unique identifier for the EDM template (or schema).
     */
    schemaId: number;
    /**
     * The EDM secondary field to match on.
     */
    secondaryFieldMatchOn: string;
    secondaryFields: number[];
}

export interface GetDLPDictionariesIdmProfileMatchAccuracy {
    /**
     * The action applied to a DLP dictionary using patterns
     */
    adpIdmProfiles: outputs.GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile[];
    /**
     * The IDM template match accuracy.
     */
    matchAccuracy: string;
}

export interface GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile {
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the DLP dictionary
     */
    id: number;
    /**
     * DLP dictionary name
     */
    name: string;
}

export interface GetDLPDictionariesPattern {
    /**
     * (String) The action applied to a DLP dictionary using patterns
     */
    action: string;
    /**
     * (String) DLP dictionary pattern
     */
    pattern: string;
}

export interface GetDLPDictionariesPhrase {
    /**
     * (String) The action applied to a DLP dictionary using patterns
     */
    action: string;
    phrase: string;
}

export interface GetDLPEDMSchemaCreatedBy {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetDLPEDMSchemaEdmClient {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetDLPEDMSchemaLastModifiedBy {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetDLPEDMSchemaSchedule {
    /**
     * The day of the month that the IDM template is scheduled for. This attribute is required by PUT and POST requests, and when scheduleType is set to MONTHLY.
     */
    scheduleDayOfMonths: string[];
    /**
     * The day of the week the IDM template is scheduled for. This attribute is required by PUT and POST requests, and when scheduleType is set to WEEKLY.
     */
    scheduleDayOfWeeks: string[];
    /**
     * If set to true, the schedule for the IDM template is temporarily in a disabled state. This attribute is required by PUT requests in order to disable or enable a schedule.
     */
    scheduleDisabled: boolean;
    /**
     * The time of the day (in minutes) that the IDM template is scheduled for. For example: at 3am= 180 mins. This attribute is required by PUT and POST requests.
     */
    scheduleTime: number;
    /**
     * The schedule type for the IDM template's schedule (i.e., Monthly, Weekly, Daily, or None). This attribute is required by PUT and POST requests.
     */
    scheduleType: string;
}

export interface GetDLPEDMSchemaTokenList {
    /**
     * The length of the column bitmap in the hashed file.
     */
    colLengthBitmap: number;
    /**
     * The column position for the token in the hashed file, starting from 1.
     */
    hashFileColumnOrder: number;
    /**
     * The token (i.e., criteria) name. This attribute is required by PUT and POST requests.
     */
    name: string;
    /**
     * The column position for the token in the original CSV file uploaded to the Index Tool, starting from 1. This attribue required by PUT and POST requests.
     */
    originalColumn: number;
    /**
     * Indicates whether the token is a primary key.
     */
    primaryKey: boolean;
    /**
     * The token (i.e., criteria) name. This attribute is required by PUT and POST requests.
     */
    type: string;
}

export interface GetDLPIDMProfileLiteClientVm {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetDLPIDMProfileLiteLastModifiedBy {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetDLPIDMProfilesIdmClient {
    /**
     * The configured name of the entity
     */
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetDLPIDMProfilesLastModifiedBy {
    /**
     * The configured name of the entity
     */
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetDLPWebRulesDepartment {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * Identifier that uniquely identifies an entity
     */
    name: string;
}

export interface GetDLPWebRulesDlpEngine {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * Identifier that uniquely identifies an entity
     */
    name: string;
}

export interface GetDLPWebRulesExcludedDepartment {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
}

export interface GetDLPWebRulesExcludedGroup {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
}

export interface GetDLPWebRulesExcludedUser {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
}

export interface GetDLPWebRulesGroup {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * Identifier that uniquely identifies an entity
     */
    name: string;
}

export interface GetDLPWebRulesLabel {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * Identifier that uniquely identifies an entity
     */
    name: string;
}

export interface GetDLPWebRulesLastModifiedBy {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * Identifier that uniquely identifies an entity
     */
    name: string;
}

export interface GetDLPWebRulesLocation {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * Identifier that uniquely identifies an entity
     */
    name: string;
}

export interface GetDLPWebRulesLocationGroup {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * Identifier that uniquely identifies an entity
     */
    name: string;
}

export interface GetDLPWebRulesSourceIpGroup {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * Identifier that uniquely identifies an entity
     */
    name: string;
}

export interface GetDLPWebRulesTimeWindow {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * Identifier that uniquely identifies an entity
     */
    name: string;
}

export interface GetDLPWebRulesUrlCategory {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * Identifier that uniquely identifies an entity
     */
    name: string;
}

export interface GetDLPWebRulesUser {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * Identifier that uniquely identifies an entity
     */
    name: string;
}

export interface GetDLPWebRulesWorkloadGroup {
    /**
     * The description of the workload group
     */
    description: string;
    /**
     * A unique identifier assigned to the workload group
     */
    id: number;
    /**
     * The admin that modified the DLP policy rule last.
     */
    lastModifiedBies: outputs.GetDLPWebRulesWorkloadGroupLastModifiedBy[];
    /**
     * Timestamp when the DLP policy rule was last modified.
     */
    lastModifiedTime: number;
    /**
     * The name of the workload group
     */
    name: string;
}

export interface GetDLPWebRulesWorkloadGroupLastModifiedBy {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFileTypeControlRulesDepartment {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * A unique identifier for an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetFileTypeControlRulesDevice {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * A unique identifier for an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetFileTypeControlRulesDeviceGroup {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * A unique identifier for an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetFileTypeControlRulesGroup {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * A unique identifier for an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetFileTypeControlRulesLabel {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * A unique identifier for an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetFileTypeControlRulesLastModifiedBy {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * A unique identifier for an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetFileTypeControlRulesLocation {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * A unique identifier for an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetFileTypeControlRulesLocationGroup {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * A unique identifier for an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetFileTypeControlRulesTimeWindow {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * A unique identifier for an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetFileTypeControlRulesUser {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * A unique identifier for an entity
     */
    id: number;
    /**
     * The configured name of the entity
     */
    name: string;
}

export interface GetFileTypeControlRulesZpaAppSegment {
    /**
     * Indicates the external ID. Applicable only when this reference is of an external entity.
     */
    externalId: string;
    /**
     * A unique identifier assigned to the Application Segment
     */
    id: number;
    /**
     * The name of the Application Segment
     */
    name: string;
}

export interface GetFirewallDnsRuleApplicationGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallDnsRuleDepartment {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallDnsRuleDestIpGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallDnsRuleDestIpv6Group {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallDnsRuleDevice {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallDnsRuleDeviceGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallDnsRuleGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallDnsRuleLabel {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallDnsRuleLastModifiedBy {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * Identifier that uniquely identifies an entity
     */
    name: string;
}

export interface GetFirewallDnsRuleLocation {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallDnsRuleLocationGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallDnsRuleSrcIpGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallDnsRuleSrcIpv6Group {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallDnsRuleTimeWindow {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallDnsRuleUser {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallFilteringNetworkServiceGroupsService {
    /**
     * (String)
     */
    description: string;
    /**
     * The ID of the ip source group to be exported.
     */
    id: number;
    /**
     * (Bool) - Default: false
     */
    isNameL10nTag: boolean;
    /**
     * The name of the ip source group to be exported.
     */
    name?: string;
}

export interface GetFirewallFilteringNetworkServicesDestTcpPort {
    /**
     * (Number)
     */
    end: number;
    /**
     * (Number)
     */
    start: number;
}

export interface GetFirewallFilteringNetworkServicesDestUdpPort {
    /**
     * (Number)
     */
    end: number;
    /**
     * (Number)
     */
    start: number;
}

export interface GetFirewallFilteringNetworkServicesSrcTcpPort {
    /**
     * (Number)
     */
    end: number;
    /**
     * (Number)
     */
    start: number;
}

export interface GetFirewallFilteringNetworkServicesSrcUdpPort {
    /**
     * (Number)
     */
    end: number;
    /**
     * (Number)
     */
    start: number;
}

export interface GetFirewallFilteringRuleAppService {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleAppServiceGroup {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleDepartment {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleDestIpGroup {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleDevice {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleDeviceGroup {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleGroup {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleLabel {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleLastModifiedBy {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleLocation {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleLocationGroup {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleNwApplicationGroup {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleNwService {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleNwServiceGroup {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleSrcIpGroup {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleTimeWindow {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleUser {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleWorkloadGroup {
    /**
     * (Optional) Enter additional notes or information. The description cannot exceed 10,240 characters.
     */
    description: string;
    /**
     * The description of the workload group
     */
    expression: string;
    expressionJsons: outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJson[];
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    lastModifiedBies: outputs.GetFirewallFilteringRuleWorkloadGroupLastModifiedBy[];
    /**
     * (Number)
     */
    lastModifiedTime: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleWorkloadGroupExpressionJson {
    expressionContainers: outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainer[];
}

export interface GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainer {
    operator: string;
    tagContainers: outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainer[];
    tagType: string;
}

export interface GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainer {
    operator: string;
    tags: outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerTag[];
}

export interface GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerTag {
    key: string;
    value: string;
}

export interface GetFirewallFilteringRuleWorkloadGroupLastModifiedBy {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallFilteringRuleZpaAppSegment {
    /**
     * Indicates the external ID. Applicable only when this reference is of an external entity.
     */
    externalId: string;
    /**
     * Unique identifier for the Firewall Filtering policy rule
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name: string;
}

export interface GetFirewallIpsRuleDepartment {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleDestIpGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleDestIpv6Group {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleDevice {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleDeviceGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleLabel {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleLastModifiedBy {
    extensions: {[key: string]: string};
    /**
     * Identifier that uniquely identifies an entity
     */
    id: number;
    /**
     * Identifier that uniquely identifies an entity
     */
    name: string;
}

export interface GetFirewallIpsRuleLocation {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleLocationGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleNwService {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleNwServiceGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleSrcIpGroup {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleSrcIpv6Group {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleThreatCategory {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleTimeWindow {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleUser {
    extensions: {[key: string]: string};
    id: number;
    name: string;
}

export interface GetFirewallIpsRuleZpaAppSegment {
    /**
     * Indicates the external ID. Applicable only when this reference is of an external entity.
     */
    externalId: string;
    /**
     * A unique identifier assigned to the Application Segment
     */
    id: number;
    /**
     * The name of the Application Segment
     */
    name: string;
}

export interface GetForwardingControlProxyGatewayLastModifiedBy {
    extensions: {[key: string]: string};
    /**
     * The ID of the forwarding control Proxy Gateway resource.
     */
    id: number;
    /**
     * The name of the forwarding control Proxy Gateway to be exported.
     */
    name: string;
}

export interface GetForwardingControlProxyGatewayPrimaryProxy {
    /**
     * The ID of the forwarding control Proxy Gateway resource.
     */
    id: number;
    /**
     * The name of the forwarding control Proxy Gateway to be exported.
     */
    name: string;
}

export interface GetForwardingControlProxyGatewaySecondaryProxy {
    /**
     * The ID of the forwarding control Proxy Gateway resource.
     */
    id: number;
    /**
     * The name of the forwarding control Proxy Gateway to be exported.
     */
    name: string;
}

export interface GetForwardingControlRuleDepartment {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleDestIpGroup {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleDestIpv6Group {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleDevice {
    extensions: {[key: string]: string};
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleDeviceGroup {
    extensions: {[key: string]: string};
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleEcGroup {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleGroup {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleLabel {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleLocation {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleLocationGroup {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleNwApplicationGroup {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleNwService {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleNwServiceGroup {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleProxyGateway {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleSrcIpGroup {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleSrcIpv6Group {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleUser {
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleZpaAppSegment {
    /**
     * (int) Identifier that uniquely identifies an entity
     */
    externalId: string;
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlRuleZpaApplicationSegment {
    /**
     * Additional information about the Application Segment
     */
    ddescription: string;
    /**
     * ID of the ZPA tenant where the Application Segment is configured
     */
    deleted: boolean;
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
    /**
     * ID of the ZPA tenant where the Application Segment is configured
     */
    zpaId: number;
}

export interface GetForwardingControlRuleZpaApplicationSegmentGroup {
    /**
     * Indicates whether the ZPA Application Segment Group has been deleted
     */
    deleted: boolean;
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
    /**
     * The number of ZPA Application Segments in the group
     */
    zpaAppSegmentsCount: number;
    /**
     * Indicates the external ID. Applicable only when this reference is of an external entity.
     */
    zpaId: number;
}

export interface GetForwardingControlRuleZpaGateway {
    extensions: {[key: string]: string};
    /**
     * A unique identifier assigned to the forwarding rule.
     */
    id: number;
    /**
     * The name of the forwarding rule.
     */
    name: string;
}

export interface GetForwardingControlZPAGatewayLastModifiedBy {
    extensions: {[key: string]: string};
    /**
     * The ID of the forwarding control ZPA Gateway resource.
     */
    id: number;
    /**
     * The name of the forwarding control ZPA Gateway to be exported.
     */
    name: string;
}

export interface GetForwardingControlZPAGatewayZpaAppSegment {
    /**
     * (string) An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
     */
    externalId: string;
    /**
     * The name of the forwarding control ZPA Gateway to be exported.
     */
    name: string;
}

export interface GetForwardingControlZPAGatewayZpaServerGroup {
    /**
     * (string) An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
     */
    externalId: string;
    /**
     * The name of the forwarding control ZPA Gateway to be exported.
     */
    name: string;
}

export interface GetLocationGroupsDynamicLocationGroupCriteria {
    /**
     * (Block List)
     */
    cities?: outputs.GetLocationGroupsDynamicLocationGroupCriteriaCity[];
    /**
     * (List of String) One or more countries from a predefined set
     */
    countries?: string[];
    /**
     * (Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.
     */
    enableBandwidthControl: boolean;
    /**
     * (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
     */
    enableCaution: boolean;
    /**
     * (Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
     */
    enableXffForwarding: boolean;
    /**
     * (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
     */
    enforceAup: boolean;
    /**
     * (Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
     */
    enforceAuthentication: boolean;
    /**
     * (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
     */
    enforceFirewallControl: boolean;
    /**
     * (Block List)
     */
    managedBies: outputs.GetLocationGroupsDynamicLocationGroupCriteriaManagedBy[];
    /**
     * Location group name
     */
    names?: outputs.GetLocationGroupsDynamicLocationGroupCriteriaName[];
    /**
     * (List of String) One or more location profiles from a predefined set
     */
    profiles?: string[];
}

export interface GetLocationGroupsDynamicLocationGroupCriteriaCity {
    /**
     * (String) String value to be matched or partially matched
     */
    matchString?: string;
    /**
     * (String) Operator that performs match action
     */
    matchType?: string;
}

export interface GetLocationGroupsDynamicLocationGroupCriteriaManagedBy {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the location group
     */
    id: number;
    /**
     * Location group name
     */
    name: string;
}

export interface GetLocationGroupsDynamicLocationGroupCriteriaName {
    /**
     * (String) String value to be matched or partially matched
     */
    matchString?: string;
    /**
     * (String) Operator that performs match action
     */
    matchType?: string;
}

export interface GetLocationGroupsLastModUser {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the location group
     */
    id: number;
    /**
     * Location group name
     */
    name: string;
}

export interface GetLocationGroupsLocation {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the location group
     */
    id: number;
    /**
     * Location group name
     */
    name: string;
}

export interface GetLocationManagementVpnCredential {
    /**
     * (String) Additional information about this VPN credential.
     * Additional information about this VPN credential.
     */
    comments: string;
    /**
     * (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
     */
    fqdn: string;
    /**
     * The ID of the location to be exported.
     */
    id: number;
    /**
     * (List of Object)
     */
    locations: outputs.GetLocationManagementVpnCredentialLocation[];
    /**
     * (List of Object)
     */
    managedBies: outputs.GetLocationManagementVpnCredentialManagedBy[];
    /**
     * (String) Pre-shared key. This is a required field for `UFQDN` and IP auth type.
     */
    preSharedKey: string;
    /**
     * (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
     */
    type: string;
}

export interface GetLocationManagementVpnCredentialLocation {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * The ID of the location to be exported.
     */
    id: number;
    /**
     * The name of the location to be exported.
     */
    name: string;
}

export interface GetLocationManagementVpnCredentialManagedBy {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * The ID of the location to be exported.
     */
    id: number;
    /**
     * The name of the location to be exported.
     */
    name: string;
}

export interface GetRuleLabelsCreatedBy {
    extensions: {[key: string]: string};
    /**
     * The unique identifer for the device group.
     */
    id: number;
    /**
     * The name of the rule label to be exported.
     */
    name: string;
}

export interface GetRuleLabelsLastModifiedBy {
    extensions: {[key: string]: string};
    /**
     * The unique identifer for the device group.
     */
    id: number;
    /**
     * The name of the rule label to be exported.
     */
    name: string;
}

export interface GetSSLInspectionRulesAction {
    decryptSubActions?: outputs.GetSSLInspectionRulesActionDecryptSubAction[];
    /**
     * Action taken when bypassing SSL intercept
     */
    doNotDecryptSubActions: outputs.GetSSLInspectionRulesActionDoNotDecryptSubAction[];
    /**
     * Whether to override the default SSL interception certificate.
     */
    overrideDefaultCertificate: boolean;
    /**
     * Whether to show End User Notification (EUN).
     */
    showEun: boolean;
    /**
     * Whether to display the EUN ATP page.
     */
    showEunatp: boolean;
    /**
     * Action taken when enabling SSL intercept
     */
    sslInterceptionCerts: outputs.GetSSLInspectionRulesActionSslInterceptionCert[];
    /**
     * The action type for this rule. Possible values: `BLOCK`, `DECRYPT`, or `DO_NOT_DECRYPT`.
     */
    type: string;
}

export interface GetSSLInspectionRulesActionDecryptSubAction {
    /**
     * Whether to block SSL traffic when SNI is not present.
     */
    blockSslTrafficWithNoSniEnabled: boolean;
    blockUndecrypt: boolean;
    http2Enabled: boolean;
    minClientTlsVersion: string;
    minServerTlsVersion: string;
    /**
     * Whether to enable OCSP check.
     */
    ocspCheck: boolean;
    /**
     * Action to take on server certificates. Valid values might include `ALLOW`, `BLOCK`, or `PASS_THRU`.
     */
    serverCertificates: string;
}

export interface GetSSLInspectionRulesActionDoNotDecryptSubAction {
    /**
     * Whether to block SSL traffic when SNI is not present.
     */
    blockSslTrafficWithNoSniEnabled: boolean;
    /**
     * Whether to bypass other policies when action is set to `DO_NOT_DECRYPT`.
     */
    bypassOtherPolicies: boolean;
    /**
     * The minimum TLS version allowed when action is `DO_NOT_DECRYPT`.
     */
    minTlsVersion: string;
    /**
     * Whether to enable OCSP check.
     */
    ocspCheck: boolean;
    /**
     * Action to take on server certificates. Valid values might include `ALLOW`, `BLOCK`, or `PASS_THRU`.
     */
    serverCertificates: string;
}

export interface GetSSLInspectionRulesActionSslInterceptionCert {
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
}

export interface GetSSLInspectionRulesDepartment {
    /**
     * Additional information about the time window.
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesDestIpGroup {
    /**
     * Additional information about the time window.
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesDevice {
    /**
     * Additional information about the time window.
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesDeviceGroup {
    /**
     * Additional information about the time window.
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesGroup {
    /**
     * Additional information about the time window.
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesLabel {
    /**
     * Additional information about the time window.
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesLastModifiedBy {
    /**
     * Additional information about the time window.
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesLocation {
    /**
     * Additional information about the time window.
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesLocationGroup {
    /**
     * Additional information about the time window.
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesProxyGateway {
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesSourceIpGroup {
    /**
     * Additional information about the time window.
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesTimeWindow {
    /**
     * Additional information about the time window.
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesUser {
    /**
     * Additional information about the time window.
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesWorkloadGroup {
    /**
     * The description of the workload group
     */
    description: string;
    /**
     * The expression used within the workload group.
     */
    expression: string;
    /**
     * A nested block describing the JSON expression for the workload group.
     */
    expressionJsons: outputs.GetSSLInspectionRulesWorkloadGroupExpressionJson[];
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * A nested block with details about who last modified the workload group.
     */
    lastModifiedBies: outputs.GetSSLInspectionRulesWorkloadGroupLastModifiedBy[];
    /**
     * Timestamp when the workload group was last modified.
     */
    lastModifiedTime: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesWorkloadGroupExpressionJson {
    /**
     * Contains one or more tag types (and associated tags) combined using logical operators within a workload group
     */
    expressionContainers: outputs.GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainer[];
}

export interface GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainer {
    /**
     * The operator (either AND or OR) used to create logical relationships among tag types
     */
    operator: string;
    /**
     * Contains one or more tags and the logical operator used to combine the tags within a tag type
     */
    tagContainers: outputs.GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerTagContainer[];
    /**
     * The tag type selected from a predefined list
     */
    tagType: string;
}

export interface GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerTagContainer {
    /**
     * The operator (either AND or OR) used to create logical relationships among tag types
     */
    operator: string;
    tags: outputs.GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTag[];
}

export interface GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTag {
    key: string;
    value: string;
}

export interface GetSSLInspectionRulesWorkloadGroupLastModifiedBy {
    /**
     * Additional information about the time window.
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSSLInspectionRulesZpaAppSegment {
    /**
     * Indicates the external ID. Applicable only when this reference is of an external entity.
     */
    externalId: string;
    /**
     * Unique identifier for the SSL Inspection
     */
    id: number;
    /**
     * Name of the SSL Inspection
     */
    name: string;
}

export interface GetSandboxReportClassification {
    category: string;
    detectedMalware: string;
    score: number;
    type: string;
}

export interface GetSandboxReportExploit {
    risk: string;
    signature: string;
    signatureSources: string[];
}

export interface GetSandboxReportFileProperty {
    digitalCerificate: string;
    fileSize: number;
    fileType: string;
    issuer: string;
    md5: string;
    rootCa: string;
    sha1: string;
    sha256: string;
    ssdeep: string;
}

export interface GetSandboxReportNetworking {
    risk: string;
    signature: string;
    signatureSources: string[];
}

export interface GetSandboxReportOrigin {
    country: string;
    language: string;
    risk: string;
}

export interface GetSandboxReportPersistence {
    risk: string;
    signature: string;
    signatureSources: string[];
}

export interface GetSandboxReportSecurityBypass {
    risk: string;
    signature: string;
    signatureSources: string[];
}

export interface GetSandboxReportSpyware {
    risk: string;
    signature: string;
    signatureSources: string[];
}

export interface GetSandboxReportStealth {
    risk: string;
    signature: string;
    signatureSources: string[];
}

export interface GetSandboxReportSummary {
    category: string;
    duration: number;
    fileType: string;
    startTime: number;
    status: string;
}

export interface GetSandboxReportSystemSummary {
    risk: string;
    signature: string;
    signatureSources: string[];
}

export interface GetSandboxRulesDepartment {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Sandbox rule
     */
    id: number;
    /**
     * Name of the Sandbox rule
     */
    name: string;
}

export interface GetSandboxRulesGroup {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Sandbox rule
     */
    id: number;
    /**
     * Name of the Sandbox rule
     */
    name: string;
}

export interface GetSandboxRulesLabel {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Sandbox rule
     */
    id: number;
    /**
     * Name of the Sandbox rule
     */
    name: string;
}

export interface GetSandboxRulesLastModifiedBy {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Sandbox rule
     */
    id: number;
    /**
     * Name of the Sandbox rule
     */
    name: string;
}

export interface GetSandboxRulesLocation {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Sandbox rule
     */
    id: number;
    /**
     * Name of the Sandbox rule
     */
    name: string;
}

export interface GetSandboxRulesLocationGroup {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Sandbox rule
     */
    id: number;
    /**
     * Name of the Sandbox rule
     */
    name: string;
}

export interface GetSandboxRulesUser {
    /**
     * Additional information about the entity
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifier for the Sandbox rule
     */
    id: number;
    /**
     * Name of the Sandbox rule
     */
    name: string;
}

export interface GetSandboxRulesZpaAppSegment {
    /**
     * Indicates the external ID. Applicable only when this reference is of an external entity.
     */
    externalId: string;
    /**
     * Unique identifier for the Sandbox rule
     */
    id: number;
    /**
     * Name of the Sandbox rule
     */
    name: string;
}

export interface GetTrafficForwardingGREInternalIPRangeList {
    endIpAddress: string;
    startIpAddress: string;
}

export interface GetTrafficForwardingGRETunnelLastModifiedBy {
    id: number;
    name: string;
}

export interface GetTrafficForwardingGRETunnelManagedBy {
    id: number;
    name: string;
}

export interface GetTrafficForwardingGRETunnelPrimaryDestVip {
    city: string;
    countryCode: string;
    datacenter: string;
    id: number;
    latitude: number;
    longitude: number;
    privateServiceEdge: boolean;
    region: string;
    virtualIp: string;
}

export interface GetTrafficForwardingGRETunnelSecondaryDestVip {
    city: string;
    countryCode: string;
    datacenter: string;
    id: number;
    latitude: number;
    longitude: number;
    privateServiceEdge: boolean;
    region: string;
    virtualIp: string;
}

export interface GetTrafficForwardingStaticIPCity {
    /**
     * The unique identifier for the static IP address
     */
    id: number;
    /**
     * (String) The configured name of the entity
     */
    name: string;
}

export interface GetTrafficForwardingStaticIPLastModifiedBy {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * The unique identifier for the static IP address
     */
    id: number;
    /**
     * (String) The configured name of the entity
     */
    name: string;
}

export interface GetTrafficForwardingStaticIPManagedBy {
    /**
     * The unique identifier for the static IP address
     */
    id: number;
    /**
     * (String) The configured name of the entity
     */
    name: string;
}

export interface GetTrafficForwardingVIPRecommendedListList {
    /**
     * (String) Data center city information
     */
    city: string;
    /**
     * (String) Data center information
     */
    datacenter?: string;
    /**
     * Unique identifer of the GRE virtual IP address (VIP)
     */
    id?: number;
    /**
     * (Number) The latitude coordinate of the GRE tunnel source.
     */
    latitude: number;
    /**
     * (Number) The longitude coordinate of the GRE tunnel source.
     */
    longitude: number;
    /**
     * (Boolean) Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
     */
    privateServiceEdge?: boolean;
    /**
     * (String) Data center region information.
     */
    region: string;
    /**
     * (String) GRE cluster virtual IP address (VIP)
     */
    virtualIp?: string;
}

export interface GetTrafficForwardingVPNCredentialsLocation {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifer of the GRE virtual IP address (VIP)
     */
    id: number;
    /**
     * (String) The configured name of the entity
     */
    name: string;
}

export interface GetTrafficForwardingVPNCredentialsManagedBy {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * Unique identifer of the GRE virtual IP address (VIP)
     */
    id: number;
    /**
     * (String) The configured name of the entity
     */
    name: string;
}

export interface GetURLCategoriesScope {
    /**
     * (List of Object)
     */
    scopeEntities: outputs.GetURLCategoriesScopeScopeEntity[];
    /**
     * (List of Object) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
     */
    scopeGroupMemberEntities: outputs.GetURLCategoriesScopeScopeGroupMemberEntity[];
    /**
     * (String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
     */
    type: string;
}

export interface GetURLCategoriesScopeScopeEntity {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL category
     */
    id: number;
    /**
     * (String) The configured name of the entity
     */
    name: string;
}

export interface GetURLCategoriesScopeScopeGroupMemberEntity {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL category
     */
    id: number;
    /**
     * (String) The configured name of the entity
     */
    name: string;
}

export interface GetURLCategoriesUrlKeywordCount {
    /**
     * (Number) Count of total keywords with retain parent category.
     */
    retainParentKeywordCount: number;
    /**
     * (Number) Count of URLs with retain parent category.
     */
    retainParentUrlCount: number;
    /**
     * (Number) Total keyword count for the category.
     */
    totalKeywordCount: number;
    /**
     * (Number) Custom URL count for the category.
     */
    totalUrlCount: number;
}

export interface GetURLFilteringRulesCbiProfile {
    /**
     * URL Filtering Rule ID
     */
    id: string;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
    /**
     * (String) The browser isolation profile URL
     */
    url: string;
}

export interface GetURLFilteringRulesDepartment {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL Filtering Rule ID
     */
    id: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetURLFilteringRulesDevice {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL Filtering Rule ID
     */
    id: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetURLFilteringRulesDeviceGroup {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL Filtering Rule ID
     */
    id: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetURLFilteringRulesGroup {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL Filtering Rule ID
     */
    id: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetURLFilteringRulesLabel {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL Filtering Rule ID
     */
    id: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetURLFilteringRulesLastModifiedBy {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL Filtering Rule ID
     */
    id: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetURLFilteringRulesLocation {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL Filtering Rule ID
     */
    id: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetURLFilteringRulesLocationGroup {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL Filtering Rule ID
     */
    id: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetURLFilteringRulesOverrideGroup {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL Filtering Rule ID
     */
    id: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetURLFilteringRulesOverrideUser {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL Filtering Rule ID
     */
    id: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetURLFilteringRulesSourceIpGroup {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL Filtering Rule ID
     */
    id: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetURLFilteringRulesTimeWindow {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL Filtering Rule ID
     */
    id: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetURLFilteringRulesUser {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL Filtering Rule ID
     */
    id: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetURLFilteringRulesWorkloadGroup {
    /**
     * (String) Additional information about the rule
     */
    description: string;
    /**
     * The description of the workload group
     */
    expression: string;
    expressionJsons: outputs.GetURLFilteringRulesWorkloadGroupExpressionJson[];
    /**
     * URL Filtering Rule ID
     */
    id: number;
    lastModifiedBies: outputs.GetURLFilteringRulesWorkloadGroupLastModifiedBy[];
    /**
     * (Number) When the rule was last modified
     */
    lastModifiedTime: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetURLFilteringRulesWorkloadGroupExpressionJson {
    expressionContainers: outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainer[];
}

export interface GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainer {
    operator: string;
    tagContainers: outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainer[];
    tagType: string;
}

export interface GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainer {
    operator: string;
    tags: outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTag[];
}

export interface GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTag {
    key: string;
    value: string;
}

export interface GetURLFilteringRulesWorkloadGroupLastModifiedBy {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    /**
     * URL Filtering Rule ID
     */
    id: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name: string;
}

export interface GetUserManagementDepartment {
    /**
     * (String) Additional information about the group
     */
    comments: string;
    /**
     * (Boolean) default: `false`
     */
    deleted: boolean;
    /**
     * The ID of the time window resource.
     */
    id: number;
    /**
     * (Number) Unique identfier for the identity provider (IdP)
     */
    idpId: number;
    /**
     * User name. This appears when choosing users for policies.
     */
    name: string;
}

export interface GetUserManagementGroup {
    /**
     * (String) Additional information about the group
     */
    comments: string;
    /**
     * The ID of the time window resource.
     */
    id: number;
    /**
     * (Number) Unique identfier for the identity provider (IdP)
     */
    idpId: number;
    /**
     * User name. This appears when choosing users for policies.
     */
    name: string;
}

export interface GetWorkloadGroupsExpressionJson {
    /**
     * (List) Contains one or more tag types (and associated tags) combined using logical operators within a workload group
     */
    expressionContainers: outputs.GetWorkloadGroupsExpressionJsonExpressionContainer[];
}

export interface GetWorkloadGroupsExpressionJsonExpressionContainer {
    /**
     * (String) The operator (either AND or OR) used to create logical relationships among tag types. Returned values are: ``AND``, ``OR``, ``OPEN_PARENTHESES``, ``CLOSE_PARENTHESES``
     */
    operator: string;
    /**
     * (String) Contains one or more tags and the logical operator used to combine the tags within a tag type ``CLOSE_PARENTHESES``
     */
    tagContainers: outputs.GetWorkloadGroupsExpressionJsonExpressionContainerTagContainer[];
    /**
     * (String) The tag type selected from a predefined list. Returned values are: ``ANY``, ``VPC``, ``SUBNET``, ``VM``, ``ENI``, ``ATTR``
     */
    tagType: string;
}

export interface GetWorkloadGroupsExpressionJsonExpressionContainerTagContainer {
    /**
     * (String) The operator (either AND or OR) used to create logical relationships among tag types. Returned values are: ``AND``, ``OR``, ``OPEN_PARENTHESES``, ``CLOSE_PARENTHESES``
     */
    operator: string;
    /**
     * (String) One or more tags, each consisting of a key-value pair, selected within a tag type. If multiple tags are present within a tag type, they are combined using a logical operator. Note: A maximum of 8 tags can be added to a workload group, irrespective of the number of tag types present.
     */
    tags: outputs.GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerTag[];
}

export interface GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerTag {
    /**
     * (String) The key component present in the key-value pair contained in a tag
     */
    key: string;
    /**
     * (string) The value component present in the key-value pair contained in a tag
     */
    value: string;
}

export interface GetWorkloadGroupsLastModifiedBy {
    /**
     * (Map of String)
     */
    extensions: {[key: string]: string};
    externalId: string;
    /**
     * The unique identifer for the workload group.
     */
    id: number;
    /**
     * The name of the workload group to be exported.
     */
    name: string;
}

export interface LocationManagementDynamicLocationGroups {
    ids?: number[];
}

export interface LocationManagementStaticLocationGroups {
    ids?: number[];
}

export interface LocationManagementVpnCredential {
    comments: string;
    fqdn: string;
    id: number;
    ipAddress: string;
    preSharedKey?: string;
    type: string;
}

export interface SSLInspectionRulesAction {
    /**
     * (Block List) - Action taken when enabling SSL intercept
     */
    decryptSubActions?: outputs.SSLInspectionRulesActionDecryptSubAction[];
    /**
     * (Block List) - Action taken when bypassing SSL intercept
     */
    doNotDecryptSubActions?: outputs.SSLInspectionRulesActionDoNotDecryptSubAction[];
    /**
     * (Boolean) - Whether to override the default SSL interception certificate.
     */
    overrideDefaultCertificate?: boolean;
    /**
     * (Boolean) - Enable this setting to display end user notifications.
     */
    showEun?: boolean;
    /**
     * (Boolean) - Whether to display the EUN ATP page.
     */
    showEunatp?: boolean;
    /**
     * has the following attributes:
     * **NOTE** This block can only be set when `overrideDefaultCertificate` is `true`
     */
    sslInterceptionCerts?: outputs.SSLInspectionRulesActionSslInterceptionCert[];
    /**
     * (String) - The action type for this rule. Possible values: `BLOCK`.
     */
    type?: string;
}

export interface SSLInspectionRulesActionDecryptSubAction {
    /**
     * (Boolean) - Whether to block SSL traffic when SNI is not present.
     */
    blockSslTrafficWithNoSniEnabled?: boolean;
    /**
     * (Boolean) - Enable to block traffic from servers that use non-standard encryption methods or require mutual TLS authentication.
     */
    blockUndecrypt?: boolean;
    /**
     * (Boolean)
     */
    http2Enabled?: boolean;
    /**
     * (String) - The minimum TLS version allowed on the client side: Supported Values are: `CLIENT_TLS_1_0`, `CLIENT_TLS_1_1`, `CLIENT_TLS_1_2`,  `CLIENT_TLS_1_3`.
     */
    minClientTlsVersion: string;
    /**
     * (String) - The minimum TLS version allowed on the server side: Supported Values are: `SERVER_TLS_1_0`, `SERVER_TLS_1_1`, `SERVER_TLS_1_2`,  `SERVER_TLS_1_3`.
     */
    minServerTlsVersion: string;
    /**
     * (Boolean) - Whether to enable OCSP check.
     */
    ocspCheck?: boolean;
    /**
     * (String) - Action to take on server certificates. Valid values might include `ALLOW`, `BLOCK`, or `PASS_THRU`.
     */
    serverCertificates?: string;
}

export interface SSLInspectionRulesActionDoNotDecryptSubAction {
    /**
     * (Boolean) - Whether to block SSL traffic when SNI is not present.
     */
    blockSslTrafficWithNoSniEnabled?: boolean;
    /**
     * (Boolean) - Whether to bypass other policies when action is set to `DO_NOT_DECRYPT`.
     */
    bypassOtherPolicies?: boolean;
    /**
     * (String) -  The minimum TLS version allowed on the server side: Supported Values are: `SERVER_TLS_1_0`, `SERVER_TLS_1_1`, `SERVER_TLS_1_2`,  `SERVER_TLS_1_3`.
     * **NOTE** `minTlsVersion` and `serverCertificates` CANNOT be set if `bypassOtherPolicies` is `true`
     */
    minTlsVersion?: string;
    /**
     * (Boolean) - Whether to enable OCSP check.
     */
    ocspCheck?: boolean;
    /**
     * (String) - Action to take on server certificates. Valid values might include `ALLOW`, `BLOCK`, or `PASS_THRU`.
     */
    serverCertificates?: string;
}

export interface SSLInspectionRulesActionSslInterceptionCert {
    /**
     * (Integer) - A unique identifier assigned to the workload group
     */
    id?: number;
}

export interface SSLInspectionRulesDepartments {
    /**
     * (Integer) - A unique identifier assigned to the workload group
     */
    ids?: number[];
}

export interface SSLInspectionRulesDestIpGroups {
    /**
     * (Integer) - A unique identifier assigned to the workload group
     */
    ids?: number[];
}

export interface SSLInspectionRulesDeviceGroups {
    /**
     * (Integer) - A unique identifier assigned to the workload group
     */
    ids?: number[];
}

export interface SSLInspectionRulesDevices {
    /**
     * (Integer) - A unique identifier assigned to the workload group
     */
    ids?: number[];
}

export interface SSLInspectionRulesGroups {
    /**
     * (Integer) - A unique identifier assigned to the workload group
     */
    ids?: number[];
}

export interface SSLInspectionRulesLabels {
    /**
     * (Integer) - A unique identifier assigned to the workload group
     */
    id?: number;
}

export interface SSLInspectionRulesLocationGroups {
    /**
     * (Integer) - A unique identifier assigned to the workload group
     */
    ids?: number[];
}

export interface SSLInspectionRulesLocations {
    /**
     * (Integer) - A unique identifier assigned to the workload group
     */
    ids?: number[];
}

export interface SSLInspectionRulesProxyGateways {
    /**
     * (Integer) - A unique identifier assigned to the workload group
     */
    ids?: number[];
}

export interface SSLInspectionRulesSourceIpGroups {
    /**
     * (Integer) - A unique identifier assigned to the workload group
     */
    ids?: number[];
}

export interface SSLInspectionRulesTimeWindows {
    /**
     * (Integer) - A unique identifier assigned to the workload group
     */
    ids?: number[];
}

export interface SSLInspectionRulesUsers {
    /**
     * (Integer) - A unique identifier assigned to the workload group
     */
    ids?: number[];
}

export interface SSLInspectionRulesWorkloadGroup {
    /**
     * (Integer) - A unique identifier assigned to the workload group
     */
    id: number;
    /**
     * The name of the resource.
     */
    name?: string;
}

export interface SSLInspectionRulesZpaAppSegment {
    /**
     * External ID of the application segment.
     */
    externalId: string;
    /**
     * Name of the application segment.
     */
    name: string;
}

export interface SandboxRulesDepartments {
    /**
     * (Integer) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface SandboxRulesGroups {
    /**
     * (Integer) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface SandboxRulesLabels {
    /**
     * (Integer) Identifier that uniquely identifies an entity
     */
    id?: number;
}

export interface SandboxRulesLocationGroups {
    /**
     * (Integer) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface SandboxRulesLocations {
    /**
     * (Integer) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface SandboxRulesUsers {
    /**
     * (Integer) Identifier that uniquely identifies an entity
     */
    ids?: number[];
}

export interface SandboxRulesZpaAppSegment {
    /**
     * External ID of the application segment.
     */
    externalId: string;
    /**
     * Name of the application segment.
     */
    name: string;
}

export interface TrafficForwardingGRETunnelPrimaryDestVip {
    /**
     * Data center information
     */
    datacenter: string;
    /**
     * GRE cluster virtual IP ID
     */
    id: number;
    /**
     * GRE cluster virtual IP address (VIP)
     */
    virtualIp: string;
}

export interface TrafficForwardingGRETunnelSecondaryDestVip {
    /**
     * Data center information
     */
    datacenter: string;
    /**
     * GRE cluster virtual IP ID
     */
    id: number;
    /**
     * GRE cluster virtual IP address (VIP)
     */
    virtualIp: string;
}

export interface URLCategoriesScope {
    /**
     * list of scope IDs
     */
    scopeEntities: outputs.URLCategoriesScopeScopeEntities;
    /**
     * list of scope group member IDs
     */
    scopeGroupMemberEntities: outputs.URLCategoriesScopeScopeGroupMemberEntities;
    type?: string;
}

export interface URLCategoriesScopeScopeEntities {
    ids: number[];
}

export interface URLCategoriesScopeScopeGroupMemberEntities {
    ids: number[];
}

export interface URLCategoriesUrlKeywordCounts {
    /**
     * Count of total keywords with retain parent category.
     */
    retainParentKeywordCount: number;
    /**
     * Count of URLs with retain parent category.
     */
    retainParentUrlCount: number;
    /**
     * Total keyword count for the category.
     */
    totalKeywordCount: number;
    /**
     * Custom URL count for the category.
     */
    totalUrlCount: number;
}

export interface URLFilteringRulesCbiProfile {
    id?: string;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name?: string;
    /**
     * The browser isolation profile URL
     */
    url?: string;
}

export interface URLFilteringRulesDepartments {
    ids?: number[];
}

export interface URLFilteringRulesDeviceGroups {
    ids?: number[];
}

export interface URLFilteringRulesDevices {
    ids?: number[];
}

export interface URLFilteringRulesGroups {
    ids?: number[];
}

export interface URLFilteringRulesLabels {
    ids?: number[];
}

export interface URLFilteringRulesLocationGroups {
    ids?: number[];
}

export interface URLFilteringRulesLocations {
    ids?: number[];
}

export interface URLFilteringRulesOverrideGroups {
    ids?: number[];
}

export interface URLFilteringRulesOverrideUsers {
    ids?: number[];
}

export interface URLFilteringRulesSourceIpGroups {
    ids?: number[];
}

export interface URLFilteringRulesTimeWindows {
    ids?: number[];
}

export interface URLFilteringRulesUsers {
    ids?: number[];
}

export interface URLFilteringRulesWorkloadGroup {
    /**
     * The unique identifier for the resource.
     */
    id: number;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name?: string;
}

export interface UserManagementDepartment {
    /**
     * Additional information about this department
     */
    comments: string;
    deleted: boolean;
    id?: number;
    /**
     * Identity provider (IdP) ID
     */
    idpId: number;
    /**
     * User name. This appears when choosing users for policies.
     */
    name: string;
}

export interface UserManagementGroups {
    /**
     * Unique identfier for the group
     */
    ids?: number[];
}

