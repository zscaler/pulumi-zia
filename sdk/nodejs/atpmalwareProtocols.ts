// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zia/configuring-malware-protection-policy)
 * * [API documentation](https://help.zscaler.com/zia/malware-protection-policy#/cyberThreatProtection/atpMalwareInspection-put)
 *
 * The **zia_atp_malware_protocols** resource allows you to update protocol inspection configurations of Malware Protection policy. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **atp_malware_protocols** can be imported by using `protocol` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/aTPMalwareProtocols:ATPMalwareProtocols this "protocol"
 * ```
 */
export class ATPMalwareProtocols extends pulumi.CustomResource {
    /**
     * Get an existing ATPMalwareProtocols resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ATPMalwareProtocolsState, opts?: pulumi.CustomResourceOptions): ATPMalwareProtocols {
        return new ATPMalwareProtocols(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/aTPMalwareProtocols:ATPMalwareProtocols';

    /**
     * Returns true if the given object is an instance of ATPMalwareProtocols.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ATPMalwareProtocols {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ATPMalwareProtocols.__pulumiType;
    }

    /**
     * A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
     */
    public readonly inspectFtp!: pulumi.Output<boolean>;
    /**
     * A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
     */
    public readonly inspectFtpOverHttp!: pulumi.Output<boolean>;
    /**
     * A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
     * malicious content in real time
     */
    public readonly inspectHttp!: pulumi.Output<boolean>;

    /**
     * Create a ATPMalwareProtocols resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ATPMalwareProtocolsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ATPMalwareProtocolsArgs | ATPMalwareProtocolsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ATPMalwareProtocolsState | undefined;
            resourceInputs["inspectFtp"] = state ? state.inspectFtp : undefined;
            resourceInputs["inspectFtpOverHttp"] = state ? state.inspectFtpOverHttp : undefined;
            resourceInputs["inspectHttp"] = state ? state.inspectHttp : undefined;
        } else {
            const args = argsOrState as ATPMalwareProtocolsArgs | undefined;
            resourceInputs["inspectFtp"] = args ? args.inspectFtp : undefined;
            resourceInputs["inspectFtpOverHttp"] = args ? args.inspectFtpOverHttp : undefined;
            resourceInputs["inspectHttp"] = args ? args.inspectHttp : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ATPMalwareProtocols.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ATPMalwareProtocols resources.
 */
export interface ATPMalwareProtocolsState {
    /**
     * A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
     */
    inspectFtp?: pulumi.Input<boolean>;
    /**
     * A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
     */
    inspectFtpOverHttp?: pulumi.Input<boolean>;
    /**
     * A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
     * malicious content in real time
     */
    inspectHttp?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ATPMalwareProtocols resource.
 */
export interface ATPMalwareProtocolsArgs {
    /**
     * A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
     */
    inspectFtp?: pulumi.Input<boolean>;
    /**
     * A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
     */
    inspectFtpOverHttp?: pulumi.Input<boolean>;
    /**
     * A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
     * malicious content in real time
     */
    inspectHttp?: pulumi.Input<boolean>;
}
