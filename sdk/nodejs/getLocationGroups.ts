// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use the **zia_location_groups** data source to get information about a location group option available in the Zscaler Internet Access.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 *
 * const example = zia.getLocationGroups({
 *     name: "Corporate User Traffic Group",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 *
 * const example = zia.getLocationGroups({
 *     name: "Guest Wifi Group",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 *
 * const example = zia.getLocationGroups({
 *     name: "IoT Traffic Group",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 *
 * const example = zia.getLocationGroups({
 *     name: "Server Traffic Group",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 *
 * const example = zia.getLocationGroups({
 *     name: "Server Traffic Group",
 * });
 * ```
 */
export function getLocationGroups(args?: GetLocationGroupsArgs, opts?: pulumi.InvokeOptions): Promise<GetLocationGroupsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getLocationGroups:getLocationGroups", {
        "dynamicLocationGroupCriterias": args.dynamicLocationGroupCriterias,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getLocationGroups.
 */
export interface GetLocationGroupsArgs {
    /**
     * (Block Set) Dynamic location group information.
     */
    dynamicLocationGroupCriterias?: inputs.GetLocationGroupsDynamicLocationGroupCriteria[];
    /**
     * Location group name
     */
    name?: string;
}

/**
 * A collection of values returned by getLocationGroups.
 */
export interface GetLocationGroupsResult {
    /**
     * (List of Object)
     */
    readonly comments: string;
    /**
     * (Boolean) Indicates the location group was deleted
     */
    readonly deleted: boolean;
    /**
     * (Block Set) Dynamic location group information.
     */
    readonly dynamicLocationGroupCriterias?: outputs.GetLocationGroupsDynamicLocationGroupCriteria[];
    /**
     * (String) The location group's type (i.e., Static or Dynamic)
     */
    readonly groupType: string;
    /**
     * (Number) Identifier that uniquely identifies an entity
     */
    readonly id: number;
    /**
     * (List of Object) Automatically populated with the current time, after a successful POST or PUT request.
     */
    readonly lastModTime: number;
    /**
     * (List of Object)
     */
    readonly lastModUsers: outputs.GetLocationGroupsLastModUser[];
    /**
     * (List of Object) The Name-ID pairs of the locations that are assigned to the static location group. This is ignored if the groupType is Dynamic.
     */
    readonly locations: outputs.GetLocationGroupsLocation[];
    /**
     * (String) The configured name of the entity
     */
    readonly name?: string;
    /**
     * (Boolean)
     */
    readonly predefined: boolean;
}
/**
 * Use the **zia_location_groups** data source to get information about a location group option available in the Zscaler Internet Access.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 *
 * const example = zia.getLocationGroups({
 *     name: "Corporate User Traffic Group",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 *
 * const example = zia.getLocationGroups({
 *     name: "Guest Wifi Group",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 *
 * const example = zia.getLocationGroups({
 *     name: "IoT Traffic Group",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 *
 * const example = zia.getLocationGroups({
 *     name: "Server Traffic Group",
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 *
 * const example = zia.getLocationGroups({
 *     name: "Server Traffic Group",
 * });
 * ```
 */
export function getLocationGroupsOutput(args?: GetLocationGroupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLocationGroupsResult> {
    return pulumi.output(args).apply((a: any) => getLocationGroups(a, opts))
}

/**
 * A collection of arguments for invoking getLocationGroups.
 */
export interface GetLocationGroupsOutputArgs {
    /**
     * (Block Set) Dynamic location group information.
     */
    dynamicLocationGroupCriterias?: pulumi.Input<pulumi.Input<inputs.GetLocationGroupsDynamicLocationGroupCriteriaArgs>[]>;
    /**
     * Location group name
     */
    name?: pulumi.Input<string>;
}
