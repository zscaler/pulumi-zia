// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zia/about-third-party-proxies)
 * * [API documentation](https://help.zscaler.com/zia/forwarding-control-policy#/proxies-get)
 *
 * Use the **zia_forwarding_control_proxies** data source to get information about a third-party proxy service available in the Zscaler Internet Access.
 *
 * ## Example Usage
 *
 * ### Retrieve By Name
 *
 * ### Retrieve By ID
 */
export function getForwardingControlProxies(args?: GetForwardingControlProxiesArgs, opts?: pulumi.InvokeOptions): Promise<GetForwardingControlProxiesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getForwardingControlProxies:getForwardingControlProxies", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getForwardingControlProxies.
 */
export interface GetForwardingControlProxiesArgs {
    /**
     * Unique identifier for the third-party proxy services
     */
    id?: number;
    /**
     * Proxy name for the third-party proxy services
     */
    name?: string;
}

/**
 * A collection of values returned by getForwardingControlProxies.
 */
export interface GetForwardingControlProxiesResult {
    /**
     * (String) The IP address or the FQDN of the third-party proxy service
     */
    readonly address: string;
    /**
     * (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
     */
    readonly base64EncodeXauHeader: boolean;
    /**
     * (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
     */
    readonly certs: outputs.GetForwardingControlProxiesCert[];
    /**
     * (String) Additional notes or information
     */
    readonly description: string;
    /**
     * (Integer) Identifier that uniquely identifies the certificate
     */
    readonly id: number;
    /**
     * (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
     */
    readonly insertXauHeader: boolean;
    readonly lastModifiedBies: outputs.GetForwardingControlProxiesLastModifiedBy[];
    readonly lastModifiedTime: number;
    readonly name: string;
    /**
     * (integer) The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
     */
    readonly port: number;
    /**
     * (String) Gateway type. Returned values: `PROXYCHAIN`, `ZIA`, `ECSELF`
     */
    readonly type: string;
}
/**
 * * [Official documentation](https://help.zscaler.com/zia/about-third-party-proxies)
 * * [API documentation](https://help.zscaler.com/zia/forwarding-control-policy#/proxies-get)
 *
 * Use the **zia_forwarding_control_proxies** data source to get information about a third-party proxy service available in the Zscaler Internet Access.
 *
 * ## Example Usage
 *
 * ### Retrieve By Name
 *
 * ### Retrieve By ID
 */
export function getForwardingControlProxiesOutput(args?: GetForwardingControlProxiesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetForwardingControlProxiesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("zia:index/getForwardingControlProxies:getForwardingControlProxies", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getForwardingControlProxies.
 */
export interface GetForwardingControlProxiesOutputArgs {
    /**
     * Unique identifier for the third-party proxy services
     */
    id?: pulumi.Input<number>;
    /**
     * Proxy name for the third-party proxy services
     */
    name?: pulumi.Input<string>;
}
