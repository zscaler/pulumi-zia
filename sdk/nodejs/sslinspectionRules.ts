// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ### Action - DECRYPT
 *
 * ### Action - DO_NOT_DECRYPT - Bypass Rule (False)
 *
 * ### Action - DO_NOT_DECRYPT - Bypass Rule (True)
 *
 * ### Action - BLOCK
 */
export class SSLInspectionRules extends pulumi.CustomResource {
    /**
     * Get an existing SSLInspectionRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SSLInspectionRulesState, opts?: pulumi.CustomResourceOptions): SSLInspectionRules {
        return new SSLInspectionRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/sSLInspectionRules:SSLInspectionRules';

    /**
     * Returns true if the given object is an instance of SSLInspectionRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SSLInspectionRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SSLInspectionRules.__pulumiType;
    }

    /**
     * (Block List) - Action taken when the traffic matches policy
     */
    public readonly actions!: pulumi.Output<outputs.SSLInspectionRulesAction[] | undefined>;
    /**
     * (Set of String) -  The list of URL categories to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
     */
    public readonly cloudApplications!: pulumi.Output<string[] | undefined>;
    /**
     * (Block List) - ID pairs of departments for which the rule is applied.
     */
    public readonly departments!: pulumi.Output<outputs.SSLInspectionRulesDepartments | undefined>;
    /**
     * (String) -  Enter additional notes or information. The description cannot exceed 10,240 characters.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * (Block List) - ID pairs of destination IP address groups for which the rule is applied.
     */
    public readonly destIpGroups!: pulumi.Output<outputs.SSLInspectionRulesDestIpGroups | undefined>;
    /**
     * (Block List) - ID pairs of device groups for which the rule is applied.
     */
    public readonly deviceGroups!: pulumi.Output<outputs.SSLInspectionRulesDeviceGroups | undefined>;
    /**
     * (Set of String)  - List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
     */
    public readonly deviceTrustLevels!: pulumi.Output<string[] | undefined>;
    /**
     * (Block List) - ID pairs of devices for which the rule is applied
     */
    public readonly devices!: pulumi.Output<outputs.SSLInspectionRulesDevices | undefined>;
    /**
     * (Block List) - ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
     */
    public readonly groups!: pulumi.Output<outputs.SSLInspectionRulesGroups | undefined>;
    /**
     * (Block List) - ID pairs of labels associated with the rule.
     */
    public readonly labels!: pulumi.Output<outputs.SSLInspectionRulesLabels | undefined>;
    /**
     * (Block List) - ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
     */
    public readonly locationGroups!: pulumi.Output<outputs.SSLInspectionRulesLocationGroups | undefined>;
    /**
     * (Block List) - ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
     */
    public readonly locations!: pulumi.Output<outputs.SSLInspectionRulesLocations | undefined>;
    /**
     * The name of the SSL Inspection rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (String) -  Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
     */
    public readonly order!: pulumi.Output<number>;
    /**
     * (Set of String) -  Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
     */
    public readonly platforms!: pulumi.Output<string[] | undefined>;
    /**
     * (Block List) - When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
     */
    public readonly proxyGateways!: pulumi.Output<outputs.SSLInspectionRulesProxyGateways | undefined>;
    /**
     * (Integer) - The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
     */
    public readonly rank!: pulumi.Output<number | undefined>;
    /**
     * (Boolean) - Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
     */
    public readonly roadWarriorForKerberos!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly ruleId!: pulumi.Output<number>;
    /**
     * (Block List) - ID pairs of source IP address groups for which the rule is applied.
     */
    public readonly sourceIpGroups!: pulumi.Output<outputs.SSLInspectionRulesSourceIpGroups | undefined>;
    /**
     * (String) - The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * (Block List) - The time intervals during which the rule applies
     */
    public readonly timeWindows!: pulumi.Output<outputs.SSLInspectionRulesTimeWindows | undefined>;
    /**
     * (Set of String) -  The list of URL categories to which the DLP policy rule must be applied.
     */
    public readonly urlCategories!: pulumi.Output<string[] | undefined>;
    /**
     * (Set of String) -  A list of user agent types the rule applies to.
     */
    public readonly userAgentTypes!: pulumi.Output<string[] | undefined>;
    /**
     * (Block List) - The list of preconfigured workload groups to which the policy must be applied.
     */
    public readonly users!: pulumi.Output<outputs.SSLInspectionRulesUsers | undefined>;
    /**
     * (Block List) - The list of preconfigured workload groups to which the policy must be applied.
     */
    public readonly workloadGroups!: pulumi.Output<outputs.SSLInspectionRulesWorkloadGroup[]>;
    /**
     * (Block List) - The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
     */
    public readonly zpaAppSegments!: pulumi.Output<outputs.SSLInspectionRulesZpaAppSegment[]>;

    /**
     * Create a SSLInspectionRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SSLInspectionRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SSLInspectionRulesArgs | SSLInspectionRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SSLInspectionRulesState | undefined;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["cloudApplications"] = state ? state.cloudApplications : undefined;
            resourceInputs["departments"] = state ? state.departments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destIpGroups"] = state ? state.destIpGroups : undefined;
            resourceInputs["deviceGroups"] = state ? state.deviceGroups : undefined;
            resourceInputs["deviceTrustLevels"] = state ? state.deviceTrustLevels : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["locationGroups"] = state ? state.locationGroups : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["platforms"] = state ? state.platforms : undefined;
            resourceInputs["proxyGateways"] = state ? state.proxyGateways : undefined;
            resourceInputs["rank"] = state ? state.rank : undefined;
            resourceInputs["roadWarriorForKerberos"] = state ? state.roadWarriorForKerberos : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["sourceIpGroups"] = state ? state.sourceIpGroups : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeWindows"] = state ? state.timeWindows : undefined;
            resourceInputs["urlCategories"] = state ? state.urlCategories : undefined;
            resourceInputs["userAgentTypes"] = state ? state.userAgentTypes : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["workloadGroups"] = state ? state.workloadGroups : undefined;
            resourceInputs["zpaAppSegments"] = state ? state.zpaAppSegments : undefined;
        } else {
            const args = argsOrState as SSLInspectionRulesArgs | undefined;
            if ((!args || args.order === undefined) && !opts.urn) {
                throw new Error("Missing required property 'order'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["cloudApplications"] = args ? args.cloudApplications : undefined;
            resourceInputs["departments"] = args ? args.departments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destIpGroups"] = args ? args.destIpGroups : undefined;
            resourceInputs["deviceGroups"] = args ? args.deviceGroups : undefined;
            resourceInputs["deviceTrustLevels"] = args ? args.deviceTrustLevels : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["locationGroups"] = args ? args.locationGroups : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["platforms"] = args ? args.platforms : undefined;
            resourceInputs["proxyGateways"] = args ? args.proxyGateways : undefined;
            resourceInputs["rank"] = args ? args.rank : undefined;
            resourceInputs["roadWarriorForKerberos"] = args ? args.roadWarriorForKerberos : undefined;
            resourceInputs["sourceIpGroups"] = args ? args.sourceIpGroups : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timeWindows"] = args ? args.timeWindows : undefined;
            resourceInputs["urlCategories"] = args ? args.urlCategories : undefined;
            resourceInputs["userAgentTypes"] = args ? args.userAgentTypes : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["workloadGroups"] = args ? args.workloadGroups : undefined;
            resourceInputs["zpaAppSegments"] = args ? args.zpaAppSegments : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SSLInspectionRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SSLInspectionRules resources.
 */
export interface SSLInspectionRulesState {
    /**
     * (Block List) - Action taken when the traffic matches policy
     */
    actions?: pulumi.Input<pulumi.Input<inputs.SSLInspectionRulesAction>[]>;
    /**
     * (Set of String) -  The list of URL categories to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
     */
    cloudApplications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Block List) - ID pairs of departments for which the rule is applied.
     */
    departments?: pulumi.Input<inputs.SSLInspectionRulesDepartments>;
    /**
     * (String) -  Enter additional notes or information. The description cannot exceed 10,240 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * (Block List) - ID pairs of destination IP address groups for which the rule is applied.
     */
    destIpGroups?: pulumi.Input<inputs.SSLInspectionRulesDestIpGroups>;
    /**
     * (Block List) - ID pairs of device groups for which the rule is applied.
     */
    deviceGroups?: pulumi.Input<inputs.SSLInspectionRulesDeviceGroups>;
    /**
     * (Set of String)  - List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
     */
    deviceTrustLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Block List) - ID pairs of devices for which the rule is applied
     */
    devices?: pulumi.Input<inputs.SSLInspectionRulesDevices>;
    /**
     * (Block List) - ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
     */
    groups?: pulumi.Input<inputs.SSLInspectionRulesGroups>;
    /**
     * (Block List) - ID pairs of labels associated with the rule.
     */
    labels?: pulumi.Input<inputs.SSLInspectionRulesLabels>;
    /**
     * (Block List) - ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
     */
    locationGroups?: pulumi.Input<inputs.SSLInspectionRulesLocationGroups>;
    /**
     * (Block List) - ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
     */
    locations?: pulumi.Input<inputs.SSLInspectionRulesLocations>;
    /**
     * The name of the SSL Inspection rule
     */
    name?: pulumi.Input<string>;
    /**
     * (String) -  Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
     */
    order?: pulumi.Input<number>;
    /**
     * (Set of String) -  Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
     */
    platforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Block List) - When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
     */
    proxyGateways?: pulumi.Input<inputs.SSLInspectionRulesProxyGateways>;
    /**
     * (Integer) - The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
     */
    rank?: pulumi.Input<number>;
    /**
     * (Boolean) - Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
     */
    roadWarriorForKerberos?: pulumi.Input<boolean>;
    ruleId?: pulumi.Input<number>;
    /**
     * (Block List) - ID pairs of source IP address groups for which the rule is applied.
     */
    sourceIpGroups?: pulumi.Input<inputs.SSLInspectionRulesSourceIpGroups>;
    /**
     * (String) - The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
     */
    state?: pulumi.Input<string>;
    /**
     * (Block List) - The time intervals during which the rule applies
     */
    timeWindows?: pulumi.Input<inputs.SSLInspectionRulesTimeWindows>;
    /**
     * (Set of String) -  The list of URL categories to which the DLP policy rule must be applied.
     */
    urlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Set of String) -  A list of user agent types the rule applies to.
     */
    userAgentTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Block List) - The list of preconfigured workload groups to which the policy must be applied.
     */
    users?: pulumi.Input<inputs.SSLInspectionRulesUsers>;
    /**
     * (Block List) - The list of preconfigured workload groups to which the policy must be applied.
     */
    workloadGroups?: pulumi.Input<pulumi.Input<inputs.SSLInspectionRulesWorkloadGroup>[]>;
    /**
     * (Block List) - The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
     */
    zpaAppSegments?: pulumi.Input<pulumi.Input<inputs.SSLInspectionRulesZpaAppSegment>[]>;
}

/**
 * The set of arguments for constructing a SSLInspectionRules resource.
 */
export interface SSLInspectionRulesArgs {
    /**
     * (Block List) - Action taken when the traffic matches policy
     */
    actions?: pulumi.Input<pulumi.Input<inputs.SSLInspectionRulesAction>[]>;
    /**
     * (Set of String) -  The list of URL categories to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
     */
    cloudApplications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Block List) - ID pairs of departments for which the rule is applied.
     */
    departments?: pulumi.Input<inputs.SSLInspectionRulesDepartments>;
    /**
     * (String) -  Enter additional notes or information. The description cannot exceed 10,240 characters.
     */
    description?: pulumi.Input<string>;
    /**
     * (Block List) - ID pairs of destination IP address groups for which the rule is applied.
     */
    destIpGroups?: pulumi.Input<inputs.SSLInspectionRulesDestIpGroups>;
    /**
     * (Block List) - ID pairs of device groups for which the rule is applied.
     */
    deviceGroups?: pulumi.Input<inputs.SSLInspectionRulesDeviceGroups>;
    /**
     * (Set of String)  - List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
     */
    deviceTrustLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Block List) - ID pairs of devices for which the rule is applied
     */
    devices?: pulumi.Input<inputs.SSLInspectionRulesDevices>;
    /**
     * (Block List) - ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
     */
    groups?: pulumi.Input<inputs.SSLInspectionRulesGroups>;
    /**
     * (Block List) - ID pairs of labels associated with the rule.
     */
    labels?: pulumi.Input<inputs.SSLInspectionRulesLabels>;
    /**
     * (Block List) - ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
     */
    locationGroups?: pulumi.Input<inputs.SSLInspectionRulesLocationGroups>;
    /**
     * (Block List) - ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
     */
    locations?: pulumi.Input<inputs.SSLInspectionRulesLocations>;
    /**
     * The name of the SSL Inspection rule
     */
    name?: pulumi.Input<string>;
    /**
     * (String) -  Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
     */
    order: pulumi.Input<number>;
    /**
     * (Set of String) -  Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
     */
    platforms?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Block List) - When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
     */
    proxyGateways?: pulumi.Input<inputs.SSLInspectionRulesProxyGateways>;
    /**
     * (Integer) - The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
     */
    rank?: pulumi.Input<number>;
    /**
     * (Boolean) - Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
     */
    roadWarriorForKerberos?: pulumi.Input<boolean>;
    /**
     * (Block List) - ID pairs of source IP address groups for which the rule is applied.
     */
    sourceIpGroups?: pulumi.Input<inputs.SSLInspectionRulesSourceIpGroups>;
    /**
     * (String) - The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
     */
    state?: pulumi.Input<string>;
    /**
     * (Block List) - The time intervals during which the rule applies
     */
    timeWindows?: pulumi.Input<inputs.SSLInspectionRulesTimeWindows>;
    /**
     * (Set of String) -  The list of URL categories to which the DLP policy rule must be applied.
     */
    urlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Set of String) -  A list of user agent types the rule applies to.
     */
    userAgentTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * (Block List) - The list of preconfigured workload groups to which the policy must be applied.
     */
    users?: pulumi.Input<inputs.SSLInspectionRulesUsers>;
    /**
     * (Block List) - The list of preconfigured workload groups to which the policy must be applied.
     */
    workloadGroups?: pulumi.Input<pulumi.Input<inputs.SSLInspectionRulesWorkloadGroup>[]>;
    /**
     * (Block List) - The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
     */
    zpaAppSegments?: pulumi.Input<pulumi.Input<inputs.SSLInspectionRulesZpaAppSegment>[]>;
}
