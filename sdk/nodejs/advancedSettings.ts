// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zia/configuring-advanced-settings)
 * * [API documentation](https://help.zscaler.com/zia/advanced-settings#/advancedSettings-get)
 *
 * The **zia_advanced_settings** resource alows you to updates the advanced settings configuration in the ZIA Admin Portal. To learn more see [Configuring Advanced Settings](https://help.zscaler.com/zia/configuring-advanced-settings)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zia_advanced_settings** can be imported by using `advanced_settings` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/advancedSettings:AdvancedSettings this "advanced_settings"
 * ```
 */
export class AdvancedSettings extends pulumi.CustomResource {
    /**
     * Get an existing AdvancedSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdvancedSettingsState, opts?: pulumi.CustomResourceOptions): AdvancedSettings {
        return new AdvancedSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/advancedSettings:AdvancedSettings';

    /**
     * Returns true if the given object is an instance of AdvancedSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AdvancedSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AdvancedSettings.__pulumiType;
    }

    /**
     * Cloud applications that are exempted from cookie authentication
     */
    public readonly authBypassApps!: pulumi.Output<string[]>;
    /**
     * URL categories that are exempted from cookie authentication
     */
    public readonly authBypassUrlCategories!: pulumi.Output<string[]>;
    /**
     * Custom URLs that are exempted from cookie authentication for users
     */
    public readonly authBypassUrls!: pulumi.Output<string[]>;
    /**
     * Cloud applications that are exempted from Basic authentication
     */
    public readonly basicBypassApps!: pulumi.Output<string[]>;
    /**
     * URL categories that are exempted from Basic authentication
     */
    public readonly basicBypassUrlCategories!: pulumi.Output<string[]>;
    /**
     * Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
     * is blocked or not
     */
    public readonly blockConnectHostSniMismatch!: pulumi.Output<boolean>;
    /**
     * Applications which are subjected to Domain Fronting
     */
    public readonly blockDomainFrontingApps!: pulumi.Output<string[]>;
    /**
     * Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
     * the FQDN of the request's host header
     */
    public readonly blockDomainFrontingOnHostHeader!: pulumi.Output<boolean>;
    /**
     * Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
     * to ports other than the standard HTTP/S ports 80 and 443)
     */
    public readonly blockHttpTunnelOnNonHttpPorts!: pulumi.Output<boolean>;
    /**
     * Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
     */
    public readonly blockNonCompliantHttpRequestOnHttpPorts!: pulumi.Output<boolean>;
    /**
     * Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
     */
    public readonly blockNonHttpOnHttpPortEnabled!: pulumi.Output<boolean>;
    /**
     * Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
     * transaction explicitly
     */
    public readonly cascadeUrlFiltering!: pulumi.Output<boolean>;
    /**
     * Cloud applications that are exempted from Digest authentication
     */
    public readonly digestAuthBypassApps!: pulumi.Output<string[]>;
    /**
     * URL categories that are exempted from Digest authentication
     */
    public readonly digestAuthBypassUrlCategories!: pulumi.Output<string[]>;
    /**
     * Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
     * authentication
     */
    public readonly digestAuthBypassUrls!: pulumi.Output<string[]>;
    /**
     * Cloud applications to which DNS optimization on transparent proxy mode applies
     */
    public readonly dnsResolutionOnTransparentProxyApps!: pulumi.Output<string[]>;
    /**
     * Cloud applications that are excluded from DNS optimization on transparent proxy mode
     */
    public readonly dnsResolutionOnTransparentProxyExemptApps!: pulumi.Output<string[]>;
    public readonly dnsResolutionOnTransparentProxyExemptUrlCategories!: pulumi.Output<string[]>;
    /**
     * URLs that are excluded from DNS optimization on transparent proxy mode
     */
    public readonly dnsResolutionOnTransparentProxyExemptUrls!: pulumi.Output<string[]>;
    /**
     * Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
     */
    public readonly dnsResolutionOnTransparentProxyIpv6Apps!: pulumi.Output<string[]>;
    /**
     * Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
     */
    public readonly dnsResolutionOnTransparentProxyIpv6ExemptApps!: pulumi.Output<string[]>;
    public readonly dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories!: pulumi.Output<string[]>;
    /**
     * IPv6 URL categories to which DNS optimization on transparent proxy mode applies
     */
    public readonly dnsResolutionOnTransparentProxyIpv6UrlCategories!: pulumi.Output<string[]>;
    /**
     * URL categories to which DNS optimization on transparent proxy mode applies
     */
    public readonly dnsResolutionOnTransparentProxyUrlCategories!: pulumi.Output<string[]>;
    /**
     * URLs to which DNS optimization on transparent proxy mode applies
     */
    public readonly dnsResolutionOnTransparentProxyUrls!: pulumi.Output<string[]>;
    /**
     * URL categories that are exempted from domain fronting
     */
    public readonly domainFrontingBypassUrlCategories!: pulumi.Output<string[]>;
    /**
     * Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
     */
    public readonly dynamicUserRiskEnabled!: pulumi.Output<boolean>;
    /**
     * Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
     * users.
     */
    public readonly ecsForAllEnabled!: pulumi.Output<boolean>;
    /**
     * Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
     */
    public readonly enableAdminRankAccess!: pulumi.Output<boolean>;
    /**
     * Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
     * (e.g., traffic via GRE or IPSec tunnels without a PAC file).
     */
    public readonly enableDnsResolutionOnTransparentProxy!: pulumi.Output<boolean>;
    /**
     * Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
     */
    public readonly enableEvaluatePolicyOnGlobalSslBypass!: pulumi.Output<boolean>;
    /**
     * Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
     */
    public readonly enableIpv6DnsOptimizationOnAllTransparentProxy!: pulumi.Output<boolean>;
    /**
     * Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
     * destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
     * PAC file).
     */
    public readonly enableIpv6DnsResolutionOnTransparentProxy!: pulumi.Output<boolean>;
    /**
     * Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
     */
    public readonly enableOffice365!: pulumi.Output<boolean>;
    /**
     * Value indicating whether policies that include user and department criteria can be configured and applied for
     * unauthenticated traffic
     */
    public readonly enablePolicyForUnauthenticatedTraffic!: pulumi.Output<boolean>;
    /**
     * Enforce Surrogate IP authentication for Windows app traffic
     */
    public readonly enforceSurrogateIpForWindowsApp!: pulumi.Output<boolean>;
    /**
     * Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
     * organizational level
     */
    public readonly http2NonbrowserTrafficEnabled!: pulumi.Output<boolean>;
    /**
     * URL categories for which HTTP range headers must be removed
     */
    public readonly httpRangeHeaderRemoveUrlCategories!: pulumi.Output<string[]>;
    /**
     * Cloud applications that are exempted from Kerberos authentication
     */
    public readonly kerberosBypassApps!: pulumi.Output<string[]>;
    /**
     * URL categories that are exempted from Kerberos authentication
     */
    public readonly kerberosBypassUrlCategories!: pulumi.Output<string[]>;
    /**
     * Custom URLs that are exempted from Kerberos authentication
     */
    public readonly kerberosBypassUrls!: pulumi.Output<string[]>;
    /**
     * Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
     */
    public readonly logInternalIp!: pulumi.Output<boolean>;
    /**
     * Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
     * forward proxy connections
     */
    public readonly preferSniOverConnHost!: pulumi.Output<boolean>;
    /**
     * Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
     * resolution instead of the CONNECT host for forward proxy connections)
     */
    public readonly preferSniOverConnHostApps!: pulumi.Output<string[]>;
    /**
     * Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
     * IP-anchored and ZIA-inspected ZPA application traffic.
     */
    public readonly sipaXffHeaderEnabled!: pulumi.Output<boolean>;
    /**
     * URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
     * resolution instead of the CONNECT host for forward proxy connections)
     */
    public readonly sniDnsOptimizationBypassUrlCategories!: pulumi.Output<string[]>;
    /**
     * Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
     * 80
     */
    public readonly trackHttpTunnelOnHttpPorts!: pulumi.Output<boolean>;
    /**
     * Specifies the login session timeout for admins accessing the ZIA Admin Portal
     */
    public readonly uiSessionTimeout!: pulumi.Output<number>;
    /**
     * Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
     * Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
     */
    public readonly zscalerClientConnector1AndPacRoadWarriorInFirewall!: pulumi.Output<boolean>;

    /**
     * Create a AdvancedSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AdvancedSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdvancedSettingsArgs | AdvancedSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdvancedSettingsState | undefined;
            resourceInputs["authBypassApps"] = state ? state.authBypassApps : undefined;
            resourceInputs["authBypassUrlCategories"] = state ? state.authBypassUrlCategories : undefined;
            resourceInputs["authBypassUrls"] = state ? state.authBypassUrls : undefined;
            resourceInputs["basicBypassApps"] = state ? state.basicBypassApps : undefined;
            resourceInputs["basicBypassUrlCategories"] = state ? state.basicBypassUrlCategories : undefined;
            resourceInputs["blockConnectHostSniMismatch"] = state ? state.blockConnectHostSniMismatch : undefined;
            resourceInputs["blockDomainFrontingApps"] = state ? state.blockDomainFrontingApps : undefined;
            resourceInputs["blockDomainFrontingOnHostHeader"] = state ? state.blockDomainFrontingOnHostHeader : undefined;
            resourceInputs["blockHttpTunnelOnNonHttpPorts"] = state ? state.blockHttpTunnelOnNonHttpPorts : undefined;
            resourceInputs["blockNonCompliantHttpRequestOnHttpPorts"] = state ? state.blockNonCompliantHttpRequestOnHttpPorts : undefined;
            resourceInputs["blockNonHttpOnHttpPortEnabled"] = state ? state.blockNonHttpOnHttpPortEnabled : undefined;
            resourceInputs["cascadeUrlFiltering"] = state ? state.cascadeUrlFiltering : undefined;
            resourceInputs["digestAuthBypassApps"] = state ? state.digestAuthBypassApps : undefined;
            resourceInputs["digestAuthBypassUrlCategories"] = state ? state.digestAuthBypassUrlCategories : undefined;
            resourceInputs["digestAuthBypassUrls"] = state ? state.digestAuthBypassUrls : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyApps"] = state ? state.dnsResolutionOnTransparentProxyApps : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyExemptApps"] = state ? state.dnsResolutionOnTransparentProxyExemptApps : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyExemptUrlCategories"] = state ? state.dnsResolutionOnTransparentProxyExemptUrlCategories : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyExemptUrls"] = state ? state.dnsResolutionOnTransparentProxyExemptUrls : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyIpv6Apps"] = state ? state.dnsResolutionOnTransparentProxyIpv6Apps : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyIpv6ExemptApps"] = state ? state.dnsResolutionOnTransparentProxyIpv6ExemptApps : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories"] = state ? state.dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyIpv6UrlCategories"] = state ? state.dnsResolutionOnTransparentProxyIpv6UrlCategories : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyUrlCategories"] = state ? state.dnsResolutionOnTransparentProxyUrlCategories : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyUrls"] = state ? state.dnsResolutionOnTransparentProxyUrls : undefined;
            resourceInputs["domainFrontingBypassUrlCategories"] = state ? state.domainFrontingBypassUrlCategories : undefined;
            resourceInputs["dynamicUserRiskEnabled"] = state ? state.dynamicUserRiskEnabled : undefined;
            resourceInputs["ecsForAllEnabled"] = state ? state.ecsForAllEnabled : undefined;
            resourceInputs["enableAdminRankAccess"] = state ? state.enableAdminRankAccess : undefined;
            resourceInputs["enableDnsResolutionOnTransparentProxy"] = state ? state.enableDnsResolutionOnTransparentProxy : undefined;
            resourceInputs["enableEvaluatePolicyOnGlobalSslBypass"] = state ? state.enableEvaluatePolicyOnGlobalSslBypass : undefined;
            resourceInputs["enableIpv6DnsOptimizationOnAllTransparentProxy"] = state ? state.enableIpv6DnsOptimizationOnAllTransparentProxy : undefined;
            resourceInputs["enableIpv6DnsResolutionOnTransparentProxy"] = state ? state.enableIpv6DnsResolutionOnTransparentProxy : undefined;
            resourceInputs["enableOffice365"] = state ? state.enableOffice365 : undefined;
            resourceInputs["enablePolicyForUnauthenticatedTraffic"] = state ? state.enablePolicyForUnauthenticatedTraffic : undefined;
            resourceInputs["enforceSurrogateIpForWindowsApp"] = state ? state.enforceSurrogateIpForWindowsApp : undefined;
            resourceInputs["http2NonbrowserTrafficEnabled"] = state ? state.http2NonbrowserTrafficEnabled : undefined;
            resourceInputs["httpRangeHeaderRemoveUrlCategories"] = state ? state.httpRangeHeaderRemoveUrlCategories : undefined;
            resourceInputs["kerberosBypassApps"] = state ? state.kerberosBypassApps : undefined;
            resourceInputs["kerberosBypassUrlCategories"] = state ? state.kerberosBypassUrlCategories : undefined;
            resourceInputs["kerberosBypassUrls"] = state ? state.kerberosBypassUrls : undefined;
            resourceInputs["logInternalIp"] = state ? state.logInternalIp : undefined;
            resourceInputs["preferSniOverConnHost"] = state ? state.preferSniOverConnHost : undefined;
            resourceInputs["preferSniOverConnHostApps"] = state ? state.preferSniOverConnHostApps : undefined;
            resourceInputs["sipaXffHeaderEnabled"] = state ? state.sipaXffHeaderEnabled : undefined;
            resourceInputs["sniDnsOptimizationBypassUrlCategories"] = state ? state.sniDnsOptimizationBypassUrlCategories : undefined;
            resourceInputs["trackHttpTunnelOnHttpPorts"] = state ? state.trackHttpTunnelOnHttpPorts : undefined;
            resourceInputs["uiSessionTimeout"] = state ? state.uiSessionTimeout : undefined;
            resourceInputs["zscalerClientConnector1AndPacRoadWarriorInFirewall"] = state ? state.zscalerClientConnector1AndPacRoadWarriorInFirewall : undefined;
        } else {
            const args = argsOrState as AdvancedSettingsArgs | undefined;
            resourceInputs["authBypassApps"] = args ? args.authBypassApps : undefined;
            resourceInputs["authBypassUrlCategories"] = args ? args.authBypassUrlCategories : undefined;
            resourceInputs["authBypassUrls"] = args ? args.authBypassUrls : undefined;
            resourceInputs["basicBypassApps"] = args ? args.basicBypassApps : undefined;
            resourceInputs["basicBypassUrlCategories"] = args ? args.basicBypassUrlCategories : undefined;
            resourceInputs["blockConnectHostSniMismatch"] = args ? args.blockConnectHostSniMismatch : undefined;
            resourceInputs["blockDomainFrontingApps"] = args ? args.blockDomainFrontingApps : undefined;
            resourceInputs["blockDomainFrontingOnHostHeader"] = args ? args.blockDomainFrontingOnHostHeader : undefined;
            resourceInputs["blockHttpTunnelOnNonHttpPorts"] = args ? args.blockHttpTunnelOnNonHttpPorts : undefined;
            resourceInputs["blockNonCompliantHttpRequestOnHttpPorts"] = args ? args.blockNonCompliantHttpRequestOnHttpPorts : undefined;
            resourceInputs["blockNonHttpOnHttpPortEnabled"] = args ? args.blockNonHttpOnHttpPortEnabled : undefined;
            resourceInputs["cascadeUrlFiltering"] = args ? args.cascadeUrlFiltering : undefined;
            resourceInputs["digestAuthBypassApps"] = args ? args.digestAuthBypassApps : undefined;
            resourceInputs["digestAuthBypassUrlCategories"] = args ? args.digestAuthBypassUrlCategories : undefined;
            resourceInputs["digestAuthBypassUrls"] = args ? args.digestAuthBypassUrls : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyApps"] = args ? args.dnsResolutionOnTransparentProxyApps : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyExemptApps"] = args ? args.dnsResolutionOnTransparentProxyExemptApps : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyExemptUrlCategories"] = args ? args.dnsResolutionOnTransparentProxyExemptUrlCategories : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyExemptUrls"] = args ? args.dnsResolutionOnTransparentProxyExemptUrls : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyIpv6Apps"] = args ? args.dnsResolutionOnTransparentProxyIpv6Apps : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyIpv6ExemptApps"] = args ? args.dnsResolutionOnTransparentProxyIpv6ExemptApps : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories"] = args ? args.dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyIpv6UrlCategories"] = args ? args.dnsResolutionOnTransparentProxyIpv6UrlCategories : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyUrlCategories"] = args ? args.dnsResolutionOnTransparentProxyUrlCategories : undefined;
            resourceInputs["dnsResolutionOnTransparentProxyUrls"] = args ? args.dnsResolutionOnTransparentProxyUrls : undefined;
            resourceInputs["domainFrontingBypassUrlCategories"] = args ? args.domainFrontingBypassUrlCategories : undefined;
            resourceInputs["dynamicUserRiskEnabled"] = args ? args.dynamicUserRiskEnabled : undefined;
            resourceInputs["ecsForAllEnabled"] = args ? args.ecsForAllEnabled : undefined;
            resourceInputs["enableAdminRankAccess"] = args ? args.enableAdminRankAccess : undefined;
            resourceInputs["enableDnsResolutionOnTransparentProxy"] = args ? args.enableDnsResolutionOnTransparentProxy : undefined;
            resourceInputs["enableEvaluatePolicyOnGlobalSslBypass"] = args ? args.enableEvaluatePolicyOnGlobalSslBypass : undefined;
            resourceInputs["enableIpv6DnsOptimizationOnAllTransparentProxy"] = args ? args.enableIpv6DnsOptimizationOnAllTransparentProxy : undefined;
            resourceInputs["enableIpv6DnsResolutionOnTransparentProxy"] = args ? args.enableIpv6DnsResolutionOnTransparentProxy : undefined;
            resourceInputs["enableOffice365"] = args ? args.enableOffice365 : undefined;
            resourceInputs["enablePolicyForUnauthenticatedTraffic"] = args ? args.enablePolicyForUnauthenticatedTraffic : undefined;
            resourceInputs["enforceSurrogateIpForWindowsApp"] = args ? args.enforceSurrogateIpForWindowsApp : undefined;
            resourceInputs["http2NonbrowserTrafficEnabled"] = args ? args.http2NonbrowserTrafficEnabled : undefined;
            resourceInputs["httpRangeHeaderRemoveUrlCategories"] = args ? args.httpRangeHeaderRemoveUrlCategories : undefined;
            resourceInputs["kerberosBypassApps"] = args ? args.kerberosBypassApps : undefined;
            resourceInputs["kerberosBypassUrlCategories"] = args ? args.kerberosBypassUrlCategories : undefined;
            resourceInputs["kerberosBypassUrls"] = args ? args.kerberosBypassUrls : undefined;
            resourceInputs["logInternalIp"] = args ? args.logInternalIp : undefined;
            resourceInputs["preferSniOverConnHost"] = args ? args.preferSniOverConnHost : undefined;
            resourceInputs["preferSniOverConnHostApps"] = args ? args.preferSniOverConnHostApps : undefined;
            resourceInputs["sipaXffHeaderEnabled"] = args ? args.sipaXffHeaderEnabled : undefined;
            resourceInputs["sniDnsOptimizationBypassUrlCategories"] = args ? args.sniDnsOptimizationBypassUrlCategories : undefined;
            resourceInputs["trackHttpTunnelOnHttpPorts"] = args ? args.trackHttpTunnelOnHttpPorts : undefined;
            resourceInputs["uiSessionTimeout"] = args ? args.uiSessionTimeout : undefined;
            resourceInputs["zscalerClientConnector1AndPacRoadWarriorInFirewall"] = args ? args.zscalerClientConnector1AndPacRoadWarriorInFirewall : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AdvancedSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AdvancedSettings resources.
 */
export interface AdvancedSettingsState {
    /**
     * Cloud applications that are exempted from cookie authentication
     */
    authBypassApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL categories that are exempted from cookie authentication
     */
    authBypassUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Custom URLs that are exempted from cookie authentication for users
     */
    authBypassUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud applications that are exempted from Basic authentication
     */
    basicBypassApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL categories that are exempted from Basic authentication
     */
    basicBypassUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
     * is blocked or not
     */
    blockConnectHostSniMismatch?: pulumi.Input<boolean>;
    /**
     * Applications which are subjected to Domain Fronting
     */
    blockDomainFrontingApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
     * the FQDN of the request's host header
     */
    blockDomainFrontingOnHostHeader?: pulumi.Input<boolean>;
    /**
     * Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
     * to ports other than the standard HTTP/S ports 80 and 443)
     */
    blockHttpTunnelOnNonHttpPorts?: pulumi.Input<boolean>;
    /**
     * Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
     */
    blockNonCompliantHttpRequestOnHttpPorts?: pulumi.Input<boolean>;
    /**
     * Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
     */
    blockNonHttpOnHttpPortEnabled?: pulumi.Input<boolean>;
    /**
     * Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
     * transaction explicitly
     */
    cascadeUrlFiltering?: pulumi.Input<boolean>;
    /**
     * Cloud applications that are exempted from Digest authentication
     */
    digestAuthBypassApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL categories that are exempted from Digest authentication
     */
    digestAuthBypassUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
     * authentication
     */
    digestAuthBypassUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud applications to which DNS optimization on transparent proxy mode applies
     */
    dnsResolutionOnTransparentProxyApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud applications that are excluded from DNS optimization on transparent proxy mode
     */
    dnsResolutionOnTransparentProxyExemptApps?: pulumi.Input<pulumi.Input<string>[]>;
    dnsResolutionOnTransparentProxyExemptUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URLs that are excluded from DNS optimization on transparent proxy mode
     */
    dnsResolutionOnTransparentProxyExemptUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
     */
    dnsResolutionOnTransparentProxyIpv6Apps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
     */
    dnsResolutionOnTransparentProxyIpv6ExemptApps?: pulumi.Input<pulumi.Input<string>[]>;
    dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IPv6 URL categories to which DNS optimization on transparent proxy mode applies
     */
    dnsResolutionOnTransparentProxyIpv6UrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL categories to which DNS optimization on transparent proxy mode applies
     */
    dnsResolutionOnTransparentProxyUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URLs to which DNS optimization on transparent proxy mode applies
     */
    dnsResolutionOnTransparentProxyUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL categories that are exempted from domain fronting
     */
    domainFrontingBypassUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
     */
    dynamicUserRiskEnabled?: pulumi.Input<boolean>;
    /**
     * Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
     * users.
     */
    ecsForAllEnabled?: pulumi.Input<boolean>;
    /**
     * Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
     */
    enableAdminRankAccess?: pulumi.Input<boolean>;
    /**
     * Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
     * (e.g., traffic via GRE or IPSec tunnels without a PAC file).
     */
    enableDnsResolutionOnTransparentProxy?: pulumi.Input<boolean>;
    /**
     * Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
     */
    enableEvaluatePolicyOnGlobalSslBypass?: pulumi.Input<boolean>;
    /**
     * Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
     */
    enableIpv6DnsOptimizationOnAllTransparentProxy?: pulumi.Input<boolean>;
    /**
     * Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
     * destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
     * PAC file).
     */
    enableIpv6DnsResolutionOnTransparentProxy?: pulumi.Input<boolean>;
    /**
     * Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
     */
    enableOffice365?: pulumi.Input<boolean>;
    /**
     * Value indicating whether policies that include user and department criteria can be configured and applied for
     * unauthenticated traffic
     */
    enablePolicyForUnauthenticatedTraffic?: pulumi.Input<boolean>;
    /**
     * Enforce Surrogate IP authentication for Windows app traffic
     */
    enforceSurrogateIpForWindowsApp?: pulumi.Input<boolean>;
    /**
     * Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
     * organizational level
     */
    http2NonbrowserTrafficEnabled?: pulumi.Input<boolean>;
    /**
     * URL categories for which HTTP range headers must be removed
     */
    httpRangeHeaderRemoveUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud applications that are exempted from Kerberos authentication
     */
    kerberosBypassApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL categories that are exempted from Kerberos authentication
     */
    kerberosBypassUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Custom URLs that are exempted from Kerberos authentication
     */
    kerberosBypassUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
     */
    logInternalIp?: pulumi.Input<boolean>;
    /**
     * Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
     * forward proxy connections
     */
    preferSniOverConnHost?: pulumi.Input<boolean>;
    /**
     * Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
     * resolution instead of the CONNECT host for forward proxy connections)
     */
    preferSniOverConnHostApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
     * IP-anchored and ZIA-inspected ZPA application traffic.
     */
    sipaXffHeaderEnabled?: pulumi.Input<boolean>;
    /**
     * URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
     * resolution instead of the CONNECT host for forward proxy connections)
     */
    sniDnsOptimizationBypassUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
     * 80
     */
    trackHttpTunnelOnHttpPorts?: pulumi.Input<boolean>;
    /**
     * Specifies the login session timeout for admins accessing the ZIA Admin Portal
     */
    uiSessionTimeout?: pulumi.Input<number>;
    /**
     * Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
     * Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
     */
    zscalerClientConnector1AndPacRoadWarriorInFirewall?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AdvancedSettings resource.
 */
export interface AdvancedSettingsArgs {
    /**
     * Cloud applications that are exempted from cookie authentication
     */
    authBypassApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL categories that are exempted from cookie authentication
     */
    authBypassUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Custom URLs that are exempted from cookie authentication for users
     */
    authBypassUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud applications that are exempted from Basic authentication
     */
    basicBypassApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL categories that are exempted from Basic authentication
     */
    basicBypassUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
     * is blocked or not
     */
    blockConnectHostSniMismatch?: pulumi.Input<boolean>;
    /**
     * Applications which are subjected to Domain Fronting
     */
    blockDomainFrontingApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
     * the FQDN of the request's host header
     */
    blockDomainFrontingOnHostHeader?: pulumi.Input<boolean>;
    /**
     * Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
     * to ports other than the standard HTTP/S ports 80 and 443)
     */
    blockHttpTunnelOnNonHttpPorts?: pulumi.Input<boolean>;
    /**
     * Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
     */
    blockNonCompliantHttpRequestOnHttpPorts?: pulumi.Input<boolean>;
    /**
     * Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
     */
    blockNonHttpOnHttpPortEnabled?: pulumi.Input<boolean>;
    /**
     * Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
     * transaction explicitly
     */
    cascadeUrlFiltering?: pulumi.Input<boolean>;
    /**
     * Cloud applications that are exempted from Digest authentication
     */
    digestAuthBypassApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL categories that are exempted from Digest authentication
     */
    digestAuthBypassUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
     * authentication
     */
    digestAuthBypassUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud applications to which DNS optimization on transparent proxy mode applies
     */
    dnsResolutionOnTransparentProxyApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud applications that are excluded from DNS optimization on transparent proxy mode
     */
    dnsResolutionOnTransparentProxyExemptApps?: pulumi.Input<pulumi.Input<string>[]>;
    dnsResolutionOnTransparentProxyExemptUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URLs that are excluded from DNS optimization on transparent proxy mode
     */
    dnsResolutionOnTransparentProxyExemptUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
     */
    dnsResolutionOnTransparentProxyIpv6Apps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
     */
    dnsResolutionOnTransparentProxyIpv6ExemptApps?: pulumi.Input<pulumi.Input<string>[]>;
    dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IPv6 URL categories to which DNS optimization on transparent proxy mode applies
     */
    dnsResolutionOnTransparentProxyIpv6UrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL categories to which DNS optimization on transparent proxy mode applies
     */
    dnsResolutionOnTransparentProxyUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URLs to which DNS optimization on transparent proxy mode applies
     */
    dnsResolutionOnTransparentProxyUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL categories that are exempted from domain fronting
     */
    domainFrontingBypassUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
     */
    dynamicUserRiskEnabled?: pulumi.Input<boolean>;
    /**
     * Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
     * users.
     */
    ecsForAllEnabled?: pulumi.Input<boolean>;
    /**
     * Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
     */
    enableAdminRankAccess?: pulumi.Input<boolean>;
    /**
     * Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
     * (e.g., traffic via GRE or IPSec tunnels without a PAC file).
     */
    enableDnsResolutionOnTransparentProxy?: pulumi.Input<boolean>;
    /**
     * Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
     */
    enableEvaluatePolicyOnGlobalSslBypass?: pulumi.Input<boolean>;
    /**
     * Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
     */
    enableIpv6DnsOptimizationOnAllTransparentProxy?: pulumi.Input<boolean>;
    /**
     * Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
     * destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
     * PAC file).
     */
    enableIpv6DnsResolutionOnTransparentProxy?: pulumi.Input<boolean>;
    /**
     * Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
     */
    enableOffice365?: pulumi.Input<boolean>;
    /**
     * Value indicating whether policies that include user and department criteria can be configured and applied for
     * unauthenticated traffic
     */
    enablePolicyForUnauthenticatedTraffic?: pulumi.Input<boolean>;
    /**
     * Enforce Surrogate IP authentication for Windows app traffic
     */
    enforceSurrogateIpForWindowsApp?: pulumi.Input<boolean>;
    /**
     * Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
     * organizational level
     */
    http2NonbrowserTrafficEnabled?: pulumi.Input<boolean>;
    /**
     * URL categories for which HTTP range headers must be removed
     */
    httpRangeHeaderRemoveUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Cloud applications that are exempted from Kerberos authentication
     */
    kerberosBypassApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL categories that are exempted from Kerberos authentication
     */
    kerberosBypassUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Custom URLs that are exempted from Kerberos authentication
     */
    kerberosBypassUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
     */
    logInternalIp?: pulumi.Input<boolean>;
    /**
     * Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
     * forward proxy connections
     */
    preferSniOverConnHost?: pulumi.Input<boolean>;
    /**
     * Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
     * resolution instead of the CONNECT host for forward proxy connections)
     */
    preferSniOverConnHostApps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
     * IP-anchored and ZIA-inspected ZPA application traffic.
     */
    sipaXffHeaderEnabled?: pulumi.Input<boolean>;
    /**
     * URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
     * resolution instead of the CONNECT host for forward proxy connections)
     */
    sniDnsOptimizationBypassUrlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
     * 80
     */
    trackHttpTunnelOnHttpPorts?: pulumi.Input<boolean>;
    /**
     * Specifies the login session timeout for admins accessing the ZIA Admin Portal
     */
    uiSessionTimeout?: pulumi.Input<number>;
    /**
     * Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
     * Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
     */
    zscalerClientConnector1AndPacRoadWarriorInFirewall?: pulumi.Input<boolean>;
}
