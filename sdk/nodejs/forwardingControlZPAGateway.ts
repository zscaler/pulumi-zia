// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@bdzscaler/pulumi-zia";
 * import * as zpa from "@pulumi/zpa";
 *
 * const thisServerGroup = zpa.getServerGroup({
 *     name: "Server_Group_IP_Source_Anchoring",
 * });
 * const this1 = zpa.getApplicationSegment({
 *     name: "App_Segment_IP_Source_Anchoring",
 * });
 * const this2 = zpa.getApplicationSegment({
 *     name: "App_Segment_IP_Source_Anchoring2",
 * });
 * const thisForwardingControlZPAGateway = new zia.ForwardingControlZPAGateway("thisForwardingControlZPAGateway", {
 *     description: "ZPA_GW01",
 *     type: "ZPA",
 *     zpaServerGroup: {
 *         externalId: thisServerGroup.then(thisServerGroup => thisServerGroup.id),
 *         name: thisServerGroup.then(thisServerGroup => thisServerGroup.id),
 *     },
 *     zpaAppSegments: [
 *         {
 *             externalId: this1.then(this1 => this1.id),
 *             name: this1.then(this1 => this1.name),
 *         },
 *         {
 *             externalId: this2.then(this2 => this2.id),
 *             name: this2.then(this2 => this2.name),
 *         },
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **forwarding_control_zpa_gateway** can be imported by using `<GATEWAY_ID>` or `<GATEWAY_NAME>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway example <gateway_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway example <gateway_name>
 * ```
 */
export class ForwardingControlZPAGateway extends pulumi.CustomResource {
    /**
     * Get an existing ForwardingControlZPAGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ForwardingControlZPAGatewayState, opts?: pulumi.CustomResourceOptions): ForwardingControlZPAGateway {
        return new ForwardingControlZPAGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway';

    /**
     * Returns true if the given object is an instance of ForwardingControlZPAGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ForwardingControlZPAGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ForwardingControlZPAGateway.__pulumiType;
    }

    /**
     * (string) - Additional details about the ZPA gateway
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public /*out*/ readonly gatewayId!: pulumi.Output<number>;
    /**
     * The configured name of the entity
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * The ZPA Server Group that is configured for Source IP Anchoring
     */
    public readonly zpaAppSegments!: pulumi.Output<outputs.ForwardingControlZPAGatewayZpaAppSegment[]>;
    /**
     * The ZPA Server Group that is configured for Source IP Anchoring
     */
    public readonly zpaServerGroup!: pulumi.Output<outputs.ForwardingControlZPAGatewayZpaServerGroup>;

    /**
     * Create a ForwardingControlZPAGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ForwardingControlZPAGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ForwardingControlZPAGatewayArgs | ForwardingControlZPAGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ForwardingControlZPAGatewayState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["zpaAppSegments"] = state ? state.zpaAppSegments : undefined;
            resourceInputs["zpaServerGroup"] = state ? state.zpaServerGroup : undefined;
        } else {
            const args = argsOrState as ForwardingControlZPAGatewayArgs | undefined;
            if ((!args || args.zpaAppSegments === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zpaAppSegments'");
            }
            if ((!args || args.zpaServerGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zpaServerGroup'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["zpaAppSegments"] = args ? args.zpaAppSegments : undefined;
            resourceInputs["zpaServerGroup"] = args ? args.zpaServerGroup : undefined;
            resourceInputs["gatewayId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ForwardingControlZPAGateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ForwardingControlZPAGateway resources.
 */
export interface ForwardingControlZPAGatewayState {
    /**
     * (string) - Additional details about the ZPA gateway
     */
    description?: pulumi.Input<string>;
    gatewayId?: pulumi.Input<number>;
    /**
     * The configured name of the entity
     */
    name?: pulumi.Input<string>;
    /**
     * (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
     */
    type?: pulumi.Input<string>;
    /**
     * The ZPA Server Group that is configured for Source IP Anchoring
     */
    zpaAppSegments?: pulumi.Input<pulumi.Input<inputs.ForwardingControlZPAGatewayZpaAppSegment>[]>;
    /**
     * The ZPA Server Group that is configured for Source IP Anchoring
     */
    zpaServerGroup?: pulumi.Input<inputs.ForwardingControlZPAGatewayZpaServerGroup>;
}

/**
 * The set of arguments for constructing a ForwardingControlZPAGateway resource.
 */
export interface ForwardingControlZPAGatewayArgs {
    /**
     * (string) - Additional details about the ZPA gateway
     */
    description?: pulumi.Input<string>;
    /**
     * The configured name of the entity
     */
    name?: pulumi.Input<string>;
    /**
     * (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
     */
    type?: pulumi.Input<string>;
    /**
     * The ZPA Server Group that is configured for Source IP Anchoring
     */
    zpaAppSegments: pulumi.Input<pulumi.Input<inputs.ForwardingControlZPAGatewayZpaAppSegment>[]>;
    /**
     * The ZPA Server Group that is configured for Source IP Anchoring
     */
    zpaServerGroup: pulumi.Input<inputs.ForwardingControlZPAGatewayZpaServerGroup>;
}
