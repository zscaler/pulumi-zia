// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zia_firewall_filtering_rule** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/firewallFilteringRule:FirewallFilteringRule example <rule_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zia:index/firewallFilteringRule:FirewallFilteringRule example <rule_name>
 * ```
 */
export class FirewallFilteringRule extends pulumi.CustomResource {
    /**
     * Get an existing FirewallFilteringRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallFilteringRuleState, opts?: pulumi.CustomResourceOptions): FirewallFilteringRule {
        return new FirewallFilteringRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/firewallFilteringRule:FirewallFilteringRule';

    /**
     * Returns true if the given object is an instance of FirewallFilteringRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallFilteringRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallFilteringRule.__pulumiType;
    }

    /**
     * The action the Firewall Filtering policy rule takes when packets match the rule
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * list of application service groups
     */
    public readonly appServiceGroups!: pulumi.Output<outputs.FirewallFilteringRuleAppServiceGroups | undefined>;
    /**
     * list of application services
     */
    public readonly appServices!: pulumi.Output<outputs.FirewallFilteringRuleAppServices | undefined>;
    /**
     * If set to true, the default rule is applied
     */
    public readonly defaultRule!: pulumi.Output<boolean | undefined>;
    /**
     * list of departments for which rule must be applied
     */
    public readonly departments!: pulumi.Output<outputs.FirewallFilteringRuleDepartments | undefined>;
    /**
     * Additional information about the rule
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
     */
    public readonly destAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    public readonly destCountries!: pulumi.Output<string[]>;
    public readonly destIpCategories!: pulumi.Output<string[] | undefined>;
    /**
     * list of destination ip groups
     */
    public readonly destIpGroups!: pulumi.Output<outputs.FirewallFilteringRuleDestIpGroups | undefined>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    public readonly deviceGroups!: pulumi.Output<outputs.FirewallFilteringRuleDeviceGroups | undefined>;
    /**
     * List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
     * using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
     * Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
     */
    public readonly deviceTrustLevels!: pulumi.Output<string[] | undefined>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    public readonly devices!: pulumi.Output<outputs.FirewallFilteringRuleDevices | undefined>;
    public readonly enableFullLogging!: pulumi.Output<boolean | undefined>;
    /**
     * list of groups for which rule must be applied
     */
    public readonly groups!: pulumi.Output<outputs.FirewallFilteringRuleGroups | undefined>;
    /**
     * list of Labels that are applicable to the rule.
     */
    public readonly labels!: pulumi.Output<outputs.FirewallFilteringRuleLabels | undefined>;
    /**
     * list of locations groups
     */
    public readonly locationGroups!: pulumi.Output<outputs.FirewallFilteringRuleLocationGroups | undefined>;
    /**
     * list of locations for which rule must be applied
     */
    public readonly locations!: pulumi.Output<outputs.FirewallFilteringRuleLocations | undefined>;
    /**
     * Name of the Firewall Filtering policy rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * list of nw application groups
     */
    public readonly nwApplicationGroups!: pulumi.Output<outputs.FirewallFilteringRuleNwApplicationGroups | undefined>;
    /**
     * User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
     * specific network service application.
     */
    public readonly nwApplications!: pulumi.Output<string[]>;
    /**
     * list of nw service groups
     */
    public readonly nwServiceGroups!: pulumi.Output<outputs.FirewallFilteringRuleNwServiceGroups | undefined>;
    /**
     * list of nw services
     */
    public readonly nwServices!: pulumi.Output<outputs.FirewallFilteringRuleNwServices | undefined>;
    /**
     * Rule order number. If omitted, the rule will be added to the end of the rule set.
     */
    public readonly order!: pulumi.Output<number>;
    /**
     * If set to true, a predefined rule is applied
     */
    public readonly predefined!: pulumi.Output<boolean | undefined>;
    /**
     * Admin rank of the Firewall Filtering policy rule
     */
    public readonly rank!: pulumi.Output<number | undefined>;
    public /*out*/ readonly ruleId!: pulumi.Output<number>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    public readonly sourceCountries!: pulumi.Output<string[]>;
    /**
     * list of source ip groups
     */
    public readonly srcIpGroups!: pulumi.Output<outputs.FirewallFilteringRuleSrcIpGroups | undefined>;
    /**
     * User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address.
     */
    public readonly srcIps!: pulumi.Output<string[] | undefined>;
    /**
     * Determines whether the Firewall Filtering policy rule is enabled or disabled
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * The time interval in which the Firewall Filtering policy rule applies
     */
    public readonly timeWindows!: pulumi.Output<outputs.FirewallFilteringRuleTimeWindows | undefined>;
    /**
     * list of users for which rule must be applied
     */
    public readonly users!: pulumi.Output<outputs.FirewallFilteringRuleUsers | undefined>;
    /**
     * The list of preconfigured workload groups to which the policy must be applied
     */
    public readonly workloadGroups!: pulumi.Output<outputs.FirewallFilteringRuleWorkloadGroup[]>;
    /**
     * The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
     * Gateway forwarding method.
     */
    public readonly zpaAppSegments!: pulumi.Output<outputs.FirewallFilteringRuleZpaAppSegment[]>;

    /**
     * Create a FirewallFilteringRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FirewallFilteringRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallFilteringRuleArgs | FirewallFilteringRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallFilteringRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["appServiceGroups"] = state ? state.appServiceGroups : undefined;
            resourceInputs["appServices"] = state ? state.appServices : undefined;
            resourceInputs["defaultRule"] = state ? state.defaultRule : undefined;
            resourceInputs["departments"] = state ? state.departments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destAddresses"] = state ? state.destAddresses : undefined;
            resourceInputs["destCountries"] = state ? state.destCountries : undefined;
            resourceInputs["destIpCategories"] = state ? state.destIpCategories : undefined;
            resourceInputs["destIpGroups"] = state ? state.destIpGroups : undefined;
            resourceInputs["deviceGroups"] = state ? state.deviceGroups : undefined;
            resourceInputs["deviceTrustLevels"] = state ? state.deviceTrustLevels : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["enableFullLogging"] = state ? state.enableFullLogging : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["locationGroups"] = state ? state.locationGroups : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nwApplicationGroups"] = state ? state.nwApplicationGroups : undefined;
            resourceInputs["nwApplications"] = state ? state.nwApplications : undefined;
            resourceInputs["nwServiceGroups"] = state ? state.nwServiceGroups : undefined;
            resourceInputs["nwServices"] = state ? state.nwServices : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["predefined"] = state ? state.predefined : undefined;
            resourceInputs["rank"] = state ? state.rank : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["sourceCountries"] = state ? state.sourceCountries : undefined;
            resourceInputs["srcIpGroups"] = state ? state.srcIpGroups : undefined;
            resourceInputs["srcIps"] = state ? state.srcIps : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeWindows"] = state ? state.timeWindows : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["workloadGroups"] = state ? state.workloadGroups : undefined;
            resourceInputs["zpaAppSegments"] = state ? state.zpaAppSegments : undefined;
        } else {
            const args = argsOrState as FirewallFilteringRuleArgs | undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["appServiceGroups"] = args ? args.appServiceGroups : undefined;
            resourceInputs["appServices"] = args ? args.appServices : undefined;
            resourceInputs["defaultRule"] = args ? args.defaultRule : undefined;
            resourceInputs["departments"] = args ? args.departments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destAddresses"] = args ? args.destAddresses : undefined;
            resourceInputs["destCountries"] = args ? args.destCountries : undefined;
            resourceInputs["destIpCategories"] = args ? args.destIpCategories : undefined;
            resourceInputs["destIpGroups"] = args ? args.destIpGroups : undefined;
            resourceInputs["deviceGroups"] = args ? args.deviceGroups : undefined;
            resourceInputs["deviceTrustLevels"] = args ? args.deviceTrustLevels : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["enableFullLogging"] = args ? args.enableFullLogging : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["locationGroups"] = args ? args.locationGroups : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nwApplicationGroups"] = args ? args.nwApplicationGroups : undefined;
            resourceInputs["nwApplications"] = args ? args.nwApplications : undefined;
            resourceInputs["nwServiceGroups"] = args ? args.nwServiceGroups : undefined;
            resourceInputs["nwServices"] = args ? args.nwServices : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["predefined"] = args ? args.predefined : undefined;
            resourceInputs["rank"] = args ? args.rank : undefined;
            resourceInputs["sourceCountries"] = args ? args.sourceCountries : undefined;
            resourceInputs["srcIpGroups"] = args ? args.srcIpGroups : undefined;
            resourceInputs["srcIps"] = args ? args.srcIps : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timeWindows"] = args ? args.timeWindows : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["workloadGroups"] = args ? args.workloadGroups : undefined;
            resourceInputs["zpaAppSegments"] = args ? args.zpaAppSegments : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallFilteringRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallFilteringRule resources.
 */
export interface FirewallFilteringRuleState {
    /**
     * The action the Firewall Filtering policy rule takes when packets match the rule
     */
    action?: pulumi.Input<string>;
    /**
     * list of application service groups
     */
    appServiceGroups?: pulumi.Input<inputs.FirewallFilteringRuleAppServiceGroups>;
    /**
     * list of application services
     */
    appServices?: pulumi.Input<inputs.FirewallFilteringRuleAppServices>;
    /**
     * If set to true, the default rule is applied
     */
    defaultRule?: pulumi.Input<boolean>;
    /**
     * list of departments for which rule must be applied
     */
    departments?: pulumi.Input<inputs.FirewallFilteringRuleDepartments>;
    /**
     * Additional information about the rule
     */
    description?: pulumi.Input<string>;
    /**
     * Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
     */
    destAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    destCountries?: pulumi.Input<pulumi.Input<string>[]>;
    destIpCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of destination ip groups
     */
    destIpGroups?: pulumi.Input<inputs.FirewallFilteringRuleDestIpGroups>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    deviceGroups?: pulumi.Input<inputs.FirewallFilteringRuleDeviceGroups>;
    /**
     * List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
     * using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
     * Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
     */
    deviceTrustLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    devices?: pulumi.Input<inputs.FirewallFilteringRuleDevices>;
    enableFullLogging?: pulumi.Input<boolean>;
    /**
     * list of groups for which rule must be applied
     */
    groups?: pulumi.Input<inputs.FirewallFilteringRuleGroups>;
    /**
     * list of Labels that are applicable to the rule.
     */
    labels?: pulumi.Input<inputs.FirewallFilteringRuleLabels>;
    /**
     * list of locations groups
     */
    locationGroups?: pulumi.Input<inputs.FirewallFilteringRuleLocationGroups>;
    /**
     * list of locations for which rule must be applied
     */
    locations?: pulumi.Input<inputs.FirewallFilteringRuleLocations>;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name?: pulumi.Input<string>;
    /**
     * list of nw application groups
     */
    nwApplicationGroups?: pulumi.Input<inputs.FirewallFilteringRuleNwApplicationGroups>;
    /**
     * User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
     * specific network service application.
     */
    nwApplications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of nw service groups
     */
    nwServiceGroups?: pulumi.Input<inputs.FirewallFilteringRuleNwServiceGroups>;
    /**
     * list of nw services
     */
    nwServices?: pulumi.Input<inputs.FirewallFilteringRuleNwServices>;
    /**
     * Rule order number. If omitted, the rule will be added to the end of the rule set.
     */
    order?: pulumi.Input<number>;
    /**
     * If set to true, a predefined rule is applied
     */
    predefined?: pulumi.Input<boolean>;
    /**
     * Admin rank of the Firewall Filtering policy rule
     */
    rank?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    sourceCountries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of source ip groups
     */
    srcIpGroups?: pulumi.Input<inputs.FirewallFilteringRuleSrcIpGroups>;
    /**
     * User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address.
     */
    srcIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines whether the Firewall Filtering policy rule is enabled or disabled
     */
    state?: pulumi.Input<string>;
    /**
     * The time interval in which the Firewall Filtering policy rule applies
     */
    timeWindows?: pulumi.Input<inputs.FirewallFilteringRuleTimeWindows>;
    /**
     * list of users for which rule must be applied
     */
    users?: pulumi.Input<inputs.FirewallFilteringRuleUsers>;
    /**
     * The list of preconfigured workload groups to which the policy must be applied
     */
    workloadGroups?: pulumi.Input<pulumi.Input<inputs.FirewallFilteringRuleWorkloadGroup>[]>;
    /**
     * The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
     * Gateway forwarding method.
     */
    zpaAppSegments?: pulumi.Input<pulumi.Input<inputs.FirewallFilteringRuleZpaAppSegment>[]>;
}

/**
 * The set of arguments for constructing a FirewallFilteringRule resource.
 */
export interface FirewallFilteringRuleArgs {
    /**
     * The action the Firewall Filtering policy rule takes when packets match the rule
     */
    action?: pulumi.Input<string>;
    /**
     * list of application service groups
     */
    appServiceGroups?: pulumi.Input<inputs.FirewallFilteringRuleAppServiceGroups>;
    /**
     * list of application services
     */
    appServices?: pulumi.Input<inputs.FirewallFilteringRuleAppServices>;
    /**
     * If set to true, the default rule is applied
     */
    defaultRule?: pulumi.Input<boolean>;
    /**
     * list of departments for which rule must be applied
     */
    departments?: pulumi.Input<inputs.FirewallFilteringRuleDepartments>;
    /**
     * Additional information about the rule
     */
    description?: pulumi.Input<string>;
    /**
     * Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
     */
    destAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    destCountries?: pulumi.Input<pulumi.Input<string>[]>;
    destIpCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of destination ip groups
     */
    destIpGroups?: pulumi.Input<inputs.FirewallFilteringRuleDestIpGroups>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    deviceGroups?: pulumi.Input<inputs.FirewallFilteringRuleDeviceGroups>;
    /**
     * List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
     * using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
     * Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
     */
    deviceTrustLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    devices?: pulumi.Input<inputs.FirewallFilteringRuleDevices>;
    enableFullLogging?: pulumi.Input<boolean>;
    /**
     * list of groups for which rule must be applied
     */
    groups?: pulumi.Input<inputs.FirewallFilteringRuleGroups>;
    /**
     * list of Labels that are applicable to the rule.
     */
    labels?: pulumi.Input<inputs.FirewallFilteringRuleLabels>;
    /**
     * list of locations groups
     */
    locationGroups?: pulumi.Input<inputs.FirewallFilteringRuleLocationGroups>;
    /**
     * list of locations for which rule must be applied
     */
    locations?: pulumi.Input<inputs.FirewallFilteringRuleLocations>;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name?: pulumi.Input<string>;
    /**
     * list of nw application groups
     */
    nwApplicationGroups?: pulumi.Input<inputs.FirewallFilteringRuleNwApplicationGroups>;
    /**
     * User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
     * specific network service application.
     */
    nwApplications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of nw service groups
     */
    nwServiceGroups?: pulumi.Input<inputs.FirewallFilteringRuleNwServiceGroups>;
    /**
     * list of nw services
     */
    nwServices?: pulumi.Input<inputs.FirewallFilteringRuleNwServices>;
    /**
     * Rule order number. If omitted, the rule will be added to the end of the rule set.
     */
    order?: pulumi.Input<number>;
    /**
     * If set to true, a predefined rule is applied
     */
    predefined?: pulumi.Input<boolean>;
    /**
     * Admin rank of the Firewall Filtering policy rule
     */
    rank?: pulumi.Input<number>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    sourceCountries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of source ip groups
     */
    srcIpGroups?: pulumi.Input<inputs.FirewallFilteringRuleSrcIpGroups>;
    /**
     * User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address.
     */
    srcIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Determines whether the Firewall Filtering policy rule is enabled or disabled
     */
    state?: pulumi.Input<string>;
    /**
     * The time interval in which the Firewall Filtering policy rule applies
     */
    timeWindows?: pulumi.Input<inputs.FirewallFilteringRuleTimeWindows>;
    /**
     * list of users for which rule must be applied
     */
    users?: pulumi.Input<inputs.FirewallFilteringRuleUsers>;
    /**
     * The list of preconfigured workload groups to which the policy must be applied
     */
    workloadGroups?: pulumi.Input<pulumi.Input<inputs.FirewallFilteringRuleWorkloadGroup>[]>;
    /**
     * The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
     * Gateway forwarding method.
     */
    zpaAppSegments?: pulumi.Input<pulumi.Input<inputs.FirewallFilteringRuleZpaAppSegment>[]>;
}
