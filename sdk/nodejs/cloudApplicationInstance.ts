// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zia/about-cloud-application-instances)
 * * [API documentation](https://help.zscaler.com/zia/cloud-app-control-policy#/cloudApplicationInstances-post)
 *
 * The **zia_cloud_application_instance** resource allows the creation and management of cloud application instance.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zia_cloud_application_instance** can be imported by using `<INSTANCE_ID>` or `<INSTANCE_NAME>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/cloudApplicationInstance:CloudApplicationInstance example <instance_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zia:index/cloudApplicationInstance:CloudApplicationInstance example <instance_name>
 * ```
 */
export class CloudApplicationInstance extends pulumi.CustomResource {
    /**
     * Get an existing CloudApplicationInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudApplicationInstanceState, opts?: pulumi.CustomResourceOptions): CloudApplicationInstance {
        return new CloudApplicationInstance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/cloudApplicationInstance:CloudApplicationInstance';

    /**
     * Returns true if the given object is an instance of CloudApplicationInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudApplicationInstance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudApplicationInstance.__pulumiType;
    }

    public /*out*/ readonly instanceId!: pulumi.Output<number>;
    /**
     * List of identifiers for the cloud application instance.
     */
    public readonly instanceIdentifiers!: pulumi.Output<outputs.CloudApplicationInstanceInstanceIdentifier[] | undefined>;
    /**
     * Type of the cloud application instance.
     */
    public readonly instanceType!: pulumi.Output<string | undefined>;
    /**
     * Name of the cloud application instance.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a CloudApplicationInstance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CloudApplicationInstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudApplicationInstanceArgs | CloudApplicationInstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudApplicationInstanceState | undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceIdentifiers"] = state ? state.instanceIdentifiers : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as CloudApplicationInstanceArgs | undefined;
            resourceInputs["instanceIdentifiers"] = args ? args.instanceIdentifiers : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["instanceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudApplicationInstance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudApplicationInstance resources.
 */
export interface CloudApplicationInstanceState {
    instanceId?: pulumi.Input<number>;
    /**
     * List of identifiers for the cloud application instance.
     */
    instanceIdentifiers?: pulumi.Input<pulumi.Input<inputs.CloudApplicationInstanceInstanceIdentifier>[]>;
    /**
     * Type of the cloud application instance.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * Name of the cloud application instance.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudApplicationInstance resource.
 */
export interface CloudApplicationInstanceArgs {
    /**
     * List of identifiers for the cloud application instance.
     */
    instanceIdentifiers?: pulumi.Input<pulumi.Input<inputs.CloudApplicationInstanceInstanceIdentifier>[]>;
    /**
     * Type of the cloud application instance.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * Name of the cloud application instance.
     */
    name?: pulumi.Input<string>;
}
