// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use the **zia_url_filtering_rules** data source to get information about a URL filtering rule information for the specified `Name`.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 *
 * const example = zia.getURLFilteringRules({
 *     name: "Example",
 * });
 * ```
 */
export function getURLFilteringRules(args?: GetURLFilteringRulesArgs, opts?: pulumi.InvokeOptions): Promise<GetURLFilteringRulesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getURLFilteringRules:getURLFilteringRules", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getURLFilteringRules.
 */
export interface GetURLFilteringRulesArgs {
    /**
     * URL Filtering Rule ID
     */
    id?: number;
    /**
     * Name of the URL Filtering policy rule
     */
    name?: string;
}

/**
 * A collection of values returned by getURLFilteringRules.
 */
export interface GetURLFilteringRulesResult {
    /**
     * (String) Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`
     */
    readonly action: string;
    /**
     * (String) When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If blockOverride is not set, `BLOCK` action cannot be overridden.
     */
    readonly blockOverride: boolean;
    /**
     * (List) The cloud browser isolation profile to which the ISOLATE action is applied in the URL Filtering Policy rules. This block is required when the attribute `action` is set to `ISOLATE`
     */
    readonly cbiProfiles: outputs.GetURLFilteringRulesCbiProfile[];
    readonly ciparule: boolean;
    /**
     * (List of Object) The departments to which the Firewall Filtering policy rule applies
     */
    readonly departments: outputs.GetURLFilteringRulesDepartment[];
    /**
     * (String) Additional information about the rule
     */
    readonly description: string;
    readonly deviceGroups: outputs.GetURLFilteringRulesDeviceGroup[];
    /**
     * (Optional) List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
     */
    readonly deviceTrustLevels: string[];
    readonly devices: outputs.GetURLFilteringRulesDevice[];
    /**
     * (String) URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.
     */
    readonly endUserNotificationUrl: string;
    /**
     * (String) Enforce a set a validity time period for the URL Filtering rule.
     */
    readonly enforceTimeValidity: boolean;
    /**
     * (List of Object) The groups to which the Firewall Filtering policy rule applies
     */
    readonly groups: outputs.GetURLFilteringRulesGroup[];
    /**
     * (Number) A unique identifier assigned to the workload group
     */
    readonly id?: number;
    readonly labels: outputs.GetURLFilteringRulesLabel[];
    readonly lastModifiedBies: outputs.GetURLFilteringRulesLastModifiedBy[];
    /**
     * (Number) When the rule was last modified
     */
    readonly lastModifiedTime: number;
    /**
     * (List of Object) The location groups to which the Firewall Filtering policy rule applies
     */
    readonly locationGroups: outputs.GetURLFilteringRulesLocationGroup[];
    /**
     * (List of Object) The locations to which the Firewall Filtering policy rule applies
     */
    readonly locations: outputs.GetURLFilteringRulesLocation[];
    /**
     * (String) The name of the workload group
     */
    readonly name?: string;
    /**
     * (Number) Order of execution of rule with respect to other URL Filtering rules
     */
    readonly order: number;
    /**
     * (List of Object) Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.
     */
    readonly overrideGroups: outputs.GetURLFilteringRulesOverrideGroup[];
    /**
     * (List of Object) Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.
     */
    readonly overrideUsers: outputs.GetURLFilteringRulesOverrideUser[];
    /**
     * (List of Object) Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`, `WEBSOCKETSSL_RULE`, `WEBSOCKET_RULE`
     */
    readonly protocols: string[];
    /**
     * (String) Admin rank of the admin who creates this rule
     */
    readonly rank: number;
    /**
     * (String) Request method for which the rule must be applied. If not set, rule will be applied to all methods
     */
    readonly requestMethods: string[];
    /**
     * (String) Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
     */
    readonly sizeQuota: number;
    readonly sourceIpGroups: outputs.GetURLFilteringRulesSourceIpGroup[];
    /**
     * (String) Rule State
     */
    readonly state: string;
    /**
     * (String) Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
     */
    readonly timeQuota: number;
    /**
     * (List of Object) The time interval in which the Firewall Filtering policy rule applies
     */
    readonly timeWindows: outputs.GetURLFilteringRulesTimeWindow[];
    /**
     * (String) List of URL categories for which rule must be applied
     */
    readonly urlCategories: string[];
    readonly userAgentTypes: string[];
    /**
     * (List of Object) The users to which the Firewall Filtering policy rule applies
     */
    readonly users: outputs.GetURLFilteringRulesUser[];
    /**
     * (Number) If enforceTimeValidity is set to true, the URL Filtering rule will cease to be valid on this end date and time.
     */
    readonly validityEndTime: number;
    /**
     * (Number) If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.
     */
    readonly validityStartTime: number;
    /**
     * (Number) If enforceTimeValidity is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.
     */
    readonly validityTimeZoneId: string;
    /**
     * (List) The list of preconfigured workload groups to which the policy must be applied
     */
    readonly workloadGroups: outputs.GetURLFilteringRulesWorkloadGroup[];
}
/**
 * Use the **zia_url_filtering_rules** data source to get information about a URL filtering rule information for the specified `Name`.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 *
 * const example = zia.getURLFilteringRules({
 *     name: "Example",
 * });
 * ```
 */
export function getURLFilteringRulesOutput(args?: GetURLFilteringRulesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetURLFilteringRulesResult> {
    return pulumi.output(args).apply((a: any) => getURLFilteringRules(a, opts))
}

/**
 * A collection of arguments for invoking getURLFilteringRules.
 */
export interface GetURLFilteringRulesOutputArgs {
    /**
     * URL Filtering Rule ID
     */
    id?: pulumi.Input<number>;
    /**
     * Name of the URL Filtering policy rule
     */
    name?: pulumi.Input<string>;
}
