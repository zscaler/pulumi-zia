// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The **zia_firewall_filtering_network_application_groups** resource allows the creation and management of ZIA Cloud Firewall IP source groups in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zia_firewall_filtering_network_application_groups** can be imported by using `<GROUP_ID>` or `<GROUP_NAME>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/firewallFilteringApplicationGroups:FirewallFilteringApplicationGroups example <group_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zia:index/firewallFilteringApplicationGroups:FirewallFilteringApplicationGroups example <group_name>
 * ```
 */
export class FirewallFilteringApplicationGroups extends pulumi.CustomResource {
    /**
     * Get an existing FirewallFilteringApplicationGroups resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallFilteringApplicationGroupsState, opts?: pulumi.CustomResourceOptions): FirewallFilteringApplicationGroups {
        return new FirewallFilteringApplicationGroups(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/firewallFilteringApplicationGroups:FirewallFilteringApplicationGroups';

    /**
     * Returns true if the given object is an instance of FirewallFilteringApplicationGroups.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallFilteringApplicationGroups {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallFilteringApplicationGroups.__pulumiType;
    }

    public /*out*/ readonly appId!: pulumi.Output<number>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly networkApplications!: pulumi.Output<string[] | undefined>;

    /**
     * Create a FirewallFilteringApplicationGroups resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FirewallFilteringApplicationGroupsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallFilteringApplicationGroupsArgs | FirewallFilteringApplicationGroupsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallFilteringApplicationGroupsState | undefined;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkApplications"] = state ? state.networkApplications : undefined;
        } else {
            const args = argsOrState as FirewallFilteringApplicationGroupsArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkApplications"] = args ? args.networkApplications : undefined;
            resourceInputs["appId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallFilteringApplicationGroups.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallFilteringApplicationGroups resources.
 */
export interface FirewallFilteringApplicationGroupsState {
    appId?: pulumi.Input<number>;
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkApplications?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a FirewallFilteringApplicationGroups resource.
 */
export interface FirewallFilteringApplicationGroupsArgs {
    description?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    networkApplications?: pulumi.Input<pulumi.Input<string>[]>;
}
