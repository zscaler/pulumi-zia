// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The **zia_traffic_forwarding_gre_tunnel** resource allows the creation and management of GRE tunnel configuration in the Zscaler Internet Access (ZIA) portal.
 *
 * > **Note:** The provider automatically query the Zscaler cloud for the primary and secondary destination datacenter and virtual IP address (VIP) of the GRE tunnel. The parameter can be overriden if needed by setting the parameters: `primaryDestVip` and `secondaryDestVip`.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@bdzscaler/pulumi-zia";
 *
 * // ZIA Traffic Forwarding - Static IP
 * const exampleTrafficForwardingStaticIP = new zia.TrafficForwardingStaticIP("exampleTrafficForwardingStaticIP", {
 *     ipAddress: "1.1.1.1",
 *     routableIp: true,
 *     comment: "Example",
 *     geoOverride: true,
 *     latitude: 37.418171,
 *     longitude: -121.95314,
 * });
 * // Creates a numbered GRE Tunnel
 * const exampleTrafficForwardingGRETunnel = new zia.TrafficForwardingGRETunnel("exampleTrafficForwardingGRETunnel", {
 *     sourceIp: exampleTrafficForwardingStaticIP.ipAddress,
 *     comment: "Example",
 *     withinCountry: true,
 *     countryCode: "US",
 *     ipUnnumbered: false,
 * }, {
 *     dependsOn: [exampleTrafficForwardingStaticIP],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@bdzscaler/pulumi-zia";
 * import * as zia from "@pulumi/zia";
 *
 * const thisTrafficForwardingStaticIP = new zia.TrafficForwardingStaticIP("thisTrafficForwardingStaticIP", {
 *     ipAddress: "50.98.112.169",
 *     routableIp: true,
 *     comment: "Created with Terraform",
 *     geoOverride: true,
 *     latitude: 49.0526,
 *     longitude: -122.8291,
 * });
 * const thisTrafficForwardingVIPRecommendedList = thisTrafficForwardingStaticIP.ipAddress.apply(ipAddress => zia.getTrafficForwardingVIPRecommendedListOutput({
 *     sourceIp: ipAddress,
 *     requiredCount: 2,
 * }));
 * const thisTrafficForwardingGREInternalIPRange = zia.getTrafficForwardingGREInternalIPRange({
 *     requiredCount: 10,
 * });
 * const thisTrafficForwardingGRETunnel = new zia.TrafficForwardingGRETunnel("thisTrafficForwardingGRETunnel", {
 *     sourceIp: thisTrafficForwardingStaticIP.ipAddress,
 *     comment: "GRE Tunnel Created with Terraform",
 *     withinCountry: false,
 *     countryCode: "CA",
 *     ipUnnumbered: false,
 *     primaryDestVips: [{
 *         datacenter: thisTrafficForwardingVIPRecommendedList.apply(thisTrafficForwardingVIPRecommendedList => thisTrafficForwardingVIPRecommendedList.lists?.[0]?.datacenter),
 *         virtualIp: thisTrafficForwardingVIPRecommendedList.apply(thisTrafficForwardingVIPRecommendedList => thisTrafficForwardingVIPRecommendedList.lists?.[0]?.virtualIp),
 *     }],
 *     secondaryDestVips: [{
 *         datacenter: thisTrafficForwardingVIPRecommendedList.apply(thisTrafficForwardingVIPRecommendedList => thisTrafficForwardingVIPRecommendedList.lists?.[1]?.datacenter),
 *         virtualIp: thisTrafficForwardingVIPRecommendedList.apply(thisTrafficForwardingVIPRecommendedList => thisTrafficForwardingVIPRecommendedList.lists?.[1]?.virtualIp),
 *     }],
 * }, {
 *     dependsOn: [thisTrafficForwardingStaticIP],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * > **Note:** Although the example shows 2 valid attributes defined (datacenter, virtual_ip) within the primaryDestVip and secondary_dest_vip, only one attribute is required. If setting the datacenter name as the attribute i.e YVR1. The provider will automatically select the agvaiulable VIP.
 *
 * > **Note:** To obtain the datacenter codes and/or virtual_ips, refer to the following [Zscaler Portal](https://config.zscaler.com/zscloud.net/cenr) and choose your cloud tenant.
 *
 * > **Note:** The provider will automatically query and set the Zscaler cloud for the next available `/29` internal IP range to be used in a numbered GRE tunnel.
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@bdzscaler/pulumi-zia";
 *
 * // ZIA Traffic Forwarding - Static IP
 * const example = new zia.TrafficForwardingStaticIP("example", {
 *     ipAddress: "1.1.1.1",
 *     routableIp: true,
 *     comment: "Example",
 *     geoOverride: true,
 *     latitude: 37.418171,
 *     longitude: -121.95314,
 * });
 * // Creates an unnumbered GRE Tunnel
 * const telusHomeInternet01Gre01 = new zia.TrafficForwardingGRETunnel("telusHomeInternet01Gre01", {
 *     sourceIp: example.ipAddress,
 *     comment: "Example",
 *     withinCountry: true,
 *     countryCode: "CA",
 *     ipUnnumbered: true,
 * }, {
 *     dependsOn: [example],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zia_traffic_forwarding_gre_tunnel** can be imported by using `<TUNNEL_ID>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel example <tunnel_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel example <engine_name>
 * ```
 */
export class TrafficForwardingGRETunnel extends pulumi.CustomResource {
    /**
     * Get an existing TrafficForwardingGRETunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficForwardingGRETunnelState, opts?: pulumi.CustomResourceOptions): TrafficForwardingGRETunnel {
        return new TrafficForwardingGRETunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel';

    /**
     * Returns true if the given object is an instance of TrafficForwardingGRETunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficForwardingGRETunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficForwardingGRETunnel.__pulumiType;
    }

    /**
     * Additional information about this GRE tunnel
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * When withinCountry is enabled, you must set this to the country code.
     */
    public readonly countryCode!: pulumi.Output<string>;
    /**
     * The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ipUnnumbered` is set to `false`.
     */
    public readonly internalIpRange!: pulumi.Output<string>;
    /**
     * This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are set to null
     */
    public readonly ipUnnumbered!: pulumi.Output<boolean>;
    /**
     * **` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.
     */
    public readonly primaryDestVips!: pulumi.Output<outputs.TrafficForwardingGRETunnelPrimaryDestVip[]>;
    /**
     * The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.
     */
    public readonly secondaryDestVips!: pulumi.Output<outputs.TrafficForwardingGRETunnelSecondaryDestVip[]>;
    /**
     * The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.
     */
    public readonly sourceIp!: pulumi.Output<string>;
    /**
     * The ID of the GRE tunnel.
     */
    public /*out*/ readonly tunnelId!: pulumi.Output<number>;
    /**
     * Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
     */
    public readonly withinCountry!: pulumi.Output<boolean>;

    /**
     * Create a TrafficForwardingGRETunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficForwardingGRETunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficForwardingGRETunnelArgs | TrafficForwardingGRETunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficForwardingGRETunnelState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["countryCode"] = state ? state.countryCode : undefined;
            resourceInputs["internalIpRange"] = state ? state.internalIpRange : undefined;
            resourceInputs["ipUnnumbered"] = state ? state.ipUnnumbered : undefined;
            resourceInputs["primaryDestVips"] = state ? state.primaryDestVips : undefined;
            resourceInputs["secondaryDestVips"] = state ? state.secondaryDestVips : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["tunnelId"] = state ? state.tunnelId : undefined;
            resourceInputs["withinCountry"] = state ? state.withinCountry : undefined;
        } else {
            const args = argsOrState as TrafficForwardingGRETunnelArgs | undefined;
            if ((!args || args.sourceIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceIp'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["countryCode"] = args ? args.countryCode : undefined;
            resourceInputs["internalIpRange"] = args ? args.internalIpRange : undefined;
            resourceInputs["ipUnnumbered"] = args ? args.ipUnnumbered : undefined;
            resourceInputs["primaryDestVips"] = args ? args.primaryDestVips : undefined;
            resourceInputs["secondaryDestVips"] = args ? args.secondaryDestVips : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["withinCountry"] = args ? args.withinCountry : undefined;
            resourceInputs["tunnelId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficForwardingGRETunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrafficForwardingGRETunnel resources.
 */
export interface TrafficForwardingGRETunnelState {
    /**
     * Additional information about this GRE tunnel
     */
    comment?: pulumi.Input<string>;
    /**
     * When withinCountry is enabled, you must set this to the country code.
     */
    countryCode?: pulumi.Input<string>;
    /**
     * The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ipUnnumbered` is set to `false`.
     */
    internalIpRange?: pulumi.Input<string>;
    /**
     * This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are set to null
     */
    ipUnnumbered?: pulumi.Input<boolean>;
    /**
     * **` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.
     */
    primaryDestVips?: pulumi.Input<pulumi.Input<inputs.TrafficForwardingGRETunnelPrimaryDestVip>[]>;
    /**
     * The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.
     */
    secondaryDestVips?: pulumi.Input<pulumi.Input<inputs.TrafficForwardingGRETunnelSecondaryDestVip>[]>;
    /**
     * The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * The ID of the GRE tunnel.
     */
    tunnelId?: pulumi.Input<number>;
    /**
     * Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
     */
    withinCountry?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a TrafficForwardingGRETunnel resource.
 */
export interface TrafficForwardingGRETunnelArgs {
    /**
     * Additional information about this GRE tunnel
     */
    comment?: pulumi.Input<string>;
    /**
     * When withinCountry is enabled, you must set this to the country code.
     */
    countryCode?: pulumi.Input<string>;
    /**
     * The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ipUnnumbered` is set to `false`.
     */
    internalIpRange?: pulumi.Input<string>;
    /**
     * This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are set to null
     */
    ipUnnumbered?: pulumi.Input<boolean>;
    /**
     * **` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.
     */
    primaryDestVips?: pulumi.Input<pulumi.Input<inputs.TrafficForwardingGRETunnelPrimaryDestVip>[]>;
    /**
     * The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.
     */
    secondaryDestVips?: pulumi.Input<pulumi.Input<inputs.TrafficForwardingGRETunnelSecondaryDestVip>[]>;
    /**
     * The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.
     */
    sourceIp: pulumi.Input<string>;
    /**
     * Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
     */
    withinCountry?: pulumi.Input<boolean>;
}
