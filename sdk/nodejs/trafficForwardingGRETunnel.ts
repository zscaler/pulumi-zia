// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zia_traffic_forwarding_gre_tunnel** can be imported by using `<TUNNEL_ID>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel example <tunnel_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel example <engine_name>
 * ```
 */
export class TrafficForwardingGRETunnel extends pulumi.CustomResource {
    /**
     * Get an existing TrafficForwardingGRETunnel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficForwardingGRETunnelState, opts?: pulumi.CustomResourceOptions): TrafficForwardingGRETunnel {
        return new TrafficForwardingGRETunnel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel';

    /**
     * Returns true if the given object is an instance of TrafficForwardingGRETunnel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficForwardingGRETunnel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficForwardingGRETunnel.__pulumiType;
    }

    /**
     * Additional information about this GRE tunnel
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * When withinCountry is enabled, you must set this to the country code.
     */
    public readonly countryCode!: pulumi.Output<string>;
    /**
     * The start of the internal IP address in /29 CIDR range
     */
    public readonly internalIpRange!: pulumi.Output<string | undefined>;
    /**
     * This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are
     * set to null
     */
    public readonly ipUnnumbered!: pulumi.Output<boolean>;
    /**
     * The primary destination data center and virtual IP address (VIP) of the GRE tunnel
     */
    public readonly primaryDestVips!: pulumi.Output<outputs.TrafficForwardingGRETunnelPrimaryDestVip[]>;
    /**
     * The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
     */
    public readonly secondaryDestVips!: pulumi.Output<outputs.TrafficForwardingGRETunnelSecondaryDestVip[]>;
    /**
     * The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
     */
    public readonly sourceIp!: pulumi.Output<string>;
    /**
     * The ID of the GRE tunnel.
     */
    public /*out*/ readonly tunnelId!: pulumi.Output<number>;
    /**
     * Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
     */
    public readonly withinCountry!: pulumi.Output<boolean>;

    /**
     * Create a TrafficForwardingGRETunnel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficForwardingGRETunnelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficForwardingGRETunnelArgs | TrafficForwardingGRETunnelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficForwardingGRETunnelState | undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["countryCode"] = state ? state.countryCode : undefined;
            resourceInputs["internalIpRange"] = state ? state.internalIpRange : undefined;
            resourceInputs["ipUnnumbered"] = state ? state.ipUnnumbered : undefined;
            resourceInputs["primaryDestVips"] = state ? state.primaryDestVips : undefined;
            resourceInputs["secondaryDestVips"] = state ? state.secondaryDestVips : undefined;
            resourceInputs["sourceIp"] = state ? state.sourceIp : undefined;
            resourceInputs["tunnelId"] = state ? state.tunnelId : undefined;
            resourceInputs["withinCountry"] = state ? state.withinCountry : undefined;
        } else {
            const args = argsOrState as TrafficForwardingGRETunnelArgs | undefined;
            if ((!args || args.sourceIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceIp'");
            }
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["countryCode"] = args ? args.countryCode : undefined;
            resourceInputs["internalIpRange"] = args ? args.internalIpRange : undefined;
            resourceInputs["ipUnnumbered"] = args ? args.ipUnnumbered : undefined;
            resourceInputs["primaryDestVips"] = args ? args.primaryDestVips : undefined;
            resourceInputs["secondaryDestVips"] = args ? args.secondaryDestVips : undefined;
            resourceInputs["sourceIp"] = args ? args.sourceIp : undefined;
            resourceInputs["withinCountry"] = args ? args.withinCountry : undefined;
            resourceInputs["tunnelId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficForwardingGRETunnel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrafficForwardingGRETunnel resources.
 */
export interface TrafficForwardingGRETunnelState {
    /**
     * Additional information about this GRE tunnel
     */
    comment?: pulumi.Input<string>;
    /**
     * When withinCountry is enabled, you must set this to the country code.
     */
    countryCode?: pulumi.Input<string>;
    /**
     * The start of the internal IP address in /29 CIDR range
     */
    internalIpRange?: pulumi.Input<string>;
    /**
     * This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are
     * set to null
     */
    ipUnnumbered?: pulumi.Input<boolean>;
    /**
     * The primary destination data center and virtual IP address (VIP) of the GRE tunnel
     */
    primaryDestVips?: pulumi.Input<pulumi.Input<inputs.TrafficForwardingGRETunnelPrimaryDestVip>[]>;
    /**
     * The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
     */
    secondaryDestVips?: pulumi.Input<pulumi.Input<inputs.TrafficForwardingGRETunnelSecondaryDestVip>[]>;
    /**
     * The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * The ID of the GRE tunnel.
     */
    tunnelId?: pulumi.Input<number>;
    /**
     * Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
     */
    withinCountry?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a TrafficForwardingGRETunnel resource.
 */
export interface TrafficForwardingGRETunnelArgs {
    /**
     * Additional information about this GRE tunnel
     */
    comment?: pulumi.Input<string>;
    /**
     * When withinCountry is enabled, you must set this to the country code.
     */
    countryCode?: pulumi.Input<string>;
    /**
     * The start of the internal IP address in /29 CIDR range
     */
    internalIpRange?: pulumi.Input<string>;
    /**
     * This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are
     * set to null
     */
    ipUnnumbered?: pulumi.Input<boolean>;
    /**
     * The primary destination data center and virtual IP address (VIP) of the GRE tunnel
     */
    primaryDestVips?: pulumi.Input<pulumi.Input<inputs.TrafficForwardingGRETunnelPrimaryDestVip>[]>;
    /**
     * The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
     */
    secondaryDestVips?: pulumi.Input<pulumi.Input<inputs.TrafficForwardingGRETunnelSecondaryDestVip>[]>;
    /**
     * The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
     */
    sourceIp: pulumi.Input<string>;
    /**
     * Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
     */
    withinCountry?: pulumi.Input<boolean>;
}
