// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zia/about-cloud-application-risk-profile)
 * * [API documentation](https://help.zscaler.com/zia/cloud-applications#/riskProfiles-get)
 *
 * Use the **zia_risk_profiles** data source to get information about a cloud application risk profile in the Zscaler Internet Access cloud or via the API.
 * See [About Cloud Application Risk Profile](https://help.zscaler.com/zia/about-cloud-application-risk-profile) for more details.
 *
 * ## Example Usage
 *
 * ### Retrieve By Name
 *
 * ### Retrieve By ID
 */
export function getRiskProfiles(args?: GetRiskProfilesArgs, opts?: pulumi.InvokeOptions): Promise<GetRiskProfilesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getRiskProfiles:getRiskProfiles", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getRiskProfiles.
 */
export interface GetRiskProfilesArgs {
    /**
     * Unique identifier for the risk profile.
     */
    id?: number;
    /**
     * Cloud application risk profile name.
     */
    name?: string;
}

/**
 * A collection of values returned by getRiskProfiles.
 */
export interface GetRiskProfilesResult {
    /**
     * (String) Filters based on support for administrative logging. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly adminAuditLogs: string;
    /**
     * (Optional) Filters based on supported certifications.
     */
    readonly certifications: string[];
    readonly createTime: number;
    /**
     * (Set) List of custom tags to be included or excluded for the profile.
     */
    readonly customTags: outputs.GetRiskProfilesCustomTag[];
    /**
     * (String) Filters based on history of data breaches. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly dataBreach: string;
    /**
     * (Optional) Filters based on encryption of data in transit.
     */
    readonly dataEncryptionInTransits: string[];
    /**
     * (String) Filters based on DNS CAA policy implementation.
     */
    readonly dnsCaaPolicy: string;
    /**
     * (String) Filters based on DMARC support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly domainBasedMessageAuth: string;
    /**
     * (String) Filters based on DKIM authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly domainKeysIdentifiedMail: string;
    /**
     * (String) Filters based on anonymous access support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly evasive: string;
    /**
     * (Int) Indicates if the certificates are included or not.
     */
    readonly excludeCertificates: number;
    /**
     * (String) Filters based on file sharing capability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly fileSharing: string;
    /**
     * (String) Filters based on HTTP security headers support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly httpSecurityHeaders: string;
    readonly id: number;
    readonly lastModTime: number;
    readonly lastModifiedBies: outputs.GetRiskProfilesLastModifiedBy[];
    /**
     * (String) Filters based on content malware scanning. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly malwareScanningForContent: string;
    /**
     * (String) Filters based on multi-factor authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly mfaSupport: string;
    readonly name: string;
    /**
     * (String) Filters based on password strength policy. Supported values: `ANY`, `GOOD`, `POOR`, `UN_KNOWN`.
     */
    readonly passwordStrength: string;
    /**
     * (String) Filters applications based on questionable legal terms. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly poorItemsOfService: string;
    /**
     * (String) Risk profile type. Supported value: `CLOUD_APPLICATIONS`. Default is `CLOUD_APPLICATIONS`.
     */
    readonly profileType: string;
    /**
     * (String) Filters based on remote screen sharing support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly remoteScreenSharing: string;
    /**
     * (Optional) Filters based on risk index thresholds.
     */
    readonly riskIndices: number[];
    /**
     * (String) Filters based on SPF authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly senderPolicyFramework: string;
    /**
     * (String) Filters based on IP restriction support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly sourceIpRestrictions: string;
    /**
     * (String) Filters based on SSL certificate key size. Supported values: `ANY`, `UN_KNOWN`, `BITS_1024`, `BITS_2048`, `BITS_256`, `BITS_3072`, `BITS_384`, `BITS_4096`, `BITS_8192`.
     */
    readonly sslCertKeySize: string;
    /**
     * (String) Filters based on SSL certificate validity period. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly sslCertValidity: string;
    /**
     * (String) Filters based on use of pinned SSL certificates. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly sslPinned: string;
    /**
     * (String) Status of the applications. Supported values: `UN_SANCTIONED`, `SANCTIONED`, `ANY`.
     */
    readonly status: string;
    /**
     * (String) Filters based on Web Application Firewall (WAF) support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly supportForWaf: string;
    /**
     * (String) Filters based on published CVE vulnerabilities. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly vulnerability: string;
    /**
     * (String) Filters based on vulnerability disclosure policy. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly vulnerabilityDisclosure: string;
    /**
     * (String) Filters based on Heartbleed vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly vulnerableToHeartBleed: string;
    /**
     * (String) Filters based on Logjam vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly vulnerableToLogJam: string;
    /**
     * (String) Filters based on POODLE vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly vulnerableToPoodle: string;
    /**
     * (String) Filters based on weak cipher usage. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
     */
    readonly weakCipherSupport: string;
}
/**
 * * [Official documentation](https://help.zscaler.com/zia/about-cloud-application-risk-profile)
 * * [API documentation](https://help.zscaler.com/zia/cloud-applications#/riskProfiles-get)
 *
 * Use the **zia_risk_profiles** data source to get information about a cloud application risk profile in the Zscaler Internet Access cloud or via the API.
 * See [About Cloud Application Risk Profile](https://help.zscaler.com/zia/about-cloud-application-risk-profile) for more details.
 *
 * ## Example Usage
 *
 * ### Retrieve By Name
 *
 * ### Retrieve By ID
 */
export function getRiskProfilesOutput(args?: GetRiskProfilesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetRiskProfilesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("zia:index/getRiskProfiles:getRiskProfiles", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getRiskProfiles.
 */
export interface GetRiskProfilesOutputArgs {
    /**
     * Unique identifier for the risk profile.
     */
    id?: pulumi.Input<number>;
    /**
     * Cloud application risk profile name.
     */
    name?: pulumi.Input<string>;
}
