// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zia/about-nat-control)
 * * [API documentation](https://help.zscaler.com/zia/nat-control-policy#/dnatRules-get)
 *
 * The **zia_nat_control_rules** resource allows the creation and management of NAT Control rules in the Zscaler Internet Access.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zia_nat_control_rules** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/natControlRules:NatControlRules example <rule_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zia:index/natControlRules:NatControlRules example <rule_name>
 * ```
 */
export class NatControlRules extends pulumi.CustomResource {
    /**
     * Get an existing NatControlRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NatControlRulesState, opts?: pulumi.CustomResourceOptions): NatControlRules {
        return new NatControlRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/natControlRules:NatControlRules';

    /**
     * Returns true if the given object is an instance of NatControlRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NatControlRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NatControlRules.__pulumiType;
    }

    /**
     * If set to true, the default rule is applied
     */
    public readonly defaultRule!: pulumi.Output<boolean | undefined>;
    /**
     * list of departments for which rule must be applied
     */
    public readonly departments!: pulumi.Output<outputs.NatControlRulesDepartments | undefined>;
    /**
     * Additional information about the rule
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
     */
    public readonly destAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    public readonly destCountries!: pulumi.Output<string[]>;
    public readonly destIpCategories!: pulumi.Output<string[] | undefined>;
    /**
     * list of destination ip groups
     */
    public readonly destIpGroups!: pulumi.Output<outputs.NatControlRulesDestIpGroups | undefined>;
    /**
     * list of destination ipv6 groups
     */
    public readonly destIpv6Groups!: pulumi.Output<outputs.NatControlRulesDestIpv6Groups | undefined>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    public readonly deviceGroups!: pulumi.Output<outputs.NatControlRulesDeviceGroups | undefined>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    public readonly devices!: pulumi.Output<outputs.NatControlRulesDevices | undefined>;
    public readonly enableFullLogging!: pulumi.Output<boolean | undefined>;
    /**
     * list of groups for which rule must be applied
     */
    public readonly groups!: pulumi.Output<outputs.NatControlRulesGroups | undefined>;
    /**
     * list of Labels that are applicable to the rule.
     */
    public readonly labels!: pulumi.Output<outputs.NatControlRulesLabels | undefined>;
    /**
     * list of locations groups
     */
    public readonly locationGroups!: pulumi.Output<outputs.NatControlRulesLocationGroups | undefined>;
    /**
     * list of locations for which rule must be applied
     */
    public readonly locations!: pulumi.Output<outputs.NatControlRulesLocations | undefined>;
    /**
     * Name of the nat control policy rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * list of nw service groups
     */
    public readonly nwServiceGroups!: pulumi.Output<outputs.NatControlRulesNwServiceGroups | undefined>;
    /**
     * list of nw services
     */
    public readonly nwServices!: pulumi.Output<outputs.NatControlRulesNwServices | undefined>;
    /**
     * Rule order number. If omitted, the rule will be added to the end of the rule set.
     */
    public readonly order!: pulumi.Output<number>;
    /**
     * If set to true, a predefined rule is applied
     */
    public readonly predefined!: pulumi.Output<boolean | undefined>;
    /**
     * Admin rank of the nat control policy rule
     */
    public readonly rank!: pulumi.Output<number | undefined>;
    /**
     * The action the nat control policy rule takes when packets match the rule
     */
    public readonly redirectFqdn!: pulumi.Output<string | undefined>;
    /**
     * The action the nat control policy rule takes when packets match the rule
     */
    public readonly redirectIp!: pulumi.Output<string | undefined>;
    /**
     * The action the nat control policy rule takes when packets match the rule
     */
    public readonly redirectPort!: pulumi.Output<number | undefined>;
    /**
     * List of destination domain categories to which the rule applies
     */
    public readonly resCategories!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly ruleId!: pulumi.Output<number>;
    /**
     * list of source ip groups
     */
    public readonly srcIpGroups!: pulumi.Output<outputs.NatControlRulesSrcIpGroups | undefined>;
    /**
     * User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address.
     */
    public readonly srcIps!: pulumi.Output<string[] | undefined>;
    /**
     * list of source ipv6 groups
     */
    public readonly srcIpv6Groups!: pulumi.Output<outputs.NatControlRulesSrcIpv6Groups | undefined>;
    /**
     * Determines whether the nat control policy rule is enabled or disabled
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * The time interval in which the nat control policy rule applies
     */
    public readonly timeWindows!: pulumi.Output<outputs.NatControlRulesTimeWindows | undefined>;
    /**
     * list of users for which rule must be applied
     */
    public readonly users!: pulumi.Output<outputs.NatControlRulesUsers | undefined>;

    /**
     * Create a NatControlRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: NatControlRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NatControlRulesArgs | NatControlRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NatControlRulesState | undefined;
            resourceInputs["defaultRule"] = state ? state.defaultRule : undefined;
            resourceInputs["departments"] = state ? state.departments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destAddresses"] = state ? state.destAddresses : undefined;
            resourceInputs["destCountries"] = state ? state.destCountries : undefined;
            resourceInputs["destIpCategories"] = state ? state.destIpCategories : undefined;
            resourceInputs["destIpGroups"] = state ? state.destIpGroups : undefined;
            resourceInputs["destIpv6Groups"] = state ? state.destIpv6Groups : undefined;
            resourceInputs["deviceGroups"] = state ? state.deviceGroups : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["enableFullLogging"] = state ? state.enableFullLogging : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["locationGroups"] = state ? state.locationGroups : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nwServiceGroups"] = state ? state.nwServiceGroups : undefined;
            resourceInputs["nwServices"] = state ? state.nwServices : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["predefined"] = state ? state.predefined : undefined;
            resourceInputs["rank"] = state ? state.rank : undefined;
            resourceInputs["redirectFqdn"] = state ? state.redirectFqdn : undefined;
            resourceInputs["redirectIp"] = state ? state.redirectIp : undefined;
            resourceInputs["redirectPort"] = state ? state.redirectPort : undefined;
            resourceInputs["resCategories"] = state ? state.resCategories : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["srcIpGroups"] = state ? state.srcIpGroups : undefined;
            resourceInputs["srcIps"] = state ? state.srcIps : undefined;
            resourceInputs["srcIpv6Groups"] = state ? state.srcIpv6Groups : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeWindows"] = state ? state.timeWindows : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
        } else {
            const args = argsOrState as NatControlRulesArgs | undefined;
            resourceInputs["defaultRule"] = args ? args.defaultRule : undefined;
            resourceInputs["departments"] = args ? args.departments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destAddresses"] = args ? args.destAddresses : undefined;
            resourceInputs["destCountries"] = args ? args.destCountries : undefined;
            resourceInputs["destIpCategories"] = args ? args.destIpCategories : undefined;
            resourceInputs["destIpGroups"] = args ? args.destIpGroups : undefined;
            resourceInputs["destIpv6Groups"] = args ? args.destIpv6Groups : undefined;
            resourceInputs["deviceGroups"] = args ? args.deviceGroups : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["enableFullLogging"] = args ? args.enableFullLogging : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["locationGroups"] = args ? args.locationGroups : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nwServiceGroups"] = args ? args.nwServiceGroups : undefined;
            resourceInputs["nwServices"] = args ? args.nwServices : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["predefined"] = args ? args.predefined : undefined;
            resourceInputs["rank"] = args ? args.rank : undefined;
            resourceInputs["redirectFqdn"] = args ? args.redirectFqdn : undefined;
            resourceInputs["redirectIp"] = args ? args.redirectIp : undefined;
            resourceInputs["redirectPort"] = args ? args.redirectPort : undefined;
            resourceInputs["resCategories"] = args ? args.resCategories : undefined;
            resourceInputs["srcIpGroups"] = args ? args.srcIpGroups : undefined;
            resourceInputs["srcIps"] = args ? args.srcIps : undefined;
            resourceInputs["srcIpv6Groups"] = args ? args.srcIpv6Groups : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timeWindows"] = args ? args.timeWindows : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NatControlRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NatControlRules resources.
 */
export interface NatControlRulesState {
    /**
     * If set to true, the default rule is applied
     */
    defaultRule?: pulumi.Input<boolean>;
    /**
     * list of departments for which rule must be applied
     */
    departments?: pulumi.Input<inputs.NatControlRulesDepartments>;
    /**
     * Additional information about the rule
     */
    description?: pulumi.Input<string>;
    /**
     * Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
     */
    destAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    destCountries?: pulumi.Input<pulumi.Input<string>[]>;
    destIpCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of destination ip groups
     */
    destIpGroups?: pulumi.Input<inputs.NatControlRulesDestIpGroups>;
    /**
     * list of destination ipv6 groups
     */
    destIpv6Groups?: pulumi.Input<inputs.NatControlRulesDestIpv6Groups>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    deviceGroups?: pulumi.Input<inputs.NatControlRulesDeviceGroups>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    devices?: pulumi.Input<inputs.NatControlRulesDevices>;
    enableFullLogging?: pulumi.Input<boolean>;
    /**
     * list of groups for which rule must be applied
     */
    groups?: pulumi.Input<inputs.NatControlRulesGroups>;
    /**
     * list of Labels that are applicable to the rule.
     */
    labels?: pulumi.Input<inputs.NatControlRulesLabels>;
    /**
     * list of locations groups
     */
    locationGroups?: pulumi.Input<inputs.NatControlRulesLocationGroups>;
    /**
     * list of locations for which rule must be applied
     */
    locations?: pulumi.Input<inputs.NatControlRulesLocations>;
    /**
     * Name of the nat control policy rule
     */
    name?: pulumi.Input<string>;
    /**
     * list of nw service groups
     */
    nwServiceGroups?: pulumi.Input<inputs.NatControlRulesNwServiceGroups>;
    /**
     * list of nw services
     */
    nwServices?: pulumi.Input<inputs.NatControlRulesNwServices>;
    /**
     * Rule order number. If omitted, the rule will be added to the end of the rule set.
     */
    order?: pulumi.Input<number>;
    /**
     * If set to true, a predefined rule is applied
     */
    predefined?: pulumi.Input<boolean>;
    /**
     * Admin rank of the nat control policy rule
     */
    rank?: pulumi.Input<number>;
    /**
     * The action the nat control policy rule takes when packets match the rule
     */
    redirectFqdn?: pulumi.Input<string>;
    /**
     * The action the nat control policy rule takes when packets match the rule
     */
    redirectIp?: pulumi.Input<string>;
    /**
     * The action the nat control policy rule takes when packets match the rule
     */
    redirectPort?: pulumi.Input<number>;
    /**
     * List of destination domain categories to which the rule applies
     */
    resCategories?: pulumi.Input<pulumi.Input<string>[]>;
    ruleId?: pulumi.Input<number>;
    /**
     * list of source ip groups
     */
    srcIpGroups?: pulumi.Input<inputs.NatControlRulesSrcIpGroups>;
    /**
     * User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address.
     */
    srcIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of source ipv6 groups
     */
    srcIpv6Groups?: pulumi.Input<inputs.NatControlRulesSrcIpv6Groups>;
    /**
     * Determines whether the nat control policy rule is enabled or disabled
     */
    state?: pulumi.Input<string>;
    /**
     * The time interval in which the nat control policy rule applies
     */
    timeWindows?: pulumi.Input<inputs.NatControlRulesTimeWindows>;
    /**
     * list of users for which rule must be applied
     */
    users?: pulumi.Input<inputs.NatControlRulesUsers>;
}

/**
 * The set of arguments for constructing a NatControlRules resource.
 */
export interface NatControlRulesArgs {
    /**
     * If set to true, the default rule is applied
     */
    defaultRule?: pulumi.Input<boolean>;
    /**
     * list of departments for which rule must be applied
     */
    departments?: pulumi.Input<inputs.NatControlRulesDepartments>;
    /**
     * Additional information about the rule
     */
    description?: pulumi.Input<string>;
    /**
     * Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
     */
    destAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    destCountries?: pulumi.Input<pulumi.Input<string>[]>;
    destIpCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of destination ip groups
     */
    destIpGroups?: pulumi.Input<inputs.NatControlRulesDestIpGroups>;
    /**
     * list of destination ipv6 groups
     */
    destIpv6Groups?: pulumi.Input<inputs.NatControlRulesDestIpv6Groups>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    deviceGroups?: pulumi.Input<inputs.NatControlRulesDeviceGroups>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    devices?: pulumi.Input<inputs.NatControlRulesDevices>;
    enableFullLogging?: pulumi.Input<boolean>;
    /**
     * list of groups for which rule must be applied
     */
    groups?: pulumi.Input<inputs.NatControlRulesGroups>;
    /**
     * list of Labels that are applicable to the rule.
     */
    labels?: pulumi.Input<inputs.NatControlRulesLabels>;
    /**
     * list of locations groups
     */
    locationGroups?: pulumi.Input<inputs.NatControlRulesLocationGroups>;
    /**
     * list of locations for which rule must be applied
     */
    locations?: pulumi.Input<inputs.NatControlRulesLocations>;
    /**
     * Name of the nat control policy rule
     */
    name?: pulumi.Input<string>;
    /**
     * list of nw service groups
     */
    nwServiceGroups?: pulumi.Input<inputs.NatControlRulesNwServiceGroups>;
    /**
     * list of nw services
     */
    nwServices?: pulumi.Input<inputs.NatControlRulesNwServices>;
    /**
     * Rule order number. If omitted, the rule will be added to the end of the rule set.
     */
    order?: pulumi.Input<number>;
    /**
     * If set to true, a predefined rule is applied
     */
    predefined?: pulumi.Input<boolean>;
    /**
     * Admin rank of the nat control policy rule
     */
    rank?: pulumi.Input<number>;
    /**
     * The action the nat control policy rule takes when packets match the rule
     */
    redirectFqdn?: pulumi.Input<string>;
    /**
     * The action the nat control policy rule takes when packets match the rule
     */
    redirectIp?: pulumi.Input<string>;
    /**
     * The action the nat control policy rule takes when packets match the rule
     */
    redirectPort?: pulumi.Input<number>;
    /**
     * List of destination domain categories to which the rule applies
     */
    resCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of source ip groups
     */
    srcIpGroups?: pulumi.Input<inputs.NatControlRulesSrcIpGroups>;
    /**
     * User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address.
     */
    srcIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of source ipv6 groups
     */
    srcIpv6Groups?: pulumi.Input<inputs.NatControlRulesSrcIpv6Groups>;
    /**
     * Determines whether the nat control policy rule is enabled or disabled
     */
    state?: pulumi.Input<string>;
    /**
     * The time interval in which the nat control policy rule applies
     */
    timeWindows?: pulumi.Input<inputs.NatControlRulesTimeWindows>;
    /**
     * list of users for which rule must be applied
     */
    users?: pulumi.Input<inputs.NatControlRulesUsers>;
}
