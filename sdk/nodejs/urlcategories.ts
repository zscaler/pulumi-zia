// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The **zia_url_categories** resource creates and manages a new custom URL category. If keywords are included within the request, they will be added to the new category.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@bdzscaler/pulumi-zia";
 *
 * const example = new zia.URLCategories("example", {
 *     superCategory: "USER_DEFINED",
 *     configuredName: "MCAS Unsanctioned Apps",
 *     description: "MCAS Unsanctioned Apps",
 *     keywords: ["microsoft"],
 *     customCategory: true,
 *     type: "URL_CATEGORY",
 *     scopes: [{
 *         type: "LOCATION",
 *         scopeEntities: {
 *             ids: [data.zia_location_management.nyc_site.id],
 *         },
 *         scopeGroupMemberEntities: {
 *             ids: [data.zia_group_management.engineering.id],
 *         },
 *     }],
 *     urls: [
 *         ".coupons.com",
 *         ".resource.alaskaair.net",
 *         ".techrepublic.com",
 *         ".dailymotion.com",
 *         ".osiriscomm.com",
 *         ".uefa.com",
 *         ".Logz.io",
 *         ".alexa.com",
 *         ".baidu.com",
 *         ".cnn.com",
 *         ".level3.com",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zia_url_categories** can be imported by using `<CATEGORY_ID>` or `<CATEGORY_NAME>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/uRLCategories:URLCategories example <category_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zia:index/uRLCategories:URLCategories example <category_name>
 * ```
 *
 * ⚠️ **NOTE :**:  This provider only supports the importing of custom URL categories. The importing of built-in categories is not supported.
 */
export class URLCategories extends pulumi.CustomResource {
    /**
     * Get an existing URLCategories resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: URLCategoriesState, opts?: pulumi.CustomResourceOptions): URLCategories {
        return new URLCategories(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/uRLCategories:URLCategories';

    /**
     * Returns true if the given object is an instance of URLCategories.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is URLCategories {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === URLCategories.__pulumiType;
    }

    public /*out*/ readonly categoryId!: pulumi.Output<string>;
    /**
     * Name of the URL category. This is only required for custom URL categories.
     */
    public readonly configuredName!: pulumi.Output<string | undefined>;
    public readonly customCategory!: pulumi.Output<boolean | undefined>;
    public readonly customIpRangesCount!: pulumi.Output<number>;
    public readonly customUrlsCount!: pulumi.Output<number>;
    public readonly dbCategorizedUrls!: pulumi.Output<string[] | undefined>;
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly editable!: pulumi.Output<boolean>;
    public readonly ipRanges!: pulumi.Output<string[] | undefined>;
    public readonly ipRangesRetainingParentCategories!: pulumi.Output<string[] | undefined>;
    public readonly ipRangesRetainingParentCategoryCount!: pulumi.Output<number>;
    public readonly keywords!: pulumi.Output<string[] | undefined>;
    public readonly keywordsRetainingParentCategories!: pulumi.Output<string[] | undefined>;
    public readonly scopes!: pulumi.Output<outputs.URLCategoriesScope[] | undefined>;
    /**
     * Super Category of the URL category. This field is required when creating custom URL categories.
     */
    public readonly superCategory!: pulumi.Output<string | undefined>;
    public readonly type!: pulumi.Output<string | undefined>;
    public readonly urlKeywordCounts!: pulumi.Output<outputs.URLCategoriesUrlKeywordCounts>;
    public readonly urls!: pulumi.Output<string[] | undefined>;
    public readonly urlsRetainingParentCategoryCount!: pulumi.Output<number>;

    /**
     * Create a URLCategories resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: URLCategoriesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: URLCategoriesArgs | URLCategoriesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as URLCategoriesState | undefined;
            resourceInputs["categoryId"] = state ? state.categoryId : undefined;
            resourceInputs["configuredName"] = state ? state.configuredName : undefined;
            resourceInputs["customCategory"] = state ? state.customCategory : undefined;
            resourceInputs["customIpRangesCount"] = state ? state.customIpRangesCount : undefined;
            resourceInputs["customUrlsCount"] = state ? state.customUrlsCount : undefined;
            resourceInputs["dbCategorizedUrls"] = state ? state.dbCategorizedUrls : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["editable"] = state ? state.editable : undefined;
            resourceInputs["ipRanges"] = state ? state.ipRanges : undefined;
            resourceInputs["ipRangesRetainingParentCategories"] = state ? state.ipRangesRetainingParentCategories : undefined;
            resourceInputs["ipRangesRetainingParentCategoryCount"] = state ? state.ipRangesRetainingParentCategoryCount : undefined;
            resourceInputs["keywords"] = state ? state.keywords : undefined;
            resourceInputs["keywordsRetainingParentCategories"] = state ? state.keywordsRetainingParentCategories : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["superCategory"] = state ? state.superCategory : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["urlKeywordCounts"] = state ? state.urlKeywordCounts : undefined;
            resourceInputs["urls"] = state ? state.urls : undefined;
            resourceInputs["urlsRetainingParentCategoryCount"] = state ? state.urlsRetainingParentCategoryCount : undefined;
        } else {
            const args = argsOrState as URLCategoriesArgs | undefined;
            resourceInputs["configuredName"] = args ? args.configuredName : undefined;
            resourceInputs["customCategory"] = args ? args.customCategory : undefined;
            resourceInputs["customIpRangesCount"] = args ? args.customIpRangesCount : undefined;
            resourceInputs["customUrlsCount"] = args ? args.customUrlsCount : undefined;
            resourceInputs["dbCategorizedUrls"] = args ? args.dbCategorizedUrls : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["editable"] = args ? args.editable : undefined;
            resourceInputs["ipRanges"] = args ? args.ipRanges : undefined;
            resourceInputs["ipRangesRetainingParentCategories"] = args ? args.ipRangesRetainingParentCategories : undefined;
            resourceInputs["ipRangesRetainingParentCategoryCount"] = args ? args.ipRangesRetainingParentCategoryCount : undefined;
            resourceInputs["keywords"] = args ? args.keywords : undefined;
            resourceInputs["keywordsRetainingParentCategories"] = args ? args.keywordsRetainingParentCategories : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["superCategory"] = args ? args.superCategory : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["urlKeywordCounts"] = args ? args.urlKeywordCounts : undefined;
            resourceInputs["urls"] = args ? args.urls : undefined;
            resourceInputs["urlsRetainingParentCategoryCount"] = args ? args.urlsRetainingParentCategoryCount : undefined;
            resourceInputs["categoryId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(URLCategories.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering URLCategories resources.
 */
export interface URLCategoriesState {
    categoryId?: pulumi.Input<string>;
    /**
     * Name of the URL category. This is only required for custom URL categories.
     */
    configuredName?: pulumi.Input<string>;
    customCategory?: pulumi.Input<boolean>;
    customIpRangesCount?: pulumi.Input<number>;
    customUrlsCount?: pulumi.Input<number>;
    dbCategorizedUrls?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    editable?: pulumi.Input<boolean>;
    ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
    ipRangesRetainingParentCategories?: pulumi.Input<pulumi.Input<string>[]>;
    ipRangesRetainingParentCategoryCount?: pulumi.Input<number>;
    keywords?: pulumi.Input<pulumi.Input<string>[]>;
    keywordsRetainingParentCategories?: pulumi.Input<pulumi.Input<string>[]>;
    scopes?: pulumi.Input<pulumi.Input<inputs.URLCategoriesScope>[]>;
    /**
     * Super Category of the URL category. This field is required when creating custom URL categories.
     */
    superCategory?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    urlKeywordCounts?: pulumi.Input<inputs.URLCategoriesUrlKeywordCounts>;
    urls?: pulumi.Input<pulumi.Input<string>[]>;
    urlsRetainingParentCategoryCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a URLCategories resource.
 */
export interface URLCategoriesArgs {
    /**
     * Name of the URL category. This is only required for custom URL categories.
     */
    configuredName?: pulumi.Input<string>;
    customCategory?: pulumi.Input<boolean>;
    customIpRangesCount?: pulumi.Input<number>;
    customUrlsCount?: pulumi.Input<number>;
    dbCategorizedUrls?: pulumi.Input<pulumi.Input<string>[]>;
    description?: pulumi.Input<string>;
    editable?: pulumi.Input<boolean>;
    ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
    ipRangesRetainingParentCategories?: pulumi.Input<pulumi.Input<string>[]>;
    ipRangesRetainingParentCategoryCount?: pulumi.Input<number>;
    keywords?: pulumi.Input<pulumi.Input<string>[]>;
    keywordsRetainingParentCategories?: pulumi.Input<pulumi.Input<string>[]>;
    scopes?: pulumi.Input<pulumi.Input<inputs.URLCategoriesScope>[]>;
    /**
     * Super Category of the URL category. This field is required when creating custom URL categories.
     */
    superCategory?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
    urlKeywordCounts?: pulumi.Input<inputs.URLCategoriesUrlKeywordCounts>;
    urls?: pulumi.Input<pulumi.Input<string>[]>;
    urlsRetainingParentCategoryCount?: pulumi.Input<number>;
}
