// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zia/about-file-type-control)
 * * [API documentation](https://help.zscaler.com/zia/file-type-control-policy#/fileTypeRules-post)
 *
 * The **zia_file_type_control_rules** resource allows the creation and management of ZIA file type control rules in the Zscaler Internet Access.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zia_file_type_control_rules** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/fileTypeControlRules:FileTypeControlRules example <rule_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zia:index/fileTypeControlRules:FileTypeControlRules example <rule_name>
 * ```
 */
export class FileTypeControlRules extends pulumi.CustomResource {
    /**
     * Get an existing FileTypeControlRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FileTypeControlRulesState, opts?: pulumi.CustomResourceOptions): FileTypeControlRules {
        return new FileTypeControlRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/fileTypeControlRules:FileTypeControlRules';

    /**
     * Returns true if the given object is an instance of FileTypeControlRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FileTypeControlRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileTypeControlRules.__pulumiType;
    }

    /**
     * Flag to check whether a file has active content or not
     */
    public readonly activeContent!: pulumi.Output<boolean>;
    /**
     * A Boolean value that indicates whether packet capture (PCAP) is enabled or not
     */
    public readonly capturePcap!: pulumi.Output<boolean>;
    /**
     * The list of cloud applications to which the File Type Control rule must be applied.
     */
    public readonly cloudApplications!: pulumi.Output<string[]>;
    /**
     * The Name-ID pairs of departments to which the File Type Control rule must be applied.
     */
    public readonly departments!: pulumi.Output<outputs.FileTypeControlRulesDepartments | undefined>;
    /**
     * The description of the File Type Control rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    public readonly deviceGroups!: pulumi.Output<outputs.FileTypeControlRulesDeviceGroups | undefined>;
    /**
     * List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
     * using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
     * Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
     */
    public readonly deviceTrustLevels!: pulumi.Output<string[] | undefined>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    public readonly devices!: pulumi.Output<outputs.FileTypeControlRulesDevices | undefined>;
    /**
     * File type categories for which the policy is applied. If not set, the rule is applied across all file types.
     */
    public readonly fileTypes!: pulumi.Output<string[] | undefined>;
    /**
     * Action taken when traffic matches policy. This field is not applicable to the Lite API.
     */
    public readonly filteringAction!: pulumi.Output<string>;
    /**
     * The Name-ID pairs of groups to which the File Type Control rule must be applied.
     */
    public readonly groups!: pulumi.Output<outputs.FileTypeControlRulesGroups | undefined>;
    /**
     * list of Labels that are applicable to the rule.
     */
    public readonly labels!: pulumi.Output<outputs.FileTypeControlRulesLabels | undefined>;
    /**
     * Name-ID pairs of locations groups for which rule must be applied.
     */
    public readonly locationGroups!: pulumi.Output<outputs.FileTypeControlRulesLocationGroups | undefined>;
    /**
     * Name-ID pairs of locations for the which policy must be applied. If not set, policy is applied for all locations.
     */
    public readonly locations!: pulumi.Output<outputs.FileTypeControlRulesLocations | undefined>;
    /**
     * Maximum file size (in KB) used for evaluation of the FTP rule
     */
    public readonly maxSize!: pulumi.Output<number>;
    /**
     * Minimum file size (in KB) used for evaluation of the FTP rule
     */
    public readonly minSize!: pulumi.Output<number>;
    /**
     * The File Type Control policy rule name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * File operation performed. This field is not applicable to the Lite API.
     */
    public readonly operation!: pulumi.Output<string>;
    /**
     * The rule order of execution for the File Type Control rule with respect to other rules.
     */
    public readonly order!: pulumi.Output<number>;
    /**
     * Protocol for the given rule. This field is not applicable to the Lite API.
     */
    public readonly protocols!: pulumi.Output<string[]>;
    /**
     * Admin rank of the admin who creates this rule
     */
    public readonly rank!: pulumi.Output<number>;
    public /*out*/ readonly ruleId!: pulumi.Output<number>;
    /**
     * Enables or disables the File Type Control rule.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * list of time interval during which rule must be enforced.
     */
    public readonly timeWindows!: pulumi.Output<outputs.FileTypeControlRulesTimeWindows | undefined>;
    /**
     * Flag to check whether a file has active content or not
     */
    public readonly unscannable!: pulumi.Output<boolean>;
    /**
     * List of URL categories for which rule must be applied
     */
    public readonly urlCategories!: pulumi.Output<string[] | undefined>;
    /**
     * The Name-ID pairs of users to which the File Type Control rule must be applied.
     */
    public readonly users!: pulumi.Output<outputs.FileTypeControlRulesUsers | undefined>;
    /**
     * List of Source IP Anchoring-enabled ZPA Application Segments for which this rule is applicable
     */
    public readonly zpaAppSegments!: pulumi.Output<outputs.FileTypeControlRulesZpaAppSegment[]>;

    /**
     * Create a FileTypeControlRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FileTypeControlRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FileTypeControlRulesArgs | FileTypeControlRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FileTypeControlRulesState | undefined;
            resourceInputs["activeContent"] = state ? state.activeContent : undefined;
            resourceInputs["capturePcap"] = state ? state.capturePcap : undefined;
            resourceInputs["cloudApplications"] = state ? state.cloudApplications : undefined;
            resourceInputs["departments"] = state ? state.departments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceGroups"] = state ? state.deviceGroups : undefined;
            resourceInputs["deviceTrustLevels"] = state ? state.deviceTrustLevels : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["fileTypes"] = state ? state.fileTypes : undefined;
            resourceInputs["filteringAction"] = state ? state.filteringAction : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["locationGroups"] = state ? state.locationGroups : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["operation"] = state ? state.operation : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["rank"] = state ? state.rank : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeWindows"] = state ? state.timeWindows : undefined;
            resourceInputs["unscannable"] = state ? state.unscannable : undefined;
            resourceInputs["urlCategories"] = state ? state.urlCategories : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["zpaAppSegments"] = state ? state.zpaAppSegments : undefined;
        } else {
            const args = argsOrState as FileTypeControlRulesArgs | undefined;
            if ((!args || args.order === undefined) && !opts.urn) {
                throw new Error("Missing required property 'order'");
            }
            if ((!args || args.protocols === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocols'");
            }
            resourceInputs["activeContent"] = args ? args.activeContent : undefined;
            resourceInputs["capturePcap"] = args ? args.capturePcap : undefined;
            resourceInputs["cloudApplications"] = args ? args.cloudApplications : undefined;
            resourceInputs["departments"] = args ? args.departments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceGroups"] = args ? args.deviceGroups : undefined;
            resourceInputs["deviceTrustLevels"] = args ? args.deviceTrustLevels : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["fileTypes"] = args ? args.fileTypes : undefined;
            resourceInputs["filteringAction"] = args ? args.filteringAction : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["locationGroups"] = args ? args.locationGroups : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["operation"] = args ? args.operation : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["rank"] = args ? args.rank : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timeWindows"] = args ? args.timeWindows : undefined;
            resourceInputs["unscannable"] = args ? args.unscannable : undefined;
            resourceInputs["urlCategories"] = args ? args.urlCategories : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["zpaAppSegments"] = args ? args.zpaAppSegments : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FileTypeControlRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FileTypeControlRules resources.
 */
export interface FileTypeControlRulesState {
    /**
     * Flag to check whether a file has active content or not
     */
    activeContent?: pulumi.Input<boolean>;
    /**
     * A Boolean value that indicates whether packet capture (PCAP) is enabled or not
     */
    capturePcap?: pulumi.Input<boolean>;
    /**
     * The list of cloud applications to which the File Type Control rule must be applied.
     */
    cloudApplications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name-ID pairs of departments to which the File Type Control rule must be applied.
     */
    departments?: pulumi.Input<inputs.FileTypeControlRulesDepartments>;
    /**
     * The description of the File Type Control rule.
     */
    description?: pulumi.Input<string>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    deviceGroups?: pulumi.Input<inputs.FileTypeControlRulesDeviceGroups>;
    /**
     * List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
     * using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
     * Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
     */
    deviceTrustLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    devices?: pulumi.Input<inputs.FileTypeControlRulesDevices>;
    /**
     * File type categories for which the policy is applied. If not set, the rule is applied across all file types.
     */
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Action taken when traffic matches policy. This field is not applicable to the Lite API.
     */
    filteringAction?: pulumi.Input<string>;
    /**
     * The Name-ID pairs of groups to which the File Type Control rule must be applied.
     */
    groups?: pulumi.Input<inputs.FileTypeControlRulesGroups>;
    /**
     * list of Labels that are applicable to the rule.
     */
    labels?: pulumi.Input<inputs.FileTypeControlRulesLabels>;
    /**
     * Name-ID pairs of locations groups for which rule must be applied.
     */
    locationGroups?: pulumi.Input<inputs.FileTypeControlRulesLocationGroups>;
    /**
     * Name-ID pairs of locations for the which policy must be applied. If not set, policy is applied for all locations.
     */
    locations?: pulumi.Input<inputs.FileTypeControlRulesLocations>;
    /**
     * Maximum file size (in KB) used for evaluation of the FTP rule
     */
    maxSize?: pulumi.Input<number>;
    /**
     * Minimum file size (in KB) used for evaluation of the FTP rule
     */
    minSize?: pulumi.Input<number>;
    /**
     * The File Type Control policy rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * File operation performed. This field is not applicable to the Lite API.
     */
    operation?: pulumi.Input<string>;
    /**
     * The rule order of execution for the File Type Control rule with respect to other rules.
     */
    order?: pulumi.Input<number>;
    /**
     * Protocol for the given rule. This field is not applicable to the Lite API.
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Admin rank of the admin who creates this rule
     */
    rank?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    /**
     * Enables or disables the File Type Control rule.
     */
    state?: pulumi.Input<string>;
    /**
     * list of time interval during which rule must be enforced.
     */
    timeWindows?: pulumi.Input<inputs.FileTypeControlRulesTimeWindows>;
    /**
     * Flag to check whether a file has active content or not
     */
    unscannable?: pulumi.Input<boolean>;
    /**
     * List of URL categories for which rule must be applied
     */
    urlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name-ID pairs of users to which the File Type Control rule must be applied.
     */
    users?: pulumi.Input<inputs.FileTypeControlRulesUsers>;
    /**
     * List of Source IP Anchoring-enabled ZPA Application Segments for which this rule is applicable
     */
    zpaAppSegments?: pulumi.Input<pulumi.Input<inputs.FileTypeControlRulesZpaAppSegment>[]>;
}

/**
 * The set of arguments for constructing a FileTypeControlRules resource.
 */
export interface FileTypeControlRulesArgs {
    /**
     * Flag to check whether a file has active content or not
     */
    activeContent?: pulumi.Input<boolean>;
    /**
     * A Boolean value that indicates whether packet capture (PCAP) is enabled or not
     */
    capturePcap?: pulumi.Input<boolean>;
    /**
     * The list of cloud applications to which the File Type Control rule must be applied.
     */
    cloudApplications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name-ID pairs of departments to which the File Type Control rule must be applied.
     */
    departments?: pulumi.Input<inputs.FileTypeControlRulesDepartments>;
    /**
     * The description of the File Type Control rule.
     */
    description?: pulumi.Input<string>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    deviceGroups?: pulumi.Input<inputs.FileTypeControlRulesDeviceGroups>;
    /**
     * List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
     * using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
     * Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
     */
    deviceTrustLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    devices?: pulumi.Input<inputs.FileTypeControlRulesDevices>;
    /**
     * File type categories for which the policy is applied. If not set, the rule is applied across all file types.
     */
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Action taken when traffic matches policy. This field is not applicable to the Lite API.
     */
    filteringAction?: pulumi.Input<string>;
    /**
     * The Name-ID pairs of groups to which the File Type Control rule must be applied.
     */
    groups?: pulumi.Input<inputs.FileTypeControlRulesGroups>;
    /**
     * list of Labels that are applicable to the rule.
     */
    labels?: pulumi.Input<inputs.FileTypeControlRulesLabels>;
    /**
     * Name-ID pairs of locations groups for which rule must be applied.
     */
    locationGroups?: pulumi.Input<inputs.FileTypeControlRulesLocationGroups>;
    /**
     * Name-ID pairs of locations for the which policy must be applied. If not set, policy is applied for all locations.
     */
    locations?: pulumi.Input<inputs.FileTypeControlRulesLocations>;
    /**
     * Maximum file size (in KB) used for evaluation of the FTP rule
     */
    maxSize?: pulumi.Input<number>;
    /**
     * Minimum file size (in KB) used for evaluation of the FTP rule
     */
    minSize?: pulumi.Input<number>;
    /**
     * The File Type Control policy rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * File operation performed. This field is not applicable to the Lite API.
     */
    operation?: pulumi.Input<string>;
    /**
     * The rule order of execution for the File Type Control rule with respect to other rules.
     */
    order: pulumi.Input<number>;
    /**
     * Protocol for the given rule. This field is not applicable to the Lite API.
     */
    protocols: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Admin rank of the admin who creates this rule
     */
    rank?: pulumi.Input<number>;
    /**
     * Enables or disables the File Type Control rule.
     */
    state?: pulumi.Input<string>;
    /**
     * list of time interval during which rule must be enforced.
     */
    timeWindows?: pulumi.Input<inputs.FileTypeControlRulesTimeWindows>;
    /**
     * Flag to check whether a file has active content or not
     */
    unscannable?: pulumi.Input<boolean>;
    /**
     * List of URL categories for which rule must be applied
     */
    urlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name-ID pairs of users to which the File Type Control rule must be applied.
     */
    users?: pulumi.Input<inputs.FileTypeControlRulesUsers>;
    /**
     * List of Source IP Anchoring-enabled ZPA Application Segments for which this rule is applicable
     */
    zpaAppSegments?: pulumi.Input<pulumi.Input<inputs.FileTypeControlRulesZpaAppSegment>[]>;
}
