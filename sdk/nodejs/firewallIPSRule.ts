// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirewallIPSRule extends pulumi.CustomResource {
    /**
     * Get an existing FirewallIPSRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallIPSRuleState, opts?: pulumi.CustomResourceOptions): FirewallIPSRule {
        return new FirewallIPSRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/firewallIPSRule:FirewallIPSRule';

    /**
     * Returns true if the given object is an instance of FirewallIPSRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallIPSRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallIPSRule.__pulumiType;
    }

    /**
     * The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or
     * blocking the traffic or bypassing the rule.
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * A Boolean value that indicates whether packet capture (PCAP) is enabled or not
     */
    public readonly capturePcap!: pulumi.Output<boolean>;
    /**
     * If set to true, the default rule is applied
     */
    public readonly defaultRule!: pulumi.Output<boolean | undefined>;
    /**
     * list of departments for which rule must be applied
     */
    public readonly departments!: pulumi.Output<outputs.FirewallIPSRuleDepartments | undefined>;
    /**
     * Additional information about the rule
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
     */
    public readonly destAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    public readonly destCountries!: pulumi.Output<string[]>;
    public readonly destIpCategories!: pulumi.Output<string[] | undefined>;
    /**
     * list of destination ip groups
     */
    public readonly destIpGroups!: pulumi.Output<outputs.FirewallIPSRuleDestIpGroups | undefined>;
    /**
     * list of destination ip groups
     */
    public readonly destIpv6Groups!: pulumi.Output<outputs.FirewallIPSRuleDestIpv6Groups | undefined>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    public readonly deviceGroups!: pulumi.Output<outputs.FirewallIPSRuleDeviceGroups | undefined>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    public readonly devices!: pulumi.Output<outputs.FirewallIPSRuleDevices | undefined>;
    /**
     * A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled,
     * whereas a false value indicates that aggregate logging is enabled.
     */
    public readonly enableFullLogging!: pulumi.Output<boolean | undefined>;
    /**
     * list of groups for which rule must be applied
     */
    public readonly groups!: pulumi.Output<outputs.FirewallIPSRuleGroups | undefined>;
    /**
     * list of Labels that are applicable to the rule.
     */
    public readonly labels!: pulumi.Output<outputs.FirewallIPSRuleLabels | undefined>;
    /**
     * list of locations groups
     */
    public readonly locationGroups!: pulumi.Output<outputs.FirewallIPSRuleLocationGroups | undefined>;
    /**
     * list of locations for which rule must be applied
     */
    public readonly locations!: pulumi.Output<outputs.FirewallIPSRuleLocations | undefined>;
    /**
     * The name of the IPS Control rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * list of nw service groups
     */
    public readonly nwServiceGroups!: pulumi.Output<outputs.FirewallIPSRuleNwServiceGroups | undefined>;
    /**
     * list of nw services
     */
    public readonly nwServices!: pulumi.Output<outputs.FirewallIPSRuleNwServices | undefined>;
    /**
     * Rule order number. If omitted, the rule will be added to the end of the rule set.
     */
    public readonly order!: pulumi.Output<number>;
    /**
     * If set to true, a predefined rule is applied
     */
    public readonly predefined!: pulumi.Output<boolean | undefined>;
    /**
     * The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
     * be specified for the rule.
     */
    public readonly rank!: pulumi.Output<number | undefined>;
    /**
     * URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
     * to a specific URL category.
     */
    public readonly resCategories!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly ruleId!: pulumi.Output<number>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    public readonly sourceCountries!: pulumi.Output<string[]>;
    /**
     * list of source ip groups
     */
    public readonly srcIpGroups!: pulumi.Output<outputs.FirewallIPSRuleSrcIpGroups | undefined>;
    /**
     * User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address.
     */
    public readonly srcIps!: pulumi.Output<string[] | undefined>;
    /**
     * list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
     * specific source IPv6 address group.
     */
    public readonly srcIpv6Groups!: pulumi.Output<outputs.FirewallIPSRuleSrcIpv6Groups | undefined>;
    /**
     * The state of the rule indicating whether it is enabled or disabled
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * list of Advanced threat categories to which the rule applies
     */
    public readonly threatCategories!: pulumi.Output<outputs.FirewallIPSRuleThreatCategories | undefined>;
    /**
     * The time interval in which the Firewall Filtering policy rule applies
     */
    public readonly timeWindows!: pulumi.Output<outputs.FirewallIPSRuleTimeWindows | undefined>;
    /**
     * list of users for which rule must be applied
     */
    public readonly users!: pulumi.Output<outputs.FirewallIPSRuleUsers | undefined>;
    /**
     * The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
     * Gateway forwarding method.
     */
    public readonly zpaAppSegments!: pulumi.Output<outputs.FirewallIPSRuleZpaAppSegment[]>;

    /**
     * Create a FirewallIPSRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallIPSRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallIPSRuleArgs | FirewallIPSRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallIPSRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["capturePcap"] = state ? state.capturePcap : undefined;
            resourceInputs["defaultRule"] = state ? state.defaultRule : undefined;
            resourceInputs["departments"] = state ? state.departments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destAddresses"] = state ? state.destAddresses : undefined;
            resourceInputs["destCountries"] = state ? state.destCountries : undefined;
            resourceInputs["destIpCategories"] = state ? state.destIpCategories : undefined;
            resourceInputs["destIpGroups"] = state ? state.destIpGroups : undefined;
            resourceInputs["destIpv6Groups"] = state ? state.destIpv6Groups : undefined;
            resourceInputs["deviceGroups"] = state ? state.deviceGroups : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["enableFullLogging"] = state ? state.enableFullLogging : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["locationGroups"] = state ? state.locationGroups : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nwServiceGroups"] = state ? state.nwServiceGroups : undefined;
            resourceInputs["nwServices"] = state ? state.nwServices : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["predefined"] = state ? state.predefined : undefined;
            resourceInputs["rank"] = state ? state.rank : undefined;
            resourceInputs["resCategories"] = state ? state.resCategories : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["sourceCountries"] = state ? state.sourceCountries : undefined;
            resourceInputs["srcIpGroups"] = state ? state.srcIpGroups : undefined;
            resourceInputs["srcIps"] = state ? state.srcIps : undefined;
            resourceInputs["srcIpv6Groups"] = state ? state.srcIpv6Groups : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["threatCategories"] = state ? state.threatCategories : undefined;
            resourceInputs["timeWindows"] = state ? state.timeWindows : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["zpaAppSegments"] = state ? state.zpaAppSegments : undefined;
        } else {
            const args = argsOrState as FirewallIPSRuleArgs | undefined;
            if ((!args || args.order === undefined) && !opts.urn) {
                throw new Error("Missing required property 'order'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["capturePcap"] = args ? args.capturePcap : undefined;
            resourceInputs["defaultRule"] = args ? args.defaultRule : undefined;
            resourceInputs["departments"] = args ? args.departments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destAddresses"] = args ? args.destAddresses : undefined;
            resourceInputs["destCountries"] = args ? args.destCountries : undefined;
            resourceInputs["destIpCategories"] = args ? args.destIpCategories : undefined;
            resourceInputs["destIpGroups"] = args ? args.destIpGroups : undefined;
            resourceInputs["destIpv6Groups"] = args ? args.destIpv6Groups : undefined;
            resourceInputs["deviceGroups"] = args ? args.deviceGroups : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["enableFullLogging"] = args ? args.enableFullLogging : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["locationGroups"] = args ? args.locationGroups : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nwServiceGroups"] = args ? args.nwServiceGroups : undefined;
            resourceInputs["nwServices"] = args ? args.nwServices : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["predefined"] = args ? args.predefined : undefined;
            resourceInputs["rank"] = args ? args.rank : undefined;
            resourceInputs["resCategories"] = args ? args.resCategories : undefined;
            resourceInputs["sourceCountries"] = args ? args.sourceCountries : undefined;
            resourceInputs["srcIpGroups"] = args ? args.srcIpGroups : undefined;
            resourceInputs["srcIps"] = args ? args.srcIps : undefined;
            resourceInputs["srcIpv6Groups"] = args ? args.srcIpv6Groups : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["threatCategories"] = args ? args.threatCategories : undefined;
            resourceInputs["timeWindows"] = args ? args.timeWindows : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["zpaAppSegments"] = args ? args.zpaAppSegments : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallIPSRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallIPSRule resources.
 */
export interface FirewallIPSRuleState {
    /**
     * The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or
     * blocking the traffic or bypassing the rule.
     */
    action?: pulumi.Input<string>;
    /**
     * A Boolean value that indicates whether packet capture (PCAP) is enabled or not
     */
    capturePcap?: pulumi.Input<boolean>;
    /**
     * If set to true, the default rule is applied
     */
    defaultRule?: pulumi.Input<boolean>;
    /**
     * list of departments for which rule must be applied
     */
    departments?: pulumi.Input<inputs.FirewallIPSRuleDepartments>;
    /**
     * Additional information about the rule
     */
    description?: pulumi.Input<string>;
    /**
     * Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
     */
    destAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    destCountries?: pulumi.Input<pulumi.Input<string>[]>;
    destIpCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of destination ip groups
     */
    destIpGroups?: pulumi.Input<inputs.FirewallIPSRuleDestIpGroups>;
    /**
     * list of destination ip groups
     */
    destIpv6Groups?: pulumi.Input<inputs.FirewallIPSRuleDestIpv6Groups>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    deviceGroups?: pulumi.Input<inputs.FirewallIPSRuleDeviceGroups>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    devices?: pulumi.Input<inputs.FirewallIPSRuleDevices>;
    /**
     * A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled,
     * whereas a false value indicates that aggregate logging is enabled.
     */
    enableFullLogging?: pulumi.Input<boolean>;
    /**
     * list of groups for which rule must be applied
     */
    groups?: pulumi.Input<inputs.FirewallIPSRuleGroups>;
    /**
     * list of Labels that are applicable to the rule.
     */
    labels?: pulumi.Input<inputs.FirewallIPSRuleLabels>;
    /**
     * list of locations groups
     */
    locationGroups?: pulumi.Input<inputs.FirewallIPSRuleLocationGroups>;
    /**
     * list of locations for which rule must be applied
     */
    locations?: pulumi.Input<inputs.FirewallIPSRuleLocations>;
    /**
     * The name of the IPS Control rule
     */
    name?: pulumi.Input<string>;
    /**
     * list of nw service groups
     */
    nwServiceGroups?: pulumi.Input<inputs.FirewallIPSRuleNwServiceGroups>;
    /**
     * list of nw services
     */
    nwServices?: pulumi.Input<inputs.FirewallIPSRuleNwServices>;
    /**
     * Rule order number. If omitted, the rule will be added to the end of the rule set.
     */
    order?: pulumi.Input<number>;
    /**
     * If set to true, a predefined rule is applied
     */
    predefined?: pulumi.Input<boolean>;
    /**
     * The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
     * be specified for the rule.
     */
    rank?: pulumi.Input<number>;
    /**
     * URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
     * to a specific URL category.
     */
    resCategories?: pulumi.Input<pulumi.Input<string>[]>;
    ruleId?: pulumi.Input<number>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    sourceCountries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of source ip groups
     */
    srcIpGroups?: pulumi.Input<inputs.FirewallIPSRuleSrcIpGroups>;
    /**
     * User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address.
     */
    srcIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
     * specific source IPv6 address group.
     */
    srcIpv6Groups?: pulumi.Input<inputs.FirewallIPSRuleSrcIpv6Groups>;
    /**
     * The state of the rule indicating whether it is enabled or disabled
     */
    state?: pulumi.Input<string>;
    /**
     * list of Advanced threat categories to which the rule applies
     */
    threatCategories?: pulumi.Input<inputs.FirewallIPSRuleThreatCategories>;
    /**
     * The time interval in which the Firewall Filtering policy rule applies
     */
    timeWindows?: pulumi.Input<inputs.FirewallIPSRuleTimeWindows>;
    /**
     * list of users for which rule must be applied
     */
    users?: pulumi.Input<inputs.FirewallIPSRuleUsers>;
    /**
     * The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
     * Gateway forwarding method.
     */
    zpaAppSegments?: pulumi.Input<pulumi.Input<inputs.FirewallIPSRuleZpaAppSegment>[]>;
}

/**
 * The set of arguments for constructing a FirewallIPSRule resource.
 */
export interface FirewallIPSRuleArgs {
    /**
     * The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or
     * blocking the traffic or bypassing the rule.
     */
    action?: pulumi.Input<string>;
    /**
     * A Boolean value that indicates whether packet capture (PCAP) is enabled or not
     */
    capturePcap?: pulumi.Input<boolean>;
    /**
     * If set to true, the default rule is applied
     */
    defaultRule?: pulumi.Input<boolean>;
    /**
     * list of departments for which rule must be applied
     */
    departments?: pulumi.Input<inputs.FirewallIPSRuleDepartments>;
    /**
     * Additional information about the rule
     */
    description?: pulumi.Input<string>;
    /**
     * Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
     */
    destAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    destCountries?: pulumi.Input<pulumi.Input<string>[]>;
    destIpCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of destination ip groups
     */
    destIpGroups?: pulumi.Input<inputs.FirewallIPSRuleDestIpGroups>;
    /**
     * list of destination ip groups
     */
    destIpv6Groups?: pulumi.Input<inputs.FirewallIPSRuleDestIpv6Groups>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    deviceGroups?: pulumi.Input<inputs.FirewallIPSRuleDeviceGroups>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    devices?: pulumi.Input<inputs.FirewallIPSRuleDevices>;
    /**
     * A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled,
     * whereas a false value indicates that aggregate logging is enabled.
     */
    enableFullLogging?: pulumi.Input<boolean>;
    /**
     * list of groups for which rule must be applied
     */
    groups?: pulumi.Input<inputs.FirewallIPSRuleGroups>;
    /**
     * list of Labels that are applicable to the rule.
     */
    labels?: pulumi.Input<inputs.FirewallIPSRuleLabels>;
    /**
     * list of locations groups
     */
    locationGroups?: pulumi.Input<inputs.FirewallIPSRuleLocationGroups>;
    /**
     * list of locations for which rule must be applied
     */
    locations?: pulumi.Input<inputs.FirewallIPSRuleLocations>;
    /**
     * The name of the IPS Control rule
     */
    name?: pulumi.Input<string>;
    /**
     * list of nw service groups
     */
    nwServiceGroups?: pulumi.Input<inputs.FirewallIPSRuleNwServiceGroups>;
    /**
     * list of nw services
     */
    nwServices?: pulumi.Input<inputs.FirewallIPSRuleNwServices>;
    /**
     * Rule order number. If omitted, the rule will be added to the end of the rule set.
     */
    order: pulumi.Input<number>;
    /**
     * If set to true, a predefined rule is applied
     */
    predefined?: pulumi.Input<boolean>;
    /**
     * The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
     * be specified for the rule.
     */
    rank?: pulumi.Input<number>;
    /**
     * URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
     * to a specific URL category.
     */
    resCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    sourceCountries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of source ip groups
     */
    srcIpGroups?: pulumi.Input<inputs.FirewallIPSRuleSrcIpGroups>;
    /**
     * User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address.
     */
    srcIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
     * specific source IPv6 address group.
     */
    srcIpv6Groups?: pulumi.Input<inputs.FirewallIPSRuleSrcIpv6Groups>;
    /**
     * The state of the rule indicating whether it is enabled or disabled
     */
    state?: pulumi.Input<string>;
    /**
     * list of Advanced threat categories to which the rule applies
     */
    threatCategories?: pulumi.Input<inputs.FirewallIPSRuleThreatCategories>;
    /**
     * The time interval in which the Firewall Filtering policy rule applies
     */
    timeWindows?: pulumi.Input<inputs.FirewallIPSRuleTimeWindows>;
    /**
     * list of users for which rule must be applied
     */
    users?: pulumi.Input<inputs.FirewallIPSRuleUsers>;
    /**
     * The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
     * Gateway forwarding method.
     */
    zpaAppSegments?: pulumi.Input<pulumi.Input<inputs.FirewallIPSRuleZpaAppSegment>[]>;
}
