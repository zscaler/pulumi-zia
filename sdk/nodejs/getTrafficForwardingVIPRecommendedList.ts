// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Use the **zia_traffic_forwarding_gre_vip_recommended_list** data source to get information about a list of recommended GRE tunnel virtual IP addresses (VIPs), based on source IP address or latitude/longitude coordinates.
 *
 * ## Example Usage
 *
 * ### With Overridden Geo Coordinates
 */
export function getTrafficForwardingVIPRecommendedList(args?: GetTrafficForwardingVIPRecommendedListArgs, opts?: pulumi.InvokeOptions): Promise<GetTrafficForwardingVIPRecommendedListResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getTrafficForwardingVIPRecommendedList:getTrafficForwardingVIPRecommendedList", {
        "includeCurrentVips": args.includeCurrentVips,
        "includePrivateServiceEdge": args.includePrivateServiceEdge,
        "latitude": args.latitude,
        "longitude": args.longitude,
        "requiredCount": args.requiredCount,
        "routableIp": args.routableIp,
        "sourceIp": args.sourceIp,
        "subcloud": args.subcloud,
        "withinCountryOnly": args.withinCountryOnly,
    }, opts);
}

/**
 * A collection of arguments for invoking getTrafficForwardingVIPRecommendedList.
 */
export interface GetTrafficForwardingVIPRecommendedListArgs {
    /**
     * (Boolean) Include currently assigned VIPs.
     */
    includeCurrentVips?: boolean;
    /**
     * (Boolean) Include ZIA Private Service Edge VIPs.
     */
    includePrivateServiceEdge?: boolean;
    /**
     * (Number) The latitude coordinate of the GRE tunnel source.
     */
    latitude?: number;
    /**
     * (Number) The longitude coordinate of the GRE tunnel source.
     */
    longitude?: number;
    /**
     * Number of IP address to be exported.
     */
    requiredCount?: number;
    /**
     * (Boolean) The routable IP address.
     */
    routableIp?: boolean;
    /**
     * Filter based on an IP address range.
     */
    sourceIp?: string;
    /**
     * (String) The longitude coordinate of the GRE tunnel source.
     */
    subcloud?: string;
    /**
     * (Boolean) Search within country only.
     */
    withinCountryOnly?: boolean;
}

/**
 * A collection of values returned by getTrafficForwardingVIPRecommendedList.
 */
export interface GetTrafficForwardingVIPRecommendedListResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * (Boolean) Include currently assigned VIPs.
     */
    readonly includeCurrentVips?: boolean;
    /**
     * (Boolean) Include ZIA Private Service Edge VIPs.
     */
    readonly includePrivateServiceEdge?: boolean;
    /**
     * (Number) The latitude coordinate of the GRE tunnel source.
     */
    readonly latitude?: number;
    /**
     * The list of all recommended returned Virtual IP Addresses (VIPs)
     */
    readonly lists: outputs.GetTrafficForwardingVIPRecommendedListList[];
    /**
     * (Number) The longitude coordinate of the GRE tunnel source.
     */
    readonly longitude?: number;
    readonly requiredCount?: number;
    /**
     * (Boolean) The routable IP address.
     */
    readonly routableIp?: boolean;
    /**
     * (String) The public source IP address.
     */
    readonly sourceIp?: string;
    /**
     * (String) The longitude coordinate of the GRE tunnel source.
     */
    readonly subcloud?: string;
    /**
     * (Boolean) Search within country only.
     */
    readonly withinCountryOnly?: boolean;
}
/**
 * Use the **zia_traffic_forwarding_gre_vip_recommended_list** data source to get information about a list of recommended GRE tunnel virtual IP addresses (VIPs), based on source IP address or latitude/longitude coordinates.
 *
 * ## Example Usage
 *
 * ### With Overridden Geo Coordinates
 */
export function getTrafficForwardingVIPRecommendedListOutput(args?: GetTrafficForwardingVIPRecommendedListOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetTrafficForwardingVIPRecommendedListResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("zia:index/getTrafficForwardingVIPRecommendedList:getTrafficForwardingVIPRecommendedList", {
        "includeCurrentVips": args.includeCurrentVips,
        "includePrivateServiceEdge": args.includePrivateServiceEdge,
        "latitude": args.latitude,
        "longitude": args.longitude,
        "requiredCount": args.requiredCount,
        "routableIp": args.routableIp,
        "sourceIp": args.sourceIp,
        "subcloud": args.subcloud,
        "withinCountryOnly": args.withinCountryOnly,
    }, opts);
}

/**
 * A collection of arguments for invoking getTrafficForwardingVIPRecommendedList.
 */
export interface GetTrafficForwardingVIPRecommendedListOutputArgs {
    /**
     * (Boolean) Include currently assigned VIPs.
     */
    includeCurrentVips?: pulumi.Input<boolean>;
    /**
     * (Boolean) Include ZIA Private Service Edge VIPs.
     */
    includePrivateServiceEdge?: pulumi.Input<boolean>;
    /**
     * (Number) The latitude coordinate of the GRE tunnel source.
     */
    latitude?: pulumi.Input<number>;
    /**
     * (Number) The longitude coordinate of the GRE tunnel source.
     */
    longitude?: pulumi.Input<number>;
    /**
     * Number of IP address to be exported.
     */
    requiredCount?: pulumi.Input<number>;
    /**
     * (Boolean) The routable IP address.
     */
    routableIp?: pulumi.Input<boolean>;
    /**
     * Filter based on an IP address range.
     */
    sourceIp?: pulumi.Input<string>;
    /**
     * (String) The longitude coordinate of the GRE tunnel source.
     */
    subcloud?: pulumi.Input<string>;
    /**
     * (Boolean) Search within country only.
     */
    withinCountryOnly?: pulumi.Input<boolean>;
}
