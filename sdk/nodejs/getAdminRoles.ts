// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zia/about-role-management)
 * * [API documentation](https://help.zscaler.com/zia/admin-role-management#/adminRoles-get)
 *
 * Use the **zia_admin_roles** data source to get information about an admin role created in the Zscaler Internet Access cloud or via the API. This data source can then be associated with a ZIA administrator account.
 *
 * ## Example Usage
 */
export function getAdminRoles(args?: GetAdminRolesArgs, opts?: pulumi.InvokeOptions): Promise<GetAdminRolesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getAdminRoles:getAdminRoles", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getAdminRoles.
 */
export interface GetAdminRolesArgs {
    /**
     * The ID of the admin role to be exported.
     */
    id?: number;
    /**
     * The name of the Admin role to be exported.
     */
    name?: string;
}

/**
 * A collection of values returned by getAdminRoles.
 */
export interface GetAdminRolesResult {
    /**
     * (String)
     */
    readonly adminAcctAccess: string;
    readonly alertingAccess: string;
    /**
     * (String)
     */
    readonly analysisAccess: string;
    /**
     * (String) Dashboard access permission. Supported values are: `NONE`, `READ_ONLY`
     */
    readonly dashboardAccess: string;
    readonly deviceInfoAccess: string;
    readonly extFeaturePermissions: {[key: string]: string};
    readonly featurePermissions: {[key: string]: string};
    readonly id: number;
    /**
     * (Boolean) Indicates whether this is an auditor role.
     */
    readonly isAuditor: boolean;
    /**
     * (Boolean) Indicates whether or not this admin user is editable/deletable.
     */
    readonly isNonEditable: boolean;
    /**
     * (String) Log range limit. Returned values are: `UNRESTRICTED`, `MONTH_1`, `MONTH_2`, `MONTH_3`, `MONTH_4`, `MONTH_5`, `MONTH_6`
     */
    readonly logsLimit: string;
    readonly name?: string;
    /**
     * (List of String) List of functional areas to which this role has access. This attribute is subject to change.
     */
    readonly permissions: string[];
    /**
     * (String) Policy access permission. Returned values are: `NONE`, `READ_ONLY`,`READ_WRITE`
     */
    readonly policyAccess: string;
    /**
     * (Number) Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and which rule orders this admin can access.
     */
    readonly rank: number;
    /**
     * (String) Report access permission. Returned values are: `NONE`, `READ_ONLY`,`READ_WRITE`
     */
    readonly reportAccess: string;
    readonly reportTimeDuration: number;
    /**
     * (String) The admin role type. ()This attribute is subject to change.) Supported values are:  `ORG_ADMIN`, `EXEC_INSIGHT`, `EXEC_INSIGHT_AND_ORG_ADMIN`, `SDWAN`
     */
    readonly roleType: string;
    /**
     * (String) Username access permission. When set to NONE, the username will be obfuscated. Supported values are: `NONE|READ_ONLY`
     */
    readonly usernameAccess: string;
}
/**
 * * [Official documentation](https://help.zscaler.com/zia/about-role-management)
 * * [API documentation](https://help.zscaler.com/zia/admin-role-management#/adminRoles-get)
 *
 * Use the **zia_admin_roles** data source to get information about an admin role created in the Zscaler Internet Access cloud or via the API. This data source can then be associated with a ZIA administrator account.
 *
 * ## Example Usage
 */
export function getAdminRolesOutput(args?: GetAdminRolesOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAdminRolesResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("zia:index/getAdminRoles:getAdminRoles", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getAdminRoles.
 */
export interface GetAdminRolesOutputArgs {
    /**
     * The ID of the admin role to be exported.
     */
    id?: pulumi.Input<number>;
    /**
     * The name of the Admin role to be exported.
     */
    name?: pulumi.Input<string>;
}
