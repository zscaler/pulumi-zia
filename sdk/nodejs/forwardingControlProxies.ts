// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zia/about-third-party-proxies)
 * * [API documentation](https://help.zscaler.com/zia/forwarding-control-policy#/proxies-get)
 *
 * Use the **zia_forwarding_control_proxies** resource allows the creation and management of ZIA forwarding control Proxies for third-party proxy services integration between Zscaler Internet Access and Zscaler Private Access. This resource can then be associated with a ZIA Forwarding Control Rule.
 *
 * ## Example Usage
 *
 * ### No Certificate
 *
 * ### With Certificate
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zia_forwarding_control_proxies** can be imported by using `<PROXY_ID>` or `<PROXY_NAME>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/forwardingControlProxies:ForwardingControlProxies example <proxy_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zia:index/forwardingControlProxies:ForwardingControlProxies example <proxy_name>
 * ```
 */
export class ForwardingControlProxies extends pulumi.CustomResource {
    /**
     * Get an existing ForwardingControlProxies resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ForwardingControlProxiesState, opts?: pulumi.CustomResourceOptions): ForwardingControlProxies {
        return new ForwardingControlProxies(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/forwardingControlProxies:ForwardingControlProxies';

    /**
     * Returns true if the given object is an instance of ForwardingControlProxies.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ForwardingControlProxies {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ForwardingControlProxies.__pulumiType;
    }

    /**
     * The IP address or the FQDN of the third-party proxy service
     */
    public readonly address!: pulumi.Output<string | undefined>;
    /**
     * (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
     */
    public readonly base64EncodeXauHeader!: pulumi.Output<boolean | undefined>;
    /**
     * (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
     */
    public readonly certs!: pulumi.Output<outputs.ForwardingControlProxiesCert[] | undefined>;
    /**
     * (String) Additional notes or information
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
     */
    public readonly insertXauHeader!: pulumi.Output<boolean | undefined>;
    /**
     * Proxy name for the third-party proxy services
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
     */
    public readonly port!: pulumi.Output<number | undefined>;
    public /*out*/ readonly proxyId!: pulumi.Output<number>;
    /**
     * Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
     */
    public readonly type!: pulumi.Output<string | undefined>;

    /**
     * Create a ForwardingControlProxies resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ForwardingControlProxiesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ForwardingControlProxiesArgs | ForwardingControlProxiesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ForwardingControlProxiesState | undefined;
            resourceInputs["address"] = state ? state.address : undefined;
            resourceInputs["base64EncodeXauHeader"] = state ? state.base64EncodeXauHeader : undefined;
            resourceInputs["certs"] = state ? state.certs : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["insertXauHeader"] = state ? state.insertXauHeader : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["proxyId"] = state ? state.proxyId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as ForwardingControlProxiesArgs | undefined;
            resourceInputs["address"] = args ? args.address : undefined;
            resourceInputs["base64EncodeXauHeader"] = args ? args.base64EncodeXauHeader : undefined;
            resourceInputs["certs"] = args ? args.certs : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["insertXauHeader"] = args ? args.insertXauHeader : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["proxyId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ForwardingControlProxies.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ForwardingControlProxies resources.
 */
export interface ForwardingControlProxiesState {
    /**
     * The IP address or the FQDN of the third-party proxy service
     */
    address?: pulumi.Input<string>;
    /**
     * (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
     */
    base64EncodeXauHeader?: pulumi.Input<boolean>;
    /**
     * (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
     */
    certs?: pulumi.Input<pulumi.Input<inputs.ForwardingControlProxiesCert>[]>;
    /**
     * (String) Additional notes or information
     */
    description?: pulumi.Input<string>;
    /**
     * (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
     */
    insertXauHeader?: pulumi.Input<boolean>;
    /**
     * Proxy name for the third-party proxy services
     */
    name?: pulumi.Input<string>;
    /**
     * The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
     */
    port?: pulumi.Input<number>;
    proxyId?: pulumi.Input<number>;
    /**
     * Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ForwardingControlProxies resource.
 */
export interface ForwardingControlProxiesArgs {
    /**
     * The IP address or the FQDN of the third-party proxy service
     */
    address?: pulumi.Input<string>;
    /**
     * (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
     */
    base64EncodeXauHeader?: pulumi.Input<boolean>;
    /**
     * (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
     */
    certs?: pulumi.Input<pulumi.Input<inputs.ForwardingControlProxiesCert>[]>;
    /**
     * (String) Additional notes or information
     */
    description?: pulumi.Input<string>;
    /**
     * (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
     */
    insertXauHeader?: pulumi.Input<boolean>;
    /**
     * Proxy name for the third-party proxy services
     */
    name?: pulumi.Input<string>;
    /**
     * The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
     */
    port?: pulumi.Input<number>;
    /**
     * Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
     */
    type?: pulumi.Input<string>;
}
