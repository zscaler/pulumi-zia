// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("zia");

export declare const apiKey: string | undefined;
Object.defineProperty(exports, "apiKey", {
    get() {
        return __config.get("apiKey") ?? utilities.getEnv("ZIA_API_KEY");
    },
    enumerable: true,
});

/**
 * zpa client id
 */
export declare const clientId: string | undefined;
Object.defineProperty(exports, "clientId", {
    get() {
        return __config.get("clientId") ?? utilities.getEnv("ZSCALER_CLIENT_ID");
    },
    enumerable: true,
});

/**
 * zpa client secret
 */
export declare const clientSecret: string | undefined;
Object.defineProperty(exports, "clientSecret", {
    get() {
        return __config.get("clientSecret") ?? utilities.getEnv("ZSCALER_CLIENT_SECRET");
    },
    enumerable: true,
});

/**
 * Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
 */
export declare const httpProxy: string | undefined;
Object.defineProperty(exports, "httpProxy", {
    get() {
        return __config.get("httpProxy");
    },
    enumerable: true,
});

/**
 * maximum number of retries to attempt before erroring out.
 */
export declare const maxRetries: number | undefined;
Object.defineProperty(exports, "maxRetries", {
    get() {
        return __config.getObject<number>("maxRetries");
    },
    enumerable: true,
});

/**
 * Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
 * https://help.zscaler.com/oneapi/understanding-rate-limiting.
 */
export declare const parallelism: number | undefined;
Object.defineProperty(exports, "parallelism", {
    get() {
        return __config.getObject<number>("parallelism");
    },
    enumerable: true,
});

export declare const password: string | undefined;
Object.defineProperty(exports, "password", {
    get() {
        return __config.get("password") ?? utilities.getEnv("ZIA_PASSWORD");
    },
    enumerable: true,
});

/**
 * zpa private key
 */
export declare const privateKey: string | undefined;
Object.defineProperty(exports, "privateKey", {
    get() {
        return __config.get("privateKey") ?? utilities.getEnv("ZSCALER_PRIVATE_KEY");
    },
    enumerable: true,
});

/**
 * Timeout for single request (in seconds) which is made to Zscaler, the default is `0` (means no limit is set). The
 * maximum value can be `300`.
 */
export declare const requestTimeout: number | undefined;
Object.defineProperty(exports, "requestTimeout", {
    get() {
        return __config.getObject<number>("requestTimeout");
    },
    enumerable: true,
});

/**
 * Zscaler Sandbox Cloud
 */
export declare const sandboxCloud: string | undefined;
Object.defineProperty(exports, "sandboxCloud", {
    get() {
        return __config.get("sandboxCloud") ?? utilities.getEnv("ZSCALER_SANDBOX_CLOUD");
    },
    enumerable: true,
});

/**
 * Zscaler Sandbox Token
 */
export declare const sandboxToken: string | undefined;
Object.defineProperty(exports, "sandboxToken", {
    get() {
        return __config.get("sandboxToken") ?? utilities.getEnv("ZSCALER_SANDBOX_TOKEN");
    },
    enumerable: true,
});

export declare const useLegacyClient: boolean | undefined;
Object.defineProperty(exports, "useLegacyClient", {
    get() {
        return __config.getObject<boolean>("useLegacyClient") ?? utilities.getEnvBoolean("ZSCALER_USE_LEGACY_CLIENT");
    },
    enumerable: true,
});

export declare const username: string | undefined;
Object.defineProperty(exports, "username", {
    get() {
        return __config.get("username") ?? utilities.getEnv("ZIA_USERNAME");
    },
    enumerable: true,
});

/**
 * Zscaler Vanity Domain
 */
export declare const vanityDomain: string | undefined;
Object.defineProperty(exports, "vanityDomain", {
    get() {
        return __config.get("vanityDomain") ?? utilities.getEnv("ZSCALER_VANITY_DOMAIN");
    },
    enumerable: true,
});

export declare const ziaCloud: string | undefined;
Object.defineProperty(exports, "ziaCloud", {
    get() {
        return __config.get("ziaCloud") ?? utilities.getEnv("ZIA_CLOUD");
    },
    enumerable: true,
});

/**
 * Zscaler Cloud Name
 */
export declare const zscalerCloud: string | undefined;
Object.defineProperty(exports, "zscalerCloud", {
    get() {
        return __config.get("zscalerCloud") ?? utilities.getEnv("ZSCALER_CLOUD");
    },
    enumerable: true,
});

