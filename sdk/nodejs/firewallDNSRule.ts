// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class FirewallDNSRule extends pulumi.CustomResource {
    /**
     * Get an existing FirewallDNSRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallDNSRuleState, opts?: pulumi.CustomResourceOptions): FirewallDNSRule {
        return new FirewallDNSRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/firewallDNSRule:FirewallDNSRule';

    /**
     * Returns true if the given object is an instance of FirewallDNSRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FirewallDNSRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallDNSRule.__pulumiType;
    }

    /**
     * The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing,
     * blocking, or redirecting the traffic.
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * list of nw application groups
     */
    public readonly applicationGroups!: pulumi.Output<outputs.FirewallDNSRuleApplicationGroups | undefined>;
    /**
     * User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
     * specific network service application.
     */
    public readonly applications!: pulumi.Output<string[]>;
    /**
     * The IP address to which the traffic will be redirected to when the DNAT rule is triggered. If not set, no redirection is
     * done to specific IP addresses.
     */
    public readonly blockResponseCode!: pulumi.Output<string | undefined>;
    /**
     * A Boolean value that indicates whether packet capture (PCAP) is enabled or not
     */
    public readonly capturePcap!: pulumi.Output<boolean>;
    /**
     * If set to true, the default rule is applied
     */
    public readonly defaultRule!: pulumi.Output<boolean | undefined>;
    /**
     * list of departments for which rule must be applied
     */
    public readonly departments!: pulumi.Output<outputs.FirewallDNSRuleDepartments | undefined>;
    /**
     * Additional information about the rule
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
     */
    public readonly destAddresses!: pulumi.Output<string[] | undefined>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    public readonly destCountries!: pulumi.Output<string[]>;
    /**
     * Destination IP categories to which the rule applies. If not set, the rule is not restricted to specific categories.
     */
    public readonly destIpCategories!: pulumi.Output<string[] | undefined>;
    /**
     * list of destination ip groups
     */
    public readonly destIpGroups!: pulumi.Output<outputs.FirewallDNSRuleDestIpGroups | undefined>;
    /**
     * list of destination ip groups
     */
    public readonly destIpv6Groups!: pulumi.Output<outputs.FirewallDNSRuleDestIpv6Groups | undefined>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    public readonly deviceGroups!: pulumi.Output<outputs.FirewallDNSRuleDeviceGroups | undefined>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    public readonly devices!: pulumi.Output<outputs.FirewallDNSRuleDevices | undefined>;
    /**
     * The DNS gateway used to redirect traffic, specified when the rule action is to redirect DNS request to an external DNS
     * service
     */
    public readonly dnsGateway!: pulumi.Output<outputs.FirewallDNSRuleDnsGateway>;
    /**
     * DNS request types to which the rule applies
     */
    public readonly dnsRuleRequestTypes!: pulumi.Output<string[] | undefined>;
    /**
     * The EDNS ECS object which resolves DNS request
     */
    public readonly ednsEcsObject!: pulumi.Output<outputs.FirewallDNSRuleEdnsEcsObject>;
    /**
     * list of groups for which rule must be applied
     */
    public readonly groups!: pulumi.Output<outputs.FirewallDNSRuleGroups | undefined>;
    /**
     * list of Labels that are applicable to the rule.
     */
    public readonly labels!: pulumi.Output<outputs.FirewallDNSRuleLabels | undefined>;
    /**
     * list of locations groups
     */
    public readonly locationGroups!: pulumi.Output<outputs.FirewallDNSRuleLocationGroups | undefined>;
    /**
     * list of locations for which rule must be applied
     */
    public readonly locations!: pulumi.Output<outputs.FirewallDNSRuleLocations | undefined>;
    /**
     * The name of the IPS Control rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Rule order number. If omitted, the rule will be added to the end of the rule set.
     */
    public readonly order!: pulumi.Output<number>;
    /**
     * If set to true, a predefined rule is applied
     */
    public readonly predefined!: pulumi.Output<boolean | undefined>;
    /**
     * Protocol for the given rule. This field is not applicable to the Lite API.
     */
    public readonly protocols!: pulumi.Output<string[] | undefined>;
    /**
     * The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
     * be specified for the rule.
     */
    public readonly rank!: pulumi.Output<number | undefined>;
    /**
     * The IP address to which the traffic will be redirected to when the DNAT rule is triggered. If not set, no redirection is
     * done to specific IP addresses.
     */
    public readonly redirectIp!: pulumi.Output<string | undefined>;
    /**
     * URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
     * to a specific URL category.
     */
    public readonly resCategories!: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly ruleId!: pulumi.Output<number>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    public readonly sourceCountries!: pulumi.Output<string[]>;
    /**
     * list of Source IP address groups for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address group.
     */
    public readonly srcIpGroups!: pulumi.Output<outputs.FirewallDNSRuleSrcIpGroups | undefined>;
    /**
     * User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address.
     */
    public readonly srcIps!: pulumi.Output<string[] | undefined>;
    /**
     * list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
     * specific source IPv6 address group.
     */
    public readonly srcIpv6Groups!: pulumi.Output<outputs.FirewallDNSRuleSrcIpv6Groups | undefined>;
    /**
     * The state of the rule indicating whether it is enabled or disabled
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * The time interval in which the Firewall Filtering policy rule applies
     */
    public readonly timeWindows!: pulumi.Output<outputs.FirewallDNSRuleTimeWindows | undefined>;
    /**
     * list of users for which rule must be applied
     */
    public readonly users!: pulumi.Output<outputs.FirewallDNSRuleUsers | undefined>;
    /**
     * The ZPA IP pool specified when the rule action is to resolve domain names of ZPA applications to an ephemeral IP address
     * from a preconfigured IP pool
     */
    public readonly zpaIpGroup!: pulumi.Output<outputs.FirewallDNSRuleZpaIpGroup>;

    /**
     * Create a FirewallDNSRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallDNSRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FirewallDNSRuleArgs | FirewallDNSRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FirewallDNSRuleState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["applicationGroups"] = state ? state.applicationGroups : undefined;
            resourceInputs["applications"] = state ? state.applications : undefined;
            resourceInputs["blockResponseCode"] = state ? state.blockResponseCode : undefined;
            resourceInputs["capturePcap"] = state ? state.capturePcap : undefined;
            resourceInputs["defaultRule"] = state ? state.defaultRule : undefined;
            resourceInputs["departments"] = state ? state.departments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destAddresses"] = state ? state.destAddresses : undefined;
            resourceInputs["destCountries"] = state ? state.destCountries : undefined;
            resourceInputs["destIpCategories"] = state ? state.destIpCategories : undefined;
            resourceInputs["destIpGroups"] = state ? state.destIpGroups : undefined;
            resourceInputs["destIpv6Groups"] = state ? state.destIpv6Groups : undefined;
            resourceInputs["deviceGroups"] = state ? state.deviceGroups : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["dnsGateway"] = state ? state.dnsGateway : undefined;
            resourceInputs["dnsRuleRequestTypes"] = state ? state.dnsRuleRequestTypes : undefined;
            resourceInputs["ednsEcsObject"] = state ? state.ednsEcsObject : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["locationGroups"] = state ? state.locationGroups : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["predefined"] = state ? state.predefined : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["rank"] = state ? state.rank : undefined;
            resourceInputs["redirectIp"] = state ? state.redirectIp : undefined;
            resourceInputs["resCategories"] = state ? state.resCategories : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["sourceCountries"] = state ? state.sourceCountries : undefined;
            resourceInputs["srcIpGroups"] = state ? state.srcIpGroups : undefined;
            resourceInputs["srcIps"] = state ? state.srcIps : undefined;
            resourceInputs["srcIpv6Groups"] = state ? state.srcIpv6Groups : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeWindows"] = state ? state.timeWindows : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["zpaIpGroup"] = state ? state.zpaIpGroup : undefined;
        } else {
            const args = argsOrState as FirewallDNSRuleArgs | undefined;
            if ((!args || args.order === undefined) && !opts.urn) {
                throw new Error("Missing required property 'order'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["applicationGroups"] = args ? args.applicationGroups : undefined;
            resourceInputs["applications"] = args ? args.applications : undefined;
            resourceInputs["blockResponseCode"] = args ? args.blockResponseCode : undefined;
            resourceInputs["capturePcap"] = args ? args.capturePcap : undefined;
            resourceInputs["defaultRule"] = args ? args.defaultRule : undefined;
            resourceInputs["departments"] = args ? args.departments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destAddresses"] = args ? args.destAddresses : undefined;
            resourceInputs["destCountries"] = args ? args.destCountries : undefined;
            resourceInputs["destIpCategories"] = args ? args.destIpCategories : undefined;
            resourceInputs["destIpGroups"] = args ? args.destIpGroups : undefined;
            resourceInputs["destIpv6Groups"] = args ? args.destIpv6Groups : undefined;
            resourceInputs["deviceGroups"] = args ? args.deviceGroups : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["dnsGateway"] = args ? args.dnsGateway : undefined;
            resourceInputs["dnsRuleRequestTypes"] = args ? args.dnsRuleRequestTypes : undefined;
            resourceInputs["ednsEcsObject"] = args ? args.ednsEcsObject : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["locationGroups"] = args ? args.locationGroups : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["predefined"] = args ? args.predefined : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["rank"] = args ? args.rank : undefined;
            resourceInputs["redirectIp"] = args ? args.redirectIp : undefined;
            resourceInputs["resCategories"] = args ? args.resCategories : undefined;
            resourceInputs["sourceCountries"] = args ? args.sourceCountries : undefined;
            resourceInputs["srcIpGroups"] = args ? args.srcIpGroups : undefined;
            resourceInputs["srcIps"] = args ? args.srcIps : undefined;
            resourceInputs["srcIpv6Groups"] = args ? args.srcIpv6Groups : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timeWindows"] = args ? args.timeWindows : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["zpaIpGroup"] = args ? args.zpaIpGroup : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FirewallDNSRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FirewallDNSRule resources.
 */
export interface FirewallDNSRuleState {
    /**
     * The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing,
     * blocking, or redirecting the traffic.
     */
    action?: pulumi.Input<string>;
    /**
     * list of nw application groups
     */
    applicationGroups?: pulumi.Input<inputs.FirewallDNSRuleApplicationGroups>;
    /**
     * User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
     * specific network service application.
     */
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IP address to which the traffic will be redirected to when the DNAT rule is triggered. If not set, no redirection is
     * done to specific IP addresses.
     */
    blockResponseCode?: pulumi.Input<string>;
    /**
     * A Boolean value that indicates whether packet capture (PCAP) is enabled or not
     */
    capturePcap?: pulumi.Input<boolean>;
    /**
     * If set to true, the default rule is applied
     */
    defaultRule?: pulumi.Input<boolean>;
    /**
     * list of departments for which rule must be applied
     */
    departments?: pulumi.Input<inputs.FirewallDNSRuleDepartments>;
    /**
     * Additional information about the rule
     */
    description?: pulumi.Input<string>;
    /**
     * Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
     */
    destAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    destCountries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Destination IP categories to which the rule applies. If not set, the rule is not restricted to specific categories.
     */
    destIpCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of destination ip groups
     */
    destIpGroups?: pulumi.Input<inputs.FirewallDNSRuleDestIpGroups>;
    /**
     * list of destination ip groups
     */
    destIpv6Groups?: pulumi.Input<inputs.FirewallDNSRuleDestIpv6Groups>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    deviceGroups?: pulumi.Input<inputs.FirewallDNSRuleDeviceGroups>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    devices?: pulumi.Input<inputs.FirewallDNSRuleDevices>;
    /**
     * The DNS gateway used to redirect traffic, specified when the rule action is to redirect DNS request to an external DNS
     * service
     */
    dnsGateway?: pulumi.Input<inputs.FirewallDNSRuleDnsGateway>;
    /**
     * DNS request types to which the rule applies
     */
    dnsRuleRequestTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The EDNS ECS object which resolves DNS request
     */
    ednsEcsObject?: pulumi.Input<inputs.FirewallDNSRuleEdnsEcsObject>;
    /**
     * list of groups for which rule must be applied
     */
    groups?: pulumi.Input<inputs.FirewallDNSRuleGroups>;
    /**
     * list of Labels that are applicable to the rule.
     */
    labels?: pulumi.Input<inputs.FirewallDNSRuleLabels>;
    /**
     * list of locations groups
     */
    locationGroups?: pulumi.Input<inputs.FirewallDNSRuleLocationGroups>;
    /**
     * list of locations for which rule must be applied
     */
    locations?: pulumi.Input<inputs.FirewallDNSRuleLocations>;
    /**
     * The name of the IPS Control rule
     */
    name?: pulumi.Input<string>;
    /**
     * Rule order number. If omitted, the rule will be added to the end of the rule set.
     */
    order?: pulumi.Input<number>;
    /**
     * If set to true, a predefined rule is applied
     */
    predefined?: pulumi.Input<boolean>;
    /**
     * Protocol for the given rule. This field is not applicable to the Lite API.
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
     * be specified for the rule.
     */
    rank?: pulumi.Input<number>;
    /**
     * The IP address to which the traffic will be redirected to when the DNAT rule is triggered. If not set, no redirection is
     * done to specific IP addresses.
     */
    redirectIp?: pulumi.Input<string>;
    /**
     * URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
     * to a specific URL category.
     */
    resCategories?: pulumi.Input<pulumi.Input<string>[]>;
    ruleId?: pulumi.Input<number>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    sourceCountries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of Source IP address groups for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address group.
     */
    srcIpGroups?: pulumi.Input<inputs.FirewallDNSRuleSrcIpGroups>;
    /**
     * User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address.
     */
    srcIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
     * specific source IPv6 address group.
     */
    srcIpv6Groups?: pulumi.Input<inputs.FirewallDNSRuleSrcIpv6Groups>;
    /**
     * The state of the rule indicating whether it is enabled or disabled
     */
    state?: pulumi.Input<string>;
    /**
     * The time interval in which the Firewall Filtering policy rule applies
     */
    timeWindows?: pulumi.Input<inputs.FirewallDNSRuleTimeWindows>;
    /**
     * list of users for which rule must be applied
     */
    users?: pulumi.Input<inputs.FirewallDNSRuleUsers>;
    /**
     * The ZPA IP pool specified when the rule action is to resolve domain names of ZPA applications to an ephemeral IP address
     * from a preconfigured IP pool
     */
    zpaIpGroup?: pulumi.Input<inputs.FirewallDNSRuleZpaIpGroup>;
}

/**
 * The set of arguments for constructing a FirewallDNSRule resource.
 */
export interface FirewallDNSRuleArgs {
    /**
     * The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing,
     * blocking, or redirecting the traffic.
     */
    action?: pulumi.Input<string>;
    /**
     * list of nw application groups
     */
    applicationGroups?: pulumi.Input<inputs.FirewallDNSRuleApplicationGroups>;
    /**
     * User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
     * specific network service application.
     */
    applications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The IP address to which the traffic will be redirected to when the DNAT rule is triggered. If not set, no redirection is
     * done to specific IP addresses.
     */
    blockResponseCode?: pulumi.Input<string>;
    /**
     * A Boolean value that indicates whether packet capture (PCAP) is enabled or not
     */
    capturePcap?: pulumi.Input<boolean>;
    /**
     * If set to true, the default rule is applied
     */
    defaultRule?: pulumi.Input<boolean>;
    /**
     * list of departments for which rule must be applied
     */
    departments?: pulumi.Input<inputs.FirewallDNSRuleDepartments>;
    /**
     * Additional information about the rule
     */
    description?: pulumi.Input<string>;
    /**
     * Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
     */
    destAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    destCountries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Destination IP categories to which the rule applies. If not set, the rule is not restricted to specific categories.
     */
    destIpCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of destination ip groups
     */
    destIpGroups?: pulumi.Input<inputs.FirewallDNSRuleDestIpGroups>;
    /**
     * list of destination ip groups
     */
    destIpv6Groups?: pulumi.Input<inputs.FirewallDNSRuleDestIpv6Groups>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    deviceGroups?: pulumi.Input<inputs.FirewallDNSRuleDeviceGroups>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    devices?: pulumi.Input<inputs.FirewallDNSRuleDevices>;
    /**
     * The DNS gateway used to redirect traffic, specified when the rule action is to redirect DNS request to an external DNS
     * service
     */
    dnsGateway?: pulumi.Input<inputs.FirewallDNSRuleDnsGateway>;
    /**
     * DNS request types to which the rule applies
     */
    dnsRuleRequestTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The EDNS ECS object which resolves DNS request
     */
    ednsEcsObject?: pulumi.Input<inputs.FirewallDNSRuleEdnsEcsObject>;
    /**
     * list of groups for which rule must be applied
     */
    groups?: pulumi.Input<inputs.FirewallDNSRuleGroups>;
    /**
     * list of Labels that are applicable to the rule.
     */
    labels?: pulumi.Input<inputs.FirewallDNSRuleLabels>;
    /**
     * list of locations groups
     */
    locationGroups?: pulumi.Input<inputs.FirewallDNSRuleLocationGroups>;
    /**
     * list of locations for which rule must be applied
     */
    locations?: pulumi.Input<inputs.FirewallDNSRuleLocations>;
    /**
     * The name of the IPS Control rule
     */
    name?: pulumi.Input<string>;
    /**
     * Rule order number. If omitted, the rule will be added to the end of the rule set.
     */
    order: pulumi.Input<number>;
    /**
     * If set to true, a predefined rule is applied
     */
    predefined?: pulumi.Input<boolean>;
    /**
     * Protocol for the given rule. This field is not applicable to the Lite API.
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
     * be specified for the rule.
     */
    rank?: pulumi.Input<number>;
    /**
     * The IP address to which the traffic will be redirected to when the DNAT rule is triggered. If not set, no redirection is
     * done to specific IP addresses.
     */
    redirectIp?: pulumi.Input<string>;
    /**
     * URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
     * to a specific URL category.
     */
    resCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
     * countries.
     */
    sourceCountries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of Source IP address groups for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address group.
     */
    srcIpGroups?: pulumi.Input<inputs.FirewallDNSRuleSrcIpGroups>;
    /**
     * User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
     * source IP address.
     */
    srcIps?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
     * specific source IPv6 address group.
     */
    srcIpv6Groups?: pulumi.Input<inputs.FirewallDNSRuleSrcIpv6Groups>;
    /**
     * The state of the rule indicating whether it is enabled or disabled
     */
    state?: pulumi.Input<string>;
    /**
     * The time interval in which the Firewall Filtering policy rule applies
     */
    timeWindows?: pulumi.Input<inputs.FirewallDNSRuleTimeWindows>;
    /**
     * list of users for which rule must be applied
     */
    users?: pulumi.Input<inputs.FirewallDNSRuleUsers>;
    /**
     * The ZPA IP pool specified when the rule action is to resolve domain names of ZPA applications to an ephemeral IP address
     * from a preconfigured IP pool
     */
    zpaIpGroup?: pulumi.Input<inputs.FirewallDNSRuleZpaIpGroup>;
}
