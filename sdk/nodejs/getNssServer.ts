// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zia/about-nss-servers)
 * * [API documentation](https://help.zscaler.com/zia/cloud-nanolog-streaming-service-nss#/nssServers-get)
 *
 * Use the **zia_nss_server** data source to get information about a nss server resource in the Zscaler Internet Access cloud or via the API.
 * See [Adding NSS Servers](https://help.zscaler.com/zia/adding-nss-servers) for more details.
 *
 * ## Example Usage
 *
 * ### Retrieve By Name
 *
 * ### Retrieve By ID
 */
export function getNssServer(args?: GetNssServerArgs, opts?: pulumi.InvokeOptions): Promise<GetNssServerResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("zia:index/getNssServer:getNssServer", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getNssServer.
 */
export interface GetNssServerArgs {
    /**
     * System-generated identifier of the NSS server based on the software platform
     */
    id?: number;
    /**
     * The name of the nss server to be exported.
     */
    name?: string;
}

/**
 * A collection of values returned by getNssServer.
 */
export interface GetNssServerResult {
    /**
     * (integer) The ICAP server ID
     */
    readonly icapSvrId: number;
    readonly id: number;
    readonly name: string;
    /**
     * (String) The health of the NSS server. Returned Values:  `UNHEALTHY`, `HEALTHY`, `UNKNOWN`
     */
    readonly state: string;
    /**
     * (String) Enables or disables the status of the NSS server. Returned Values: `ENABLED`, `DISABLED`, `DISABLED_BY_SERVICE_PROVIDER`, `NOT_PROVISIONED_IN_SERVICE_PROVIDER`, `IN_TRIAL`
     */
    readonly status: string;
    /**
     * (String) Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
     */
    readonly type: string;
}
/**
 * * [Official documentation](https://help.zscaler.com/zia/about-nss-servers)
 * * [API documentation](https://help.zscaler.com/zia/cloud-nanolog-streaming-service-nss#/nssServers-get)
 *
 * Use the **zia_nss_server** data source to get information about a nss server resource in the Zscaler Internet Access cloud or via the API.
 * See [Adding NSS Servers](https://help.zscaler.com/zia/adding-nss-servers) for more details.
 *
 * ## Example Usage
 *
 * ### Retrieve By Name
 *
 * ### Retrieve By ID
 */
export function getNssServerOutput(args?: GetNssServerOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNssServerResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("zia:index/getNssServer:getNssServer", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getNssServer.
 */
export interface GetNssServerOutputArgs {
    /**
     * System-generated identifier of the NSS server based on the software platform
     */
    id?: pulumi.Input<number>;
    /**
     * The name of the nss server to be exported.
     */
    name?: pulumi.Input<string>;
}
