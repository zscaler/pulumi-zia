// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zia/about-ftp-control)
 * * [API documentation](https://help.zscaler.com/zia/ftp-control-policy#/ftpSettings-get)
 *
 * The **zia_ftp_control_policy** resource allows you to update FTP control Policy. To learn more see [Configuring the FTP Control Policy](https://help.zscaler.com/zia/configuring-ftp-control-policy)
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zia_ftp_control_policy** can be imported by using `ftp_control` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/ftpControlPolicy:FtpControlPolicy this "ftp_control"
 * ```
 */
export class FtpControlPolicy extends pulumi.CustomResource {
    /**
     * Get an existing FtpControlPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FtpControlPolicyState, opts?: pulumi.CustomResourceOptions): FtpControlPolicy {
        return new FtpControlPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/ftpControlPolicy:FtpControlPolicy';

    /**
     * Returns true if the given object is an instance of FtpControlPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FtpControlPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FtpControlPolicy.__pulumiType;
    }

    /**
     * Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
     */
    public readonly ftpEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether to enable FTP over HTTP.
     */
    public readonly ftpOverHttpEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * List of URL categories for which rule must be applied
     */
    public readonly urlCategories!: pulumi.Output<string[] | undefined>;
    /**
     * Domains or URLs included for the FTP Control settings
     */
    public readonly urls!: pulumi.Output<string[] | undefined>;

    /**
     * Create a FtpControlPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: FtpControlPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FtpControlPolicyArgs | FtpControlPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FtpControlPolicyState | undefined;
            resourceInputs["ftpEnabled"] = state ? state.ftpEnabled : undefined;
            resourceInputs["ftpOverHttpEnabled"] = state ? state.ftpOverHttpEnabled : undefined;
            resourceInputs["urlCategories"] = state ? state.urlCategories : undefined;
            resourceInputs["urls"] = state ? state.urls : undefined;
        } else {
            const args = argsOrState as FtpControlPolicyArgs | undefined;
            resourceInputs["ftpEnabled"] = args ? args.ftpEnabled : undefined;
            resourceInputs["ftpOverHttpEnabled"] = args ? args.ftpOverHttpEnabled : undefined;
            resourceInputs["urlCategories"] = args ? args.urlCategories : undefined;
            resourceInputs["urls"] = args ? args.urls : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FtpControlPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FtpControlPolicy resources.
 */
export interface FtpControlPolicyState {
    /**
     * Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
     */
    ftpEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether to enable FTP over HTTP.
     */
    ftpOverHttpEnabled?: pulumi.Input<boolean>;
    /**
     * List of URL categories for which rule must be applied
     */
    urlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Domains or URLs included for the FTP Control settings
     */
    urls?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a FtpControlPolicy resource.
 */
export interface FtpControlPolicyArgs {
    /**
     * Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
     */
    ftpEnabled?: pulumi.Input<boolean>;
    /**
     * Indicates whether to enable FTP over HTTP.
     */
    ftpOverHttpEnabled?: pulumi.Input<boolean>;
    /**
     * List of URL categories for which rule must be applied
     */
    urlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Domains or URLs included for the FTP Control settings
     */
    urls?: pulumi.Input<pulumi.Input<string>[]>;
}
