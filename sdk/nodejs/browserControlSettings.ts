// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zia/configuring-browser-control-policy)
 * * [API documentation](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
 *
 * The **zia_browser_control_policy** resource allows you to update the malware protection policy configuration details. To learn more see [Configuring the Browser Control Policy](https://help.zscaler.com/zia/configuring-browser-control-policy)
 *
 * ## Example Usage
 *
 * ### Enable Smart Isolation
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zia_browser_control_policy** can be imported by using `browser_settings` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/browserControlSettings:BrowserControlSettings this "browser_settings"
 * ```
 */
export class BrowserControlSettings extends pulumi.CustomResource {
    /**
     * Get an existing BrowserControlSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BrowserControlSettingsState, opts?: pulumi.CustomResourceOptions): BrowserControlSettings {
        return new BrowserControlSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/browserControlSettings:BrowserControlSettings';

    /**
     * Returns true if the given object is an instance of BrowserControlSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BrowserControlSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BrowserControlSettings.__pulumiType;
    }

    /**
     * A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
     * internet
     */
    public readonly allowAllBrowsers!: pulumi.Output<boolean>;
    /**
     * Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
     */
    public readonly blockedChromeVersions!: pulumi.Output<string[]>;
    /**
     * Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
     */
    public readonly blockedFirefoxVersions!: pulumi.Output<string[]>;
    /**
     * Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
     */
    public readonly blockedInternetExplorerVersions!: pulumi.Output<string[]>;
    /**
     * Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
     */
    public readonly blockedOperaVersions!: pulumi.Output<string[]>;
    /**
     * Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
     */
    public readonly blockedSafariVersions!: pulumi.Output<string[]>;
    /**
     * If set to true, all the browsers are bypassed for warnings
     */
    public readonly bypassAllBrowsers!: pulumi.Output<boolean>;
    /**
     * List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
     * attribute is set to true. If not set, all vulnerable applications are warned
     */
    public readonly bypassApplications!: pulumi.Output<string[]>;
    /**
     * List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
     * is set to true. If not set, all vulnerable plugins are warned
     */
    public readonly bypassPlugins!: pulumi.Output<string[]>;
    /**
     * A Boolean value that specifies if Smart Browser Isolation is enabled
     */
    public readonly enableSmartBrowserIsolation!: pulumi.Output<boolean>;
    /**
     * A Boolean value that specifies if the warnings are enabled
     */
    public readonly enableWarnings!: pulumi.Output<boolean>;
    /**
     * Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
     * vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
     */
    public readonly pluginCheckFrequency!: pulumi.Output<string | undefined>;
    /**
     * Name-ID pairs of groups for which the rule is applied
     */
    public readonly smartIsolationGroups!: pulumi.Output<outputs.BrowserControlSettingsSmartIsolationGroups | undefined>;
    /**
     * The isolation profile
     */
    public readonly smartIsolationProfiles!: pulumi.Output<outputs.BrowserControlSettingsSmartIsolationProfile[]>;
    /**
     * Name-ID pairs of users for which the rule is applied
     */
    public readonly smartIsolationUsers!: pulumi.Output<outputs.BrowserControlSettingsSmartIsolationUsers | undefined>;

    /**
     * Create a BrowserControlSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BrowserControlSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BrowserControlSettingsArgs | BrowserControlSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BrowserControlSettingsState | undefined;
            resourceInputs["allowAllBrowsers"] = state ? state.allowAllBrowsers : undefined;
            resourceInputs["blockedChromeVersions"] = state ? state.blockedChromeVersions : undefined;
            resourceInputs["blockedFirefoxVersions"] = state ? state.blockedFirefoxVersions : undefined;
            resourceInputs["blockedInternetExplorerVersions"] = state ? state.blockedInternetExplorerVersions : undefined;
            resourceInputs["blockedOperaVersions"] = state ? state.blockedOperaVersions : undefined;
            resourceInputs["blockedSafariVersions"] = state ? state.blockedSafariVersions : undefined;
            resourceInputs["bypassAllBrowsers"] = state ? state.bypassAllBrowsers : undefined;
            resourceInputs["bypassApplications"] = state ? state.bypassApplications : undefined;
            resourceInputs["bypassPlugins"] = state ? state.bypassPlugins : undefined;
            resourceInputs["enableSmartBrowserIsolation"] = state ? state.enableSmartBrowserIsolation : undefined;
            resourceInputs["enableWarnings"] = state ? state.enableWarnings : undefined;
            resourceInputs["pluginCheckFrequency"] = state ? state.pluginCheckFrequency : undefined;
            resourceInputs["smartIsolationGroups"] = state ? state.smartIsolationGroups : undefined;
            resourceInputs["smartIsolationProfiles"] = state ? state.smartIsolationProfiles : undefined;
            resourceInputs["smartIsolationUsers"] = state ? state.smartIsolationUsers : undefined;
        } else {
            const args = argsOrState as BrowserControlSettingsArgs | undefined;
            resourceInputs["allowAllBrowsers"] = args ? args.allowAllBrowsers : undefined;
            resourceInputs["blockedChromeVersions"] = args ? args.blockedChromeVersions : undefined;
            resourceInputs["blockedFirefoxVersions"] = args ? args.blockedFirefoxVersions : undefined;
            resourceInputs["blockedInternetExplorerVersions"] = args ? args.blockedInternetExplorerVersions : undefined;
            resourceInputs["blockedOperaVersions"] = args ? args.blockedOperaVersions : undefined;
            resourceInputs["blockedSafariVersions"] = args ? args.blockedSafariVersions : undefined;
            resourceInputs["bypassAllBrowsers"] = args ? args.bypassAllBrowsers : undefined;
            resourceInputs["bypassApplications"] = args ? args.bypassApplications : undefined;
            resourceInputs["bypassPlugins"] = args ? args.bypassPlugins : undefined;
            resourceInputs["enableSmartBrowserIsolation"] = args ? args.enableSmartBrowserIsolation : undefined;
            resourceInputs["enableWarnings"] = args ? args.enableWarnings : undefined;
            resourceInputs["pluginCheckFrequency"] = args ? args.pluginCheckFrequency : undefined;
            resourceInputs["smartIsolationGroups"] = args ? args.smartIsolationGroups : undefined;
            resourceInputs["smartIsolationProfiles"] = args ? args.smartIsolationProfiles : undefined;
            resourceInputs["smartIsolationUsers"] = args ? args.smartIsolationUsers : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "zia:index/browserControlPolicy:BrowserControlPolicy" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(BrowserControlSettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BrowserControlSettings resources.
 */
export interface BrowserControlSettingsState {
    /**
     * A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
     * internet
     */
    allowAllBrowsers?: pulumi.Input<boolean>;
    /**
     * Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
     */
    blockedChromeVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
     */
    blockedFirefoxVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
     */
    blockedInternetExplorerVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
     */
    blockedOperaVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
     */
    blockedSafariVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If set to true, all the browsers are bypassed for warnings
     */
    bypassAllBrowsers?: pulumi.Input<boolean>;
    /**
     * List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
     * attribute is set to true. If not set, all vulnerable applications are warned
     */
    bypassApplications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
     * is set to true. If not set, all vulnerable plugins are warned
     */
    bypassPlugins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A Boolean value that specifies if Smart Browser Isolation is enabled
     */
    enableSmartBrowserIsolation?: pulumi.Input<boolean>;
    /**
     * A Boolean value that specifies if the warnings are enabled
     */
    enableWarnings?: pulumi.Input<boolean>;
    /**
     * Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
     * vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
     */
    pluginCheckFrequency?: pulumi.Input<string>;
    /**
     * Name-ID pairs of groups for which the rule is applied
     */
    smartIsolationGroups?: pulumi.Input<inputs.BrowserControlSettingsSmartIsolationGroups>;
    /**
     * The isolation profile
     */
    smartIsolationProfiles?: pulumi.Input<pulumi.Input<inputs.BrowserControlSettingsSmartIsolationProfile>[]>;
    /**
     * Name-ID pairs of users for which the rule is applied
     */
    smartIsolationUsers?: pulumi.Input<inputs.BrowserControlSettingsSmartIsolationUsers>;
}

/**
 * The set of arguments for constructing a BrowserControlSettings resource.
 */
export interface BrowserControlSettingsArgs {
    /**
     * A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
     * internet
     */
    allowAllBrowsers?: pulumi.Input<boolean>;
    /**
     * Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
     */
    blockedChromeVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
     */
    blockedFirefoxVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
     */
    blockedInternetExplorerVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
     */
    blockedOperaVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
     */
    blockedSafariVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If set to true, all the browsers are bypassed for warnings
     */
    bypassAllBrowsers?: pulumi.Input<boolean>;
    /**
     * List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
     * attribute is set to true. If not set, all vulnerable applications are warned
     */
    bypassApplications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
     * is set to true. If not set, all vulnerable plugins are warned
     */
    bypassPlugins?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A Boolean value that specifies if Smart Browser Isolation is enabled
     */
    enableSmartBrowserIsolation?: pulumi.Input<boolean>;
    /**
     * A Boolean value that specifies if the warnings are enabled
     */
    enableWarnings?: pulumi.Input<boolean>;
    /**
     * Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
     * vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
     */
    pluginCheckFrequency?: pulumi.Input<string>;
    /**
     * Name-ID pairs of groups for which the rule is applied
     */
    smartIsolationGroups?: pulumi.Input<inputs.BrowserControlSettingsSmartIsolationGroups>;
    /**
     * The isolation profile
     */
    smartIsolationProfiles?: pulumi.Input<pulumi.Input<inputs.BrowserControlSettingsSmartIsolationProfile>[]>;
    /**
     * Name-ID pairs of users for which the rule is applied
     */
    smartIsolationUsers?: pulumi.Input<inputs.BrowserControlSettingsSmartIsolationUsers>;
}
