// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://help.zscaler.com/zia/about-role-management)
 * * [API documentation](https://help.zscaler.com/zia/admin-role-management#/adminRoles-get)
 *
 * The **zia_admin_roles** resource allows the creation and management of admin roles in the Zscaler Internet Access cloud or via the API.
 *
 * ## Example Usage
 *
 * ### Create Admin Role
 *
 * ### Create Admin SDWAN Role
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zia_rule_labels** can be imported by using `<LABEL_ID>` or `<LABEL_NAME>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/adminRoles:AdminRoles example <label_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zia:index/adminRoles:AdminRoles example <label_name>
 * ```
 */
export class AdminRoles extends pulumi.CustomResource {
    /**
     * Get an existing AdminRoles resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdminRolesState, opts?: pulumi.CustomResourceOptions): AdminRoles {
        return new AdminRoles(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/adminRoles:AdminRoles';

    /**
     * Returns true if the given object is an instance of AdminRoles.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AdminRoles {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AdminRoles.__pulumiType;
    }

    /**
     * Admin and role management access permission.
     */
    public readonly adminAcctAccess!: pulumi.Output<string>;
    /**
     * Alerting access permission
     */
    public readonly alertingAccess!: pulumi.Output<string>;
    /**
     * Insights logs access permission.
     */
    public readonly analysisAccess!: pulumi.Output<string>;
    /**
     * Dashboard access permission.
     */
    public readonly dashboardAccess!: pulumi.Output<string>;
    /**
     * Device information access permission. When set to NONE, device information is obfuscated.
     */
    public readonly deviceInfoAccess!: pulumi.Output<string>;
    /**
     * External feature access permission.
     */
    public readonly extFeaturePermissions!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
     * access, or read-only access.
     */
    public readonly featurePermissions!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Indicates whether this is an auditor role.
     */
    public readonly isAuditor!: pulumi.Output<boolean | undefined>;
    /**
     * Indicates whether or not this admin user is editable/deletable.
     */
    public readonly isNonEditable!: pulumi.Output<boolean | undefined>;
    /**
     * Log range limit.
     */
    public readonly logsLimit!: pulumi.Output<string | undefined>;
    /**
     * The Name of the admin role
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Request method for which the rule must be applied. If not set, rule will be applied to all methods
     */
    public readonly permissions!: pulumi.Output<string[]>;
    /**
     * Policy access permission.
     */
    public readonly policyAccess!: pulumi.Output<string>;
    /**
     * Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
     * value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
     * which rule orders this admin can access.
     */
    public readonly rank!: pulumi.Output<number | undefined>;
    /**
     * Report access permission.
     */
    public readonly reportAccess!: pulumi.Output<string>;
    /**
     * Time duration allocated to the report dashboard.
     */
    public readonly reportTimeDuration!: pulumi.Output<number>;
    public /*out*/ readonly roleId!: pulumi.Output<number>;
    /**
     * The admin role type. ()This attribute is subject to change.)
     */
    public readonly roleType!: pulumi.Output<string | undefined>;
    /**
     * Username access permission. When set to NONE, the username will be obfuscated.
     */
    public readonly usernameAccess!: pulumi.Output<string>;

    /**
     * Create a AdminRoles resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AdminRolesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdminRolesArgs | AdminRolesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdminRolesState | undefined;
            resourceInputs["adminAcctAccess"] = state ? state.adminAcctAccess : undefined;
            resourceInputs["alertingAccess"] = state ? state.alertingAccess : undefined;
            resourceInputs["analysisAccess"] = state ? state.analysisAccess : undefined;
            resourceInputs["dashboardAccess"] = state ? state.dashboardAccess : undefined;
            resourceInputs["deviceInfoAccess"] = state ? state.deviceInfoAccess : undefined;
            resourceInputs["extFeaturePermissions"] = state ? state.extFeaturePermissions : undefined;
            resourceInputs["featurePermissions"] = state ? state.featurePermissions : undefined;
            resourceInputs["isAuditor"] = state ? state.isAuditor : undefined;
            resourceInputs["isNonEditable"] = state ? state.isNonEditable : undefined;
            resourceInputs["logsLimit"] = state ? state.logsLimit : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
            resourceInputs["policyAccess"] = state ? state.policyAccess : undefined;
            resourceInputs["rank"] = state ? state.rank : undefined;
            resourceInputs["reportAccess"] = state ? state.reportAccess : undefined;
            resourceInputs["reportTimeDuration"] = state ? state.reportTimeDuration : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
            resourceInputs["roleType"] = state ? state.roleType : undefined;
            resourceInputs["usernameAccess"] = state ? state.usernameAccess : undefined;
        } else {
            const args = argsOrState as AdminRolesArgs | undefined;
            resourceInputs["adminAcctAccess"] = args ? args.adminAcctAccess : undefined;
            resourceInputs["alertingAccess"] = args ? args.alertingAccess : undefined;
            resourceInputs["analysisAccess"] = args ? args.analysisAccess : undefined;
            resourceInputs["dashboardAccess"] = args ? args.dashboardAccess : undefined;
            resourceInputs["deviceInfoAccess"] = args ? args.deviceInfoAccess : undefined;
            resourceInputs["extFeaturePermissions"] = args ? args.extFeaturePermissions : undefined;
            resourceInputs["featurePermissions"] = args ? args.featurePermissions : undefined;
            resourceInputs["isAuditor"] = args ? args.isAuditor : undefined;
            resourceInputs["isNonEditable"] = args ? args.isNonEditable : undefined;
            resourceInputs["logsLimit"] = args ? args.logsLimit : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
            resourceInputs["policyAccess"] = args ? args.policyAccess : undefined;
            resourceInputs["rank"] = args ? args.rank : undefined;
            resourceInputs["reportAccess"] = args ? args.reportAccess : undefined;
            resourceInputs["reportTimeDuration"] = args ? args.reportTimeDuration : undefined;
            resourceInputs["roleType"] = args ? args.roleType : undefined;
            resourceInputs["usernameAccess"] = args ? args.usernameAccess : undefined;
            resourceInputs["roleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AdminRoles.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AdminRoles resources.
 */
export interface AdminRolesState {
    /**
     * Admin and role management access permission.
     */
    adminAcctAccess?: pulumi.Input<string>;
    /**
     * Alerting access permission
     */
    alertingAccess?: pulumi.Input<string>;
    /**
     * Insights logs access permission.
     */
    analysisAccess?: pulumi.Input<string>;
    /**
     * Dashboard access permission.
     */
    dashboardAccess?: pulumi.Input<string>;
    /**
     * Device information access permission. When set to NONE, device information is obfuscated.
     */
    deviceInfoAccess?: pulumi.Input<string>;
    /**
     * External feature access permission.
     */
    extFeaturePermissions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
     * access, or read-only access.
     */
    featurePermissions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Indicates whether this is an auditor role.
     */
    isAuditor?: pulumi.Input<boolean>;
    /**
     * Indicates whether or not this admin user is editable/deletable.
     */
    isNonEditable?: pulumi.Input<boolean>;
    /**
     * Log range limit.
     */
    logsLimit?: pulumi.Input<string>;
    /**
     * The Name of the admin role
     */
    name?: pulumi.Input<string>;
    /**
     * Request method for which the rule must be applied. If not set, rule will be applied to all methods
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy access permission.
     */
    policyAccess?: pulumi.Input<string>;
    /**
     * Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
     * value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
     * which rule orders this admin can access.
     */
    rank?: pulumi.Input<number>;
    /**
     * Report access permission.
     */
    reportAccess?: pulumi.Input<string>;
    /**
     * Time duration allocated to the report dashboard.
     */
    reportTimeDuration?: pulumi.Input<number>;
    roleId?: pulumi.Input<number>;
    /**
     * The admin role type. ()This attribute is subject to change.)
     */
    roleType?: pulumi.Input<string>;
    /**
     * Username access permission. When set to NONE, the username will be obfuscated.
     */
    usernameAccess?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AdminRoles resource.
 */
export interface AdminRolesArgs {
    /**
     * Admin and role management access permission.
     */
    adminAcctAccess?: pulumi.Input<string>;
    /**
     * Alerting access permission
     */
    alertingAccess?: pulumi.Input<string>;
    /**
     * Insights logs access permission.
     */
    analysisAccess?: pulumi.Input<string>;
    /**
     * Dashboard access permission.
     */
    dashboardAccess?: pulumi.Input<string>;
    /**
     * Device information access permission. When set to NONE, device information is obfuscated.
     */
    deviceInfoAccess?: pulumi.Input<string>;
    /**
     * External feature access permission.
     */
    extFeaturePermissions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
     * access, or read-only access.
     */
    featurePermissions?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Indicates whether this is an auditor role.
     */
    isAuditor?: pulumi.Input<boolean>;
    /**
     * Indicates whether or not this admin user is editable/deletable.
     */
    isNonEditable?: pulumi.Input<boolean>;
    /**
     * Log range limit.
     */
    logsLimit?: pulumi.Input<string>;
    /**
     * The Name of the admin role
     */
    name?: pulumi.Input<string>;
    /**
     * Request method for which the rule must be applied. If not set, rule will be applied to all methods
     */
    permissions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Policy access permission.
     */
    policyAccess?: pulumi.Input<string>;
    /**
     * Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
     * value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
     * which rule orders this admin can access.
     */
    rank?: pulumi.Input<number>;
    /**
     * Report access permission.
     */
    reportAccess?: pulumi.Input<string>;
    /**
     * Time duration allocated to the report dashboard.
     */
    reportTimeDuration?: pulumi.Input<number>;
    /**
     * The admin role type. ()This attribute is subject to change.)
     */
    roleType?: pulumi.Input<string>;
    /**
     * Username access permission. When set to NONE, the username will be obfuscated.
     */
    usernameAccess?: pulumi.Input<string>;
}
