// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The **zia_url_filtering_rules** resource creates and manages a URL filtering rules within the Zscaler Internet Access cloud.
 *
 * ## Example Usage
 *
 * ### BLOCK ACTION
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@bdzscaler/pulumi-zia";
 *
 * const _this = new zia.URLFilteringRules("this", {
 *     action: "BLOCK",
 *     description: "Example",
 *     deviceTrustLevels: [
 *         "UNKNOWN_DEVICETRUSTLEVEL",
 *         "LOW_TRUST",
 *         "MEDIUM_TRUST",
 *         "HIGH_TRUST",
 *     ],
 *     order: 1,
 *     protocols: ["ANY_RULE"],
 *     requestMethods: [
 *         "CONNECT",
 *         "DELETE",
 *         "GET",
 *         "HEAD",
 *         "OPTIONS",
 *         "OTHER",
 *         "POST",
 *         "PUT",
 *         "TRACE",
 *     ],
 *     state: "ENABLED",
 *     urlCategories: ["ANY"],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### ISOLATE ACTION
 *
 * ⚠️ **WARNING 1:**: Creating a URL Filtering rule with the action of `ISOLATE` requires the Cloud Browser Isolation subscription. To learn more, contact Zscaler Support or your local account team.
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@bdzscaler/pulumi-zia";
 * import * as zia from "@pulumi/zia";
 *
 * const thisCbiProfile = zia.getCbiProfile({
 *     name: "BD_SA_Profile1_ZIA",
 * });
 * const thisURLFilteringRules = new zia.URLFilteringRules("thisURLFilteringRules", {
 *     description: "Example",
 *     state: "ENABLED",
 *     action: "ISOLATE",
 *     order: 1,
 *     urlCategories: ["ANY"],
 *     deviceTrustLevels: [
 *         "UNKNOWN_DEVICETRUSTLEVEL",
 *         "LOW_TRUST",
 *         "MEDIUM_TRUST",
 *         "HIGH_TRUST",
 *     ],
 *     protocols: [
 *         "HTTPS_RULE",
 *         "HTTP_RULE",
 *     ],
 *     requestMethods: [
 *         "CONNECT",
 *         "DELETE",
 *         "GET",
 *         "HEAD",
 *         "OPTIONS",
 *         "OTHER",
 *         "POST",
 *         "PUT",
 *         "TRACE",
 *     ],
 *     cbiProfiles: [{
 *         id: thisCbiProfile.then(thisCbiProfile => thisCbiProfile.id),
 *         name: thisCbiProfile.then(thisCbiProfile => thisCbiProfile.name),
 *         url: thisCbiProfile.then(thisCbiProfile => thisCbiProfile.url),
 *     }],
 *     userAgentTypes: [
 *         "OPERA",
 *         "FIREFOX",
 *         "MSIE",
 *         "MSEDGE",
 *         "CHROME",
 *         "SAFARI",
 *         "MSCHREDGE",
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
 *
 * Visit
 *
 * **zia_url_filtering_rules** can be imported by using `<RULE_ID>` or `<RULE_NAME>` as the import ID.
 *
 * For example:
 *
 * ```sh
 * $ pulumi import zia:index/uRLFilteringRules:URLFilteringRules example <rule_id>
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import zia:index/uRLFilteringRules:URLFilteringRules example <rule_name>
 * ```
 */
export class URLFilteringRules extends pulumi.CustomResource {
    /**
     * Get an existing URLFilteringRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: URLFilteringRulesState, opts?: pulumi.CustomResourceOptions): URLFilteringRules {
        return new URLFilteringRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/uRLFilteringRules:URLFilteringRules';

    /**
     * Returns true if the given object is an instance of URLFilteringRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is URLFilteringRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === URLFilteringRules.__pulumiType;
    }

    /**
     * Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If blockOverride is not set, `BLOCK` action cannot be overridden.
     */
    public readonly blockOverride!: pulumi.Output<boolean | undefined>;
    /**
     * The cloud browser isolation profile to which the ISOLATE action is applied in the URL Filtering Policy rules. This block is required when the attribute `action` is set to `ISOLATE`
     */
    public readonly cbiProfiles!: pulumi.Output<outputs.URLFilteringRulesCbiProfile[] | undefined>;
    /**
     * If set to true, the CIPA Compliance rule is enabled
     */
    public readonly ciparule!: pulumi.Output<boolean | undefined>;
    /**
     * The departments to which the Firewall Filtering policy rule applies
     */
    public readonly departments!: pulumi.Output<outputs.URLFilteringRulesDepartments>;
    /**
     * Additional information about the rule
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    public readonly deviceGroups!: pulumi.Output<outputs.URLFilteringRulesDeviceGroups>;
    /**
     * List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
     */
    public readonly deviceTrustLevels!: pulumi.Output<string[] | undefined>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    public readonly devices!: pulumi.Output<outputs.URLFilteringRulesDevices>;
    /**
     * URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.
     */
    public readonly endUserNotificationUrl!: pulumi.Output<string | undefined>;
    /**
     * Enforce a set a validity time period for the URL Filtering rule.
     */
    public readonly enforceTimeValidity!: pulumi.Output<boolean | undefined>;
    /**
     * The groups to which the Firewall Filtering policy rule applies
     */
    public readonly groups!: pulumi.Output<outputs.URLFilteringRulesGroups>;
    /**
     * The URL Filtering rule's label.
     */
    public readonly labels!: pulumi.Output<outputs.URLFilteringRulesLabels>;
    /**
     * The location groups to which the Firewall Filtering policy rule applies
     */
    public readonly locationGroups!: pulumi.Output<outputs.URLFilteringRulesLocationGroups>;
    /**
     * The locations to which the Firewall Filtering policy rule applies
     */
    public readonly locations!: pulumi.Output<outputs.URLFilteringRulesLocations>;
    /**
     * Name of the Firewall Filtering policy rule
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Order of execution of rule with respect to other URL Filtering rules
     */
    public readonly order!: pulumi.Output<number>;
    /**
     * Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.
     */
    public readonly overrideGroups!: pulumi.Output<outputs.URLFilteringRulesOverrideGroups>;
    /**
     * Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.
     */
    public readonly overrideUsers!: pulumi.Output<outputs.URLFilteringRulesOverrideUsers>;
    /**
     * Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`, `WEBSOCKETSSL_RULE`, `WEBSOCKET_RULE`,
     */
    public readonly protocols!: pulumi.Output<string[]>;
    /**
     * Admin rank of the admin who creates this rule
     */
    public readonly rank!: pulumi.Output<number | undefined>;
    /**
     * Request method for which the rule must be applied. If not set, rule will be applied to all methods
     */
    public readonly requestMethods!: pulumi.Output<string[] | undefined>;
    /**
     * URL Filtering Rule ID
     */
    public /*out*/ readonly ruleId!: pulumi.Output<number>;
    /**
     * Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
     */
    public readonly sizeQuota!: pulumi.Output<number | undefined>;
    /**
     * Rule State
     */
    public readonly state!: pulumi.Output<string | undefined>;
    /**
     * Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
     */
    public readonly timeQuota!: pulumi.Output<number | undefined>;
    /**
     * The time interval in which the Firewall Filtering policy rule applies
     */
    public readonly timeWindows!: pulumi.Output<outputs.URLFilteringRulesTimeWindows>;
    /**
     * List of URL categories for which rule must be applied
     */
    public readonly urlCategories!: pulumi.Output<string[] | undefined>;
    /**
     * Supported User Agent Types
     */
    public readonly userAgentTypes!: pulumi.Output<string[] | undefined>;
    /**
     * Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
     */
    public readonly userRiskScoreLevels!: pulumi.Output<string[] | undefined>;
    /**
     * The users to which the Firewall Filtering policy rule applies
     */
    public readonly users!: pulumi.Output<outputs.URLFilteringRulesUsers>;
    /**
     * If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.
     */
    public readonly validityEndTime!: pulumi.Output<number | undefined>;
    /**
     * If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.
     */
    public readonly validityStartTime!: pulumi.Output<number | undefined>;
    /**
     * If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.
     */
    public readonly validityTimeZoneId!: pulumi.Output<string | undefined>;
    /**
     * The list of preconfigured workload groups to which the policy must be applied
     */
    public readonly workloadGroups!: pulumi.Output<outputs.URLFilteringRulesWorkloadGroup[]>;

    /**
     * Create a URLFilteringRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: URLFilteringRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: URLFilteringRulesArgs | URLFilteringRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as URLFilteringRulesState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["blockOverride"] = state ? state.blockOverride : undefined;
            resourceInputs["cbiProfiles"] = state ? state.cbiProfiles : undefined;
            resourceInputs["ciparule"] = state ? state.ciparule : undefined;
            resourceInputs["departments"] = state ? state.departments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceGroups"] = state ? state.deviceGroups : undefined;
            resourceInputs["deviceTrustLevels"] = state ? state.deviceTrustLevels : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["endUserNotificationUrl"] = state ? state.endUserNotificationUrl : undefined;
            resourceInputs["enforceTimeValidity"] = state ? state.enforceTimeValidity : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["locationGroups"] = state ? state.locationGroups : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["overrideGroups"] = state ? state.overrideGroups : undefined;
            resourceInputs["overrideUsers"] = state ? state.overrideUsers : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["rank"] = state ? state.rank : undefined;
            resourceInputs["requestMethods"] = state ? state.requestMethods : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["sizeQuota"] = state ? state.sizeQuota : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeQuota"] = state ? state.timeQuota : undefined;
            resourceInputs["timeWindows"] = state ? state.timeWindows : undefined;
            resourceInputs["urlCategories"] = state ? state.urlCategories : undefined;
            resourceInputs["userAgentTypes"] = state ? state.userAgentTypes : undefined;
            resourceInputs["userRiskScoreLevels"] = state ? state.userRiskScoreLevels : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["validityEndTime"] = state ? state.validityEndTime : undefined;
            resourceInputs["validityStartTime"] = state ? state.validityStartTime : undefined;
            resourceInputs["validityTimeZoneId"] = state ? state.validityTimeZoneId : undefined;
            resourceInputs["workloadGroups"] = state ? state.workloadGroups : undefined;
        } else {
            const args = argsOrState as URLFilteringRulesArgs | undefined;
            if ((!args || args.protocols === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocols'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["blockOverride"] = args ? args.blockOverride : undefined;
            resourceInputs["cbiProfiles"] = args ? args.cbiProfiles : undefined;
            resourceInputs["ciparule"] = args ? args.ciparule : undefined;
            resourceInputs["departments"] = args ? args.departments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceGroups"] = args ? args.deviceGroups : undefined;
            resourceInputs["deviceTrustLevels"] = args ? args.deviceTrustLevels : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["endUserNotificationUrl"] = args ? args.endUserNotificationUrl : undefined;
            resourceInputs["enforceTimeValidity"] = args ? args.enforceTimeValidity : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["locationGroups"] = args ? args.locationGroups : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["overrideGroups"] = args ? args.overrideGroups : undefined;
            resourceInputs["overrideUsers"] = args ? args.overrideUsers : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["rank"] = args ? args.rank : undefined;
            resourceInputs["requestMethods"] = args ? args.requestMethods : undefined;
            resourceInputs["sizeQuota"] = args ? args.sizeQuota : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timeQuota"] = args ? args.timeQuota : undefined;
            resourceInputs["timeWindows"] = args ? args.timeWindows : undefined;
            resourceInputs["urlCategories"] = args ? args.urlCategories : undefined;
            resourceInputs["userAgentTypes"] = args ? args.userAgentTypes : undefined;
            resourceInputs["userRiskScoreLevels"] = args ? args.userRiskScoreLevels : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["validityEndTime"] = args ? args.validityEndTime : undefined;
            resourceInputs["validityStartTime"] = args ? args.validityStartTime : undefined;
            resourceInputs["validityTimeZoneId"] = args ? args.validityTimeZoneId : undefined;
            resourceInputs["workloadGroups"] = args ? args.workloadGroups : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(URLFilteringRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering URLFilteringRules resources.
 */
export interface URLFilteringRulesState {
    /**
     * Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`
     */
    action?: pulumi.Input<string>;
    /**
     * When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If blockOverride is not set, `BLOCK` action cannot be overridden.
     */
    blockOverride?: pulumi.Input<boolean>;
    /**
     * The cloud browser isolation profile to which the ISOLATE action is applied in the URL Filtering Policy rules. This block is required when the attribute `action` is set to `ISOLATE`
     */
    cbiProfiles?: pulumi.Input<pulumi.Input<inputs.URLFilteringRulesCbiProfile>[]>;
    /**
     * If set to true, the CIPA Compliance rule is enabled
     */
    ciparule?: pulumi.Input<boolean>;
    /**
     * The departments to which the Firewall Filtering policy rule applies
     */
    departments?: pulumi.Input<inputs.URLFilteringRulesDepartments>;
    /**
     * Additional information about the rule
     */
    description?: pulumi.Input<string>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    deviceGroups?: pulumi.Input<inputs.URLFilteringRulesDeviceGroups>;
    /**
     * List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
     */
    deviceTrustLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    devices?: pulumi.Input<inputs.URLFilteringRulesDevices>;
    /**
     * URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.
     */
    endUserNotificationUrl?: pulumi.Input<string>;
    /**
     * Enforce a set a validity time period for the URL Filtering rule.
     */
    enforceTimeValidity?: pulumi.Input<boolean>;
    /**
     * The groups to which the Firewall Filtering policy rule applies
     */
    groups?: pulumi.Input<inputs.URLFilteringRulesGroups>;
    /**
     * The URL Filtering rule's label.
     */
    labels?: pulumi.Input<inputs.URLFilteringRulesLabels>;
    /**
     * The location groups to which the Firewall Filtering policy rule applies
     */
    locationGroups?: pulumi.Input<inputs.URLFilteringRulesLocationGroups>;
    /**
     * The locations to which the Firewall Filtering policy rule applies
     */
    locations?: pulumi.Input<inputs.URLFilteringRulesLocations>;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name?: pulumi.Input<string>;
    /**
     * Order of execution of rule with respect to other URL Filtering rules
     */
    order?: pulumi.Input<number>;
    /**
     * Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.
     */
    overrideGroups?: pulumi.Input<inputs.URLFilteringRulesOverrideGroups>;
    /**
     * Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.
     */
    overrideUsers?: pulumi.Input<inputs.URLFilteringRulesOverrideUsers>;
    /**
     * Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`, `WEBSOCKETSSL_RULE`, `WEBSOCKET_RULE`,
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Admin rank of the admin who creates this rule
     */
    rank?: pulumi.Input<number>;
    /**
     * Request method for which the rule must be applied. If not set, rule will be applied to all methods
     */
    requestMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * URL Filtering Rule ID
     */
    ruleId?: pulumi.Input<number>;
    /**
     * Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
     */
    sizeQuota?: pulumi.Input<number>;
    /**
     * Rule State
     */
    state?: pulumi.Input<string>;
    /**
     * Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
     */
    timeQuota?: pulumi.Input<number>;
    /**
     * The time interval in which the Firewall Filtering policy rule applies
     */
    timeWindows?: pulumi.Input<inputs.URLFilteringRulesTimeWindows>;
    /**
     * List of URL categories for which rule must be applied
     */
    urlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Supported User Agent Types
     */
    userAgentTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
     */
    userRiskScoreLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The users to which the Firewall Filtering policy rule applies
     */
    users?: pulumi.Input<inputs.URLFilteringRulesUsers>;
    /**
     * If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.
     */
    validityEndTime?: pulumi.Input<number>;
    /**
     * If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.
     */
    validityStartTime?: pulumi.Input<number>;
    /**
     * If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.
     */
    validityTimeZoneId?: pulumi.Input<string>;
    /**
     * The list of preconfigured workload groups to which the policy must be applied
     */
    workloadGroups?: pulumi.Input<pulumi.Input<inputs.URLFilteringRulesWorkloadGroup>[]>;
}

/**
 * The set of arguments for constructing a URLFilteringRules resource.
 */
export interface URLFilteringRulesArgs {
    /**
     * Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`
     */
    action?: pulumi.Input<string>;
    /**
     * When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If blockOverride is not set, `BLOCK` action cannot be overridden.
     */
    blockOverride?: pulumi.Input<boolean>;
    /**
     * The cloud browser isolation profile to which the ISOLATE action is applied in the URL Filtering Policy rules. This block is required when the attribute `action` is set to `ISOLATE`
     */
    cbiProfiles?: pulumi.Input<pulumi.Input<inputs.URLFilteringRulesCbiProfile>[]>;
    /**
     * If set to true, the CIPA Compliance rule is enabled
     */
    ciparule?: pulumi.Input<boolean>;
    /**
     * The departments to which the Firewall Filtering policy rule applies
     */
    departments?: pulumi.Input<inputs.URLFilteringRulesDepartments>;
    /**
     * Additional information about the rule
     */
    description?: pulumi.Input<string>;
    /**
     * This field is applicable for devices that are managed using Zscaler Client Connector.
     */
    deviceGroups?: pulumi.Input<inputs.URLFilteringRulesDeviceGroups>;
    /**
     * List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
     */
    deviceTrustLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name-ID pairs of devices for which rule must be applied.
     */
    devices?: pulumi.Input<inputs.URLFilteringRulesDevices>;
    /**
     * URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.
     */
    endUserNotificationUrl?: pulumi.Input<string>;
    /**
     * Enforce a set a validity time period for the URL Filtering rule.
     */
    enforceTimeValidity?: pulumi.Input<boolean>;
    /**
     * The groups to which the Firewall Filtering policy rule applies
     */
    groups?: pulumi.Input<inputs.URLFilteringRulesGroups>;
    /**
     * The URL Filtering rule's label.
     */
    labels?: pulumi.Input<inputs.URLFilteringRulesLabels>;
    /**
     * The location groups to which the Firewall Filtering policy rule applies
     */
    locationGroups?: pulumi.Input<inputs.URLFilteringRulesLocationGroups>;
    /**
     * The locations to which the Firewall Filtering policy rule applies
     */
    locations?: pulumi.Input<inputs.URLFilteringRulesLocations>;
    /**
     * Name of the Firewall Filtering policy rule
     */
    name?: pulumi.Input<string>;
    /**
     * Order of execution of rule with respect to other URL Filtering rules
     */
    order?: pulumi.Input<number>;
    /**
     * Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.
     */
    overrideGroups?: pulumi.Input<inputs.URLFilteringRulesOverrideGroups>;
    /**
     * Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.
     */
    overrideUsers?: pulumi.Input<inputs.URLFilteringRulesOverrideUsers>;
    /**
     * Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`, `WEBSOCKETSSL_RULE`, `WEBSOCKET_RULE`,
     */
    protocols: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Admin rank of the admin who creates this rule
     */
    rank?: pulumi.Input<number>;
    /**
     * Request method for which the rule must be applied. If not set, rule will be applied to all methods
     */
    requestMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
     */
    sizeQuota?: pulumi.Input<number>;
    /**
     * Rule State
     */
    state?: pulumi.Input<string>;
    /**
     * Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
     */
    timeQuota?: pulumi.Input<number>;
    /**
     * The time interval in which the Firewall Filtering policy rule applies
     */
    timeWindows?: pulumi.Input<inputs.URLFilteringRulesTimeWindows>;
    /**
     * List of URL categories for which rule must be applied
     */
    urlCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Supported User Agent Types
     */
    userAgentTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
     */
    userRiskScoreLevels?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The users to which the Firewall Filtering policy rule applies
     */
    users?: pulumi.Input<inputs.URLFilteringRulesUsers>;
    /**
     * If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.
     */
    validityEndTime?: pulumi.Input<number>;
    /**
     * If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.
     */
    validityStartTime?: pulumi.Input<number>;
    /**
     * If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.
     */
    validityTimeZoneId?: pulumi.Input<string>;
    /**
     * The list of preconfigured workload groups to which the policy must be applied
     */
    workloadGroups?: pulumi.Input<pulumi.Input<inputs.URLFilteringRulesWorkloadGroup>[]>;
}
