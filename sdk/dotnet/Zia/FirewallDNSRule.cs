// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    [ZiaResourceType("zia:index/firewallDNSRule:FirewallDNSRule")]
    public partial class FirewallDNSRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing,
        /// blocking, or redirecting the traffic.
        /// </summary>
        [Output("action")]
        public Output<string?> Action { get; private set; } = null!;

        /// <summary>
        /// list of nw application groups
        /// </summary>
        [Output("applicationGroups")]
        public Output<Outputs.FirewallDNSRuleApplicationGroups?> ApplicationGroups { get; private set; } = null!;

        /// <summary>
        /// User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
        /// specific network service application.
        /// </summary>
        [Output("applications")]
        public Output<ImmutableArray<string>> Applications { get; private set; } = null!;

        /// <summary>
        /// The IP address to which the traffic will be redirected to when the DNAT rule is triggered. If not set, no redirection is
        /// done to specific IP addresses.
        /// </summary>
        [Output("blockResponseCode")]
        public Output<string?> BlockResponseCode { get; private set; } = null!;

        /// <summary>
        /// A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        /// </summary>
        [Output("capturePcap")]
        public Output<bool> CapturePcap { get; private set; } = null!;

        /// <summary>
        /// If set to true, the default rule is applied
        /// </summary>
        [Output("defaultRule")]
        public Output<bool?> DefaultRule { get; private set; } = null!;

        /// <summary>
        /// list of departments for which rule must be applied
        /// </summary>
        [Output("departments")]
        public Output<Outputs.FirewallDNSRuleDepartments?> Departments { get; private set; } = null!;

        /// <summary>
        /// Additional information about the rule
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        /// </summary>
        [Output("destAddresses")]
        public Output<ImmutableArray<string>> DestAddresses { get; private set; } = null!;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        [Output("destCountries")]
        public Output<ImmutableArray<string>> DestCountries { get; private set; } = null!;

        /// <summary>
        /// Destination IP categories to which the rule applies. If not set, the rule is not restricted to specific categories.
        /// </summary>
        [Output("destIpCategories")]
        public Output<ImmutableArray<string>> DestIpCategories { get; private set; } = null!;

        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Output("destIpGroups")]
        public Output<Outputs.FirewallDNSRuleDestIpGroups?> DestIpGroups { get; private set; } = null!;

        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Output("destIpv6Groups")]
        public Output<Outputs.FirewallDNSRuleDestIpv6Groups?> DestIpv6Groups { get; private set; } = null!;

        /// <summary>
        /// This field is applicable for devices that are managed using Zscaler Client Connector.
        /// </summary>
        [Output("deviceGroups")]
        public Output<Outputs.FirewallDNSRuleDeviceGroups?> DeviceGroups { get; private set; } = null!;

        /// <summary>
        /// Name-ID pairs of devices for which rule must be applied.
        /// </summary>
        [Output("devices")]
        public Output<Outputs.FirewallDNSRuleDevices?> Devices { get; private set; } = null!;

        /// <summary>
        /// The DNS gateway used to redirect traffic, specified when the rule action is to redirect DNS request to an external DNS
        /// service
        /// </summary>
        [Output("dnsGateway")]
        public Output<Outputs.FirewallDNSRuleDnsGateway> DnsGateway { get; private set; } = null!;

        /// <summary>
        /// DNS request types to which the rule applies
        /// </summary>
        [Output("dnsRuleRequestTypes")]
        public Output<ImmutableArray<string>> DnsRuleRequestTypes { get; private set; } = null!;

        /// <summary>
        /// The EDNS ECS object which resolves DNS request
        /// </summary>
        [Output("ednsEcsObject")]
        public Output<Outputs.FirewallDNSRuleEdnsEcsObject> EdnsEcsObject { get; private set; } = null!;

        /// <summary>
        /// list of groups for which rule must be applied
        /// </summary>
        [Output("groups")]
        public Output<Outputs.FirewallDNSRuleGroups?> Groups { get; private set; } = null!;

        /// <summary>
        /// list of Labels that are applicable to the rule.
        /// </summary>
        [Output("labels")]
        public Output<Outputs.FirewallDNSRuleLabels?> Labels { get; private set; } = null!;

        /// <summary>
        /// list of locations groups
        /// </summary>
        [Output("locationGroups")]
        public Output<Outputs.FirewallDNSRuleLocationGroups?> LocationGroups { get; private set; } = null!;

        /// <summary>
        /// list of locations for which rule must be applied
        /// </summary>
        [Output("locations")]
        public Output<Outputs.FirewallDNSRuleLocations?> Locations { get; private set; } = null!;

        /// <summary>
        /// The name of the IPS Control rule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Rule order number. If omitted, the rule will be added to the end of the rule set.
        /// </summary>
        [Output("order")]
        public Output<int> Order { get; private set; } = null!;

        /// <summary>
        /// If set to true, a predefined rule is applied
        /// </summary>
        [Output("predefined")]
        public Output<bool?> Predefined { get; private set; } = null!;

        /// <summary>
        /// Protocol for the given rule. This field is not applicable to the Lite API.
        /// </summary>
        [Output("protocols")]
        public Output<ImmutableArray<string>> Protocols { get; private set; } = null!;

        /// <summary>
        /// The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
        /// be specified for the rule.
        /// </summary>
        [Output("rank")]
        public Output<int?> Rank { get; private set; } = null!;

        /// <summary>
        /// The IP address to which the traffic will be redirected to when the DNAT rule is triggered. If not set, no redirection is
        /// done to specific IP addresses.
        /// </summary>
        [Output("redirectIp")]
        public Output<string?> RedirectIp { get; private set; } = null!;

        /// <summary>
        /// URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
        /// to a specific URL category.
        /// </summary>
        [Output("resCategories")]
        public Output<ImmutableArray<string>> ResCategories { get; private set; } = null!;

        [Output("ruleId")]
        public Output<int> RuleId { get; private set; } = null!;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        [Output("sourceCountries")]
        public Output<ImmutableArray<string>> SourceCountries { get; private set; } = null!;

        /// <summary>
        /// list of Source IP address groups for which the rule is applicable. If not set, the rule is not restricted to a specific
        /// source IP address group.
        /// </summary>
        [Output("srcIpGroups")]
        public Output<Outputs.FirewallDNSRuleSrcIpGroups?> SrcIpGroups { get; private set; } = null!;

        /// <summary>
        /// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
        /// source IP address.
        /// </summary>
        [Output("srcIps")]
        public Output<ImmutableArray<string>> SrcIps { get; private set; } = null!;

        /// <summary>
        /// list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
        /// specific source IPv6 address group.
        /// </summary>
        [Output("srcIpv6Groups")]
        public Output<Outputs.FirewallDNSRuleSrcIpv6Groups?> SrcIpv6Groups { get; private set; } = null!;

        /// <summary>
        /// The state of the rule indicating whether it is enabled or disabled
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// The time interval in which the Firewall Filtering policy rule applies
        /// </summary>
        [Output("timeWindows")]
        public Output<Outputs.FirewallDNSRuleTimeWindows?> TimeWindows { get; private set; } = null!;

        /// <summary>
        /// list of users for which rule must be applied
        /// </summary>
        [Output("users")]
        public Output<Outputs.FirewallDNSRuleUsers?> Users { get; private set; } = null!;

        /// <summary>
        /// The ZPA IP pool specified when the rule action is to resolve domain names of ZPA applications to an ephemeral IP address
        /// from a preconfigured IP pool
        /// </summary>
        [Output("zpaIpGroup")]
        public Output<Outputs.FirewallDNSRuleZpaIpGroup> ZpaIpGroup { get; private set; } = null!;


        /// <summary>
        /// Create a FirewallDNSRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FirewallDNSRule(string name, FirewallDNSRuleArgs args, CustomResourceOptions? options = null)
            : base("zia:index/firewallDNSRule:FirewallDNSRule", name, args ?? new FirewallDNSRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FirewallDNSRule(string name, Input<string> id, FirewallDNSRuleState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/firewallDNSRule:FirewallDNSRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FirewallDNSRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FirewallDNSRule Get(string name, Input<string> id, FirewallDNSRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new FirewallDNSRule(name, id, state, options);
        }
    }

    public sealed class FirewallDNSRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing,
        /// blocking, or redirecting the traffic.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// list of nw application groups
        /// </summary>
        [Input("applicationGroups")]
        public Input<Inputs.FirewallDNSRuleApplicationGroupsArgs>? ApplicationGroups { get; set; }

        [Input("applications")]
        private InputList<string>? _applications;

        /// <summary>
        /// User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
        /// specific network service application.
        /// </summary>
        public InputList<string> Applications
        {
            get => _applications ?? (_applications = new InputList<string>());
            set => _applications = value;
        }

        /// <summary>
        /// The IP address to which the traffic will be redirected to when the DNAT rule is triggered. If not set, no redirection is
        /// done to specific IP addresses.
        /// </summary>
        [Input("blockResponseCode")]
        public Input<string>? BlockResponseCode { get; set; }

        /// <summary>
        /// A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        /// </summary>
        [Input("capturePcap")]
        public Input<bool>? CapturePcap { get; set; }

        /// <summary>
        /// If set to true, the default rule is applied
        /// </summary>
        [Input("defaultRule")]
        public Input<bool>? DefaultRule { get; set; }

        /// <summary>
        /// list of departments for which rule must be applied
        /// </summary>
        [Input("departments")]
        public Input<Inputs.FirewallDNSRuleDepartmentsArgs>? Departments { get; set; }

        /// <summary>
        /// Additional information about the rule
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destAddresses")]
        private InputList<string>? _destAddresses;

        /// <summary>
        /// Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        /// </summary>
        public InputList<string> DestAddresses
        {
            get => _destAddresses ?? (_destAddresses = new InputList<string>());
            set => _destAddresses = value;
        }

        [Input("destCountries")]
        private InputList<string>? _destCountries;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        public InputList<string> DestCountries
        {
            get => _destCountries ?? (_destCountries = new InputList<string>());
            set => _destCountries = value;
        }

        [Input("destIpCategories")]
        private InputList<string>? _destIpCategories;

        /// <summary>
        /// Destination IP categories to which the rule applies. If not set, the rule is not restricted to specific categories.
        /// </summary>
        public InputList<string> DestIpCategories
        {
            get => _destIpCategories ?? (_destIpCategories = new InputList<string>());
            set => _destIpCategories = value;
        }

        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Input("destIpGroups")]
        public Input<Inputs.FirewallDNSRuleDestIpGroupsArgs>? DestIpGroups { get; set; }

        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Input("destIpv6Groups")]
        public Input<Inputs.FirewallDNSRuleDestIpv6GroupsArgs>? DestIpv6Groups { get; set; }

        /// <summary>
        /// This field is applicable for devices that are managed using Zscaler Client Connector.
        /// </summary>
        [Input("deviceGroups")]
        public Input<Inputs.FirewallDNSRuleDeviceGroupsArgs>? DeviceGroups { get; set; }

        /// <summary>
        /// Name-ID pairs of devices for which rule must be applied.
        /// </summary>
        [Input("devices")]
        public Input<Inputs.FirewallDNSRuleDevicesArgs>? Devices { get; set; }

        /// <summary>
        /// The DNS gateway used to redirect traffic, specified when the rule action is to redirect DNS request to an external DNS
        /// service
        /// </summary>
        [Input("dnsGateway")]
        public Input<Inputs.FirewallDNSRuleDnsGatewayArgs>? DnsGateway { get; set; }

        [Input("dnsRuleRequestTypes")]
        private InputList<string>? _dnsRuleRequestTypes;

        /// <summary>
        /// DNS request types to which the rule applies
        /// </summary>
        public InputList<string> DnsRuleRequestTypes
        {
            get => _dnsRuleRequestTypes ?? (_dnsRuleRequestTypes = new InputList<string>());
            set => _dnsRuleRequestTypes = value;
        }

        /// <summary>
        /// The EDNS ECS object which resolves DNS request
        /// </summary>
        [Input("ednsEcsObject")]
        public Input<Inputs.FirewallDNSRuleEdnsEcsObjectArgs>? EdnsEcsObject { get; set; }

        /// <summary>
        /// list of groups for which rule must be applied
        /// </summary>
        [Input("groups")]
        public Input<Inputs.FirewallDNSRuleGroupsArgs>? Groups { get; set; }

        /// <summary>
        /// list of Labels that are applicable to the rule.
        /// </summary>
        [Input("labels")]
        public Input<Inputs.FirewallDNSRuleLabelsArgs>? Labels { get; set; }

        /// <summary>
        /// list of locations groups
        /// </summary>
        [Input("locationGroups")]
        public Input<Inputs.FirewallDNSRuleLocationGroupsArgs>? LocationGroups { get; set; }

        /// <summary>
        /// list of locations for which rule must be applied
        /// </summary>
        [Input("locations")]
        public Input<Inputs.FirewallDNSRuleLocationsArgs>? Locations { get; set; }

        /// <summary>
        /// The name of the IPS Control rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Rule order number. If omitted, the rule will be added to the end of the rule set.
        /// </summary>
        [Input("order", required: true)]
        public Input<int> Order { get; set; } = null!;

        /// <summary>
        /// If set to true, a predefined rule is applied
        /// </summary>
        [Input("predefined")]
        public Input<bool>? Predefined { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// Protocol for the given rule. This field is not applicable to the Lite API.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
        /// be specified for the rule.
        /// </summary>
        [Input("rank")]
        public Input<int>? Rank { get; set; }

        /// <summary>
        /// The IP address to which the traffic will be redirected to when the DNAT rule is triggered. If not set, no redirection is
        /// done to specific IP addresses.
        /// </summary>
        [Input("redirectIp")]
        public Input<string>? RedirectIp { get; set; }

        [Input("resCategories")]
        private InputList<string>? _resCategories;

        /// <summary>
        /// URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
        /// to a specific URL category.
        /// </summary>
        public InputList<string> ResCategories
        {
            get => _resCategories ?? (_resCategories = new InputList<string>());
            set => _resCategories = value;
        }

        [Input("sourceCountries")]
        private InputList<string>? _sourceCountries;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        public InputList<string> SourceCountries
        {
            get => _sourceCountries ?? (_sourceCountries = new InputList<string>());
            set => _sourceCountries = value;
        }

        /// <summary>
        /// list of Source IP address groups for which the rule is applicable. If not set, the rule is not restricted to a specific
        /// source IP address group.
        /// </summary>
        [Input("srcIpGroups")]
        public Input<Inputs.FirewallDNSRuleSrcIpGroupsArgs>? SrcIpGroups { get; set; }

        [Input("srcIps")]
        private InputList<string>? _srcIps;

        /// <summary>
        /// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
        /// source IP address.
        /// </summary>
        public InputList<string> SrcIps
        {
            get => _srcIps ?? (_srcIps = new InputList<string>());
            set => _srcIps = value;
        }

        /// <summary>
        /// list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
        /// specific source IPv6 address group.
        /// </summary>
        [Input("srcIpv6Groups")]
        public Input<Inputs.FirewallDNSRuleSrcIpv6GroupsArgs>? SrcIpv6Groups { get; set; }

        /// <summary>
        /// The state of the rule indicating whether it is enabled or disabled
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The time interval in which the Firewall Filtering policy rule applies
        /// </summary>
        [Input("timeWindows")]
        public Input<Inputs.FirewallDNSRuleTimeWindowsArgs>? TimeWindows { get; set; }

        /// <summary>
        /// list of users for which rule must be applied
        /// </summary>
        [Input("users")]
        public Input<Inputs.FirewallDNSRuleUsersArgs>? Users { get; set; }

        /// <summary>
        /// The ZPA IP pool specified when the rule action is to resolve domain names of ZPA applications to an ephemeral IP address
        /// from a preconfigured IP pool
        /// </summary>
        [Input("zpaIpGroup")]
        public Input<Inputs.FirewallDNSRuleZpaIpGroupArgs>? ZpaIpGroup { get; set; }

        public FirewallDNSRuleArgs()
        {
        }
        public static new FirewallDNSRuleArgs Empty => new FirewallDNSRuleArgs();
    }

    public sealed class FirewallDNSRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing,
        /// blocking, or redirecting the traffic.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// list of nw application groups
        /// </summary>
        [Input("applicationGroups")]
        public Input<Inputs.FirewallDNSRuleApplicationGroupsGetArgs>? ApplicationGroups { get; set; }

        [Input("applications")]
        private InputList<string>? _applications;

        /// <summary>
        /// User-defined network service applications on which the rule is applied. If not set, the rule is not restricted to a
        /// specific network service application.
        /// </summary>
        public InputList<string> Applications
        {
            get => _applications ?? (_applications = new InputList<string>());
            set => _applications = value;
        }

        /// <summary>
        /// The IP address to which the traffic will be redirected to when the DNAT rule is triggered. If not set, no redirection is
        /// done to specific IP addresses.
        /// </summary>
        [Input("blockResponseCode")]
        public Input<string>? BlockResponseCode { get; set; }

        /// <summary>
        /// A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        /// </summary>
        [Input("capturePcap")]
        public Input<bool>? CapturePcap { get; set; }

        /// <summary>
        /// If set to true, the default rule is applied
        /// </summary>
        [Input("defaultRule")]
        public Input<bool>? DefaultRule { get; set; }

        /// <summary>
        /// list of departments for which rule must be applied
        /// </summary>
        [Input("departments")]
        public Input<Inputs.FirewallDNSRuleDepartmentsGetArgs>? Departments { get; set; }

        /// <summary>
        /// Additional information about the rule
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destAddresses")]
        private InputList<string>? _destAddresses;

        /// <summary>
        /// Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        /// </summary>
        public InputList<string> DestAddresses
        {
            get => _destAddresses ?? (_destAddresses = new InputList<string>());
            set => _destAddresses = value;
        }

        [Input("destCountries")]
        private InputList<string>? _destCountries;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        public InputList<string> DestCountries
        {
            get => _destCountries ?? (_destCountries = new InputList<string>());
            set => _destCountries = value;
        }

        [Input("destIpCategories")]
        private InputList<string>? _destIpCategories;

        /// <summary>
        /// Destination IP categories to which the rule applies. If not set, the rule is not restricted to specific categories.
        /// </summary>
        public InputList<string> DestIpCategories
        {
            get => _destIpCategories ?? (_destIpCategories = new InputList<string>());
            set => _destIpCategories = value;
        }

        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Input("destIpGroups")]
        public Input<Inputs.FirewallDNSRuleDestIpGroupsGetArgs>? DestIpGroups { get; set; }

        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Input("destIpv6Groups")]
        public Input<Inputs.FirewallDNSRuleDestIpv6GroupsGetArgs>? DestIpv6Groups { get; set; }

        /// <summary>
        /// This field is applicable for devices that are managed using Zscaler Client Connector.
        /// </summary>
        [Input("deviceGroups")]
        public Input<Inputs.FirewallDNSRuleDeviceGroupsGetArgs>? DeviceGroups { get; set; }

        /// <summary>
        /// Name-ID pairs of devices for which rule must be applied.
        /// </summary>
        [Input("devices")]
        public Input<Inputs.FirewallDNSRuleDevicesGetArgs>? Devices { get; set; }

        /// <summary>
        /// The DNS gateway used to redirect traffic, specified when the rule action is to redirect DNS request to an external DNS
        /// service
        /// </summary>
        [Input("dnsGateway")]
        public Input<Inputs.FirewallDNSRuleDnsGatewayGetArgs>? DnsGateway { get; set; }

        [Input("dnsRuleRequestTypes")]
        private InputList<string>? _dnsRuleRequestTypes;

        /// <summary>
        /// DNS request types to which the rule applies
        /// </summary>
        public InputList<string> DnsRuleRequestTypes
        {
            get => _dnsRuleRequestTypes ?? (_dnsRuleRequestTypes = new InputList<string>());
            set => _dnsRuleRequestTypes = value;
        }

        /// <summary>
        /// The EDNS ECS object which resolves DNS request
        /// </summary>
        [Input("ednsEcsObject")]
        public Input<Inputs.FirewallDNSRuleEdnsEcsObjectGetArgs>? EdnsEcsObject { get; set; }

        /// <summary>
        /// list of groups for which rule must be applied
        /// </summary>
        [Input("groups")]
        public Input<Inputs.FirewallDNSRuleGroupsGetArgs>? Groups { get; set; }

        /// <summary>
        /// list of Labels that are applicable to the rule.
        /// </summary>
        [Input("labels")]
        public Input<Inputs.FirewallDNSRuleLabelsGetArgs>? Labels { get; set; }

        /// <summary>
        /// list of locations groups
        /// </summary>
        [Input("locationGroups")]
        public Input<Inputs.FirewallDNSRuleLocationGroupsGetArgs>? LocationGroups { get; set; }

        /// <summary>
        /// list of locations for which rule must be applied
        /// </summary>
        [Input("locations")]
        public Input<Inputs.FirewallDNSRuleLocationsGetArgs>? Locations { get; set; }

        /// <summary>
        /// The name of the IPS Control rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Rule order number. If omitted, the rule will be added to the end of the rule set.
        /// </summary>
        [Input("order")]
        public Input<int>? Order { get; set; }

        /// <summary>
        /// If set to true, a predefined rule is applied
        /// </summary>
        [Input("predefined")]
        public Input<bool>? Predefined { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// Protocol for the given rule. This field is not applicable to the Lite API.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
        /// be specified for the rule.
        /// </summary>
        [Input("rank")]
        public Input<int>? Rank { get; set; }

        /// <summary>
        /// The IP address to which the traffic will be redirected to when the DNAT rule is triggered. If not set, no redirection is
        /// done to specific IP addresses.
        /// </summary>
        [Input("redirectIp")]
        public Input<string>? RedirectIp { get; set; }

        [Input("resCategories")]
        private InputList<string>? _resCategories;

        /// <summary>
        /// URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
        /// to a specific URL category.
        /// </summary>
        public InputList<string> ResCategories
        {
            get => _resCategories ?? (_resCategories = new InputList<string>());
            set => _resCategories = value;
        }

        [Input("ruleId")]
        public Input<int>? RuleId { get; set; }

        [Input("sourceCountries")]
        private InputList<string>? _sourceCountries;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        public InputList<string> SourceCountries
        {
            get => _sourceCountries ?? (_sourceCountries = new InputList<string>());
            set => _sourceCountries = value;
        }

        /// <summary>
        /// list of Source IP address groups for which the rule is applicable. If not set, the rule is not restricted to a specific
        /// source IP address group.
        /// </summary>
        [Input("srcIpGroups")]
        public Input<Inputs.FirewallDNSRuleSrcIpGroupsGetArgs>? SrcIpGroups { get; set; }

        [Input("srcIps")]
        private InputList<string>? _srcIps;

        /// <summary>
        /// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
        /// source IP address.
        /// </summary>
        public InputList<string> SrcIps
        {
            get => _srcIps ?? (_srcIps = new InputList<string>());
            set => _srcIps = value;
        }

        /// <summary>
        /// list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
        /// specific source IPv6 address group.
        /// </summary>
        [Input("srcIpv6Groups")]
        public Input<Inputs.FirewallDNSRuleSrcIpv6GroupsGetArgs>? SrcIpv6Groups { get; set; }

        /// <summary>
        /// The state of the rule indicating whether it is enabled or disabled
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The time interval in which the Firewall Filtering policy rule applies
        /// </summary>
        [Input("timeWindows")]
        public Input<Inputs.FirewallDNSRuleTimeWindowsGetArgs>? TimeWindows { get; set; }

        /// <summary>
        /// list of users for which rule must be applied
        /// </summary>
        [Input("users")]
        public Input<Inputs.FirewallDNSRuleUsersGetArgs>? Users { get; set; }

        /// <summary>
        /// The ZPA IP pool specified when the rule action is to resolve domain names of ZPA applications to an ephemeral IP address
        /// from a preconfigured IP pool
        /// </summary>
        [Input("zpaIpGroup")]
        public Input<Inputs.FirewallDNSRuleZpaIpGroupGetArgs>? ZpaIpGroup { get; set; }

        public FirewallDNSRuleState()
        {
        }
        public static new FirewallDNSRuleState Empty => new FirewallDNSRuleState();
    }
}
