// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zia_traffic_forwarding_gre_tunnel** can be imported by using `&lt;TUNNEL_ID&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel example &lt;tunnel_id&gt;
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel example &lt;engine_name&gt;
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel")]
    public partial class TrafficForwardingGRETunnel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Additional information about this GRE tunnel
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// When within_country is enabled, you must set this to the country code.
        /// </summary>
        [Output("countryCode")]
        public Output<string> CountryCode { get; private set; } = null!;

        /// <summary>
        /// The start of the internal IP address in /29 CIDR range
        /// </summary>
        [Output("internalIpRange")]
        public Output<string?> InternalIpRange { get; private set; } = null!;

        /// <summary>
        /// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id
        /// are set to null
        /// </summary>
        [Output("ipUnnumbered")]
        public Output<bool> IpUnnumbered { get; private set; } = null!;

        /// <summary>
        /// The primary destination data center and virtual IP address (VIP) of the GRE tunnel
        /// </summary>
        [Output("primaryDestVips")]
        public Output<ImmutableArray<Outputs.TrafficForwardingGRETunnelPrimaryDestVip>> PrimaryDestVips { get; private set; } = null!;

        /// <summary>
        /// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
        /// </summary>
        [Output("secondaryDestVips")]
        public Output<ImmutableArray<Outputs.TrafficForwardingGRETunnelSecondaryDestVip>> SecondaryDestVips { get; private set; } = null!;

        /// <summary>
        /// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
        /// </summary>
        [Output("sourceIp")]
        public Output<string> SourceIp { get; private set; } = null!;

        /// <summary>
        /// The ID of the GRE tunnel.
        /// </summary>
        [Output("tunnelId")]
        public Output<int> TunnelId { get; private set; } = null!;

        /// <summary>
        /// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
        /// </summary>
        [Output("withinCountry")]
        public Output<bool> WithinCountry { get; private set; } = null!;


        /// <summary>
        /// Create a TrafficForwardingGRETunnel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TrafficForwardingGRETunnel(string name, TrafficForwardingGRETunnelArgs args, CustomResourceOptions? options = null)
            : base("zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel", name, args ?? new TrafficForwardingGRETunnelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TrafficForwardingGRETunnel(string name, Input<string> id, TrafficForwardingGRETunnelState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TrafficForwardingGRETunnel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TrafficForwardingGRETunnel Get(string name, Input<string> id, TrafficForwardingGRETunnelState? state = null, CustomResourceOptions? options = null)
        {
            return new TrafficForwardingGRETunnel(name, id, state, options);
        }
    }

    public sealed class TrafficForwardingGRETunnelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional information about this GRE tunnel
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// When within_country is enabled, you must set this to the country code.
        /// </summary>
        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// The start of the internal IP address in /29 CIDR range
        /// </summary>
        [Input("internalIpRange")]
        public Input<string>? InternalIpRange { get; set; }

        /// <summary>
        /// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id
        /// are set to null
        /// </summary>
        [Input("ipUnnumbered")]
        public Input<bool>? IpUnnumbered { get; set; }

        [Input("primaryDestVips")]
        private InputList<Inputs.TrafficForwardingGRETunnelPrimaryDestVipArgs>? _primaryDestVips;

        /// <summary>
        /// The primary destination data center and virtual IP address (VIP) of the GRE tunnel
        /// </summary>
        public InputList<Inputs.TrafficForwardingGRETunnelPrimaryDestVipArgs> PrimaryDestVips
        {
            get => _primaryDestVips ?? (_primaryDestVips = new InputList<Inputs.TrafficForwardingGRETunnelPrimaryDestVipArgs>());
            set => _primaryDestVips = value;
        }

        [Input("secondaryDestVips")]
        private InputList<Inputs.TrafficForwardingGRETunnelSecondaryDestVipArgs>? _secondaryDestVips;

        /// <summary>
        /// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
        /// </summary>
        public InputList<Inputs.TrafficForwardingGRETunnelSecondaryDestVipArgs> SecondaryDestVips
        {
            get => _secondaryDestVips ?? (_secondaryDestVips = new InputList<Inputs.TrafficForwardingGRETunnelSecondaryDestVipArgs>());
            set => _secondaryDestVips = value;
        }

        /// <summary>
        /// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
        /// </summary>
        [Input("sourceIp", required: true)]
        public Input<string> SourceIp { get; set; } = null!;

        /// <summary>
        /// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
        /// </summary>
        [Input("withinCountry")]
        public Input<bool>? WithinCountry { get; set; }

        public TrafficForwardingGRETunnelArgs()
        {
        }
        public static new TrafficForwardingGRETunnelArgs Empty => new TrafficForwardingGRETunnelArgs();
    }

    public sealed class TrafficForwardingGRETunnelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional information about this GRE tunnel
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// When within_country is enabled, you must set this to the country code.
        /// </summary>
        [Input("countryCode")]
        public Input<string>? CountryCode { get; set; }

        /// <summary>
        /// The start of the internal IP address in /29 CIDR range
        /// </summary>
        [Input("internalIpRange")]
        public Input<string>? InternalIpRange { get; set; }

        /// <summary>
        /// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id
        /// are set to null
        /// </summary>
        [Input("ipUnnumbered")]
        public Input<bool>? IpUnnumbered { get; set; }

        [Input("primaryDestVips")]
        private InputList<Inputs.TrafficForwardingGRETunnelPrimaryDestVipGetArgs>? _primaryDestVips;

        /// <summary>
        /// The primary destination data center and virtual IP address (VIP) of the GRE tunnel
        /// </summary>
        public InputList<Inputs.TrafficForwardingGRETunnelPrimaryDestVipGetArgs> PrimaryDestVips
        {
            get => _primaryDestVips ?? (_primaryDestVips = new InputList<Inputs.TrafficForwardingGRETunnelPrimaryDestVipGetArgs>());
            set => _primaryDestVips = value;
        }

        [Input("secondaryDestVips")]
        private InputList<Inputs.TrafficForwardingGRETunnelSecondaryDestVipGetArgs>? _secondaryDestVips;

        /// <summary>
        /// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
        /// </summary>
        public InputList<Inputs.TrafficForwardingGRETunnelSecondaryDestVipGetArgs> SecondaryDestVips
        {
            get => _secondaryDestVips ?? (_secondaryDestVips = new InputList<Inputs.TrafficForwardingGRETunnelSecondaryDestVipGetArgs>());
            set => _secondaryDestVips = value;
        }

        /// <summary>
        /// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
        /// </summary>
        [Input("sourceIp")]
        public Input<string>? SourceIp { get; set; }

        /// <summary>
        /// The ID of the GRE tunnel.
        /// </summary>
        [Input("tunnelId")]
        public Input<int>? TunnelId { get; set; }

        /// <summary>
        /// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
        /// </summary>
        [Input("withinCountry")]
        public Input<bool>? WithinCountry { get; set; }

        public TrafficForwardingGRETunnelState()
        {
        }
        public static new TrafficForwardingGRETunnelState Empty => new TrafficForwardingGRETunnelState();
    }
}
