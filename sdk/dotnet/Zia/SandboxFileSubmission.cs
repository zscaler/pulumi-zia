// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [ZiaResourceType("zia:index/sandboxFileSubmission:SandboxFileSubmission")]
    public partial class SandboxFileSubmission : global::Pulumi.CustomResource
    {
        [Output("code")]
        public Output<int> Code { get; private set; } = null!;

        /// <summary>
        /// (Required) The path where the raw or archive files for submission are located.
        /// </summary>
        [Output("filePath")]
        public Output<string> FilePath { get; private set; } = null!;

        [Output("fileType")]
        public Output<string> FileType { get; private set; } = null!;

        /// <summary>
        /// (Optional) Submit file to sandbox even if found malicious during AV scan and a verdict already exists. Supported values are `true` or `false`
        /// </summary>
        [Output("force")]
        public Output<bool?> Force { get; private set; } = null!;

        [Output("md5")]
        public Output<string> Md5 { get; private set; } = null!;

        [Output("message")]
        public Output<string> Message { get; private set; } = null!;

        [Output("sandboxSubmission")]
        public Output<string> SandboxSubmission { get; private set; } = null!;

        /// <summary>
        /// (Required) The submission method to be used. Supportedd values are: `submit` and `discan`
        /// </summary>
        [Output("submissionMethod")]
        public Output<string> SubmissionMethod { get; private set; } = null!;

        [Output("virusName")]
        public Output<string> VirusName { get; private set; } = null!;

        [Output("virusType")]
        public Output<string> VirusType { get; private set; } = null!;


        /// <summary>
        /// Create a SandboxFileSubmission resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SandboxFileSubmission(string name, SandboxFileSubmissionArgs args, CustomResourceOptions? options = null)
            : base("zia:index/sandboxFileSubmission:SandboxFileSubmission", name, args ?? new SandboxFileSubmissionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SandboxFileSubmission(string name, Input<string> id, SandboxFileSubmissionState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/sandboxFileSubmission:SandboxFileSubmission", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SandboxFileSubmission resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SandboxFileSubmission Get(string name, Input<string> id, SandboxFileSubmissionState? state = null, CustomResourceOptions? options = null)
        {
            return new SandboxFileSubmission(name, id, state, options);
        }
    }

    public sealed class SandboxFileSubmissionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Required) The path where the raw or archive files for submission are located.
        /// </summary>
        [Input("filePath", required: true)]
        public Input<string> FilePath { get; set; } = null!;

        /// <summary>
        /// (Optional) Submit file to sandbox even if found malicious during AV scan and a verdict already exists. Supported values are `true` or `false`
        /// </summary>
        [Input("force")]
        public Input<bool>? Force { get; set; }

        /// <summary>
        /// (Required) The submission method to be used. Supportedd values are: `submit` and `discan`
        /// </summary>
        [Input("submissionMethod", required: true)]
        public Input<string> SubmissionMethod { get; set; } = null!;

        public SandboxFileSubmissionArgs()
        {
        }
        public static new SandboxFileSubmissionArgs Empty => new SandboxFileSubmissionArgs();
    }

    public sealed class SandboxFileSubmissionState : global::Pulumi.ResourceArgs
    {
        [Input("code")]
        public Input<int>? Code { get; set; }

        /// <summary>
        /// (Required) The path where the raw or archive files for submission are located.
        /// </summary>
        [Input("filePath")]
        public Input<string>? FilePath { get; set; }

        [Input("fileType")]
        public Input<string>? FileType { get; set; }

        /// <summary>
        /// (Optional) Submit file to sandbox even if found malicious during AV scan and a verdict already exists. Supported values are `true` or `false`
        /// </summary>
        [Input("force")]
        public Input<bool>? Force { get; set; }

        [Input("md5")]
        public Input<string>? Md5 { get; set; }

        [Input("message")]
        public Input<string>? Message { get; set; }

        [Input("sandboxSubmission")]
        public Input<string>? SandboxSubmission { get; set; }

        /// <summary>
        /// (Required) The submission method to be used. Supportedd values are: `submit` and `discan`
        /// </summary>
        [Input("submissionMethod")]
        public Input<string>? SubmissionMethod { get; set; }

        [Input("virusName")]
        public Input<string>? VirusName { get; set; }

        [Input("virusType")]
        public Input<string>? VirusType { get; set; }

        public SandboxFileSubmissionState()
        {
        }
        public static new SandboxFileSubmissionState Empty => new SandboxFileSubmissionState();
    }
}
