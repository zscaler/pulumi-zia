// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia.Inputs
{

    public sealed class GetLocationGroupsDynamicLocationGroupCriteriaInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("cities")]
        private InputList<Inputs.GetLocationGroupsDynamicLocationGroupCriteriaCityInputArgs>? _cities;

        /// <summary>
        /// (Block List)
        /// </summary>
        public InputList<Inputs.GetLocationGroupsDynamicLocationGroupCriteriaCityInputArgs> Cities
        {
            get => _cities ?? (_cities = new InputList<Inputs.GetLocationGroupsDynamicLocationGroupCriteriaCityInputArgs>());
            set => _cities = value;
        }

        [Input("countries")]
        private InputList<string>? _countries;

        /// <summary>
        /// (List of String) One or more countries from a predefined set
        /// </summary>
        public InputList<string> Countries
        {
            get => _countries ?? (_countries = new InputList<string>());
            set => _countries = value;
        }

        /// <summary>
        /// (Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.
        /// </summary>
        [Input("enableBandwidthControl", required: true)]
        public Input<bool> EnableBandwidthControl { get; set; } = null!;

        /// <summary>
        /// (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
        /// </summary>
        [Input("enableCaution", required: true)]
        public Input<bool> EnableCaution { get; set; } = null!;

        /// <summary>
        /// (Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        /// </summary>
        [Input("enableXffForwarding", required: true)]
        public Input<bool> EnableXffForwarding { get; set; } = null!;

        /// <summary>
        /// (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
        /// </summary>
        [Input("enforceAup", required: true)]
        public Input<bool> EnforceAup { get; set; } = null!;

        /// <summary>
        /// (Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        /// </summary>
        [Input("enforceAuthentication", required: true)]
        public Input<bool> EnforceAuthentication { get; set; } = null!;

        /// <summary>
        /// (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
        /// </summary>
        [Input("enforceFirewallControl", required: true)]
        public Input<bool> EnforceFirewallControl { get; set; } = null!;

        [Input("managedBies", required: true)]
        private InputList<Inputs.GetLocationGroupsDynamicLocationGroupCriteriaManagedByInputArgs>? _managedBies;

        /// <summary>
        /// (Block List)
        /// </summary>
        public InputList<Inputs.GetLocationGroupsDynamicLocationGroupCriteriaManagedByInputArgs> ManagedBies
        {
            get => _managedBies ?? (_managedBies = new InputList<Inputs.GetLocationGroupsDynamicLocationGroupCriteriaManagedByInputArgs>());
            set => _managedBies = value;
        }

        [Input("names")]
        private InputList<Inputs.GetLocationGroupsDynamicLocationGroupCriteriaNameInputArgs>? _names;

        /// <summary>
        /// Location group name
        /// </summary>
        public InputList<Inputs.GetLocationGroupsDynamicLocationGroupCriteriaNameInputArgs> Names
        {
            get => _names ?? (_names = new InputList<Inputs.GetLocationGroupsDynamicLocationGroupCriteriaNameInputArgs>());
            set => _names = value;
        }

        [Input("profiles")]
        private InputList<string>? _profiles;

        /// <summary>
        /// (List of String) One or more location profiles from a predefined set
        /// </summary>
        public InputList<string> Profiles
        {
            get => _profiles ?? (_profiles = new InputList<string>());
            set => _profiles = value;
        }

        public GetLocationGroupsDynamicLocationGroupCriteriaInputArgs()
        {
        }
        public static new GetLocationGroupsDynamicLocationGroupCriteriaInputArgs Empty => new GetLocationGroupsDynamicLocationGroupCriteriaInputArgs();
    }
}
