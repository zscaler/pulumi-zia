// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// The **zia_security_settings** resource alows you to add or remove a URL to the allow and denylist under the Advanced Threat Protection policy in the Zscaler Internet Access cloud or via the API.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zia_security_settings** can be imported by using `all_urls` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/securitySettings:SecuritySettings example all_urls
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/securitySettings:SecuritySettings")]
    public partial class SecuritySettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// URLs on the denylist for your organization. Allow up to 25000 URLs.
        /// </summary>
        [Output("blacklistUrls")]
        public Output<ImmutableArray<string>> BlacklistUrls { get; private set; } = null!;

        /// <summary>
        /// Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.
        /// </summary>
        [Output("whitelistUrls")]
        public Output<ImmutableArray<string>> WhitelistUrls { get; private set; } = null!;


        /// <summary>
        /// Create a SecuritySettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecuritySettings(string name, SecuritySettingsArgs? args = null, CustomResourceOptions? options = null)
            : base("zia:index/securitySettings:SecuritySettings", name, args ?? new SecuritySettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecuritySettings(string name, Input<string> id, SecuritySettingsState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/securitySettings:SecuritySettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecuritySettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecuritySettings Get(string name, Input<string> id, SecuritySettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new SecuritySettings(name, id, state, options);
        }
    }

    public sealed class SecuritySettingsArgs : global::Pulumi.ResourceArgs
    {
        [Input("blacklistUrls")]
        private InputList<string>? _blacklistUrls;

        /// <summary>
        /// URLs on the denylist for your organization. Allow up to 25000 URLs.
        /// </summary>
        public InputList<string> BlacklistUrls
        {
            get => _blacklistUrls ?? (_blacklistUrls = new InputList<string>());
            set => _blacklistUrls = value;
        }

        [Input("whitelistUrls")]
        private InputList<string>? _whitelistUrls;

        /// <summary>
        /// Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.
        /// </summary>
        public InputList<string> WhitelistUrls
        {
            get => _whitelistUrls ?? (_whitelistUrls = new InputList<string>());
            set => _whitelistUrls = value;
        }

        public SecuritySettingsArgs()
        {
        }
        public static new SecuritySettingsArgs Empty => new SecuritySettingsArgs();
    }

    public sealed class SecuritySettingsState : global::Pulumi.ResourceArgs
    {
        [Input("blacklistUrls")]
        private InputList<string>? _blacklistUrls;

        /// <summary>
        /// URLs on the denylist for your organization. Allow up to 25000 URLs.
        /// </summary>
        public InputList<string> BlacklistUrls
        {
            get => _blacklistUrls ?? (_blacklistUrls = new InputList<string>());
            set => _blacklistUrls = value;
        }

        [Input("whitelistUrls")]
        private InputList<string>? _whitelistUrls;

        /// <summary>
        /// Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.
        /// </summary>
        public InputList<string> WhitelistUrls
        {
            get => _whitelistUrls ?? (_whitelistUrls = new InputList<string>());
            set => _whitelistUrls = value;
        }

        public SecuritySettingsState()
        {
        }
        public static new SecuritySettingsState Empty => new SecuritySettingsState();
    }
}
