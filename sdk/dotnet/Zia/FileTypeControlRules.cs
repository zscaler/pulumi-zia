// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// The **zia_file_type_control_rules** resource allows the creation and management of ZIA file type control rules in the Zscaler Internet Access.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zia_file_type_control_rules** can be imported by using `&lt;RULE ID&gt;` or `&lt;RULE NAME&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/fileTypeControlRules:FileTypeControlRules example &lt;rule_id&gt;
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zia:index/fileTypeControlRules:FileTypeControlRules example &lt;rule_name&gt;
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/fileTypeControlRules:FileTypeControlRules")]
    public partial class FileTypeControlRules : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Flag to check whether a file has active content or not
        /// </summary>
        [Output("activeContent")]
        public Output<bool> ActiveContent { get; private set; } = null!;

        /// <summary>
        /// A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        /// </summary>
        [Output("capturePcap")]
        public Output<bool> CapturePcap { get; private set; } = null!;

        /// <summary>
        /// The list of cloud applications to which the File Type Control rule must be applied.
        /// </summary>
        [Output("cloudApplications")]
        public Output<ImmutableArray<string>> CloudApplications { get; private set; } = null!;

        /// <summary>
        /// The Name-ID pairs of departments to which the File Type Control rule must be applied.
        /// </summary>
        [Output("departments")]
        public Output<Outputs.FileTypeControlRulesDepartments?> Departments { get; private set; } = null!;

        /// <summary>
        /// The description of the File Type Control rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// This field is applicable for devices that are managed using Zscaler Client Connector.
        /// </summary>
        [Output("deviceGroups")]
        public Output<Outputs.FileTypeControlRulesDeviceGroups?> DeviceGroups { get; private set; } = null!;

        /// <summary>
        /// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
        /// using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
        /// Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
        /// </summary>
        [Output("deviceTrustLevels")]
        public Output<ImmutableArray<string>> DeviceTrustLevels { get; private set; } = null!;

        /// <summary>
        /// Name-ID pairs of devices for which rule must be applied.
        /// </summary>
        [Output("devices")]
        public Output<Outputs.FileTypeControlRulesDevices?> Devices { get; private set; } = null!;

        /// <summary>
        /// File type categories for which the policy is applied. If not set, the rule is applied across all file types.
        /// </summary>
        [Output("fileTypes")]
        public Output<ImmutableArray<string>> FileTypes { get; private set; } = null!;

        /// <summary>
        /// Action taken when traffic matches policy. This field is not applicable to the Lite API.
        /// </summary>
        [Output("filteringAction")]
        public Output<string> FilteringAction { get; private set; } = null!;

        /// <summary>
        /// The Name-ID pairs of groups to which the File Type Control rule must be applied.
        /// </summary>
        [Output("groups")]
        public Output<Outputs.FileTypeControlRulesGroups?> Groups { get; private set; } = null!;

        /// <summary>
        /// list of Labels that are applicable to the rule.
        /// </summary>
        [Output("labels")]
        public Output<Outputs.FileTypeControlRulesLabels?> Labels { get; private set; } = null!;

        /// <summary>
        /// Name-ID pairs of locations groups for which rule must be applied.
        /// </summary>
        [Output("locationGroups")]
        public Output<Outputs.FileTypeControlRulesLocationGroups?> LocationGroups { get; private set; } = null!;

        /// <summary>
        /// Name-ID pairs of locations for the which policy must be applied. If not set, policy is applied for all locations.
        /// </summary>
        [Output("locations")]
        public Output<Outputs.FileTypeControlRulesLocations?> Locations { get; private set; } = null!;

        /// <summary>
        /// Maximum file size (in KB) used for evaluation of the FTP rule
        /// </summary>
        [Output("maxSize")]
        public Output<int> MaxSize { get; private set; } = null!;

        /// <summary>
        /// Minimum file size (in KB) used for evaluation of the FTP rule
        /// </summary>
        [Output("minSize")]
        public Output<int> MinSize { get; private set; } = null!;

        /// <summary>
        /// The File Type Control policy rule name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// File operation performed. This field is not applicable to the Lite API.
        /// </summary>
        [Output("operation")]
        public Output<string> Operation { get; private set; } = null!;

        /// <summary>
        /// The rule order of execution for the File Type Control rule with respect to other rules.
        /// </summary>
        [Output("order")]
        public Output<int> Order { get; private set; } = null!;

        /// <summary>
        /// Protocol for the given rule. This field is not applicable to the Lite API.
        /// </summary>
        [Output("protocols")]
        public Output<ImmutableArray<string>> Protocols { get; private set; } = null!;

        /// <summary>
        /// Admin rank of the admin who creates this rule
        /// </summary>
        [Output("rank")]
        public Output<int> Rank { get; private set; } = null!;

        [Output("ruleId")]
        public Output<int> RuleId { get; private set; } = null!;

        /// <summary>
        /// Enables or disables the File Type Control rule.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// list of time interval during which rule must be enforced.
        /// </summary>
        [Output("timeWindows")]
        public Output<Outputs.FileTypeControlRulesTimeWindows?> TimeWindows { get; private set; } = null!;

        /// <summary>
        /// Flag to check whether a file has active content or not
        /// </summary>
        [Output("unscannable")]
        public Output<bool> Unscannable { get; private set; } = null!;

        /// <summary>
        /// List of URL categories for which rule must be applied
        /// </summary>
        [Output("urlCategories")]
        public Output<ImmutableArray<string>> UrlCategories { get; private set; } = null!;

        /// <summary>
        /// The Name-ID pairs of users to which the File Type Control rule must be applied.
        /// </summary>
        [Output("users")]
        public Output<Outputs.FileTypeControlRulesUsers?> Users { get; private set; } = null!;

        /// <summary>
        /// List of Source IP Anchoring-enabled ZPA Application Segments for which this rule is applicable
        /// </summary>
        [Output("zpaAppSegments")]
        public Output<ImmutableArray<Outputs.FileTypeControlRulesZpaAppSegment>> ZpaAppSegments { get; private set; } = null!;


        /// <summary>
        /// Create a FileTypeControlRules resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FileTypeControlRules(string name, FileTypeControlRulesArgs args, CustomResourceOptions? options = null)
            : base("zia:index/fileTypeControlRules:FileTypeControlRules", name, args ?? new FileTypeControlRulesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FileTypeControlRules(string name, Input<string> id, FileTypeControlRulesState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/fileTypeControlRules:FileTypeControlRules", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FileTypeControlRules resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FileTypeControlRules Get(string name, Input<string> id, FileTypeControlRulesState? state = null, CustomResourceOptions? options = null)
        {
            return new FileTypeControlRules(name, id, state, options);
        }
    }

    public sealed class FileTypeControlRulesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Flag to check whether a file has active content or not
        /// </summary>
        [Input("activeContent")]
        public Input<bool>? ActiveContent { get; set; }

        /// <summary>
        /// A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        /// </summary>
        [Input("capturePcap")]
        public Input<bool>? CapturePcap { get; set; }

        [Input("cloudApplications")]
        private InputList<string>? _cloudApplications;

        /// <summary>
        /// The list of cloud applications to which the File Type Control rule must be applied.
        /// </summary>
        public InputList<string> CloudApplications
        {
            get => _cloudApplications ?? (_cloudApplications = new InputList<string>());
            set => _cloudApplications = value;
        }

        /// <summary>
        /// The Name-ID pairs of departments to which the File Type Control rule must be applied.
        /// </summary>
        [Input("departments")]
        public Input<Inputs.FileTypeControlRulesDepartmentsArgs>? Departments { get; set; }

        /// <summary>
        /// The description of the File Type Control rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// This field is applicable for devices that are managed using Zscaler Client Connector.
        /// </summary>
        [Input("deviceGroups")]
        public Input<Inputs.FileTypeControlRulesDeviceGroupsArgs>? DeviceGroups { get; set; }

        [Input("deviceTrustLevels")]
        private InputList<string>? _deviceTrustLevels;

        /// <summary>
        /// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
        /// using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
        /// Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
        /// </summary>
        public InputList<string> DeviceTrustLevels
        {
            get => _deviceTrustLevels ?? (_deviceTrustLevels = new InputList<string>());
            set => _deviceTrustLevels = value;
        }

        /// <summary>
        /// Name-ID pairs of devices for which rule must be applied.
        /// </summary>
        [Input("devices")]
        public Input<Inputs.FileTypeControlRulesDevicesArgs>? Devices { get; set; }

        [Input("fileTypes")]
        private InputList<string>? _fileTypes;

        /// <summary>
        /// File type categories for which the policy is applied. If not set, the rule is applied across all file types.
        /// </summary>
        public InputList<string> FileTypes
        {
            get => _fileTypes ?? (_fileTypes = new InputList<string>());
            set => _fileTypes = value;
        }

        /// <summary>
        /// Action taken when traffic matches policy. This field is not applicable to the Lite API.
        /// </summary>
        [Input("filteringAction")]
        public Input<string>? FilteringAction { get; set; }

        /// <summary>
        /// The Name-ID pairs of groups to which the File Type Control rule must be applied.
        /// </summary>
        [Input("groups")]
        public Input<Inputs.FileTypeControlRulesGroupsArgs>? Groups { get; set; }

        /// <summary>
        /// list of Labels that are applicable to the rule.
        /// </summary>
        [Input("labels")]
        public Input<Inputs.FileTypeControlRulesLabelsArgs>? Labels { get; set; }

        /// <summary>
        /// Name-ID pairs of locations groups for which rule must be applied.
        /// </summary>
        [Input("locationGroups")]
        public Input<Inputs.FileTypeControlRulesLocationGroupsArgs>? LocationGroups { get; set; }

        /// <summary>
        /// Name-ID pairs of locations for the which policy must be applied. If not set, policy is applied for all locations.
        /// </summary>
        [Input("locations")]
        public Input<Inputs.FileTypeControlRulesLocationsArgs>? Locations { get; set; }

        /// <summary>
        /// Maximum file size (in KB) used for evaluation of the FTP rule
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// Minimum file size (in KB) used for evaluation of the FTP rule
        /// </summary>
        [Input("minSize")]
        public Input<int>? MinSize { get; set; }

        /// <summary>
        /// The File Type Control policy rule name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// File operation performed. This field is not applicable to the Lite API.
        /// </summary>
        [Input("operation")]
        public Input<string>? Operation { get; set; }

        /// <summary>
        /// The rule order of execution for the File Type Control rule with respect to other rules.
        /// </summary>
        [Input("order", required: true)]
        public Input<int> Order { get; set; } = null!;

        [Input("protocols", required: true)]
        private InputList<string>? _protocols;

        /// <summary>
        /// Protocol for the given rule. This field is not applicable to the Lite API.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// Admin rank of the admin who creates this rule
        /// </summary>
        [Input("rank")]
        public Input<int>? Rank { get; set; }

        /// <summary>
        /// Enables or disables the File Type Control rule.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// list of time interval during which rule must be enforced.
        /// </summary>
        [Input("timeWindows")]
        public Input<Inputs.FileTypeControlRulesTimeWindowsArgs>? TimeWindows { get; set; }

        /// <summary>
        /// Flag to check whether a file has active content or not
        /// </summary>
        [Input("unscannable")]
        public Input<bool>? Unscannable { get; set; }

        [Input("urlCategories")]
        private InputList<string>? _urlCategories;

        /// <summary>
        /// List of URL categories for which rule must be applied
        /// </summary>
        public InputList<string> UrlCategories
        {
            get => _urlCategories ?? (_urlCategories = new InputList<string>());
            set => _urlCategories = value;
        }

        /// <summary>
        /// The Name-ID pairs of users to which the File Type Control rule must be applied.
        /// </summary>
        [Input("users")]
        public Input<Inputs.FileTypeControlRulesUsersArgs>? Users { get; set; }

        [Input("zpaAppSegments")]
        private InputList<Inputs.FileTypeControlRulesZpaAppSegmentArgs>? _zpaAppSegments;

        /// <summary>
        /// List of Source IP Anchoring-enabled ZPA Application Segments for which this rule is applicable
        /// </summary>
        public InputList<Inputs.FileTypeControlRulesZpaAppSegmentArgs> ZpaAppSegments
        {
            get => _zpaAppSegments ?? (_zpaAppSegments = new InputList<Inputs.FileTypeControlRulesZpaAppSegmentArgs>());
            set => _zpaAppSegments = value;
        }

        public FileTypeControlRulesArgs()
        {
        }
        public static new FileTypeControlRulesArgs Empty => new FileTypeControlRulesArgs();
    }

    public sealed class FileTypeControlRulesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Flag to check whether a file has active content or not
        /// </summary>
        [Input("activeContent")]
        public Input<bool>? ActiveContent { get; set; }

        /// <summary>
        /// A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        /// </summary>
        [Input("capturePcap")]
        public Input<bool>? CapturePcap { get; set; }

        [Input("cloudApplications")]
        private InputList<string>? _cloudApplications;

        /// <summary>
        /// The list of cloud applications to which the File Type Control rule must be applied.
        /// </summary>
        public InputList<string> CloudApplications
        {
            get => _cloudApplications ?? (_cloudApplications = new InputList<string>());
            set => _cloudApplications = value;
        }

        /// <summary>
        /// The Name-ID pairs of departments to which the File Type Control rule must be applied.
        /// </summary>
        [Input("departments")]
        public Input<Inputs.FileTypeControlRulesDepartmentsGetArgs>? Departments { get; set; }

        /// <summary>
        /// The description of the File Type Control rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// This field is applicable for devices that are managed using Zscaler Client Connector.
        /// </summary>
        [Input("deviceGroups")]
        public Input<Inputs.FileTypeControlRulesDeviceGroupsGetArgs>? DeviceGroups { get; set; }

        [Input("deviceTrustLevels")]
        private InputList<string>? _deviceTrustLevels;

        /// <summary>
        /// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed
        /// using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the
        /// Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation.
        /// </summary>
        public InputList<string> DeviceTrustLevels
        {
            get => _deviceTrustLevels ?? (_deviceTrustLevels = new InputList<string>());
            set => _deviceTrustLevels = value;
        }

        /// <summary>
        /// Name-ID pairs of devices for which rule must be applied.
        /// </summary>
        [Input("devices")]
        public Input<Inputs.FileTypeControlRulesDevicesGetArgs>? Devices { get; set; }

        [Input("fileTypes")]
        private InputList<string>? _fileTypes;

        /// <summary>
        /// File type categories for which the policy is applied. If not set, the rule is applied across all file types.
        /// </summary>
        public InputList<string> FileTypes
        {
            get => _fileTypes ?? (_fileTypes = new InputList<string>());
            set => _fileTypes = value;
        }

        /// <summary>
        /// Action taken when traffic matches policy. This field is not applicable to the Lite API.
        /// </summary>
        [Input("filteringAction")]
        public Input<string>? FilteringAction { get; set; }

        /// <summary>
        /// The Name-ID pairs of groups to which the File Type Control rule must be applied.
        /// </summary>
        [Input("groups")]
        public Input<Inputs.FileTypeControlRulesGroupsGetArgs>? Groups { get; set; }

        /// <summary>
        /// list of Labels that are applicable to the rule.
        /// </summary>
        [Input("labels")]
        public Input<Inputs.FileTypeControlRulesLabelsGetArgs>? Labels { get; set; }

        /// <summary>
        /// Name-ID pairs of locations groups for which rule must be applied.
        /// </summary>
        [Input("locationGroups")]
        public Input<Inputs.FileTypeControlRulesLocationGroupsGetArgs>? LocationGroups { get; set; }

        /// <summary>
        /// Name-ID pairs of locations for the which policy must be applied. If not set, policy is applied for all locations.
        /// </summary>
        [Input("locations")]
        public Input<Inputs.FileTypeControlRulesLocationsGetArgs>? Locations { get; set; }

        /// <summary>
        /// Maximum file size (in KB) used for evaluation of the FTP rule
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// Minimum file size (in KB) used for evaluation of the FTP rule
        /// </summary>
        [Input("minSize")]
        public Input<int>? MinSize { get; set; }

        /// <summary>
        /// The File Type Control policy rule name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// File operation performed. This field is not applicable to the Lite API.
        /// </summary>
        [Input("operation")]
        public Input<string>? Operation { get; set; }

        /// <summary>
        /// The rule order of execution for the File Type Control rule with respect to other rules.
        /// </summary>
        [Input("order")]
        public Input<int>? Order { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// Protocol for the given rule. This field is not applicable to the Lite API.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// Admin rank of the admin who creates this rule
        /// </summary>
        [Input("rank")]
        public Input<int>? Rank { get; set; }

        [Input("ruleId")]
        public Input<int>? RuleId { get; set; }

        /// <summary>
        /// Enables or disables the File Type Control rule.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// list of time interval during which rule must be enforced.
        /// </summary>
        [Input("timeWindows")]
        public Input<Inputs.FileTypeControlRulesTimeWindowsGetArgs>? TimeWindows { get; set; }

        /// <summary>
        /// Flag to check whether a file has active content or not
        /// </summary>
        [Input("unscannable")]
        public Input<bool>? Unscannable { get; set; }

        [Input("urlCategories")]
        private InputList<string>? _urlCategories;

        /// <summary>
        /// List of URL categories for which rule must be applied
        /// </summary>
        public InputList<string> UrlCategories
        {
            get => _urlCategories ?? (_urlCategories = new InputList<string>());
            set => _urlCategories = value;
        }

        /// <summary>
        /// The Name-ID pairs of users to which the File Type Control rule must be applied.
        /// </summary>
        [Input("users")]
        public Input<Inputs.FileTypeControlRulesUsersGetArgs>? Users { get; set; }

        [Input("zpaAppSegments")]
        private InputList<Inputs.FileTypeControlRulesZpaAppSegmentGetArgs>? _zpaAppSegments;

        /// <summary>
        /// List of Source IP Anchoring-enabled ZPA Application Segments for which this rule is applicable
        /// </summary>
        public InputList<Inputs.FileTypeControlRulesZpaAppSegmentGetArgs> ZpaAppSegments
        {
            get => _zpaAppSegments ?? (_zpaAppSegments = new InputList<Inputs.FileTypeControlRulesZpaAppSegmentGetArgs>());
            set => _zpaAppSegments = value;
        }

        public FileTypeControlRulesState()
        {
        }
        public static new FileTypeControlRulesState Empty => new FileTypeControlRulesState();
    }
}
