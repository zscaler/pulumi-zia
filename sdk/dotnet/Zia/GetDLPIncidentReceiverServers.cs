// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    public static class GetDLPIncidentReceiverServers
    {
        /// <summary>
        /// Use the **zia_dlp_incident_receiver_servers** data source to get information about a ZIA DLP Incident Receiver Server in the Zscaler Internet Access cloud or via the API.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zia = Pulumi.Zia;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zia.GetDLPIncidentReceiverServers.Invoke(new()
        ///     {
        ///         Name = "ZS_Incident_Receiver",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDLPIncidentReceiverServersResult> InvokeAsync(GetDLPIncidentReceiverServersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDLPIncidentReceiverServersResult>("zia:index/getDLPIncidentReceiverServers:getDLPIncidentReceiverServers", args ?? new GetDLPIncidentReceiverServersArgs(), options.WithDefaults());

        /// <summary>
        /// Use the **zia_dlp_incident_receiver_servers** data source to get information about a ZIA DLP Incident Receiver Server in the Zscaler Internet Access cloud or via the API.
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zia = Pulumi.Zia;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @this = Zia.GetDLPIncidentReceiverServers.Invoke(new()
        ///     {
        ///         Name = "ZS_Incident_Receiver",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDLPIncidentReceiverServersResult> Invoke(GetDLPIncidentReceiverServersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDLPIncidentReceiverServersResult>("zia:index/getDLPIncidentReceiverServers:getDLPIncidentReceiverServers", args ?? new GetDLPIncidentReceiverServersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDLPIncidentReceiverServersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The DLP Incident Receiver Server name as configured by the admin.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetDLPIncidentReceiverServersArgs()
        {
        }
        public static new GetDLPIncidentReceiverServersArgs Empty => new GetDLPIncidentReceiverServersArgs();
    }

    public sealed class GetDLPIncidentReceiverServersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The DLP Incident Receiver Server name as configured by the admin.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetDLPIncidentReceiverServersInvokeArgs()
        {
        }
        public static new GetDLPIncidentReceiverServersInvokeArgs Empty => new GetDLPIncidentReceiverServersInvokeArgs();
    }


    [OutputType]
    public sealed class GetDLPIncidentReceiverServersResult
    {
        public readonly int Flags;
        public readonly int Id;
        public readonly string? Name;
        public readonly string Status;
        public readonly string Url;

        [OutputConstructor]
        private GetDLPIncidentReceiverServersResult(
            int flags,

            int id,

            string? name,

            string status,

            string url)
        {
            Flags = flags;
            Id = id;
            Name = name;
            Status = status;
            Url = url;
        }
    }
}
