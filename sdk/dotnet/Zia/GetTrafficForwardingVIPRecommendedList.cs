// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    public static class GetTrafficForwardingVIPRecommendedList
    {
        /// <summary>
        /// Use the **zia_traffic_forwarding_gre_vip_recommended_list** data source to get information about a list of recommended GRE tunnel virtual IP addresses (VIPs), based on source IP address or latitude/longitude coordinates.
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// # ZIA Traffic Forwarding - GRE VIP Recommended List
        /// data "zia_traffic_forwarding_gre_vip_recommended_list" "this"{
        ///     source_ip = "1.1.1.1"
        ///     required_count = 2
        /// }
        /// ```
        /// 
        /// ### With Overridden Geo Coordinates
        /// 
        /// ```hcl
        /// # ZIA Traffic Forwarding - GRE VIP Recommended List
        /// data "zia_traffic_forwarding_gre_vip_recommended_list" "this"{
        ///     source_ip = "1.1.1.1"
        ///     required_count = 2
        ///     latitude     = 22.2914
        ///     longitude    = 114.1445
        /// }
        /// ```
        /// </summary>
        public static Task<GetTrafficForwardingVIPRecommendedListResult> InvokeAsync(GetTrafficForwardingVIPRecommendedListArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTrafficForwardingVIPRecommendedListResult>("zia:index/getTrafficForwardingVIPRecommendedList:getTrafficForwardingVIPRecommendedList", args ?? new GetTrafficForwardingVIPRecommendedListArgs(), options.WithDefaults());

        /// <summary>
        /// Use the **zia_traffic_forwarding_gre_vip_recommended_list** data source to get information about a list of recommended GRE tunnel virtual IP addresses (VIPs), based on source IP address or latitude/longitude coordinates.
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// # ZIA Traffic Forwarding - GRE VIP Recommended List
        /// data "zia_traffic_forwarding_gre_vip_recommended_list" "this"{
        ///     source_ip = "1.1.1.1"
        ///     required_count = 2
        /// }
        /// ```
        /// 
        /// ### With Overridden Geo Coordinates
        /// 
        /// ```hcl
        /// # ZIA Traffic Forwarding - GRE VIP Recommended List
        /// data "zia_traffic_forwarding_gre_vip_recommended_list" "this"{
        ///     source_ip = "1.1.1.1"
        ///     required_count = 2
        ///     latitude     = 22.2914
        ///     longitude    = 114.1445
        /// }
        /// ```
        /// </summary>
        public static Output<GetTrafficForwardingVIPRecommendedListResult> Invoke(GetTrafficForwardingVIPRecommendedListInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTrafficForwardingVIPRecommendedListResult>("zia:index/getTrafficForwardingVIPRecommendedList:getTrafficForwardingVIPRecommendedList", args ?? new GetTrafficForwardingVIPRecommendedListInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use the **zia_traffic_forwarding_gre_vip_recommended_list** data source to get information about a list of recommended GRE tunnel virtual IP addresses (VIPs), based on source IP address or latitude/longitude coordinates.
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// # ZIA Traffic Forwarding - GRE VIP Recommended List
        /// data "zia_traffic_forwarding_gre_vip_recommended_list" "this"{
        ///     source_ip = "1.1.1.1"
        ///     required_count = 2
        /// }
        /// ```
        /// 
        /// ### With Overridden Geo Coordinates
        /// 
        /// ```hcl
        /// # ZIA Traffic Forwarding - GRE VIP Recommended List
        /// data "zia_traffic_forwarding_gre_vip_recommended_list" "this"{
        ///     source_ip = "1.1.1.1"
        ///     required_count = 2
        ///     latitude     = 22.2914
        ///     longitude    = 114.1445
        /// }
        /// ```
        /// </summary>
        public static Output<GetTrafficForwardingVIPRecommendedListResult> Invoke(GetTrafficForwardingVIPRecommendedListInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTrafficForwardingVIPRecommendedListResult>("zia:index/getTrafficForwardingVIPRecommendedList:getTrafficForwardingVIPRecommendedList", args ?? new GetTrafficForwardingVIPRecommendedListInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTrafficForwardingVIPRecommendedListArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (Boolean) Include currently assigned VIPs.
        /// </summary>
        [Input("includeCurrentVips")]
        public bool? IncludeCurrentVips { get; set; }

        /// <summary>
        /// (Boolean) Include ZIA Private Service Edge VIPs.
        /// </summary>
        [Input("includePrivateServiceEdge")]
        public bool? IncludePrivateServiceEdge { get; set; }

        /// <summary>
        /// (Number) The latitude coordinate of the GRE tunnel source.
        /// </summary>
        [Input("latitude")]
        public double? Latitude { get; set; }

        /// <summary>
        /// (Number) The longitude coordinate of the GRE tunnel source.
        /// </summary>
        [Input("longitude")]
        public double? Longitude { get; set; }

        /// <summary>
        /// Number of IP address to be exported.
        /// </summary>
        [Input("requiredCount")]
        public int? RequiredCount { get; set; }

        /// <summary>
        /// (Boolean) The routable IP address.
        /// </summary>
        [Input("routableIp")]
        public bool? RoutableIp { get; set; }

        /// <summary>
        /// Filter based on an IP address range.
        /// </summary>
        [Input("sourceIp")]
        public string? SourceIp { get; set; }

        /// <summary>
        /// (String) The longitude coordinate of the GRE tunnel source.
        /// </summary>
        [Input("subcloud")]
        public string? Subcloud { get; set; }

        /// <summary>
        /// (Boolean) Search within country only.
        /// </summary>
        [Input("withinCountryOnly")]
        public bool? WithinCountryOnly { get; set; }

        public GetTrafficForwardingVIPRecommendedListArgs()
        {
        }
        public static new GetTrafficForwardingVIPRecommendedListArgs Empty => new GetTrafficForwardingVIPRecommendedListArgs();
    }

    public sealed class GetTrafficForwardingVIPRecommendedListInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (Boolean) Include currently assigned VIPs.
        /// </summary>
        [Input("includeCurrentVips")]
        public Input<bool>? IncludeCurrentVips { get; set; }

        /// <summary>
        /// (Boolean) Include ZIA Private Service Edge VIPs.
        /// </summary>
        [Input("includePrivateServiceEdge")]
        public Input<bool>? IncludePrivateServiceEdge { get; set; }

        /// <summary>
        /// (Number) The latitude coordinate of the GRE tunnel source.
        /// </summary>
        [Input("latitude")]
        public Input<double>? Latitude { get; set; }

        /// <summary>
        /// (Number) The longitude coordinate of the GRE tunnel source.
        /// </summary>
        [Input("longitude")]
        public Input<double>? Longitude { get; set; }

        /// <summary>
        /// Number of IP address to be exported.
        /// </summary>
        [Input("requiredCount")]
        public Input<int>? RequiredCount { get; set; }

        /// <summary>
        /// (Boolean) The routable IP address.
        /// </summary>
        [Input("routableIp")]
        public Input<bool>? RoutableIp { get; set; }

        /// <summary>
        /// Filter based on an IP address range.
        /// </summary>
        [Input("sourceIp")]
        public Input<string>? SourceIp { get; set; }

        /// <summary>
        /// (String) The longitude coordinate of the GRE tunnel source.
        /// </summary>
        [Input("subcloud")]
        public Input<string>? Subcloud { get; set; }

        /// <summary>
        /// (Boolean) Search within country only.
        /// </summary>
        [Input("withinCountryOnly")]
        public Input<bool>? WithinCountryOnly { get; set; }

        public GetTrafficForwardingVIPRecommendedListInvokeArgs()
        {
        }
        public static new GetTrafficForwardingVIPRecommendedListInvokeArgs Empty => new GetTrafficForwardingVIPRecommendedListInvokeArgs();
    }


    [OutputType]
    public sealed class GetTrafficForwardingVIPRecommendedListResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (Boolean) Include currently assigned VIPs.
        /// </summary>
        public readonly bool? IncludeCurrentVips;
        /// <summary>
        /// (Boolean) Include ZIA Private Service Edge VIPs.
        /// </summary>
        public readonly bool? IncludePrivateServiceEdge;
        /// <summary>
        /// (Number) The latitude coordinate of the GRE tunnel source.
        /// </summary>
        public readonly double? Latitude;
        /// <summary>
        /// The list of all recommended returned Virtual IP Addresses (VIPs)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTrafficForwardingVIPRecommendedListListResult> Lists;
        /// <summary>
        /// (Number) The longitude coordinate of the GRE tunnel source.
        /// </summary>
        public readonly double? Longitude;
        public readonly int? RequiredCount;
        /// <summary>
        /// (Boolean) The routable IP address.
        /// </summary>
        public readonly bool? RoutableIp;
        /// <summary>
        /// (String) The public source IP address.
        /// </summary>
        public readonly string? SourceIp;
        /// <summary>
        /// (String) The longitude coordinate of the GRE tunnel source.
        /// </summary>
        public readonly string? Subcloud;
        /// <summary>
        /// (Boolean) Search within country only.
        /// </summary>
        public readonly bool? WithinCountryOnly;

        [OutputConstructor]
        private GetTrafficForwardingVIPRecommendedListResult(
            string id,

            bool? includeCurrentVips,

            bool? includePrivateServiceEdge,

            double? latitude,

            ImmutableArray<Outputs.GetTrafficForwardingVIPRecommendedListListResult> lists,

            double? longitude,

            int? requiredCount,

            bool? routableIp,

            string? sourceIp,

            string? subcloud,

            bool? withinCountryOnly)
        {
            Id = id;
            IncludeCurrentVips = includeCurrentVips;
            IncludePrivateServiceEdge = includePrivateServiceEdge;
            Latitude = latitude;
            Lists = lists;
            Longitude = longitude;
            RequiredCount = requiredCount;
            RoutableIp = routableIp;
            SourceIp = sourceIp;
            Subcloud = subcloud;
            WithinCountryOnly = withinCountryOnly;
        }
    }
}
