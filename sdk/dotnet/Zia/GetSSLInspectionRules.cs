// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    public static class GetSSLInspectionRules
    {
        /// <summary>
        /// Use the **zia_ssl_inspection_rules** data source to get information about a ssl inspection rule in the Zscaler Internet Access.
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// # ZIA SSL Inspection by name
        /// data "zia_ssl_inspection_rules" "this" {
        ///     name = "SSL_Inspection_Rule01"
        /// }
        /// ```
        /// 
        /// ```hcl
        /// # ZIA SSL Inspection by ID
        /// data "zia_ssl_inspection_rules" "this" {
        ///     id = "12365478"
        /// }
        /// ```
        /// </summary>
        public static Task<GetSSLInspectionRulesResult> InvokeAsync(GetSSLInspectionRulesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSSLInspectionRulesResult>("zia:index/getSSLInspectionRules:getSSLInspectionRules", args ?? new GetSSLInspectionRulesArgs(), options.WithDefaults());

        /// <summary>
        /// Use the **zia_ssl_inspection_rules** data source to get information about a ssl inspection rule in the Zscaler Internet Access.
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// # ZIA SSL Inspection by name
        /// data "zia_ssl_inspection_rules" "this" {
        ///     name = "SSL_Inspection_Rule01"
        /// }
        /// ```
        /// 
        /// ```hcl
        /// # ZIA SSL Inspection by ID
        /// data "zia_ssl_inspection_rules" "this" {
        ///     id = "12365478"
        /// }
        /// ```
        /// </summary>
        public static Output<GetSSLInspectionRulesResult> Invoke(GetSSLInspectionRulesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSSLInspectionRulesResult>("zia:index/getSSLInspectionRules:getSSLInspectionRules", args ?? new GetSSLInspectionRulesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use the **zia_ssl_inspection_rules** data source to get information about a ssl inspection rule in the Zscaler Internet Access.
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// # ZIA SSL Inspection by name
        /// data "zia_ssl_inspection_rules" "this" {
        ///     name = "SSL_Inspection_Rule01"
        /// }
        /// ```
        /// 
        /// ```hcl
        /// # ZIA SSL Inspection by ID
        /// data "zia_ssl_inspection_rules" "this" {
        ///     id = "12365478"
        /// }
        /// ```
        /// </summary>
        public static Output<GetSSLInspectionRulesResult> Invoke(GetSSLInspectionRulesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSSLInspectionRulesResult>("zia:index/getSSLInspectionRules:getSSLInspectionRules", args ?? new GetSSLInspectionRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSSLInspectionRulesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier for the SSL Inspection
        /// </summary>
        [Input("id")]
        public int? Id { get; set; }

        /// <summary>
        /// Name of the SSL Inspection
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("urlCategories")]
        private List<string>? _urlCategories;

        /// <summary>
        /// The list of URL categories to which the DLP policy rule must be applied.
        /// </summary>
        public List<string> UrlCategories
        {
            get => _urlCategories ?? (_urlCategories = new List<string>());
            set => _urlCategories = value;
        }

        public GetSSLInspectionRulesArgs()
        {
        }
        public static new GetSSLInspectionRulesArgs Empty => new GetSSLInspectionRulesArgs();
    }

    public sealed class GetSSLInspectionRulesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier for the SSL Inspection
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        /// <summary>
        /// Name of the SSL Inspection
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("urlCategories")]
        private InputList<string>? _urlCategories;

        /// <summary>
        /// The list of URL categories to which the DLP policy rule must be applied.
        /// </summary>
        public InputList<string> UrlCategories
        {
            get => _urlCategories ?? (_urlCategories = new InputList<string>());
            set => _urlCategories = value;
        }

        public GetSSLInspectionRulesInvokeArgs()
        {
        }
        public static new GetSSLInspectionRulesInvokeArgs Empty => new GetSSLInspectionRulesInvokeArgs();
    }


    [OutputType]
    public sealed class GetSSLInspectionRulesResult
    {
        /// <summary>
        /// Action taken when the traffic matches policy
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesActionResult> Actions;
        /// <summary>
        /// The list of URL categories to which the DLP policy rule must be applied.
        /// </summary>
        public readonly ImmutableArray<string> CloudApplications;
        /// <summary>
        /// ID pairs of departments for which the rule is applied.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesDepartmentResult> Departments;
        /// <summary>
        /// The description of the workload group
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// ID pairs of destination IP address groups for which the rule is applied.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesDestIpGroupResult> DestIpGroups;
        /// <summary>
        /// ID pairs of device groups for which the rule is applied.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesDeviceGroupResult> DeviceGroups;
        /// <summary>
        /// Lists device trust levels for which the rule must be applied (for devices managed using Zscaler Client Connector).
        /// </summary>
        public readonly ImmutableArray<string> DeviceTrustLevels;
        /// <summary>
        /// ID pairs of devices for which the rule is applied
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesDeviceResult> Devices;
        /// <summary>
        /// ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesGroupResult> Groups;
        /// <summary>
        /// A unique identifier assigned to the workload group
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// ID pairs of labels associated with the rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesLabelResult> Labels;
        /// <summary>
        /// A nested block with details about who last modified the workload group.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesLastModifiedByResult> LastModifiedBies;
        /// <summary>
        /// Timestamp when the workload group was last modified.
        /// </summary>
        public readonly int LastModifiedTime;
        /// <summary>
        /// ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesLocationGroupResult> LocationGroups;
        /// <summary>
        /// ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesLocationResult> Locations;
        /// <summary>
        /// The name of the workload group
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        /// </summary>
        public readonly int Order;
        /// <summary>
        /// Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
        /// </summary>
        public readonly ImmutableArray<string> Platforms;
        /// <summary>
        /// When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesProxyGatewayResult> ProxyGateways;
        /// <summary>
        /// The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
        /// </summary>
        public readonly int Rank;
        /// <summary>
        /// Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
        /// </summary>
        public readonly bool RoadWarriorForKerberos;
        /// <summary>
        /// ID pairs of source IP address groups for which the rule is applied.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesSourceIpGroupResult> SourceIpGroups;
        /// <summary>
        /// The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
        /// </summary>
        public readonly string State;
        /// <summary>
        /// The time intervals during which the rule applies
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesTimeWindowResult> TimeWindows;
        /// <summary>
        /// The list of URL categories to which the DLP policy rule must be applied.
        /// </summary>
        public readonly ImmutableArray<string> UrlCategories;
        /// <summary>
        /// A list of user agent types the rule applies to.
        /// </summary>
        public readonly ImmutableArray<string> UserAgentTypes;
        /// <summary>
        /// The list of preconfigured workload groups to which the policy must be applied.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesUserResult> Users;
        /// <summary>
        /// The list of preconfigured workload groups to which the policy must be applied.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesWorkloadGroupResult> WorkloadGroups;
        /// <summary>
        /// The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSSLInspectionRulesZpaAppSegmentResult> ZpaAppSegments;

        [OutputConstructor]
        private GetSSLInspectionRulesResult(
            ImmutableArray<Outputs.GetSSLInspectionRulesActionResult> actions,

            ImmutableArray<string> cloudApplications,

            ImmutableArray<Outputs.GetSSLInspectionRulesDepartmentResult> departments,

            string description,

            ImmutableArray<Outputs.GetSSLInspectionRulesDestIpGroupResult> destIpGroups,

            ImmutableArray<Outputs.GetSSLInspectionRulesDeviceGroupResult> deviceGroups,

            ImmutableArray<string> deviceTrustLevels,

            ImmutableArray<Outputs.GetSSLInspectionRulesDeviceResult> devices,

            ImmutableArray<Outputs.GetSSLInspectionRulesGroupResult> groups,

            int id,

            ImmutableArray<Outputs.GetSSLInspectionRulesLabelResult> labels,

            ImmutableArray<Outputs.GetSSLInspectionRulesLastModifiedByResult> lastModifiedBies,

            int lastModifiedTime,

            ImmutableArray<Outputs.GetSSLInspectionRulesLocationGroupResult> locationGroups,

            ImmutableArray<Outputs.GetSSLInspectionRulesLocationResult> locations,

            string name,

            int order,

            ImmutableArray<string> platforms,

            ImmutableArray<Outputs.GetSSLInspectionRulesProxyGatewayResult> proxyGateways,

            int rank,

            bool roadWarriorForKerberos,

            ImmutableArray<Outputs.GetSSLInspectionRulesSourceIpGroupResult> sourceIpGroups,

            string state,

            ImmutableArray<Outputs.GetSSLInspectionRulesTimeWindowResult> timeWindows,

            ImmutableArray<string> urlCategories,

            ImmutableArray<string> userAgentTypes,

            ImmutableArray<Outputs.GetSSLInspectionRulesUserResult> users,

            ImmutableArray<Outputs.GetSSLInspectionRulesWorkloadGroupResult> workloadGroups,

            ImmutableArray<Outputs.GetSSLInspectionRulesZpaAppSegmentResult> zpaAppSegments)
        {
            Actions = actions;
            CloudApplications = cloudApplications;
            Departments = departments;
            Description = description;
            DestIpGroups = destIpGroups;
            DeviceGroups = deviceGroups;
            DeviceTrustLevels = deviceTrustLevels;
            Devices = devices;
            Groups = groups;
            Id = id;
            Labels = labels;
            LastModifiedBies = lastModifiedBies;
            LastModifiedTime = lastModifiedTime;
            LocationGroups = locationGroups;
            Locations = locations;
            Name = name;
            Order = order;
            Platforms = platforms;
            ProxyGateways = proxyGateways;
            Rank = rank;
            RoadWarriorForKerberos = roadWarriorForKerberos;
            SourceIpGroups = sourceIpGroups;
            State = state;
            TimeWindows = timeWindows;
            UrlCategories = urlCategories;
            UserAgentTypes = userAgentTypes;
            Users = users;
            WorkloadGroups = workloadGroups;
            ZpaAppSegments = zpaAppSegments;
        }
    }
}
