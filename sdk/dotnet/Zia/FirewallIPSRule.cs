// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    [ZiaResourceType("zia:index/firewallIPSRule:FirewallIPSRule")]
    public partial class FirewallIPSRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or
        /// blocking the traffic or bypassing the rule.
        /// </summary>
        [Output("action")]
        public Output<string?> Action { get; private set; } = null!;

        /// <summary>
        /// A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        /// </summary>
        [Output("capturePcap")]
        public Output<bool> CapturePcap { get; private set; } = null!;

        /// <summary>
        /// If set to true, the default rule is applied
        /// </summary>
        [Output("defaultRule")]
        public Output<bool?> DefaultRule { get; private set; } = null!;

        /// <summary>
        /// list of departments for which rule must be applied
        /// </summary>
        [Output("departments")]
        public Output<Outputs.FirewallIPSRuleDepartments?> Departments { get; private set; } = null!;

        /// <summary>
        /// Additional information about the rule
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        /// </summary>
        [Output("destAddresses")]
        public Output<ImmutableArray<string>> DestAddresses { get; private set; } = null!;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        [Output("destCountries")]
        public Output<ImmutableArray<string>> DestCountries { get; private set; } = null!;

        [Output("destIpCategories")]
        public Output<ImmutableArray<string>> DestIpCategories { get; private set; } = null!;

        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Output("destIpGroups")]
        public Output<Outputs.FirewallIPSRuleDestIpGroups?> DestIpGroups { get; private set; } = null!;

        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Output("destIpv6Groups")]
        public Output<Outputs.FirewallIPSRuleDestIpv6Groups?> DestIpv6Groups { get; private set; } = null!;

        /// <summary>
        /// This field is applicable for devices that are managed using Zscaler Client Connector.
        /// </summary>
        [Output("deviceGroups")]
        public Output<Outputs.FirewallIPSRuleDeviceGroups?> DeviceGroups { get; private set; } = null!;

        /// <summary>
        /// Name-ID pairs of devices for which rule must be applied.
        /// </summary>
        [Output("devices")]
        public Output<Outputs.FirewallIPSRuleDevices?> Devices { get; private set; } = null!;

        /// <summary>
        /// A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled,
        /// whereas a false value indicates that aggregate logging is enabled.
        /// </summary>
        [Output("enableFullLogging")]
        public Output<bool?> EnableFullLogging { get; private set; } = null!;

        /// <summary>
        /// list of groups for which rule must be applied
        /// </summary>
        [Output("groups")]
        public Output<Outputs.FirewallIPSRuleGroups?> Groups { get; private set; } = null!;

        /// <summary>
        /// list of Labels that are applicable to the rule.
        /// </summary>
        [Output("labels")]
        public Output<Outputs.FirewallIPSRuleLabels?> Labels { get; private set; } = null!;

        /// <summary>
        /// list of locations groups
        /// </summary>
        [Output("locationGroups")]
        public Output<Outputs.FirewallIPSRuleLocationGroups?> LocationGroups { get; private set; } = null!;

        /// <summary>
        /// list of locations for which rule must be applied
        /// </summary>
        [Output("locations")]
        public Output<Outputs.FirewallIPSRuleLocations?> Locations { get; private set; } = null!;

        /// <summary>
        /// The name of the IPS Control rule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// list of nw service groups
        /// </summary>
        [Output("nwServiceGroups")]
        public Output<Outputs.FirewallIPSRuleNwServiceGroups?> NwServiceGroups { get; private set; } = null!;

        /// <summary>
        /// list of nw services
        /// </summary>
        [Output("nwServices")]
        public Output<Outputs.FirewallIPSRuleNwServices?> NwServices { get; private set; } = null!;

        /// <summary>
        /// Rule order number. If omitted, the rule will be added to the end of the rule set.
        /// </summary>
        [Output("order")]
        public Output<int> Order { get; private set; } = null!;

        /// <summary>
        /// If set to true, a predefined rule is applied
        /// </summary>
        [Output("predefined")]
        public Output<bool?> Predefined { get; private set; } = null!;

        /// <summary>
        /// The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
        /// be specified for the rule.
        /// </summary>
        [Output("rank")]
        public Output<int?> Rank { get; private set; } = null!;

        /// <summary>
        /// URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
        /// to a specific URL category.
        /// </summary>
        [Output("resCategories")]
        public Output<ImmutableArray<string>> ResCategories { get; private set; } = null!;

        [Output("ruleId")]
        public Output<int> RuleId { get; private set; } = null!;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        [Output("sourceCountries")]
        public Output<ImmutableArray<string>> SourceCountries { get; private set; } = null!;

        /// <summary>
        /// list of source ip groups
        /// </summary>
        [Output("srcIpGroups")]
        public Output<Outputs.FirewallIPSRuleSrcIpGroups?> SrcIpGroups { get; private set; } = null!;

        /// <summary>
        /// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
        /// source IP address.
        /// </summary>
        [Output("srcIps")]
        public Output<ImmutableArray<string>> SrcIps { get; private set; } = null!;

        /// <summary>
        /// list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
        /// specific source IPv6 address group.
        /// </summary>
        [Output("srcIpv6Groups")]
        public Output<Outputs.FirewallIPSRuleSrcIpv6Groups?> SrcIpv6Groups { get; private set; } = null!;

        /// <summary>
        /// The state of the rule indicating whether it is enabled or disabled
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// list of Advanced threat categories to which the rule applies
        /// </summary>
        [Output("threatCategories")]
        public Output<Outputs.FirewallIPSRuleThreatCategories?> ThreatCategories { get; private set; } = null!;

        /// <summary>
        /// The time interval in which the Firewall Filtering policy rule applies
        /// </summary>
        [Output("timeWindows")]
        public Output<Outputs.FirewallIPSRuleTimeWindows?> TimeWindows { get; private set; } = null!;

        /// <summary>
        /// list of users for which rule must be applied
        /// </summary>
        [Output("users")]
        public Output<Outputs.FirewallIPSRuleUsers?> Users { get; private set; } = null!;

        /// <summary>
        /// The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
        /// Gateway forwarding method.
        /// </summary>
        [Output("zpaAppSegments")]
        public Output<ImmutableArray<Outputs.FirewallIPSRuleZpaAppSegment>> ZpaAppSegments { get; private set; } = null!;


        /// <summary>
        /// Create a FirewallIPSRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FirewallIPSRule(string name, FirewallIPSRuleArgs args, CustomResourceOptions? options = null)
            : base("zia:index/firewallIPSRule:FirewallIPSRule", name, args ?? new FirewallIPSRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FirewallIPSRule(string name, Input<string> id, FirewallIPSRuleState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/firewallIPSRule:FirewallIPSRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FirewallIPSRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FirewallIPSRule Get(string name, Input<string> id, FirewallIPSRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new FirewallIPSRule(name, id, state, options);
        }
    }

    public sealed class FirewallIPSRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or
        /// blocking the traffic or bypassing the rule.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        /// </summary>
        [Input("capturePcap")]
        public Input<bool>? CapturePcap { get; set; }

        /// <summary>
        /// If set to true, the default rule is applied
        /// </summary>
        [Input("defaultRule")]
        public Input<bool>? DefaultRule { get; set; }

        /// <summary>
        /// list of departments for which rule must be applied
        /// </summary>
        [Input("departments")]
        public Input<Inputs.FirewallIPSRuleDepartmentsArgs>? Departments { get; set; }

        /// <summary>
        /// Additional information about the rule
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destAddresses")]
        private InputList<string>? _destAddresses;

        /// <summary>
        /// Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        /// </summary>
        public InputList<string> DestAddresses
        {
            get => _destAddresses ?? (_destAddresses = new InputList<string>());
            set => _destAddresses = value;
        }

        [Input("destCountries")]
        private InputList<string>? _destCountries;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        public InputList<string> DestCountries
        {
            get => _destCountries ?? (_destCountries = new InputList<string>());
            set => _destCountries = value;
        }

        [Input("destIpCategories")]
        private InputList<string>? _destIpCategories;
        public InputList<string> DestIpCategories
        {
            get => _destIpCategories ?? (_destIpCategories = new InputList<string>());
            set => _destIpCategories = value;
        }

        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Input("destIpGroups")]
        public Input<Inputs.FirewallIPSRuleDestIpGroupsArgs>? DestIpGroups { get; set; }

        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Input("destIpv6Groups")]
        public Input<Inputs.FirewallIPSRuleDestIpv6GroupsArgs>? DestIpv6Groups { get; set; }

        /// <summary>
        /// This field is applicable for devices that are managed using Zscaler Client Connector.
        /// </summary>
        [Input("deviceGroups")]
        public Input<Inputs.FirewallIPSRuleDeviceGroupsArgs>? DeviceGroups { get; set; }

        /// <summary>
        /// Name-ID pairs of devices for which rule must be applied.
        /// </summary>
        [Input("devices")]
        public Input<Inputs.FirewallIPSRuleDevicesArgs>? Devices { get; set; }

        /// <summary>
        /// A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled,
        /// whereas a false value indicates that aggregate logging is enabled.
        /// </summary>
        [Input("enableFullLogging")]
        public Input<bool>? EnableFullLogging { get; set; }

        /// <summary>
        /// list of groups for which rule must be applied
        /// </summary>
        [Input("groups")]
        public Input<Inputs.FirewallIPSRuleGroupsArgs>? Groups { get; set; }

        /// <summary>
        /// list of Labels that are applicable to the rule.
        /// </summary>
        [Input("labels")]
        public Input<Inputs.FirewallIPSRuleLabelsArgs>? Labels { get; set; }

        /// <summary>
        /// list of locations groups
        /// </summary>
        [Input("locationGroups")]
        public Input<Inputs.FirewallIPSRuleLocationGroupsArgs>? LocationGroups { get; set; }

        /// <summary>
        /// list of locations for which rule must be applied
        /// </summary>
        [Input("locations")]
        public Input<Inputs.FirewallIPSRuleLocationsArgs>? Locations { get; set; }

        /// <summary>
        /// The name of the IPS Control rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// list of nw service groups
        /// </summary>
        [Input("nwServiceGroups")]
        public Input<Inputs.FirewallIPSRuleNwServiceGroupsArgs>? NwServiceGroups { get; set; }

        /// <summary>
        /// list of nw services
        /// </summary>
        [Input("nwServices")]
        public Input<Inputs.FirewallIPSRuleNwServicesArgs>? NwServices { get; set; }

        /// <summary>
        /// Rule order number. If omitted, the rule will be added to the end of the rule set.
        /// </summary>
        [Input("order", required: true)]
        public Input<int> Order { get; set; } = null!;

        /// <summary>
        /// If set to true, a predefined rule is applied
        /// </summary>
        [Input("predefined")]
        public Input<bool>? Predefined { get; set; }

        /// <summary>
        /// The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
        /// be specified for the rule.
        /// </summary>
        [Input("rank")]
        public Input<int>? Rank { get; set; }

        [Input("resCategories")]
        private InputList<string>? _resCategories;

        /// <summary>
        /// URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
        /// to a specific URL category.
        /// </summary>
        public InputList<string> ResCategories
        {
            get => _resCategories ?? (_resCategories = new InputList<string>());
            set => _resCategories = value;
        }

        [Input("sourceCountries")]
        private InputList<string>? _sourceCountries;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        public InputList<string> SourceCountries
        {
            get => _sourceCountries ?? (_sourceCountries = new InputList<string>());
            set => _sourceCountries = value;
        }

        /// <summary>
        /// list of source ip groups
        /// </summary>
        [Input("srcIpGroups")]
        public Input<Inputs.FirewallIPSRuleSrcIpGroupsArgs>? SrcIpGroups { get; set; }

        [Input("srcIps")]
        private InputList<string>? _srcIps;

        /// <summary>
        /// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
        /// source IP address.
        /// </summary>
        public InputList<string> SrcIps
        {
            get => _srcIps ?? (_srcIps = new InputList<string>());
            set => _srcIps = value;
        }

        /// <summary>
        /// list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
        /// specific source IPv6 address group.
        /// </summary>
        [Input("srcIpv6Groups")]
        public Input<Inputs.FirewallIPSRuleSrcIpv6GroupsArgs>? SrcIpv6Groups { get; set; }

        /// <summary>
        /// The state of the rule indicating whether it is enabled or disabled
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// list of Advanced threat categories to which the rule applies
        /// </summary>
        [Input("threatCategories")]
        public Input<Inputs.FirewallIPSRuleThreatCategoriesArgs>? ThreatCategories { get; set; }

        /// <summary>
        /// The time interval in which the Firewall Filtering policy rule applies
        /// </summary>
        [Input("timeWindows")]
        public Input<Inputs.FirewallIPSRuleTimeWindowsArgs>? TimeWindows { get; set; }

        /// <summary>
        /// list of users for which rule must be applied
        /// </summary>
        [Input("users")]
        public Input<Inputs.FirewallIPSRuleUsersArgs>? Users { get; set; }

        [Input("zpaAppSegments")]
        private InputList<Inputs.FirewallIPSRuleZpaAppSegmentArgs>? _zpaAppSegments;

        /// <summary>
        /// The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
        /// Gateway forwarding method.
        /// </summary>
        public InputList<Inputs.FirewallIPSRuleZpaAppSegmentArgs> ZpaAppSegments
        {
            get => _zpaAppSegments ?? (_zpaAppSegments = new InputList<Inputs.FirewallIPSRuleZpaAppSegmentArgs>());
            set => _zpaAppSegments = value;
        }

        public FirewallIPSRuleArgs()
        {
        }
        public static new FirewallIPSRuleArgs Empty => new FirewallIPSRuleArgs();
    }

    public sealed class FirewallIPSRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or
        /// blocking the traffic or bypassing the rule.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        /// </summary>
        [Input("capturePcap")]
        public Input<bool>? CapturePcap { get; set; }

        /// <summary>
        /// If set to true, the default rule is applied
        /// </summary>
        [Input("defaultRule")]
        public Input<bool>? DefaultRule { get; set; }

        /// <summary>
        /// list of departments for which rule must be applied
        /// </summary>
        [Input("departments")]
        public Input<Inputs.FirewallIPSRuleDepartmentsGetArgs>? Departments { get; set; }

        /// <summary>
        /// Additional information about the rule
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destAddresses")]
        private InputList<string>? _destAddresses;

        /// <summary>
        /// Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        /// </summary>
        public InputList<string> DestAddresses
        {
            get => _destAddresses ?? (_destAddresses = new InputList<string>());
            set => _destAddresses = value;
        }

        [Input("destCountries")]
        private InputList<string>? _destCountries;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        public InputList<string> DestCountries
        {
            get => _destCountries ?? (_destCountries = new InputList<string>());
            set => _destCountries = value;
        }

        [Input("destIpCategories")]
        private InputList<string>? _destIpCategories;
        public InputList<string> DestIpCategories
        {
            get => _destIpCategories ?? (_destIpCategories = new InputList<string>());
            set => _destIpCategories = value;
        }

        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Input("destIpGroups")]
        public Input<Inputs.FirewallIPSRuleDestIpGroupsGetArgs>? DestIpGroups { get; set; }

        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Input("destIpv6Groups")]
        public Input<Inputs.FirewallIPSRuleDestIpv6GroupsGetArgs>? DestIpv6Groups { get; set; }

        /// <summary>
        /// This field is applicable for devices that are managed using Zscaler Client Connector.
        /// </summary>
        [Input("deviceGroups")]
        public Input<Inputs.FirewallIPSRuleDeviceGroupsGetArgs>? DeviceGroups { get; set; }

        /// <summary>
        /// Name-ID pairs of devices for which rule must be applied.
        /// </summary>
        [Input("devices")]
        public Input<Inputs.FirewallIPSRuleDevicesGetArgs>? Devices { get; set; }

        /// <summary>
        /// A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled,
        /// whereas a false value indicates that aggregate logging is enabled.
        /// </summary>
        [Input("enableFullLogging")]
        public Input<bool>? EnableFullLogging { get; set; }

        /// <summary>
        /// list of groups for which rule must be applied
        /// </summary>
        [Input("groups")]
        public Input<Inputs.FirewallIPSRuleGroupsGetArgs>? Groups { get; set; }

        /// <summary>
        /// list of Labels that are applicable to the rule.
        /// </summary>
        [Input("labels")]
        public Input<Inputs.FirewallIPSRuleLabelsGetArgs>? Labels { get; set; }

        /// <summary>
        /// list of locations groups
        /// </summary>
        [Input("locationGroups")]
        public Input<Inputs.FirewallIPSRuleLocationGroupsGetArgs>? LocationGroups { get; set; }

        /// <summary>
        /// list of locations for which rule must be applied
        /// </summary>
        [Input("locations")]
        public Input<Inputs.FirewallIPSRuleLocationsGetArgs>? Locations { get; set; }

        /// <summary>
        /// The name of the IPS Control rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// list of nw service groups
        /// </summary>
        [Input("nwServiceGroups")]
        public Input<Inputs.FirewallIPSRuleNwServiceGroupsGetArgs>? NwServiceGroups { get; set; }

        /// <summary>
        /// list of nw services
        /// </summary>
        [Input("nwServices")]
        public Input<Inputs.FirewallIPSRuleNwServicesGetArgs>? NwServices { get; set; }

        /// <summary>
        /// Rule order number. If omitted, the rule will be added to the end of the rule set.
        /// </summary>
        [Input("order")]
        public Input<int>? Order { get; set; }

        /// <summary>
        /// If set to true, a predefined rule is applied
        /// </summary>
        [Input("predefined")]
        public Input<bool>? Predefined { get; set; }

        /// <summary>
        /// The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
        /// be specified for the rule.
        /// </summary>
        [Input("rank")]
        public Input<int>? Rank { get; set; }

        [Input("resCategories")]
        private InputList<string>? _resCategories;

        /// <summary>
        /// URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
        /// to a specific URL category.
        /// </summary>
        public InputList<string> ResCategories
        {
            get => _resCategories ?? (_resCategories = new InputList<string>());
            set => _resCategories = value;
        }

        [Input("ruleId")]
        public Input<int>? RuleId { get; set; }

        [Input("sourceCountries")]
        private InputList<string>? _sourceCountries;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        public InputList<string> SourceCountries
        {
            get => _sourceCountries ?? (_sourceCountries = new InputList<string>());
            set => _sourceCountries = value;
        }

        /// <summary>
        /// list of source ip groups
        /// </summary>
        [Input("srcIpGroups")]
        public Input<Inputs.FirewallIPSRuleSrcIpGroupsGetArgs>? SrcIpGroups { get; set; }

        [Input("srcIps")]
        private InputList<string>? _srcIps;

        /// <summary>
        /// User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
        /// source IP address.
        /// </summary>
        public InputList<string> SrcIps
        {
            get => _srcIps ?? (_srcIps = new InputList<string>());
            set => _srcIps = value;
        }

        /// <summary>
        /// list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
        /// specific source IPv6 address group.
        /// </summary>
        [Input("srcIpv6Groups")]
        public Input<Inputs.FirewallIPSRuleSrcIpv6GroupsGetArgs>? SrcIpv6Groups { get; set; }

        /// <summary>
        /// The state of the rule indicating whether it is enabled or disabled
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// list of Advanced threat categories to which the rule applies
        /// </summary>
        [Input("threatCategories")]
        public Input<Inputs.FirewallIPSRuleThreatCategoriesGetArgs>? ThreatCategories { get; set; }

        /// <summary>
        /// The time interval in which the Firewall Filtering policy rule applies
        /// </summary>
        [Input("timeWindows")]
        public Input<Inputs.FirewallIPSRuleTimeWindowsGetArgs>? TimeWindows { get; set; }

        /// <summary>
        /// list of users for which rule must be applied
        /// </summary>
        [Input("users")]
        public Input<Inputs.FirewallIPSRuleUsersGetArgs>? Users { get; set; }

        [Input("zpaAppSegments")]
        private InputList<Inputs.FirewallIPSRuleZpaAppSegmentGetArgs>? _zpaAppSegments;

        /// <summary>
        /// The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
        /// Gateway forwarding method.
        /// </summary>
        public InputList<Inputs.FirewallIPSRuleZpaAppSegmentGetArgs> ZpaAppSegments
        {
            get => _zpaAppSegments ?? (_zpaAppSegments = new InputList<Inputs.FirewallIPSRuleZpaAppSegmentGetArgs>());
            set => _zpaAppSegments = value;
        }

        public FirewallIPSRuleState()
        {
        }
        public static new FirewallIPSRuleState Empty => new FirewallIPSRuleState();
    }
}
