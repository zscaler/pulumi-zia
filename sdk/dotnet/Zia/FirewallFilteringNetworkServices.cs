// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// The **zia_firewall_filtering_network_service** resource allows the creation and management of ZIA Cloud Firewall IP network services in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule and network service group resources.
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Zia = zscaler.PulumiPackage.Zia;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Zia.FirewallFilteringNetworkServices("example", new()
    ///     {
    ///         Description = "example",
    ///         DestTcpPorts = new[]
    ///         {
    ///             new Zia.Inputs.FirewallFilteringNetworkServicesDestTcpPortArgs
    ///             {
    ///                 Start = 5000,
    ///             },
    ///             new Zia.Inputs.FirewallFilteringNetworkServicesDestTcpPortArgs
    ///             {
    ///                 Start = 5001,
    ///             },
    ///             new Zia.Inputs.FirewallFilteringNetworkServicesDestTcpPortArgs
    ///             {
    ///                 End = 5005,
    ///                 Start = 5003,
    ///             },
    ///         },
    ///         SrcTcpPorts = new[]
    ///         {
    ///             new Zia.Inputs.FirewallFilteringNetworkServicesSrcTcpPortArgs
    ///             {
    ///                 Start = 5000,
    ///             },
    ///             new Zia.Inputs.FirewallFilteringNetworkServicesSrcTcpPortArgs
    ///             {
    ///                 Start = 5001,
    ///             },
    ///             new Zia.Inputs.FirewallFilteringNetworkServicesSrcTcpPortArgs
    ///             {
    ///                 End = 5005,
    ///                 Start = 5002,
    ///             },
    ///         },
    ///         Type = "CUSTOM",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zia_firewall_filtering_network_service** can be imported by using `&lt;SERVICE_ID&gt;` or `&lt;SERVICE_NAME&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/firewallFilteringNetworkServices:FirewallFilteringNetworkServices example &lt;service_id&gt;
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zia:index/firewallFilteringNetworkServices:FirewallFilteringNetworkServices example &lt;service_name&gt;
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/firewallFilteringNetworkServices:FirewallFilteringNetworkServices")]
    public partial class FirewallFilteringNetworkServices : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description of the service
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
        /// </summary>
        [Output("destTcpPorts")]
        public Output<ImmutableArray<Outputs.FirewallFilteringNetworkServicesDestTcpPort>> DestTcpPorts { get; private set; } = null!;

        /// <summary>
        /// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
        /// </summary>
        [Output("destUdpPorts")]
        public Output<ImmutableArray<Outputs.FirewallFilteringNetworkServicesDestUdpPort>> DestUdpPorts { get; private set; } = null!;

        /// <summary>
        /// (Optional
        /// </summary>
        [Output("isNameL10nTag")]
        public Output<bool?> IsNameL10nTag { get; private set; } = null!;

        /// <summary>
        /// Name of the service
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("networkServiceId")]
        public Output<int> NetworkServiceId { get; private set; } = null!;

        /// <summary>
        /// The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service
        /// </summary>
        [Output("srcTcpPorts")]
        public Output<ImmutableArray<Outputs.FirewallFilteringNetworkServicesSrcTcpPort>> SrcTcpPorts { get; private set; } = null!;

        /// <summary>
        /// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
        /// </summary>
        [Output("srcUdpPorts")]
        public Output<ImmutableArray<Outputs.FirewallFilteringNetworkServicesSrcUdpPort>> SrcUdpPorts { get; private set; } = null!;

        /// <summary>
        /// The following values are supported: `"ICMP_ANY`, `"UDP_ANY"`, `"TCP_ANY"`, `"OTHER_NETWORK_SERVICE"`, `"DNS"`, `"NETBIOS"`, `"FTP"`, `"GNUTELLA"`, `"H_323"`, `"HTTP"`, `"HTTPS"`, `"IKE"`, `"IMAP"`, `"ILS"`, `"IKE_NAT"`, `"IRC"`, `"LDAP"`, `"QUIC"`, `"TDS"`, `"NETMEETING"`, `"NFS"`, `"NTP"`, `"SIP"`, `"SNMP"`, `"SMB"`, `"SMTP"`, `"SSH"`, `"SYSLOG"`, `"TELNET"`, `"TRACEROUTE"`, `"POP3"`, `"PPTP"`, `"RADIUS"`, `"REAL_MEDIA"`, `"RTSP"`, `"VNC"`, `"WHOIS"`, `"KERBEROS_SEC"`, `"TACACS"`, `"SNMPTRAP"`, `"NMAP"`, `"RSYNC"`, `"L2TP"`, `"HTTP_PROXY"`, `"PC_ANYWHERE"`, `"MSN"`, `"ECHO"`, `"AIM"`, `"IDENT"`, `"YMSG"`, `"SCCP"`, `"MGCP_UA"`, `"MGCP_CA"`, `"VDO_LIVE"`, `"OPENVPN"`, `"TFTP"`, `"FTPS_IMPLICIT"`, `"ZSCALER_PROXY_NW_SERVICES"`, `"GRE_PROTOCOL"`, `"ESP_PROTOCOL"`, `"DHCP"`
        /// </summary>
        [Output("tag")]
        public Output<string> Tag { get; private set; } = null!;

        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a FirewallFilteringNetworkServices resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FirewallFilteringNetworkServices(string name, FirewallFilteringNetworkServicesArgs? args = null, CustomResourceOptions? options = null)
            : base("zia:index/firewallFilteringNetworkServices:FirewallFilteringNetworkServices", name, args ?? new FirewallFilteringNetworkServicesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FirewallFilteringNetworkServices(string name, Input<string> id, FirewallFilteringNetworkServicesState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/firewallFilteringNetworkServices:FirewallFilteringNetworkServices", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FirewallFilteringNetworkServices resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FirewallFilteringNetworkServices Get(string name, Input<string> id, FirewallFilteringNetworkServicesState? state = null, CustomResourceOptions? options = null)
        {
            return new FirewallFilteringNetworkServices(name, id, state, options);
        }
    }

    public sealed class FirewallFilteringNetworkServicesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the service
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destTcpPorts")]
        private InputList<Inputs.FirewallFilteringNetworkServicesDestTcpPortArgs>? _destTcpPorts;

        /// <summary>
        /// The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
        /// </summary>
        public InputList<Inputs.FirewallFilteringNetworkServicesDestTcpPortArgs> DestTcpPorts
        {
            get => _destTcpPorts ?? (_destTcpPorts = new InputList<Inputs.FirewallFilteringNetworkServicesDestTcpPortArgs>());
            set => _destTcpPorts = value;
        }

        [Input("destUdpPorts")]
        private InputList<Inputs.FirewallFilteringNetworkServicesDestUdpPortArgs>? _destUdpPorts;

        /// <summary>
        /// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
        /// </summary>
        public InputList<Inputs.FirewallFilteringNetworkServicesDestUdpPortArgs> DestUdpPorts
        {
            get => _destUdpPorts ?? (_destUdpPorts = new InputList<Inputs.FirewallFilteringNetworkServicesDestUdpPortArgs>());
            set => _destUdpPorts = value;
        }

        /// <summary>
        /// (Optional
        /// </summary>
        [Input("isNameL10nTag")]
        public Input<bool>? IsNameL10nTag { get; set; }

        /// <summary>
        /// Name of the service
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("srcTcpPorts")]
        private InputList<Inputs.FirewallFilteringNetworkServicesSrcTcpPortArgs>? _srcTcpPorts;

        /// <summary>
        /// The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service
        /// </summary>
        public InputList<Inputs.FirewallFilteringNetworkServicesSrcTcpPortArgs> SrcTcpPorts
        {
            get => _srcTcpPorts ?? (_srcTcpPorts = new InputList<Inputs.FirewallFilteringNetworkServicesSrcTcpPortArgs>());
            set => _srcTcpPorts = value;
        }

        [Input("srcUdpPorts")]
        private InputList<Inputs.FirewallFilteringNetworkServicesSrcUdpPortArgs>? _srcUdpPorts;

        /// <summary>
        /// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
        /// </summary>
        public InputList<Inputs.FirewallFilteringNetworkServicesSrcUdpPortArgs> SrcUdpPorts
        {
            get => _srcUdpPorts ?? (_srcUdpPorts = new InputList<Inputs.FirewallFilteringNetworkServicesSrcUdpPortArgs>());
            set => _srcUdpPorts = value;
        }

        /// <summary>
        /// The following values are supported: `"ICMP_ANY`, `"UDP_ANY"`, `"TCP_ANY"`, `"OTHER_NETWORK_SERVICE"`, `"DNS"`, `"NETBIOS"`, `"FTP"`, `"GNUTELLA"`, `"H_323"`, `"HTTP"`, `"HTTPS"`, `"IKE"`, `"IMAP"`, `"ILS"`, `"IKE_NAT"`, `"IRC"`, `"LDAP"`, `"QUIC"`, `"TDS"`, `"NETMEETING"`, `"NFS"`, `"NTP"`, `"SIP"`, `"SNMP"`, `"SMB"`, `"SMTP"`, `"SSH"`, `"SYSLOG"`, `"TELNET"`, `"TRACEROUTE"`, `"POP3"`, `"PPTP"`, `"RADIUS"`, `"REAL_MEDIA"`, `"RTSP"`, `"VNC"`, `"WHOIS"`, `"KERBEROS_SEC"`, `"TACACS"`, `"SNMPTRAP"`, `"NMAP"`, `"RSYNC"`, `"L2TP"`, `"HTTP_PROXY"`, `"PC_ANYWHERE"`, `"MSN"`, `"ECHO"`, `"AIM"`, `"IDENT"`, `"YMSG"`, `"SCCP"`, `"MGCP_UA"`, `"MGCP_CA"`, `"VDO_LIVE"`, `"OPENVPN"`, `"TFTP"`, `"FTPS_IMPLICIT"`, `"ZSCALER_PROXY_NW_SERVICES"`, `"GRE_PROTOCOL"`, `"ESP_PROTOCOL"`, `"DHCP"`
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public FirewallFilteringNetworkServicesArgs()
        {
        }
        public static new FirewallFilteringNetworkServicesArgs Empty => new FirewallFilteringNetworkServicesArgs();
    }

    public sealed class FirewallFilteringNetworkServicesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the service
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destTcpPorts")]
        private InputList<Inputs.FirewallFilteringNetworkServicesDestTcpPortGetArgs>? _destTcpPorts;

        /// <summary>
        /// The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
        /// </summary>
        public InputList<Inputs.FirewallFilteringNetworkServicesDestTcpPortGetArgs> DestTcpPorts
        {
            get => _destTcpPorts ?? (_destTcpPorts = new InputList<Inputs.FirewallFilteringNetworkServicesDestTcpPortGetArgs>());
            set => _destTcpPorts = value;
        }

        [Input("destUdpPorts")]
        private InputList<Inputs.FirewallFilteringNetworkServicesDestUdpPortGetArgs>? _destUdpPorts;

        /// <summary>
        /// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
        /// </summary>
        public InputList<Inputs.FirewallFilteringNetworkServicesDestUdpPortGetArgs> DestUdpPorts
        {
            get => _destUdpPorts ?? (_destUdpPorts = new InputList<Inputs.FirewallFilteringNetworkServicesDestUdpPortGetArgs>());
            set => _destUdpPorts = value;
        }

        /// <summary>
        /// (Optional
        /// </summary>
        [Input("isNameL10nTag")]
        public Input<bool>? IsNameL10nTag { get; set; }

        /// <summary>
        /// Name of the service
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkServiceId")]
        public Input<int>? NetworkServiceId { get; set; }

        [Input("srcTcpPorts")]
        private InputList<Inputs.FirewallFilteringNetworkServicesSrcTcpPortGetArgs>? _srcTcpPorts;

        /// <summary>
        /// The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service
        /// </summary>
        public InputList<Inputs.FirewallFilteringNetworkServicesSrcTcpPortGetArgs> SrcTcpPorts
        {
            get => _srcTcpPorts ?? (_srcTcpPorts = new InputList<Inputs.FirewallFilteringNetworkServicesSrcTcpPortGetArgs>());
            set => _srcTcpPorts = value;
        }

        [Input("srcUdpPorts")]
        private InputList<Inputs.FirewallFilteringNetworkServicesSrcUdpPortGetArgs>? _srcUdpPorts;

        /// <summary>
        /// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
        /// </summary>
        public InputList<Inputs.FirewallFilteringNetworkServicesSrcUdpPortGetArgs> SrcUdpPorts
        {
            get => _srcUdpPorts ?? (_srcUdpPorts = new InputList<Inputs.FirewallFilteringNetworkServicesSrcUdpPortGetArgs>());
            set => _srcUdpPorts = value;
        }

        /// <summary>
        /// The following values are supported: `"ICMP_ANY`, `"UDP_ANY"`, `"TCP_ANY"`, `"OTHER_NETWORK_SERVICE"`, `"DNS"`, `"NETBIOS"`, `"FTP"`, `"GNUTELLA"`, `"H_323"`, `"HTTP"`, `"HTTPS"`, `"IKE"`, `"IMAP"`, `"ILS"`, `"IKE_NAT"`, `"IRC"`, `"LDAP"`, `"QUIC"`, `"TDS"`, `"NETMEETING"`, `"NFS"`, `"NTP"`, `"SIP"`, `"SNMP"`, `"SMB"`, `"SMTP"`, `"SSH"`, `"SYSLOG"`, `"TELNET"`, `"TRACEROUTE"`, `"POP3"`, `"PPTP"`, `"RADIUS"`, `"REAL_MEDIA"`, `"RTSP"`, `"VNC"`, `"WHOIS"`, `"KERBEROS_SEC"`, `"TACACS"`, `"SNMPTRAP"`, `"NMAP"`, `"RSYNC"`, `"L2TP"`, `"HTTP_PROXY"`, `"PC_ANYWHERE"`, `"MSN"`, `"ECHO"`, `"AIM"`, `"IDENT"`, `"YMSG"`, `"SCCP"`, `"MGCP_UA"`, `"MGCP_CA"`, `"VDO_LIVE"`, `"OPENVPN"`, `"TFTP"`, `"FTPS_IMPLICIT"`, `"ZSCALER_PROXY_NW_SERVICES"`, `"GRE_PROTOCOL"`, `"ESP_PROTOCOL"`, `"DHCP"`
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public FirewallFilteringNetworkServicesState()
        {
        }
        public static new FirewallFilteringNetworkServicesState Empty => new FirewallFilteringNetworkServicesState();
    }
}
