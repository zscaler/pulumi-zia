// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// The **zia_admin_users** resource allows the creation and management of ZIA admin user account created in the Zscaler Internet Access cloud or via the API.
    /// 
    /// ## Example Usage
    /// 
    /// ### Organization Scope
    /// 
    /// ### Department Scope
    /// 
    /// ### Location Scope
    /// 
    /// ### Location Group Scope
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zia_admin_users** can be imported by using `&lt;ADMIN ID&gt;` or `&lt;LOGIN NAME&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/adminUsers:AdminUsers example &lt;admin_id&gt;
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zia:index/adminUsers:AdminUsers example &lt;login_name&gt;
    /// ```
    /// 
    /// ⚠️ **NOTE :**:  This provider do not import the password attribute value during the importing process.
    /// </summary>
    [ZiaResourceType("zia:index/adminUsers:AdminUsers")]
    public partial class AdminUsers : global::Pulumi.CustomResource
    {
        [Output("adminId")]
        public Output<int> AdminId { get; private set; } = null!;

        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Output("adminScopeEntities")]
        public Output<Outputs.AdminUsersAdminScopeEntities?> AdminScopeEntities { get; private set; } = null!;

        [Output("adminScopeType")]
        public Output<string> AdminScopeType { get; private set; } = null!;

        /// <summary>
        /// Additional information about the admin or auditor.
        /// </summary>
        [Output("comments")]
        public Output<string?> Comments { get; private set; } = null!;

        [Output("disabled")]
        public Output<bool?> Disabled { get; private set; } = null!;

        /// <summary>
        /// Admin or auditor's email address.
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        [Output("isAuditor")]
        public Output<bool?> IsAuditor { get; private set; } = null!;

        [Output("isExecMobileAppEnabled")]
        public Output<bool?> IsExecMobileAppEnabled { get; private set; } = null!;

        [Output("isNonEditable")]
        public Output<bool?> IsNonEditable { get; private set; } = null!;

        [Output("isPasswordExpired")]
        public Output<bool?> IsPasswordExpired { get; private set; } = null!;

        [Output("isPasswordLoginAllowed")]
        public Output<bool?> IsPasswordLoginAllowed { get; private set; } = null!;

        [Output("isProductUpdateCommEnabled")]
        public Output<bool?> IsProductUpdateCommEnabled { get; private set; } = null!;

        [Output("isSecurityReportCommEnabled")]
        public Output<bool?> IsSecurityReportCommEnabled { get; private set; } = null!;

        [Output("isServiceUpdateCommEnabled")]
        public Output<bool?> IsServiceUpdateCommEnabled { get; private set; } = null!;

        [Output("loginName")]
        public Output<string> LoginName { get; private set; } = null!;

        /// <summary>
        /// The admin's password. If admin single sign-on (SSO) is disabled, then this field is mandatory for POST requests. This
        /// information is not provided in a GET response.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Role of the admin. This is not required for an auditor.
        /// </summary>
        [Output("roles")]
        public Output<ImmutableArray<Outputs.AdminUsersRole>> Roles { get; private set; } = null!;

        /// <summary>
        /// Admin or auditor's username.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a AdminUsers resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AdminUsers(string name, AdminUsersArgs args, CustomResourceOptions? options = null)
            : base("zia:index/adminUsers:AdminUsers", name, args ?? new AdminUsersArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AdminUsers(string name, Input<string> id, AdminUsersState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/adminUsers:AdminUsers", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AdminUsers resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AdminUsers Get(string name, Input<string> id, AdminUsersState? state = null, CustomResourceOptions? options = null)
        {
            return new AdminUsers(name, id, state, options);
        }
    }

    public sealed class AdminUsersArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Input("adminScopeEntities")]
        public Input<Inputs.AdminUsersAdminScopeEntitiesArgs>? AdminScopeEntities { get; set; }

        [Input("adminScopeType")]
        public Input<string>? AdminScopeType { get; set; }

        /// <summary>
        /// Additional information about the admin or auditor.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Admin or auditor's email address.
        /// </summary>
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        [Input("isAuditor")]
        public Input<bool>? IsAuditor { get; set; }

        [Input("isExecMobileAppEnabled")]
        public Input<bool>? IsExecMobileAppEnabled { get; set; }

        [Input("isNonEditable")]
        public Input<bool>? IsNonEditable { get; set; }

        [Input("isPasswordExpired")]
        public Input<bool>? IsPasswordExpired { get; set; }

        [Input("isPasswordLoginAllowed")]
        public Input<bool>? IsPasswordLoginAllowed { get; set; }

        [Input("isProductUpdateCommEnabled")]
        public Input<bool>? IsProductUpdateCommEnabled { get; set; }

        [Input("isSecurityReportCommEnabled")]
        public Input<bool>? IsSecurityReportCommEnabled { get; set; }

        [Input("isServiceUpdateCommEnabled")]
        public Input<bool>? IsServiceUpdateCommEnabled { get; set; }

        [Input("loginName", required: true)]
        public Input<string> LoginName { get; set; } = null!;

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The admin's password. If admin single sign-on (SSO) is disabled, then this field is mandatory for POST requests. This
        /// information is not provided in a GET response.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("roles")]
        private InputList<Inputs.AdminUsersRoleArgs>? _roles;

        /// <summary>
        /// Role of the admin. This is not required for an auditor.
        /// </summary>
        public InputList<Inputs.AdminUsersRoleArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.AdminUsersRoleArgs>());
            set => _roles = value;
        }

        /// <summary>
        /// Admin or auditor's username.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public AdminUsersArgs()
        {
        }
        public static new AdminUsersArgs Empty => new AdminUsersArgs();
    }

    public sealed class AdminUsersState : global::Pulumi.ResourceArgs
    {
        [Input("adminId")]
        public Input<int>? AdminId { get; set; }

        /// <summary>
        /// list of destination ip groups
        /// </summary>
        [Input("adminScopeEntities")]
        public Input<Inputs.AdminUsersAdminScopeEntitiesGetArgs>? AdminScopeEntities { get; set; }

        [Input("adminScopeType")]
        public Input<string>? AdminScopeType { get; set; }

        /// <summary>
        /// Additional information about the admin or auditor.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Admin or auditor's email address.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        [Input("isAuditor")]
        public Input<bool>? IsAuditor { get; set; }

        [Input("isExecMobileAppEnabled")]
        public Input<bool>? IsExecMobileAppEnabled { get; set; }

        [Input("isNonEditable")]
        public Input<bool>? IsNonEditable { get; set; }

        [Input("isPasswordExpired")]
        public Input<bool>? IsPasswordExpired { get; set; }

        [Input("isPasswordLoginAllowed")]
        public Input<bool>? IsPasswordLoginAllowed { get; set; }

        [Input("isProductUpdateCommEnabled")]
        public Input<bool>? IsProductUpdateCommEnabled { get; set; }

        [Input("isSecurityReportCommEnabled")]
        public Input<bool>? IsSecurityReportCommEnabled { get; set; }

        [Input("isServiceUpdateCommEnabled")]
        public Input<bool>? IsServiceUpdateCommEnabled { get; set; }

        [Input("loginName")]
        public Input<string>? LoginName { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The admin's password. If admin single sign-on (SSO) is disabled, then this field is mandatory for POST requests. This
        /// information is not provided in a GET response.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("roles")]
        private InputList<Inputs.AdminUsersRoleGetArgs>? _roles;

        /// <summary>
        /// Role of the admin. This is not required for an auditor.
        /// </summary>
        public InputList<Inputs.AdminUsersRoleGetArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.AdminUsersRoleGetArgs>());
            set => _roles = value;
        }

        /// <summary>
        /// Admin or auditor's username.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public AdminUsersState()
        {
        }
        public static new AdminUsersState Empty => new AdminUsersState();
    }
}
