// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// The **zia_admin_roles** resource allows the creation and management of admin roles in the Zscaler Internet Access cloud or via the API.
    /// 
    /// ## Example Usage
    /// 
    /// ### Create Admin Role
    /// 
    /// ### Create Admin SDWAN Role
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zia_rule_labels** can be imported by using `&lt;LABEL_ID&gt;` or `&lt;LABEL_NAME&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/adminRoles:AdminRoles example &lt;label_id&gt;
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zia:index/adminRoles:AdminRoles example &lt;label_name&gt;
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/adminRoles:AdminRoles")]
    public partial class AdminRoles : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Admin and role management access permission.
        /// </summary>
        [Output("adminAcctAccess")]
        public Output<string> AdminAcctAccess { get; private set; } = null!;

        /// <summary>
        /// Alerting access permission
        /// </summary>
        [Output("alertingAccess")]
        public Output<string> AlertingAccess { get; private set; } = null!;

        /// <summary>
        /// Insights logs access permission.
        /// </summary>
        [Output("analysisAccess")]
        public Output<string> AnalysisAccess { get; private set; } = null!;

        /// <summary>
        /// Dashboard access permission.
        /// </summary>
        [Output("dashboardAccess")]
        public Output<string> DashboardAccess { get; private set; } = null!;

        /// <summary>
        /// Device information access permission. When set to NONE, device information is obfuscated.
        /// </summary>
        [Output("deviceInfoAccess")]
        public Output<string> DeviceInfoAccess { get; private set; } = null!;

        /// <summary>
        /// External feature access permission.
        /// </summary>
        [Output("extFeaturePermissions")]
        public Output<ImmutableDictionary<string, string>?> ExtFeaturePermissions { get; private set; } = null!;

        /// <summary>
        /// Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
        /// access, or read-only access.
        /// </summary>
        [Output("featurePermissions")]
        public Output<ImmutableDictionary<string, string>?> FeaturePermissions { get; private set; } = null!;

        /// <summary>
        /// Indicates whether this is an auditor role.
        /// </summary>
        [Output("isAuditor")]
        public Output<bool?> IsAuditor { get; private set; } = null!;

        /// <summary>
        /// Indicates whether or not this admin user is editable/deletable.
        /// </summary>
        [Output("isNonEditable")]
        public Output<bool?> IsNonEditable { get; private set; } = null!;

        /// <summary>
        /// Log range limit.
        /// </summary>
        [Output("logsLimit")]
        public Output<string?> LogsLimit { get; private set; } = null!;

        /// <summary>
        /// The Name of the admin role
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Request method for which the rule must be applied. If not set, rule will be applied to all methods
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<string>> Permissions { get; private set; } = null!;

        /// <summary>
        /// Policy access permission.
        /// </summary>
        [Output("policyAccess")]
        public Output<string> PolicyAccess { get; private set; } = null!;

        /// <summary>
        /// Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
        /// value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
        /// which rule orders this admin can access.
        /// </summary>
        [Output("rank")]
        public Output<int?> Rank { get; private set; } = null!;

        /// <summary>
        /// Report access permission.
        /// </summary>
        [Output("reportAccess")]
        public Output<string> ReportAccess { get; private set; } = null!;

        /// <summary>
        /// Time duration allocated to the report dashboard.
        /// </summary>
        [Output("reportTimeDuration")]
        public Output<int> ReportTimeDuration { get; private set; } = null!;

        [Output("roleId")]
        public Output<int> RoleId { get; private set; } = null!;

        /// <summary>
        /// The admin role type. ()This attribute is subject to change.)
        /// </summary>
        [Output("roleType")]
        public Output<string?> RoleType { get; private set; } = null!;

        /// <summary>
        /// Username access permission. When set to NONE, the username will be obfuscated.
        /// </summary>
        [Output("usernameAccess")]
        public Output<string> UsernameAccess { get; private set; } = null!;


        /// <summary>
        /// Create a AdminRoles resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AdminRoles(string name, AdminRolesArgs? args = null, CustomResourceOptions? options = null)
            : base("zia:index/adminRoles:AdminRoles", name, args ?? new AdminRolesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AdminRoles(string name, Input<string> id, AdminRolesState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/adminRoles:AdminRoles", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AdminRoles resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AdminRoles Get(string name, Input<string> id, AdminRolesState? state = null, CustomResourceOptions? options = null)
        {
            return new AdminRoles(name, id, state, options);
        }
    }

    public sealed class AdminRolesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Admin and role management access permission.
        /// </summary>
        [Input("adminAcctAccess")]
        public Input<string>? AdminAcctAccess { get; set; }

        /// <summary>
        /// Alerting access permission
        /// </summary>
        [Input("alertingAccess")]
        public Input<string>? AlertingAccess { get; set; }

        /// <summary>
        /// Insights logs access permission.
        /// </summary>
        [Input("analysisAccess")]
        public Input<string>? AnalysisAccess { get; set; }

        /// <summary>
        /// Dashboard access permission.
        /// </summary>
        [Input("dashboardAccess")]
        public Input<string>? DashboardAccess { get; set; }

        /// <summary>
        /// Device information access permission. When set to NONE, device information is obfuscated.
        /// </summary>
        [Input("deviceInfoAccess")]
        public Input<string>? DeviceInfoAccess { get; set; }

        [Input("extFeaturePermissions")]
        private InputMap<string>? _extFeaturePermissions;

        /// <summary>
        /// External feature access permission.
        /// </summary>
        public InputMap<string> ExtFeaturePermissions
        {
            get => _extFeaturePermissions ?? (_extFeaturePermissions = new InputMap<string>());
            set => _extFeaturePermissions = value;
        }

        [Input("featurePermissions")]
        private InputMap<string>? _featurePermissions;

        /// <summary>
        /// Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
        /// access, or read-only access.
        /// </summary>
        public InputMap<string> FeaturePermissions
        {
            get => _featurePermissions ?? (_featurePermissions = new InputMap<string>());
            set => _featurePermissions = value;
        }

        /// <summary>
        /// Indicates whether this is an auditor role.
        /// </summary>
        [Input("isAuditor")]
        public Input<bool>? IsAuditor { get; set; }

        /// <summary>
        /// Indicates whether or not this admin user is editable/deletable.
        /// </summary>
        [Input("isNonEditable")]
        public Input<bool>? IsNonEditable { get; set; }

        /// <summary>
        /// Log range limit.
        /// </summary>
        [Input("logsLimit")]
        public Input<string>? LogsLimit { get; set; }

        /// <summary>
        /// The Name of the admin role
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        private InputList<string>? _permissions;

        /// <summary>
        /// Request method for which the rule must be applied. If not set, rule will be applied to all methods
        /// </summary>
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        /// <summary>
        /// Policy access permission.
        /// </summary>
        [Input("policyAccess")]
        public Input<string>? PolicyAccess { get; set; }

        /// <summary>
        /// Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
        /// value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
        /// which rule orders this admin can access.
        /// </summary>
        [Input("rank")]
        public Input<int>? Rank { get; set; }

        /// <summary>
        /// Report access permission.
        /// </summary>
        [Input("reportAccess")]
        public Input<string>? ReportAccess { get; set; }

        /// <summary>
        /// Time duration allocated to the report dashboard.
        /// </summary>
        [Input("reportTimeDuration")]
        public Input<int>? ReportTimeDuration { get; set; }

        /// <summary>
        /// The admin role type. ()This attribute is subject to change.)
        /// </summary>
        [Input("roleType")]
        public Input<string>? RoleType { get; set; }

        /// <summary>
        /// Username access permission. When set to NONE, the username will be obfuscated.
        /// </summary>
        [Input("usernameAccess")]
        public Input<string>? UsernameAccess { get; set; }

        public AdminRolesArgs()
        {
        }
        public static new AdminRolesArgs Empty => new AdminRolesArgs();
    }

    public sealed class AdminRolesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Admin and role management access permission.
        /// </summary>
        [Input("adminAcctAccess")]
        public Input<string>? AdminAcctAccess { get; set; }

        /// <summary>
        /// Alerting access permission
        /// </summary>
        [Input("alertingAccess")]
        public Input<string>? AlertingAccess { get; set; }

        /// <summary>
        /// Insights logs access permission.
        /// </summary>
        [Input("analysisAccess")]
        public Input<string>? AnalysisAccess { get; set; }

        /// <summary>
        /// Dashboard access permission.
        /// </summary>
        [Input("dashboardAccess")]
        public Input<string>? DashboardAccess { get; set; }

        /// <summary>
        /// Device information access permission. When set to NONE, device information is obfuscated.
        /// </summary>
        [Input("deviceInfoAccess")]
        public Input<string>? DeviceInfoAccess { get; set; }

        [Input("extFeaturePermissions")]
        private InputMap<string>? _extFeaturePermissions;

        /// <summary>
        /// External feature access permission.
        /// </summary>
        public InputMap<string> ExtFeaturePermissions
        {
            get => _extFeaturePermissions ?? (_extFeaturePermissions = new InputMap<string>());
            set => _extFeaturePermissions = value;
        }

        [Input("featurePermissions")]
        private InputMap<string>? _featurePermissions;

        /// <summary>
        /// Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
        /// access, or read-only access.
        /// </summary>
        public InputMap<string> FeaturePermissions
        {
            get => _featurePermissions ?? (_featurePermissions = new InputMap<string>());
            set => _featurePermissions = value;
        }

        /// <summary>
        /// Indicates whether this is an auditor role.
        /// </summary>
        [Input("isAuditor")]
        public Input<bool>? IsAuditor { get; set; }

        /// <summary>
        /// Indicates whether or not this admin user is editable/deletable.
        /// </summary>
        [Input("isNonEditable")]
        public Input<bool>? IsNonEditable { get; set; }

        /// <summary>
        /// Log range limit.
        /// </summary>
        [Input("logsLimit")]
        public Input<string>? LogsLimit { get; set; }

        /// <summary>
        /// The Name of the admin role
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("permissions")]
        private InputList<string>? _permissions;

        /// <summary>
        /// Request method for which the rule must be applied. If not set, rule will be applied to all methods
        /// </summary>
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        /// <summary>
        /// Policy access permission.
        /// </summary>
        [Input("policyAccess")]
        public Input<string>? PolicyAccess { get; set; }

        /// <summary>
        /// Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
        /// value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
        /// which rule orders this admin can access.
        /// </summary>
        [Input("rank")]
        public Input<int>? Rank { get; set; }

        /// <summary>
        /// Report access permission.
        /// </summary>
        [Input("reportAccess")]
        public Input<string>? ReportAccess { get; set; }

        /// <summary>
        /// Time duration allocated to the report dashboard.
        /// </summary>
        [Input("reportTimeDuration")]
        public Input<int>? ReportTimeDuration { get; set; }

        [Input("roleId")]
        public Input<int>? RoleId { get; set; }

        /// <summary>
        /// The admin role type. ()This attribute is subject to change.)
        /// </summary>
        [Input("roleType")]
        public Input<string>? RoleType { get; set; }

        /// <summary>
        /// Username access permission. When set to NONE, the username will be obfuscated.
        /// </summary>
        [Input("usernameAccess")]
        public Input<string>? UsernameAccess { get; set; }

        public AdminRolesState()
        {
        }
        public static new AdminRolesState Empty => new AdminRolesState();
    }
}
