// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// The **zia_advanced_threat_settings** resource allows you to update the advanced threat configuration settings. To learn more see [Configuring Advanced Settings](https://help.zscaler.com/zia/configuring-advanced-settings)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zia_advanced_threat_settings** can be imported by using `advanced_threat_settings` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/advancedThreatSettings:AdvancedThreatSettings this "advanced_threat_settings"
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/advancedThreatSettings:AdvancedThreatSettings")]
    public partial class AdvancedThreatSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A Boolean value specifying whether sites are allowed or blocked from accessing vulnerable ActiveX controls that are
        /// known to have been exploited.
        /// </summary>
        [Output("activexBlocked")]
        public Output<bool?> ActivexBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for ActiveX controls
        /// </summary>
        [Output("activexCapture")]
        public Output<bool?> ActivexCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether to allow or block websites known to contain adware or spyware that displays malicious
        /// advertisements that can collect users' information without their knowledge
        /// </summary>
        [Output("adSpywareSitesBlocked")]
        public Output<bool?> AdSpywareSitesBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for adware and spyware sites
        /// </summary>
        [Output("adSpywareSitesCapture")]
        public Output<bool?> AdSpywareSitesCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether to send alerts upon detecting unknown or suspicious C2 traffic
        /// </summary>
        [Output("alertForUnknownSuspiciousC2Traffic")]
        public Output<bool?> AlertForUnknownSuspiciousC2Traffic { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether to allow or block applications and methods used to obscure the destination and the
        /// content accessed by the user, therefore blocking traffic to anonymizing web proxies
        /// </summary>
        [Output("anonymizerBlocked")]
        public Output<bool?> AnonymizerBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for anonymizers
        /// </summary>
        [Output("anonymizerCapture")]
        public Output<bool?> AnonymizerCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        /// </summary>
        [Output("bitTorrentBlocked")]
        public Output<bool?> BitTorrentBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for BitTorrent
        /// </summary>
        [Output("bitTorrentCapture")]
        public Output<bool?> BitTorrentCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        /// </summary>
        [Output("blockCountriesCapture")]
        public Output<bool?> BlockCountriesCapture { get; private set; } = null!;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        [Output("blockedCountries")]
        public Output<ImmutableArray<string>> BlockedCountries { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether known web browser vulnerabilities prone to exploitation are allowed or blocked.
        /// </summary>
        [Output("browserExploitsBlocked")]
        public Output<bool?> BrowserExploitsBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for browser exploits
        /// </summary>
        [Output("browserExploitsCapture")]
        public Output<bool?> BrowserExploitsCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether connections to known Command &amp; Control (C2) Servers are allowed or blocked
        /// </summary>
        [Output("cmdCtlServerBlocked")]
        public Output<bool?> CmdCtlServerBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for connections to known C2 servers
        /// </summary>
        [Output("cmdCtlServerCapture")]
        public Output<bool?> CmdCtlServerCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether botnets are allowed or blocked from sending or receiving commands to unknown servers
        /// </summary>
        [Output("cmdCtlTrafficBlocked")]
        public Output<bool?> CmdCtlTrafficBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for botnets
        /// </summary>
        [Output("cmdCtlTrafficCapture")]
        public Output<bool?> CmdCtlTrafficCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether to allow or block third-party websites that gather cookie information
        /// </summary>
        [Output("cookieStealingBlocked")]
        public Output<bool?> CookieStealingBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for cookie stealing
        /// </summary>
        [Output("cookieStealingPcapEnabled")]
        public Output<bool?> CookieStealingPcapEnabled { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether to allow or block cryptocurrency mining network traffic and script
        /// </summary>
        [Output("cryptoMiningBlocked")]
        public Output<bool?> CryptoMiningBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for cryptomining
        /// </summary>
        [Output("cryptoMiningCapture")]
        public Output<bool?> CryptoMiningCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether to allow or block domains that are suspected to be generated using domain generation
        /// algorithms (DGA)
        /// </summary>
        [Output("dgaDomainsBlocked")]
        public Output<bool?> DgaDomainsBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for DGA domains
        /// </summary>
        [Output("dgaDomainsCapture")]
        public Output<bool?> DgaDomainsCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether known file format vulnerabilities and suspicious or malicious content in Microsoft
        /// Office or PDF documents are allowed or blocked
        /// </summary>
        [Output("fileFormatVunerabilitesBlocked")]
        public Output<bool?> FileFormatVunerabilitesBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for file format vulnerabilities
        /// </summary>
        [Output("fileFormatVunerabilitesCapture")]
        public Output<bool?> FileFormatVunerabilitesCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether to allow or block access to Google Hangouts, a popular P2P VoIP application.
        /// </summary>
        [Output("googleTalkBlocked")]
        public Output<bool?> GoogleTalkBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for Google Hangouts
        /// </summary>
        [Output("googleTalkCapture")]
        public Output<bool?> GoogleTalkCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        /// </summary>
        [Output("ircTunnellingBlocked")]
        public Output<bool?> IrcTunnellingBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for IRC tunnels
        /// </summary>
        [Output("ircTunnellingCapture")]
        public Output<bool?> IrcTunnellingCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether known phishing sites are allowed or blocked
        /// </summary>
        [Output("knownPhishingSitesBlocked")]
        public Output<bool?> KnownPhishingSitesBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for known phishing sites
        /// </summary>
        [Output("knownPhishingSitesCapture")]
        public Output<bool?> KnownPhishingSitesCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious URLs
        /// </summary>
        [Output("maliciousUrlsCapture")]
        public Output<bool?> MaliciousUrlsCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether known malicious sites and content are allowed or blocked
        /// </summary>
        [Output("malwareSitesBlocked")]
        public Output<bool?> MalwareSitesBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious sites
        /// </summary>
        [Output("malwareSitesCapture")]
        public Output<bool?> MalwareSitesCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether to allow or block this type of cross-site scripting (XSS)
        /// </summary>
        [Output("potentialMaliciousRequestsBlocked")]
        public Output<bool?> PotentialMaliciousRequestsBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for (XSS) attacks
        /// </summary>
        [Output("potentialMaliciousRequestsCapture")]
        public Output<bool?> PotentialMaliciousRequestsCapture { get; private set; } = null!;

        /// <summary>
        /// The Page Risk tolerance index set between 0 and 100 (100 being the highest risk).
        /// </summary>
        [Output("riskTolerance")]
        public Output<int?> RiskTolerance { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspicious web pages
        /// </summary>
        [Output("riskToleranceCapture")]
        public Output<bool?> RiskToleranceCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether to allow or block SSH traffic being tunneled over HTTP/Ss
        /// </summary>
        [Output("sshTunnellingBlocked")]
        public Output<bool?> SshTunnellingBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for SSH tunnels
        /// </summary>
        [Output("sshTunnellingCapture")]
        public Output<bool?> SshTunnellingCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether to allow or block any detections of communication and callback traffic associated
        /// with spyware agents and data transmission
        /// </summary>
        [Output("suspectAdwareSpywareSitesBlocked")]
        public Output<bool?> SuspectAdwareSpywareSitesBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected adware and spyware sites
        /// </summary>
        [Output("suspectAdwareSpywareSitesCapture")]
        public Output<bool?> SuspectAdwareSpywareSitesCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether to allow or block suspected phishing sites identified through heuristic detection.
        /// </summary>
        [Output("suspectedPhishingSitesBlocked")]
        public Output<bool?> SuspectedPhishingSitesBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected phishing sites
        /// </summary>
        [Output("suspectedPhishingSitesCapture")]
        public Output<bool?> SuspectedPhishingSitesCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether to allow or block the usage of Tor, a popular P2P anonymizer protocol with support
        /// for encryption.
        /// </summary>
        [Output("torBlocked")]
        public Output<bool?> TorBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for Tor
        /// </summary>
        [Output("torCapture")]
        public Output<bool?> TorCapture { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether to allow or block web pages that pretend to contain useful information, to get higher
        /// ranking in search engine results or drive traffic to phishing, adware, or spyware distribution sites.
        /// </summary>
        [Output("webSpamBlocked")]
        public Output<bool?> WebSpamBlocked { get; private set; } = null!;

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        /// </summary>
        [Output("webSpamCapture")]
        public Output<bool?> WebSpamCapture { get; private set; } = null!;


        /// <summary>
        /// Create a AdvancedThreatSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AdvancedThreatSettings(string name, AdvancedThreatSettingsArgs? args = null, CustomResourceOptions? options = null)
            : base("zia:index/advancedThreatSettings:AdvancedThreatSettings", name, args ?? new AdvancedThreatSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AdvancedThreatSettings(string name, Input<string> id, AdvancedThreatSettingsState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/advancedThreatSettings:AdvancedThreatSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AdvancedThreatSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AdvancedThreatSettings Get(string name, Input<string> id, AdvancedThreatSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new AdvancedThreatSettings(name, id, state, options);
        }
    }

    public sealed class AdvancedThreatSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Boolean value specifying whether sites are allowed or blocked from accessing vulnerable ActiveX controls that are
        /// known to have been exploited.
        /// </summary>
        [Input("activexBlocked")]
        public Input<bool>? ActivexBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for ActiveX controls
        /// </summary>
        [Input("activexCapture")]
        public Input<bool>? ActivexCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block websites known to contain adware or spyware that displays malicious
        /// advertisements that can collect users' information without their knowledge
        /// </summary>
        [Input("adSpywareSitesBlocked")]
        public Input<bool>? AdSpywareSitesBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for adware and spyware sites
        /// </summary>
        [Input("adSpywareSitesCapture")]
        public Input<bool>? AdSpywareSitesCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to send alerts upon detecting unknown or suspicious C2 traffic
        /// </summary>
        [Input("alertForUnknownSuspiciousC2Traffic")]
        public Input<bool>? AlertForUnknownSuspiciousC2Traffic { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block applications and methods used to obscure the destination and the
        /// content accessed by the user, therefore blocking traffic to anonymizing web proxies
        /// </summary>
        [Input("anonymizerBlocked")]
        public Input<bool>? AnonymizerBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for anonymizers
        /// </summary>
        [Input("anonymizerCapture")]
        public Input<bool>? AnonymizerCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        /// </summary>
        [Input("bitTorrentBlocked")]
        public Input<bool>? BitTorrentBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for BitTorrent
        /// </summary>
        [Input("bitTorrentCapture")]
        public Input<bool>? BitTorrentCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        /// </summary>
        [Input("blockCountriesCapture")]
        public Input<bool>? BlockCountriesCapture { get; set; }

        [Input("blockedCountries")]
        private InputList<string>? _blockedCountries;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        public InputList<string> BlockedCountries
        {
            get => _blockedCountries ?? (_blockedCountries = new InputList<string>());
            set => _blockedCountries = value;
        }

        /// <summary>
        /// A Boolean value specifying whether known web browser vulnerabilities prone to exploitation are allowed or blocked.
        /// </summary>
        [Input("browserExploitsBlocked")]
        public Input<bool>? BrowserExploitsBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for browser exploits
        /// </summary>
        [Input("browserExploitsCapture")]
        public Input<bool>? BrowserExploitsCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether connections to known Command &amp; Control (C2) Servers are allowed or blocked
        /// </summary>
        [Input("cmdCtlServerBlocked")]
        public Input<bool>? CmdCtlServerBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for connections to known C2 servers
        /// </summary>
        [Input("cmdCtlServerCapture")]
        public Input<bool>? CmdCtlServerCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether botnets are allowed or blocked from sending or receiving commands to unknown servers
        /// </summary>
        [Input("cmdCtlTrafficBlocked")]
        public Input<bool>? CmdCtlTrafficBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for botnets
        /// </summary>
        [Input("cmdCtlTrafficCapture")]
        public Input<bool>? CmdCtlTrafficCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block third-party websites that gather cookie information
        /// </summary>
        [Input("cookieStealingBlocked")]
        public Input<bool>? CookieStealingBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for cookie stealing
        /// </summary>
        [Input("cookieStealingPcapEnabled")]
        public Input<bool>? CookieStealingPcapEnabled { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block cryptocurrency mining network traffic and script
        /// </summary>
        [Input("cryptoMiningBlocked")]
        public Input<bool>? CryptoMiningBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for cryptomining
        /// </summary>
        [Input("cryptoMiningCapture")]
        public Input<bool>? CryptoMiningCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block domains that are suspected to be generated using domain generation
        /// algorithms (DGA)
        /// </summary>
        [Input("dgaDomainsBlocked")]
        public Input<bool>? DgaDomainsBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for DGA domains
        /// </summary>
        [Input("dgaDomainsCapture")]
        public Input<bool>? DgaDomainsCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether known file format vulnerabilities and suspicious or malicious content in Microsoft
        /// Office or PDF documents are allowed or blocked
        /// </summary>
        [Input("fileFormatVunerabilitesBlocked")]
        public Input<bool>? FileFormatVunerabilitesBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for file format vulnerabilities
        /// </summary>
        [Input("fileFormatVunerabilitesCapture")]
        public Input<bool>? FileFormatVunerabilitesCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block access to Google Hangouts, a popular P2P VoIP application.
        /// </summary>
        [Input("googleTalkBlocked")]
        public Input<bool>? GoogleTalkBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for Google Hangouts
        /// </summary>
        [Input("googleTalkCapture")]
        public Input<bool>? GoogleTalkCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        /// </summary>
        [Input("ircTunnellingBlocked")]
        public Input<bool>? IrcTunnellingBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for IRC tunnels
        /// </summary>
        [Input("ircTunnellingCapture")]
        public Input<bool>? IrcTunnellingCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether known phishing sites are allowed or blocked
        /// </summary>
        [Input("knownPhishingSitesBlocked")]
        public Input<bool>? KnownPhishingSitesBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for known phishing sites
        /// </summary>
        [Input("knownPhishingSitesCapture")]
        public Input<bool>? KnownPhishingSitesCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious URLs
        /// </summary>
        [Input("maliciousUrlsCapture")]
        public Input<bool>? MaliciousUrlsCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether known malicious sites and content are allowed or blocked
        /// </summary>
        [Input("malwareSitesBlocked")]
        public Input<bool>? MalwareSitesBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious sites
        /// </summary>
        [Input("malwareSitesCapture")]
        public Input<bool>? MalwareSitesCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block this type of cross-site scripting (XSS)
        /// </summary>
        [Input("potentialMaliciousRequestsBlocked")]
        public Input<bool>? PotentialMaliciousRequestsBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for (XSS) attacks
        /// </summary>
        [Input("potentialMaliciousRequestsCapture")]
        public Input<bool>? PotentialMaliciousRequestsCapture { get; set; }

        /// <summary>
        /// The Page Risk tolerance index set between 0 and 100 (100 being the highest risk).
        /// </summary>
        [Input("riskTolerance")]
        public Input<int>? RiskTolerance { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspicious web pages
        /// </summary>
        [Input("riskToleranceCapture")]
        public Input<bool>? RiskToleranceCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block SSH traffic being tunneled over HTTP/Ss
        /// </summary>
        [Input("sshTunnellingBlocked")]
        public Input<bool>? SshTunnellingBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for SSH tunnels
        /// </summary>
        [Input("sshTunnellingCapture")]
        public Input<bool>? SshTunnellingCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block any detections of communication and callback traffic associated
        /// with spyware agents and data transmission
        /// </summary>
        [Input("suspectAdwareSpywareSitesBlocked")]
        public Input<bool>? SuspectAdwareSpywareSitesBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected adware and spyware sites
        /// </summary>
        [Input("suspectAdwareSpywareSitesCapture")]
        public Input<bool>? SuspectAdwareSpywareSitesCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block suspected phishing sites identified through heuristic detection.
        /// </summary>
        [Input("suspectedPhishingSitesBlocked")]
        public Input<bool>? SuspectedPhishingSitesBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected phishing sites
        /// </summary>
        [Input("suspectedPhishingSitesCapture")]
        public Input<bool>? SuspectedPhishingSitesCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block the usage of Tor, a popular P2P anonymizer protocol with support
        /// for encryption.
        /// </summary>
        [Input("torBlocked")]
        public Input<bool>? TorBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for Tor
        /// </summary>
        [Input("torCapture")]
        public Input<bool>? TorCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block web pages that pretend to contain useful information, to get higher
        /// ranking in search engine results or drive traffic to phishing, adware, or spyware distribution sites.
        /// </summary>
        [Input("webSpamBlocked")]
        public Input<bool>? WebSpamBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        /// </summary>
        [Input("webSpamCapture")]
        public Input<bool>? WebSpamCapture { get; set; }

        public AdvancedThreatSettingsArgs()
        {
        }
        public static new AdvancedThreatSettingsArgs Empty => new AdvancedThreatSettingsArgs();
    }

    public sealed class AdvancedThreatSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Boolean value specifying whether sites are allowed or blocked from accessing vulnerable ActiveX controls that are
        /// known to have been exploited.
        /// </summary>
        [Input("activexBlocked")]
        public Input<bool>? ActivexBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for ActiveX controls
        /// </summary>
        [Input("activexCapture")]
        public Input<bool>? ActivexCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block websites known to contain adware or spyware that displays malicious
        /// advertisements that can collect users' information without their knowledge
        /// </summary>
        [Input("adSpywareSitesBlocked")]
        public Input<bool>? AdSpywareSitesBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for adware and spyware sites
        /// </summary>
        [Input("adSpywareSitesCapture")]
        public Input<bool>? AdSpywareSitesCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to send alerts upon detecting unknown or suspicious C2 traffic
        /// </summary>
        [Input("alertForUnknownSuspiciousC2Traffic")]
        public Input<bool>? AlertForUnknownSuspiciousC2Traffic { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block applications and methods used to obscure the destination and the
        /// content accessed by the user, therefore blocking traffic to anonymizing web proxies
        /// </summary>
        [Input("anonymizerBlocked")]
        public Input<bool>? AnonymizerBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for anonymizers
        /// </summary>
        [Input("anonymizerCapture")]
        public Input<bool>? AnonymizerCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        /// </summary>
        [Input("bitTorrentBlocked")]
        public Input<bool>? BitTorrentBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for BitTorrent
        /// </summary>
        [Input("bitTorrentCapture")]
        public Input<bool>? BitTorrentCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        /// </summary>
        [Input("blockCountriesCapture")]
        public Input<bool>? BlockCountriesCapture { get; set; }

        [Input("blockedCountries")]
        private InputList<string>? _blockedCountries;

        /// <summary>
        /// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        /// countries.
        /// </summary>
        public InputList<string> BlockedCountries
        {
            get => _blockedCountries ?? (_blockedCountries = new InputList<string>());
            set => _blockedCountries = value;
        }

        /// <summary>
        /// A Boolean value specifying whether known web browser vulnerabilities prone to exploitation are allowed or blocked.
        /// </summary>
        [Input("browserExploitsBlocked")]
        public Input<bool>? BrowserExploitsBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for browser exploits
        /// </summary>
        [Input("browserExploitsCapture")]
        public Input<bool>? BrowserExploitsCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether connections to known Command &amp; Control (C2) Servers are allowed or blocked
        /// </summary>
        [Input("cmdCtlServerBlocked")]
        public Input<bool>? CmdCtlServerBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for connections to known C2 servers
        /// </summary>
        [Input("cmdCtlServerCapture")]
        public Input<bool>? CmdCtlServerCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether botnets are allowed or blocked from sending or receiving commands to unknown servers
        /// </summary>
        [Input("cmdCtlTrafficBlocked")]
        public Input<bool>? CmdCtlTrafficBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for botnets
        /// </summary>
        [Input("cmdCtlTrafficCapture")]
        public Input<bool>? CmdCtlTrafficCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block third-party websites that gather cookie information
        /// </summary>
        [Input("cookieStealingBlocked")]
        public Input<bool>? CookieStealingBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for cookie stealing
        /// </summary>
        [Input("cookieStealingPcapEnabled")]
        public Input<bool>? CookieStealingPcapEnabled { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block cryptocurrency mining network traffic and script
        /// </summary>
        [Input("cryptoMiningBlocked")]
        public Input<bool>? CryptoMiningBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for cryptomining
        /// </summary>
        [Input("cryptoMiningCapture")]
        public Input<bool>? CryptoMiningCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block domains that are suspected to be generated using domain generation
        /// algorithms (DGA)
        /// </summary>
        [Input("dgaDomainsBlocked")]
        public Input<bool>? DgaDomainsBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for DGA domains
        /// </summary>
        [Input("dgaDomainsCapture")]
        public Input<bool>? DgaDomainsCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether known file format vulnerabilities and suspicious or malicious content in Microsoft
        /// Office or PDF documents are allowed or blocked
        /// </summary>
        [Input("fileFormatVunerabilitesBlocked")]
        public Input<bool>? FileFormatVunerabilitesBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for file format vulnerabilities
        /// </summary>
        [Input("fileFormatVunerabilitesCapture")]
        public Input<bool>? FileFormatVunerabilitesCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block access to Google Hangouts, a popular P2P VoIP application.
        /// </summary>
        [Input("googleTalkBlocked")]
        public Input<bool>? GoogleTalkBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for Google Hangouts
        /// </summary>
        [Input("googleTalkCapture")]
        public Input<bool>? GoogleTalkCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        /// </summary>
        [Input("ircTunnellingBlocked")]
        public Input<bool>? IrcTunnellingBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for IRC tunnels
        /// </summary>
        [Input("ircTunnellingCapture")]
        public Input<bool>? IrcTunnellingCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether known phishing sites are allowed or blocked
        /// </summary>
        [Input("knownPhishingSitesBlocked")]
        public Input<bool>? KnownPhishingSitesBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for known phishing sites
        /// </summary>
        [Input("knownPhishingSitesCapture")]
        public Input<bool>? KnownPhishingSitesCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious URLs
        /// </summary>
        [Input("maliciousUrlsCapture")]
        public Input<bool>? MaliciousUrlsCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether known malicious sites and content are allowed or blocked
        /// </summary>
        [Input("malwareSitesBlocked")]
        public Input<bool>? MalwareSitesBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious sites
        /// </summary>
        [Input("malwareSitesCapture")]
        public Input<bool>? MalwareSitesCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block this type of cross-site scripting (XSS)
        /// </summary>
        [Input("potentialMaliciousRequestsBlocked")]
        public Input<bool>? PotentialMaliciousRequestsBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for (XSS) attacks
        /// </summary>
        [Input("potentialMaliciousRequestsCapture")]
        public Input<bool>? PotentialMaliciousRequestsCapture { get; set; }

        /// <summary>
        /// The Page Risk tolerance index set between 0 and 100 (100 being the highest risk).
        /// </summary>
        [Input("riskTolerance")]
        public Input<int>? RiskTolerance { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspicious web pages
        /// </summary>
        [Input("riskToleranceCapture")]
        public Input<bool>? RiskToleranceCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block SSH traffic being tunneled over HTTP/Ss
        /// </summary>
        [Input("sshTunnellingBlocked")]
        public Input<bool>? SshTunnellingBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for SSH tunnels
        /// </summary>
        [Input("sshTunnellingCapture")]
        public Input<bool>? SshTunnellingCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block any detections of communication and callback traffic associated
        /// with spyware agents and data transmission
        /// </summary>
        [Input("suspectAdwareSpywareSitesBlocked")]
        public Input<bool>? SuspectAdwareSpywareSitesBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected adware and spyware sites
        /// </summary>
        [Input("suspectAdwareSpywareSitesCapture")]
        public Input<bool>? SuspectAdwareSpywareSitesCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block suspected phishing sites identified through heuristic detection.
        /// </summary>
        [Input("suspectedPhishingSitesBlocked")]
        public Input<bool>? SuspectedPhishingSitesBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected phishing sites
        /// </summary>
        [Input("suspectedPhishingSitesCapture")]
        public Input<bool>? SuspectedPhishingSitesCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block the usage of Tor, a popular P2P anonymizer protocol with support
        /// for encryption.
        /// </summary>
        [Input("torBlocked")]
        public Input<bool>? TorBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for Tor
        /// </summary>
        [Input("torCapture")]
        public Input<bool>? TorCapture { get; set; }

        /// <summary>
        /// A Boolean value specifying whether to allow or block web pages that pretend to contain useful information, to get higher
        /// ranking in search engine results or drive traffic to phishing, adware, or spyware distribution sites.
        /// </summary>
        [Input("webSpamBlocked")]
        public Input<bool>? WebSpamBlocked { get; set; }

        /// <summary>
        /// A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        /// </summary>
        [Input("webSpamCapture")]
        public Input<bool>? WebSpamCapture { get; set; }

        public AdvancedThreatSettingsState()
        {
        }
        public static new AdvancedThreatSettingsState Empty => new AdvancedThreatSettingsState();
    }
}
