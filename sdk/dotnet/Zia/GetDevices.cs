// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    public static class GetDevices
    {
        /// <summary>
        /// Use the **zia_devices** data source to get information about a device in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: URL Filtering Rules
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zia = Pulumi.Zia;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var device = Zia.GetDevices.Invoke(new()
        ///     {
        ///         Name = "administrator",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Task<GetDevicesResult> InvokeAsync(GetDevicesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDevicesResult>("zia:index/getDevices:getDevices", args ?? new GetDevicesArgs(), options.WithDefaults());

        /// <summary>
        /// Use the **zia_devices** data source to get information about a device in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: URL Filtering Rules
        /// 
        /// ## Example Usage
        /// 
        /// &lt;!--Start PulumiCodeChooser --&gt;
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Zia = Pulumi.Zia;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var device = Zia.GetDevices.Invoke(new()
        ///     {
        ///         Name = "administrator",
        ///     });
        /// 
        /// });
        /// ```
        /// &lt;!--End PulumiCodeChooser --&gt;
        /// </summary>
        public static Output<GetDevicesResult> Invoke(GetDevicesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDevicesResult>("zia:index/getDevices:getDevices", args ?? new GetDevicesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDevicesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (String) The device group type. i.e ``ZCC_OS``, ``NON_ZCC``, ``CBI``
        /// </summary>
        [Input("deviceGroupType")]
        public string? DeviceGroupType { get; set; }

        /// <summary>
        /// (String) The device model.
        /// </summary>
        [Input("deviceModel")]
        public string? DeviceModel { get; set; }

        /// <summary>
        /// The name of the devices to be exported.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// (String) The operating system (OS). ``ANY``, ``OTHER_OS``, ``IOS``, ``ANDROID_OS``, ``WINDOWS_OS``, ``MAC_OS``, ``LINUX``
        /// </summary>
        [Input("osType")]
        public string? OsType { get; set; }

        /// <summary>
        /// (String) The operating system version.
        /// </summary>
        [Input("osVersion")]
        public string? OsVersion { get; set; }

        /// <summary>
        /// (String) The device owner's user name.
        /// </summary>
        [Input("ownerName")]
        public string? OwnerName { get; set; }

        public GetDevicesArgs()
        {
        }
        public static new GetDevicesArgs Empty => new GetDevicesArgs();
    }

    public sealed class GetDevicesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (String) The device group type. i.e ``ZCC_OS``, ``NON_ZCC``, ``CBI``
        /// </summary>
        [Input("deviceGroupType")]
        public Input<string>? DeviceGroupType { get; set; }

        /// <summary>
        /// (String) The device model.
        /// </summary>
        [Input("deviceModel")]
        public Input<string>? DeviceModel { get; set; }

        /// <summary>
        /// The name of the devices to be exported.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (String) The operating system (OS). ``ANY``, ``OTHER_OS``, ``IOS``, ``ANDROID_OS``, ``WINDOWS_OS``, ``MAC_OS``, ``LINUX``
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// (String) The operating system version.
        /// </summary>
        [Input("osVersion")]
        public Input<string>? OsVersion { get; set; }

        /// <summary>
        /// (String) The device owner's user name.
        /// </summary>
        [Input("ownerName")]
        public Input<string>? OwnerName { get; set; }

        public GetDevicesInvokeArgs()
        {
        }
        public static new GetDevicesInvokeArgs Empty => new GetDevicesInvokeArgs();
    }


    [OutputType]
    public sealed class GetDevicesResult
    {
        /// <summary>
        /// (String) The device's description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (String) The device group type. i.e ``ZCC_OS``, ``NON_ZCC``, ``CBI``
        /// </summary>
        public readonly string DeviceGroupType;
        /// <summary>
        /// (String) The device model.
        /// </summary>
        public readonly string DeviceModel;
        /// <summary>
        /// (String) The unique identifer for the device group.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// (String) The device name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (String) The operating system (OS). ``ANY``, ``OTHER_OS``, ``IOS``, ``ANDROID_OS``, ``WINDOWS_OS``, ``MAC_OS``, ``LINUX``
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// (String) The operating system version.
        /// </summary>
        public readonly string OsVersion;
        /// <summary>
        /// (String) The device owner's user name.
        /// </summary>
        public readonly string OwnerName;
        /// <summary>
        /// (int) The unique identifier of the device owner (i.e., user).
        /// </summary>
        public readonly int OwnerUserId;

        [OutputConstructor]
        private GetDevicesResult(
            string description,

            string deviceGroupType,

            string deviceModel,

            int id,

            string name,

            string osType,

            string osVersion,

            string ownerName,

            int ownerUserId)
        {
            Description = description;
            DeviceGroupType = deviceGroupType;
            DeviceModel = deviceModel;
            Id = id;
            Name = name;
            OsType = osType;
            OsVersion = osVersion;
            OwnerName = ownerName;
            OwnerUserId = ownerUserId;
        }
    }
}
