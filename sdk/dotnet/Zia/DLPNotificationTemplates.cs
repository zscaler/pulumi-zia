// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// The **zia_dlp_notification_templates** resource allows the creation and management of ZIA DLP Notification Templates in the Zscaler Internet Access cloud or via the API.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zia_dlp_notification_templates** can be imported by using `&lt;TEMPLATE ID&gt;` or `&lt;TEMPLATE NAME&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/dLPNotificationTemplates:DLPNotificationTemplates example &lt;template_id&gt;
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zia:index/dLPNotificationTemplates:DLPNotificationTemplates example &lt;template_name&gt;
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/dLPNotificationTemplates:DLPNotificationTemplates")]
    public partial class DLPNotificationTemplates : global::Pulumi.CustomResource
    {
        /// <summary>
        /// f set to true, the content that is violation is attached to the DLP notification email
        /// </summary>
        [Output("attachContent")]
        public Output<bool?> AttachContent { get; private set; } = null!;

        /// <summary>
        /// The template for the HTML message body that must be displayed in the DLP notification email
        /// </summary>
        [Output("htmlMessage")]
        public Output<string> HtmlMessage { get; private set; } = null!;

        /// <summary>
        /// The DLP notification template name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The template for the plain text UTF-8 message body that must be displayed in the DLP notification email
        /// </summary>
        [Output("plainTextMessage")]
        public Output<string> PlainTextMessage { get; private set; } = null!;

        /// <summary>
        /// The Subject line that is displayed within the DLP notification email
        /// </summary>
        [Output("subject")]
        public Output<string> Subject { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for a DLP notification template
        /// </summary>
        [Output("templateId")]
        public Output<int> TemplateId { get; private set; } = null!;

        /// <summary>
        /// If set to true, TLS will be enabled
        /// </summary>
        [Output("tlsEnabled")]
        public Output<bool?> TlsEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a DLPNotificationTemplates resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DLPNotificationTemplates(string name, DLPNotificationTemplatesArgs args, CustomResourceOptions? options = null)
            : base("zia:index/dLPNotificationTemplates:DLPNotificationTemplates", name, args ?? new DLPNotificationTemplatesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DLPNotificationTemplates(string name, Input<string> id, DLPNotificationTemplatesState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/dLPNotificationTemplates:DLPNotificationTemplates", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DLPNotificationTemplates resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DLPNotificationTemplates Get(string name, Input<string> id, DLPNotificationTemplatesState? state = null, CustomResourceOptions? options = null)
        {
            return new DLPNotificationTemplates(name, id, state, options);
        }
    }

    public sealed class DLPNotificationTemplatesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// f set to true, the content that is violation is attached to the DLP notification email
        /// </summary>
        [Input("attachContent")]
        public Input<bool>? AttachContent { get; set; }

        /// <summary>
        /// The template for the HTML message body that must be displayed in the DLP notification email
        /// </summary>
        [Input("htmlMessage", required: true)]
        public Input<string> HtmlMessage { get; set; } = null!;

        /// <summary>
        /// The DLP notification template name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The template for the plain text UTF-8 message body that must be displayed in the DLP notification email
        /// </summary>
        [Input("plainTextMessage", required: true)]
        public Input<string> PlainTextMessage { get; set; } = null!;

        /// <summary>
        /// The Subject line that is displayed within the DLP notification email
        /// </summary>
        [Input("subject", required: true)]
        public Input<string> Subject { get; set; } = null!;

        /// <summary>
        /// If set to true, TLS will be enabled
        /// </summary>
        [Input("tlsEnabled")]
        public Input<bool>? TlsEnabled { get; set; }

        public DLPNotificationTemplatesArgs()
        {
        }
        public static new DLPNotificationTemplatesArgs Empty => new DLPNotificationTemplatesArgs();
    }

    public sealed class DLPNotificationTemplatesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// f set to true, the content that is violation is attached to the DLP notification email
        /// </summary>
        [Input("attachContent")]
        public Input<bool>? AttachContent { get; set; }

        /// <summary>
        /// The template for the HTML message body that must be displayed in the DLP notification email
        /// </summary>
        [Input("htmlMessage")]
        public Input<string>? HtmlMessage { get; set; }

        /// <summary>
        /// The DLP notification template name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The template for the plain text UTF-8 message body that must be displayed in the DLP notification email
        /// </summary>
        [Input("plainTextMessage")]
        public Input<string>? PlainTextMessage { get; set; }

        /// <summary>
        /// The Subject line that is displayed within the DLP notification email
        /// </summary>
        [Input("subject")]
        public Input<string>? Subject { get; set; }

        /// <summary>
        /// The unique identifier for a DLP notification template
        /// </summary>
        [Input("templateId")]
        public Input<int>? TemplateId { get; set; }

        /// <summary>
        /// If set to true, TLS will be enabled
        /// </summary>
        [Input("tlsEnabled")]
        public Input<bool>? TlsEnabled { get; set; }

        public DLPNotificationTemplatesState()
        {
        }
        public static new DLPNotificationTemplatesState Empty => new DLPNotificationTemplatesState();
    }
}
