// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    [Obsolete(@"zia.index/getfirewalldnsrule.getFirewallDnsRule has been deprecated in favor of zia.index/getfirewalldnsrules.getFirewallDNSRules")]
    public static class GetFirewallDnsRule
    {
        /// <summary>
        /// Use the **zia_firewall_dns_rule** data source to get information about a cloud firewall DNS rule available in the Zscaler Internet Access.
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// # ZIA Firewall DNS Rule by name
        /// data "zia_firewall_dns_rule" "this" {
        ///     name = "Default Cloud IPS Rule"
        /// }
        /// ```
        /// 
        /// ```hcl
        /// # ZIA Firewall DNS Rule by ID
        /// data "zia_firewall_dns_rule" "this" {
        ///     id = "12365478"
        /// }
        /// ```
        /// </summary>
        public static Task<GetFirewallDnsRuleResult> InvokeAsync(GetFirewallDnsRuleArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFirewallDnsRuleResult>("zia:index/getFirewallDnsRule:getFirewallDnsRule", args ?? new GetFirewallDnsRuleArgs(), options.WithDefaults());

        /// <summary>
        /// Use the **zia_firewall_dns_rule** data source to get information about a cloud firewall DNS rule available in the Zscaler Internet Access.
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// # ZIA Firewall DNS Rule by name
        /// data "zia_firewall_dns_rule" "this" {
        ///     name = "Default Cloud IPS Rule"
        /// }
        /// ```
        /// 
        /// ```hcl
        /// # ZIA Firewall DNS Rule by ID
        /// data "zia_firewall_dns_rule" "this" {
        ///     id = "12365478"
        /// }
        /// ```
        /// </summary>
        public static Output<GetFirewallDnsRuleResult> Invoke(GetFirewallDnsRuleInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirewallDnsRuleResult>("zia:index/getFirewallDnsRule:getFirewallDnsRule", args ?? new GetFirewallDnsRuleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use the **zia_firewall_dns_rule** data source to get information about a cloud firewall DNS rule available in the Zscaler Internet Access.
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// # ZIA Firewall DNS Rule by name
        /// data "zia_firewall_dns_rule" "this" {
        ///     name = "Default Cloud IPS Rule"
        /// }
        /// ```
        /// 
        /// ```hcl
        /// # ZIA Firewall DNS Rule by ID
        /// data "zia_firewall_dns_rule" "this" {
        ///     id = "12365478"
        /// }
        /// ```
        /// </summary>
        public static Output<GetFirewallDnsRuleResult> Invoke(GetFirewallDnsRuleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFirewallDnsRuleResult>("zia:index/getFirewallDnsRule:getFirewallDnsRule", args ?? new GetFirewallDnsRuleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFirewallDnsRuleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier for the Firewall Filtering policy rule
        /// </summary>
        [Input("id")]
        public int? Id { get; set; }

        /// <summary>
        /// Name of the Firewall Filtering policy rule
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetFirewallDnsRuleArgs()
        {
        }
        public static new GetFirewallDnsRuleArgs Empty => new GetFirewallDnsRuleArgs();
    }

    public sealed class GetFirewallDnsRuleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique identifier for the Firewall Filtering policy rule
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        /// <summary>
        /// Name of the Firewall Filtering policy rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetFirewallDnsRuleInvokeArgs()
        {
        }
        public static new GetFirewallDnsRuleInvokeArgs Empty => new GetFirewallDnsRuleInvokeArgs();
    }


    [OutputType]
    public sealed class GetFirewallDnsRuleResult
    {
        /// <summary>
        /// (String) The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or blocking the traffic or bypassing the rule. The following actions are accepted: `ALLOW`, `BLOCK`, `REDIR_REQ`, `REDIR_RES`, `REDIR_ZPA`, `REDIR_REQ_DOH`, `REDIR_REQ_KEEP_SENDER`, `REDIR_REQ_TCP`, `REDIR_REQ_UDP`, `BLOCK_WITH_RESPONSE`
        /// </summary>
        public readonly string Action;
        /// <summary>
        /// (List of Objects) DNS application groups to which the rule applies
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleApplicationGroupResult> ApplicationGroups;
        /// <summary>
        /// (Set of Strings) DNS tunnels and network applications to which the rule applies. To retrieve the available list of DNS tunnels applications use the data source: `zia.getCloudApplications` with the `app_class` value `DNS_OVER_HTTPS`. See example:
        /// </summary>
        public readonly ImmutableArray<string> Applications;
        /// <summary>
        /// (String) Specifies the DNS response code to be sent to the client when the action is configured to block and send response code. Supported values are: `ANY`, `NONE`, `FORMERR`, `SERVFAIL`, `NXDOMAIN`, `NOTIMP`, `REFUSED`, `YXDOMAIN`, `YXRRSET`, `NXRRSET`, `NOTAUTH`, `NOTZONE`, `BADVERS`, `BADKEY`, `BADTIME`, `BADMODE`, `BADNAME`, `BADALG`, `BADTRUNC`, `UNSUPPORTED`, `BYPASS`, `INT_ERROR`, `SRV_TIMEOUT`, `EMPTY_RESP`,
        /// `REQ_BLOCKED`, `ADMIN_DROP`, `WCDN_TIMEOUT`, `IPS_BLOCK`, `FQDN_RESOLV_FAIL`
        /// </summary>
        public readonly string BlockResponseCode;
        /// <summary>
        /// (Boolean) Value that indicates whether packet capture (PCAP) is enabled or not
        /// </summary>
        public readonly bool CapturePcap;
        /// <summary>
        /// (Boolean) Value that indicates whether the rule is the Default Cloud DNS Rule or not
        /// </summary>
        public readonly bool DefaultRule;
        /// <summary>
        /// (List of Objects) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleDepartmentResult> Departments;
        /// <summary>
        /// (String) Enter additional notes or information. The description cannot exceed 10,240 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (Set of String) Destination IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific destination IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        /// </summary>
        public readonly ImmutableArray<string> DestAddresses;
        /// <summary>
        /// (Set of String) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
        /// **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        /// </summary>
        public readonly ImmutableArray<string> DestCountries;
        /// <summary>
        /// (Set of String)  identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        /// </summary>
        public readonly ImmutableArray<string> DestIpCategories;
        /// <summary>
        /// ** - (List of Objects) Any number of destination IP address groups that you want to control with this rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleDestIpGroupResult> DestIpGroups;
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleDestIpv6GroupResult> DestIpv6Groups;
        /// <summary>
        /// (List of Objects) Device groups to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleDeviceGroupResult> DeviceGroups;
        /// <summary>
        /// (List of Objects) Devices to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleDeviceResult> Devices;
        /// <summary>
        /// (Set of Strings) DNS request types to which the rule applies. Supportedn values are:
        /// `A`, `NS`, `MD`, `MF`, `CNAME`, `SOA`, `MB`, `MG`, `MR`, `NULL`, `WKS`, `PTR`, `HINFO`, `MINFO`, `MX`, `TXT`, `RP`, `AFSDB`,
        /// `X25`, `ISDN`, `RT`, `NSAP`, `NSAP_PTR`, `SIG`, `KEY`, `PX`, `GPOS`, `AAAA`, `LOC`, `NXT`, `EID`, `NIMLOC`, `SRV`, `ATMA`,
        /// `NAPTR`, `KX`, `CERT`, `A6`, `DNAME`, `SINK`, `OPT`, `APL`, `DS`, `SSHFP`, `PSECKEF`, `RRSIG`, `NSEC`, `DNSKEY`,
        /// `DHCID`, `NSEC3`, `NSEC3PARAM`, `TLSA`, `HIP`, `NINFO`, `RKEY`, `TALINK`, `CDS`, `CDNSKEY`, `OPENPGPKEY`, `CSYNC`,
        /// `ZONEMD`, `SVCB`, `HTTPS`,
        /// </summary>
        public readonly ImmutableArray<string> DnsRuleRequestTypes;
        /// <summary>
        /// (List of Objects) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleGroupResult> Groups;
        /// <summary>
        /// (Integer) Identifier that uniquely identifies an entity
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// (List of Objects) Labels that are applicable to the rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleLabelResult> Labels;
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleLastModifiedByResult> LastModifiedBies;
        public readonly int LastModifiedTime;
        /// <summary>
        /// (List of Objects)You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleLocationGroupResult> LocationGroups;
        /// <summary>
        /// (List of Objects) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleLocationResult> Locations;
        /// <summary>
        /// (string) The configured name of the entity
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (Integer) Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        /// </summary>
        public readonly int Order;
        /// <summary>
        /// (Boolean) A Boolean field that indicates that the rule is predefined by using a true value
        /// </summary>
        public readonly bool Predefined;
        /// <summary>
        /// (Set of Strings) The protocols to which the rules applies. Supported Values: `ANY_RULE`, `SMRULEF_CASCADING_ALLOWED`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`
        /// </summary>
        public readonly ImmutableArray<string> Protocols;
        /// <summary>
        /// (Integer) By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        /// </summary>
        public readonly int Rank;
        /// <summary>
        /// (String) The IP address to which the traffic will be redirected to when the DNAT rule is triggered. If not set, no redirection is done to specific IP addresses. Only supported when the `action` is `REDIR_REQ`
        /// </summary>
        public readonly string RedirectIp;
        /// <summary>
        /// (Set of String) URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted to a specific URL category.
        /// </summary>
        public readonly ImmutableArray<string> ResCategories;
        /// <summary>
        /// (Set of String) The countries of origin of traffic for which the rule is applicable. If not set, the rule is not restricted to specific source countries.
        /// **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        /// </summary>
        public readonly ImmutableArray<string> SourceCountries;
        /// <summary>
        /// (List of Objects)Source IP address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IP address group.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleSrcIpGroupResult> SrcIpGroups;
        /// <summary>
        /// (Set of String) Source IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific source IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        /// </summary>
        public readonly ImmutableArray<string> SrcIps;
        /// <summary>
        /// (List of Objects) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleSrcIpv6GroupResult> SrcIpv6Groups;
        /// <summary>
        /// (String) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// (List of Objects) You can manually select up to `1` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleTimeWindowResult> TimeWindows;
        /// <summary>
        /// (List of Objects) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFirewallDnsRuleUserResult> Users;

        [OutputConstructor]
        private GetFirewallDnsRuleResult(
            string action,

            ImmutableArray<Outputs.GetFirewallDnsRuleApplicationGroupResult> applicationGroups,

            ImmutableArray<string> applications,

            string blockResponseCode,

            bool capturePcap,

            bool defaultRule,

            ImmutableArray<Outputs.GetFirewallDnsRuleDepartmentResult> departments,

            string description,

            ImmutableArray<string> destAddresses,

            ImmutableArray<string> destCountries,

            ImmutableArray<string> destIpCategories,

            ImmutableArray<Outputs.GetFirewallDnsRuleDestIpGroupResult> destIpGroups,

            ImmutableArray<Outputs.GetFirewallDnsRuleDestIpv6GroupResult> destIpv6Groups,

            ImmutableArray<Outputs.GetFirewallDnsRuleDeviceGroupResult> deviceGroups,

            ImmutableArray<Outputs.GetFirewallDnsRuleDeviceResult> devices,

            ImmutableArray<string> dnsRuleRequestTypes,

            ImmutableArray<Outputs.GetFirewallDnsRuleGroupResult> groups,

            int id,

            ImmutableArray<Outputs.GetFirewallDnsRuleLabelResult> labels,

            ImmutableArray<Outputs.GetFirewallDnsRuleLastModifiedByResult> lastModifiedBies,

            int lastModifiedTime,

            ImmutableArray<Outputs.GetFirewallDnsRuleLocationGroupResult> locationGroups,

            ImmutableArray<Outputs.GetFirewallDnsRuleLocationResult> locations,

            string name,

            int order,

            bool predefined,

            ImmutableArray<string> protocols,

            int rank,

            string redirectIp,

            ImmutableArray<string> resCategories,

            ImmutableArray<string> sourceCountries,

            ImmutableArray<Outputs.GetFirewallDnsRuleSrcIpGroupResult> srcIpGroups,

            ImmutableArray<string> srcIps,

            ImmutableArray<Outputs.GetFirewallDnsRuleSrcIpv6GroupResult> srcIpv6Groups,

            string state,

            ImmutableArray<Outputs.GetFirewallDnsRuleTimeWindowResult> timeWindows,

            ImmutableArray<Outputs.GetFirewallDnsRuleUserResult> users)
        {
            Action = action;
            ApplicationGroups = applicationGroups;
            Applications = applications;
            BlockResponseCode = blockResponseCode;
            CapturePcap = capturePcap;
            DefaultRule = defaultRule;
            Departments = departments;
            Description = description;
            DestAddresses = destAddresses;
            DestCountries = destCountries;
            DestIpCategories = destIpCategories;
            DestIpGroups = destIpGroups;
            DestIpv6Groups = destIpv6Groups;
            DeviceGroups = deviceGroups;
            Devices = devices;
            DnsRuleRequestTypes = dnsRuleRequestTypes;
            Groups = groups;
            Id = id;
            Labels = labels;
            LastModifiedBies = lastModifiedBies;
            LastModifiedTime = lastModifiedTime;
            LocationGroups = locationGroups;
            Locations = locations;
            Name = name;
            Order = order;
            Predefined = predefined;
            Protocols = protocols;
            Rank = rank;
            RedirectIp = redirectIp;
            ResCategories = resCategories;
            SourceCountries = sourceCountries;
            SrcIpGroups = srcIpGroups;
            SrcIps = srcIps;
            SrcIpv6Groups = srcIpv6Groups;
            State = state;
            TimeWindows = timeWindows;
            Users = users;
        }
    }
}
