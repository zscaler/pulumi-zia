// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia.Inputs
{

    public sealed class SSLInspectionRulesActionGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("decryptSubActions")]
        private InputList<Inputs.SSLInspectionRulesActionDecryptSubActionGetArgs>? _decryptSubActions;

        /// <summary>
        /// (Block List) - Action taken when enabling SSL intercept
        /// </summary>
        public InputList<Inputs.SSLInspectionRulesActionDecryptSubActionGetArgs> DecryptSubActions
        {
            get => _decryptSubActions ?? (_decryptSubActions = new InputList<Inputs.SSLInspectionRulesActionDecryptSubActionGetArgs>());
            set => _decryptSubActions = value;
        }

        [Input("doNotDecryptSubActions")]
        private InputList<Inputs.SSLInspectionRulesActionDoNotDecryptSubActionGetArgs>? _doNotDecryptSubActions;

        /// <summary>
        /// (Block List) - Action taken when bypassing SSL intercept
        /// </summary>
        public InputList<Inputs.SSLInspectionRulesActionDoNotDecryptSubActionGetArgs> DoNotDecryptSubActions
        {
            get => _doNotDecryptSubActions ?? (_doNotDecryptSubActions = new InputList<Inputs.SSLInspectionRulesActionDoNotDecryptSubActionGetArgs>());
            set => _doNotDecryptSubActions = value;
        }

        /// <summary>
        /// (Boolean) - Whether to override the default SSL interception certificate.
        /// </summary>
        [Input("overrideDefaultCertificate")]
        public Input<bool>? OverrideDefaultCertificate { get; set; }

        /// <summary>
        /// (Boolean) - Enable this setting to display end user notifications.
        /// </summary>
        [Input("showEun")]
        public Input<bool>? ShowEun { get; set; }

        /// <summary>
        /// (Boolean) - Whether to display the EUN ATP page.
        /// </summary>
        [Input("showEunatp")]
        public Input<bool>? ShowEunatp { get; set; }

        [Input("sslInterceptionCerts")]
        private InputList<Inputs.SSLInspectionRulesActionSslInterceptionCertGetArgs>? _sslInterceptionCerts;

        /// <summary>
        /// has the following attributes:
        /// **NOTE** This block can only be set when `override_default_certificate` is `true`
        /// </summary>
        public InputList<Inputs.SSLInspectionRulesActionSslInterceptionCertGetArgs> SslInterceptionCerts
        {
            get => _sslInterceptionCerts ?? (_sslInterceptionCerts = new InputList<Inputs.SSLInspectionRulesActionSslInterceptionCertGetArgs>());
            set => _sslInterceptionCerts = value;
        }

        /// <summary>
        /// (String) - The action type for this rule. Possible values: `BLOCK`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public SSLInspectionRulesActionGetArgs()
        {
        }
        public static new SSLInspectionRulesActionGetArgs Empty => new SSLInspectionRulesActionGetArgs();
    }
}
