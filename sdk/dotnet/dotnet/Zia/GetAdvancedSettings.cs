// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    public static class GetAdvancedSettings
    {
        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/configuring-advanced-settings)
        /// * [API documentation](https://help.zscaler.com/zia/advanced-settings#/advancedSettings-get)
        /// 
        /// The **zia_advanced_settings** Retrieves information about the advanced settings configured in the ZIA Admin Portal. To learn more see [Configuring Advanced Settings](https://help.zscaler.com/zia/configuring-advanced-settings)
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// data "zia_advanced_settings" "this" {}
        /// ```
        /// </summary>
        public static Task<GetAdvancedSettingsResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAdvancedSettingsResult>("zia:index/getAdvancedSettings:getAdvancedSettings", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/configuring-advanced-settings)
        /// * [API documentation](https://help.zscaler.com/zia/advanced-settings#/advancedSettings-get)
        /// 
        /// The **zia_advanced_settings** Retrieves information about the advanced settings configured in the ZIA Admin Portal. To learn more see [Configuring Advanced Settings](https://help.zscaler.com/zia/configuring-advanced-settings)
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// data "zia_advanced_settings" "this" {}
        /// ```
        /// </summary>
        public static Output<GetAdvancedSettingsResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAdvancedSettingsResult>("zia:index/getAdvancedSettings:getAdvancedSettings", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/configuring-advanced-settings)
        /// * [API documentation](https://help.zscaler.com/zia/advanced-settings#/advancedSettings-get)
        /// 
        /// The **zia_advanced_settings** Retrieves information about the advanced settings configured in the ZIA Admin Portal. To learn more see [Configuring Advanced Settings](https://help.zscaler.com/zia/configuring-advanced-settings)
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// data "zia_advanced_settings" "this" {}
        /// ```
        /// </summary>
        public static Output<GetAdvancedSettingsResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAdvancedSettingsResult>("zia:index/getAdvancedSettings:getAdvancedSettings", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetAdvancedSettingsResult
    {
        public readonly ImmutableArray<string> AuthBypassApps;
        public readonly ImmutableArray<string> AuthBypassUrlCategories;
        public readonly ImmutableArray<string> AuthBypassUrls;
        public readonly ImmutableArray<string> BasicBypassApps;
        public readonly ImmutableArray<string> BasicBypassUrlCategories;
        public readonly bool BlockConnectHostSniMismatch;
        public readonly ImmutableArray<string> BlockDomainFrontingApps;
        public readonly bool BlockDomainFrontingOnHostHeader;
        public readonly bool BlockHttpTunnelOnNonHttpPorts;
        public readonly bool BlockNonCompliantHttpRequestOnHttpPorts;
        public readonly bool BlockNonHttpOnHttpPortEnabled;
        public readonly bool CascadeUrlFiltering;
        public readonly ImmutableArray<string> DigestAuthBypassApps;
        public readonly ImmutableArray<string> DigestAuthBypassUrlCategories;
        public readonly ImmutableArray<string> DigestAuthBypassUrls;
        public readonly ImmutableArray<string> DnsResolutionOnTransparentProxyApps;
        public readonly ImmutableArray<string> DnsResolutionOnTransparentProxyExemptApps;
        public readonly ImmutableArray<string> DnsResolutionOnTransparentProxyExemptUrlCategories;
        public readonly ImmutableArray<string> DnsResolutionOnTransparentProxyExemptUrls;
        public readonly ImmutableArray<string> DnsResolutionOnTransparentProxyIpv6Apps;
        public readonly ImmutableArray<string> DnsResolutionOnTransparentProxyIpv6ExemptApps;
        public readonly ImmutableArray<string> DnsResolutionOnTransparentProxyIpv6ExemptUrlCategories;
        public readonly ImmutableArray<string> DnsResolutionOnTransparentProxyIpv6UrlCategories;
        public readonly ImmutableArray<string> DnsResolutionOnTransparentProxyUrlCategories;
        public readonly ImmutableArray<string> DnsResolutionOnTransparentProxyUrls;
        public readonly ImmutableArray<string> DomainFrontingBypassUrlCategories;
        public readonly bool DynamicUserRiskEnabled;
        public readonly bool EcsForAllEnabled;
        public readonly bool EnableAdminRankAccess;
        public readonly bool EnableDnsResolutionOnTransparentProxy;
        public readonly bool EnableEvaluatePolicyOnGlobalSslBypass;
        public readonly bool EnableIpv6DnsOptimizationOnAllTransparentProxy;
        public readonly bool EnableIpv6DnsResolutionOnTransparentProxy;
        public readonly bool EnableOffice365;
        public readonly bool EnablePolicyForUnauthenticatedTraffic;
        public readonly bool EnforceSurrogateIpForWindowsApp;
        public readonly bool Http2NonbrowserTrafficEnabled;
        public readonly ImmutableArray<string> HttpRangeHeaderRemoveUrlCategories;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> KerberosBypassApps;
        public readonly ImmutableArray<string> KerberosBypassUrlCategories;
        public readonly ImmutableArray<string> KerberosBypassUrls;
        public readonly bool LogInternalIp;
        public readonly bool PreferSniOverConnHost;
        public readonly ImmutableArray<string> PreferSniOverConnHostApps;
        public readonly bool SipaXffHeaderEnabled;
        public readonly ImmutableArray<string> SniDnsOptimizationBypassUrlCategories;
        public readonly bool TrackHttpTunnelOnHttpPorts;
        public readonly int UiSessionTimeout;
        public readonly bool ZscalerClientConnector1AndPacRoadWarriorInFirewall;

        [OutputConstructor]
        private GetAdvancedSettingsResult(
            ImmutableArray<string> authBypassApps,

            ImmutableArray<string> authBypassUrlCategories,

            ImmutableArray<string> authBypassUrls,

            ImmutableArray<string> basicBypassApps,

            ImmutableArray<string> basicBypassUrlCategories,

            bool blockConnectHostSniMismatch,

            ImmutableArray<string> blockDomainFrontingApps,

            bool blockDomainFrontingOnHostHeader,

            bool blockHttpTunnelOnNonHttpPorts,

            bool blockNonCompliantHttpRequestOnHttpPorts,

            bool blockNonHttpOnHttpPortEnabled,

            bool cascadeUrlFiltering,

            ImmutableArray<string> digestAuthBypassApps,

            ImmutableArray<string> digestAuthBypassUrlCategories,

            ImmutableArray<string> digestAuthBypassUrls,

            ImmutableArray<string> dnsResolutionOnTransparentProxyApps,

            ImmutableArray<string> dnsResolutionOnTransparentProxyExemptApps,

            ImmutableArray<string> dnsResolutionOnTransparentProxyExemptUrlCategories,

            ImmutableArray<string> dnsResolutionOnTransparentProxyExemptUrls,

            ImmutableArray<string> dnsResolutionOnTransparentProxyIpv6Apps,

            ImmutableArray<string> dnsResolutionOnTransparentProxyIpv6ExemptApps,

            ImmutableArray<string> dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories,

            ImmutableArray<string> dnsResolutionOnTransparentProxyIpv6UrlCategories,

            ImmutableArray<string> dnsResolutionOnTransparentProxyUrlCategories,

            ImmutableArray<string> dnsResolutionOnTransparentProxyUrls,

            ImmutableArray<string> domainFrontingBypassUrlCategories,

            bool dynamicUserRiskEnabled,

            bool ecsForAllEnabled,

            bool enableAdminRankAccess,

            bool enableDnsResolutionOnTransparentProxy,

            bool enableEvaluatePolicyOnGlobalSslBypass,

            bool enableIpv6DnsOptimizationOnAllTransparentProxy,

            bool enableIpv6DnsResolutionOnTransparentProxy,

            bool enableOffice365,

            bool enablePolicyForUnauthenticatedTraffic,

            bool enforceSurrogateIpForWindowsApp,

            bool http2NonbrowserTrafficEnabled,

            ImmutableArray<string> httpRangeHeaderRemoveUrlCategories,

            string id,

            ImmutableArray<string> kerberosBypassApps,

            ImmutableArray<string> kerberosBypassUrlCategories,

            ImmutableArray<string> kerberosBypassUrls,

            bool logInternalIp,

            bool preferSniOverConnHost,

            ImmutableArray<string> preferSniOverConnHostApps,

            bool sipaXffHeaderEnabled,

            ImmutableArray<string> sniDnsOptimizationBypassUrlCategories,

            bool trackHttpTunnelOnHttpPorts,

            int uiSessionTimeout,

            bool zscalerClientConnector1AndPacRoadWarriorInFirewall)
        {
            AuthBypassApps = authBypassApps;
            AuthBypassUrlCategories = authBypassUrlCategories;
            AuthBypassUrls = authBypassUrls;
            BasicBypassApps = basicBypassApps;
            BasicBypassUrlCategories = basicBypassUrlCategories;
            BlockConnectHostSniMismatch = blockConnectHostSniMismatch;
            BlockDomainFrontingApps = blockDomainFrontingApps;
            BlockDomainFrontingOnHostHeader = blockDomainFrontingOnHostHeader;
            BlockHttpTunnelOnNonHttpPorts = blockHttpTunnelOnNonHttpPorts;
            BlockNonCompliantHttpRequestOnHttpPorts = blockNonCompliantHttpRequestOnHttpPorts;
            BlockNonHttpOnHttpPortEnabled = blockNonHttpOnHttpPortEnabled;
            CascadeUrlFiltering = cascadeUrlFiltering;
            DigestAuthBypassApps = digestAuthBypassApps;
            DigestAuthBypassUrlCategories = digestAuthBypassUrlCategories;
            DigestAuthBypassUrls = digestAuthBypassUrls;
            DnsResolutionOnTransparentProxyApps = dnsResolutionOnTransparentProxyApps;
            DnsResolutionOnTransparentProxyExemptApps = dnsResolutionOnTransparentProxyExemptApps;
            DnsResolutionOnTransparentProxyExemptUrlCategories = dnsResolutionOnTransparentProxyExemptUrlCategories;
            DnsResolutionOnTransparentProxyExemptUrls = dnsResolutionOnTransparentProxyExemptUrls;
            DnsResolutionOnTransparentProxyIpv6Apps = dnsResolutionOnTransparentProxyIpv6Apps;
            DnsResolutionOnTransparentProxyIpv6ExemptApps = dnsResolutionOnTransparentProxyIpv6ExemptApps;
            DnsResolutionOnTransparentProxyIpv6ExemptUrlCategories = dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories;
            DnsResolutionOnTransparentProxyIpv6UrlCategories = dnsResolutionOnTransparentProxyIpv6UrlCategories;
            DnsResolutionOnTransparentProxyUrlCategories = dnsResolutionOnTransparentProxyUrlCategories;
            DnsResolutionOnTransparentProxyUrls = dnsResolutionOnTransparentProxyUrls;
            DomainFrontingBypassUrlCategories = domainFrontingBypassUrlCategories;
            DynamicUserRiskEnabled = dynamicUserRiskEnabled;
            EcsForAllEnabled = ecsForAllEnabled;
            EnableAdminRankAccess = enableAdminRankAccess;
            EnableDnsResolutionOnTransparentProxy = enableDnsResolutionOnTransparentProxy;
            EnableEvaluatePolicyOnGlobalSslBypass = enableEvaluatePolicyOnGlobalSslBypass;
            EnableIpv6DnsOptimizationOnAllTransparentProxy = enableIpv6DnsOptimizationOnAllTransparentProxy;
            EnableIpv6DnsResolutionOnTransparentProxy = enableIpv6DnsResolutionOnTransparentProxy;
            EnableOffice365 = enableOffice365;
            EnablePolicyForUnauthenticatedTraffic = enablePolicyForUnauthenticatedTraffic;
            EnforceSurrogateIpForWindowsApp = enforceSurrogateIpForWindowsApp;
            Http2NonbrowserTrafficEnabled = http2NonbrowserTrafficEnabled;
            HttpRangeHeaderRemoveUrlCategories = httpRangeHeaderRemoveUrlCategories;
            Id = id;
            KerberosBypassApps = kerberosBypassApps;
            KerberosBypassUrlCategories = kerberosBypassUrlCategories;
            KerberosBypassUrls = kerberosBypassUrls;
            LogInternalIp = logInternalIp;
            PreferSniOverConnHost = preferSniOverConnHost;
            PreferSniOverConnHostApps = preferSniOverConnHostApps;
            SipaXffHeaderEnabled = sipaXffHeaderEnabled;
            SniDnsOptimizationBypassUrlCategories = sniDnsOptimizationBypassUrlCategories;
            TrackHttpTunnelOnHttpPorts = trackHttpTunnelOnHttpPorts;
            UiSessionTimeout = uiSessionTimeout;
            ZscalerClientConnector1AndPacRoadWarriorInFirewall = zscalerClientConnector1AndPacRoadWarriorInFirewall;
        }
    }
}
