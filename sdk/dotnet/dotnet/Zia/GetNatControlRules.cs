// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    public static class GetNatControlRules
    {
        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/about-nat-control)
        /// * [API documentation](https://help.zscaler.com/zia/nat-control-policy#/dnatRules-get)
        /// 
        /// Use the **zia_nat_control_rules** data source to get information about a NAT Control rule available in the Zscaler Internet Access.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name
        /// 
        /// ```hcl
        /// 
        /// data "zia_nat_control_rules" "this" {
        ///   name = "DNAT_01"
        /// }
        /// ```
        /// 
        /// ### By ID
        /// 
        /// ```hcl
        /// 
        /// data "zia_nat_control_rules" "this" {
        ///   id = 154658
        /// }
        /// ```
        /// </summary>
        public static Task<GetNatControlRulesResult> InvokeAsync(GetNatControlRulesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNatControlRulesResult>("zia:index/getNatControlRules:getNatControlRules", args ?? new GetNatControlRulesArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/about-nat-control)
        /// * [API documentation](https://help.zscaler.com/zia/nat-control-policy#/dnatRules-get)
        /// 
        /// Use the **zia_nat_control_rules** data source to get information about a NAT Control rule available in the Zscaler Internet Access.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name
        /// 
        /// ```hcl
        /// 
        /// data "zia_nat_control_rules" "this" {
        ///   name = "DNAT_01"
        /// }
        /// ```
        /// 
        /// ### By ID
        /// 
        /// ```hcl
        /// 
        /// data "zia_nat_control_rules" "this" {
        ///   id = 154658
        /// }
        /// ```
        /// </summary>
        public static Output<GetNatControlRulesResult> Invoke(GetNatControlRulesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNatControlRulesResult>("zia:index/getNatControlRules:getNatControlRules", args ?? new GetNatControlRulesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/about-nat-control)
        /// * [API documentation](https://help.zscaler.com/zia/nat-control-policy#/dnatRules-get)
        /// 
        /// Use the **zia_nat_control_rules** data source to get information about a NAT Control rule available in the Zscaler Internet Access.
        /// 
        /// ## Example Usage
        /// 
        /// ### By Name
        /// 
        /// ```hcl
        /// 
        /// data "zia_nat_control_rules" "this" {
        ///   name = "DNAT_01"
        /// }
        /// ```
        /// 
        /// ### By ID
        /// 
        /// ```hcl
        /// 
        /// data "zia_nat_control_rules" "this" {
        ///   id = 154658
        /// }
        /// ```
        /// </summary>
        public static Output<GetNatControlRulesResult> Invoke(GetNatControlRulesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNatControlRulesResult>("zia:index/getNatControlRules:getNatControlRules", args ?? new GetNatControlRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNatControlRulesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier assigned to the forwarding rule.
        /// </summary>
        [Input("id")]
        public int? Id { get; set; }

        /// <summary>
        /// The name of the forwarding rule.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// (string) - FQDN to which the traffic is redirected to when the DNAT rule is triggered. This is mutually exclusive to redirect IP.
        /// </summary>
        [Input("redirectFqdn")]
        public string? RedirectFqdn { get; set; }

        /// <summary>
        /// (string) - IP address to which the traffic is redirected to when the DNAT rule is triggered. If not set, no redirection is done to the specific IP address.
        /// </summary>
        [Input("redirectIp")]
        public string? RedirectIp { get; set; }

        /// <summary>
        /// (string) -  Port to which the traffic is redirected to when the DNAT rule is triggered. If not set, no redirection is done to the specific port.
        /// </summary>
        [Input("redirectPort")]
        public int? RedirectPort { get; set; }

        public GetNatControlRulesArgs()
        {
        }
        public static new GetNatControlRulesArgs Empty => new GetNatControlRulesArgs();
    }

    public sealed class GetNatControlRulesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique identifier assigned to the forwarding rule.
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        /// <summary>
        /// The name of the forwarding rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (string) - FQDN to which the traffic is redirected to when the DNAT rule is triggered. This is mutually exclusive to redirect IP.
        /// </summary>
        [Input("redirectFqdn")]
        public Input<string>? RedirectFqdn { get; set; }

        /// <summary>
        /// (string) - IP address to which the traffic is redirected to when the DNAT rule is triggered. If not set, no redirection is done to the specific IP address.
        /// </summary>
        [Input("redirectIp")]
        public Input<string>? RedirectIp { get; set; }

        /// <summary>
        /// (string) -  Port to which the traffic is redirected to when the DNAT rule is triggered. If not set, no redirection is done to the specific port.
        /// </summary>
        [Input("redirectPort")]
        public Input<int>? RedirectPort { get; set; }

        public GetNatControlRulesInvokeArgs()
        {
        }
        public static new GetNatControlRulesInvokeArgs Empty => new GetNatControlRulesInvokeArgs();
    }


    [OutputType]
    public sealed class GetNatControlRulesResult
    {
        /// <summary>
        /// (Boolean) If set to true, the default rule is applied
        /// </summary>
        public readonly bool DefaultRule;
        /// <summary>
        /// (Block List, Max: 1) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNatControlRulesDepartmentResult> Departments;
        /// <summary>
        /// (string) - Additional information about the forwarding rule
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// ** - (List of String) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        /// </summary>
        public readonly ImmutableArray<string> DestAddresses;
        /// <summary>
        /// ** - (List of String) Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries.
        /// </summary>
        public readonly ImmutableArray<string> DestCountries;
        /// <summary>
        /// ** - (List of String) IP address categories of destination for which the DNAT rule is applicable. If not set, the rule is not restricted to specific destination IP categories.
        /// </summary>
        public readonly ImmutableArray<string> DestIpCategories;
        /// <summary>
        /// ** - (Block List, Max: 1) Any number of destination IP address groups that you want to control with this rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNatControlRulesDestIpGroupResult> DestIpGroups;
        /// <summary>
        /// ** - (Block List, Max: 1) Any number of destination IPv6 address groups that you want to control with this rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNatControlRulesDestIpv6GroupResult> DestIpv6Groups;
        public readonly ImmutableArray<Outputs.GetNatControlRulesDeviceGroupResult> DeviceGroups;
        public readonly ImmutableArray<Outputs.GetNatControlRulesDeviceResult> Devices;
        /// <summary>
        /// (Boolean)
        /// </summary>
        public readonly bool EnableFullLogging;
        /// <summary>
        /// (Block List, Max: 1) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNatControlRulesGroupResult> Groups;
        /// <summary>
        /// (int) The ID of this resource.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// (Block List, Max: 1) Labels that are applicable to the rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNatControlRulesLabelResult> Labels;
        public readonly ImmutableArray<Outputs.GetNatControlRulesLastModifiedByResult> LastModifiedBies;
        /// <summary>
        /// (Number)
        /// </summary>
        public readonly int LastModifiedTime;
        /// <summary>
        /// (Block List, Max: 1) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNatControlRulesLocationGroupResult> LocationGroups;
        /// <summary>
        /// (Block List, Max: 1) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNatControlRulesLocationResult> Locations;
        /// <summary>
        /// (String) The configured name of the entity
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (Block List, Max: 1) Any number of predefined or custom network service groups to which the rule applies.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNatControlRulesNwServiceGroupResult> NwServiceGroups;
        /// <summary>
        /// (Block List, Max: 1) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNatControlRulesNwServiceResult> NwServices;
        /// <summary>
        /// (string) - The order of execution for the forwarding rule order.
        /// </summary>
        public readonly int Order;
        /// <summary>
        /// (Boolean) If set to true, a predefined rule is applied
        /// </summary>
        public readonly bool Predefined;
        public readonly int Rank;
        /// <summary>
        /// (string) - FQDN to which the traffic is redirected to when the DNAT rule is triggered. This is mutually exclusive to redirect IP.
        /// </summary>
        public readonly string? RedirectFqdn;
        /// <summary>
        /// (string) - IP address to which the traffic is redirected to when the DNAT rule is triggered. If not set, no redirection is done to the specific IP address.
        /// </summary>
        public readonly string? RedirectIp;
        /// <summary>
        /// (string) -  Port to which the traffic is redirected to when the DNAT rule is triggered. If not set, no redirection is done to the specific port.
        /// </summary>
        public readonly int? RedirectPort;
        public readonly ImmutableArray<string> ResCategories;
        /// <summary>
        /// (Block List, Max: 1) Any number of source IP address groups that you want to control with this rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNatControlRulesSrcIpGroupResult> SrcIpGroups;
        /// <summary>
        /// (List of String) You can enter individual IP addresses, subnets, or address ranges.
        /// </summary>
        public readonly ImmutableArray<string> SrcIps;
        /// <summary>
        /// (Block List, Max: 1) Any number of source IPv6 address groups that you want to control with this rule.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNatControlRulesSrcIpv6GroupResult> SrcIpv6Groups;
        public readonly string State;
        /// <summary>
        /// (Block List, Max: 1) You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNatControlRulesTimeWindowResult> TimeWindows;
        /// <summary>
        /// (Block List, Max: 1) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNatControlRulesUserResult> Users;

        [OutputConstructor]
        private GetNatControlRulesResult(
            bool defaultRule,

            ImmutableArray<Outputs.GetNatControlRulesDepartmentResult> departments,

            string description,

            ImmutableArray<string> destAddresses,

            ImmutableArray<string> destCountries,

            ImmutableArray<string> destIpCategories,

            ImmutableArray<Outputs.GetNatControlRulesDestIpGroupResult> destIpGroups,

            ImmutableArray<Outputs.GetNatControlRulesDestIpv6GroupResult> destIpv6Groups,

            ImmutableArray<Outputs.GetNatControlRulesDeviceGroupResult> deviceGroups,

            ImmutableArray<Outputs.GetNatControlRulesDeviceResult> devices,

            bool enableFullLogging,

            ImmutableArray<Outputs.GetNatControlRulesGroupResult> groups,

            int id,

            ImmutableArray<Outputs.GetNatControlRulesLabelResult> labels,

            ImmutableArray<Outputs.GetNatControlRulesLastModifiedByResult> lastModifiedBies,

            int lastModifiedTime,

            ImmutableArray<Outputs.GetNatControlRulesLocationGroupResult> locationGroups,

            ImmutableArray<Outputs.GetNatControlRulesLocationResult> locations,

            string name,

            ImmutableArray<Outputs.GetNatControlRulesNwServiceGroupResult> nwServiceGroups,

            ImmutableArray<Outputs.GetNatControlRulesNwServiceResult> nwServices,

            int order,

            bool predefined,

            int rank,

            string? redirectFqdn,

            string? redirectIp,

            int? redirectPort,

            ImmutableArray<string> resCategories,

            ImmutableArray<Outputs.GetNatControlRulesSrcIpGroupResult> srcIpGroups,

            ImmutableArray<string> srcIps,

            ImmutableArray<Outputs.GetNatControlRulesSrcIpv6GroupResult> srcIpv6Groups,

            string state,

            ImmutableArray<Outputs.GetNatControlRulesTimeWindowResult> timeWindows,

            ImmutableArray<Outputs.GetNatControlRulesUserResult> users)
        {
            DefaultRule = defaultRule;
            Departments = departments;
            Description = description;
            DestAddresses = destAddresses;
            DestCountries = destCountries;
            DestIpCategories = destIpCategories;
            DestIpGroups = destIpGroups;
            DestIpv6Groups = destIpv6Groups;
            DeviceGroups = deviceGroups;
            Devices = devices;
            EnableFullLogging = enableFullLogging;
            Groups = groups;
            Id = id;
            Labels = labels;
            LastModifiedBies = lastModifiedBies;
            LastModifiedTime = lastModifiedTime;
            LocationGroups = locationGroups;
            Locations = locations;
            Name = name;
            NwServiceGroups = nwServiceGroups;
            NwServices = nwServices;
            Order = order;
            Predefined = predefined;
            Rank = rank;
            RedirectFqdn = redirectFqdn;
            RedirectIp = redirectIp;
            RedirectPort = redirectPort;
            ResCategories = resCategories;
            SrcIpGroups = srcIpGroups;
            SrcIps = srcIps;
            SrcIpv6Groups = srcIpv6Groups;
            State = state;
            TimeWindows = timeWindows;
            Users = users;
        }
    }
}
