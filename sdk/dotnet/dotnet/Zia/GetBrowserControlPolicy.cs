// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    [Obsolete(@"zia.index/getbrowsercontrolpolicy.getBrowserControlPolicy has been deprecated in favor of zia.index/getbrowsercontrolsettings.getBrowserControlSettings")]
    public static class GetBrowserControlPolicy
    {
        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/configuring-browser-control-policy)
        /// * [API documentation](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
        /// 
        /// Use the **zia_browser_control_policy** data source to retrieves information about the security exceptions configured for the Malware Protection policy. To learn more see [Configuring the Browser Control Policy](https://help.zscaler.com/zia/configuring-browser-control-policy)
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// data "zia_browser_control_policy" "this" {}
        /// ```
        /// </summary>
        public static Task<GetBrowserControlPolicyResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBrowserControlPolicyResult>("zia:index/getBrowserControlPolicy:getBrowserControlPolicy", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/configuring-browser-control-policy)
        /// * [API documentation](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
        /// 
        /// Use the **zia_browser_control_policy** data source to retrieves information about the security exceptions configured for the Malware Protection policy. To learn more see [Configuring the Browser Control Policy](https://help.zscaler.com/zia/configuring-browser-control-policy)
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// data "zia_browser_control_policy" "this" {}
        /// ```
        /// </summary>
        public static Output<GetBrowserControlPolicyResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBrowserControlPolicyResult>("zia:index/getBrowserControlPolicy:getBrowserControlPolicy", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/configuring-browser-control-policy)
        /// * [API documentation](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
        /// 
        /// Use the **zia_browser_control_policy** data source to retrieves information about the security exceptions configured for the Malware Protection policy. To learn more see [Configuring the Browser Control Policy](https://help.zscaler.com/zia/configuring-browser-control-policy)
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// data "zia_browser_control_policy" "this" {}
        /// ```
        /// </summary>
        public static Output<GetBrowserControlPolicyResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBrowserControlPolicyResult>("zia:index/getBrowserControlPolicy:getBrowserControlPolicy", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetBrowserControlPolicyResult
    {
        /// <summary>
        /// (Boolean) A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the internet
        /// </summary>
        public readonly bool AllowAllBrowsers;
        /// <summary>
        /// (List) Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed. See all [Supported values](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
        /// </summary>
        public readonly ImmutableArray<string> BlockedChromeVersions;
        /// <summary>
        /// (List) Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed. See all [Supported values](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
        /// </summary>
        public readonly ImmutableArray<string> BlockedFirefoxVersions;
        /// <summary>
        /// (List) Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed. See all [Supported values](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
        /// </summary>
        public readonly ImmutableArray<string> BlockedInternetExplorerVersions;
        /// <summary>
        /// (List) Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed. See all [Supported values](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
        /// </summary>
        public readonly ImmutableArray<string> BlockedOperaVersions;
        /// <summary>
        /// (List) Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed. See all [Supported values](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
        /// </summary>
        public readonly ImmutableArray<string> BlockedSafariVersions;
        /// <summary>
        /// (Boolean) If set to true, all the browsers are bypassed for warnings
        /// </summary>
        public readonly bool BypassAllBrowsers;
        /// <summary>
        /// (List) List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute is set to true. If not set, all vulnerable applications are warned. Supported Values:
        /// * `ANY`
        /// * `NONE`
        /// * `OUTLOOKEXP`
        /// * `MSOFFICE`
        /// </summary>
        public readonly ImmutableArray<string> BypassApplications;
        /// <summary>
        /// (List) List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute is set to true. If not set, all vulnerable plugins are warned.Supported Values:
        /// * `ANY`
        /// * `NONE`
        /// * `ACROBAT`
        /// * `FLASH`
        /// * `SHOCKWAVE`
        /// * `QUICKTIME`
        /// * `DIVX`
        /// * `GOOGLEGEARS`
        /// * `DOTNET`
        /// * `SILVERLIGHT`
        /// * `REALPLAYER`
        /// * `JAVA`
        /// * `TOTEM`
        /// * `WMP`
        /// </summary>
        public readonly ImmutableArray<string> BypassPlugins;
        /// <summary>
        /// (Boolean) A Boolean value that specifies if Smart Browser Isolation is enabled
        /// </summary>
        public readonly bool EnableSmartBrowserIsolation;
        /// <summary>
        /// (Boolean) A Boolean value that specifies if the warnings are enabled
        /// </summary>
        public readonly bool EnableWarnings;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// (String) Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or vulnerable browsers, plugins, and applications. If not set, the warnings are disabled. Supported Values:
        /// * `DAILY`
        /// * `WEEKLY`
        /// * `MONTHLY`,
        /// * `EVERY_2_HOURS`
        /// * `EVERY_4_HOURS`
        /// * `EVERY_6_HOURS`
        /// * `EVERY_8_HOURS`
        /// * `EVERY_12_HOURS`
        /// </summary>
        public readonly string PluginCheckFrequency;
        public readonly int SmartIsolationProfileId;
        /// <summary>
        /// (Block, Max: 1) The isolation profile ID used for DLP email alerts sent to the auditor.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBrowserControlPolicySmartIsolationProfileResult> SmartIsolationProfiles;

        [OutputConstructor]
        private GetBrowserControlPolicyResult(
            bool allowAllBrowsers,

            ImmutableArray<string> blockedChromeVersions,

            ImmutableArray<string> blockedFirefoxVersions,

            ImmutableArray<string> blockedInternetExplorerVersions,

            ImmutableArray<string> blockedOperaVersions,

            ImmutableArray<string> blockedSafariVersions,

            bool bypassAllBrowsers,

            ImmutableArray<string> bypassApplications,

            ImmutableArray<string> bypassPlugins,

            bool enableSmartBrowserIsolation,

            bool enableWarnings,

            string id,

            string pluginCheckFrequency,

            int smartIsolationProfileId,

            ImmutableArray<Outputs.GetBrowserControlPolicySmartIsolationProfileResult> smartIsolationProfiles)
        {
            AllowAllBrowsers = allowAllBrowsers;
            BlockedChromeVersions = blockedChromeVersions;
            BlockedFirefoxVersions = blockedFirefoxVersions;
            BlockedInternetExplorerVersions = blockedInternetExplorerVersions;
            BlockedOperaVersions = blockedOperaVersions;
            BlockedSafariVersions = blockedSafariVersions;
            BypassAllBrowsers = bypassAllBrowsers;
            BypassApplications = bypassApplications;
            BypassPlugins = bypassPlugins;
            EnableSmartBrowserIsolation = enableSmartBrowserIsolation;
            EnableWarnings = enableWarnings;
            Id = id;
            PluginCheckFrequency = pluginCheckFrequency;
            SmartIsolationProfileId = smartIsolationProfileId;
            SmartIsolationProfiles = smartIsolationProfiles;
        }
    }
}
