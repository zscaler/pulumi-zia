// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// * [Official documentation](https://help.zscaler.com/zia/configuring-browser-control-policy)
    /// * [API documentation](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
    /// 
    /// The **zia_browser_control_policy** resource allows you to update the malware protection policy configuration details. To learn more see [Configuring the Browser Control Policy](https://help.zscaler.com/zia/configuring-browser-control-policy)
    /// 
    /// ## Example Usage
    /// 
    /// ### Enable Smart Isolation
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zia_browser_control_policy** can be imported by using `browser_settings` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/browserControlPolicy:BrowserControlPolicy this "browser_settings"
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/browserControlPolicy:BrowserControlPolicy")]
    public partial class BrowserControlPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
        /// internet
        /// </summary>
        [Output("allowAllBrowsers")]
        public Output<bool> AllowAllBrowsers { get; private set; } = null!;

        /// <summary>
        /// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
        /// </summary>
        [Output("blockedChromeVersions")]
        public Output<ImmutableArray<string>> BlockedChromeVersions { get; private set; } = null!;

        /// <summary>
        /// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
        /// </summary>
        [Output("blockedFirefoxVersions")]
        public Output<ImmutableArray<string>> BlockedFirefoxVersions { get; private set; } = null!;

        /// <summary>
        /// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
        /// </summary>
        [Output("blockedInternetExplorerVersions")]
        public Output<ImmutableArray<string>> BlockedInternetExplorerVersions { get; private set; } = null!;

        /// <summary>
        /// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
        /// </summary>
        [Output("blockedOperaVersions")]
        public Output<ImmutableArray<string>> BlockedOperaVersions { get; private set; } = null!;

        /// <summary>
        /// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
        /// </summary>
        [Output("blockedSafariVersions")]
        public Output<ImmutableArray<string>> BlockedSafariVersions { get; private set; } = null!;

        /// <summary>
        /// If set to true, all the browsers are bypassed for warnings
        /// </summary>
        [Output("bypassAllBrowsers")]
        public Output<bool> BypassAllBrowsers { get; private set; } = null!;

        /// <summary>
        /// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
        /// attribute is set to true. If not set, all vulnerable applications are warned
        /// </summary>
        [Output("bypassApplications")]
        public Output<ImmutableArray<string>> BypassApplications { get; private set; } = null!;

        /// <summary>
        /// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
        /// is set to true. If not set, all vulnerable plugins are warned
        /// </summary>
        [Output("bypassPlugins")]
        public Output<ImmutableArray<string>> BypassPlugins { get; private set; } = null!;

        /// <summary>
        /// A Boolean value that specifies if Smart Browser Isolation is enabled
        /// </summary>
        [Output("enableSmartBrowserIsolation")]
        public Output<bool> EnableSmartBrowserIsolation { get; private set; } = null!;

        /// <summary>
        /// A Boolean value that specifies if the warnings are enabled
        /// </summary>
        [Output("enableWarnings")]
        public Output<bool> EnableWarnings { get; private set; } = null!;

        /// <summary>
        /// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
        /// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
        /// </summary>
        [Output("pluginCheckFrequency")]
        public Output<string?> PluginCheckFrequency { get; private set; } = null!;

        /// <summary>
        /// Name-ID pairs of groups for which the rule is applied
        /// </summary>
        [Output("smartIsolationGroups")]
        public Output<Outputs.BrowserControlPolicySmartIsolationGroups?> SmartIsolationGroups { get; private set; } = null!;

        /// <summary>
        /// The isolation profile
        /// </summary>
        [Output("smartIsolationProfiles")]
        public Output<ImmutableArray<Outputs.BrowserControlPolicySmartIsolationProfile>> SmartIsolationProfiles { get; private set; } = null!;

        /// <summary>
        /// Name-ID pairs of users for which the rule is applied
        /// </summary>
        [Output("smartIsolationUsers")]
        public Output<Outputs.BrowserControlPolicySmartIsolationUsers?> SmartIsolationUsers { get; private set; } = null!;


        /// <summary>
        /// Create a BrowserControlPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BrowserControlPolicy(string name, BrowserControlPolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("zia:index/browserControlPolicy:BrowserControlPolicy", name, args ?? new BrowserControlPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BrowserControlPolicy(string name, Input<string> id, BrowserControlPolicyState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/browserControlPolicy:BrowserControlPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BrowserControlPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BrowserControlPolicy Get(string name, Input<string> id, BrowserControlPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new BrowserControlPolicy(name, id, state, options);
        }
    }

    public sealed class BrowserControlPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
        /// internet
        /// </summary>
        [Input("allowAllBrowsers")]
        public Input<bool>? AllowAllBrowsers { get; set; }

        [Input("blockedChromeVersions")]
        private InputList<string>? _blockedChromeVersions;

        /// <summary>
        /// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
        /// </summary>
        public InputList<string> BlockedChromeVersions
        {
            get => _blockedChromeVersions ?? (_blockedChromeVersions = new InputList<string>());
            set => _blockedChromeVersions = value;
        }

        [Input("blockedFirefoxVersions")]
        private InputList<string>? _blockedFirefoxVersions;

        /// <summary>
        /// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
        /// </summary>
        public InputList<string> BlockedFirefoxVersions
        {
            get => _blockedFirefoxVersions ?? (_blockedFirefoxVersions = new InputList<string>());
            set => _blockedFirefoxVersions = value;
        }

        [Input("blockedInternetExplorerVersions")]
        private InputList<string>? _blockedInternetExplorerVersions;

        /// <summary>
        /// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
        /// </summary>
        public InputList<string> BlockedInternetExplorerVersions
        {
            get => _blockedInternetExplorerVersions ?? (_blockedInternetExplorerVersions = new InputList<string>());
            set => _blockedInternetExplorerVersions = value;
        }

        [Input("blockedOperaVersions")]
        private InputList<string>? _blockedOperaVersions;

        /// <summary>
        /// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
        /// </summary>
        public InputList<string> BlockedOperaVersions
        {
            get => _blockedOperaVersions ?? (_blockedOperaVersions = new InputList<string>());
            set => _blockedOperaVersions = value;
        }

        [Input("blockedSafariVersions")]
        private InputList<string>? _blockedSafariVersions;

        /// <summary>
        /// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
        /// </summary>
        public InputList<string> BlockedSafariVersions
        {
            get => _blockedSafariVersions ?? (_blockedSafariVersions = new InputList<string>());
            set => _blockedSafariVersions = value;
        }

        /// <summary>
        /// If set to true, all the browsers are bypassed for warnings
        /// </summary>
        [Input("bypassAllBrowsers")]
        public Input<bool>? BypassAllBrowsers { get; set; }

        [Input("bypassApplications")]
        private InputList<string>? _bypassApplications;

        /// <summary>
        /// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
        /// attribute is set to true. If not set, all vulnerable applications are warned
        /// </summary>
        public InputList<string> BypassApplications
        {
            get => _bypassApplications ?? (_bypassApplications = new InputList<string>());
            set => _bypassApplications = value;
        }

        [Input("bypassPlugins")]
        private InputList<string>? _bypassPlugins;

        /// <summary>
        /// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
        /// is set to true. If not set, all vulnerable plugins are warned
        /// </summary>
        public InputList<string> BypassPlugins
        {
            get => _bypassPlugins ?? (_bypassPlugins = new InputList<string>());
            set => _bypassPlugins = value;
        }

        /// <summary>
        /// A Boolean value that specifies if Smart Browser Isolation is enabled
        /// </summary>
        [Input("enableSmartBrowserIsolation")]
        public Input<bool>? EnableSmartBrowserIsolation { get; set; }

        /// <summary>
        /// A Boolean value that specifies if the warnings are enabled
        /// </summary>
        [Input("enableWarnings")]
        public Input<bool>? EnableWarnings { get; set; }

        /// <summary>
        /// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
        /// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
        /// </summary>
        [Input("pluginCheckFrequency")]
        public Input<string>? PluginCheckFrequency { get; set; }

        /// <summary>
        /// Name-ID pairs of groups for which the rule is applied
        /// </summary>
        [Input("smartIsolationGroups")]
        public Input<Inputs.BrowserControlPolicySmartIsolationGroupsArgs>? SmartIsolationGroups { get; set; }

        [Input("smartIsolationProfiles")]
        private InputList<Inputs.BrowserControlPolicySmartIsolationProfileArgs>? _smartIsolationProfiles;

        /// <summary>
        /// The isolation profile
        /// </summary>
        public InputList<Inputs.BrowserControlPolicySmartIsolationProfileArgs> SmartIsolationProfiles
        {
            get => _smartIsolationProfiles ?? (_smartIsolationProfiles = new InputList<Inputs.BrowserControlPolicySmartIsolationProfileArgs>());
            set => _smartIsolationProfiles = value;
        }

        /// <summary>
        /// Name-ID pairs of users for which the rule is applied
        /// </summary>
        [Input("smartIsolationUsers")]
        public Input<Inputs.BrowserControlPolicySmartIsolationUsersArgs>? SmartIsolationUsers { get; set; }

        public BrowserControlPolicyArgs()
        {
        }
        public static new BrowserControlPolicyArgs Empty => new BrowserControlPolicyArgs();
    }

    public sealed class BrowserControlPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
        /// internet
        /// </summary>
        [Input("allowAllBrowsers")]
        public Input<bool>? AllowAllBrowsers { get; set; }

        [Input("blockedChromeVersions")]
        private InputList<string>? _blockedChromeVersions;

        /// <summary>
        /// Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
        /// </summary>
        public InputList<string> BlockedChromeVersions
        {
            get => _blockedChromeVersions ?? (_blockedChromeVersions = new InputList<string>());
            set => _blockedChromeVersions = value;
        }

        [Input("blockedFirefoxVersions")]
        private InputList<string>? _blockedFirefoxVersions;

        /// <summary>
        /// Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
        /// </summary>
        public InputList<string> BlockedFirefoxVersions
        {
            get => _blockedFirefoxVersions ?? (_blockedFirefoxVersions = new InputList<string>());
            set => _blockedFirefoxVersions = value;
        }

        [Input("blockedInternetExplorerVersions")]
        private InputList<string>? _blockedInternetExplorerVersions;

        /// <summary>
        /// Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
        /// </summary>
        public InputList<string> BlockedInternetExplorerVersions
        {
            get => _blockedInternetExplorerVersions ?? (_blockedInternetExplorerVersions = new InputList<string>());
            set => _blockedInternetExplorerVersions = value;
        }

        [Input("blockedOperaVersions")]
        private InputList<string>? _blockedOperaVersions;

        /// <summary>
        /// Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
        /// </summary>
        public InputList<string> BlockedOperaVersions
        {
            get => _blockedOperaVersions ?? (_blockedOperaVersions = new InputList<string>());
            set => _blockedOperaVersions = value;
        }

        [Input("blockedSafariVersions")]
        private InputList<string>? _blockedSafariVersions;

        /// <summary>
        /// Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
        /// </summary>
        public InputList<string> BlockedSafariVersions
        {
            get => _blockedSafariVersions ?? (_blockedSafariVersions = new InputList<string>());
            set => _blockedSafariVersions = value;
        }

        /// <summary>
        /// If set to true, all the browsers are bypassed for warnings
        /// </summary>
        [Input("bypassAllBrowsers")]
        public Input<bool>? BypassAllBrowsers { get; set; }

        [Input("bypassApplications")]
        private InputList<string>? _bypassApplications;

        /// <summary>
        /// List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
        /// attribute is set to true. If not set, all vulnerable applications are warned
        /// </summary>
        public InputList<string> BypassApplications
        {
            get => _bypassApplications ?? (_bypassApplications = new InputList<string>());
            set => _bypassApplications = value;
        }

        [Input("bypassPlugins")]
        private InputList<string>? _bypassPlugins;

        /// <summary>
        /// List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
        /// is set to true. If not set, all vulnerable plugins are warned
        /// </summary>
        public InputList<string> BypassPlugins
        {
            get => _bypassPlugins ?? (_bypassPlugins = new InputList<string>());
            set => _bypassPlugins = value;
        }

        /// <summary>
        /// A Boolean value that specifies if Smart Browser Isolation is enabled
        /// </summary>
        [Input("enableSmartBrowserIsolation")]
        public Input<bool>? EnableSmartBrowserIsolation { get; set; }

        /// <summary>
        /// A Boolean value that specifies if the warnings are enabled
        /// </summary>
        [Input("enableWarnings")]
        public Input<bool>? EnableWarnings { get; set; }

        /// <summary>
        /// Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
        /// vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
        /// </summary>
        [Input("pluginCheckFrequency")]
        public Input<string>? PluginCheckFrequency { get; set; }

        /// <summary>
        /// Name-ID pairs of groups for which the rule is applied
        /// </summary>
        [Input("smartIsolationGroups")]
        public Input<Inputs.BrowserControlPolicySmartIsolationGroupsGetArgs>? SmartIsolationGroups { get; set; }

        [Input("smartIsolationProfiles")]
        private InputList<Inputs.BrowserControlPolicySmartIsolationProfileGetArgs>? _smartIsolationProfiles;

        /// <summary>
        /// The isolation profile
        /// </summary>
        public InputList<Inputs.BrowserControlPolicySmartIsolationProfileGetArgs> SmartIsolationProfiles
        {
            get => _smartIsolationProfiles ?? (_smartIsolationProfiles = new InputList<Inputs.BrowserControlPolicySmartIsolationProfileGetArgs>());
            set => _smartIsolationProfiles = value;
        }

        /// <summary>
        /// Name-ID pairs of users for which the rule is applied
        /// </summary>
        [Input("smartIsolationUsers")]
        public Input<Inputs.BrowserControlPolicySmartIsolationUsersGetArgs>? SmartIsolationUsers { get; set; }

        public BrowserControlPolicyState()
        {
        }
        public static new BrowserControlPolicyState Empty => new BrowserControlPolicyState();
    }
}
