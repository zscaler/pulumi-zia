// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    public static class GetLocationLite
    {
        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/about-locations)
        /// * [API documentation](https://help.zscaler.com/zia/location-management#/locations/lite-get)
        /// 
        /// Use the **zia_location_lite** data source to get information about a location in lite mode option available in the Zscaler Internet Access. This data source can be used to retrieve the Road Warrior location to then associated with one of the following resources: ``zia.URLFilteringRules``, ``zia.FirewallFilteringRule`` and ``zia.DLPWebRules`
        /// 
        /// ```hcl
        /// data "zia_location_lite" "this" {
        ///  name = "Road Warrior"
        /// }
        /// ```
        /// </summary>
        public static Task<GetLocationLiteResult> InvokeAsync(GetLocationLiteArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLocationLiteResult>("zia:index/getLocationLite:getLocationLite", args ?? new GetLocationLiteArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/about-locations)
        /// * [API documentation](https://help.zscaler.com/zia/location-management#/locations/lite-get)
        /// 
        /// Use the **zia_location_lite** data source to get information about a location in lite mode option available in the Zscaler Internet Access. This data source can be used to retrieve the Road Warrior location to then associated with one of the following resources: ``zia.URLFilteringRules``, ``zia.FirewallFilteringRule`` and ``zia.DLPWebRules`
        /// 
        /// ```hcl
        /// data "zia_location_lite" "this" {
        ///  name = "Road Warrior"
        /// }
        /// ```
        /// </summary>
        public static Output<GetLocationLiteResult> Invoke(GetLocationLiteInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLocationLiteResult>("zia:index/getLocationLite:getLocationLite", args ?? new GetLocationLiteInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/about-locations)
        /// * [API documentation](https://help.zscaler.com/zia/location-management#/locations/lite-get)
        /// 
        /// Use the **zia_location_lite** data source to get information about a location in lite mode option available in the Zscaler Internet Access. This data source can be used to retrieve the Road Warrior location to then associated with one of the following resources: ``zia.URLFilteringRules``, ``zia.FirewallFilteringRule`` and ``zia.DLPWebRules`
        /// 
        /// ```hcl
        /// data "zia_location_lite" "this" {
        ///  name = "Road Warrior"
        /// }
        /// ```
        /// </summary>
        public static Output<GetLocationLiteResult> Invoke(GetLocationLiteInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLocationLiteResult>("zia:index/getLocationLite:getLocationLite", args ?? new GetLocationLiteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLocationLiteArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (Boolean)
        /// </summary>
        [Input("digestAuthEnabled")]
        public bool? DigestAuthEnabled { get; set; }

        /// <summary>
        /// (Boolean)
        /// </summary>
        [Input("kerberosAuth")]
        public bool? KerberosAuth { get; set; }

        /// <summary>
        /// Location group name
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetLocationLiteArgs()
        {
        }
        public static new GetLocationLiteArgs Empty => new GetLocationLiteArgs();
    }

    public sealed class GetLocationLiteInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// (Boolean)
        /// </summary>
        [Input("digestAuthEnabled")]
        public Input<bool>? DigestAuthEnabled { get; set; }

        /// <summary>
        /// (Boolean)
        /// </summary>
        [Input("kerberosAuth")]
        public Input<bool>? KerberosAuth { get; set; }

        /// <summary>
        /// Location group name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetLocationLiteInvokeArgs()
        {
        }
        public static new GetLocationLiteInvokeArgs Empty => new GetLocationLiteInvokeArgs();
    }


    [OutputType]
    public sealed class GetLocationLiteResult
    {
        /// <summary>
        /// (Boolean) For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.
        /// </summary>
        public readonly bool AupBlockInternetUntilAccepted;
        /// <summary>
        /// (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
        /// </summary>
        public readonly bool AupEnabled;
        /// <summary>
        /// (Boolean) For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.
        /// </summary>
        public readonly bool AupForceSslInspection;
        /// <summary>
        /// (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
        /// </summary>
        public readonly bool CautionEnabled;
        /// <summary>
        /// (Boolean)
        /// </summary>
        public readonly bool? DigestAuthEnabled;
        /// <summary>
        /// (Boolean)
        /// </summary>
        public readonly bool EcLocation;
        public readonly int Id;
        /// <summary>
        /// (Boolean) Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
        /// </summary>
        public readonly bool IpsControl;
        /// <summary>
        /// (Number) If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.
        /// </summary>
        public readonly bool Ipv6Enabled;
        /// <summary>
        /// (Boolean)
        /// </summary>
        public readonly bool? KerberosAuth;
        public readonly string? Name;
        /// <summary>
        /// (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
        /// </summary>
        public readonly bool OfwEnabled;
        /// <summary>
        /// (Boolean) If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true
        /// </summary>
        public readonly bool Other6SubLocation;
        /// <summary>
        /// (Boolean) If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.
        /// </summary>
        public readonly bool OtherSubLocation;
        /// <summary>
        /// (Number) - Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`
        /// </summary>
        public readonly int ParentId;
        /// <summary>
        /// (Boolean) Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
        /// </summary>
        public readonly bool SurrogateIp;
        /// <summary>
        /// (Boolean) Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
        /// </summary>
        public readonly bool SurrogateIpEnforcedForKnownBrowsers;
        /// <summary>
        /// (String) Timezone of the location. If not specified, it defaults to GMT.
        /// </summary>
        public readonly string Tz;
        /// <summary>
        /// (Boolean) Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        /// </summary>
        public readonly bool XffForwardEnabled;
        /// <summary>
        /// (Boolean) This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        /// </summary>
        public readonly bool ZappSslScanEnabled;

        [OutputConstructor]
        private GetLocationLiteResult(
            bool aupBlockInternetUntilAccepted,

            bool aupEnabled,

            bool aupForceSslInspection,

            bool cautionEnabled,

            bool? digestAuthEnabled,

            bool ecLocation,

            int id,

            bool ipsControl,

            bool ipv6Enabled,

            bool? kerberosAuth,

            string? name,

            bool ofwEnabled,

            bool other6SubLocation,

            bool otherSubLocation,

            int parentId,

            bool surrogateIp,

            bool surrogateIpEnforcedForKnownBrowsers,

            string tz,

            bool xffForwardEnabled,

            bool zappSslScanEnabled)
        {
            AupBlockInternetUntilAccepted = aupBlockInternetUntilAccepted;
            AupEnabled = aupEnabled;
            AupForceSslInspection = aupForceSslInspection;
            CautionEnabled = cautionEnabled;
            DigestAuthEnabled = digestAuthEnabled;
            EcLocation = ecLocation;
            Id = id;
            IpsControl = ipsControl;
            Ipv6Enabled = ipv6Enabled;
            KerberosAuth = kerberosAuth;
            Name = name;
            OfwEnabled = ofwEnabled;
            Other6SubLocation = other6SubLocation;
            OtherSubLocation = otherSubLocation;
            ParentId = parentId;
            SurrogateIp = surrogateIp;
            SurrogateIpEnforcedForKnownBrowsers = surrogateIpEnforcedForKnownBrowsers;
            Tz = tz;
            XffForwardEnabled = xffForwardEnabled;
            ZappSslScanEnabled = zappSslScanEnabled;
        }
    }
}
