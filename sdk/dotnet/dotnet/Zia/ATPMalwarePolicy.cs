// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// * [Official documentation](https://help.zscaler.com/zia/configuring-malware-protection-policy)
    /// * [API documentation](https://help.zscaler.com/zia/malware-protection-policy#/cyberThreatProtection/atpMalwareInspection-put)
    /// 
    /// The **zia_atp_malware_policy** resource allows you to update security exceptions for the Malware Protection policy. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zia_atp_malware_policy** can be imported by using `policy` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/aTPMalwarePolicy:ATPMalwarePolicy this "policy"
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/aTPMalwarePolicy:ATPMalwarePolicy")]
    public partial class ATPMalwarePolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A Boolean value indicating whether to allow or block users from uploading or downloading password-protected files
        /// </summary>
        [Output("blockPasswordProtectedArchiveFiles")]
        public Output<bool> BlockPasswordProtectedArchiveFiles { get; private set; } = null!;

        /// <summary>
        /// A Boolean value indicating whether to allow or block users from uploading or downloading files that the Zscaler service
        /// is unable to scan.
        /// </summary>
        [Output("blockUnscannableFiles")]
        public Output<bool> BlockUnscannableFiles { get; private set; } = null!;


        /// <summary>
        /// Create a ATPMalwarePolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ATPMalwarePolicy(string name, ATPMalwarePolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("zia:index/aTPMalwarePolicy:ATPMalwarePolicy", name, args ?? new ATPMalwarePolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ATPMalwarePolicy(string name, Input<string> id, ATPMalwarePolicyState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/aTPMalwarePolicy:ATPMalwarePolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ATPMalwarePolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ATPMalwarePolicy Get(string name, Input<string> id, ATPMalwarePolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ATPMalwarePolicy(name, id, state, options);
        }
    }

    public sealed class ATPMalwarePolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Boolean value indicating whether to allow or block users from uploading or downloading password-protected files
        /// </summary>
        [Input("blockPasswordProtectedArchiveFiles")]
        public Input<bool>? BlockPasswordProtectedArchiveFiles { get; set; }

        /// <summary>
        /// A Boolean value indicating whether to allow or block users from uploading or downloading files that the Zscaler service
        /// is unable to scan.
        /// </summary>
        [Input("blockUnscannableFiles")]
        public Input<bool>? BlockUnscannableFiles { get; set; }

        public ATPMalwarePolicyArgs()
        {
        }
        public static new ATPMalwarePolicyArgs Empty => new ATPMalwarePolicyArgs();
    }

    public sealed class ATPMalwarePolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Boolean value indicating whether to allow or block users from uploading or downloading password-protected files
        /// </summary>
        [Input("blockPasswordProtectedArchiveFiles")]
        public Input<bool>? BlockPasswordProtectedArchiveFiles { get; set; }

        /// <summary>
        /// A Boolean value indicating whether to allow or block users from uploading or downloading files that the Zscaler service
        /// is unable to scan.
        /// </summary>
        [Input("blockUnscannableFiles")]
        public Input<bool>? BlockUnscannableFiles { get; set; }

        public ATPMalwarePolicyState()
        {
        }
        public static new ATPMalwarePolicyState Empty => new ATPMalwarePolicyState();
    }
}
