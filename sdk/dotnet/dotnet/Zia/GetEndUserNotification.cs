// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    public static class GetEndUserNotification
    {
        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/understanding-browser-based-end-user-notifications)
        /// * [API documentation](https://help.zscaler.com/zia/end-user-notifications#/eun-get)
        /// 
        /// Use the **zia_end_user_notification** data source to get information about browser-based end user notification (EUN) configuration details.
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// data "zia_end_user_notification" "example"{}
        /// ```
        /// </summary>
        public static Task<GetEndUserNotificationResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEndUserNotificationResult>("zia:index/getEndUserNotification:getEndUserNotification", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/understanding-browser-based-end-user-notifications)
        /// * [API documentation](https://help.zscaler.com/zia/end-user-notifications#/eun-get)
        /// 
        /// Use the **zia_end_user_notification** data source to get information about browser-based end user notification (EUN) configuration details.
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// data "zia_end_user_notification" "example"{}
        /// ```
        /// </summary>
        public static Output<GetEndUserNotificationResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEndUserNotificationResult>("zia:index/getEndUserNotification:getEndUserNotification", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/understanding-browser-based-end-user-notifications)
        /// * [API documentation](https://help.zscaler.com/zia/end-user-notifications#/eun-get)
        /// 
        /// Use the **zia_end_user_notification** data source to get information about browser-based end user notification (EUN) configuration details.
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// data "zia_end_user_notification" "example"{}
        /// ```
        /// </summary>
        public static Output<GetEndUserNotificationResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEndUserNotificationResult>("zia:index/getEndUserNotification:getEndUserNotification", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetEndUserNotificationResult
    {
        public readonly int AupCustomFrequency;
        public readonly int AupDayOffset;
        public readonly string AupFrequency;
        public readonly string AupMessage;
        public readonly int CautionAgainAfter;
        public readonly string CautionCustomText;
        public readonly bool CautionPerDomain;
        public readonly string CustomText;
        public readonly bool DisplayCompanyLogo;
        public readonly bool DisplayCompanyName;
        public readonly bool DisplayReason;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IdpProxyNotificationText;
        public readonly string NotificationType;
        public readonly string OrgPolicyLink;
        public readonly string QuarantineCustomNotificationText;
        public readonly string RedirectUrl;
        public readonly string SecurityReviewCustomLocation;
        public readonly bool SecurityReviewEnabled;
        public readonly bool SecurityReviewSubmitToSecurityCloud;
        public readonly string SecurityReviewText;
        public readonly string SupportEmail;
        public readonly string SupportPhone;
        public readonly string UrlCatReviewCustomLocation;
        public readonly bool UrlCatReviewEnabled;
        public readonly bool UrlCatReviewSubmitToSecurityCloud;
        public readonly string UrlCatReviewText;
        public readonly string WebDlpReviewCustomLocation;
        public readonly bool WebDlpReviewEnabled;
        public readonly bool WebDlpReviewSubmitToSecurityCloud;
        public readonly string WebDlpReviewText;

        [OutputConstructor]
        private GetEndUserNotificationResult(
            int aupCustomFrequency,

            int aupDayOffset,

            string aupFrequency,

            string aupMessage,

            int cautionAgainAfter,

            string cautionCustomText,

            bool cautionPerDomain,

            string customText,

            bool displayCompanyLogo,

            bool displayCompanyName,

            bool displayReason,

            string id,

            string idpProxyNotificationText,

            string notificationType,

            string orgPolicyLink,

            string quarantineCustomNotificationText,

            string redirectUrl,

            string securityReviewCustomLocation,

            bool securityReviewEnabled,

            bool securityReviewSubmitToSecurityCloud,

            string securityReviewText,

            string supportEmail,

            string supportPhone,

            string urlCatReviewCustomLocation,

            bool urlCatReviewEnabled,

            bool urlCatReviewSubmitToSecurityCloud,

            string urlCatReviewText,

            string webDlpReviewCustomLocation,

            bool webDlpReviewEnabled,

            bool webDlpReviewSubmitToSecurityCloud,

            string webDlpReviewText)
        {
            AupCustomFrequency = aupCustomFrequency;
            AupDayOffset = aupDayOffset;
            AupFrequency = aupFrequency;
            AupMessage = aupMessage;
            CautionAgainAfter = cautionAgainAfter;
            CautionCustomText = cautionCustomText;
            CautionPerDomain = cautionPerDomain;
            CustomText = customText;
            DisplayCompanyLogo = displayCompanyLogo;
            DisplayCompanyName = displayCompanyName;
            DisplayReason = displayReason;
            Id = id;
            IdpProxyNotificationText = idpProxyNotificationText;
            NotificationType = notificationType;
            OrgPolicyLink = orgPolicyLink;
            QuarantineCustomNotificationText = quarantineCustomNotificationText;
            RedirectUrl = redirectUrl;
            SecurityReviewCustomLocation = securityReviewCustomLocation;
            SecurityReviewEnabled = securityReviewEnabled;
            SecurityReviewSubmitToSecurityCloud = securityReviewSubmitToSecurityCloud;
            SecurityReviewText = securityReviewText;
            SupportEmail = supportEmail;
            SupportPhone = supportPhone;
            UrlCatReviewCustomLocation = urlCatReviewCustomLocation;
            UrlCatReviewEnabled = urlCatReviewEnabled;
            UrlCatReviewSubmitToSecurityCloud = urlCatReviewSubmitToSecurityCloud;
            UrlCatReviewText = urlCatReviewText;
            WebDlpReviewCustomLocation = webDlpReviewCustomLocation;
            WebDlpReviewEnabled = webDlpReviewEnabled;
            WebDlpReviewSubmitToSecurityCloud = webDlpReviewSubmitToSecurityCloud;
            WebDlpReviewText = webDlpReviewText;
        }
    }
}
