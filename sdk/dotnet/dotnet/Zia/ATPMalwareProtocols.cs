// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// * [Official documentation](https://help.zscaler.com/zia/configuring-malware-protection-policy)
    /// * [API documentation](https://help.zscaler.com/zia/malware-protection-policy#/cyberThreatProtection/atpMalwareInspection-put)
    /// 
    /// The **zia_atp_malware_protocols** resource allows you to update protocol inspection configurations of Malware Protection policy. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **atp_malware_protocols** can be imported by using `protocol` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/aTPMalwareProtocols:ATPMalwareProtocols this "protocol"
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/aTPMalwareProtocols:ATPMalwareProtocols")]
    public partial class ATPMalwareProtocols : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
        /// </summary>
        [Output("inspectFtp")]
        public Output<bool> InspectFtp { get; private set; } = null!;

        /// <summary>
        /// A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
        /// </summary>
        [Output("inspectFtpOverHttp")]
        public Output<bool> InspectFtpOverHttp { get; private set; } = null!;

        /// <summary>
        /// A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
        /// malicious content in real time
        /// </summary>
        [Output("inspectHttp")]
        public Output<bool> InspectHttp { get; private set; } = null!;


        /// <summary>
        /// Create a ATPMalwareProtocols resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ATPMalwareProtocols(string name, ATPMalwareProtocolsArgs? args = null, CustomResourceOptions? options = null)
            : base("zia:index/aTPMalwareProtocols:ATPMalwareProtocols", name, args ?? new ATPMalwareProtocolsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ATPMalwareProtocols(string name, Input<string> id, ATPMalwareProtocolsState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/aTPMalwareProtocols:ATPMalwareProtocols", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ATPMalwareProtocols resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ATPMalwareProtocols Get(string name, Input<string> id, ATPMalwareProtocolsState? state = null, CustomResourceOptions? options = null)
        {
            return new ATPMalwareProtocols(name, id, state, options);
        }
    }

    public sealed class ATPMalwareProtocolsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
        /// </summary>
        [Input("inspectFtp")]
        public Input<bool>? InspectFtp { get; set; }

        /// <summary>
        /// A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
        /// </summary>
        [Input("inspectFtpOverHttp")]
        public Input<bool>? InspectFtpOverHttp { get; set; }

        /// <summary>
        /// A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
        /// malicious content in real time
        /// </summary>
        [Input("inspectHttp")]
        public Input<bool>? InspectHttp { get; set; }

        public ATPMalwareProtocolsArgs()
        {
        }
        public static new ATPMalwareProtocolsArgs Empty => new ATPMalwareProtocolsArgs();
    }

    public sealed class ATPMalwareProtocolsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
        /// </summary>
        [Input("inspectFtp")]
        public Input<bool>? InspectFtp { get; set; }

        /// <summary>
        /// A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
        /// </summary>
        [Input("inspectFtpOverHttp")]
        public Input<bool>? InspectFtpOverHttp { get; set; }

        /// <summary>
        /// A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
        /// malicious content in real time
        /// </summary>
        [Input("inspectHttp")]
        public Input<bool>? InspectHttp { get; set; }

        public ATPMalwareProtocolsState()
        {
        }
        public static new ATPMalwareProtocolsState Empty => new ATPMalwareProtocolsState();
    }
}
