// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    public static class GetMalwareSettings
    {
        /// <summary>
        /// Use the **zia_atp_malware_settings** data source to retrieves the malware protection policy configuration setting details. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// data "zia_atp_malware_settings" "this" {}
        /// ```
        /// </summary>
        public static Task<GetMalwareSettingsResult> InvokeAsync(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMalwareSettingsResult>("zia:index/getMalwareSettings:getMalwareSettings", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Use the **zia_atp_malware_settings** data source to retrieves the malware protection policy configuration setting details. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// data "zia_atp_malware_settings" "this" {}
        /// ```
        /// </summary>
        public static Output<GetMalwareSettingsResult> Invoke(InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMalwareSettingsResult>("zia:index/getMalwareSettings:getMalwareSettings", InvokeArgs.Empty, options.WithDefaults());

        /// <summary>
        /// Use the **zia_atp_malware_settings** data source to retrieves the malware protection policy configuration setting details. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)
        /// 
        /// ## Example Usage
        /// 
        /// ```hcl
        /// data "zia_atp_malware_settings" "this" {}
        /// ```
        /// </summary>
        public static Output<GetMalwareSettingsResult> Invoke(InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetMalwareSettingsResult>("zia:index/getMalwareSettings:getMalwareSettings", InvokeArgs.Empty, options.WithDefaults());
    }


    [OutputType]
    public sealed class GetMalwareSettingsResult
    {
        public readonly bool AdwareBlocked;
        public readonly bool AdwareCapture;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool RansomwareBlocked;
        public readonly bool RansomwareCapture;
        public readonly bool RemoteAccessToolBlocked;
        public readonly bool RemoteAccessToolCapture;
        public readonly bool SpywareBlocked;
        public readonly bool SpywareCapture;
        public readonly bool TrojanBlocked;
        public readonly bool TrojanCapture;
        public readonly bool UnwantedApplicationsBlocked;
        public readonly bool UnwantedApplicationsCapture;
        public readonly bool VirusBlocked;
        public readonly bool VirusCapture;
        public readonly bool WormBlocked;
        public readonly bool WormCapture;

        [OutputConstructor]
        private GetMalwareSettingsResult(
            bool adwareBlocked,

            bool adwareCapture,

            string id,

            bool ransomwareBlocked,

            bool ransomwareCapture,

            bool remoteAccessToolBlocked,

            bool remoteAccessToolCapture,

            bool spywareBlocked,

            bool spywareCapture,

            bool trojanBlocked,

            bool trojanCapture,

            bool unwantedApplicationsBlocked,

            bool unwantedApplicationsCapture,

            bool virusBlocked,

            bool virusCapture,

            bool wormBlocked,

            bool wormCapture)
        {
            AdwareBlocked = adwareBlocked;
            AdwareCapture = adwareCapture;
            Id = id;
            RansomwareBlocked = ransomwareBlocked;
            RansomwareCapture = ransomwareCapture;
            RemoteAccessToolBlocked = remoteAccessToolBlocked;
            RemoteAccessToolCapture = remoteAccessToolCapture;
            SpywareBlocked = spywareBlocked;
            SpywareCapture = spywareCapture;
            TrojanBlocked = trojanBlocked;
            TrojanCapture = trojanCapture;
            UnwantedApplicationsBlocked = unwantedApplicationsBlocked;
            UnwantedApplicationsCapture = unwantedApplicationsCapture;
            VirusBlocked = virusBlocked;
            VirusCapture = virusCapture;
            WormBlocked = wormBlocked;
            WormCapture = wormCapture;
        }
    }
}
