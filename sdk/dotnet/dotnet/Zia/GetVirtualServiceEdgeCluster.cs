// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    public static class GetVirtualServiceEdgeCluster
    {
        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/about-virtual-service-edge-clusters)
        /// * [API documentation](https://help.zscaler.com/zia/service-edges#/virtualZenClusters-get)
        /// 
        /// Use the **zia_virtual_service_edge_cluster** data source to get information about a Virtual Service Edge Cluster information for the specified `Name` or `ID`
        /// 
        /// ```hcl
        /// data "zia_virtual_service_edge_cluster" "this"{
        ///     name = "VSECluster01"
        /// }
        /// ```
        /// </summary>
        public static Task<GetVirtualServiceEdgeClusterResult> InvokeAsync(GetVirtualServiceEdgeClusterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVirtualServiceEdgeClusterResult>("zia:index/getVirtualServiceEdgeCluster:getVirtualServiceEdgeCluster", args ?? new GetVirtualServiceEdgeClusterArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/about-virtual-service-edge-clusters)
        /// * [API documentation](https://help.zscaler.com/zia/service-edges#/virtualZenClusters-get)
        /// 
        /// Use the **zia_virtual_service_edge_cluster** data source to get information about a Virtual Service Edge Cluster information for the specified `Name` or `ID`
        /// 
        /// ```hcl
        /// data "zia_virtual_service_edge_cluster" "this"{
        ///     name = "VSECluster01"
        /// }
        /// ```
        /// </summary>
        public static Output<GetVirtualServiceEdgeClusterResult> Invoke(GetVirtualServiceEdgeClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualServiceEdgeClusterResult>("zia:index/getVirtualServiceEdgeCluster:getVirtualServiceEdgeCluster", args ?? new GetVirtualServiceEdgeClusterInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://help.zscaler.com/zia/about-virtual-service-edge-clusters)
        /// * [API documentation](https://help.zscaler.com/zia/service-edges#/virtualZenClusters-get)
        /// 
        /// Use the **zia_virtual_service_edge_cluster** data source to get information about a Virtual Service Edge Cluster information for the specified `Name` or `ID`
        /// 
        /// ```hcl
        /// data "zia_virtual_service_edge_cluster" "this"{
        ///     name = "VSECluster01"
        /// }
        /// ```
        /// </summary>
        public static Output<GetVirtualServiceEdgeClusterResult> Invoke(GetVirtualServiceEdgeClusterInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVirtualServiceEdgeClusterResult>("zia:index/getVirtualServiceEdgeCluster:getVirtualServiceEdgeCluster", args ?? new GetVirtualServiceEdgeClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualServiceEdgeClusterArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// USystem-generated Virtual Service Edge cluster ID
        /// </summary>
        [Input("id")]
        public int? Id { get; set; }

        /// <summary>
        /// Name of the Virtual Service Edge cluster
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetVirtualServiceEdgeClusterArgs()
        {
        }
        public static new GetVirtualServiceEdgeClusterArgs Empty => new GetVirtualServiceEdgeClusterArgs();
    }

    public sealed class GetVirtualServiceEdgeClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// USystem-generated Virtual Service Edge cluster ID
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        /// <summary>
        /// Name of the Virtual Service Edge cluster
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetVirtualServiceEdgeClusterInvokeArgs()
        {
        }
        public static new GetVirtualServiceEdgeClusterInvokeArgs Empty => new GetVirtualServiceEdgeClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetVirtualServiceEdgeClusterResult
    {
        /// <summary>
        /// (String) The IP address of the default gateway to the internet
        /// </summary>
        public readonly string DefaultGateway;
        /// <summary>
        /// (Number) Identifier that uniquely identifies an entity
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
        /// </summary>
        public readonly bool IpSecEnabled;
        /// <summary>
        /// (Number) When the cluster was last modified
        /// </summary>
        public readonly int LastModifiedTime;
        /// <summary>
        /// (String) The configured name of the entity
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// (String) The Virtual Service Edge cluster subnet mask
        /// </summary>
        public readonly string SubnetMask;
        /// <summary>
        /// (String) The Virtual Service Edge cluster type
        /// `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
        /// `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
        /// `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
        /// `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`,
        /// `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,
        /// `SMBAM`, `ZWACLT`
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVirtualServiceEdgeClusterVirtualZenNodeResult> VirtualZenNodes;

        [OutputConstructor]
        private GetVirtualServiceEdgeClusterResult(
            string defaultGateway,

            int id,

            string ipAddress,

            bool ipSecEnabled,

            int lastModifiedTime,

            string name,

            string status,

            string subnetMask,

            string type,

            ImmutableArray<Outputs.GetVirtualServiceEdgeClusterVirtualZenNodeResult> virtualZenNodes)
        {
            DefaultGateway = defaultGateway;
            Id = id;
            IpAddress = ipAddress;
            IpSecEnabled = ipSecEnabled;
            LastModifiedTime = lastModifiedTime;
            Name = name;
            Status = status;
            SubnetMask = subnetMask;
            Type = type;
            VirtualZenNodes = virtualZenNodes;
        }
    }
}
