// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// * [Official documentation](https://help.zscaler.com/zia/about-cloud-application-risk-profile)
    /// * [API documentation](https://help.zscaler.com/zia/cloud-applications#/riskProfiles-get)
    /// 
    /// Use the **zia_risk_profiles** resource allows the creation and management of cloud application risk profile in the Zscaler Internet Access cloud or via the API.
    /// See [About Cloud Application Risk Profile](https://help.zscaler.com/zia/about-cloud-application-risk-profile) for more details.
    /// 
    /// ## Example Usage
    /// 
    /// ### Create A Risk Profile
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zia_risk_profiles** can be imported by using `&lt;PROFILE_ID&gt;` or `&lt;PROFILE_NAME&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/riskProfiles:RiskProfiles example &lt;profile_id&gt;
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zia:index/riskProfiles:RiskProfiles example &lt;profile_name&gt;
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/riskProfiles:RiskProfiles")]
    public partial class RiskProfiles : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (String) Filters based on support for administrative logging. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("adminAuditLogs")]
        public Output<string?> AdminAuditLogs { get; private set; } = null!;

        /// <summary>
        /// (Optional) Filters based on supported certifications.
        /// </summary>
        [Output("certifications")]
        public Output<ImmutableArray<string>> Certifications { get; private set; } = null!;

        /// <summary>
        /// (Set) List of custom tags to be included or excluded for the profile.
        /// </summary>
        [Output("customTags")]
        public Output<Outputs.RiskProfilesCustomTags?> CustomTags { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on history of data breaches. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("dataBreach")]
        public Output<string?> DataBreach { get; private set; } = null!;

        /// <summary>
        /// (Optional) Filters based on encryption of data in transit.
        /// </summary>
        [Output("dataEncryptionInTransits")]
        public Output<ImmutableArray<string>> DataEncryptionInTransits { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on DNS CAA policy implementation.
        /// </summary>
        [Output("dnsCaaPolicy")]
        public Output<string?> DnsCaaPolicy { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on DMARC support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("domainBasedMessageAuth")]
        public Output<string?> DomainBasedMessageAuth { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on DKIM authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("domainKeysIdentifiedMail")]
        public Output<string?> DomainKeysIdentifiedMail { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on anonymous access support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("evasive")]
        public Output<string?> Evasive { get; private set; } = null!;

        /// <summary>
        /// (Int) Indicates if the certificates are included or not.
        /// </summary>
        [Output("excludeCertificates")]
        public Output<int?> ExcludeCertificates { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on file sharing capability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("fileSharing")]
        public Output<string?> FileSharing { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on HTTP security headers support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("httpSecurityHeaders")]
        public Output<string?> HttpSecurityHeaders { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on content malware scanning. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("malwareScanningForContent")]
        public Output<string?> MalwareScanningForContent { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on multi-factor authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("mfaSupport")]
        public Output<string?> MfaSupport { get; private set; } = null!;

        /// <summary>
        /// Cloud application risk profile name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on password strength policy. Supported values: `ANY`, `GOOD`, `POOR`, `UN_KNOWN`.
        /// </summary>
        [Output("passwordStrength")]
        public Output<string?> PasswordStrength { get; private set; } = null!;

        /// <summary>
        /// (String) Filters applications based on questionable legal terms. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("poorItemsOfService")]
        public Output<string?> PoorItemsOfService { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for the risk profile.
        /// </summary>
        [Output("profileId")]
        public Output<int> ProfileId { get; private set; } = null!;

        /// <summary>
        /// (String) Risk profile type. Supported value: `CLOUD_APPLICATIONS`. Default is `CLOUD_APPLICATIONS`.
        /// </summary>
        [Output("profileType")]
        public Output<string?> ProfileType { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on remote screen sharing support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("remoteScreenSharing")]
        public Output<string?> RemoteScreenSharing { get; private set; } = null!;

        /// <summary>
        /// (Optional) Filters based on risk index thresholds.
        /// </summary>
        [Output("riskIndices")]
        public Output<ImmutableArray<int>> RiskIndices { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on SPF authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("senderPolicyFramework")]
        public Output<string?> SenderPolicyFramework { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on IP restriction support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("sourceIpRestrictions")]
        public Output<string?> SourceIpRestrictions { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on SSL certificate key size. Supported values: `ANY`, `UN_KNOWN`, `BITS_1024`, `BITS_2048`, `BITS_256`, `BITS_3072`, `BITS_384`, `BITS_4096`, `BITS_8192`.
        /// </summary>
        [Output("sslCertKeySize")]
        public Output<string?> SslCertKeySize { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on SSL certificate validity period. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("sslCertValidity")]
        public Output<string?> SslCertValidity { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on use of pinned SSL certificates. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("sslPinned")]
        public Output<string?> SslPinned { get; private set; } = null!;

        /// <summary>
        /// (String) Status of the applications. Supported values: `UN_SANCTIONED`, `SANCTIONED`, `ANY`.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on Web Application Firewall (WAF) support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("supportForWaf")]
        public Output<string?> SupportForWaf { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on published CVE vulnerabilities. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("vulnerability")]
        public Output<string?> Vulnerability { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on vulnerability disclosure policy. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("vulnerabilityDisclosure")]
        public Output<string?> VulnerabilityDisclosure { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on Heartbleed vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("vulnerableToHeartBleed")]
        public Output<string?> VulnerableToHeartBleed { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on Logjam vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("vulnerableToLogJam")]
        public Output<string?> VulnerableToLogJam { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on POODLE vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("vulnerableToPoodle")]
        public Output<string?> VulnerableToPoodle { get; private set; } = null!;

        /// <summary>
        /// (String) Filters based on weak cipher usage. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Output("weakCipherSupport")]
        public Output<string?> WeakCipherSupport { get; private set; } = null!;


        /// <summary>
        /// Create a RiskProfiles resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RiskProfiles(string name, RiskProfilesArgs? args = null, CustomResourceOptions? options = null)
            : base("zia:index/riskProfiles:RiskProfiles", name, args ?? new RiskProfilesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RiskProfiles(string name, Input<string> id, RiskProfilesState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/riskProfiles:RiskProfiles", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RiskProfiles resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RiskProfiles Get(string name, Input<string> id, RiskProfilesState? state = null, CustomResourceOptions? options = null)
        {
            return new RiskProfiles(name, id, state, options);
        }
    }

    public sealed class RiskProfilesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (String) Filters based on support for administrative logging. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("adminAuditLogs")]
        public Input<string>? AdminAuditLogs { get; set; }

        [Input("certifications")]
        private InputList<string>? _certifications;

        /// <summary>
        /// (Optional) Filters based on supported certifications.
        /// </summary>
        public InputList<string> Certifications
        {
            get => _certifications ?? (_certifications = new InputList<string>());
            set => _certifications = value;
        }

        /// <summary>
        /// (Set) List of custom tags to be included or excluded for the profile.
        /// </summary>
        [Input("customTags")]
        public Input<Inputs.RiskProfilesCustomTagsArgs>? CustomTags { get; set; }

        /// <summary>
        /// (String) Filters based on history of data breaches. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("dataBreach")]
        public Input<string>? DataBreach { get; set; }

        [Input("dataEncryptionInTransits")]
        private InputList<string>? _dataEncryptionInTransits;

        /// <summary>
        /// (Optional) Filters based on encryption of data in transit.
        /// </summary>
        public InputList<string> DataEncryptionInTransits
        {
            get => _dataEncryptionInTransits ?? (_dataEncryptionInTransits = new InputList<string>());
            set => _dataEncryptionInTransits = value;
        }

        /// <summary>
        /// (String) Filters based on DNS CAA policy implementation.
        /// </summary>
        [Input("dnsCaaPolicy")]
        public Input<string>? DnsCaaPolicy { get; set; }

        /// <summary>
        /// (String) Filters based on DMARC support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("domainBasedMessageAuth")]
        public Input<string>? DomainBasedMessageAuth { get; set; }

        /// <summary>
        /// (String) Filters based on DKIM authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("domainKeysIdentifiedMail")]
        public Input<string>? DomainKeysIdentifiedMail { get; set; }

        /// <summary>
        /// (String) Filters based on anonymous access support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("evasive")]
        public Input<string>? Evasive { get; set; }

        /// <summary>
        /// (Int) Indicates if the certificates are included or not.
        /// </summary>
        [Input("excludeCertificates")]
        public Input<int>? ExcludeCertificates { get; set; }

        /// <summary>
        /// (String) Filters based on file sharing capability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("fileSharing")]
        public Input<string>? FileSharing { get; set; }

        /// <summary>
        /// (String) Filters based on HTTP security headers support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("httpSecurityHeaders")]
        public Input<string>? HttpSecurityHeaders { get; set; }

        /// <summary>
        /// (String) Filters based on content malware scanning. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("malwareScanningForContent")]
        public Input<string>? MalwareScanningForContent { get; set; }

        /// <summary>
        /// (String) Filters based on multi-factor authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("mfaSupport")]
        public Input<string>? MfaSupport { get; set; }

        /// <summary>
        /// Cloud application risk profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (String) Filters based on password strength policy. Supported values: `ANY`, `GOOD`, `POOR`, `UN_KNOWN`.
        /// </summary>
        [Input("passwordStrength")]
        public Input<string>? PasswordStrength { get; set; }

        /// <summary>
        /// (String) Filters applications based on questionable legal terms. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("poorItemsOfService")]
        public Input<string>? PoorItemsOfService { get; set; }

        /// <summary>
        /// (String) Risk profile type. Supported value: `CLOUD_APPLICATIONS`. Default is `CLOUD_APPLICATIONS`.
        /// </summary>
        [Input("profileType")]
        public Input<string>? ProfileType { get; set; }

        /// <summary>
        /// (String) Filters based on remote screen sharing support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("remoteScreenSharing")]
        public Input<string>? RemoteScreenSharing { get; set; }

        [Input("riskIndices")]
        private InputList<int>? _riskIndices;

        /// <summary>
        /// (Optional) Filters based on risk index thresholds.
        /// </summary>
        public InputList<int> RiskIndices
        {
            get => _riskIndices ?? (_riskIndices = new InputList<int>());
            set => _riskIndices = value;
        }

        /// <summary>
        /// (String) Filters based on SPF authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("senderPolicyFramework")]
        public Input<string>? SenderPolicyFramework { get; set; }

        /// <summary>
        /// (String) Filters based on IP restriction support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("sourceIpRestrictions")]
        public Input<string>? SourceIpRestrictions { get; set; }

        /// <summary>
        /// (String) Filters based on SSL certificate key size. Supported values: `ANY`, `UN_KNOWN`, `BITS_1024`, `BITS_2048`, `BITS_256`, `BITS_3072`, `BITS_384`, `BITS_4096`, `BITS_8192`.
        /// </summary>
        [Input("sslCertKeySize")]
        public Input<string>? SslCertKeySize { get; set; }

        /// <summary>
        /// (String) Filters based on SSL certificate validity period. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("sslCertValidity")]
        public Input<string>? SslCertValidity { get; set; }

        /// <summary>
        /// (String) Filters based on use of pinned SSL certificates. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("sslPinned")]
        public Input<string>? SslPinned { get; set; }

        /// <summary>
        /// (String) Status of the applications. Supported values: `UN_SANCTIONED`, `SANCTIONED`, `ANY`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// (String) Filters based on Web Application Firewall (WAF) support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("supportForWaf")]
        public Input<string>? SupportForWaf { get; set; }

        /// <summary>
        /// (String) Filters based on published CVE vulnerabilities. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("vulnerability")]
        public Input<string>? Vulnerability { get; set; }

        /// <summary>
        /// (String) Filters based on vulnerability disclosure policy. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("vulnerabilityDisclosure")]
        public Input<string>? VulnerabilityDisclosure { get; set; }

        /// <summary>
        /// (String) Filters based on Heartbleed vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("vulnerableToHeartBleed")]
        public Input<string>? VulnerableToHeartBleed { get; set; }

        /// <summary>
        /// (String) Filters based on Logjam vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("vulnerableToLogJam")]
        public Input<string>? VulnerableToLogJam { get; set; }

        /// <summary>
        /// (String) Filters based on POODLE vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("vulnerableToPoodle")]
        public Input<string>? VulnerableToPoodle { get; set; }

        /// <summary>
        /// (String) Filters based on weak cipher usage. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("weakCipherSupport")]
        public Input<string>? WeakCipherSupport { get; set; }

        public RiskProfilesArgs()
        {
        }
        public static new RiskProfilesArgs Empty => new RiskProfilesArgs();
    }

    public sealed class RiskProfilesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (String) Filters based on support for administrative logging. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("adminAuditLogs")]
        public Input<string>? AdminAuditLogs { get; set; }

        [Input("certifications")]
        private InputList<string>? _certifications;

        /// <summary>
        /// (Optional) Filters based on supported certifications.
        /// </summary>
        public InputList<string> Certifications
        {
            get => _certifications ?? (_certifications = new InputList<string>());
            set => _certifications = value;
        }

        /// <summary>
        /// (Set) List of custom tags to be included or excluded for the profile.
        /// </summary>
        [Input("customTags")]
        public Input<Inputs.RiskProfilesCustomTagsGetArgs>? CustomTags { get; set; }

        /// <summary>
        /// (String) Filters based on history of data breaches. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("dataBreach")]
        public Input<string>? DataBreach { get; set; }

        [Input("dataEncryptionInTransits")]
        private InputList<string>? _dataEncryptionInTransits;

        /// <summary>
        /// (Optional) Filters based on encryption of data in transit.
        /// </summary>
        public InputList<string> DataEncryptionInTransits
        {
            get => _dataEncryptionInTransits ?? (_dataEncryptionInTransits = new InputList<string>());
            set => _dataEncryptionInTransits = value;
        }

        /// <summary>
        /// (String) Filters based on DNS CAA policy implementation.
        /// </summary>
        [Input("dnsCaaPolicy")]
        public Input<string>? DnsCaaPolicy { get; set; }

        /// <summary>
        /// (String) Filters based on DMARC support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("domainBasedMessageAuth")]
        public Input<string>? DomainBasedMessageAuth { get; set; }

        /// <summary>
        /// (String) Filters based on DKIM authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("domainKeysIdentifiedMail")]
        public Input<string>? DomainKeysIdentifiedMail { get; set; }

        /// <summary>
        /// (String) Filters based on anonymous access support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("evasive")]
        public Input<string>? Evasive { get; set; }

        /// <summary>
        /// (Int) Indicates if the certificates are included or not.
        /// </summary>
        [Input("excludeCertificates")]
        public Input<int>? ExcludeCertificates { get; set; }

        /// <summary>
        /// (String) Filters based on file sharing capability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("fileSharing")]
        public Input<string>? FileSharing { get; set; }

        /// <summary>
        /// (String) Filters based on HTTP security headers support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("httpSecurityHeaders")]
        public Input<string>? HttpSecurityHeaders { get; set; }

        /// <summary>
        /// (String) Filters based on content malware scanning. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("malwareScanningForContent")]
        public Input<string>? MalwareScanningForContent { get; set; }

        /// <summary>
        /// (String) Filters based on multi-factor authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("mfaSupport")]
        public Input<string>? MfaSupport { get; set; }

        /// <summary>
        /// Cloud application risk profile name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (String) Filters based on password strength policy. Supported values: `ANY`, `GOOD`, `POOR`, `UN_KNOWN`.
        /// </summary>
        [Input("passwordStrength")]
        public Input<string>? PasswordStrength { get; set; }

        /// <summary>
        /// (String) Filters applications based on questionable legal terms. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("poorItemsOfService")]
        public Input<string>? PoorItemsOfService { get; set; }

        /// <summary>
        /// Unique identifier for the risk profile.
        /// </summary>
        [Input("profileId")]
        public Input<int>? ProfileId { get; set; }

        /// <summary>
        /// (String) Risk profile type. Supported value: `CLOUD_APPLICATIONS`. Default is `CLOUD_APPLICATIONS`.
        /// </summary>
        [Input("profileType")]
        public Input<string>? ProfileType { get; set; }

        /// <summary>
        /// (String) Filters based on remote screen sharing support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("remoteScreenSharing")]
        public Input<string>? RemoteScreenSharing { get; set; }

        [Input("riskIndices")]
        private InputList<int>? _riskIndices;

        /// <summary>
        /// (Optional) Filters based on risk index thresholds.
        /// </summary>
        public InputList<int> RiskIndices
        {
            get => _riskIndices ?? (_riskIndices = new InputList<int>());
            set => _riskIndices = value;
        }

        /// <summary>
        /// (String) Filters based on SPF authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("senderPolicyFramework")]
        public Input<string>? SenderPolicyFramework { get; set; }

        /// <summary>
        /// (String) Filters based on IP restriction support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("sourceIpRestrictions")]
        public Input<string>? SourceIpRestrictions { get; set; }

        /// <summary>
        /// (String) Filters based on SSL certificate key size. Supported values: `ANY`, `UN_KNOWN`, `BITS_1024`, `BITS_2048`, `BITS_256`, `BITS_3072`, `BITS_384`, `BITS_4096`, `BITS_8192`.
        /// </summary>
        [Input("sslCertKeySize")]
        public Input<string>? SslCertKeySize { get; set; }

        /// <summary>
        /// (String) Filters based on SSL certificate validity period. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("sslCertValidity")]
        public Input<string>? SslCertValidity { get; set; }

        /// <summary>
        /// (String) Filters based on use of pinned SSL certificates. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("sslPinned")]
        public Input<string>? SslPinned { get; set; }

        /// <summary>
        /// (String) Status of the applications. Supported values: `UN_SANCTIONED`, `SANCTIONED`, `ANY`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// (String) Filters based on Web Application Firewall (WAF) support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("supportForWaf")]
        public Input<string>? SupportForWaf { get; set; }

        /// <summary>
        /// (String) Filters based on published CVE vulnerabilities. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("vulnerability")]
        public Input<string>? Vulnerability { get; set; }

        /// <summary>
        /// (String) Filters based on vulnerability disclosure policy. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("vulnerabilityDisclosure")]
        public Input<string>? VulnerabilityDisclosure { get; set; }

        /// <summary>
        /// (String) Filters based on Heartbleed vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("vulnerableToHeartBleed")]
        public Input<string>? VulnerableToHeartBleed { get; set; }

        /// <summary>
        /// (String) Filters based on Logjam vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("vulnerableToLogJam")]
        public Input<string>? VulnerableToLogJam { get; set; }

        /// <summary>
        /// (String) Filters based on POODLE vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("vulnerableToPoodle")]
        public Input<string>? VulnerableToPoodle { get; set; }

        /// <summary>
        /// (String) Filters based on weak cipher usage. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        /// </summary>
        [Input("weakCipherSupport")]
        public Input<string>? WeakCipherSupport { get; set; }

        public RiskProfilesState()
        {
        }
        public static new RiskProfilesState Empty => new RiskProfilesState();
    }
}
