// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// * [Official documentation](https://help.zscaler.com/zia/about-url-categories)
    /// * [API documentation](https://help.zscaler.com/zia/url-categories#/urlCategories-get)
    /// 
    /// The **zia_url_categories** resource creates and manages a new custom URL category. If keywords are included within the request, they will be added to the new category.
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zia_url_categories** can be imported by using `&lt;CATEGORY_ID&gt;` or `&lt;CATEGORY_NAME&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/uRLCategories:URLCategories example &lt;category_id&gt;
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zia:index/uRLCategories:URLCategories example &lt;category_name&gt;
    /// ```
    /// 
    /// ⚠️ **NOTE :**:  This provider only supports the importing of custom URL categories. The importing of built-in categories is not supported.
    /// </summary>
    [ZiaResourceType("zia:index/uRLCategories:URLCategories")]
    public partial class URLCategories : global::Pulumi.CustomResource
    {
        [Output("categoryId")]
        public Output<string> CategoryId { get; private set; } = null!;

        /// <summary>
        /// Name of the URL category. This is only required for custom URL categories.
        /// </summary>
        [Output("configuredName")]
        public Output<string?> ConfiguredName { get; private set; } = null!;

        [Output("customCategory")]
        public Output<bool?> CustomCategory { get; private set; } = null!;

        [Output("customIpRangesCount")]
        public Output<int> CustomIpRangesCount { get; private set; } = null!;

        [Output("customUrlsCount")]
        public Output<int> CustomUrlsCount { get; private set; } = null!;

        [Output("dbCategorizedUrls")]
        public Output<ImmutableArray<string>> DbCategorizedUrls { get; private set; } = null!;

        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("editable")]
        public Output<bool> Editable { get; private set; } = null!;

        [Output("ipRanges")]
        public Output<ImmutableArray<string>> IpRanges { get; private set; } = null!;

        [Output("ipRangesRetainingParentCategories")]
        public Output<ImmutableArray<string>> IpRangesRetainingParentCategories { get; private set; } = null!;

        [Output("ipRangesRetainingParentCategoryCount")]
        public Output<int> IpRangesRetainingParentCategoryCount { get; private set; } = null!;

        [Output("keywords")]
        public Output<ImmutableArray<string>> Keywords { get; private set; } = null!;

        [Output("keywordsRetainingParentCategories")]
        public Output<ImmutableArray<string>> KeywordsRetainingParentCategories { get; private set; } = null!;

        [Output("scopes")]
        public Output<ImmutableArray<Outputs.URLCategoriesScope>> Scopes { get; private set; } = null!;

        /// <summary>
        /// Super Category of the URL category. This field is required when creating custom URL categories.
        /// </summary>
        [Output("superCategory")]
        public Output<string?> SuperCategory { get; private set; } = null!;

        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        [Output("urlKeywordCounts")]
        public Output<Outputs.URLCategoriesUrlKeywordCounts> UrlKeywordCounts { get; private set; } = null!;

        [Output("urls")]
        public Output<ImmutableArray<string>> Urls { get; private set; } = null!;

        [Output("urlsRetainingParentCategoryCount")]
        public Output<int> UrlsRetainingParentCategoryCount { get; private set; } = null!;


        /// <summary>
        /// Create a URLCategories resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public URLCategories(string name, URLCategoriesArgs? args = null, CustomResourceOptions? options = null)
            : base("zia:index/uRLCategories:URLCategories", name, args ?? new URLCategoriesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private URLCategories(string name, Input<string> id, URLCategoriesState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/uRLCategories:URLCategories", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing URLCategories resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static URLCategories Get(string name, Input<string> id, URLCategoriesState? state = null, CustomResourceOptions? options = null)
        {
            return new URLCategories(name, id, state, options);
        }
    }

    public sealed class URLCategoriesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the URL category. This is only required for custom URL categories.
        /// </summary>
        [Input("configuredName")]
        public Input<string>? ConfiguredName { get; set; }

        [Input("customCategory")]
        public Input<bool>? CustomCategory { get; set; }

        [Input("customIpRangesCount")]
        public Input<int>? CustomIpRangesCount { get; set; }

        [Input("customUrlsCount")]
        public Input<int>? CustomUrlsCount { get; set; }

        [Input("dbCategorizedUrls")]
        private InputList<string>? _dbCategorizedUrls;
        public InputList<string> DbCategorizedUrls
        {
            get => _dbCategorizedUrls ?? (_dbCategorizedUrls = new InputList<string>());
            set => _dbCategorizedUrls = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("editable")]
        public Input<bool>? Editable { get; set; }

        [Input("ipRanges")]
        private InputList<string>? _ipRanges;
        public InputList<string> IpRanges
        {
            get => _ipRanges ?? (_ipRanges = new InputList<string>());
            set => _ipRanges = value;
        }

        [Input("ipRangesRetainingParentCategories")]
        private InputList<string>? _ipRangesRetainingParentCategories;
        public InputList<string> IpRangesRetainingParentCategories
        {
            get => _ipRangesRetainingParentCategories ?? (_ipRangesRetainingParentCategories = new InputList<string>());
            set => _ipRangesRetainingParentCategories = value;
        }

        [Input("ipRangesRetainingParentCategoryCount")]
        public Input<int>? IpRangesRetainingParentCategoryCount { get; set; }

        [Input("keywords")]
        private InputList<string>? _keywords;
        public InputList<string> Keywords
        {
            get => _keywords ?? (_keywords = new InputList<string>());
            set => _keywords = value;
        }

        [Input("keywordsRetainingParentCategories")]
        private InputList<string>? _keywordsRetainingParentCategories;
        public InputList<string> KeywordsRetainingParentCategories
        {
            get => _keywordsRetainingParentCategories ?? (_keywordsRetainingParentCategories = new InputList<string>());
            set => _keywordsRetainingParentCategories = value;
        }

        [Input("scopes")]
        private InputList<Inputs.URLCategoriesScopeArgs>? _scopes;
        public InputList<Inputs.URLCategoriesScopeArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.URLCategoriesScopeArgs>());
            set => _scopes = value;
        }

        /// <summary>
        /// Super Category of the URL category. This field is required when creating custom URL categories.
        /// </summary>
        [Input("superCategory")]
        public Input<string>? SuperCategory { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("urlKeywordCounts")]
        public Input<Inputs.URLCategoriesUrlKeywordCountsArgs>? UrlKeywordCounts { get; set; }

        [Input("urls")]
        private InputList<string>? _urls;
        public InputList<string> Urls
        {
            get => _urls ?? (_urls = new InputList<string>());
            set => _urls = value;
        }

        [Input("urlsRetainingParentCategoryCount")]
        public Input<int>? UrlsRetainingParentCategoryCount { get; set; }

        public URLCategoriesArgs()
        {
        }
        public static new URLCategoriesArgs Empty => new URLCategoriesArgs();
    }

    public sealed class URLCategoriesState : global::Pulumi.ResourceArgs
    {
        [Input("categoryId")]
        public Input<string>? CategoryId { get; set; }

        /// <summary>
        /// Name of the URL category. This is only required for custom URL categories.
        /// </summary>
        [Input("configuredName")]
        public Input<string>? ConfiguredName { get; set; }

        [Input("customCategory")]
        public Input<bool>? CustomCategory { get; set; }

        [Input("customIpRangesCount")]
        public Input<int>? CustomIpRangesCount { get; set; }

        [Input("customUrlsCount")]
        public Input<int>? CustomUrlsCount { get; set; }

        [Input("dbCategorizedUrls")]
        private InputList<string>? _dbCategorizedUrls;
        public InputList<string> DbCategorizedUrls
        {
            get => _dbCategorizedUrls ?? (_dbCategorizedUrls = new InputList<string>());
            set => _dbCategorizedUrls = value;
        }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("editable")]
        public Input<bool>? Editable { get; set; }

        [Input("ipRanges")]
        private InputList<string>? _ipRanges;
        public InputList<string> IpRanges
        {
            get => _ipRanges ?? (_ipRanges = new InputList<string>());
            set => _ipRanges = value;
        }

        [Input("ipRangesRetainingParentCategories")]
        private InputList<string>? _ipRangesRetainingParentCategories;
        public InputList<string> IpRangesRetainingParentCategories
        {
            get => _ipRangesRetainingParentCategories ?? (_ipRangesRetainingParentCategories = new InputList<string>());
            set => _ipRangesRetainingParentCategories = value;
        }

        [Input("ipRangesRetainingParentCategoryCount")]
        public Input<int>? IpRangesRetainingParentCategoryCount { get; set; }

        [Input("keywords")]
        private InputList<string>? _keywords;
        public InputList<string> Keywords
        {
            get => _keywords ?? (_keywords = new InputList<string>());
            set => _keywords = value;
        }

        [Input("keywordsRetainingParentCategories")]
        private InputList<string>? _keywordsRetainingParentCategories;
        public InputList<string> KeywordsRetainingParentCategories
        {
            get => _keywordsRetainingParentCategories ?? (_keywordsRetainingParentCategories = new InputList<string>());
            set => _keywordsRetainingParentCategories = value;
        }

        [Input("scopes")]
        private InputList<Inputs.URLCategoriesScopeGetArgs>? _scopes;
        public InputList<Inputs.URLCategoriesScopeGetArgs> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<Inputs.URLCategoriesScopeGetArgs>());
            set => _scopes = value;
        }

        /// <summary>
        /// Super Category of the URL category. This field is required when creating custom URL categories.
        /// </summary>
        [Input("superCategory")]
        public Input<string>? SuperCategory { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("urlKeywordCounts")]
        public Input<Inputs.URLCategoriesUrlKeywordCountsGetArgs>? UrlKeywordCounts { get; set; }

        [Input("urls")]
        private InputList<string>? _urls;
        public InputList<string> Urls
        {
            get => _urls ?? (_urls = new InputList<string>());
            set => _urls = value;
        }

        [Input("urlsRetainingParentCategoryCount")]
        public Input<int>? UrlsRetainingParentCategoryCount { get; set; }

        public URLCategoriesState()
        {
        }
        public static new URLCategoriesState Empty => new URLCategoriesState();
    }
}
