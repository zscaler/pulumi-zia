// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// * [Official documentation](https://help.zscaler.com/zia/about-ftp-control)
    /// * [API documentation](https://help.zscaler.com/zia/ftp-control-policy#/ftpSettings-get)
    /// 
    /// The **zia_ftp_control_policy** resource allows you to update FTP control Policy. To learn more see [Configuring the FTP Control Policy](https://help.zscaler.com/zia/configuring-ftp-control-policy)
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zia_ftp_control_policy** can be imported by using `ftp_control` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/ftpControlPolicy:FtpControlPolicy this "ftp_control"
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/ftpControlPolicy:FtpControlPolicy")]
    public partial class FtpControlPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
        /// </summary>
        [Output("ftpEnabled")]
        public Output<bool?> FtpEnabled { get; private set; } = null!;

        /// <summary>
        /// Indicates whether to enable FTP over HTTP.
        /// </summary>
        [Output("ftpOverHttpEnabled")]
        public Output<bool?> FtpOverHttpEnabled { get; private set; } = null!;

        /// <summary>
        /// List of URL categories for which rule must be applied
        /// </summary>
        [Output("urlCategories")]
        public Output<ImmutableArray<string>> UrlCategories { get; private set; } = null!;

        /// <summary>
        /// Domains or URLs included for the FTP Control settings
        /// </summary>
        [Output("urls")]
        public Output<ImmutableArray<string>> Urls { get; private set; } = null!;


        /// <summary>
        /// Create a FtpControlPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FtpControlPolicy(string name, FtpControlPolicyArgs? args = null, CustomResourceOptions? options = null)
            : base("zia:index/ftpControlPolicy:FtpControlPolicy", name, args ?? new FtpControlPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FtpControlPolicy(string name, Input<string> id, FtpControlPolicyState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/ftpControlPolicy:FtpControlPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FtpControlPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FtpControlPolicy Get(string name, Input<string> id, FtpControlPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new FtpControlPolicy(name, id, state, options);
        }
    }

    public sealed class FtpControlPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
        /// </summary>
        [Input("ftpEnabled")]
        public Input<bool>? FtpEnabled { get; set; }

        /// <summary>
        /// Indicates whether to enable FTP over HTTP.
        /// </summary>
        [Input("ftpOverHttpEnabled")]
        public Input<bool>? FtpOverHttpEnabled { get; set; }

        [Input("urlCategories")]
        private InputList<string>? _urlCategories;

        /// <summary>
        /// List of URL categories for which rule must be applied
        /// </summary>
        public InputList<string> UrlCategories
        {
            get => _urlCategories ?? (_urlCategories = new InputList<string>());
            set => _urlCategories = value;
        }

        [Input("urls")]
        private InputList<string>? _urls;

        /// <summary>
        /// Domains or URLs included for the FTP Control settings
        /// </summary>
        public InputList<string> Urls
        {
            get => _urls ?? (_urls = new InputList<string>());
            set => _urls = value;
        }

        public FtpControlPolicyArgs()
        {
        }
        public static new FtpControlPolicyArgs Empty => new FtpControlPolicyArgs();
    }

    public sealed class FtpControlPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
        /// </summary>
        [Input("ftpEnabled")]
        public Input<bool>? FtpEnabled { get; set; }

        /// <summary>
        /// Indicates whether to enable FTP over HTTP.
        /// </summary>
        [Input("ftpOverHttpEnabled")]
        public Input<bool>? FtpOverHttpEnabled { get; set; }

        [Input("urlCategories")]
        private InputList<string>? _urlCategories;

        /// <summary>
        /// List of URL categories for which rule must be applied
        /// </summary>
        public InputList<string> UrlCategories
        {
            get => _urlCategories ?? (_urlCategories = new InputList<string>());
            set => _urlCategories = value;
        }

        [Input("urls")]
        private InputList<string>? _urls;

        /// <summary>
        /// Domains or URLs included for the FTP Control settings
        /// </summary>
        public InputList<string> Urls
        {
            get => _urls ?? (_urls = new InputList<string>());
            set => _urls = value;
        }

        public FtpControlPolicyState()
        {
        }
        public static new FtpControlPolicyState Empty => new FtpControlPolicyState();
    }
}
