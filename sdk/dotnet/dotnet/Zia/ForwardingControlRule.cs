// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// ## Import
    /// 
    /// Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.
    /// 
    /// Visit
    /// 
    /// **zia_forwarding_control_rule** can be imported by using `&lt;RULE ID&gt;` or `&lt;RULE NAME&gt;` as the import ID.
    /// 
    /// For example:
    /// 
    /// ```sh
    /// $ pulumi import zia:index/forwardingControlRule:ForwardingControlRule example &lt;rule_id&gt;
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import zia:index/forwardingControlRule:ForwardingControlRule example &lt;rule_name&gt;
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/forwardingControlRule:ForwardingControlRule")]
    public partial class ForwardingControlRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (list) - Application service groups on which this rule is applied
        /// </summary>
        [Output("appServiceGroups")]
        public Output<Outputs.ForwardingControlRuleAppServiceGroups?> AppServiceGroups { get; private set; } = null!;

        /// <summary>
        /// (list) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        /// </summary>
        [Output("departments")]
        public Output<Outputs.ForwardingControlRuleDepartments?> Departments { get; private set; } = null!;

        /// <summary>
        /// (string) - Additional information about the forwarding rule
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// ** - (list) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        /// </summary>
        [Output("destAddresses")]
        public Output<ImmutableArray<string>> DestAddresses { get; private set; } = null!;

        /// <summary>
        /// ** - (list) destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries. Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).
        /// </summary>
        [Output("destCountries")]
        public Output<ImmutableArray<string>> DestCountries { get; private set; } = null!;

        /// <summary>
        /// ** - (list) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        /// </summary>
        [Output("destIpCategories")]
        public Output<ImmutableArray<string>> DestIpCategories { get; private set; } = null!;

        /// <summary>
        /// ** - (list) Any number of destination IP address groups that you want to control with this rule.
        /// </summary>
        [Output("destIpGroups")]
        public Output<Outputs.ForwardingControlRuleDestIpGroups?> DestIpGroups { get; private set; } = null!;

        /// <summary>
        /// ** - (list) Destination IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        /// </summary>
        [Output("destIpv6Groups")]
        public Output<Outputs.ForwardingControlRuleDestIpv6Groups?> DestIpv6Groups { get; private set; } = null!;

        /// <summary>
        /// (list) - Name-ID pairs of the Zscaler Cloud Connector groups to which the forwarding rule applies
        /// </summary>
        [Output("ecGroups")]
        public Output<Outputs.ForwardingControlRuleEcGroups?> EcGroups { get; private set; } = null!;

        /// <summary>
        /// The type of traffic forwarding method selected from the available options
        /// </summary>
        [Output("forwardMethod")]
        public Output<string> ForwardMethod { get; private set; } = null!;

        /// <summary>
        /// (list) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        [Output("groups")]
        public Output<Outputs.ForwardingControlRuleGroups?> Groups { get; private set; } = null!;

        /// <summary>
        /// (list) Labels that are applicable to the rule.
        /// </summary>
        [Output("labels")]
        public Output<Outputs.ForwardingControlRuleLabels?> Labels { get; private set; } = null!;

        /// <summary>
        /// (Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        /// </summary>
        [Output("locationGroups")]
        public Output<Outputs.ForwardingControlRuleLocationGroups?> LocationGroups { get; private set; } = null!;

        /// <summary>
        /// (Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        [Output("locations")]
        public Output<Outputs.ForwardingControlRuleLocations?> Locations { get; private set; } = null!;

        /// <summary>
        /// (string) The configured name of the entity
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (list) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        /// </summary>
        [Output("nwApplicationGroups")]
        public Output<Outputs.ForwardingControlRuleNwApplicationGroups?> NwApplicationGroups { get; private set; } = null!;

        /// <summary>
        /// (list) Any number of predefined or custom network service groups to which the rule applies.
        /// </summary>
        [Output("nwServiceGroups")]
        public Output<Outputs.ForwardingControlRuleNwServiceGroups?> NwServiceGroups { get; private set; } = null!;

        /// <summary>
        /// (list) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        /// </summary>
        [Output("nwServices")]
        public Output<Outputs.ForwardingControlRuleNwServices?> NwServices { get; private set; } = null!;

        /// <summary>
        /// (int) - The order of execution for the forwarding rule order.
        /// </summary>
        [Output("order")]
        public Output<int> Order { get; private set; } = null!;

        /// <summary>
        /// (set) The proxy gateway for which the rule is applicable. This field is applicable only for the `PROXYCHAIN` forwarding method.
        /// </summary>
        [Output("proxyGateway")]
        public Output<Outputs.ForwardingControlRuleProxyGateway> ProxyGateway { get; private set; } = null!;

        /// <summary>
        /// Admin rank assigned to the forwarding rule
        /// </summary>
        [Output("rank")]
        public Output<int?> Rank { get; private set; } = null!;

        /// <summary>
        /// ** - (list) List of destination domain categories to which the rule applies.
        /// </summary>
        [Output("resCategories")]
        public Output<ImmutableArray<string>> ResCategories { get; private set; } = null!;

        /// <summary>
        /// A unique identifier assigned to the forwarding rule
        /// </summary>
        [Output("ruleId")]
        public Output<int> RuleId { get; private set; } = null!;

        /// <summary>
        /// (list) Any number of source IP address groups that you want to control with this rule.
        /// </summary>
        [Output("srcIpGroups")]
        public Output<Outputs.ForwardingControlRuleSrcIpGroups?> SrcIpGroups { get; private set; } = null!;

        /// <summary>
        /// (Optional) You can enter individual IP addresses, subnets, or address ranges.
        /// </summary>
        [Output("srcIps")]
        public Output<ImmutableArray<string>> SrcIps { get; private set; } = null!;

        /// <summary>
        /// (list) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        /// </summary>
        [Output("srcIpv6Groups")]
        public Output<Outputs.ForwardingControlRuleSrcIpv6Groups?> SrcIpv6Groups { get; private set; } = null!;

        /// <summary>
        /// (string) - Indicates whether the forwarding rule is enabled or disabled. Supported values are: `ENABLED` and `DISABLED`.
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// The rule type selected from the available options
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// (list) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        /// </summary>
        [Output("users")]
        public Output<Outputs.ForwardingControlRuleUsers?> Users { get; private set; } = null!;

        /// <summary>
        /// (set) The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ZPA` Gateway forwarding method.
        /// </summary>
        [Output("zpaAppSegments")]
        public Output<ImmutableArray<Outputs.ForwardingControlRuleZpaAppSegment>> ZpaAppSegments { get; private set; } = null!;

        /// <summary>
        /// (set) List of ZPA Application Segment Groups for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        /// </summary>
        [Output("zpaApplicationSegmentGroups")]
        public Output<Outputs.ForwardingControlRuleZpaApplicationSegmentGroups?> ZpaApplicationSegmentGroups { get; private set; } = null!;

        /// <summary>
        /// (set) List of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        /// </summary>
        [Output("zpaApplicationSegments")]
        public Output<Outputs.ForwardingControlRuleZpaApplicationSegments?> ZpaApplicationSegments { get; private set; } = null!;

        /// <summary>
        /// (set) The ZPA Gateway for which this rule is applicable. This field is applicable only for the `ZPA` forwarding method.
        /// </summary>
        [Output("zpaGateway")]
        public Output<Outputs.ForwardingControlRuleZpaGateway> ZpaGateway { get; private set; } = null!;


        /// <summary>
        /// Create a ForwardingControlRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ForwardingControlRule(string name, ForwardingControlRuleArgs args, CustomResourceOptions? options = null)
            : base("zia:index/forwardingControlRule:ForwardingControlRule", name, args ?? new ForwardingControlRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ForwardingControlRule(string name, Input<string> id, ForwardingControlRuleState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/forwardingControlRule:ForwardingControlRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ForwardingControlRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ForwardingControlRule Get(string name, Input<string> id, ForwardingControlRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new ForwardingControlRule(name, id, state, options);
        }
    }

    public sealed class ForwardingControlRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (list) - Application service groups on which this rule is applied
        /// </summary>
        [Input("appServiceGroups")]
        public Input<Inputs.ForwardingControlRuleAppServiceGroupsArgs>? AppServiceGroups { get; set; }

        /// <summary>
        /// (list) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        /// </summary>
        [Input("departments")]
        public Input<Inputs.ForwardingControlRuleDepartmentsArgs>? Departments { get; set; }

        /// <summary>
        /// (string) - Additional information about the forwarding rule
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destAddresses")]
        private InputList<string>? _destAddresses;

        /// <summary>
        /// ** - (list) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        /// </summary>
        public InputList<string> DestAddresses
        {
            get => _destAddresses ?? (_destAddresses = new InputList<string>());
            set => _destAddresses = value;
        }

        [Input("destCountries")]
        private InputList<string>? _destCountries;

        /// <summary>
        /// ** - (list) destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries. Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).
        /// </summary>
        public InputList<string> DestCountries
        {
            get => _destCountries ?? (_destCountries = new InputList<string>());
            set => _destCountries = value;
        }

        [Input("destIpCategories")]
        private InputList<string>? _destIpCategories;

        /// <summary>
        /// ** - (list) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        /// </summary>
        public InputList<string> DestIpCategories
        {
            get => _destIpCategories ?? (_destIpCategories = new InputList<string>());
            set => _destIpCategories = value;
        }

        /// <summary>
        /// ** - (list) Any number of destination IP address groups that you want to control with this rule.
        /// </summary>
        [Input("destIpGroups")]
        public Input<Inputs.ForwardingControlRuleDestIpGroupsArgs>? DestIpGroups { get; set; }

        /// <summary>
        /// ** - (list) Destination IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        /// </summary>
        [Input("destIpv6Groups")]
        public Input<Inputs.ForwardingControlRuleDestIpv6GroupsArgs>? DestIpv6Groups { get; set; }

        /// <summary>
        /// (list) - Name-ID pairs of the Zscaler Cloud Connector groups to which the forwarding rule applies
        /// </summary>
        [Input("ecGroups")]
        public Input<Inputs.ForwardingControlRuleEcGroupsArgs>? EcGroups { get; set; }

        /// <summary>
        /// The type of traffic forwarding method selected from the available options
        /// </summary>
        [Input("forwardMethod", required: true)]
        public Input<string> ForwardMethod { get; set; } = null!;

        /// <summary>
        /// (list) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        [Input("groups")]
        public Input<Inputs.ForwardingControlRuleGroupsArgs>? Groups { get; set; }

        /// <summary>
        /// (list) Labels that are applicable to the rule.
        /// </summary>
        [Input("labels")]
        public Input<Inputs.ForwardingControlRuleLabelsArgs>? Labels { get; set; }

        /// <summary>
        /// (Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        /// </summary>
        [Input("locationGroups")]
        public Input<Inputs.ForwardingControlRuleLocationGroupsArgs>? LocationGroups { get; set; }

        /// <summary>
        /// (Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        [Input("locations")]
        public Input<Inputs.ForwardingControlRuleLocationsArgs>? Locations { get; set; }

        /// <summary>
        /// (string) The configured name of the entity
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (list) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        /// </summary>
        [Input("nwApplicationGroups")]
        public Input<Inputs.ForwardingControlRuleNwApplicationGroupsArgs>? NwApplicationGroups { get; set; }

        /// <summary>
        /// (list) Any number of predefined or custom network service groups to which the rule applies.
        /// </summary>
        [Input("nwServiceGroups")]
        public Input<Inputs.ForwardingControlRuleNwServiceGroupsArgs>? NwServiceGroups { get; set; }

        /// <summary>
        /// (list) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        /// </summary>
        [Input("nwServices")]
        public Input<Inputs.ForwardingControlRuleNwServicesArgs>? NwServices { get; set; }

        /// <summary>
        /// (int) - The order of execution for the forwarding rule order.
        /// </summary>
        [Input("order", required: true)]
        public Input<int> Order { get; set; } = null!;

        /// <summary>
        /// (set) The proxy gateway for which the rule is applicable. This field is applicable only for the `PROXYCHAIN` forwarding method.
        /// </summary>
        [Input("proxyGateway")]
        public Input<Inputs.ForwardingControlRuleProxyGatewayArgs>? ProxyGateway { get; set; }

        /// <summary>
        /// Admin rank assigned to the forwarding rule
        /// </summary>
        [Input("rank")]
        public Input<int>? Rank { get; set; }

        [Input("resCategories")]
        private InputList<string>? _resCategories;

        /// <summary>
        /// ** - (list) List of destination domain categories to which the rule applies.
        /// </summary>
        public InputList<string> ResCategories
        {
            get => _resCategories ?? (_resCategories = new InputList<string>());
            set => _resCategories = value;
        }

        /// <summary>
        /// (list) Any number of source IP address groups that you want to control with this rule.
        /// </summary>
        [Input("srcIpGroups")]
        public Input<Inputs.ForwardingControlRuleSrcIpGroupsArgs>? SrcIpGroups { get; set; }

        [Input("srcIps")]
        private InputList<string>? _srcIps;

        /// <summary>
        /// (Optional) You can enter individual IP addresses, subnets, or address ranges.
        /// </summary>
        public InputList<string> SrcIps
        {
            get => _srcIps ?? (_srcIps = new InputList<string>());
            set => _srcIps = value;
        }

        /// <summary>
        /// (list) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        /// </summary>
        [Input("srcIpv6Groups")]
        public Input<Inputs.ForwardingControlRuleSrcIpv6GroupsArgs>? SrcIpv6Groups { get; set; }

        /// <summary>
        /// (string) - Indicates whether the forwarding rule is enabled or disabled. Supported values are: `ENABLED` and `DISABLED`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The rule type selected from the available options
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// (list) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        /// </summary>
        [Input("users")]
        public Input<Inputs.ForwardingControlRuleUsersArgs>? Users { get; set; }

        [Input("zpaAppSegments")]
        private InputList<Inputs.ForwardingControlRuleZpaAppSegmentArgs>? _zpaAppSegments;

        /// <summary>
        /// (set) The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ZPA` Gateway forwarding method.
        /// </summary>
        public InputList<Inputs.ForwardingControlRuleZpaAppSegmentArgs> ZpaAppSegments
        {
            get => _zpaAppSegments ?? (_zpaAppSegments = new InputList<Inputs.ForwardingControlRuleZpaAppSegmentArgs>());
            set => _zpaAppSegments = value;
        }

        /// <summary>
        /// (set) List of ZPA Application Segment Groups for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        /// </summary>
        [Input("zpaApplicationSegmentGroups")]
        public Input<Inputs.ForwardingControlRuleZpaApplicationSegmentGroupsArgs>? ZpaApplicationSegmentGroups { get; set; }

        /// <summary>
        /// (set) List of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        /// </summary>
        [Input("zpaApplicationSegments")]
        public Input<Inputs.ForwardingControlRuleZpaApplicationSegmentsArgs>? ZpaApplicationSegments { get; set; }

        /// <summary>
        /// (set) The ZPA Gateway for which this rule is applicable. This field is applicable only for the `ZPA` forwarding method.
        /// </summary>
        [Input("zpaGateway")]
        public Input<Inputs.ForwardingControlRuleZpaGatewayArgs>? ZpaGateway { get; set; }

        public ForwardingControlRuleArgs()
        {
        }
        public static new ForwardingControlRuleArgs Empty => new ForwardingControlRuleArgs();
    }

    public sealed class ForwardingControlRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// (list) - Application service groups on which this rule is applied
        /// </summary>
        [Input("appServiceGroups")]
        public Input<Inputs.ForwardingControlRuleAppServiceGroupsGetArgs>? AppServiceGroups { get; set; }

        /// <summary>
        /// (list) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        /// </summary>
        [Input("departments")]
        public Input<Inputs.ForwardingControlRuleDepartmentsGetArgs>? Departments { get; set; }

        /// <summary>
        /// (string) - Additional information about the forwarding rule
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destAddresses")]
        private InputList<string>? _destAddresses;

        /// <summary>
        /// ** - (list) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        /// </summary>
        public InputList<string> DestAddresses
        {
            get => _destAddresses ?? (_destAddresses = new InputList<string>());
            set => _destAddresses = value;
        }

        [Input("destCountries")]
        private InputList<string>? _destCountries;

        /// <summary>
        /// ** - (list) destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries. Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).
        /// </summary>
        public InputList<string> DestCountries
        {
            get => _destCountries ?? (_destCountries = new InputList<string>());
            set => _destCountries = value;
        }

        [Input("destIpCategories")]
        private InputList<string>? _destIpCategories;

        /// <summary>
        /// ** - (list) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        /// </summary>
        public InputList<string> DestIpCategories
        {
            get => _destIpCategories ?? (_destIpCategories = new InputList<string>());
            set => _destIpCategories = value;
        }

        /// <summary>
        /// ** - (list) Any number of destination IP address groups that you want to control with this rule.
        /// </summary>
        [Input("destIpGroups")]
        public Input<Inputs.ForwardingControlRuleDestIpGroupsGetArgs>? DestIpGroups { get; set; }

        /// <summary>
        /// ** - (list) Destination IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        /// </summary>
        [Input("destIpv6Groups")]
        public Input<Inputs.ForwardingControlRuleDestIpv6GroupsGetArgs>? DestIpv6Groups { get; set; }

        /// <summary>
        /// (list) - Name-ID pairs of the Zscaler Cloud Connector groups to which the forwarding rule applies
        /// </summary>
        [Input("ecGroups")]
        public Input<Inputs.ForwardingControlRuleEcGroupsGetArgs>? EcGroups { get; set; }

        /// <summary>
        /// The type of traffic forwarding method selected from the available options
        /// </summary>
        [Input("forwardMethod")]
        public Input<string>? ForwardMethod { get; set; }

        /// <summary>
        /// (list) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        [Input("groups")]
        public Input<Inputs.ForwardingControlRuleGroupsGetArgs>? Groups { get; set; }

        /// <summary>
        /// (list) Labels that are applicable to the rule.
        /// </summary>
        [Input("labels")]
        public Input<Inputs.ForwardingControlRuleLabelsGetArgs>? Labels { get; set; }

        /// <summary>
        /// (Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        /// </summary>
        [Input("locationGroups")]
        public Input<Inputs.ForwardingControlRuleLocationGroupsGetArgs>? LocationGroups { get; set; }

        /// <summary>
        /// (Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        [Input("locations")]
        public Input<Inputs.ForwardingControlRuleLocationsGetArgs>? Locations { get; set; }

        /// <summary>
        /// (string) The configured name of the entity
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (list) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        /// </summary>
        [Input("nwApplicationGroups")]
        public Input<Inputs.ForwardingControlRuleNwApplicationGroupsGetArgs>? NwApplicationGroups { get; set; }

        /// <summary>
        /// (list) Any number of predefined or custom network service groups to which the rule applies.
        /// </summary>
        [Input("nwServiceGroups")]
        public Input<Inputs.ForwardingControlRuleNwServiceGroupsGetArgs>? NwServiceGroups { get; set; }

        /// <summary>
        /// (list) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        /// </summary>
        [Input("nwServices")]
        public Input<Inputs.ForwardingControlRuleNwServicesGetArgs>? NwServices { get; set; }

        /// <summary>
        /// (int) - The order of execution for the forwarding rule order.
        /// </summary>
        [Input("order")]
        public Input<int>? Order { get; set; }

        /// <summary>
        /// (set) The proxy gateway for which the rule is applicable. This field is applicable only for the `PROXYCHAIN` forwarding method.
        /// </summary>
        [Input("proxyGateway")]
        public Input<Inputs.ForwardingControlRuleProxyGatewayGetArgs>? ProxyGateway { get; set; }

        /// <summary>
        /// Admin rank assigned to the forwarding rule
        /// </summary>
        [Input("rank")]
        public Input<int>? Rank { get; set; }

        [Input("resCategories")]
        private InputList<string>? _resCategories;

        /// <summary>
        /// ** - (list) List of destination domain categories to which the rule applies.
        /// </summary>
        public InputList<string> ResCategories
        {
            get => _resCategories ?? (_resCategories = new InputList<string>());
            set => _resCategories = value;
        }

        /// <summary>
        /// A unique identifier assigned to the forwarding rule
        /// </summary>
        [Input("ruleId")]
        public Input<int>? RuleId { get; set; }

        /// <summary>
        /// (list) Any number of source IP address groups that you want to control with this rule.
        /// </summary>
        [Input("srcIpGroups")]
        public Input<Inputs.ForwardingControlRuleSrcIpGroupsGetArgs>? SrcIpGroups { get; set; }

        [Input("srcIps")]
        private InputList<string>? _srcIps;

        /// <summary>
        /// (Optional) You can enter individual IP addresses, subnets, or address ranges.
        /// </summary>
        public InputList<string> SrcIps
        {
            get => _srcIps ?? (_srcIps = new InputList<string>());
            set => _srcIps = value;
        }

        /// <summary>
        /// (list) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        /// </summary>
        [Input("srcIpv6Groups")]
        public Input<Inputs.ForwardingControlRuleSrcIpv6GroupsGetArgs>? SrcIpv6Groups { get; set; }

        /// <summary>
        /// (string) - Indicates whether the forwarding rule is enabled or disabled. Supported values are: `ENABLED` and `DISABLED`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The rule type selected from the available options
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// (list) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        /// </summary>
        [Input("users")]
        public Input<Inputs.ForwardingControlRuleUsersGetArgs>? Users { get; set; }

        [Input("zpaAppSegments")]
        private InputList<Inputs.ForwardingControlRuleZpaAppSegmentGetArgs>? _zpaAppSegments;

        /// <summary>
        /// (set) The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ZPA` Gateway forwarding method.
        /// </summary>
        public InputList<Inputs.ForwardingControlRuleZpaAppSegmentGetArgs> ZpaAppSegments
        {
            get => _zpaAppSegments ?? (_zpaAppSegments = new InputList<Inputs.ForwardingControlRuleZpaAppSegmentGetArgs>());
            set => _zpaAppSegments = value;
        }

        /// <summary>
        /// (set) List of ZPA Application Segment Groups for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        /// </summary>
        [Input("zpaApplicationSegmentGroups")]
        public Input<Inputs.ForwardingControlRuleZpaApplicationSegmentGroupsGetArgs>? ZpaApplicationSegmentGroups { get; set; }

        /// <summary>
        /// (set) List of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        /// </summary>
        [Input("zpaApplicationSegments")]
        public Input<Inputs.ForwardingControlRuleZpaApplicationSegmentsGetArgs>? ZpaApplicationSegments { get; set; }

        /// <summary>
        /// (set) The ZPA Gateway for which this rule is applicable. This field is applicable only for the `ZPA` forwarding method.
        /// </summary>
        [Input("zpaGateway")]
        public Input<Inputs.ForwardingControlRuleZpaGatewayGetArgs>? ZpaGateway { get; set; }

        public ForwardingControlRuleState()
        {
        }
        public static new ForwardingControlRuleState Empty => new ForwardingControlRuleState();
    }
}
