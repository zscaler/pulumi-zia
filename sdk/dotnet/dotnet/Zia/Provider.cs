// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// The provider type for the zia package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [ZiaResourceType("pulumi:providers:zia")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        [Output("apiKey")]
        public Output<string?> ApiKey { get; private set; } = null!;

        /// <summary>
        /// zpa client id
        /// </summary>
        [Output("clientId")]
        public Output<string?> ClientId { get; private set; } = null!;

        /// <summary>
        /// zpa client secret
        /// </summary>
        [Output("clientSecret")]
        public Output<string?> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
        /// </summary>
        [Output("httpProxy")]
        public Output<string?> HttpProxy { get; private set; } = null!;

        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// zpa private key
        /// </summary>
        [Output("privateKey")]
        public Output<string?> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// Zscaler Sandbox Cloud
        /// </summary>
        [Output("sandboxCloud")]
        public Output<string?> SandboxCloud { get; private set; } = null!;

        /// <summary>
        /// Zscaler Sandbox Token
        /// </summary>
        [Output("sandboxToken")]
        public Output<string?> SandboxToken { get; private set; } = null!;

        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;

        /// <summary>
        /// Zscaler Vanity Domain
        /// </summary>
        [Output("vanityDomain")]
        public Output<string?> VanityDomain { get; private set; } = null!;

        [Output("ziaCloud")]
        public Output<string?> ZiaCloud { get; private set; } = null!;

        /// <summary>
        /// Zscaler Cloud Name
        /// </summary>
        [Output("zscalerCloud")]
        public Output<string?> ZscalerCloud { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("zia", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
                AdditionalSecretOutputs =
                {
                    "apiKey",
                    "clientSecret",
                    "password",
                    "privateKey",
                    "sandboxCloud",
                    "sandboxToken",
                    "vanityDomain",
                    "zscalerCloud",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }

        /// <summary>
        /// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        /// </summary>
        public global::Pulumi.Output<ProviderTerraformConfigResult> TerraformConfig()
            => global::Pulumi.Deployment.Instance.Call<ProviderTerraformConfigResult>("pulumi:providers:zia/terraformConfig", CallArgs.Empty, this);
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiKey")]
        private Input<string>? _apiKey;
        public Input<string>? ApiKey
        {
            get => _apiKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// zpa client id
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        [Input("clientSecret")]
        private Input<string>? _clientSecret;

        /// <summary>
        /// zpa client secret
        /// </summary>
        public Input<string>? ClientSecret
        {
            get => _clientSecret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientSecret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Alternate HTTP proxy of scheme://hostname or scheme://hostname:port format
        /// </summary>
        [Input("httpProxy")]
        public Input<string>? HttpProxy { get; set; }

        /// <summary>
        /// maximum number of retries to attempt before erroring out.
        /// </summary>
        [Input("maxRetries", json: true)]
        public Input<int>? MaxRetries { get; set; }

        /// <summary>
        /// Number of concurrent requests to make within a resource where bulk operations are not possible. Take note of
        /// https://help.zscaler.com/oneapi/understanding-rate-limiting.
        /// </summary>
        [Input("parallelism", json: true)]
        public Input<int>? Parallelism { get; set; }

        [Input("password")]
        private Input<string>? _password;
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// zpa private key
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Timeout for single request (in seconds) which is made to Zscaler, the default is `0` (means no limit is set). The
        /// maximum value can be `300`.
        /// </summary>
        [Input("requestTimeout", json: true)]
        public Input<int>? RequestTimeout { get; set; }

        [Input("sandboxCloud")]
        private Input<string>? _sandboxCloud;

        /// <summary>
        /// Zscaler Sandbox Cloud
        /// </summary>
        public Input<string>? SandboxCloud
        {
            get => _sandboxCloud;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sandboxCloud = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sandboxToken")]
        private Input<string>? _sandboxToken;

        /// <summary>
        /// Zscaler Sandbox Token
        /// </summary>
        public Input<string>? SandboxToken
        {
            get => _sandboxToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sandboxToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("useLegacyClient", json: true)]
        public Input<bool>? UseLegacyClient { get; set; }

        [Input("username")]
        public Input<string>? Username { get; set; }

        [Input("vanityDomain")]
        private Input<string>? _vanityDomain;

        /// <summary>
        /// Zscaler Vanity Domain
        /// </summary>
        public Input<string>? VanityDomain
        {
            get => _vanityDomain;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _vanityDomain = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("ziaCloud")]
        public Input<string>? ZiaCloud { get; set; }

        [Input("zscalerCloud")]
        private Input<string>? _zscalerCloud;

        /// <summary>
        /// Zscaler Cloud Name
        /// </summary>
        public Input<string>? ZscalerCloud
        {
            get => _zscalerCloud;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _zscalerCloud = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ProviderArgs()
        {
            ApiKey = Utilities.GetEnv("ZIA_API_KEY");
            ClientId = Utilities.GetEnv("ZSCALER_CLIENT_ID");
            ClientSecret = Utilities.GetEnv("ZSCALER_CLIENT_SECRET");
            Password = Utilities.GetEnv("ZIA_PASSWORD");
            PrivateKey = Utilities.GetEnv("ZSCALER_PRIVATE_KEY");
            SandboxCloud = Utilities.GetEnv("ZSCALER_SANDBOX_CLOUD");
            SandboxToken = Utilities.GetEnv("ZSCALER_SANDBOX_TOKEN");
            UseLegacyClient = Utilities.GetEnvBoolean("ZSCALER_USE_LEGACY_CLIENT");
            Username = Utilities.GetEnv("ZIA_USERNAME");
            VanityDomain = Utilities.GetEnv("ZSCALER_VANITY_DOMAIN");
            ZiaCloud = Utilities.GetEnv("ZIA_CLOUD");
            ZscalerCloud = Utilities.GetEnv("ZSCALER_CLOUD");
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }

    /// <summary>
    /// The results of the <see cref="Provider.TerraformConfig"/> method.
    /// </summary>
    [OutputType]
    public sealed class ProviderTerraformConfigResult
    {
        public readonly ImmutableDictionary<string, object> Result;

        [OutputConstructor]
        private ProviderTerraformConfigResult(ImmutableDictionary<string, object> result)
        {
            Result = result;
        }
    }
}
