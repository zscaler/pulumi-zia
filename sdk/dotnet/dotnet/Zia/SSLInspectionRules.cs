// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Action - DECRYPT
    /// 
    /// ### Action - DO_NOT_DECRYPT - Bypass Rule (False)
    /// 
    /// ### Action - DO_NOT_DECRYPT - Bypass Rule (True)
    /// 
    /// ### Action - BLOCK
    /// </summary>
    [ZiaResourceType("zia:index/sSLInspectionRules:SSLInspectionRules")]
    public partial class SSLInspectionRules : global::Pulumi.CustomResource
    {
        /// <summary>
        /// (Block List) - Action taken when the traffic matches policy
        /// </summary>
        [Output("actions")]
        public Output<ImmutableArray<Outputs.SSLInspectionRulesAction>> Actions { get; private set; } = null!;

        /// <summary>
        /// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        /// </summary>
        [Output("cloudApplications")]
        public Output<ImmutableArray<string>> CloudApplications { get; private set; } = null!;

        /// <summary>
        /// (Block List) - ID pairs of departments for which the rule is applied.
        /// </summary>
        [Output("departments")]
        public Output<Outputs.SSLInspectionRulesDepartments?> Departments { get; private set; } = null!;

        /// <summary>
        /// (String) -  Enter additional notes or information. The description cannot exceed 10,240 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// (Block List) - ID pairs of destination IP address groups for which the rule is applied.
        /// </summary>
        [Output("destIpGroups")]
        public Output<Outputs.SSLInspectionRulesDestIpGroups?> DestIpGroups { get; private set; } = null!;

        /// <summary>
        /// (Block List) - ID pairs of device groups for which the rule is applied.
        /// </summary>
        [Output("deviceGroups")]
        public Output<Outputs.SSLInspectionRulesDeviceGroups?> DeviceGroups { get; private set; } = null!;

        /// <summary>
        /// (Set of String)  - List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
        /// </summary>
        [Output("deviceTrustLevels")]
        public Output<ImmutableArray<string>> DeviceTrustLevels { get; private set; } = null!;

        /// <summary>
        /// (Block List) - ID pairs of devices for which the rule is applied
        /// </summary>
        [Output("devices")]
        public Output<Outputs.SSLInspectionRulesDevices?> Devices { get; private set; } = null!;

        /// <summary>
        /// (Block List) - ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
        /// </summary>
        [Output("groups")]
        public Output<Outputs.SSLInspectionRulesGroups?> Groups { get; private set; } = null!;

        /// <summary>
        /// (Block List) - ID pairs of labels associated with the rule.
        /// </summary>
        [Output("labels")]
        public Output<Outputs.SSLInspectionRulesLabels?> Labels { get; private set; } = null!;

        /// <summary>
        /// (Block List) - ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
        /// </summary>
        [Output("locationGroups")]
        public Output<Outputs.SSLInspectionRulesLocationGroups?> LocationGroups { get; private set; } = null!;

        /// <summary>
        /// (Block List) - ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
        /// </summary>
        [Output("locations")]
        public Output<Outputs.SSLInspectionRulesLocations?> Locations { get; private set; } = null!;

        /// <summary>
        /// The name of the SSL Inspection rule
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (String) -  Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        /// </summary>
        [Output("order")]
        public Output<int> Order { get; private set; } = null!;

        /// <summary>
        /// (Set of String) -  Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
        /// </summary>
        [Output("platforms")]
        public Output<ImmutableArray<string>> Platforms { get; private set; } = null!;

        /// <summary>
        /// (Block List) - When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
        /// </summary>
        [Output("proxyGateways")]
        public Output<Outputs.SSLInspectionRulesProxyGateways?> ProxyGateways { get; private set; } = null!;

        /// <summary>
        /// (Integer) - The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
        /// </summary>
        [Output("rank")]
        public Output<int?> Rank { get; private set; } = null!;

        /// <summary>
        /// (Boolean) - Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
        /// </summary>
        [Output("roadWarriorForKerberos")]
        public Output<bool?> RoadWarriorForKerberos { get; private set; } = null!;

        [Output("ruleId")]
        public Output<int> RuleId { get; private set; } = null!;

        /// <summary>
        /// (Block List) - ID pairs of source IP address groups for which the rule is applied.
        /// </summary>
        [Output("sourceIpGroups")]
        public Output<Outputs.SSLInspectionRulesSourceIpGroups?> SourceIpGroups { get; private set; } = null!;

        /// <summary>
        /// (String) - The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// (Block List) - The time intervals during which the rule applies
        /// </summary>
        [Output("timeWindows")]
        public Output<Outputs.SSLInspectionRulesTimeWindows?> TimeWindows { get; private set; } = null!;

        /// <summary>
        /// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied.
        /// </summary>
        [Output("urlCategories")]
        public Output<ImmutableArray<string>> UrlCategories { get; private set; } = null!;

        /// <summary>
        /// (Set of String) -  A list of user agent types the rule applies to.
        /// </summary>
        [Output("userAgentTypes")]
        public Output<ImmutableArray<string>> UserAgentTypes { get; private set; } = null!;

        /// <summary>
        /// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
        /// </summary>
        [Output("users")]
        public Output<Outputs.SSLInspectionRulesUsers?> Users { get; private set; } = null!;

        /// <summary>
        /// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
        /// </summary>
        [Output("workloadGroups")]
        public Output<ImmutableArray<Outputs.SSLInspectionRulesWorkloadGroup>> WorkloadGroups { get; private set; } = null!;

        /// <summary>
        /// (Block List) - The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
        /// </summary>
        [Output("zpaAppSegments")]
        public Output<ImmutableArray<Outputs.SSLInspectionRulesZpaAppSegment>> ZpaAppSegments { get; private set; } = null!;


        /// <summary>
        /// Create a SSLInspectionRules resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SSLInspectionRules(string name, SSLInspectionRulesArgs args, CustomResourceOptions? options = null)
            : base("zia:index/sSLInspectionRules:SSLInspectionRules", name, args ?? new SSLInspectionRulesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SSLInspectionRules(string name, Input<string> id, SSLInspectionRulesState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/sSLInspectionRules:SSLInspectionRules", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SSLInspectionRules resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SSLInspectionRules Get(string name, Input<string> id, SSLInspectionRulesState? state = null, CustomResourceOptions? options = null)
        {
            return new SSLInspectionRules(name, id, state, options);
        }
    }

    public sealed class SSLInspectionRulesArgs : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.SSLInspectionRulesActionArgs>? _actions;

        /// <summary>
        /// (Block List) - Action taken when the traffic matches policy
        /// </summary>
        public InputList<Inputs.SSLInspectionRulesActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.SSLInspectionRulesActionArgs>());
            set => _actions = value;
        }

        [Input("cloudApplications")]
        private InputList<string>? _cloudApplications;

        /// <summary>
        /// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        /// </summary>
        public InputList<string> CloudApplications
        {
            get => _cloudApplications ?? (_cloudApplications = new InputList<string>());
            set => _cloudApplications = value;
        }

        /// <summary>
        /// (Block List) - ID pairs of departments for which the rule is applied.
        /// </summary>
        [Input("departments")]
        public Input<Inputs.SSLInspectionRulesDepartmentsArgs>? Departments { get; set; }

        /// <summary>
        /// (String) -  Enter additional notes or information. The description cannot exceed 10,240 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Block List) - ID pairs of destination IP address groups for which the rule is applied.
        /// </summary>
        [Input("destIpGroups")]
        public Input<Inputs.SSLInspectionRulesDestIpGroupsArgs>? DestIpGroups { get; set; }

        /// <summary>
        /// (Block List) - ID pairs of device groups for which the rule is applied.
        /// </summary>
        [Input("deviceGroups")]
        public Input<Inputs.SSLInspectionRulesDeviceGroupsArgs>? DeviceGroups { get; set; }

        [Input("deviceTrustLevels")]
        private InputList<string>? _deviceTrustLevels;

        /// <summary>
        /// (Set of String)  - List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
        /// </summary>
        public InputList<string> DeviceTrustLevels
        {
            get => _deviceTrustLevels ?? (_deviceTrustLevels = new InputList<string>());
            set => _deviceTrustLevels = value;
        }

        /// <summary>
        /// (Block List) - ID pairs of devices for which the rule is applied
        /// </summary>
        [Input("devices")]
        public Input<Inputs.SSLInspectionRulesDevicesArgs>? Devices { get; set; }

        /// <summary>
        /// (Block List) - ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
        /// </summary>
        [Input("groups")]
        public Input<Inputs.SSLInspectionRulesGroupsArgs>? Groups { get; set; }

        /// <summary>
        /// (Block List) - ID pairs of labels associated with the rule.
        /// </summary>
        [Input("labels")]
        public Input<Inputs.SSLInspectionRulesLabelsArgs>? Labels { get; set; }

        /// <summary>
        /// (Block List) - ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
        /// </summary>
        [Input("locationGroups")]
        public Input<Inputs.SSLInspectionRulesLocationGroupsArgs>? LocationGroups { get; set; }

        /// <summary>
        /// (Block List) - ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
        /// </summary>
        [Input("locations")]
        public Input<Inputs.SSLInspectionRulesLocationsArgs>? Locations { get; set; }

        /// <summary>
        /// The name of the SSL Inspection rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (String) -  Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        /// </summary>
        [Input("order", required: true)]
        public Input<int> Order { get; set; } = null!;

        [Input("platforms")]
        private InputList<string>? _platforms;

        /// <summary>
        /// (Set of String) -  Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
        /// </summary>
        public InputList<string> Platforms
        {
            get => _platforms ?? (_platforms = new InputList<string>());
            set => _platforms = value;
        }

        /// <summary>
        /// (Block List) - When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
        /// </summary>
        [Input("proxyGateways")]
        public Input<Inputs.SSLInspectionRulesProxyGatewaysArgs>? ProxyGateways { get; set; }

        /// <summary>
        /// (Integer) - The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
        /// </summary>
        [Input("rank")]
        public Input<int>? Rank { get; set; }

        /// <summary>
        /// (Boolean) - Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
        /// </summary>
        [Input("roadWarriorForKerberos")]
        public Input<bool>? RoadWarriorForKerberos { get; set; }

        /// <summary>
        /// (Block List) - ID pairs of source IP address groups for which the rule is applied.
        /// </summary>
        [Input("sourceIpGroups")]
        public Input<Inputs.SSLInspectionRulesSourceIpGroupsArgs>? SourceIpGroups { get; set; }

        /// <summary>
        /// (String) - The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Block List) - The time intervals during which the rule applies
        /// </summary>
        [Input("timeWindows")]
        public Input<Inputs.SSLInspectionRulesTimeWindowsArgs>? TimeWindows { get; set; }

        [Input("urlCategories")]
        private InputList<string>? _urlCategories;

        /// <summary>
        /// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied.
        /// </summary>
        public InputList<string> UrlCategories
        {
            get => _urlCategories ?? (_urlCategories = new InputList<string>());
            set => _urlCategories = value;
        }

        [Input("userAgentTypes")]
        private InputList<string>? _userAgentTypes;

        /// <summary>
        /// (Set of String) -  A list of user agent types the rule applies to.
        /// </summary>
        public InputList<string> UserAgentTypes
        {
            get => _userAgentTypes ?? (_userAgentTypes = new InputList<string>());
            set => _userAgentTypes = value;
        }

        /// <summary>
        /// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
        /// </summary>
        [Input("users")]
        public Input<Inputs.SSLInspectionRulesUsersArgs>? Users { get; set; }

        [Input("workloadGroups")]
        private InputList<Inputs.SSLInspectionRulesWorkloadGroupArgs>? _workloadGroups;

        /// <summary>
        /// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
        /// </summary>
        public InputList<Inputs.SSLInspectionRulesWorkloadGroupArgs> WorkloadGroups
        {
            get => _workloadGroups ?? (_workloadGroups = new InputList<Inputs.SSLInspectionRulesWorkloadGroupArgs>());
            set => _workloadGroups = value;
        }

        [Input("zpaAppSegments")]
        private InputList<Inputs.SSLInspectionRulesZpaAppSegmentArgs>? _zpaAppSegments;

        /// <summary>
        /// (Block List) - The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
        /// </summary>
        public InputList<Inputs.SSLInspectionRulesZpaAppSegmentArgs> ZpaAppSegments
        {
            get => _zpaAppSegments ?? (_zpaAppSegments = new InputList<Inputs.SSLInspectionRulesZpaAppSegmentArgs>());
            set => _zpaAppSegments = value;
        }

        public SSLInspectionRulesArgs()
        {
        }
        public static new SSLInspectionRulesArgs Empty => new SSLInspectionRulesArgs();
    }

    public sealed class SSLInspectionRulesState : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.SSLInspectionRulesActionGetArgs>? _actions;

        /// <summary>
        /// (Block List) - Action taken when the traffic matches policy
        /// </summary>
        public InputList<Inputs.SSLInspectionRulesActionGetArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.SSLInspectionRulesActionGetArgs>());
            set => _actions = value;
        }

        [Input("cloudApplications")]
        private InputList<string>? _cloudApplications;

        /// <summary>
        /// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        /// </summary>
        public InputList<string> CloudApplications
        {
            get => _cloudApplications ?? (_cloudApplications = new InputList<string>());
            set => _cloudApplications = value;
        }

        /// <summary>
        /// (Block List) - ID pairs of departments for which the rule is applied.
        /// </summary>
        [Input("departments")]
        public Input<Inputs.SSLInspectionRulesDepartmentsGetArgs>? Departments { get; set; }

        /// <summary>
        /// (String) -  Enter additional notes or information. The description cannot exceed 10,240 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// (Block List) - ID pairs of destination IP address groups for which the rule is applied.
        /// </summary>
        [Input("destIpGroups")]
        public Input<Inputs.SSLInspectionRulesDestIpGroupsGetArgs>? DestIpGroups { get; set; }

        /// <summary>
        /// (Block List) - ID pairs of device groups for which the rule is applied.
        /// </summary>
        [Input("deviceGroups")]
        public Input<Inputs.SSLInspectionRulesDeviceGroupsGetArgs>? DeviceGroups { get; set; }

        [Input("deviceTrustLevels")]
        private InputList<string>? _deviceTrustLevels;

        /// <summary>
        /// (Set of String)  - List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
        /// </summary>
        public InputList<string> DeviceTrustLevels
        {
            get => _deviceTrustLevels ?? (_deviceTrustLevels = new InputList<string>());
            set => _deviceTrustLevels = value;
        }

        /// <summary>
        /// (Block List) - ID pairs of devices for which the rule is applied
        /// </summary>
        [Input("devices")]
        public Input<Inputs.SSLInspectionRulesDevicesGetArgs>? Devices { get; set; }

        /// <summary>
        /// (Block List) - ID pairs of groups for which the rule is applied. If not set, rule is applied for all groups.
        /// </summary>
        [Input("groups")]
        public Input<Inputs.SSLInspectionRulesGroupsGetArgs>? Groups { get; set; }

        /// <summary>
        /// (Block List) - ID pairs of labels associated with the rule.
        /// </summary>
        [Input("labels")]
        public Input<Inputs.SSLInspectionRulesLabelsGetArgs>? Labels { get; set; }

        /// <summary>
        /// (Block List) - ID pairs of location groups to which the rule is applied. When empty, it implies applying to all location groups.
        /// </summary>
        [Input("locationGroups")]
        public Input<Inputs.SSLInspectionRulesLocationGroupsGetArgs>? LocationGroups { get; set; }

        /// <summary>
        /// (Block List) - ID pairs of locations to which the rule is applied. When empty, it implies applying to all locations.
        /// </summary>
        [Input("locations")]
        public Input<Inputs.SSLInspectionRulesLocationsGetArgs>? Locations { get; set; }

        /// <summary>
        /// The name of the SSL Inspection rule
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (String) -  Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        /// </summary>
        [Input("order")]
        public Input<int>? Order { get; set; }

        [Input("platforms")]
        private InputList<string>? _platforms;

        /// <summary>
        /// (Set of String) -  Zscaler Client Connector device platforms for which this rule is applied. Supported Values: `SCAN_IOS`, `SCAN_ANDROID`, `SCAN_MACOS`, `SCAN_WINDOWS`, `NO_CLIENT_CONNECTOR`, `SCAN_LINUX`
        /// </summary>
        public InputList<string> Platforms
        {
            get => _platforms ?? (_platforms = new InputList<string>());
            set => _platforms = value;
        }

        /// <summary>
        /// (Block List) - When using ZPA Gateway forwarding, name-ID pairs of ZPA Application Segments for which the rule is applicable.
        /// </summary>
        [Input("proxyGateways")]
        public Input<Inputs.SSLInspectionRulesProxyGatewaysGetArgs>? ProxyGateways { get; set; }

        /// <summary>
        /// (Integer) - The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can be specified for the rule. Admin rank can be configured if it is enabled in the Advanced Settings.
        /// </summary>
        [Input("rank")]
        public Input<int>? Rank { get; set; }

        /// <summary>
        /// (Boolean) - Indicates whether this rule is applied to remote users that use PAC with Kerberos authentication.
        /// </summary>
        [Input("roadWarriorForKerberos")]
        public Input<bool>? RoadWarriorForKerberos { get; set; }

        [Input("ruleId")]
        public Input<int>? RuleId { get; set; }

        /// <summary>
        /// (Block List) - ID pairs of source IP address groups for which the rule is applied.
        /// </summary>
        [Input("sourceIpGroups")]
        public Input<Inputs.SSLInspectionRulesSourceIpGroupsGetArgs>? SourceIpGroups { get; set; }

        /// <summary>
        /// (String) - The state of the rule indicating whether it is enabled or disabled. Supported values: `ENABLED` or `DISABLED`
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// (Block List) - The time intervals during which the rule applies
        /// </summary>
        [Input("timeWindows")]
        public Input<Inputs.SSLInspectionRulesTimeWindowsGetArgs>? TimeWindows { get; set; }

        [Input("urlCategories")]
        private InputList<string>? _urlCategories;

        /// <summary>
        /// (Set of String) -  The list of URL categories to which the DLP policy rule must be applied.
        /// </summary>
        public InputList<string> UrlCategories
        {
            get => _urlCategories ?? (_urlCategories = new InputList<string>());
            set => _urlCategories = value;
        }

        [Input("userAgentTypes")]
        private InputList<string>? _userAgentTypes;

        /// <summary>
        /// (Set of String) -  A list of user agent types the rule applies to.
        /// </summary>
        public InputList<string> UserAgentTypes
        {
            get => _userAgentTypes ?? (_userAgentTypes = new InputList<string>());
            set => _userAgentTypes = value;
        }

        /// <summary>
        /// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
        /// </summary>
        [Input("users")]
        public Input<Inputs.SSLInspectionRulesUsersGetArgs>? Users { get; set; }

        [Input("workloadGroups")]
        private InputList<Inputs.SSLInspectionRulesWorkloadGroupGetArgs>? _workloadGroups;

        /// <summary>
        /// (Block List) - The list of preconfigured workload groups to which the policy must be applied.
        /// </summary>
        public InputList<Inputs.SSLInspectionRulesWorkloadGroupGetArgs> WorkloadGroups
        {
            get => _workloadGroups ?? (_workloadGroups = new InputList<Inputs.SSLInspectionRulesWorkloadGroupGetArgs>());
            set => _workloadGroups = value;
        }

        [Input("zpaAppSegments")]
        private InputList<Inputs.SSLInspectionRulesZpaAppSegmentGetArgs>? _zpaAppSegments;

        /// <summary>
        /// (Block List) - The list of ZPA Application Segments for which this rule is applicable (applicable only for ZPA Gateway forwarding).
        /// </summary>
        public InputList<Inputs.SSLInspectionRulesZpaAppSegmentGetArgs> ZpaAppSegments
        {
            get => _zpaAppSegments ?? (_zpaAppSegments = new InputList<Inputs.SSLInspectionRulesZpaAppSegmentGetArgs>());
            set => _zpaAppSegments = value;
        }

        public SSLInspectionRulesState()
        {
        }
        public static new SSLInspectionRulesState Empty => new SSLInspectionRulesState();
    }
}
