# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetFirewallFilteringApplicationResult',
    'AwaitableGetFirewallFilteringApplicationResult',
    'get_firewall_filtering_application',
    'get_firewall_filtering_application_output',
]

@pulumi.output_type
class GetFirewallFilteringApplicationResult:
    """
    A collection of values returned by getFirewallFilteringApplication.
    """
    def __init__(__self__, deprecated=None, description=None, id=None, locale=None, parent_category=None):
        if deprecated and not isinstance(deprecated, bool):
            raise TypeError("Expected argument 'deprecated' to be a bool")
        pulumi.set(__self__, "deprecated", deprecated)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if locale and not isinstance(locale, str):
            raise TypeError("Expected argument 'locale' to be a str")
        pulumi.set(__self__, "locale", locale)
        if parent_category and not isinstance(parent_category, str):
            raise TypeError("Expected argument 'parent_category' to be a str")
        pulumi.set(__self__, "parent_category", parent_category)

    @property
    @pulumi.getter
    def deprecated(self) -> builtins.bool:
        """
        (Boolean)
        """
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        (String)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locale(self) -> Optional[builtins.str]:
        return pulumi.get(self, "locale")

    @property
    @pulumi.getter(name="parentCategory")
    def parent_category(self) -> builtins.str:
        """
        (String)
        """
        return pulumi.get(self, "parent_category")


class AwaitableGetFirewallFilteringApplicationResult(GetFirewallFilteringApplicationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallFilteringApplicationResult(
            deprecated=self.deprecated,
            description=self.description,
            id=self.id,
            locale=self.locale,
            parent_category=self.parent_category)


def get_firewall_filtering_application(id: Optional[builtins.str] = None,
                                       locale: Optional[builtins.str] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallFilteringApplicationResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/firewall-policies#/networkApplications-get)
    * [API documentation](https://help.zscaler.com/zia/firewall-policies#/networkApplications-get)

    Use the **zia_firewall_filtering_network_application** data source to get information about a network application available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering network application rule.

    ## Example Usage


    :param builtins.str id: The name of the ip source group to be exported.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['locale'] = locale
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getFirewallFilteringApplication:getFirewallFilteringApplication', __args__, opts=opts, typ=GetFirewallFilteringApplicationResult).value

    return AwaitableGetFirewallFilteringApplicationResult(
        deprecated=pulumi.get(__ret__, 'deprecated'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        locale=pulumi.get(__ret__, 'locale'),
        parent_category=pulumi.get(__ret__, 'parent_category'))
def get_firewall_filtering_application_output(id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                              locale: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFirewallFilteringApplicationResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/firewall-policies#/networkApplications-get)
    * [API documentation](https://help.zscaler.com/zia/firewall-policies#/networkApplications-get)

    Use the **zia_firewall_filtering_network_application** data source to get information about a network application available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering network application rule.

    ## Example Usage


    :param builtins.str id: The name of the ip source group to be exported.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['locale'] = locale
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getFirewallFilteringApplication:getFirewallFilteringApplication', __args__, opts=opts, typ=GetFirewallFilteringApplicationResult)
    return __ret__.apply(lambda __response__: GetFirewallFilteringApplicationResult(
        deprecated=pulumi.get(__response__, 'deprecated'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        locale=pulumi.get(__response__, 'locale'),
        parent_category=pulumi.get(__response__, 'parent_category')))
