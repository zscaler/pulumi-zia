# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ForwardingControlZPAGatewayArgs', 'ForwardingControlZPAGateway']

@pulumi.input_type
class ForwardingControlZPAGatewayArgs:
    def __init__(__self__, *,
                 zpa_app_segments: pulumi.Input[Sequence[pulumi.Input['ForwardingControlZPAGatewayZpaAppSegmentArgs']]],
                 zpa_server_group: pulumi.Input['ForwardingControlZPAGatewayZpaServerGroupArgs'],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ForwardingControlZPAGateway resource.
        :param pulumi.Input[Sequence[pulumi.Input['ForwardingControlZPAGatewayZpaAppSegmentArgs']]] zpa_app_segments: The ZPA Server Group that is configured for Source IP Anchoring
        :param pulumi.Input['ForwardingControlZPAGatewayZpaServerGroupArgs'] zpa_server_group: The ZPA Server Group that is configured for Source IP Anchoring
        :param pulumi.Input[builtins.str] description: (string) - Additional details about the ZPA gateway
        :param pulumi.Input[builtins.str] name: The name of the forwarding control ZPA Gateway to be exported.
        :param pulumi.Input[builtins.str] type: (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
        """
        pulumi.set(__self__, "zpa_app_segments", zpa_app_segments)
        pulumi.set(__self__, "zpa_server_group", zpa_server_group)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="zpaAppSegments")
    def zpa_app_segments(self) -> pulumi.Input[Sequence[pulumi.Input['ForwardingControlZPAGatewayZpaAppSegmentArgs']]]:
        """
        The ZPA Server Group that is configured for Source IP Anchoring
        """
        return pulumi.get(self, "zpa_app_segments")

    @zpa_app_segments.setter
    def zpa_app_segments(self, value: pulumi.Input[Sequence[pulumi.Input['ForwardingControlZPAGatewayZpaAppSegmentArgs']]]):
        pulumi.set(self, "zpa_app_segments", value)

    @property
    @pulumi.getter(name="zpaServerGroup")
    def zpa_server_group(self) -> pulumi.Input['ForwardingControlZPAGatewayZpaServerGroupArgs']:
        """
        The ZPA Server Group that is configured for Source IP Anchoring
        """
        return pulumi.get(self, "zpa_server_group")

    @zpa_server_group.setter
    def zpa_server_group(self, value: pulumi.Input['ForwardingControlZPAGatewayZpaServerGroupArgs']):
        pulumi.set(self, "zpa_server_group", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (string) - Additional details about the ZPA gateway
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the forwarding control ZPA Gateway to be exported.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _ForwardingControlZPAGatewayState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 gateway_id: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlZPAGatewayZpaAppSegmentArgs']]]] = None,
                 zpa_server_group: Optional[pulumi.Input['ForwardingControlZPAGatewayZpaServerGroupArgs']] = None):
        """
        Input properties used for looking up and filtering ForwardingControlZPAGateway resources.
        :param pulumi.Input[builtins.str] description: (string) - Additional details about the ZPA gateway
        :param pulumi.Input[builtins.str] name: The name of the forwarding control ZPA Gateway to be exported.
        :param pulumi.Input[builtins.str] type: (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
        :param pulumi.Input[Sequence[pulumi.Input['ForwardingControlZPAGatewayZpaAppSegmentArgs']]] zpa_app_segments: The ZPA Server Group that is configured for Source IP Anchoring
        :param pulumi.Input['ForwardingControlZPAGatewayZpaServerGroupArgs'] zpa_server_group: The ZPA Server Group that is configured for Source IP Anchoring
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if zpa_app_segments is not None:
            pulumi.set(__self__, "zpa_app_segments", zpa_app_segments)
        if zpa_server_group is not None:
            pulumi.set(__self__, "zpa_server_group", zpa_server_group)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (string) - Additional details about the ZPA gateway
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the forwarding control ZPA Gateway to be exported.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="zpaAppSegments")
    def zpa_app_segments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlZPAGatewayZpaAppSegmentArgs']]]]:
        """
        The ZPA Server Group that is configured for Source IP Anchoring
        """
        return pulumi.get(self, "zpa_app_segments")

    @zpa_app_segments.setter
    def zpa_app_segments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlZPAGatewayZpaAppSegmentArgs']]]]):
        pulumi.set(self, "zpa_app_segments", value)

    @property
    @pulumi.getter(name="zpaServerGroup")
    def zpa_server_group(self) -> Optional[pulumi.Input['ForwardingControlZPAGatewayZpaServerGroupArgs']]:
        """
        The ZPA Server Group that is configured for Source IP Anchoring
        """
        return pulumi.get(self, "zpa_server_group")

    @zpa_server_group.setter
    def zpa_server_group(self, value: Optional[pulumi.Input['ForwardingControlZPAGatewayZpaServerGroupArgs']]):
        pulumi.set(self, "zpa_server_group", value)


@pulumi.type_token("zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway")
class ForwardingControlZPAGateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ForwardingControlZPAGatewayZpaAppSegmentArgs', 'ForwardingControlZPAGatewayZpaAppSegmentArgsDict']]]]] = None,
                 zpa_server_group: Optional[pulumi.Input[Union['ForwardingControlZPAGatewayZpaServerGroupArgs', 'ForwardingControlZPAGatewayZpaServerGroupArgsDict']]] = None,
                 __props__=None):
        """
        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **forwarding_control_zpa_gateway** can be imported by using `<GATEWAY_ID>` or `<GATEWAY_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway example <gateway_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway example <gateway_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: (string) - Additional details about the ZPA gateway
        :param pulumi.Input[builtins.str] name: The name of the forwarding control ZPA Gateway to be exported.
        :param pulumi.Input[builtins.str] type: (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
        :param pulumi.Input[Sequence[pulumi.Input[Union['ForwardingControlZPAGatewayZpaAppSegmentArgs', 'ForwardingControlZPAGatewayZpaAppSegmentArgsDict']]]] zpa_app_segments: The ZPA Server Group that is configured for Source IP Anchoring
        :param pulumi.Input[Union['ForwardingControlZPAGatewayZpaServerGroupArgs', 'ForwardingControlZPAGatewayZpaServerGroupArgsDict']] zpa_server_group: The ZPA Server Group that is configured for Source IP Anchoring
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ForwardingControlZPAGatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **forwarding_control_zpa_gateway** can be imported by using `<GATEWAY_ID>` or `<GATEWAY_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway example <gateway_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway example <gateway_name>
        ```

        :param str resource_name: The name of the resource.
        :param ForwardingControlZPAGatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ForwardingControlZPAGatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ForwardingControlZPAGatewayZpaAppSegmentArgs', 'ForwardingControlZPAGatewayZpaAppSegmentArgsDict']]]]] = None,
                 zpa_server_group: Optional[pulumi.Input[Union['ForwardingControlZPAGatewayZpaServerGroupArgs', 'ForwardingControlZPAGatewayZpaServerGroupArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ForwardingControlZPAGatewayArgs.__new__(ForwardingControlZPAGatewayArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["type"] = type
            if zpa_app_segments is None and not opts.urn:
                raise TypeError("Missing required property 'zpa_app_segments'")
            __props__.__dict__["zpa_app_segments"] = zpa_app_segments
            if zpa_server_group is None and not opts.urn:
                raise TypeError("Missing required property 'zpa_server_group'")
            __props__.__dict__["zpa_server_group"] = zpa_server_group
            __props__.__dict__["gateway_id"] = None
        super(ForwardingControlZPAGateway, __self__).__init__(
            'zia:index/forwardingControlZPAGateway:ForwardingControlZPAGateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            gateway_id: Optional[pulumi.Input[builtins.int]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ForwardingControlZPAGatewayZpaAppSegmentArgs', 'ForwardingControlZPAGatewayZpaAppSegmentArgsDict']]]]] = None,
            zpa_server_group: Optional[pulumi.Input[Union['ForwardingControlZPAGatewayZpaServerGroupArgs', 'ForwardingControlZPAGatewayZpaServerGroupArgsDict']]] = None) -> 'ForwardingControlZPAGateway':
        """
        Get an existing ForwardingControlZPAGateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: (string) - Additional details about the ZPA gateway
        :param pulumi.Input[builtins.str] name: The name of the forwarding control ZPA Gateway to be exported.
        :param pulumi.Input[builtins.str] type: (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
        :param pulumi.Input[Sequence[pulumi.Input[Union['ForwardingControlZPAGatewayZpaAppSegmentArgs', 'ForwardingControlZPAGatewayZpaAppSegmentArgsDict']]]] zpa_app_segments: The ZPA Server Group that is configured for Source IP Anchoring
        :param pulumi.Input[Union['ForwardingControlZPAGatewayZpaServerGroupArgs', 'ForwardingControlZPAGatewayZpaServerGroupArgsDict']] zpa_server_group: The ZPA Server Group that is configured for Source IP Anchoring
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ForwardingControlZPAGatewayState.__new__(_ForwardingControlZPAGatewayState)

        __props__.__dict__["description"] = description
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["name"] = name
        __props__.__dict__["type"] = type
        __props__.__dict__["zpa_app_segments"] = zpa_app_segments
        __props__.__dict__["zpa_server_group"] = zpa_server_group
        return ForwardingControlZPAGateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (string) - Additional details about the ZPA gateway
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the forwarding control ZPA Gateway to be exported.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (string) - Indicates whether the ZPA gateway is configured for Zscaler Internet Access (using option ZPA) or Zscaler Cloud Connector (using option ECZPA). Supported values: ``ZPA`` and ``ECZPA``
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="zpaAppSegments")
    def zpa_app_segments(self) -> pulumi.Output[Sequence['outputs.ForwardingControlZPAGatewayZpaAppSegment']]:
        """
        The ZPA Server Group that is configured for Source IP Anchoring
        """
        return pulumi.get(self, "zpa_app_segments")

    @property
    @pulumi.getter(name="zpaServerGroup")
    def zpa_server_group(self) -> pulumi.Output['outputs.ForwardingControlZPAGatewayZpaServerGroup']:
        """
        The ZPA Server Group that is configured for Source IP Anchoring
        """
        return pulumi.get(self, "zpa_server_group")

