# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NatControlRulesArgs', 'NatControlRules']

@pulumi.input_type
class NatControlRulesArgs:
    def __init__(__self__, *,
                 default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 departments: Optional[pulumi.Input['NatControlRulesDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input['NatControlRulesDestIpGroupsArgs']] = None,
                 dest_ipv6_groups: Optional[pulumi.Input['NatControlRulesDestIpv6GroupsArgs']] = None,
                 device_groups: Optional[pulumi.Input['NatControlRulesDeviceGroupsArgs']] = None,
                 devices: Optional[pulumi.Input['NatControlRulesDevicesArgs']] = None,
                 enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 groups: Optional[pulumi.Input['NatControlRulesGroupsArgs']] = None,
                 labels: Optional[pulumi.Input['NatControlRulesLabelsArgs']] = None,
                 location_groups: Optional[pulumi.Input['NatControlRulesLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['NatControlRulesLocationsArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nw_service_groups: Optional[pulumi.Input['NatControlRulesNwServiceGroupsArgs']] = None,
                 nw_services: Optional[pulumi.Input['NatControlRulesNwServicesArgs']] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 redirect_fqdn: Optional[pulumi.Input[builtins.str]] = None,
                 redirect_ip: Optional[pulumi.Input[builtins.str]] = None,
                 redirect_port: Optional[pulumi.Input[builtins.int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ip_groups: Optional[pulumi.Input['NatControlRulesSrcIpGroupsArgs']] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input['NatControlRulesSrcIpv6GroupsArgs']] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 time_windows: Optional[pulumi.Input['NatControlRulesTimeWindowsArgs']] = None,
                 users: Optional[pulumi.Input['NatControlRulesUsersArgs']] = None):
        """
        The set of arguments for constructing a NatControlRules resource.
        :param pulumi.Input[builtins.bool] default_rule: If set to true, the default rule is applied
        :param pulumi.Input['NatControlRulesDepartmentsArgs'] departments: list of departments for which rule must be applied
        :param pulumi.Input[builtins.str] description: Additional information about the rule
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_addresses: Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input['NatControlRulesDestIpGroupsArgs'] dest_ip_groups: list of destination ip groups
        :param pulumi.Input['NatControlRulesDestIpv6GroupsArgs'] dest_ipv6_groups: list of destination ipv6 groups
        :param pulumi.Input['NatControlRulesDeviceGroupsArgs'] device_groups: This field is applicable for devices that are managed using Zscaler Client Connector.
        :param pulumi.Input['NatControlRulesDevicesArgs'] devices: Name-ID pairs of devices for which rule must be applied.
        :param pulumi.Input['NatControlRulesGroupsArgs'] groups: list of groups for which rule must be applied
        :param pulumi.Input['NatControlRulesLabelsArgs'] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input['NatControlRulesLocationGroupsArgs'] location_groups: list of locations groups
        :param pulumi.Input['NatControlRulesLocationsArgs'] locations: list of locations for which rule must be applied
        :param pulumi.Input[builtins.str] name: Name of the nat control policy rule
        :param pulumi.Input['NatControlRulesNwServiceGroupsArgs'] nw_service_groups: list of nw service groups
        :param pulumi.Input['NatControlRulesNwServicesArgs'] nw_services: list of nw services
        :param pulumi.Input[builtins.int] order: Rule order number. If omitted, the rule will be added to the end of the rule set.
        :param pulumi.Input[builtins.bool] predefined: If set to true, a predefined rule is applied
        :param pulumi.Input[builtins.int] rank: Admin rank of the nat control policy rule
        :param pulumi.Input[builtins.str] redirect_fqdn: The action the nat control policy rule takes when packets match the rule
        :param pulumi.Input[builtins.str] redirect_ip: The action the nat control policy rule takes when packets match the rule
        :param pulumi.Input[builtins.int] redirect_port: The action the nat control policy rule takes when packets match the rule
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] res_categories: List of destination domain categories to which the rule applies
        :param pulumi.Input['NatControlRulesSrcIpGroupsArgs'] src_ip_groups: list of source ip groups
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] src_ips: User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
               source IP address.
        :param pulumi.Input['NatControlRulesSrcIpv6GroupsArgs'] src_ipv6_groups: list of source ipv6 groups
        :param pulumi.Input[builtins.str] state: Determines whether the nat control policy rule is enabled or disabled
        :param pulumi.Input['NatControlRulesTimeWindowsArgs'] time_windows: The time interval in which the nat control policy rule applies
        :param pulumi.Input['NatControlRulesUsersArgs'] users: list of users for which rule must be applied
        """
        if default_rule is not None:
            pulumi.set(__self__, "default_rule", default_rule)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dest_addresses is not None:
            pulumi.set(__self__, "dest_addresses", dest_addresses)
        if dest_countries is not None:
            pulumi.set(__self__, "dest_countries", dest_countries)
        if dest_ip_categories is not None:
            pulumi.set(__self__, "dest_ip_categories", dest_ip_categories)
        if dest_ip_groups is not None:
            pulumi.set(__self__, "dest_ip_groups", dest_ip_groups)
        if dest_ipv6_groups is not None:
            pulumi.set(__self__, "dest_ipv6_groups", dest_ipv6_groups)
        if device_groups is not None:
            pulumi.set(__self__, "device_groups", device_groups)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if enable_full_logging is not None:
            pulumi.set(__self__, "enable_full_logging", enable_full_logging)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nw_service_groups is not None:
            pulumi.set(__self__, "nw_service_groups", nw_service_groups)
        if nw_services is not None:
            pulumi.set(__self__, "nw_services", nw_services)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if predefined is not None:
            pulumi.set(__self__, "predefined", predefined)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if redirect_fqdn is not None:
            pulumi.set(__self__, "redirect_fqdn", redirect_fqdn)
        if redirect_ip is not None:
            pulumi.set(__self__, "redirect_ip", redirect_ip)
        if redirect_port is not None:
            pulumi.set(__self__, "redirect_port", redirect_port)
        if res_categories is not None:
            pulumi.set(__self__, "res_categories", res_categories)
        if src_ip_groups is not None:
            pulumi.set(__self__, "src_ip_groups", src_ip_groups)
        if src_ips is not None:
            pulumi.set(__self__, "src_ips", src_ips)
        if src_ipv6_groups is not None:
            pulumi.set(__self__, "src_ipv6_groups", src_ipv6_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_windows is not None:
            pulumi.set(__self__, "time_windows", time_windows)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If set to true, the default rule is applied
        """
        return pulumi.get(self, "default_rule")

    @default_rule.setter
    def default_rule(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "default_rule", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['NatControlRulesDepartmentsArgs']]:
        """
        list of departments for which rule must be applied
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['NatControlRulesDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Additional information about the rule
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        """
        return pulumi.get(self, "dest_addresses")

    @dest_addresses.setter
    def dest_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_addresses", value)

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        countries.
        """
        return pulumi.get(self, "dest_countries")

    @dest_countries.setter
    def dest_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_countries", value)

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "dest_ip_categories")

    @dest_ip_categories.setter
    def dest_ip_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_ip_categories", value)

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> Optional[pulumi.Input['NatControlRulesDestIpGroupsArgs']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "dest_ip_groups")

    @dest_ip_groups.setter
    def dest_ip_groups(self, value: Optional[pulumi.Input['NatControlRulesDestIpGroupsArgs']]):
        pulumi.set(self, "dest_ip_groups", value)

    @property
    @pulumi.getter(name="destIpv6Groups")
    def dest_ipv6_groups(self) -> Optional[pulumi.Input['NatControlRulesDestIpv6GroupsArgs']]:
        """
        list of destination ipv6 groups
        """
        return pulumi.get(self, "dest_ipv6_groups")

    @dest_ipv6_groups.setter
    def dest_ipv6_groups(self, value: Optional[pulumi.Input['NatControlRulesDestIpv6GroupsArgs']]):
        pulumi.set(self, "dest_ipv6_groups", value)

    @property
    @pulumi.getter(name="deviceGroups")
    def device_groups(self) -> Optional[pulumi.Input['NatControlRulesDeviceGroupsArgs']]:
        """
        This field is applicable for devices that are managed using Zscaler Client Connector.
        """
        return pulumi.get(self, "device_groups")

    @device_groups.setter
    def device_groups(self, value: Optional[pulumi.Input['NatControlRulesDeviceGroupsArgs']]):
        pulumi.set(self, "device_groups", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input['NatControlRulesDevicesArgs']]:
        """
        Name-ID pairs of devices for which rule must be applied.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input['NatControlRulesDevicesArgs']]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="enableFullLogging")
    def enable_full_logging(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enable_full_logging")

    @enable_full_logging.setter
    def enable_full_logging(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_full_logging", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['NatControlRulesGroupsArgs']]:
        """
        list of groups for which rule must be applied
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['NatControlRulesGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['NatControlRulesLabelsArgs']]:
        """
        list of Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['NatControlRulesLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['NatControlRulesLocationGroupsArgs']]:
        """
        list of locations groups
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['NatControlRulesLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['NatControlRulesLocationsArgs']]:
        """
        list of locations for which rule must be applied
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['NatControlRulesLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the nat control policy rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> Optional[pulumi.Input['NatControlRulesNwServiceGroupsArgs']]:
        """
        list of nw service groups
        """
        return pulumi.get(self, "nw_service_groups")

    @nw_service_groups.setter
    def nw_service_groups(self, value: Optional[pulumi.Input['NatControlRulesNwServiceGroupsArgs']]):
        pulumi.set(self, "nw_service_groups", value)

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> Optional[pulumi.Input['NatControlRulesNwServicesArgs']]:
        """
        list of nw services
        """
        return pulumi.get(self, "nw_services")

    @nw_services.setter
    def nw_services(self, value: Optional[pulumi.Input['NatControlRulesNwServicesArgs']]):
        pulumi.set(self, "nw_services", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Rule order number. If omitted, the rule will be added to the end of the rule set.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def predefined(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If set to true, a predefined rule is applied
        """
        return pulumi.get(self, "predefined")

    @predefined.setter
    def predefined(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "predefined", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Admin rank of the nat control policy rule
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="redirectFqdn")
    def redirect_fqdn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The action the nat control policy rule takes when packets match the rule
        """
        return pulumi.get(self, "redirect_fqdn")

    @redirect_fqdn.setter
    def redirect_fqdn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "redirect_fqdn", value)

    @property
    @pulumi.getter(name="redirectIp")
    def redirect_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The action the nat control policy rule takes when packets match the rule
        """
        return pulumi.get(self, "redirect_ip")

    @redirect_ip.setter
    def redirect_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "redirect_ip", value)

    @property
    @pulumi.getter(name="redirectPort")
    def redirect_port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The action the nat control policy rule takes when packets match the rule
        """
        return pulumi.get(self, "redirect_port")

    @redirect_port.setter
    def redirect_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "redirect_port", value)

    @property
    @pulumi.getter(name="resCategories")
    def res_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of destination domain categories to which the rule applies
        """
        return pulumi.get(self, "res_categories")

    @res_categories.setter
    def res_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "res_categories", value)

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> Optional[pulumi.Input['NatControlRulesSrcIpGroupsArgs']]:
        """
        list of source ip groups
        """
        return pulumi.get(self, "src_ip_groups")

    @src_ip_groups.setter
    def src_ip_groups(self, value: Optional[pulumi.Input['NatControlRulesSrcIpGroupsArgs']]):
        pulumi.set(self, "src_ip_groups", value)

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
        source IP address.
        """
        return pulumi.get(self, "src_ips")

    @src_ips.setter
    def src_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "src_ips", value)

    @property
    @pulumi.getter(name="srcIpv6Groups")
    def src_ipv6_groups(self) -> Optional[pulumi.Input['NatControlRulesSrcIpv6GroupsArgs']]:
        """
        list of source ipv6 groups
        """
        return pulumi.get(self, "src_ipv6_groups")

    @src_ipv6_groups.setter
    def src_ipv6_groups(self, value: Optional[pulumi.Input['NatControlRulesSrcIpv6GroupsArgs']]):
        pulumi.set(self, "src_ipv6_groups", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Determines whether the nat control policy rule is enabled or disabled
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Optional[pulumi.Input['NatControlRulesTimeWindowsArgs']]:
        """
        The time interval in which the nat control policy rule applies
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: Optional[pulumi.Input['NatControlRulesTimeWindowsArgs']]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['NatControlRulesUsersArgs']]:
        """
        list of users for which rule must be applied
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['NatControlRulesUsersArgs']]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class _NatControlRulesState:
    def __init__(__self__, *,
                 default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 departments: Optional[pulumi.Input['NatControlRulesDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input['NatControlRulesDestIpGroupsArgs']] = None,
                 dest_ipv6_groups: Optional[pulumi.Input['NatControlRulesDestIpv6GroupsArgs']] = None,
                 device_groups: Optional[pulumi.Input['NatControlRulesDeviceGroupsArgs']] = None,
                 devices: Optional[pulumi.Input['NatControlRulesDevicesArgs']] = None,
                 enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 groups: Optional[pulumi.Input['NatControlRulesGroupsArgs']] = None,
                 labels: Optional[pulumi.Input['NatControlRulesLabelsArgs']] = None,
                 location_groups: Optional[pulumi.Input['NatControlRulesLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['NatControlRulesLocationsArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nw_service_groups: Optional[pulumi.Input['NatControlRulesNwServiceGroupsArgs']] = None,
                 nw_services: Optional[pulumi.Input['NatControlRulesNwServicesArgs']] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 redirect_fqdn: Optional[pulumi.Input[builtins.str]] = None,
                 redirect_ip: Optional[pulumi.Input[builtins.str]] = None,
                 redirect_port: Optional[pulumi.Input[builtins.int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 rule_id: Optional[pulumi.Input[builtins.int]] = None,
                 src_ip_groups: Optional[pulumi.Input['NatControlRulesSrcIpGroupsArgs']] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input['NatControlRulesSrcIpv6GroupsArgs']] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 time_windows: Optional[pulumi.Input['NatControlRulesTimeWindowsArgs']] = None,
                 users: Optional[pulumi.Input['NatControlRulesUsersArgs']] = None):
        """
        Input properties used for looking up and filtering NatControlRules resources.
        :param pulumi.Input[builtins.bool] default_rule: If set to true, the default rule is applied
        :param pulumi.Input['NatControlRulesDepartmentsArgs'] departments: list of departments for which rule must be applied
        :param pulumi.Input[builtins.str] description: Additional information about the rule
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_addresses: Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input['NatControlRulesDestIpGroupsArgs'] dest_ip_groups: list of destination ip groups
        :param pulumi.Input['NatControlRulesDestIpv6GroupsArgs'] dest_ipv6_groups: list of destination ipv6 groups
        :param pulumi.Input['NatControlRulesDeviceGroupsArgs'] device_groups: This field is applicable for devices that are managed using Zscaler Client Connector.
        :param pulumi.Input['NatControlRulesDevicesArgs'] devices: Name-ID pairs of devices for which rule must be applied.
        :param pulumi.Input['NatControlRulesGroupsArgs'] groups: list of groups for which rule must be applied
        :param pulumi.Input['NatControlRulesLabelsArgs'] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input['NatControlRulesLocationGroupsArgs'] location_groups: list of locations groups
        :param pulumi.Input['NatControlRulesLocationsArgs'] locations: list of locations for which rule must be applied
        :param pulumi.Input[builtins.str] name: Name of the nat control policy rule
        :param pulumi.Input['NatControlRulesNwServiceGroupsArgs'] nw_service_groups: list of nw service groups
        :param pulumi.Input['NatControlRulesNwServicesArgs'] nw_services: list of nw services
        :param pulumi.Input[builtins.int] order: Rule order number. If omitted, the rule will be added to the end of the rule set.
        :param pulumi.Input[builtins.bool] predefined: If set to true, a predefined rule is applied
        :param pulumi.Input[builtins.int] rank: Admin rank of the nat control policy rule
        :param pulumi.Input[builtins.str] redirect_fqdn: The action the nat control policy rule takes when packets match the rule
        :param pulumi.Input[builtins.str] redirect_ip: The action the nat control policy rule takes when packets match the rule
        :param pulumi.Input[builtins.int] redirect_port: The action the nat control policy rule takes when packets match the rule
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] res_categories: List of destination domain categories to which the rule applies
        :param pulumi.Input['NatControlRulesSrcIpGroupsArgs'] src_ip_groups: list of source ip groups
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] src_ips: User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
               source IP address.
        :param pulumi.Input['NatControlRulesSrcIpv6GroupsArgs'] src_ipv6_groups: list of source ipv6 groups
        :param pulumi.Input[builtins.str] state: Determines whether the nat control policy rule is enabled or disabled
        :param pulumi.Input['NatControlRulesTimeWindowsArgs'] time_windows: The time interval in which the nat control policy rule applies
        :param pulumi.Input['NatControlRulesUsersArgs'] users: list of users for which rule must be applied
        """
        if default_rule is not None:
            pulumi.set(__self__, "default_rule", default_rule)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dest_addresses is not None:
            pulumi.set(__self__, "dest_addresses", dest_addresses)
        if dest_countries is not None:
            pulumi.set(__self__, "dest_countries", dest_countries)
        if dest_ip_categories is not None:
            pulumi.set(__self__, "dest_ip_categories", dest_ip_categories)
        if dest_ip_groups is not None:
            pulumi.set(__self__, "dest_ip_groups", dest_ip_groups)
        if dest_ipv6_groups is not None:
            pulumi.set(__self__, "dest_ipv6_groups", dest_ipv6_groups)
        if device_groups is not None:
            pulumi.set(__self__, "device_groups", device_groups)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if enable_full_logging is not None:
            pulumi.set(__self__, "enable_full_logging", enable_full_logging)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nw_service_groups is not None:
            pulumi.set(__self__, "nw_service_groups", nw_service_groups)
        if nw_services is not None:
            pulumi.set(__self__, "nw_services", nw_services)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if predefined is not None:
            pulumi.set(__self__, "predefined", predefined)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if redirect_fqdn is not None:
            pulumi.set(__self__, "redirect_fqdn", redirect_fqdn)
        if redirect_ip is not None:
            pulumi.set(__self__, "redirect_ip", redirect_ip)
        if redirect_port is not None:
            pulumi.set(__self__, "redirect_port", redirect_port)
        if res_categories is not None:
            pulumi.set(__self__, "res_categories", res_categories)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if src_ip_groups is not None:
            pulumi.set(__self__, "src_ip_groups", src_ip_groups)
        if src_ips is not None:
            pulumi.set(__self__, "src_ips", src_ips)
        if src_ipv6_groups is not None:
            pulumi.set(__self__, "src_ipv6_groups", src_ipv6_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_windows is not None:
            pulumi.set(__self__, "time_windows", time_windows)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If set to true, the default rule is applied
        """
        return pulumi.get(self, "default_rule")

    @default_rule.setter
    def default_rule(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "default_rule", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['NatControlRulesDepartmentsArgs']]:
        """
        list of departments for which rule must be applied
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['NatControlRulesDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Additional information about the rule
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        """
        return pulumi.get(self, "dest_addresses")

    @dest_addresses.setter
    def dest_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_addresses", value)

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        countries.
        """
        return pulumi.get(self, "dest_countries")

    @dest_countries.setter
    def dest_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_countries", value)

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "dest_ip_categories")

    @dest_ip_categories.setter
    def dest_ip_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_ip_categories", value)

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> Optional[pulumi.Input['NatControlRulesDestIpGroupsArgs']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "dest_ip_groups")

    @dest_ip_groups.setter
    def dest_ip_groups(self, value: Optional[pulumi.Input['NatControlRulesDestIpGroupsArgs']]):
        pulumi.set(self, "dest_ip_groups", value)

    @property
    @pulumi.getter(name="destIpv6Groups")
    def dest_ipv6_groups(self) -> Optional[pulumi.Input['NatControlRulesDestIpv6GroupsArgs']]:
        """
        list of destination ipv6 groups
        """
        return pulumi.get(self, "dest_ipv6_groups")

    @dest_ipv6_groups.setter
    def dest_ipv6_groups(self, value: Optional[pulumi.Input['NatControlRulesDestIpv6GroupsArgs']]):
        pulumi.set(self, "dest_ipv6_groups", value)

    @property
    @pulumi.getter(name="deviceGroups")
    def device_groups(self) -> Optional[pulumi.Input['NatControlRulesDeviceGroupsArgs']]:
        """
        This field is applicable for devices that are managed using Zscaler Client Connector.
        """
        return pulumi.get(self, "device_groups")

    @device_groups.setter
    def device_groups(self, value: Optional[pulumi.Input['NatControlRulesDeviceGroupsArgs']]):
        pulumi.set(self, "device_groups", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input['NatControlRulesDevicesArgs']]:
        """
        Name-ID pairs of devices for which rule must be applied.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input['NatControlRulesDevicesArgs']]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="enableFullLogging")
    def enable_full_logging(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enable_full_logging")

    @enable_full_logging.setter
    def enable_full_logging(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_full_logging", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['NatControlRulesGroupsArgs']]:
        """
        list of groups for which rule must be applied
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['NatControlRulesGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['NatControlRulesLabelsArgs']]:
        """
        list of Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['NatControlRulesLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['NatControlRulesLocationGroupsArgs']]:
        """
        list of locations groups
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['NatControlRulesLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['NatControlRulesLocationsArgs']]:
        """
        list of locations for which rule must be applied
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['NatControlRulesLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the nat control policy rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> Optional[pulumi.Input['NatControlRulesNwServiceGroupsArgs']]:
        """
        list of nw service groups
        """
        return pulumi.get(self, "nw_service_groups")

    @nw_service_groups.setter
    def nw_service_groups(self, value: Optional[pulumi.Input['NatControlRulesNwServiceGroupsArgs']]):
        pulumi.set(self, "nw_service_groups", value)

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> Optional[pulumi.Input['NatControlRulesNwServicesArgs']]:
        """
        list of nw services
        """
        return pulumi.get(self, "nw_services")

    @nw_services.setter
    def nw_services(self, value: Optional[pulumi.Input['NatControlRulesNwServicesArgs']]):
        pulumi.set(self, "nw_services", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Rule order number. If omitted, the rule will be added to the end of the rule set.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def predefined(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If set to true, a predefined rule is applied
        """
        return pulumi.get(self, "predefined")

    @predefined.setter
    def predefined(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "predefined", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Admin rank of the nat control policy rule
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="redirectFqdn")
    def redirect_fqdn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The action the nat control policy rule takes when packets match the rule
        """
        return pulumi.get(self, "redirect_fqdn")

    @redirect_fqdn.setter
    def redirect_fqdn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "redirect_fqdn", value)

    @property
    @pulumi.getter(name="redirectIp")
    def redirect_ip(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The action the nat control policy rule takes when packets match the rule
        """
        return pulumi.get(self, "redirect_ip")

    @redirect_ip.setter
    def redirect_ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "redirect_ip", value)

    @property
    @pulumi.getter(name="redirectPort")
    def redirect_port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The action the nat control policy rule takes when packets match the rule
        """
        return pulumi.get(self, "redirect_port")

    @redirect_port.setter
    def redirect_port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "redirect_port", value)

    @property
    @pulumi.getter(name="resCategories")
    def res_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of destination domain categories to which the rule applies
        """
        return pulumi.get(self, "res_categories")

    @res_categories.setter
    def res_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "res_categories", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> Optional[pulumi.Input['NatControlRulesSrcIpGroupsArgs']]:
        """
        list of source ip groups
        """
        return pulumi.get(self, "src_ip_groups")

    @src_ip_groups.setter
    def src_ip_groups(self, value: Optional[pulumi.Input['NatControlRulesSrcIpGroupsArgs']]):
        pulumi.set(self, "src_ip_groups", value)

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
        source IP address.
        """
        return pulumi.get(self, "src_ips")

    @src_ips.setter
    def src_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "src_ips", value)

    @property
    @pulumi.getter(name="srcIpv6Groups")
    def src_ipv6_groups(self) -> Optional[pulumi.Input['NatControlRulesSrcIpv6GroupsArgs']]:
        """
        list of source ipv6 groups
        """
        return pulumi.get(self, "src_ipv6_groups")

    @src_ipv6_groups.setter
    def src_ipv6_groups(self, value: Optional[pulumi.Input['NatControlRulesSrcIpv6GroupsArgs']]):
        pulumi.set(self, "src_ipv6_groups", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Determines whether the nat control policy rule is enabled or disabled
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Optional[pulumi.Input['NatControlRulesTimeWindowsArgs']]:
        """
        The time interval in which the nat control policy rule applies
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: Optional[pulumi.Input['NatControlRulesTimeWindowsArgs']]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['NatControlRulesUsersArgs']]:
        """
        list of users for which rule must be applied
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['NatControlRulesUsersArgs']]):
        pulumi.set(self, "users", value)


@pulumi.type_token("zia:index/natControlRules:NatControlRules")
class NatControlRules(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 departments: Optional[pulumi.Input[Union['NatControlRulesDepartmentsArgs', 'NatControlRulesDepartmentsArgsDict']]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input[Union['NatControlRulesDestIpGroupsArgs', 'NatControlRulesDestIpGroupsArgsDict']]] = None,
                 dest_ipv6_groups: Optional[pulumi.Input[Union['NatControlRulesDestIpv6GroupsArgs', 'NatControlRulesDestIpv6GroupsArgsDict']]] = None,
                 device_groups: Optional[pulumi.Input[Union['NatControlRulesDeviceGroupsArgs', 'NatControlRulesDeviceGroupsArgsDict']]] = None,
                 devices: Optional[pulumi.Input[Union['NatControlRulesDevicesArgs', 'NatControlRulesDevicesArgsDict']]] = None,
                 enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 groups: Optional[pulumi.Input[Union['NatControlRulesGroupsArgs', 'NatControlRulesGroupsArgsDict']]] = None,
                 labels: Optional[pulumi.Input[Union['NatControlRulesLabelsArgs', 'NatControlRulesLabelsArgsDict']]] = None,
                 location_groups: Optional[pulumi.Input[Union['NatControlRulesLocationGroupsArgs', 'NatControlRulesLocationGroupsArgsDict']]] = None,
                 locations: Optional[pulumi.Input[Union['NatControlRulesLocationsArgs', 'NatControlRulesLocationsArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nw_service_groups: Optional[pulumi.Input[Union['NatControlRulesNwServiceGroupsArgs', 'NatControlRulesNwServiceGroupsArgsDict']]] = None,
                 nw_services: Optional[pulumi.Input[Union['NatControlRulesNwServicesArgs', 'NatControlRulesNwServicesArgsDict']]] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 redirect_fqdn: Optional[pulumi.Input[builtins.str]] = None,
                 redirect_ip: Optional[pulumi.Input[builtins.str]] = None,
                 redirect_port: Optional[pulumi.Input[builtins.int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ip_groups: Optional[pulumi.Input[Union['NatControlRulesSrcIpGroupsArgs', 'NatControlRulesSrcIpGroupsArgsDict']]] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input[Union['NatControlRulesSrcIpv6GroupsArgs', 'NatControlRulesSrcIpv6GroupsArgsDict']]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 time_windows: Optional[pulumi.Input[Union['NatControlRulesTimeWindowsArgs', 'NatControlRulesTimeWindowsArgsDict']]] = None,
                 users: Optional[pulumi.Input[Union['NatControlRulesUsersArgs', 'NatControlRulesUsersArgsDict']]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zia/about-nat-control)
        * [API documentation](https://help.zscaler.com/zia/nat-control-policy#/dnatRules-get)

        The **zia_nat_control_rules** resource allows the creation and management of NAT Control rules in the Zscaler Internet Access.

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_nat_control_rules** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/natControlRules:NatControlRules example <rule_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/natControlRules:NatControlRules example <rule_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] default_rule: If set to true, the default rule is applied
        :param pulumi.Input[Union['NatControlRulesDepartmentsArgs', 'NatControlRulesDepartmentsArgsDict']] departments: list of departments for which rule must be applied
        :param pulumi.Input[builtins.str] description: Additional information about the rule
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_addresses: Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input[Union['NatControlRulesDestIpGroupsArgs', 'NatControlRulesDestIpGroupsArgsDict']] dest_ip_groups: list of destination ip groups
        :param pulumi.Input[Union['NatControlRulesDestIpv6GroupsArgs', 'NatControlRulesDestIpv6GroupsArgsDict']] dest_ipv6_groups: list of destination ipv6 groups
        :param pulumi.Input[Union['NatControlRulesDeviceGroupsArgs', 'NatControlRulesDeviceGroupsArgsDict']] device_groups: This field is applicable for devices that are managed using Zscaler Client Connector.
        :param pulumi.Input[Union['NatControlRulesDevicesArgs', 'NatControlRulesDevicesArgsDict']] devices: Name-ID pairs of devices for which rule must be applied.
        :param pulumi.Input[Union['NatControlRulesGroupsArgs', 'NatControlRulesGroupsArgsDict']] groups: list of groups for which rule must be applied
        :param pulumi.Input[Union['NatControlRulesLabelsArgs', 'NatControlRulesLabelsArgsDict']] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input[Union['NatControlRulesLocationGroupsArgs', 'NatControlRulesLocationGroupsArgsDict']] location_groups: list of locations groups
        :param pulumi.Input[Union['NatControlRulesLocationsArgs', 'NatControlRulesLocationsArgsDict']] locations: list of locations for which rule must be applied
        :param pulumi.Input[builtins.str] name: Name of the nat control policy rule
        :param pulumi.Input[Union['NatControlRulesNwServiceGroupsArgs', 'NatControlRulesNwServiceGroupsArgsDict']] nw_service_groups: list of nw service groups
        :param pulumi.Input[Union['NatControlRulesNwServicesArgs', 'NatControlRulesNwServicesArgsDict']] nw_services: list of nw services
        :param pulumi.Input[builtins.int] order: Rule order number. If omitted, the rule will be added to the end of the rule set.
        :param pulumi.Input[builtins.bool] predefined: If set to true, a predefined rule is applied
        :param pulumi.Input[builtins.int] rank: Admin rank of the nat control policy rule
        :param pulumi.Input[builtins.str] redirect_fqdn: The action the nat control policy rule takes when packets match the rule
        :param pulumi.Input[builtins.str] redirect_ip: The action the nat control policy rule takes when packets match the rule
        :param pulumi.Input[builtins.int] redirect_port: The action the nat control policy rule takes when packets match the rule
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] res_categories: List of destination domain categories to which the rule applies
        :param pulumi.Input[Union['NatControlRulesSrcIpGroupsArgs', 'NatControlRulesSrcIpGroupsArgsDict']] src_ip_groups: list of source ip groups
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] src_ips: User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
               source IP address.
        :param pulumi.Input[Union['NatControlRulesSrcIpv6GroupsArgs', 'NatControlRulesSrcIpv6GroupsArgsDict']] src_ipv6_groups: list of source ipv6 groups
        :param pulumi.Input[builtins.str] state: Determines whether the nat control policy rule is enabled or disabled
        :param pulumi.Input[Union['NatControlRulesTimeWindowsArgs', 'NatControlRulesTimeWindowsArgsDict']] time_windows: The time interval in which the nat control policy rule applies
        :param pulumi.Input[Union['NatControlRulesUsersArgs', 'NatControlRulesUsersArgsDict']] users: list of users for which rule must be applied
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NatControlRulesArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zia/about-nat-control)
        * [API documentation](https://help.zscaler.com/zia/nat-control-policy#/dnatRules-get)

        The **zia_nat_control_rules** resource allows the creation and management of NAT Control rules in the Zscaler Internet Access.

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_nat_control_rules** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/natControlRules:NatControlRules example <rule_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/natControlRules:NatControlRules example <rule_name>
        ```

        :param str resource_name: The name of the resource.
        :param NatControlRulesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NatControlRulesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 departments: Optional[pulumi.Input[Union['NatControlRulesDepartmentsArgs', 'NatControlRulesDepartmentsArgsDict']]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input[Union['NatControlRulesDestIpGroupsArgs', 'NatControlRulesDestIpGroupsArgsDict']]] = None,
                 dest_ipv6_groups: Optional[pulumi.Input[Union['NatControlRulesDestIpv6GroupsArgs', 'NatControlRulesDestIpv6GroupsArgsDict']]] = None,
                 device_groups: Optional[pulumi.Input[Union['NatControlRulesDeviceGroupsArgs', 'NatControlRulesDeviceGroupsArgsDict']]] = None,
                 devices: Optional[pulumi.Input[Union['NatControlRulesDevicesArgs', 'NatControlRulesDevicesArgsDict']]] = None,
                 enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 groups: Optional[pulumi.Input[Union['NatControlRulesGroupsArgs', 'NatControlRulesGroupsArgsDict']]] = None,
                 labels: Optional[pulumi.Input[Union['NatControlRulesLabelsArgs', 'NatControlRulesLabelsArgsDict']]] = None,
                 location_groups: Optional[pulumi.Input[Union['NatControlRulesLocationGroupsArgs', 'NatControlRulesLocationGroupsArgsDict']]] = None,
                 locations: Optional[pulumi.Input[Union['NatControlRulesLocationsArgs', 'NatControlRulesLocationsArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nw_service_groups: Optional[pulumi.Input[Union['NatControlRulesNwServiceGroupsArgs', 'NatControlRulesNwServiceGroupsArgsDict']]] = None,
                 nw_services: Optional[pulumi.Input[Union['NatControlRulesNwServicesArgs', 'NatControlRulesNwServicesArgsDict']]] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 redirect_fqdn: Optional[pulumi.Input[builtins.str]] = None,
                 redirect_ip: Optional[pulumi.Input[builtins.str]] = None,
                 redirect_port: Optional[pulumi.Input[builtins.int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ip_groups: Optional[pulumi.Input[Union['NatControlRulesSrcIpGroupsArgs', 'NatControlRulesSrcIpGroupsArgsDict']]] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input[Union['NatControlRulesSrcIpv6GroupsArgs', 'NatControlRulesSrcIpv6GroupsArgsDict']]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 time_windows: Optional[pulumi.Input[Union['NatControlRulesTimeWindowsArgs', 'NatControlRulesTimeWindowsArgsDict']]] = None,
                 users: Optional[pulumi.Input[Union['NatControlRulesUsersArgs', 'NatControlRulesUsersArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NatControlRulesArgs.__new__(NatControlRulesArgs)

            __props__.__dict__["default_rule"] = default_rule
            __props__.__dict__["departments"] = departments
            __props__.__dict__["description"] = description
            __props__.__dict__["dest_addresses"] = dest_addresses
            __props__.__dict__["dest_countries"] = dest_countries
            __props__.__dict__["dest_ip_categories"] = dest_ip_categories
            __props__.__dict__["dest_ip_groups"] = dest_ip_groups
            __props__.__dict__["dest_ipv6_groups"] = dest_ipv6_groups
            __props__.__dict__["device_groups"] = device_groups
            __props__.__dict__["devices"] = devices
            __props__.__dict__["enable_full_logging"] = enable_full_logging
            __props__.__dict__["groups"] = groups
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location_groups"] = location_groups
            __props__.__dict__["locations"] = locations
            __props__.__dict__["name"] = name
            __props__.__dict__["nw_service_groups"] = nw_service_groups
            __props__.__dict__["nw_services"] = nw_services
            __props__.__dict__["order"] = order
            __props__.__dict__["predefined"] = predefined
            __props__.__dict__["rank"] = rank
            __props__.__dict__["redirect_fqdn"] = redirect_fqdn
            __props__.__dict__["redirect_ip"] = redirect_ip
            __props__.__dict__["redirect_port"] = redirect_port
            __props__.__dict__["res_categories"] = res_categories
            __props__.__dict__["src_ip_groups"] = src_ip_groups
            __props__.__dict__["src_ips"] = src_ips
            __props__.__dict__["src_ipv6_groups"] = src_ipv6_groups
            __props__.__dict__["state"] = state
            __props__.__dict__["time_windows"] = time_windows
            __props__.__dict__["users"] = users
            __props__.__dict__["rule_id"] = None
        super(NatControlRules, __self__).__init__(
            'zia:index/natControlRules:NatControlRules',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            default_rule: Optional[pulumi.Input[builtins.bool]] = None,
            departments: Optional[pulumi.Input[Union['NatControlRulesDepartmentsArgs', 'NatControlRulesDepartmentsArgsDict']]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dest_ip_groups: Optional[pulumi.Input[Union['NatControlRulesDestIpGroupsArgs', 'NatControlRulesDestIpGroupsArgsDict']]] = None,
            dest_ipv6_groups: Optional[pulumi.Input[Union['NatControlRulesDestIpv6GroupsArgs', 'NatControlRulesDestIpv6GroupsArgsDict']]] = None,
            device_groups: Optional[pulumi.Input[Union['NatControlRulesDeviceGroupsArgs', 'NatControlRulesDeviceGroupsArgsDict']]] = None,
            devices: Optional[pulumi.Input[Union['NatControlRulesDevicesArgs', 'NatControlRulesDevicesArgsDict']]] = None,
            enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
            groups: Optional[pulumi.Input[Union['NatControlRulesGroupsArgs', 'NatControlRulesGroupsArgsDict']]] = None,
            labels: Optional[pulumi.Input[Union['NatControlRulesLabelsArgs', 'NatControlRulesLabelsArgsDict']]] = None,
            location_groups: Optional[pulumi.Input[Union['NatControlRulesLocationGroupsArgs', 'NatControlRulesLocationGroupsArgsDict']]] = None,
            locations: Optional[pulumi.Input[Union['NatControlRulesLocationsArgs', 'NatControlRulesLocationsArgsDict']]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            nw_service_groups: Optional[pulumi.Input[Union['NatControlRulesNwServiceGroupsArgs', 'NatControlRulesNwServiceGroupsArgsDict']]] = None,
            nw_services: Optional[pulumi.Input[Union['NatControlRulesNwServicesArgs', 'NatControlRulesNwServicesArgsDict']]] = None,
            order: Optional[pulumi.Input[builtins.int]] = None,
            predefined: Optional[pulumi.Input[builtins.bool]] = None,
            rank: Optional[pulumi.Input[builtins.int]] = None,
            redirect_fqdn: Optional[pulumi.Input[builtins.str]] = None,
            redirect_ip: Optional[pulumi.Input[builtins.str]] = None,
            redirect_port: Optional[pulumi.Input[builtins.int]] = None,
            res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            rule_id: Optional[pulumi.Input[builtins.int]] = None,
            src_ip_groups: Optional[pulumi.Input[Union['NatControlRulesSrcIpGroupsArgs', 'NatControlRulesSrcIpGroupsArgsDict']]] = None,
            src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            src_ipv6_groups: Optional[pulumi.Input[Union['NatControlRulesSrcIpv6GroupsArgs', 'NatControlRulesSrcIpv6GroupsArgsDict']]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            time_windows: Optional[pulumi.Input[Union['NatControlRulesTimeWindowsArgs', 'NatControlRulesTimeWindowsArgsDict']]] = None,
            users: Optional[pulumi.Input[Union['NatControlRulesUsersArgs', 'NatControlRulesUsersArgsDict']]] = None) -> 'NatControlRules':
        """
        Get an existing NatControlRules resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] default_rule: If set to true, the default rule is applied
        :param pulumi.Input[Union['NatControlRulesDepartmentsArgs', 'NatControlRulesDepartmentsArgsDict']] departments: list of departments for which rule must be applied
        :param pulumi.Input[builtins.str] description: Additional information about the rule
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_addresses: Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input[Union['NatControlRulesDestIpGroupsArgs', 'NatControlRulesDestIpGroupsArgsDict']] dest_ip_groups: list of destination ip groups
        :param pulumi.Input[Union['NatControlRulesDestIpv6GroupsArgs', 'NatControlRulesDestIpv6GroupsArgsDict']] dest_ipv6_groups: list of destination ipv6 groups
        :param pulumi.Input[Union['NatControlRulesDeviceGroupsArgs', 'NatControlRulesDeviceGroupsArgsDict']] device_groups: This field is applicable for devices that are managed using Zscaler Client Connector.
        :param pulumi.Input[Union['NatControlRulesDevicesArgs', 'NatControlRulesDevicesArgsDict']] devices: Name-ID pairs of devices for which rule must be applied.
        :param pulumi.Input[Union['NatControlRulesGroupsArgs', 'NatControlRulesGroupsArgsDict']] groups: list of groups for which rule must be applied
        :param pulumi.Input[Union['NatControlRulesLabelsArgs', 'NatControlRulesLabelsArgsDict']] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input[Union['NatControlRulesLocationGroupsArgs', 'NatControlRulesLocationGroupsArgsDict']] location_groups: list of locations groups
        :param pulumi.Input[Union['NatControlRulesLocationsArgs', 'NatControlRulesLocationsArgsDict']] locations: list of locations for which rule must be applied
        :param pulumi.Input[builtins.str] name: Name of the nat control policy rule
        :param pulumi.Input[Union['NatControlRulesNwServiceGroupsArgs', 'NatControlRulesNwServiceGroupsArgsDict']] nw_service_groups: list of nw service groups
        :param pulumi.Input[Union['NatControlRulesNwServicesArgs', 'NatControlRulesNwServicesArgsDict']] nw_services: list of nw services
        :param pulumi.Input[builtins.int] order: Rule order number. If omitted, the rule will be added to the end of the rule set.
        :param pulumi.Input[builtins.bool] predefined: If set to true, a predefined rule is applied
        :param pulumi.Input[builtins.int] rank: Admin rank of the nat control policy rule
        :param pulumi.Input[builtins.str] redirect_fqdn: The action the nat control policy rule takes when packets match the rule
        :param pulumi.Input[builtins.str] redirect_ip: The action the nat control policy rule takes when packets match the rule
        :param pulumi.Input[builtins.int] redirect_port: The action the nat control policy rule takes when packets match the rule
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] res_categories: List of destination domain categories to which the rule applies
        :param pulumi.Input[Union['NatControlRulesSrcIpGroupsArgs', 'NatControlRulesSrcIpGroupsArgsDict']] src_ip_groups: list of source ip groups
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] src_ips: User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
               source IP address.
        :param pulumi.Input[Union['NatControlRulesSrcIpv6GroupsArgs', 'NatControlRulesSrcIpv6GroupsArgsDict']] src_ipv6_groups: list of source ipv6 groups
        :param pulumi.Input[builtins.str] state: Determines whether the nat control policy rule is enabled or disabled
        :param pulumi.Input[Union['NatControlRulesTimeWindowsArgs', 'NatControlRulesTimeWindowsArgsDict']] time_windows: The time interval in which the nat control policy rule applies
        :param pulumi.Input[Union['NatControlRulesUsersArgs', 'NatControlRulesUsersArgsDict']] users: list of users for which rule must be applied
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NatControlRulesState.__new__(_NatControlRulesState)

        __props__.__dict__["default_rule"] = default_rule
        __props__.__dict__["departments"] = departments
        __props__.__dict__["description"] = description
        __props__.__dict__["dest_addresses"] = dest_addresses
        __props__.__dict__["dest_countries"] = dest_countries
        __props__.__dict__["dest_ip_categories"] = dest_ip_categories
        __props__.__dict__["dest_ip_groups"] = dest_ip_groups
        __props__.__dict__["dest_ipv6_groups"] = dest_ipv6_groups
        __props__.__dict__["device_groups"] = device_groups
        __props__.__dict__["devices"] = devices
        __props__.__dict__["enable_full_logging"] = enable_full_logging
        __props__.__dict__["groups"] = groups
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location_groups"] = location_groups
        __props__.__dict__["locations"] = locations
        __props__.__dict__["name"] = name
        __props__.__dict__["nw_service_groups"] = nw_service_groups
        __props__.__dict__["nw_services"] = nw_services
        __props__.__dict__["order"] = order
        __props__.__dict__["predefined"] = predefined
        __props__.__dict__["rank"] = rank
        __props__.__dict__["redirect_fqdn"] = redirect_fqdn
        __props__.__dict__["redirect_ip"] = redirect_ip
        __props__.__dict__["redirect_port"] = redirect_port
        __props__.__dict__["res_categories"] = res_categories
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["src_ip_groups"] = src_ip_groups
        __props__.__dict__["src_ips"] = src_ips
        __props__.__dict__["src_ipv6_groups"] = src_ipv6_groups
        __props__.__dict__["state"] = state
        __props__.__dict__["time_windows"] = time_windows
        __props__.__dict__["users"] = users
        return NatControlRules(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        If set to true, the default rule is applied
        """
        return pulumi.get(self, "default_rule")

    @property
    @pulumi.getter
    def departments(self) -> pulumi.Output[Optional['outputs.NatControlRulesDepartments']]:
        """
        list of departments for which rule must be applied
        """
        return pulumi.get(self, "departments")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Additional information about the rule
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        """
        return pulumi.get(self, "dest_addresses")

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        countries.
        """
        return pulumi.get(self, "dest_countries")

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "dest_ip_categories")

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> pulumi.Output[Optional['outputs.NatControlRulesDestIpGroups']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "dest_ip_groups")

    @property
    @pulumi.getter(name="destIpv6Groups")
    def dest_ipv6_groups(self) -> pulumi.Output[Optional['outputs.NatControlRulesDestIpv6Groups']]:
        """
        list of destination ipv6 groups
        """
        return pulumi.get(self, "dest_ipv6_groups")

    @property
    @pulumi.getter(name="deviceGroups")
    def device_groups(self) -> pulumi.Output[Optional['outputs.NatControlRulesDeviceGroups']]:
        """
        This field is applicable for devices that are managed using Zscaler Client Connector.
        """
        return pulumi.get(self, "device_groups")

    @property
    @pulumi.getter
    def devices(self) -> pulumi.Output[Optional['outputs.NatControlRulesDevices']]:
        """
        Name-ID pairs of devices for which rule must be applied.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="enableFullLogging")
    def enable_full_logging(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "enable_full_logging")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional['outputs.NatControlRulesGroups']]:
        """
        list of groups for which rule must be applied
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional['outputs.NatControlRulesLabels']]:
        """
        list of Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> pulumi.Output[Optional['outputs.NatControlRulesLocationGroups']]:
        """
        list of locations groups
        """
        return pulumi.get(self, "location_groups")

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Output[Optional['outputs.NatControlRulesLocations']]:
        """
        list of locations for which rule must be applied
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the nat control policy rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> pulumi.Output[Optional['outputs.NatControlRulesNwServiceGroups']]:
        """
        list of nw service groups
        """
        return pulumi.get(self, "nw_service_groups")

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> pulumi.Output[Optional['outputs.NatControlRulesNwServices']]:
        """
        list of nw services
        """
        return pulumi.get(self, "nw_services")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[builtins.int]:
        """
        Rule order number. If omitted, the rule will be added to the end of the rule set.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def predefined(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        If set to true, a predefined rule is applied
        """
        return pulumi.get(self, "predefined")

    @property
    @pulumi.getter
    def rank(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        Admin rank of the nat control policy rule
        """
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="redirectFqdn")
    def redirect_fqdn(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The action the nat control policy rule takes when packets match the rule
        """
        return pulumi.get(self, "redirect_fqdn")

    @property
    @pulumi.getter(name="redirectIp")
    def redirect_ip(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The action the nat control policy rule takes when packets match the rule
        """
        return pulumi.get(self, "redirect_ip")

    @property
    @pulumi.getter(name="redirectPort")
    def redirect_port(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The action the nat control policy rule takes when packets match the rule
        """
        return pulumi.get(self, "redirect_port")

    @property
    @pulumi.getter(name="resCategories")
    def res_categories(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        List of destination domain categories to which the rule applies
        """
        return pulumi.get(self, "res_categories")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> pulumi.Output[Optional['outputs.NatControlRulesSrcIpGroups']]:
        """
        list of source ip groups
        """
        return pulumi.get(self, "src_ip_groups")

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
        source IP address.
        """
        return pulumi.get(self, "src_ips")

    @property
    @pulumi.getter(name="srcIpv6Groups")
    def src_ipv6_groups(self) -> pulumi.Output[Optional['outputs.NatControlRulesSrcIpv6Groups']]:
        """
        list of source ipv6 groups
        """
        return pulumi.get(self, "src_ipv6_groups")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Determines whether the nat control policy rule is enabled or disabled
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> pulumi.Output[Optional['outputs.NatControlRulesTimeWindows']]:
        """
        The time interval in which the nat control policy rule applies
        """
        return pulumi.get(self, "time_windows")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional['outputs.NatControlRulesUsers']]:
        """
        list of users for which rule must be applied
        """
        return pulumi.get(self, "users")

