# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FirewallIPSRuleArgs', 'FirewallIPSRule']

@pulumi.input_type
class FirewallIPSRuleArgs:
    def __init__(__self__, *,
                 order: pulumi.Input[builtins.int],
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 capture_pcap: Optional[pulumi.Input[builtins.bool]] = None,
                 default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 departments: Optional[pulumi.Input['FirewallIPSRuleDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input['FirewallIPSRuleDestIpGroupsArgs']] = None,
                 dest_ipv6_groups: Optional[pulumi.Input['FirewallIPSRuleDestIpv6GroupsArgs']] = None,
                 device_groups: Optional[pulumi.Input['FirewallIPSRuleDeviceGroupsArgs']] = None,
                 devices: Optional[pulumi.Input['FirewallIPSRuleDevicesArgs']] = None,
                 enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 groups: Optional[pulumi.Input['FirewallIPSRuleGroupsArgs']] = None,
                 labels: Optional[pulumi.Input['FirewallIPSRuleLabelsArgs']] = None,
                 location_groups: Optional[pulumi.Input['FirewallIPSRuleLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['FirewallIPSRuleLocationsArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nw_service_groups: Optional[pulumi.Input['FirewallIPSRuleNwServiceGroupsArgs']] = None,
                 nw_services: Optional[pulumi.Input['FirewallIPSRuleNwServicesArgs']] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 source_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ip_groups: Optional[pulumi.Input['FirewallIPSRuleSrcIpGroupsArgs']] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input['FirewallIPSRuleSrcIpv6GroupsArgs']] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 threat_categories: Optional[pulumi.Input['FirewallIPSRuleThreatCategoriesArgs']] = None,
                 time_windows: Optional[pulumi.Input['FirewallIPSRuleTimeWindowsArgs']] = None,
                 users: Optional[pulumi.Input['FirewallIPSRuleUsersArgs']] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallIPSRuleZpaAppSegmentArgs']]]] = None):
        """
        The set of arguments for constructing a FirewallIPSRule resource.
        :param pulumi.Input[builtins.int] order: Rule order number. If omitted, the rule will be added to the end of the rule set.
        :param pulumi.Input[builtins.str] action: The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or
               blocking the traffic or bypassing the rule.
        :param pulumi.Input[builtins.bool] capture_pcap: A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        :param pulumi.Input[builtins.bool] default_rule: If set to true, the default rule is applied
        :param pulumi.Input['FirewallIPSRuleDepartmentsArgs'] departments: list of departments for which rule must be applied
        :param pulumi.Input[builtins.str] description: Additional information about the rule
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_addresses: Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input['FirewallIPSRuleDestIpGroupsArgs'] dest_ip_groups: list of destination ip groups
        :param pulumi.Input['FirewallIPSRuleDestIpv6GroupsArgs'] dest_ipv6_groups: list of destination ip groups
        :param pulumi.Input['FirewallIPSRuleDeviceGroupsArgs'] device_groups: This field is applicable for devices that are managed using Zscaler Client Connector.
        :param pulumi.Input['FirewallIPSRuleDevicesArgs'] devices: Name-ID pairs of devices for which rule must be applied.
        :param pulumi.Input[builtins.bool] enable_full_logging: A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled,
               whereas a false value indicates that aggregate logging is enabled.
        :param pulumi.Input['FirewallIPSRuleGroupsArgs'] groups: list of groups for which rule must be applied
        :param pulumi.Input['FirewallIPSRuleLabelsArgs'] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input['FirewallIPSRuleLocationGroupsArgs'] location_groups: list of locations groups
        :param pulumi.Input['FirewallIPSRuleLocationsArgs'] locations: list of locations for which rule must be applied
        :param pulumi.Input[builtins.str] name: The name of the IPS Control rule
        :param pulumi.Input['FirewallIPSRuleNwServiceGroupsArgs'] nw_service_groups: list of nw service groups
        :param pulumi.Input['FirewallIPSRuleNwServicesArgs'] nw_services: list of nw services
        :param pulumi.Input[builtins.bool] predefined: If set to true, a predefined rule is applied
        :param pulumi.Input[builtins.int] rank: The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
               be specified for the rule.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] res_categories: URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
               to a specific URL category.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] source_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input['FirewallIPSRuleSrcIpGroupsArgs'] src_ip_groups: list of source ip groups
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] src_ips: User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
               source IP address.
        :param pulumi.Input['FirewallIPSRuleSrcIpv6GroupsArgs'] src_ipv6_groups: list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
               specific source IPv6 address group.
        :param pulumi.Input[builtins.str] state: The state of the rule indicating whether it is enabled or disabled
        :param pulumi.Input['FirewallIPSRuleThreatCategoriesArgs'] threat_categories: list of Advanced threat categories to which the rule applies
        :param pulumi.Input['FirewallIPSRuleTimeWindowsArgs'] time_windows: The time interval in which the Firewall Filtering policy rule applies
        :param pulumi.Input['FirewallIPSRuleUsersArgs'] users: list of users for which rule must be applied
        :param pulumi.Input[Sequence[pulumi.Input['FirewallIPSRuleZpaAppSegmentArgs']]] zpa_app_segments: The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
               Gateway forwarding method.
        """
        pulumi.set(__self__, "order", order)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if capture_pcap is not None:
            pulumi.set(__self__, "capture_pcap", capture_pcap)
        if default_rule is not None:
            pulumi.set(__self__, "default_rule", default_rule)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dest_addresses is not None:
            pulumi.set(__self__, "dest_addresses", dest_addresses)
        if dest_countries is not None:
            pulumi.set(__self__, "dest_countries", dest_countries)
        if dest_ip_categories is not None:
            pulumi.set(__self__, "dest_ip_categories", dest_ip_categories)
        if dest_ip_groups is not None:
            pulumi.set(__self__, "dest_ip_groups", dest_ip_groups)
        if dest_ipv6_groups is not None:
            pulumi.set(__self__, "dest_ipv6_groups", dest_ipv6_groups)
        if device_groups is not None:
            pulumi.set(__self__, "device_groups", device_groups)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if enable_full_logging is not None:
            pulumi.set(__self__, "enable_full_logging", enable_full_logging)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nw_service_groups is not None:
            pulumi.set(__self__, "nw_service_groups", nw_service_groups)
        if nw_services is not None:
            pulumi.set(__self__, "nw_services", nw_services)
        if predefined is not None:
            pulumi.set(__self__, "predefined", predefined)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if res_categories is not None:
            pulumi.set(__self__, "res_categories", res_categories)
        if source_countries is not None:
            pulumi.set(__self__, "source_countries", source_countries)
        if src_ip_groups is not None:
            pulumi.set(__self__, "src_ip_groups", src_ip_groups)
        if src_ips is not None:
            pulumi.set(__self__, "src_ips", src_ips)
        if src_ipv6_groups is not None:
            pulumi.set(__self__, "src_ipv6_groups", src_ipv6_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if threat_categories is not None:
            pulumi.set(__self__, "threat_categories", threat_categories)
        if time_windows is not None:
            pulumi.set(__self__, "time_windows", time_windows)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if zpa_app_segments is not None:
            pulumi.set(__self__, "zpa_app_segments", zpa_app_segments)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[builtins.int]:
        """
        Rule order number. If omitted, the rule will be added to the end of the rule set.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or
        blocking the traffic or bypassing the rule.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="capturePcap")
    def capture_pcap(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        """
        return pulumi.get(self, "capture_pcap")

    @capture_pcap.setter
    def capture_pcap(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "capture_pcap", value)

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If set to true, the default rule is applied
        """
        return pulumi.get(self, "default_rule")

    @default_rule.setter
    def default_rule(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "default_rule", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['FirewallIPSRuleDepartmentsArgs']]:
        """
        list of departments for which rule must be applied
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['FirewallIPSRuleDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Additional information about the rule
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        """
        return pulumi.get(self, "dest_addresses")

    @dest_addresses.setter
    def dest_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_addresses", value)

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        countries.
        """
        return pulumi.get(self, "dest_countries")

    @dest_countries.setter
    def dest_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_countries", value)

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "dest_ip_categories")

    @dest_ip_categories.setter
    def dest_ip_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_ip_categories", value)

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> Optional[pulumi.Input['FirewallIPSRuleDestIpGroupsArgs']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "dest_ip_groups")

    @dest_ip_groups.setter
    def dest_ip_groups(self, value: Optional[pulumi.Input['FirewallIPSRuleDestIpGroupsArgs']]):
        pulumi.set(self, "dest_ip_groups", value)

    @property
    @pulumi.getter(name="destIpv6Groups")
    def dest_ipv6_groups(self) -> Optional[pulumi.Input['FirewallIPSRuleDestIpv6GroupsArgs']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "dest_ipv6_groups")

    @dest_ipv6_groups.setter
    def dest_ipv6_groups(self, value: Optional[pulumi.Input['FirewallIPSRuleDestIpv6GroupsArgs']]):
        pulumi.set(self, "dest_ipv6_groups", value)

    @property
    @pulumi.getter(name="deviceGroups")
    def device_groups(self) -> Optional[pulumi.Input['FirewallIPSRuleDeviceGroupsArgs']]:
        """
        This field is applicable for devices that are managed using Zscaler Client Connector.
        """
        return pulumi.get(self, "device_groups")

    @device_groups.setter
    def device_groups(self, value: Optional[pulumi.Input['FirewallIPSRuleDeviceGroupsArgs']]):
        pulumi.set(self, "device_groups", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input['FirewallIPSRuleDevicesArgs']]:
        """
        Name-ID pairs of devices for which rule must be applied.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input['FirewallIPSRuleDevicesArgs']]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="enableFullLogging")
    def enable_full_logging(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled,
        whereas a false value indicates that aggregate logging is enabled.
        """
        return pulumi.get(self, "enable_full_logging")

    @enable_full_logging.setter
    def enable_full_logging(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_full_logging", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['FirewallIPSRuleGroupsArgs']]:
        """
        list of groups for which rule must be applied
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['FirewallIPSRuleGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['FirewallIPSRuleLabelsArgs']]:
        """
        list of Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['FirewallIPSRuleLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['FirewallIPSRuleLocationGroupsArgs']]:
        """
        list of locations groups
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['FirewallIPSRuleLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['FirewallIPSRuleLocationsArgs']]:
        """
        list of locations for which rule must be applied
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['FirewallIPSRuleLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the IPS Control rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> Optional[pulumi.Input['FirewallIPSRuleNwServiceGroupsArgs']]:
        """
        list of nw service groups
        """
        return pulumi.get(self, "nw_service_groups")

    @nw_service_groups.setter
    def nw_service_groups(self, value: Optional[pulumi.Input['FirewallIPSRuleNwServiceGroupsArgs']]):
        pulumi.set(self, "nw_service_groups", value)

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> Optional[pulumi.Input['FirewallIPSRuleNwServicesArgs']]:
        """
        list of nw services
        """
        return pulumi.get(self, "nw_services")

    @nw_services.setter
    def nw_services(self, value: Optional[pulumi.Input['FirewallIPSRuleNwServicesArgs']]):
        pulumi.set(self, "nw_services", value)

    @property
    @pulumi.getter
    def predefined(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If set to true, a predefined rule is applied
        """
        return pulumi.get(self, "predefined")

    @predefined.setter
    def predefined(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "predefined", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
        be specified for the rule.
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="resCategories")
    def res_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
        to a specific URL category.
        """
        return pulumi.get(self, "res_categories")

    @res_categories.setter
    def res_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "res_categories", value)

    @property
    @pulumi.getter(name="sourceCountries")
    def source_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        countries.
        """
        return pulumi.get(self, "source_countries")

    @source_countries.setter
    def source_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "source_countries", value)

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> Optional[pulumi.Input['FirewallIPSRuleSrcIpGroupsArgs']]:
        """
        list of source ip groups
        """
        return pulumi.get(self, "src_ip_groups")

    @src_ip_groups.setter
    def src_ip_groups(self, value: Optional[pulumi.Input['FirewallIPSRuleSrcIpGroupsArgs']]):
        pulumi.set(self, "src_ip_groups", value)

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
        source IP address.
        """
        return pulumi.get(self, "src_ips")

    @src_ips.setter
    def src_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "src_ips", value)

    @property
    @pulumi.getter(name="srcIpv6Groups")
    def src_ipv6_groups(self) -> Optional[pulumi.Input['FirewallIPSRuleSrcIpv6GroupsArgs']]:
        """
        list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
        specific source IPv6 address group.
        """
        return pulumi.get(self, "src_ipv6_groups")

    @src_ipv6_groups.setter
    def src_ipv6_groups(self, value: Optional[pulumi.Input['FirewallIPSRuleSrcIpv6GroupsArgs']]):
        pulumi.set(self, "src_ipv6_groups", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The state of the rule indicating whether it is enabled or disabled
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="threatCategories")
    def threat_categories(self) -> Optional[pulumi.Input['FirewallIPSRuleThreatCategoriesArgs']]:
        """
        list of Advanced threat categories to which the rule applies
        """
        return pulumi.get(self, "threat_categories")

    @threat_categories.setter
    def threat_categories(self, value: Optional[pulumi.Input['FirewallIPSRuleThreatCategoriesArgs']]):
        pulumi.set(self, "threat_categories", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Optional[pulumi.Input['FirewallIPSRuleTimeWindowsArgs']]:
        """
        The time interval in which the Firewall Filtering policy rule applies
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: Optional[pulumi.Input['FirewallIPSRuleTimeWindowsArgs']]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['FirewallIPSRuleUsersArgs']]:
        """
        list of users for which rule must be applied
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['FirewallIPSRuleUsersArgs']]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="zpaAppSegments")
    def zpa_app_segments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallIPSRuleZpaAppSegmentArgs']]]]:
        """
        The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
        Gateway forwarding method.
        """
        return pulumi.get(self, "zpa_app_segments")

    @zpa_app_segments.setter
    def zpa_app_segments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallIPSRuleZpaAppSegmentArgs']]]]):
        pulumi.set(self, "zpa_app_segments", value)


@pulumi.input_type
class _FirewallIPSRuleState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 capture_pcap: Optional[pulumi.Input[builtins.bool]] = None,
                 default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 departments: Optional[pulumi.Input['FirewallIPSRuleDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input['FirewallIPSRuleDestIpGroupsArgs']] = None,
                 dest_ipv6_groups: Optional[pulumi.Input['FirewallIPSRuleDestIpv6GroupsArgs']] = None,
                 device_groups: Optional[pulumi.Input['FirewallIPSRuleDeviceGroupsArgs']] = None,
                 devices: Optional[pulumi.Input['FirewallIPSRuleDevicesArgs']] = None,
                 enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 groups: Optional[pulumi.Input['FirewallIPSRuleGroupsArgs']] = None,
                 labels: Optional[pulumi.Input['FirewallIPSRuleLabelsArgs']] = None,
                 location_groups: Optional[pulumi.Input['FirewallIPSRuleLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['FirewallIPSRuleLocationsArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nw_service_groups: Optional[pulumi.Input['FirewallIPSRuleNwServiceGroupsArgs']] = None,
                 nw_services: Optional[pulumi.Input['FirewallIPSRuleNwServicesArgs']] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 rule_id: Optional[pulumi.Input[builtins.int]] = None,
                 source_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ip_groups: Optional[pulumi.Input['FirewallIPSRuleSrcIpGroupsArgs']] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input['FirewallIPSRuleSrcIpv6GroupsArgs']] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 threat_categories: Optional[pulumi.Input['FirewallIPSRuleThreatCategoriesArgs']] = None,
                 time_windows: Optional[pulumi.Input['FirewallIPSRuleTimeWindowsArgs']] = None,
                 users: Optional[pulumi.Input['FirewallIPSRuleUsersArgs']] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallIPSRuleZpaAppSegmentArgs']]]] = None):
        """
        Input properties used for looking up and filtering FirewallIPSRule resources.
        :param pulumi.Input[builtins.str] action: The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or
               blocking the traffic or bypassing the rule.
        :param pulumi.Input[builtins.bool] capture_pcap: A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        :param pulumi.Input[builtins.bool] default_rule: If set to true, the default rule is applied
        :param pulumi.Input['FirewallIPSRuleDepartmentsArgs'] departments: list of departments for which rule must be applied
        :param pulumi.Input[builtins.str] description: Additional information about the rule
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_addresses: Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input['FirewallIPSRuleDestIpGroupsArgs'] dest_ip_groups: list of destination ip groups
        :param pulumi.Input['FirewallIPSRuleDestIpv6GroupsArgs'] dest_ipv6_groups: list of destination ip groups
        :param pulumi.Input['FirewallIPSRuleDeviceGroupsArgs'] device_groups: This field is applicable for devices that are managed using Zscaler Client Connector.
        :param pulumi.Input['FirewallIPSRuleDevicesArgs'] devices: Name-ID pairs of devices for which rule must be applied.
        :param pulumi.Input[builtins.bool] enable_full_logging: A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled,
               whereas a false value indicates that aggregate logging is enabled.
        :param pulumi.Input['FirewallIPSRuleGroupsArgs'] groups: list of groups for which rule must be applied
        :param pulumi.Input['FirewallIPSRuleLabelsArgs'] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input['FirewallIPSRuleLocationGroupsArgs'] location_groups: list of locations groups
        :param pulumi.Input['FirewallIPSRuleLocationsArgs'] locations: list of locations for which rule must be applied
        :param pulumi.Input[builtins.str] name: The name of the IPS Control rule
        :param pulumi.Input['FirewallIPSRuleNwServiceGroupsArgs'] nw_service_groups: list of nw service groups
        :param pulumi.Input['FirewallIPSRuleNwServicesArgs'] nw_services: list of nw services
        :param pulumi.Input[builtins.int] order: Rule order number. If omitted, the rule will be added to the end of the rule set.
        :param pulumi.Input[builtins.bool] predefined: If set to true, a predefined rule is applied
        :param pulumi.Input[builtins.int] rank: The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
               be specified for the rule.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] res_categories: URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
               to a specific URL category.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] source_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input['FirewallIPSRuleSrcIpGroupsArgs'] src_ip_groups: list of source ip groups
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] src_ips: User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
               source IP address.
        :param pulumi.Input['FirewallIPSRuleSrcIpv6GroupsArgs'] src_ipv6_groups: list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
               specific source IPv6 address group.
        :param pulumi.Input[builtins.str] state: The state of the rule indicating whether it is enabled or disabled
        :param pulumi.Input['FirewallIPSRuleThreatCategoriesArgs'] threat_categories: list of Advanced threat categories to which the rule applies
        :param pulumi.Input['FirewallIPSRuleTimeWindowsArgs'] time_windows: The time interval in which the Firewall Filtering policy rule applies
        :param pulumi.Input['FirewallIPSRuleUsersArgs'] users: list of users for which rule must be applied
        :param pulumi.Input[Sequence[pulumi.Input['FirewallIPSRuleZpaAppSegmentArgs']]] zpa_app_segments: The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
               Gateway forwarding method.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if capture_pcap is not None:
            pulumi.set(__self__, "capture_pcap", capture_pcap)
        if default_rule is not None:
            pulumi.set(__self__, "default_rule", default_rule)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dest_addresses is not None:
            pulumi.set(__self__, "dest_addresses", dest_addresses)
        if dest_countries is not None:
            pulumi.set(__self__, "dest_countries", dest_countries)
        if dest_ip_categories is not None:
            pulumi.set(__self__, "dest_ip_categories", dest_ip_categories)
        if dest_ip_groups is not None:
            pulumi.set(__self__, "dest_ip_groups", dest_ip_groups)
        if dest_ipv6_groups is not None:
            pulumi.set(__self__, "dest_ipv6_groups", dest_ipv6_groups)
        if device_groups is not None:
            pulumi.set(__self__, "device_groups", device_groups)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if enable_full_logging is not None:
            pulumi.set(__self__, "enable_full_logging", enable_full_logging)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nw_service_groups is not None:
            pulumi.set(__self__, "nw_service_groups", nw_service_groups)
        if nw_services is not None:
            pulumi.set(__self__, "nw_services", nw_services)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if predefined is not None:
            pulumi.set(__self__, "predefined", predefined)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if res_categories is not None:
            pulumi.set(__self__, "res_categories", res_categories)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if source_countries is not None:
            pulumi.set(__self__, "source_countries", source_countries)
        if src_ip_groups is not None:
            pulumi.set(__self__, "src_ip_groups", src_ip_groups)
        if src_ips is not None:
            pulumi.set(__self__, "src_ips", src_ips)
        if src_ipv6_groups is not None:
            pulumi.set(__self__, "src_ipv6_groups", src_ipv6_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if threat_categories is not None:
            pulumi.set(__self__, "threat_categories", threat_categories)
        if time_windows is not None:
            pulumi.set(__self__, "time_windows", time_windows)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if zpa_app_segments is not None:
            pulumi.set(__self__, "zpa_app_segments", zpa_app_segments)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or
        blocking the traffic or bypassing the rule.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="capturePcap")
    def capture_pcap(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        """
        return pulumi.get(self, "capture_pcap")

    @capture_pcap.setter
    def capture_pcap(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "capture_pcap", value)

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If set to true, the default rule is applied
        """
        return pulumi.get(self, "default_rule")

    @default_rule.setter
    def default_rule(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "default_rule", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['FirewallIPSRuleDepartmentsArgs']]:
        """
        list of departments for which rule must be applied
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['FirewallIPSRuleDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Additional information about the rule
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        """
        return pulumi.get(self, "dest_addresses")

    @dest_addresses.setter
    def dest_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_addresses", value)

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        countries.
        """
        return pulumi.get(self, "dest_countries")

    @dest_countries.setter
    def dest_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_countries", value)

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "dest_ip_categories")

    @dest_ip_categories.setter
    def dest_ip_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_ip_categories", value)

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> Optional[pulumi.Input['FirewallIPSRuleDestIpGroupsArgs']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "dest_ip_groups")

    @dest_ip_groups.setter
    def dest_ip_groups(self, value: Optional[pulumi.Input['FirewallIPSRuleDestIpGroupsArgs']]):
        pulumi.set(self, "dest_ip_groups", value)

    @property
    @pulumi.getter(name="destIpv6Groups")
    def dest_ipv6_groups(self) -> Optional[pulumi.Input['FirewallIPSRuleDestIpv6GroupsArgs']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "dest_ipv6_groups")

    @dest_ipv6_groups.setter
    def dest_ipv6_groups(self, value: Optional[pulumi.Input['FirewallIPSRuleDestIpv6GroupsArgs']]):
        pulumi.set(self, "dest_ipv6_groups", value)

    @property
    @pulumi.getter(name="deviceGroups")
    def device_groups(self) -> Optional[pulumi.Input['FirewallIPSRuleDeviceGroupsArgs']]:
        """
        This field is applicable for devices that are managed using Zscaler Client Connector.
        """
        return pulumi.get(self, "device_groups")

    @device_groups.setter
    def device_groups(self, value: Optional[pulumi.Input['FirewallIPSRuleDeviceGroupsArgs']]):
        pulumi.set(self, "device_groups", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input['FirewallIPSRuleDevicesArgs']]:
        """
        Name-ID pairs of devices for which rule must be applied.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input['FirewallIPSRuleDevicesArgs']]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="enableFullLogging")
    def enable_full_logging(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled,
        whereas a false value indicates that aggregate logging is enabled.
        """
        return pulumi.get(self, "enable_full_logging")

    @enable_full_logging.setter
    def enable_full_logging(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_full_logging", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['FirewallIPSRuleGroupsArgs']]:
        """
        list of groups for which rule must be applied
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['FirewallIPSRuleGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['FirewallIPSRuleLabelsArgs']]:
        """
        list of Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['FirewallIPSRuleLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['FirewallIPSRuleLocationGroupsArgs']]:
        """
        list of locations groups
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['FirewallIPSRuleLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['FirewallIPSRuleLocationsArgs']]:
        """
        list of locations for which rule must be applied
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['FirewallIPSRuleLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the IPS Control rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> Optional[pulumi.Input['FirewallIPSRuleNwServiceGroupsArgs']]:
        """
        list of nw service groups
        """
        return pulumi.get(self, "nw_service_groups")

    @nw_service_groups.setter
    def nw_service_groups(self, value: Optional[pulumi.Input['FirewallIPSRuleNwServiceGroupsArgs']]):
        pulumi.set(self, "nw_service_groups", value)

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> Optional[pulumi.Input['FirewallIPSRuleNwServicesArgs']]:
        """
        list of nw services
        """
        return pulumi.get(self, "nw_services")

    @nw_services.setter
    def nw_services(self, value: Optional[pulumi.Input['FirewallIPSRuleNwServicesArgs']]):
        pulumi.set(self, "nw_services", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Rule order number. If omitted, the rule will be added to the end of the rule set.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def predefined(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If set to true, a predefined rule is applied
        """
        return pulumi.get(self, "predefined")

    @predefined.setter
    def predefined(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "predefined", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
        be specified for the rule.
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="resCategories")
    def res_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
        to a specific URL category.
        """
        return pulumi.get(self, "res_categories")

    @res_categories.setter
    def res_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "res_categories", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="sourceCountries")
    def source_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        countries.
        """
        return pulumi.get(self, "source_countries")

    @source_countries.setter
    def source_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "source_countries", value)

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> Optional[pulumi.Input['FirewallIPSRuleSrcIpGroupsArgs']]:
        """
        list of source ip groups
        """
        return pulumi.get(self, "src_ip_groups")

    @src_ip_groups.setter
    def src_ip_groups(self, value: Optional[pulumi.Input['FirewallIPSRuleSrcIpGroupsArgs']]):
        pulumi.set(self, "src_ip_groups", value)

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
        source IP address.
        """
        return pulumi.get(self, "src_ips")

    @src_ips.setter
    def src_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "src_ips", value)

    @property
    @pulumi.getter(name="srcIpv6Groups")
    def src_ipv6_groups(self) -> Optional[pulumi.Input['FirewallIPSRuleSrcIpv6GroupsArgs']]:
        """
        list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
        specific source IPv6 address group.
        """
        return pulumi.get(self, "src_ipv6_groups")

    @src_ipv6_groups.setter
    def src_ipv6_groups(self, value: Optional[pulumi.Input['FirewallIPSRuleSrcIpv6GroupsArgs']]):
        pulumi.set(self, "src_ipv6_groups", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The state of the rule indicating whether it is enabled or disabled
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="threatCategories")
    def threat_categories(self) -> Optional[pulumi.Input['FirewallIPSRuleThreatCategoriesArgs']]:
        """
        list of Advanced threat categories to which the rule applies
        """
        return pulumi.get(self, "threat_categories")

    @threat_categories.setter
    def threat_categories(self, value: Optional[pulumi.Input['FirewallIPSRuleThreatCategoriesArgs']]):
        pulumi.set(self, "threat_categories", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Optional[pulumi.Input['FirewallIPSRuleTimeWindowsArgs']]:
        """
        The time interval in which the Firewall Filtering policy rule applies
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: Optional[pulumi.Input['FirewallIPSRuleTimeWindowsArgs']]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['FirewallIPSRuleUsersArgs']]:
        """
        list of users for which rule must be applied
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['FirewallIPSRuleUsersArgs']]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="zpaAppSegments")
    def zpa_app_segments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallIPSRuleZpaAppSegmentArgs']]]]:
        """
        The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
        Gateway forwarding method.
        """
        return pulumi.get(self, "zpa_app_segments")

    @zpa_app_segments.setter
    def zpa_app_segments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallIPSRuleZpaAppSegmentArgs']]]]):
        pulumi.set(self, "zpa_app_segments", value)


@pulumi.type_token("zia:index/firewallIPSRule:FirewallIPSRule")
class FirewallIPSRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 capture_pcap: Optional[pulumi.Input[builtins.bool]] = None,
                 default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 departments: Optional[pulumi.Input[Union['FirewallIPSRuleDepartmentsArgs', 'FirewallIPSRuleDepartmentsArgsDict']]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input[Union['FirewallIPSRuleDestIpGroupsArgs', 'FirewallIPSRuleDestIpGroupsArgsDict']]] = None,
                 dest_ipv6_groups: Optional[pulumi.Input[Union['FirewallIPSRuleDestIpv6GroupsArgs', 'FirewallIPSRuleDestIpv6GroupsArgsDict']]] = None,
                 device_groups: Optional[pulumi.Input[Union['FirewallIPSRuleDeviceGroupsArgs', 'FirewallIPSRuleDeviceGroupsArgsDict']]] = None,
                 devices: Optional[pulumi.Input[Union['FirewallIPSRuleDevicesArgs', 'FirewallIPSRuleDevicesArgsDict']]] = None,
                 enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 groups: Optional[pulumi.Input[Union['FirewallIPSRuleGroupsArgs', 'FirewallIPSRuleGroupsArgsDict']]] = None,
                 labels: Optional[pulumi.Input[Union['FirewallIPSRuleLabelsArgs', 'FirewallIPSRuleLabelsArgsDict']]] = None,
                 location_groups: Optional[pulumi.Input[Union['FirewallIPSRuleLocationGroupsArgs', 'FirewallIPSRuleLocationGroupsArgsDict']]] = None,
                 locations: Optional[pulumi.Input[Union['FirewallIPSRuleLocationsArgs', 'FirewallIPSRuleLocationsArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nw_service_groups: Optional[pulumi.Input[Union['FirewallIPSRuleNwServiceGroupsArgs', 'FirewallIPSRuleNwServiceGroupsArgsDict']]] = None,
                 nw_services: Optional[pulumi.Input[Union['FirewallIPSRuleNwServicesArgs', 'FirewallIPSRuleNwServicesArgsDict']]] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 source_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ip_groups: Optional[pulumi.Input[Union['FirewallIPSRuleSrcIpGroupsArgs', 'FirewallIPSRuleSrcIpGroupsArgsDict']]] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input[Union['FirewallIPSRuleSrcIpv6GroupsArgs', 'FirewallIPSRuleSrcIpv6GroupsArgsDict']]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 threat_categories: Optional[pulumi.Input[Union['FirewallIPSRuleThreatCategoriesArgs', 'FirewallIPSRuleThreatCategoriesArgsDict']]] = None,
                 time_windows: Optional[pulumi.Input[Union['FirewallIPSRuleTimeWindowsArgs', 'FirewallIPSRuleTimeWindowsArgsDict']]] = None,
                 users: Optional[pulumi.Input[Union['FirewallIPSRuleUsersArgs', 'FirewallIPSRuleUsersArgsDict']]] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FirewallIPSRuleZpaAppSegmentArgs', 'FirewallIPSRuleZpaAppSegmentArgsDict']]]]] = None,
                 __props__=None):
        """
        Create a FirewallIPSRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] action: The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or
               blocking the traffic or bypassing the rule.
        :param pulumi.Input[builtins.bool] capture_pcap: A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        :param pulumi.Input[builtins.bool] default_rule: If set to true, the default rule is applied
        :param pulumi.Input[Union['FirewallIPSRuleDepartmentsArgs', 'FirewallIPSRuleDepartmentsArgsDict']] departments: list of departments for which rule must be applied
        :param pulumi.Input[builtins.str] description: Additional information about the rule
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_addresses: Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input[Union['FirewallIPSRuleDestIpGroupsArgs', 'FirewallIPSRuleDestIpGroupsArgsDict']] dest_ip_groups: list of destination ip groups
        :param pulumi.Input[Union['FirewallIPSRuleDestIpv6GroupsArgs', 'FirewallIPSRuleDestIpv6GroupsArgsDict']] dest_ipv6_groups: list of destination ip groups
        :param pulumi.Input[Union['FirewallIPSRuleDeviceGroupsArgs', 'FirewallIPSRuleDeviceGroupsArgsDict']] device_groups: This field is applicable for devices that are managed using Zscaler Client Connector.
        :param pulumi.Input[Union['FirewallIPSRuleDevicesArgs', 'FirewallIPSRuleDevicesArgsDict']] devices: Name-ID pairs of devices for which rule must be applied.
        :param pulumi.Input[builtins.bool] enable_full_logging: A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled,
               whereas a false value indicates that aggregate logging is enabled.
        :param pulumi.Input[Union['FirewallIPSRuleGroupsArgs', 'FirewallIPSRuleGroupsArgsDict']] groups: list of groups for which rule must be applied
        :param pulumi.Input[Union['FirewallIPSRuleLabelsArgs', 'FirewallIPSRuleLabelsArgsDict']] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input[Union['FirewallIPSRuleLocationGroupsArgs', 'FirewallIPSRuleLocationGroupsArgsDict']] location_groups: list of locations groups
        :param pulumi.Input[Union['FirewallIPSRuleLocationsArgs', 'FirewallIPSRuleLocationsArgsDict']] locations: list of locations for which rule must be applied
        :param pulumi.Input[builtins.str] name: The name of the IPS Control rule
        :param pulumi.Input[Union['FirewallIPSRuleNwServiceGroupsArgs', 'FirewallIPSRuleNwServiceGroupsArgsDict']] nw_service_groups: list of nw service groups
        :param pulumi.Input[Union['FirewallIPSRuleNwServicesArgs', 'FirewallIPSRuleNwServicesArgsDict']] nw_services: list of nw services
        :param pulumi.Input[builtins.int] order: Rule order number. If omitted, the rule will be added to the end of the rule set.
        :param pulumi.Input[builtins.bool] predefined: If set to true, a predefined rule is applied
        :param pulumi.Input[builtins.int] rank: The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
               be specified for the rule.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] res_categories: URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
               to a specific URL category.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] source_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input[Union['FirewallIPSRuleSrcIpGroupsArgs', 'FirewallIPSRuleSrcIpGroupsArgsDict']] src_ip_groups: list of source ip groups
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] src_ips: User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
               source IP address.
        :param pulumi.Input[Union['FirewallIPSRuleSrcIpv6GroupsArgs', 'FirewallIPSRuleSrcIpv6GroupsArgsDict']] src_ipv6_groups: list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
               specific source IPv6 address group.
        :param pulumi.Input[builtins.str] state: The state of the rule indicating whether it is enabled or disabled
        :param pulumi.Input[Union['FirewallIPSRuleThreatCategoriesArgs', 'FirewallIPSRuleThreatCategoriesArgsDict']] threat_categories: list of Advanced threat categories to which the rule applies
        :param pulumi.Input[Union['FirewallIPSRuleTimeWindowsArgs', 'FirewallIPSRuleTimeWindowsArgsDict']] time_windows: The time interval in which the Firewall Filtering policy rule applies
        :param pulumi.Input[Union['FirewallIPSRuleUsersArgs', 'FirewallIPSRuleUsersArgsDict']] users: list of users for which rule must be applied
        :param pulumi.Input[Sequence[pulumi.Input[Union['FirewallIPSRuleZpaAppSegmentArgs', 'FirewallIPSRuleZpaAppSegmentArgsDict']]]] zpa_app_segments: The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
               Gateway forwarding method.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FirewallIPSRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FirewallIPSRule resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FirewallIPSRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallIPSRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 capture_pcap: Optional[pulumi.Input[builtins.bool]] = None,
                 default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 departments: Optional[pulumi.Input[Union['FirewallIPSRuleDepartmentsArgs', 'FirewallIPSRuleDepartmentsArgsDict']]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input[Union['FirewallIPSRuleDestIpGroupsArgs', 'FirewallIPSRuleDestIpGroupsArgsDict']]] = None,
                 dest_ipv6_groups: Optional[pulumi.Input[Union['FirewallIPSRuleDestIpv6GroupsArgs', 'FirewallIPSRuleDestIpv6GroupsArgsDict']]] = None,
                 device_groups: Optional[pulumi.Input[Union['FirewallIPSRuleDeviceGroupsArgs', 'FirewallIPSRuleDeviceGroupsArgsDict']]] = None,
                 devices: Optional[pulumi.Input[Union['FirewallIPSRuleDevicesArgs', 'FirewallIPSRuleDevicesArgsDict']]] = None,
                 enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 groups: Optional[pulumi.Input[Union['FirewallIPSRuleGroupsArgs', 'FirewallIPSRuleGroupsArgsDict']]] = None,
                 labels: Optional[pulumi.Input[Union['FirewallIPSRuleLabelsArgs', 'FirewallIPSRuleLabelsArgsDict']]] = None,
                 location_groups: Optional[pulumi.Input[Union['FirewallIPSRuleLocationGroupsArgs', 'FirewallIPSRuleLocationGroupsArgsDict']]] = None,
                 locations: Optional[pulumi.Input[Union['FirewallIPSRuleLocationsArgs', 'FirewallIPSRuleLocationsArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nw_service_groups: Optional[pulumi.Input[Union['FirewallIPSRuleNwServiceGroupsArgs', 'FirewallIPSRuleNwServiceGroupsArgsDict']]] = None,
                 nw_services: Optional[pulumi.Input[Union['FirewallIPSRuleNwServicesArgs', 'FirewallIPSRuleNwServicesArgsDict']]] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 source_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ip_groups: Optional[pulumi.Input[Union['FirewallIPSRuleSrcIpGroupsArgs', 'FirewallIPSRuleSrcIpGroupsArgsDict']]] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input[Union['FirewallIPSRuleSrcIpv6GroupsArgs', 'FirewallIPSRuleSrcIpv6GroupsArgsDict']]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 threat_categories: Optional[pulumi.Input[Union['FirewallIPSRuleThreatCategoriesArgs', 'FirewallIPSRuleThreatCategoriesArgsDict']]] = None,
                 time_windows: Optional[pulumi.Input[Union['FirewallIPSRuleTimeWindowsArgs', 'FirewallIPSRuleTimeWindowsArgsDict']]] = None,
                 users: Optional[pulumi.Input[Union['FirewallIPSRuleUsersArgs', 'FirewallIPSRuleUsersArgsDict']]] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FirewallIPSRuleZpaAppSegmentArgs', 'FirewallIPSRuleZpaAppSegmentArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallIPSRuleArgs.__new__(FirewallIPSRuleArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["capture_pcap"] = capture_pcap
            __props__.__dict__["default_rule"] = default_rule
            __props__.__dict__["departments"] = departments
            __props__.__dict__["description"] = description
            __props__.__dict__["dest_addresses"] = dest_addresses
            __props__.__dict__["dest_countries"] = dest_countries
            __props__.__dict__["dest_ip_categories"] = dest_ip_categories
            __props__.__dict__["dest_ip_groups"] = dest_ip_groups
            __props__.__dict__["dest_ipv6_groups"] = dest_ipv6_groups
            __props__.__dict__["device_groups"] = device_groups
            __props__.__dict__["devices"] = devices
            __props__.__dict__["enable_full_logging"] = enable_full_logging
            __props__.__dict__["groups"] = groups
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location_groups"] = location_groups
            __props__.__dict__["locations"] = locations
            __props__.__dict__["name"] = name
            __props__.__dict__["nw_service_groups"] = nw_service_groups
            __props__.__dict__["nw_services"] = nw_services
            if order is None and not opts.urn:
                raise TypeError("Missing required property 'order'")
            __props__.__dict__["order"] = order
            __props__.__dict__["predefined"] = predefined
            __props__.__dict__["rank"] = rank
            __props__.__dict__["res_categories"] = res_categories
            __props__.__dict__["source_countries"] = source_countries
            __props__.__dict__["src_ip_groups"] = src_ip_groups
            __props__.__dict__["src_ips"] = src_ips
            __props__.__dict__["src_ipv6_groups"] = src_ipv6_groups
            __props__.__dict__["state"] = state
            __props__.__dict__["threat_categories"] = threat_categories
            __props__.__dict__["time_windows"] = time_windows
            __props__.__dict__["users"] = users
            __props__.__dict__["zpa_app_segments"] = zpa_app_segments
            __props__.__dict__["rule_id"] = None
        super(FirewallIPSRule, __self__).__init__(
            'zia:index/firewallIPSRule:FirewallIPSRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[builtins.str]] = None,
            capture_pcap: Optional[pulumi.Input[builtins.bool]] = None,
            default_rule: Optional[pulumi.Input[builtins.bool]] = None,
            departments: Optional[pulumi.Input[Union['FirewallIPSRuleDepartmentsArgs', 'FirewallIPSRuleDepartmentsArgsDict']]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dest_ip_groups: Optional[pulumi.Input[Union['FirewallIPSRuleDestIpGroupsArgs', 'FirewallIPSRuleDestIpGroupsArgsDict']]] = None,
            dest_ipv6_groups: Optional[pulumi.Input[Union['FirewallIPSRuleDestIpv6GroupsArgs', 'FirewallIPSRuleDestIpv6GroupsArgsDict']]] = None,
            device_groups: Optional[pulumi.Input[Union['FirewallIPSRuleDeviceGroupsArgs', 'FirewallIPSRuleDeviceGroupsArgsDict']]] = None,
            devices: Optional[pulumi.Input[Union['FirewallIPSRuleDevicesArgs', 'FirewallIPSRuleDevicesArgsDict']]] = None,
            enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
            groups: Optional[pulumi.Input[Union['FirewallIPSRuleGroupsArgs', 'FirewallIPSRuleGroupsArgsDict']]] = None,
            labels: Optional[pulumi.Input[Union['FirewallIPSRuleLabelsArgs', 'FirewallIPSRuleLabelsArgsDict']]] = None,
            location_groups: Optional[pulumi.Input[Union['FirewallIPSRuleLocationGroupsArgs', 'FirewallIPSRuleLocationGroupsArgsDict']]] = None,
            locations: Optional[pulumi.Input[Union['FirewallIPSRuleLocationsArgs', 'FirewallIPSRuleLocationsArgsDict']]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            nw_service_groups: Optional[pulumi.Input[Union['FirewallIPSRuleNwServiceGroupsArgs', 'FirewallIPSRuleNwServiceGroupsArgsDict']]] = None,
            nw_services: Optional[pulumi.Input[Union['FirewallIPSRuleNwServicesArgs', 'FirewallIPSRuleNwServicesArgsDict']]] = None,
            order: Optional[pulumi.Input[builtins.int]] = None,
            predefined: Optional[pulumi.Input[builtins.bool]] = None,
            rank: Optional[pulumi.Input[builtins.int]] = None,
            res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            rule_id: Optional[pulumi.Input[builtins.int]] = None,
            source_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            src_ip_groups: Optional[pulumi.Input[Union['FirewallIPSRuleSrcIpGroupsArgs', 'FirewallIPSRuleSrcIpGroupsArgsDict']]] = None,
            src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            src_ipv6_groups: Optional[pulumi.Input[Union['FirewallIPSRuleSrcIpv6GroupsArgs', 'FirewallIPSRuleSrcIpv6GroupsArgsDict']]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            threat_categories: Optional[pulumi.Input[Union['FirewallIPSRuleThreatCategoriesArgs', 'FirewallIPSRuleThreatCategoriesArgsDict']]] = None,
            time_windows: Optional[pulumi.Input[Union['FirewallIPSRuleTimeWindowsArgs', 'FirewallIPSRuleTimeWindowsArgsDict']]] = None,
            users: Optional[pulumi.Input[Union['FirewallIPSRuleUsersArgs', 'FirewallIPSRuleUsersArgsDict']]] = None,
            zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FirewallIPSRuleZpaAppSegmentArgs', 'FirewallIPSRuleZpaAppSegmentArgsDict']]]]] = None) -> 'FirewallIPSRule':
        """
        Get an existing FirewallIPSRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] action: The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or
               blocking the traffic or bypassing the rule.
        :param pulumi.Input[builtins.bool] capture_pcap: A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        :param pulumi.Input[builtins.bool] default_rule: If set to true, the default rule is applied
        :param pulumi.Input[Union['FirewallIPSRuleDepartmentsArgs', 'FirewallIPSRuleDepartmentsArgsDict']] departments: list of departments for which rule must be applied
        :param pulumi.Input[builtins.str] description: Additional information about the rule
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_addresses: Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input[Union['FirewallIPSRuleDestIpGroupsArgs', 'FirewallIPSRuleDestIpGroupsArgsDict']] dest_ip_groups: list of destination ip groups
        :param pulumi.Input[Union['FirewallIPSRuleDestIpv6GroupsArgs', 'FirewallIPSRuleDestIpv6GroupsArgsDict']] dest_ipv6_groups: list of destination ip groups
        :param pulumi.Input[Union['FirewallIPSRuleDeviceGroupsArgs', 'FirewallIPSRuleDeviceGroupsArgsDict']] device_groups: This field is applicable for devices that are managed using Zscaler Client Connector.
        :param pulumi.Input[Union['FirewallIPSRuleDevicesArgs', 'FirewallIPSRuleDevicesArgsDict']] devices: Name-ID pairs of devices for which rule must be applied.
        :param pulumi.Input[builtins.bool] enable_full_logging: A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled,
               whereas a false value indicates that aggregate logging is enabled.
        :param pulumi.Input[Union['FirewallIPSRuleGroupsArgs', 'FirewallIPSRuleGroupsArgsDict']] groups: list of groups for which rule must be applied
        :param pulumi.Input[Union['FirewallIPSRuleLabelsArgs', 'FirewallIPSRuleLabelsArgsDict']] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input[Union['FirewallIPSRuleLocationGroupsArgs', 'FirewallIPSRuleLocationGroupsArgsDict']] location_groups: list of locations groups
        :param pulumi.Input[Union['FirewallIPSRuleLocationsArgs', 'FirewallIPSRuleLocationsArgsDict']] locations: list of locations for which rule must be applied
        :param pulumi.Input[builtins.str] name: The name of the IPS Control rule
        :param pulumi.Input[Union['FirewallIPSRuleNwServiceGroupsArgs', 'FirewallIPSRuleNwServiceGroupsArgsDict']] nw_service_groups: list of nw service groups
        :param pulumi.Input[Union['FirewallIPSRuleNwServicesArgs', 'FirewallIPSRuleNwServicesArgsDict']] nw_services: list of nw services
        :param pulumi.Input[builtins.int] order: Rule order number. If omitted, the rule will be added to the end of the rule set.
        :param pulumi.Input[builtins.bool] predefined: If set to true, a predefined rule is applied
        :param pulumi.Input[builtins.int] rank: The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
               be specified for the rule.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] res_categories: URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
               to a specific URL category.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] source_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input[Union['FirewallIPSRuleSrcIpGroupsArgs', 'FirewallIPSRuleSrcIpGroupsArgsDict']] src_ip_groups: list of source ip groups
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] src_ips: User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
               source IP address.
        :param pulumi.Input[Union['FirewallIPSRuleSrcIpv6GroupsArgs', 'FirewallIPSRuleSrcIpv6GroupsArgsDict']] src_ipv6_groups: list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
               specific source IPv6 address group.
        :param pulumi.Input[builtins.str] state: The state of the rule indicating whether it is enabled or disabled
        :param pulumi.Input[Union['FirewallIPSRuleThreatCategoriesArgs', 'FirewallIPSRuleThreatCategoriesArgsDict']] threat_categories: list of Advanced threat categories to which the rule applies
        :param pulumi.Input[Union['FirewallIPSRuleTimeWindowsArgs', 'FirewallIPSRuleTimeWindowsArgsDict']] time_windows: The time interval in which the Firewall Filtering policy rule applies
        :param pulumi.Input[Union['FirewallIPSRuleUsersArgs', 'FirewallIPSRuleUsersArgsDict']] users: list of users for which rule must be applied
        :param pulumi.Input[Sequence[pulumi.Input[Union['FirewallIPSRuleZpaAppSegmentArgs', 'FirewallIPSRuleZpaAppSegmentArgsDict']]]] zpa_app_segments: The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
               Gateway forwarding method.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallIPSRuleState.__new__(_FirewallIPSRuleState)

        __props__.__dict__["action"] = action
        __props__.__dict__["capture_pcap"] = capture_pcap
        __props__.__dict__["default_rule"] = default_rule
        __props__.__dict__["departments"] = departments
        __props__.__dict__["description"] = description
        __props__.__dict__["dest_addresses"] = dest_addresses
        __props__.__dict__["dest_countries"] = dest_countries
        __props__.__dict__["dest_ip_categories"] = dest_ip_categories
        __props__.__dict__["dest_ip_groups"] = dest_ip_groups
        __props__.__dict__["dest_ipv6_groups"] = dest_ipv6_groups
        __props__.__dict__["device_groups"] = device_groups
        __props__.__dict__["devices"] = devices
        __props__.__dict__["enable_full_logging"] = enable_full_logging
        __props__.__dict__["groups"] = groups
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location_groups"] = location_groups
        __props__.__dict__["locations"] = locations
        __props__.__dict__["name"] = name
        __props__.__dict__["nw_service_groups"] = nw_service_groups
        __props__.__dict__["nw_services"] = nw_services
        __props__.__dict__["order"] = order
        __props__.__dict__["predefined"] = predefined
        __props__.__dict__["rank"] = rank
        __props__.__dict__["res_categories"] = res_categories
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["source_countries"] = source_countries
        __props__.__dict__["src_ip_groups"] = src_ip_groups
        __props__.__dict__["src_ips"] = src_ips
        __props__.__dict__["src_ipv6_groups"] = src_ipv6_groups
        __props__.__dict__["state"] = state
        __props__.__dict__["threat_categories"] = threat_categories
        __props__.__dict__["time_windows"] = time_windows
        __props__.__dict__["users"] = users
        __props__.__dict__["zpa_app_segments"] = zpa_app_segments
        return FirewallIPSRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or
        blocking the traffic or bypassing the rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="capturePcap")
    def capture_pcap(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value that indicates whether packet capture (PCAP) is enabled or not
        """
        return pulumi.get(self, "capture_pcap")

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        If set to true, the default rule is applied
        """
        return pulumi.get(self, "default_rule")

    @property
    @pulumi.getter
    def departments(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleDepartments']]:
        """
        list of departments for which rule must be applied
        """
        return pulumi.get(self, "departments")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Additional information about the rule
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        Destination addresses. Supports IPv4, FQDNs, or wildcard FQDNs
        """
        return pulumi.get(self, "dest_addresses")

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        countries.
        """
        return pulumi.get(self, "dest_countries")

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        return pulumi.get(self, "dest_ip_categories")

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleDestIpGroups']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "dest_ip_groups")

    @property
    @pulumi.getter(name="destIpv6Groups")
    def dest_ipv6_groups(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleDestIpv6Groups']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "dest_ipv6_groups")

    @property
    @pulumi.getter(name="deviceGroups")
    def device_groups(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleDeviceGroups']]:
        """
        This field is applicable for devices that are managed using Zscaler Client Connector.
        """
        return pulumi.get(self, "device_groups")

    @property
    @pulumi.getter
    def devices(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleDevices']]:
        """
        Name-ID pairs of devices for which rule must be applied.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="enableFullLogging")
    def enable_full_logging(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled,
        whereas a false value indicates that aggregate logging is enabled.
        """
        return pulumi.get(self, "enable_full_logging")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleGroups']]:
        """
        list of groups for which rule must be applied
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleLabels']]:
        """
        list of Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleLocationGroups']]:
        """
        list of locations groups
        """
        return pulumi.get(self, "location_groups")

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleLocations']]:
        """
        list of locations for which rule must be applied
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the IPS Control rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleNwServiceGroups']]:
        """
        list of nw service groups
        """
        return pulumi.get(self, "nw_service_groups")

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleNwServices']]:
        """
        list of nw services
        """
        return pulumi.get(self, "nw_services")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[builtins.int]:
        """
        Rule order number. If omitted, the rule will be added to the end of the rule set.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def predefined(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        If set to true, a predefined rule is applied
        """
        return pulumi.get(self, "predefined")

    @property
    @pulumi.getter
    def rank(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The admin rank specified for the rule based on your assigned admin rank. Admin rank determines the rule order that can
        be specified for the rule.
        """
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="resCategories")
    def res_categories(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted
        to a specific URL category.
        """
        return pulumi.get(self, "res_categories")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="sourceCountries")
    def source_countries(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        countries.
        """
        return pulumi.get(self, "source_countries")

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleSrcIpGroups']]:
        """
        list of source ip groups
        """
        return pulumi.get(self, "src_ip_groups")

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        User-defined source IP addresses for which the rule is applicable. If not set, the rule is not restricted to a specific
        source IP address.
        """
        return pulumi.get(self, "src_ips")

    @property
    @pulumi.getter(name="srcIpv6Groups")
    def src_ipv6_groups(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleSrcIpv6Groups']]:
        """
        list of Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a
        specific source IPv6 address group.
        """
        return pulumi.get(self, "src_ipv6_groups")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The state of the rule indicating whether it is enabled or disabled
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="threatCategories")
    def threat_categories(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleThreatCategories']]:
        """
        list of Advanced threat categories to which the rule applies
        """
        return pulumi.get(self, "threat_categories")

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleTimeWindows']]:
        """
        The time interval in which the Firewall Filtering policy rule applies
        """
        return pulumi.get(self, "time_windows")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional['outputs.FirewallIPSRuleUsers']]:
        """
        list of users for which rule must be applied
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="zpaAppSegments")
    def zpa_app_segments(self) -> pulumi.Output[Sequence['outputs.FirewallIPSRuleZpaAppSegment']]:
        """
        The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the ZPA
        Gateway forwarding method.
        """
        return pulumi.get(self, "zpa_app_segments")

