# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMobileMalwareProtectionPolicyResult',
    'AwaitableGetMobileMalwareProtectionPolicyResult',
    'get_mobile_malware_protection_policy',
    'get_mobile_malware_protection_policy_output',
]

@pulumi.output_type
class GetMobileMalwareProtectionPolicyResult:
    """
    A collection of values returned by getMobileMalwareProtectionPolicy.
    """
    def __init__(__self__, block_apps_communicating_with_ad_websites=None, block_apps_communicating_with_remote_unknown_servers=None, block_apps_sending_device_identifier=None, block_apps_sending_location_info=None, block_apps_sending_personally_identifiable_info=None, block_apps_sending_unencrypted_user_credentials=None, block_apps_with_known_vulnerabilities=None, block_apps_with_malicious_activity=None, id=None):
        if block_apps_communicating_with_ad_websites and not isinstance(block_apps_communicating_with_ad_websites, bool):
            raise TypeError("Expected argument 'block_apps_communicating_with_ad_websites' to be a bool")
        pulumi.set(__self__, "block_apps_communicating_with_ad_websites", block_apps_communicating_with_ad_websites)
        if block_apps_communicating_with_remote_unknown_servers and not isinstance(block_apps_communicating_with_remote_unknown_servers, bool):
            raise TypeError("Expected argument 'block_apps_communicating_with_remote_unknown_servers' to be a bool")
        pulumi.set(__self__, "block_apps_communicating_with_remote_unknown_servers", block_apps_communicating_with_remote_unknown_servers)
        if block_apps_sending_device_identifier and not isinstance(block_apps_sending_device_identifier, bool):
            raise TypeError("Expected argument 'block_apps_sending_device_identifier' to be a bool")
        pulumi.set(__self__, "block_apps_sending_device_identifier", block_apps_sending_device_identifier)
        if block_apps_sending_location_info and not isinstance(block_apps_sending_location_info, bool):
            raise TypeError("Expected argument 'block_apps_sending_location_info' to be a bool")
        pulumi.set(__self__, "block_apps_sending_location_info", block_apps_sending_location_info)
        if block_apps_sending_personally_identifiable_info and not isinstance(block_apps_sending_personally_identifiable_info, bool):
            raise TypeError("Expected argument 'block_apps_sending_personally_identifiable_info' to be a bool")
        pulumi.set(__self__, "block_apps_sending_personally_identifiable_info", block_apps_sending_personally_identifiable_info)
        if block_apps_sending_unencrypted_user_credentials and not isinstance(block_apps_sending_unencrypted_user_credentials, bool):
            raise TypeError("Expected argument 'block_apps_sending_unencrypted_user_credentials' to be a bool")
        pulumi.set(__self__, "block_apps_sending_unencrypted_user_credentials", block_apps_sending_unencrypted_user_credentials)
        if block_apps_with_known_vulnerabilities and not isinstance(block_apps_with_known_vulnerabilities, bool):
            raise TypeError("Expected argument 'block_apps_with_known_vulnerabilities' to be a bool")
        pulumi.set(__self__, "block_apps_with_known_vulnerabilities", block_apps_with_known_vulnerabilities)
        if block_apps_with_malicious_activity and not isinstance(block_apps_with_malicious_activity, bool):
            raise TypeError("Expected argument 'block_apps_with_malicious_activity' to be a bool")
        pulumi.set(__self__, "block_apps_with_malicious_activity", block_apps_with_malicious_activity)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="blockAppsCommunicatingWithAdWebsites")
    def block_apps_communicating_with_ad_websites(self) -> builtins.bool:
        """
        (Boolean) Blocks an application from communicating with known advertisement websites
        """
        return pulumi.get(self, "block_apps_communicating_with_ad_websites")

    @property
    @pulumi.getter(name="blockAppsCommunicatingWithRemoteUnknownServers")
    def block_apps_communicating_with_remote_unknown_servers(self) -> builtins.bool:
        """
        (Boolean) Blocks an application from communicating with unknown servers (i.e., servers not normally or historically associated with the application)
        """
        return pulumi.get(self, "block_apps_communicating_with_remote_unknown_servers")

    @property
    @pulumi.getter(name="blockAppsSendingDeviceIdentifier")
    def block_apps_sending_device_identifier(self) -> builtins.bool:
        """
        (Boolean) Blocks an application from leaking device identifiers via communication in an unencrypted format or for an unknown purpose
        """
        return pulumi.get(self, "block_apps_sending_device_identifier")

    @property
    @pulumi.getter(name="blockAppsSendingLocationInfo")
    def block_apps_sending_location_info(self) -> builtins.bool:
        """
        (Boolean) Blocks an application from leaking device location details via communication in an unencrypted format or for an unknown purpose
        """
        return pulumi.get(self, "block_apps_sending_location_info")

    @property
    @pulumi.getter(name="blockAppsSendingPersonallyIdentifiableInfo")
    def block_apps_sending_personally_identifiable_info(self) -> builtins.bool:
        """
        (Boolean) Blocks an application from leaking a user's personally identifiable information (PII) via communication in an unencrypted format or for an unknown purpose
        """
        return pulumi.get(self, "block_apps_sending_personally_identifiable_info")

    @property
    @pulumi.getter(name="blockAppsSendingUnencryptedUserCredentials")
    def block_apps_sending_unencrypted_user_credentials(self) -> builtins.bool:
        """
        (Boolean) Blocks an application from leaking a user's credentials in an unencrypted format
        """
        return pulumi.get(self, "block_apps_sending_unencrypted_user_credentials")

    @property
    @pulumi.getter(name="blockAppsWithKnownVulnerabilities")
    def block_apps_with_known_vulnerabilities(self) -> builtins.bool:
        """
        (Boolean) Blocks applications that contain vulnerabilities or that use insecure features, modules, or protocols
        """
        return pulumi.get(self, "block_apps_with_known_vulnerabilities")

    @property
    @pulumi.getter(name="blockAppsWithMaliciousActivity")
    def block_apps_with_malicious_activity(self) -> builtins.bool:
        """
        (Boolean) Blocks applications that are known to be malicious, compromised, or perform activities unknown to or hidden from the user
        """
        return pulumi.get(self, "block_apps_with_malicious_activity")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetMobileMalwareProtectionPolicyResult(GetMobileMalwareProtectionPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMobileMalwareProtectionPolicyResult(
            block_apps_communicating_with_ad_websites=self.block_apps_communicating_with_ad_websites,
            block_apps_communicating_with_remote_unknown_servers=self.block_apps_communicating_with_remote_unknown_servers,
            block_apps_sending_device_identifier=self.block_apps_sending_device_identifier,
            block_apps_sending_location_info=self.block_apps_sending_location_info,
            block_apps_sending_personally_identifiable_info=self.block_apps_sending_personally_identifiable_info,
            block_apps_sending_unencrypted_user_credentials=self.block_apps_sending_unencrypted_user_credentials,
            block_apps_with_known_vulnerabilities=self.block_apps_with_known_vulnerabilities,
            block_apps_with_malicious_activity=self.block_apps_with_malicious_activity,
            id=self.id)


def get_mobile_malware_protection_policy(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMobileMalwareProtectionPolicyResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/configuring-mobile-malware-protection-policy)
    * [API documentation](https://help.zscaler.com/zia/mobile-malware-protection-policy#/mobileAdvanceThreatSettings-put)

    Use the **zia_mobile_malware_protection_policy** data source to retrieves all the rules in the Mobile Malware Protection policy configuration. To learn more see [Configuring the Mobile Malware Protection Policy](https://help.zscaler.com/zia/configuring-mobile-malware-protection-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getMobileMalwareProtectionPolicy:getMobileMalwareProtectionPolicy', __args__, opts=opts, typ=GetMobileMalwareProtectionPolicyResult).value

    return AwaitableGetMobileMalwareProtectionPolicyResult(
        block_apps_communicating_with_ad_websites=pulumi.get(__ret__, 'block_apps_communicating_with_ad_websites'),
        block_apps_communicating_with_remote_unknown_servers=pulumi.get(__ret__, 'block_apps_communicating_with_remote_unknown_servers'),
        block_apps_sending_device_identifier=pulumi.get(__ret__, 'block_apps_sending_device_identifier'),
        block_apps_sending_location_info=pulumi.get(__ret__, 'block_apps_sending_location_info'),
        block_apps_sending_personally_identifiable_info=pulumi.get(__ret__, 'block_apps_sending_personally_identifiable_info'),
        block_apps_sending_unencrypted_user_credentials=pulumi.get(__ret__, 'block_apps_sending_unencrypted_user_credentials'),
        block_apps_with_known_vulnerabilities=pulumi.get(__ret__, 'block_apps_with_known_vulnerabilities'),
        block_apps_with_malicious_activity=pulumi.get(__ret__, 'block_apps_with_malicious_activity'),
        id=pulumi.get(__ret__, 'id'))
def get_mobile_malware_protection_policy_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMobileMalwareProtectionPolicyResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/configuring-mobile-malware-protection-policy)
    * [API documentation](https://help.zscaler.com/zia/mobile-malware-protection-policy#/mobileAdvanceThreatSettings-put)

    Use the **zia_mobile_malware_protection_policy** data source to retrieves all the rules in the Mobile Malware Protection policy configuration. To learn more see [Configuring the Mobile Malware Protection Policy](https://help.zscaler.com/zia/configuring-mobile-malware-protection-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getMobileMalwareProtectionPolicy:getMobileMalwareProtectionPolicy', __args__, opts=opts, typ=GetMobileMalwareProtectionPolicyResult)
    return __ret__.apply(lambda __response__: GetMobileMalwareProtectionPolicyResult(
        block_apps_communicating_with_ad_websites=pulumi.get(__response__, 'block_apps_communicating_with_ad_websites'),
        block_apps_communicating_with_remote_unknown_servers=pulumi.get(__response__, 'block_apps_communicating_with_remote_unknown_servers'),
        block_apps_sending_device_identifier=pulumi.get(__response__, 'block_apps_sending_device_identifier'),
        block_apps_sending_location_info=pulumi.get(__response__, 'block_apps_sending_location_info'),
        block_apps_sending_personally_identifiable_info=pulumi.get(__response__, 'block_apps_sending_personally_identifiable_info'),
        block_apps_sending_unencrypted_user_credentials=pulumi.get(__response__, 'block_apps_sending_unencrypted_user_credentials'),
        block_apps_with_known_vulnerabilities=pulumi.get(__response__, 'block_apps_with_known_vulnerabilities'),
        block_apps_with_malicious_activity=pulumi.get(__response__, 'block_apps_with_malicious_activity'),
        id=pulumi.get(__response__, 'id')))
