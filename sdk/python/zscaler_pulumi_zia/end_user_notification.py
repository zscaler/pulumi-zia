# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['EndUserNotificationArgs', 'EndUserNotification']

@pulumi.input_type
class EndUserNotificationArgs:
    def __init__(__self__, *,
                 aup_custom_frequency: Optional[pulumi.Input[builtins.int]] = None,
                 aup_day_offset: Optional[pulumi.Input[builtins.int]] = None,
                 aup_frequency: Optional[pulumi.Input[builtins.str]] = None,
                 aup_message: Optional[pulumi.Input[builtins.str]] = None,
                 caution_again_after: Optional[pulumi.Input[builtins.int]] = None,
                 caution_custom_text: Optional[pulumi.Input[builtins.str]] = None,
                 caution_per_domain: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_text: Optional[pulumi.Input[builtins.str]] = None,
                 display_comp_logo: Optional[pulumi.Input[builtins.bool]] = None,
                 display_comp_name: Optional[pulumi.Input[builtins.bool]] = None,
                 display_reason: Optional[pulumi.Input[builtins.bool]] = None,
                 idp_proxy_notification_text: Optional[pulumi.Input[builtins.str]] = None,
                 notification_type: Optional[pulumi.Input[builtins.str]] = None,
                 org_policy_link: Optional[pulumi.Input[builtins.str]] = None,
                 quarantine_custom_notification_text: Optional[pulumi.Input[builtins.str]] = None,
                 redirect_url: Optional[pulumi.Input[builtins.str]] = None,
                 security_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
                 security_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 security_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
                 security_review_text: Optional[pulumi.Input[builtins.str]] = None,
                 support_email: Optional[pulumi.Input[builtins.str]] = None,
                 support_phone: Optional[pulumi.Input[builtins.str]] = None,
                 url_cat_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
                 url_cat_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 url_cat_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
                 url_cat_review_text: Optional[pulumi.Input[builtins.str]] = None,
                 web_dlp_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
                 web_dlp_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 web_dlp_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
                 web_dlp_review_text: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a EndUserNotification resource.
        :param pulumi.Input[builtins.int] aup_custom_frequency: The custom frequency (in days) for showing the AUP to the end users. Valid range is 0 to 180.
        :param pulumi.Input[builtins.int] aup_day_offset: Specifies which day of the week or month the AUP is shown for users when aupFrequency is set. Valid range is 0 to 31.
        :param pulumi.Input[builtins.str] aup_frequency: The frequency at which the Acceptable Use Policy (AUP) is shown to the end users
        :param pulumi.Input[builtins.str] aup_message: The acceptable use statement that is shown in the AUP
        :param pulumi.Input[builtins.int] caution_again_after: The time interval at which the caution notification is shown when users continue browsing a restricted site.
        :param pulumi.Input[builtins.str] caution_custom_text: The custom message that appears in the caution notification
        :param pulumi.Input[builtins.bool] caution_per_domain: Specifies whether to display the caution notification at a specific time interval for URLs in the Miscellaneous or
               Unknown category.
        :param pulumi.Input[builtins.str] custom_text: The custom text shown in the EUN
        :param pulumi.Input[builtins.bool] display_comp_logo: A Boolean value indicating whether your organization's logo appears in the EUN or not
        :param pulumi.Input[builtins.bool] display_comp_name: A Boolean value indicating whether the organization's name appears in the EUN or not
        :param pulumi.Input[builtins.bool] display_reason: A Boolean value indicating whether or not the reason for cautioning or blocking access to a site, file, or application
               is shown when the respective notification is triggered
        :param pulumi.Input[builtins.str] idp_proxy_notification_text: The message that appears in the IdP Proxy notification
        :param pulumi.Input[builtins.str] notification_type: The type of EUN as default or custom
        :param pulumi.Input[builtins.str] org_policy_link: The URL of the organization's policy page. This field is required for the default notification type.
        :param pulumi.Input[builtins.str] quarantine_custom_notification_text: The message that appears in the quarantine notification
        :param pulumi.Input[builtins.str] redirect_url: The redirect URL for the external site hosting the EUN specified when the custom notification type is selected
        :param pulumi.Input[builtins.str] security_review_custom_location: Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
               users.
        :param pulumi.Input[builtins.bool] security_review_enabled: A Boolean value indicating whether the Security Violation notification is enabled or disabled
        :param pulumi.Input[builtins.bool] security_review_submit_to_security_cloud: A Boolean value indicating whether users' review requests for blocked URLs are submitted to the Zscaler service (i.e.,
               Security Cloud) or a custom location.
        :param pulumi.Input[builtins.str] security_review_text: The message that appears in the Security Violation notification
        :param pulumi.Input[builtins.str] support_email: The email address for writing to IT Support
        :param pulumi.Input[builtins.str] support_phone: The phone number for contacting IT Support
        :param pulumi.Input[builtins.str] url_cat_review_custom_location: A custom URL location where users' review requests for blocked URLs are sent
        :param pulumi.Input[builtins.bool] url_cat_review_enabled: A Boolean value indicating whether the URL Categorization notification is enabled or disabled
        :param pulumi.Input[builtins.bool] url_cat_review_submit_to_security_cloud: A Boolean value indicating whether users' review requests for possibly misclassified URLs are submitted to the Zscaler
               service (i.e., Security Cloud) or a custom location.
        :param pulumi.Input[builtins.str] url_cat_review_text: The message that appears in the URL Categorization notification
        :param pulumi.Input[builtins.str] web_dlp_review_custom_location: A custom URL location where users' review requests for the web DLP policy violation are sent
        :param pulumi.Input[builtins.bool] web_dlp_review_enabled: A Boolean value indicating whether the Web DLP Violation notification is enabled or disabled
        :param pulumi.Input[builtins.bool] web_dlp_review_submit_to_security_cloud: A Boolean value indicating whether users' review requests for web DLP policy violation are submitted to the Zscaler
               service (i.e., Security Cloud) or a custom location.
        :param pulumi.Input[builtins.str] web_dlp_review_text: The message that appears in the Web DLP Violation notification
        """
        if aup_custom_frequency is not None:
            pulumi.set(__self__, "aup_custom_frequency", aup_custom_frequency)
        if aup_day_offset is not None:
            pulumi.set(__self__, "aup_day_offset", aup_day_offset)
        if aup_frequency is not None:
            pulumi.set(__self__, "aup_frequency", aup_frequency)
        if aup_message is not None:
            pulumi.set(__self__, "aup_message", aup_message)
        if caution_again_after is not None:
            pulumi.set(__self__, "caution_again_after", caution_again_after)
        if caution_custom_text is not None:
            pulumi.set(__self__, "caution_custom_text", caution_custom_text)
        if caution_per_domain is not None:
            pulumi.set(__self__, "caution_per_domain", caution_per_domain)
        if custom_text is not None:
            pulumi.set(__self__, "custom_text", custom_text)
        if display_comp_logo is not None:
            pulumi.set(__self__, "display_comp_logo", display_comp_logo)
        if display_comp_name is not None:
            pulumi.set(__self__, "display_comp_name", display_comp_name)
        if display_reason is not None:
            pulumi.set(__self__, "display_reason", display_reason)
        if idp_proxy_notification_text is not None:
            pulumi.set(__self__, "idp_proxy_notification_text", idp_proxy_notification_text)
        if notification_type is not None:
            pulumi.set(__self__, "notification_type", notification_type)
        if org_policy_link is not None:
            pulumi.set(__self__, "org_policy_link", org_policy_link)
        if quarantine_custom_notification_text is not None:
            pulumi.set(__self__, "quarantine_custom_notification_text", quarantine_custom_notification_text)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if security_review_custom_location is not None:
            pulumi.set(__self__, "security_review_custom_location", security_review_custom_location)
        if security_review_enabled is not None:
            pulumi.set(__self__, "security_review_enabled", security_review_enabled)
        if security_review_submit_to_security_cloud is not None:
            pulumi.set(__self__, "security_review_submit_to_security_cloud", security_review_submit_to_security_cloud)
        if security_review_text is not None:
            pulumi.set(__self__, "security_review_text", security_review_text)
        if support_email is not None:
            pulumi.set(__self__, "support_email", support_email)
        if support_phone is not None:
            pulumi.set(__self__, "support_phone", support_phone)
        if url_cat_review_custom_location is not None:
            pulumi.set(__self__, "url_cat_review_custom_location", url_cat_review_custom_location)
        if url_cat_review_enabled is not None:
            pulumi.set(__self__, "url_cat_review_enabled", url_cat_review_enabled)
        if url_cat_review_submit_to_security_cloud is not None:
            pulumi.set(__self__, "url_cat_review_submit_to_security_cloud", url_cat_review_submit_to_security_cloud)
        if url_cat_review_text is not None:
            pulumi.set(__self__, "url_cat_review_text", url_cat_review_text)
        if web_dlp_review_custom_location is not None:
            pulumi.set(__self__, "web_dlp_review_custom_location", web_dlp_review_custom_location)
        if web_dlp_review_enabled is not None:
            pulumi.set(__self__, "web_dlp_review_enabled", web_dlp_review_enabled)
        if web_dlp_review_submit_to_security_cloud is not None:
            pulumi.set(__self__, "web_dlp_review_submit_to_security_cloud", web_dlp_review_submit_to_security_cloud)
        if web_dlp_review_text is not None:
            pulumi.set(__self__, "web_dlp_review_text", web_dlp_review_text)

    @property
    @pulumi.getter(name="aupCustomFrequency")
    def aup_custom_frequency(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The custom frequency (in days) for showing the AUP to the end users. Valid range is 0 to 180.
        """
        return pulumi.get(self, "aup_custom_frequency")

    @aup_custom_frequency.setter
    def aup_custom_frequency(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "aup_custom_frequency", value)

    @property
    @pulumi.getter(name="aupDayOffset")
    def aup_day_offset(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Specifies which day of the week or month the AUP is shown for users when aupFrequency is set. Valid range is 0 to 31.
        """
        return pulumi.get(self, "aup_day_offset")

    @aup_day_offset.setter
    def aup_day_offset(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "aup_day_offset", value)

    @property
    @pulumi.getter(name="aupFrequency")
    def aup_frequency(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The frequency at which the Acceptable Use Policy (AUP) is shown to the end users
        """
        return pulumi.get(self, "aup_frequency")

    @aup_frequency.setter
    def aup_frequency(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "aup_frequency", value)

    @property
    @pulumi.getter(name="aupMessage")
    def aup_message(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The acceptable use statement that is shown in the AUP
        """
        return pulumi.get(self, "aup_message")

    @aup_message.setter
    def aup_message(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "aup_message", value)

    @property
    @pulumi.getter(name="cautionAgainAfter")
    def caution_again_after(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The time interval at which the caution notification is shown when users continue browsing a restricted site.
        """
        return pulumi.get(self, "caution_again_after")

    @caution_again_after.setter
    def caution_again_after(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "caution_again_after", value)

    @property
    @pulumi.getter(name="cautionCustomText")
    def caution_custom_text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The custom message that appears in the caution notification
        """
        return pulumi.get(self, "caution_custom_text")

    @caution_custom_text.setter
    def caution_custom_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "caution_custom_text", value)

    @property
    @pulumi.getter(name="cautionPerDomain")
    def caution_per_domain(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specifies whether to display the caution notification at a specific time interval for URLs in the Miscellaneous or
        Unknown category.
        """
        return pulumi.get(self, "caution_per_domain")

    @caution_per_domain.setter
    def caution_per_domain(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "caution_per_domain", value)

    @property
    @pulumi.getter(name="customText")
    def custom_text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The custom text shown in the EUN
        """
        return pulumi.get(self, "custom_text")

    @custom_text.setter
    def custom_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_text", value)

    @property
    @pulumi.getter(name="displayCompLogo")
    def display_comp_logo(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether your organization's logo appears in the EUN or not
        """
        return pulumi.get(self, "display_comp_logo")

    @display_comp_logo.setter
    def display_comp_logo(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "display_comp_logo", value)

    @property
    @pulumi.getter(name="displayCompName")
    def display_comp_name(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether the organization's name appears in the EUN or not
        """
        return pulumi.get(self, "display_comp_name")

    @display_comp_name.setter
    def display_comp_name(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "display_comp_name", value)

    @property
    @pulumi.getter(name="displayReason")
    def display_reason(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether or not the reason for cautioning or blocking access to a site, file, or application
        is shown when the respective notification is triggered
        """
        return pulumi.get(self, "display_reason")

    @display_reason.setter
    def display_reason(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "display_reason", value)

    @property
    @pulumi.getter(name="idpProxyNotificationText")
    def idp_proxy_notification_text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The message that appears in the IdP Proxy notification
        """
        return pulumi.get(self, "idp_proxy_notification_text")

    @idp_proxy_notification_text.setter
    def idp_proxy_notification_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "idp_proxy_notification_text", value)

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of EUN as default or custom
        """
        return pulumi.get(self, "notification_type")

    @notification_type.setter
    def notification_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "notification_type", value)

    @property
    @pulumi.getter(name="orgPolicyLink")
    def org_policy_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The URL of the organization's policy page. This field is required for the default notification type.
        """
        return pulumi.get(self, "org_policy_link")

    @org_policy_link.setter
    def org_policy_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "org_policy_link", value)

    @property
    @pulumi.getter(name="quarantineCustomNotificationText")
    def quarantine_custom_notification_text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The message that appears in the quarantine notification
        """
        return pulumi.get(self, "quarantine_custom_notification_text")

    @quarantine_custom_notification_text.setter
    def quarantine_custom_notification_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "quarantine_custom_notification_text", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The redirect URL for the external site hosting the EUN specified when the custom notification type is selected
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="securityReviewCustomLocation")
    def security_review_custom_location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
        users.
        """
        return pulumi.get(self, "security_review_custom_location")

    @security_review_custom_location.setter
    def security_review_custom_location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "security_review_custom_location", value)

    @property
    @pulumi.getter(name="securityReviewEnabled")
    def security_review_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether the Security Violation notification is enabled or disabled
        """
        return pulumi.get(self, "security_review_enabled")

    @security_review_enabled.setter
    def security_review_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "security_review_enabled", value)

    @property
    @pulumi.getter(name="securityReviewSubmitToSecurityCloud")
    def security_review_submit_to_security_cloud(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether users' review requests for blocked URLs are submitted to the Zscaler service (i.e.,
        Security Cloud) or a custom location.
        """
        return pulumi.get(self, "security_review_submit_to_security_cloud")

    @security_review_submit_to_security_cloud.setter
    def security_review_submit_to_security_cloud(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "security_review_submit_to_security_cloud", value)

    @property
    @pulumi.getter(name="securityReviewText")
    def security_review_text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The message that appears in the Security Violation notification
        """
        return pulumi.get(self, "security_review_text")

    @security_review_text.setter
    def security_review_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "security_review_text", value)

    @property
    @pulumi.getter(name="supportEmail")
    def support_email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The email address for writing to IT Support
        """
        return pulumi.get(self, "support_email")

    @support_email.setter
    def support_email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "support_email", value)

    @property
    @pulumi.getter(name="supportPhone")
    def support_phone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The phone number for contacting IT Support
        """
        return pulumi.get(self, "support_phone")

    @support_phone.setter
    def support_phone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "support_phone", value)

    @property
    @pulumi.getter(name="urlCatReviewCustomLocation")
    def url_cat_review_custom_location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A custom URL location where users' review requests for blocked URLs are sent
        """
        return pulumi.get(self, "url_cat_review_custom_location")

    @url_cat_review_custom_location.setter
    def url_cat_review_custom_location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "url_cat_review_custom_location", value)

    @property
    @pulumi.getter(name="urlCatReviewEnabled")
    def url_cat_review_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether the URL Categorization notification is enabled or disabled
        """
        return pulumi.get(self, "url_cat_review_enabled")

    @url_cat_review_enabled.setter
    def url_cat_review_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "url_cat_review_enabled", value)

    @property
    @pulumi.getter(name="urlCatReviewSubmitToSecurityCloud")
    def url_cat_review_submit_to_security_cloud(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether users' review requests for possibly misclassified URLs are submitted to the Zscaler
        service (i.e., Security Cloud) or a custom location.
        """
        return pulumi.get(self, "url_cat_review_submit_to_security_cloud")

    @url_cat_review_submit_to_security_cloud.setter
    def url_cat_review_submit_to_security_cloud(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "url_cat_review_submit_to_security_cloud", value)

    @property
    @pulumi.getter(name="urlCatReviewText")
    def url_cat_review_text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The message that appears in the URL Categorization notification
        """
        return pulumi.get(self, "url_cat_review_text")

    @url_cat_review_text.setter
    def url_cat_review_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "url_cat_review_text", value)

    @property
    @pulumi.getter(name="webDlpReviewCustomLocation")
    def web_dlp_review_custom_location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A custom URL location where users' review requests for the web DLP policy violation are sent
        """
        return pulumi.get(self, "web_dlp_review_custom_location")

    @web_dlp_review_custom_location.setter
    def web_dlp_review_custom_location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "web_dlp_review_custom_location", value)

    @property
    @pulumi.getter(name="webDlpReviewEnabled")
    def web_dlp_review_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether the Web DLP Violation notification is enabled or disabled
        """
        return pulumi.get(self, "web_dlp_review_enabled")

    @web_dlp_review_enabled.setter
    def web_dlp_review_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "web_dlp_review_enabled", value)

    @property
    @pulumi.getter(name="webDlpReviewSubmitToSecurityCloud")
    def web_dlp_review_submit_to_security_cloud(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether users' review requests for web DLP policy violation are submitted to the Zscaler
        service (i.e., Security Cloud) or a custom location.
        """
        return pulumi.get(self, "web_dlp_review_submit_to_security_cloud")

    @web_dlp_review_submit_to_security_cloud.setter
    def web_dlp_review_submit_to_security_cloud(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "web_dlp_review_submit_to_security_cloud", value)

    @property
    @pulumi.getter(name="webDlpReviewText")
    def web_dlp_review_text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The message that appears in the Web DLP Violation notification
        """
        return pulumi.get(self, "web_dlp_review_text")

    @web_dlp_review_text.setter
    def web_dlp_review_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "web_dlp_review_text", value)


@pulumi.input_type
class _EndUserNotificationState:
    def __init__(__self__, *,
                 aup_custom_frequency: Optional[pulumi.Input[builtins.int]] = None,
                 aup_day_offset: Optional[pulumi.Input[builtins.int]] = None,
                 aup_frequency: Optional[pulumi.Input[builtins.str]] = None,
                 aup_message: Optional[pulumi.Input[builtins.str]] = None,
                 caution_again_after: Optional[pulumi.Input[builtins.int]] = None,
                 caution_custom_text: Optional[pulumi.Input[builtins.str]] = None,
                 caution_per_domain: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_text: Optional[pulumi.Input[builtins.str]] = None,
                 display_comp_logo: Optional[pulumi.Input[builtins.bool]] = None,
                 display_comp_name: Optional[pulumi.Input[builtins.bool]] = None,
                 display_reason: Optional[pulumi.Input[builtins.bool]] = None,
                 idp_proxy_notification_text: Optional[pulumi.Input[builtins.str]] = None,
                 notification_type: Optional[pulumi.Input[builtins.str]] = None,
                 org_policy_link: Optional[pulumi.Input[builtins.str]] = None,
                 quarantine_custom_notification_text: Optional[pulumi.Input[builtins.str]] = None,
                 redirect_url: Optional[pulumi.Input[builtins.str]] = None,
                 security_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
                 security_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 security_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
                 security_review_text: Optional[pulumi.Input[builtins.str]] = None,
                 support_email: Optional[pulumi.Input[builtins.str]] = None,
                 support_phone: Optional[pulumi.Input[builtins.str]] = None,
                 url_cat_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
                 url_cat_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 url_cat_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
                 url_cat_review_text: Optional[pulumi.Input[builtins.str]] = None,
                 web_dlp_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
                 web_dlp_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 web_dlp_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
                 web_dlp_review_text: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering EndUserNotification resources.
        :param pulumi.Input[builtins.int] aup_custom_frequency: The custom frequency (in days) for showing the AUP to the end users. Valid range is 0 to 180.
        :param pulumi.Input[builtins.int] aup_day_offset: Specifies which day of the week or month the AUP is shown for users when aupFrequency is set. Valid range is 0 to 31.
        :param pulumi.Input[builtins.str] aup_frequency: The frequency at which the Acceptable Use Policy (AUP) is shown to the end users
        :param pulumi.Input[builtins.str] aup_message: The acceptable use statement that is shown in the AUP
        :param pulumi.Input[builtins.int] caution_again_after: The time interval at which the caution notification is shown when users continue browsing a restricted site.
        :param pulumi.Input[builtins.str] caution_custom_text: The custom message that appears in the caution notification
        :param pulumi.Input[builtins.bool] caution_per_domain: Specifies whether to display the caution notification at a specific time interval for URLs in the Miscellaneous or
               Unknown category.
        :param pulumi.Input[builtins.str] custom_text: The custom text shown in the EUN
        :param pulumi.Input[builtins.bool] display_comp_logo: A Boolean value indicating whether your organization's logo appears in the EUN or not
        :param pulumi.Input[builtins.bool] display_comp_name: A Boolean value indicating whether the organization's name appears in the EUN or not
        :param pulumi.Input[builtins.bool] display_reason: A Boolean value indicating whether or not the reason for cautioning or blocking access to a site, file, or application
               is shown when the respective notification is triggered
        :param pulumi.Input[builtins.str] idp_proxy_notification_text: The message that appears in the IdP Proxy notification
        :param pulumi.Input[builtins.str] notification_type: The type of EUN as default or custom
        :param pulumi.Input[builtins.str] org_policy_link: The URL of the organization's policy page. This field is required for the default notification type.
        :param pulumi.Input[builtins.str] quarantine_custom_notification_text: The message that appears in the quarantine notification
        :param pulumi.Input[builtins.str] redirect_url: The redirect URL for the external site hosting the EUN specified when the custom notification type is selected
        :param pulumi.Input[builtins.str] security_review_custom_location: Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
               users.
        :param pulumi.Input[builtins.bool] security_review_enabled: A Boolean value indicating whether the Security Violation notification is enabled or disabled
        :param pulumi.Input[builtins.bool] security_review_submit_to_security_cloud: A Boolean value indicating whether users' review requests for blocked URLs are submitted to the Zscaler service (i.e.,
               Security Cloud) or a custom location.
        :param pulumi.Input[builtins.str] security_review_text: The message that appears in the Security Violation notification
        :param pulumi.Input[builtins.str] support_email: The email address for writing to IT Support
        :param pulumi.Input[builtins.str] support_phone: The phone number for contacting IT Support
        :param pulumi.Input[builtins.str] url_cat_review_custom_location: A custom URL location where users' review requests for blocked URLs are sent
        :param pulumi.Input[builtins.bool] url_cat_review_enabled: A Boolean value indicating whether the URL Categorization notification is enabled or disabled
        :param pulumi.Input[builtins.bool] url_cat_review_submit_to_security_cloud: A Boolean value indicating whether users' review requests for possibly misclassified URLs are submitted to the Zscaler
               service (i.e., Security Cloud) or a custom location.
        :param pulumi.Input[builtins.str] url_cat_review_text: The message that appears in the URL Categorization notification
        :param pulumi.Input[builtins.str] web_dlp_review_custom_location: A custom URL location where users' review requests for the web DLP policy violation are sent
        :param pulumi.Input[builtins.bool] web_dlp_review_enabled: A Boolean value indicating whether the Web DLP Violation notification is enabled or disabled
        :param pulumi.Input[builtins.bool] web_dlp_review_submit_to_security_cloud: A Boolean value indicating whether users' review requests for web DLP policy violation are submitted to the Zscaler
               service (i.e., Security Cloud) or a custom location.
        :param pulumi.Input[builtins.str] web_dlp_review_text: The message that appears in the Web DLP Violation notification
        """
        if aup_custom_frequency is not None:
            pulumi.set(__self__, "aup_custom_frequency", aup_custom_frequency)
        if aup_day_offset is not None:
            pulumi.set(__self__, "aup_day_offset", aup_day_offset)
        if aup_frequency is not None:
            pulumi.set(__self__, "aup_frequency", aup_frequency)
        if aup_message is not None:
            pulumi.set(__self__, "aup_message", aup_message)
        if caution_again_after is not None:
            pulumi.set(__self__, "caution_again_after", caution_again_after)
        if caution_custom_text is not None:
            pulumi.set(__self__, "caution_custom_text", caution_custom_text)
        if caution_per_domain is not None:
            pulumi.set(__self__, "caution_per_domain", caution_per_domain)
        if custom_text is not None:
            pulumi.set(__self__, "custom_text", custom_text)
        if display_comp_logo is not None:
            pulumi.set(__self__, "display_comp_logo", display_comp_logo)
        if display_comp_name is not None:
            pulumi.set(__self__, "display_comp_name", display_comp_name)
        if display_reason is not None:
            pulumi.set(__self__, "display_reason", display_reason)
        if idp_proxy_notification_text is not None:
            pulumi.set(__self__, "idp_proxy_notification_text", idp_proxy_notification_text)
        if notification_type is not None:
            pulumi.set(__self__, "notification_type", notification_type)
        if org_policy_link is not None:
            pulumi.set(__self__, "org_policy_link", org_policy_link)
        if quarantine_custom_notification_text is not None:
            pulumi.set(__self__, "quarantine_custom_notification_text", quarantine_custom_notification_text)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if security_review_custom_location is not None:
            pulumi.set(__self__, "security_review_custom_location", security_review_custom_location)
        if security_review_enabled is not None:
            pulumi.set(__self__, "security_review_enabled", security_review_enabled)
        if security_review_submit_to_security_cloud is not None:
            pulumi.set(__self__, "security_review_submit_to_security_cloud", security_review_submit_to_security_cloud)
        if security_review_text is not None:
            pulumi.set(__self__, "security_review_text", security_review_text)
        if support_email is not None:
            pulumi.set(__self__, "support_email", support_email)
        if support_phone is not None:
            pulumi.set(__self__, "support_phone", support_phone)
        if url_cat_review_custom_location is not None:
            pulumi.set(__self__, "url_cat_review_custom_location", url_cat_review_custom_location)
        if url_cat_review_enabled is not None:
            pulumi.set(__self__, "url_cat_review_enabled", url_cat_review_enabled)
        if url_cat_review_submit_to_security_cloud is not None:
            pulumi.set(__self__, "url_cat_review_submit_to_security_cloud", url_cat_review_submit_to_security_cloud)
        if url_cat_review_text is not None:
            pulumi.set(__self__, "url_cat_review_text", url_cat_review_text)
        if web_dlp_review_custom_location is not None:
            pulumi.set(__self__, "web_dlp_review_custom_location", web_dlp_review_custom_location)
        if web_dlp_review_enabled is not None:
            pulumi.set(__self__, "web_dlp_review_enabled", web_dlp_review_enabled)
        if web_dlp_review_submit_to_security_cloud is not None:
            pulumi.set(__self__, "web_dlp_review_submit_to_security_cloud", web_dlp_review_submit_to_security_cloud)
        if web_dlp_review_text is not None:
            pulumi.set(__self__, "web_dlp_review_text", web_dlp_review_text)

    @property
    @pulumi.getter(name="aupCustomFrequency")
    def aup_custom_frequency(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The custom frequency (in days) for showing the AUP to the end users. Valid range is 0 to 180.
        """
        return pulumi.get(self, "aup_custom_frequency")

    @aup_custom_frequency.setter
    def aup_custom_frequency(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "aup_custom_frequency", value)

    @property
    @pulumi.getter(name="aupDayOffset")
    def aup_day_offset(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Specifies which day of the week or month the AUP is shown for users when aupFrequency is set. Valid range is 0 to 31.
        """
        return pulumi.get(self, "aup_day_offset")

    @aup_day_offset.setter
    def aup_day_offset(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "aup_day_offset", value)

    @property
    @pulumi.getter(name="aupFrequency")
    def aup_frequency(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The frequency at which the Acceptable Use Policy (AUP) is shown to the end users
        """
        return pulumi.get(self, "aup_frequency")

    @aup_frequency.setter
    def aup_frequency(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "aup_frequency", value)

    @property
    @pulumi.getter(name="aupMessage")
    def aup_message(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The acceptable use statement that is shown in the AUP
        """
        return pulumi.get(self, "aup_message")

    @aup_message.setter
    def aup_message(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "aup_message", value)

    @property
    @pulumi.getter(name="cautionAgainAfter")
    def caution_again_after(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The time interval at which the caution notification is shown when users continue browsing a restricted site.
        """
        return pulumi.get(self, "caution_again_after")

    @caution_again_after.setter
    def caution_again_after(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "caution_again_after", value)

    @property
    @pulumi.getter(name="cautionCustomText")
    def caution_custom_text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The custom message that appears in the caution notification
        """
        return pulumi.get(self, "caution_custom_text")

    @caution_custom_text.setter
    def caution_custom_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "caution_custom_text", value)

    @property
    @pulumi.getter(name="cautionPerDomain")
    def caution_per_domain(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Specifies whether to display the caution notification at a specific time interval for URLs in the Miscellaneous or
        Unknown category.
        """
        return pulumi.get(self, "caution_per_domain")

    @caution_per_domain.setter
    def caution_per_domain(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "caution_per_domain", value)

    @property
    @pulumi.getter(name="customText")
    def custom_text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The custom text shown in the EUN
        """
        return pulumi.get(self, "custom_text")

    @custom_text.setter
    def custom_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "custom_text", value)

    @property
    @pulumi.getter(name="displayCompLogo")
    def display_comp_logo(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether your organization's logo appears in the EUN or not
        """
        return pulumi.get(self, "display_comp_logo")

    @display_comp_logo.setter
    def display_comp_logo(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "display_comp_logo", value)

    @property
    @pulumi.getter(name="displayCompName")
    def display_comp_name(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether the organization's name appears in the EUN or not
        """
        return pulumi.get(self, "display_comp_name")

    @display_comp_name.setter
    def display_comp_name(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "display_comp_name", value)

    @property
    @pulumi.getter(name="displayReason")
    def display_reason(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether or not the reason for cautioning or blocking access to a site, file, or application
        is shown when the respective notification is triggered
        """
        return pulumi.get(self, "display_reason")

    @display_reason.setter
    def display_reason(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "display_reason", value)

    @property
    @pulumi.getter(name="idpProxyNotificationText")
    def idp_proxy_notification_text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The message that appears in the IdP Proxy notification
        """
        return pulumi.get(self, "idp_proxy_notification_text")

    @idp_proxy_notification_text.setter
    def idp_proxy_notification_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "idp_proxy_notification_text", value)

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of EUN as default or custom
        """
        return pulumi.get(self, "notification_type")

    @notification_type.setter
    def notification_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "notification_type", value)

    @property
    @pulumi.getter(name="orgPolicyLink")
    def org_policy_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The URL of the organization's policy page. This field is required for the default notification type.
        """
        return pulumi.get(self, "org_policy_link")

    @org_policy_link.setter
    def org_policy_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "org_policy_link", value)

    @property
    @pulumi.getter(name="quarantineCustomNotificationText")
    def quarantine_custom_notification_text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The message that appears in the quarantine notification
        """
        return pulumi.get(self, "quarantine_custom_notification_text")

    @quarantine_custom_notification_text.setter
    def quarantine_custom_notification_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "quarantine_custom_notification_text", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The redirect URL for the external site hosting the EUN specified when the custom notification type is selected
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="securityReviewCustomLocation")
    def security_review_custom_location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
        users.
        """
        return pulumi.get(self, "security_review_custom_location")

    @security_review_custom_location.setter
    def security_review_custom_location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "security_review_custom_location", value)

    @property
    @pulumi.getter(name="securityReviewEnabled")
    def security_review_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether the Security Violation notification is enabled or disabled
        """
        return pulumi.get(self, "security_review_enabled")

    @security_review_enabled.setter
    def security_review_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "security_review_enabled", value)

    @property
    @pulumi.getter(name="securityReviewSubmitToSecurityCloud")
    def security_review_submit_to_security_cloud(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether users' review requests for blocked URLs are submitted to the Zscaler service (i.e.,
        Security Cloud) or a custom location.
        """
        return pulumi.get(self, "security_review_submit_to_security_cloud")

    @security_review_submit_to_security_cloud.setter
    def security_review_submit_to_security_cloud(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "security_review_submit_to_security_cloud", value)

    @property
    @pulumi.getter(name="securityReviewText")
    def security_review_text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The message that appears in the Security Violation notification
        """
        return pulumi.get(self, "security_review_text")

    @security_review_text.setter
    def security_review_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "security_review_text", value)

    @property
    @pulumi.getter(name="supportEmail")
    def support_email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The email address for writing to IT Support
        """
        return pulumi.get(self, "support_email")

    @support_email.setter
    def support_email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "support_email", value)

    @property
    @pulumi.getter(name="supportPhone")
    def support_phone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The phone number for contacting IT Support
        """
        return pulumi.get(self, "support_phone")

    @support_phone.setter
    def support_phone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "support_phone", value)

    @property
    @pulumi.getter(name="urlCatReviewCustomLocation")
    def url_cat_review_custom_location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A custom URL location where users' review requests for blocked URLs are sent
        """
        return pulumi.get(self, "url_cat_review_custom_location")

    @url_cat_review_custom_location.setter
    def url_cat_review_custom_location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "url_cat_review_custom_location", value)

    @property
    @pulumi.getter(name="urlCatReviewEnabled")
    def url_cat_review_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether the URL Categorization notification is enabled or disabled
        """
        return pulumi.get(self, "url_cat_review_enabled")

    @url_cat_review_enabled.setter
    def url_cat_review_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "url_cat_review_enabled", value)

    @property
    @pulumi.getter(name="urlCatReviewSubmitToSecurityCloud")
    def url_cat_review_submit_to_security_cloud(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether users' review requests for possibly misclassified URLs are submitted to the Zscaler
        service (i.e., Security Cloud) or a custom location.
        """
        return pulumi.get(self, "url_cat_review_submit_to_security_cloud")

    @url_cat_review_submit_to_security_cloud.setter
    def url_cat_review_submit_to_security_cloud(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "url_cat_review_submit_to_security_cloud", value)

    @property
    @pulumi.getter(name="urlCatReviewText")
    def url_cat_review_text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The message that appears in the URL Categorization notification
        """
        return pulumi.get(self, "url_cat_review_text")

    @url_cat_review_text.setter
    def url_cat_review_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "url_cat_review_text", value)

    @property
    @pulumi.getter(name="webDlpReviewCustomLocation")
    def web_dlp_review_custom_location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A custom URL location where users' review requests for the web DLP policy violation are sent
        """
        return pulumi.get(self, "web_dlp_review_custom_location")

    @web_dlp_review_custom_location.setter
    def web_dlp_review_custom_location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "web_dlp_review_custom_location", value)

    @property
    @pulumi.getter(name="webDlpReviewEnabled")
    def web_dlp_review_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether the Web DLP Violation notification is enabled or disabled
        """
        return pulumi.get(self, "web_dlp_review_enabled")

    @web_dlp_review_enabled.setter
    def web_dlp_review_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "web_dlp_review_enabled", value)

    @property
    @pulumi.getter(name="webDlpReviewSubmitToSecurityCloud")
    def web_dlp_review_submit_to_security_cloud(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether users' review requests for web DLP policy violation are submitted to the Zscaler
        service (i.e., Security Cloud) or a custom location.
        """
        return pulumi.get(self, "web_dlp_review_submit_to_security_cloud")

    @web_dlp_review_submit_to_security_cloud.setter
    def web_dlp_review_submit_to_security_cloud(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "web_dlp_review_submit_to_security_cloud", value)

    @property
    @pulumi.getter(name="webDlpReviewText")
    def web_dlp_review_text(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The message that appears in the Web DLP Violation notification
        """
        return pulumi.get(self, "web_dlp_review_text")

    @web_dlp_review_text.setter
    def web_dlp_review_text(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "web_dlp_review_text", value)


@pulumi.type_token("zia:index/endUserNotification:EndUserNotification")
class EndUserNotification(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aup_custom_frequency: Optional[pulumi.Input[builtins.int]] = None,
                 aup_day_offset: Optional[pulumi.Input[builtins.int]] = None,
                 aup_frequency: Optional[pulumi.Input[builtins.str]] = None,
                 aup_message: Optional[pulumi.Input[builtins.str]] = None,
                 caution_again_after: Optional[pulumi.Input[builtins.int]] = None,
                 caution_custom_text: Optional[pulumi.Input[builtins.str]] = None,
                 caution_per_domain: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_text: Optional[pulumi.Input[builtins.str]] = None,
                 display_comp_logo: Optional[pulumi.Input[builtins.bool]] = None,
                 display_comp_name: Optional[pulumi.Input[builtins.bool]] = None,
                 display_reason: Optional[pulumi.Input[builtins.bool]] = None,
                 idp_proxy_notification_text: Optional[pulumi.Input[builtins.str]] = None,
                 notification_type: Optional[pulumi.Input[builtins.str]] = None,
                 org_policy_link: Optional[pulumi.Input[builtins.str]] = None,
                 quarantine_custom_notification_text: Optional[pulumi.Input[builtins.str]] = None,
                 redirect_url: Optional[pulumi.Input[builtins.str]] = None,
                 security_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
                 security_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 security_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
                 security_review_text: Optional[pulumi.Input[builtins.str]] = None,
                 support_email: Optional[pulumi.Input[builtins.str]] = None,
                 support_phone: Optional[pulumi.Input[builtins.str]] = None,
                 url_cat_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
                 url_cat_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 url_cat_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
                 url_cat_review_text: Optional[pulumi.Input[builtins.str]] = None,
                 web_dlp_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
                 web_dlp_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 web_dlp_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
                 web_dlp_review_text: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zia/understanding-browser-based-end-user-notifications)
        * [API documentation](https://help.zscaler.com/zia/end-user-notifications#/eun-get)

        The **zia_end_user_notification** resource allows you to update the browser-based end user notification (EUN) configuration details. To learn more see [Understanding Browser-Based End User Notifications](https://help.zscaler.com/unified/understanding-browser-based-end-user-notifications)

        ## Example Usage

        ### NOTIFICATION TYPE - DEFAULT

        ### NOTIFICATION TYPE - CUSTOM

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_end_user_notification** can be imported by using `enduser_notification` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/endUserNotification:EndUserNotification this "enduser_notification"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.int] aup_custom_frequency: The custom frequency (in days) for showing the AUP to the end users. Valid range is 0 to 180.
        :param pulumi.Input[builtins.int] aup_day_offset: Specifies which day of the week or month the AUP is shown for users when aupFrequency is set. Valid range is 0 to 31.
        :param pulumi.Input[builtins.str] aup_frequency: The frequency at which the Acceptable Use Policy (AUP) is shown to the end users
        :param pulumi.Input[builtins.str] aup_message: The acceptable use statement that is shown in the AUP
        :param pulumi.Input[builtins.int] caution_again_after: The time interval at which the caution notification is shown when users continue browsing a restricted site.
        :param pulumi.Input[builtins.str] caution_custom_text: The custom message that appears in the caution notification
        :param pulumi.Input[builtins.bool] caution_per_domain: Specifies whether to display the caution notification at a specific time interval for URLs in the Miscellaneous or
               Unknown category.
        :param pulumi.Input[builtins.str] custom_text: The custom text shown in the EUN
        :param pulumi.Input[builtins.bool] display_comp_logo: A Boolean value indicating whether your organization's logo appears in the EUN or not
        :param pulumi.Input[builtins.bool] display_comp_name: A Boolean value indicating whether the organization's name appears in the EUN or not
        :param pulumi.Input[builtins.bool] display_reason: A Boolean value indicating whether or not the reason for cautioning or blocking access to a site, file, or application
               is shown when the respective notification is triggered
        :param pulumi.Input[builtins.str] idp_proxy_notification_text: The message that appears in the IdP Proxy notification
        :param pulumi.Input[builtins.str] notification_type: The type of EUN as default or custom
        :param pulumi.Input[builtins.str] org_policy_link: The URL of the organization's policy page. This field is required for the default notification type.
        :param pulumi.Input[builtins.str] quarantine_custom_notification_text: The message that appears in the quarantine notification
        :param pulumi.Input[builtins.str] redirect_url: The redirect URL for the external site hosting the EUN specified when the custom notification type is selected
        :param pulumi.Input[builtins.str] security_review_custom_location: Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
               users.
        :param pulumi.Input[builtins.bool] security_review_enabled: A Boolean value indicating whether the Security Violation notification is enabled or disabled
        :param pulumi.Input[builtins.bool] security_review_submit_to_security_cloud: A Boolean value indicating whether users' review requests for blocked URLs are submitted to the Zscaler service (i.e.,
               Security Cloud) or a custom location.
        :param pulumi.Input[builtins.str] security_review_text: The message that appears in the Security Violation notification
        :param pulumi.Input[builtins.str] support_email: The email address for writing to IT Support
        :param pulumi.Input[builtins.str] support_phone: The phone number for contacting IT Support
        :param pulumi.Input[builtins.str] url_cat_review_custom_location: A custom URL location where users' review requests for blocked URLs are sent
        :param pulumi.Input[builtins.bool] url_cat_review_enabled: A Boolean value indicating whether the URL Categorization notification is enabled or disabled
        :param pulumi.Input[builtins.bool] url_cat_review_submit_to_security_cloud: A Boolean value indicating whether users' review requests for possibly misclassified URLs are submitted to the Zscaler
               service (i.e., Security Cloud) or a custom location.
        :param pulumi.Input[builtins.str] url_cat_review_text: The message that appears in the URL Categorization notification
        :param pulumi.Input[builtins.str] web_dlp_review_custom_location: A custom URL location where users' review requests for the web DLP policy violation are sent
        :param pulumi.Input[builtins.bool] web_dlp_review_enabled: A Boolean value indicating whether the Web DLP Violation notification is enabled or disabled
        :param pulumi.Input[builtins.bool] web_dlp_review_submit_to_security_cloud: A Boolean value indicating whether users' review requests for web DLP policy violation are submitted to the Zscaler
               service (i.e., Security Cloud) or a custom location.
        :param pulumi.Input[builtins.str] web_dlp_review_text: The message that appears in the Web DLP Violation notification
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[EndUserNotificationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zia/understanding-browser-based-end-user-notifications)
        * [API documentation](https://help.zscaler.com/zia/end-user-notifications#/eun-get)

        The **zia_end_user_notification** resource allows you to update the browser-based end user notification (EUN) configuration details. To learn more see [Understanding Browser-Based End User Notifications](https://help.zscaler.com/unified/understanding-browser-based-end-user-notifications)

        ## Example Usage

        ### NOTIFICATION TYPE - DEFAULT

        ### NOTIFICATION TYPE - CUSTOM

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_end_user_notification** can be imported by using `enduser_notification` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/endUserNotification:EndUserNotification this "enduser_notification"
        ```

        :param str resource_name: The name of the resource.
        :param EndUserNotificationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EndUserNotificationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aup_custom_frequency: Optional[pulumi.Input[builtins.int]] = None,
                 aup_day_offset: Optional[pulumi.Input[builtins.int]] = None,
                 aup_frequency: Optional[pulumi.Input[builtins.str]] = None,
                 aup_message: Optional[pulumi.Input[builtins.str]] = None,
                 caution_again_after: Optional[pulumi.Input[builtins.int]] = None,
                 caution_custom_text: Optional[pulumi.Input[builtins.str]] = None,
                 caution_per_domain: Optional[pulumi.Input[builtins.bool]] = None,
                 custom_text: Optional[pulumi.Input[builtins.str]] = None,
                 display_comp_logo: Optional[pulumi.Input[builtins.bool]] = None,
                 display_comp_name: Optional[pulumi.Input[builtins.bool]] = None,
                 display_reason: Optional[pulumi.Input[builtins.bool]] = None,
                 idp_proxy_notification_text: Optional[pulumi.Input[builtins.str]] = None,
                 notification_type: Optional[pulumi.Input[builtins.str]] = None,
                 org_policy_link: Optional[pulumi.Input[builtins.str]] = None,
                 quarantine_custom_notification_text: Optional[pulumi.Input[builtins.str]] = None,
                 redirect_url: Optional[pulumi.Input[builtins.str]] = None,
                 security_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
                 security_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 security_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
                 security_review_text: Optional[pulumi.Input[builtins.str]] = None,
                 support_email: Optional[pulumi.Input[builtins.str]] = None,
                 support_phone: Optional[pulumi.Input[builtins.str]] = None,
                 url_cat_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
                 url_cat_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 url_cat_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
                 url_cat_review_text: Optional[pulumi.Input[builtins.str]] = None,
                 web_dlp_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
                 web_dlp_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 web_dlp_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
                 web_dlp_review_text: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EndUserNotificationArgs.__new__(EndUserNotificationArgs)

            __props__.__dict__["aup_custom_frequency"] = aup_custom_frequency
            __props__.__dict__["aup_day_offset"] = aup_day_offset
            __props__.__dict__["aup_frequency"] = aup_frequency
            __props__.__dict__["aup_message"] = aup_message
            __props__.__dict__["caution_again_after"] = caution_again_after
            __props__.__dict__["caution_custom_text"] = caution_custom_text
            __props__.__dict__["caution_per_domain"] = caution_per_domain
            __props__.__dict__["custom_text"] = custom_text
            __props__.__dict__["display_comp_logo"] = display_comp_logo
            __props__.__dict__["display_comp_name"] = display_comp_name
            __props__.__dict__["display_reason"] = display_reason
            __props__.__dict__["idp_proxy_notification_text"] = idp_proxy_notification_text
            __props__.__dict__["notification_type"] = notification_type
            __props__.__dict__["org_policy_link"] = org_policy_link
            __props__.__dict__["quarantine_custom_notification_text"] = quarantine_custom_notification_text
            __props__.__dict__["redirect_url"] = redirect_url
            __props__.__dict__["security_review_custom_location"] = security_review_custom_location
            __props__.__dict__["security_review_enabled"] = security_review_enabled
            __props__.__dict__["security_review_submit_to_security_cloud"] = security_review_submit_to_security_cloud
            __props__.__dict__["security_review_text"] = security_review_text
            __props__.__dict__["support_email"] = support_email
            __props__.__dict__["support_phone"] = support_phone
            __props__.__dict__["url_cat_review_custom_location"] = url_cat_review_custom_location
            __props__.__dict__["url_cat_review_enabled"] = url_cat_review_enabled
            __props__.__dict__["url_cat_review_submit_to_security_cloud"] = url_cat_review_submit_to_security_cloud
            __props__.__dict__["url_cat_review_text"] = url_cat_review_text
            __props__.__dict__["web_dlp_review_custom_location"] = web_dlp_review_custom_location
            __props__.__dict__["web_dlp_review_enabled"] = web_dlp_review_enabled
            __props__.__dict__["web_dlp_review_submit_to_security_cloud"] = web_dlp_review_submit_to_security_cloud
            __props__.__dict__["web_dlp_review_text"] = web_dlp_review_text
        super(EndUserNotification, __self__).__init__(
            'zia:index/endUserNotification:EndUserNotification',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aup_custom_frequency: Optional[pulumi.Input[builtins.int]] = None,
            aup_day_offset: Optional[pulumi.Input[builtins.int]] = None,
            aup_frequency: Optional[pulumi.Input[builtins.str]] = None,
            aup_message: Optional[pulumi.Input[builtins.str]] = None,
            caution_again_after: Optional[pulumi.Input[builtins.int]] = None,
            caution_custom_text: Optional[pulumi.Input[builtins.str]] = None,
            caution_per_domain: Optional[pulumi.Input[builtins.bool]] = None,
            custom_text: Optional[pulumi.Input[builtins.str]] = None,
            display_comp_logo: Optional[pulumi.Input[builtins.bool]] = None,
            display_comp_name: Optional[pulumi.Input[builtins.bool]] = None,
            display_reason: Optional[pulumi.Input[builtins.bool]] = None,
            idp_proxy_notification_text: Optional[pulumi.Input[builtins.str]] = None,
            notification_type: Optional[pulumi.Input[builtins.str]] = None,
            org_policy_link: Optional[pulumi.Input[builtins.str]] = None,
            quarantine_custom_notification_text: Optional[pulumi.Input[builtins.str]] = None,
            redirect_url: Optional[pulumi.Input[builtins.str]] = None,
            security_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
            security_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            security_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
            security_review_text: Optional[pulumi.Input[builtins.str]] = None,
            support_email: Optional[pulumi.Input[builtins.str]] = None,
            support_phone: Optional[pulumi.Input[builtins.str]] = None,
            url_cat_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
            url_cat_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            url_cat_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
            url_cat_review_text: Optional[pulumi.Input[builtins.str]] = None,
            web_dlp_review_custom_location: Optional[pulumi.Input[builtins.str]] = None,
            web_dlp_review_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            web_dlp_review_submit_to_security_cloud: Optional[pulumi.Input[builtins.bool]] = None,
            web_dlp_review_text: Optional[pulumi.Input[builtins.str]] = None) -> 'EndUserNotification':
        """
        Get an existing EndUserNotification resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.int] aup_custom_frequency: The custom frequency (in days) for showing the AUP to the end users. Valid range is 0 to 180.
        :param pulumi.Input[builtins.int] aup_day_offset: Specifies which day of the week or month the AUP is shown for users when aupFrequency is set. Valid range is 0 to 31.
        :param pulumi.Input[builtins.str] aup_frequency: The frequency at which the Acceptable Use Policy (AUP) is shown to the end users
        :param pulumi.Input[builtins.str] aup_message: The acceptable use statement that is shown in the AUP
        :param pulumi.Input[builtins.int] caution_again_after: The time interval at which the caution notification is shown when users continue browsing a restricted site.
        :param pulumi.Input[builtins.str] caution_custom_text: The custom message that appears in the caution notification
        :param pulumi.Input[builtins.bool] caution_per_domain: Specifies whether to display the caution notification at a specific time interval for URLs in the Miscellaneous or
               Unknown category.
        :param pulumi.Input[builtins.str] custom_text: The custom text shown in the EUN
        :param pulumi.Input[builtins.bool] display_comp_logo: A Boolean value indicating whether your organization's logo appears in the EUN or not
        :param pulumi.Input[builtins.bool] display_comp_name: A Boolean value indicating whether the organization's name appears in the EUN or not
        :param pulumi.Input[builtins.bool] display_reason: A Boolean value indicating whether or not the reason for cautioning or blocking access to a site, file, or application
               is shown when the respective notification is triggered
        :param pulumi.Input[builtins.str] idp_proxy_notification_text: The message that appears in the IdP Proxy notification
        :param pulumi.Input[builtins.str] notification_type: The type of EUN as default or custom
        :param pulumi.Input[builtins.str] org_policy_link: The URL of the organization's policy page. This field is required for the default notification type.
        :param pulumi.Input[builtins.str] quarantine_custom_notification_text: The message that appears in the quarantine notification
        :param pulumi.Input[builtins.str] redirect_url: The redirect URL for the external site hosting the EUN specified when the custom notification type is selected
        :param pulumi.Input[builtins.str] security_review_custom_location: Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
               users.
        :param pulumi.Input[builtins.bool] security_review_enabled: A Boolean value indicating whether the Security Violation notification is enabled or disabled
        :param pulumi.Input[builtins.bool] security_review_submit_to_security_cloud: A Boolean value indicating whether users' review requests for blocked URLs are submitted to the Zscaler service (i.e.,
               Security Cloud) or a custom location.
        :param pulumi.Input[builtins.str] security_review_text: The message that appears in the Security Violation notification
        :param pulumi.Input[builtins.str] support_email: The email address for writing to IT Support
        :param pulumi.Input[builtins.str] support_phone: The phone number for contacting IT Support
        :param pulumi.Input[builtins.str] url_cat_review_custom_location: A custom URL location where users' review requests for blocked URLs are sent
        :param pulumi.Input[builtins.bool] url_cat_review_enabled: A Boolean value indicating whether the URL Categorization notification is enabled or disabled
        :param pulumi.Input[builtins.bool] url_cat_review_submit_to_security_cloud: A Boolean value indicating whether users' review requests for possibly misclassified URLs are submitted to the Zscaler
               service (i.e., Security Cloud) or a custom location.
        :param pulumi.Input[builtins.str] url_cat_review_text: The message that appears in the URL Categorization notification
        :param pulumi.Input[builtins.str] web_dlp_review_custom_location: A custom URL location where users' review requests for the web DLP policy violation are sent
        :param pulumi.Input[builtins.bool] web_dlp_review_enabled: A Boolean value indicating whether the Web DLP Violation notification is enabled or disabled
        :param pulumi.Input[builtins.bool] web_dlp_review_submit_to_security_cloud: A Boolean value indicating whether users' review requests for web DLP policy violation are submitted to the Zscaler
               service (i.e., Security Cloud) or a custom location.
        :param pulumi.Input[builtins.str] web_dlp_review_text: The message that appears in the Web DLP Violation notification
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EndUserNotificationState.__new__(_EndUserNotificationState)

        __props__.__dict__["aup_custom_frequency"] = aup_custom_frequency
        __props__.__dict__["aup_day_offset"] = aup_day_offset
        __props__.__dict__["aup_frequency"] = aup_frequency
        __props__.__dict__["aup_message"] = aup_message
        __props__.__dict__["caution_again_after"] = caution_again_after
        __props__.__dict__["caution_custom_text"] = caution_custom_text
        __props__.__dict__["caution_per_domain"] = caution_per_domain
        __props__.__dict__["custom_text"] = custom_text
        __props__.__dict__["display_comp_logo"] = display_comp_logo
        __props__.__dict__["display_comp_name"] = display_comp_name
        __props__.__dict__["display_reason"] = display_reason
        __props__.__dict__["idp_proxy_notification_text"] = idp_proxy_notification_text
        __props__.__dict__["notification_type"] = notification_type
        __props__.__dict__["org_policy_link"] = org_policy_link
        __props__.__dict__["quarantine_custom_notification_text"] = quarantine_custom_notification_text
        __props__.__dict__["redirect_url"] = redirect_url
        __props__.__dict__["security_review_custom_location"] = security_review_custom_location
        __props__.__dict__["security_review_enabled"] = security_review_enabled
        __props__.__dict__["security_review_submit_to_security_cloud"] = security_review_submit_to_security_cloud
        __props__.__dict__["security_review_text"] = security_review_text
        __props__.__dict__["support_email"] = support_email
        __props__.__dict__["support_phone"] = support_phone
        __props__.__dict__["url_cat_review_custom_location"] = url_cat_review_custom_location
        __props__.__dict__["url_cat_review_enabled"] = url_cat_review_enabled
        __props__.__dict__["url_cat_review_submit_to_security_cloud"] = url_cat_review_submit_to_security_cloud
        __props__.__dict__["url_cat_review_text"] = url_cat_review_text
        __props__.__dict__["web_dlp_review_custom_location"] = web_dlp_review_custom_location
        __props__.__dict__["web_dlp_review_enabled"] = web_dlp_review_enabled
        __props__.__dict__["web_dlp_review_submit_to_security_cloud"] = web_dlp_review_submit_to_security_cloud
        __props__.__dict__["web_dlp_review_text"] = web_dlp_review_text
        return EndUserNotification(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aupCustomFrequency")
    def aup_custom_frequency(self) -> pulumi.Output[builtins.int]:
        """
        The custom frequency (in days) for showing the AUP to the end users. Valid range is 0 to 180.
        """
        return pulumi.get(self, "aup_custom_frequency")

    @property
    @pulumi.getter(name="aupDayOffset")
    def aup_day_offset(self) -> pulumi.Output[builtins.int]:
        """
        Specifies which day of the week or month the AUP is shown for users when aupFrequency is set. Valid range is 0 to 31.
        """
        return pulumi.get(self, "aup_day_offset")

    @property
    @pulumi.getter(name="aupFrequency")
    def aup_frequency(self) -> pulumi.Output[builtins.str]:
        """
        The frequency at which the Acceptable Use Policy (AUP) is shown to the end users
        """
        return pulumi.get(self, "aup_frequency")

    @property
    @pulumi.getter(name="aupMessage")
    def aup_message(self) -> pulumi.Output[builtins.str]:
        """
        The acceptable use statement that is shown in the AUP
        """
        return pulumi.get(self, "aup_message")

    @property
    @pulumi.getter(name="cautionAgainAfter")
    def caution_again_after(self) -> pulumi.Output[builtins.int]:
        """
        The time interval at which the caution notification is shown when users continue browsing a restricted site.
        """
        return pulumi.get(self, "caution_again_after")

    @property
    @pulumi.getter(name="cautionCustomText")
    def caution_custom_text(self) -> pulumi.Output[builtins.str]:
        """
        The custom message that appears in the caution notification
        """
        return pulumi.get(self, "caution_custom_text")

    @property
    @pulumi.getter(name="cautionPerDomain")
    def caution_per_domain(self) -> pulumi.Output[builtins.bool]:
        """
        Specifies whether to display the caution notification at a specific time interval for URLs in the Miscellaneous or
        Unknown category.
        """
        return pulumi.get(self, "caution_per_domain")

    @property
    @pulumi.getter(name="customText")
    def custom_text(self) -> pulumi.Output[builtins.str]:
        """
        The custom text shown in the EUN
        """
        return pulumi.get(self, "custom_text")

    @property
    @pulumi.getter(name="displayCompLogo")
    def display_comp_logo(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating whether your organization's logo appears in the EUN or not
        """
        return pulumi.get(self, "display_comp_logo")

    @property
    @pulumi.getter(name="displayCompName")
    def display_comp_name(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating whether the organization's name appears in the EUN or not
        """
        return pulumi.get(self, "display_comp_name")

    @property
    @pulumi.getter(name="displayReason")
    def display_reason(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating whether or not the reason for cautioning or blocking access to a site, file, or application
        is shown when the respective notification is triggered
        """
        return pulumi.get(self, "display_reason")

    @property
    @pulumi.getter(name="idpProxyNotificationText")
    def idp_proxy_notification_text(self) -> pulumi.Output[builtins.str]:
        """
        The message that appears in the IdP Proxy notification
        """
        return pulumi.get(self, "idp_proxy_notification_text")

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> pulumi.Output[builtins.str]:
        """
        The type of EUN as default or custom
        """
        return pulumi.get(self, "notification_type")

    @property
    @pulumi.getter(name="orgPolicyLink")
    def org_policy_link(self) -> pulumi.Output[builtins.str]:
        """
        The URL of the organization's policy page. This field is required for the default notification type.
        """
        return pulumi.get(self, "org_policy_link")

    @property
    @pulumi.getter(name="quarantineCustomNotificationText")
    def quarantine_custom_notification_text(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The message that appears in the quarantine notification
        """
        return pulumi.get(self, "quarantine_custom_notification_text")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Output[builtins.str]:
        """
        The redirect URL for the external site hosting the EUN specified when the custom notification type is selected
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="securityReviewCustomLocation")
    def security_review_custom_location(self) -> pulumi.Output[builtins.str]:
        """
        Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
        users.
        """
        return pulumi.get(self, "security_review_custom_location")

    @property
    @pulumi.getter(name="securityReviewEnabled")
    def security_review_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating whether the Security Violation notification is enabled or disabled
        """
        return pulumi.get(self, "security_review_enabled")

    @property
    @pulumi.getter(name="securityReviewSubmitToSecurityCloud")
    def security_review_submit_to_security_cloud(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating whether users' review requests for blocked URLs are submitted to the Zscaler service (i.e.,
        Security Cloud) or a custom location.
        """
        return pulumi.get(self, "security_review_submit_to_security_cloud")

    @property
    @pulumi.getter(name="securityReviewText")
    def security_review_text(self) -> pulumi.Output[builtins.str]:
        """
        The message that appears in the Security Violation notification
        """
        return pulumi.get(self, "security_review_text")

    @property
    @pulumi.getter(name="supportEmail")
    def support_email(self) -> pulumi.Output[builtins.str]:
        """
        The email address for writing to IT Support
        """
        return pulumi.get(self, "support_email")

    @property
    @pulumi.getter(name="supportPhone")
    def support_phone(self) -> pulumi.Output[builtins.str]:
        """
        The phone number for contacting IT Support
        """
        return pulumi.get(self, "support_phone")

    @property
    @pulumi.getter(name="urlCatReviewCustomLocation")
    def url_cat_review_custom_location(self) -> pulumi.Output[builtins.str]:
        """
        A custom URL location where users' review requests for blocked URLs are sent
        """
        return pulumi.get(self, "url_cat_review_custom_location")

    @property
    @pulumi.getter(name="urlCatReviewEnabled")
    def url_cat_review_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating whether the URL Categorization notification is enabled or disabled
        """
        return pulumi.get(self, "url_cat_review_enabled")

    @property
    @pulumi.getter(name="urlCatReviewSubmitToSecurityCloud")
    def url_cat_review_submit_to_security_cloud(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating whether users' review requests for possibly misclassified URLs are submitted to the Zscaler
        service (i.e., Security Cloud) or a custom location.
        """
        return pulumi.get(self, "url_cat_review_submit_to_security_cloud")

    @property
    @pulumi.getter(name="urlCatReviewText")
    def url_cat_review_text(self) -> pulumi.Output[builtins.str]:
        """
        The message that appears in the URL Categorization notification
        """
        return pulumi.get(self, "url_cat_review_text")

    @property
    @pulumi.getter(name="webDlpReviewCustomLocation")
    def web_dlp_review_custom_location(self) -> pulumi.Output[builtins.str]:
        """
        A custom URL location where users' review requests for the web DLP policy violation are sent
        """
        return pulumi.get(self, "web_dlp_review_custom_location")

    @property
    @pulumi.getter(name="webDlpReviewEnabled")
    def web_dlp_review_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating whether the Web DLP Violation notification is enabled or disabled
        """
        return pulumi.get(self, "web_dlp_review_enabled")

    @property
    @pulumi.getter(name="webDlpReviewSubmitToSecurityCloud")
    def web_dlp_review_submit_to_security_cloud(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating whether users' review requests for web DLP policy violation are submitted to the Zscaler
        service (i.e., Security Cloud) or a custom location.
        """
        return pulumi.get(self, "web_dlp_review_submit_to_security_cloud")

    @property
    @pulumi.getter(name="webDlpReviewText")
    def web_dlp_review_text(self) -> pulumi.Output[builtins.str]:
        """
        The message that appears in the Web DLP Violation notification
        """
        return pulumi.get(self, "web_dlp_review_text")

