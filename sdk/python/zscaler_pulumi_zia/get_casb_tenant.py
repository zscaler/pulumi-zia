# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCasbTenantResult',
    'AwaitableGetCasbTenantResult',
    'get_casb_tenant',
    'get_casb_tenant_output',
]

@pulumi.output_type
class GetCasbTenantResult:
    """
    A collection of values returned by getCasbTenant.
    """
    def __init__(__self__, active_only=None, app=None, app_type=None, enterprise_tenant_id=None, features_supporteds=None, filter_by_features=None, id=None, include_bucket_ready_s3_tenants=None, include_deleted=None, last_tenant_validation_time=None, modified_time=None, re_auth=None, saas_application=None, scan_config_tenants_only=None, statuses=None, tenant_deleted=None, tenant_id=None, tenant_name=None, tenant_webhook_enabled=None, zscaler_app_tenant_ids=None):
        if active_only and not isinstance(active_only, bool):
            raise TypeError("Expected argument 'active_only' to be a bool")
        pulumi.set(__self__, "active_only", active_only)
        if app and not isinstance(app, str):
            raise TypeError("Expected argument 'app' to be a str")
        pulumi.set(__self__, "app", app)
        if app_type and not isinstance(app_type, str):
            raise TypeError("Expected argument 'app_type' to be a str")
        pulumi.set(__self__, "app_type", app_type)
        if enterprise_tenant_id and not isinstance(enterprise_tenant_id, str):
            raise TypeError("Expected argument 'enterprise_tenant_id' to be a str")
        pulumi.set(__self__, "enterprise_tenant_id", enterprise_tenant_id)
        if features_supporteds and not isinstance(features_supporteds, list):
            raise TypeError("Expected argument 'features_supporteds' to be a list")
        pulumi.set(__self__, "features_supporteds", features_supporteds)
        if filter_by_features and not isinstance(filter_by_features, list):
            raise TypeError("Expected argument 'filter_by_features' to be a list")
        pulumi.set(__self__, "filter_by_features", filter_by_features)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_bucket_ready_s3_tenants and not isinstance(include_bucket_ready_s3_tenants, bool):
            raise TypeError("Expected argument 'include_bucket_ready_s3_tenants' to be a bool")
        pulumi.set(__self__, "include_bucket_ready_s3_tenants", include_bucket_ready_s3_tenants)
        if include_deleted and not isinstance(include_deleted, bool):
            raise TypeError("Expected argument 'include_deleted' to be a bool")
        pulumi.set(__self__, "include_deleted", include_deleted)
        if last_tenant_validation_time and not isinstance(last_tenant_validation_time, int):
            raise TypeError("Expected argument 'last_tenant_validation_time' to be a int")
        pulumi.set(__self__, "last_tenant_validation_time", last_tenant_validation_time)
        if modified_time and not isinstance(modified_time, int):
            raise TypeError("Expected argument 'modified_time' to be a int")
        pulumi.set(__self__, "modified_time", modified_time)
        if re_auth and not isinstance(re_auth, bool):
            raise TypeError("Expected argument 're_auth' to be a bool")
        pulumi.set(__self__, "re_auth", re_auth)
        if saas_application and not isinstance(saas_application, str):
            raise TypeError("Expected argument 'saas_application' to be a str")
        pulumi.set(__self__, "saas_application", saas_application)
        if scan_config_tenants_only and not isinstance(scan_config_tenants_only, bool):
            raise TypeError("Expected argument 'scan_config_tenants_only' to be a bool")
        pulumi.set(__self__, "scan_config_tenants_only", scan_config_tenants_only)
        if statuses and not isinstance(statuses, list):
            raise TypeError("Expected argument 'statuses' to be a list")
        pulumi.set(__self__, "statuses", statuses)
        if tenant_deleted and not isinstance(tenant_deleted, bool):
            raise TypeError("Expected argument 'tenant_deleted' to be a bool")
        pulumi.set(__self__, "tenant_deleted", tenant_deleted)
        if tenant_id and not isinstance(tenant_id, int):
            raise TypeError("Expected argument 'tenant_id' to be a int")
        pulumi.set(__self__, "tenant_id", tenant_id)
        if tenant_name and not isinstance(tenant_name, str):
            raise TypeError("Expected argument 'tenant_name' to be a str")
        pulumi.set(__self__, "tenant_name", tenant_name)
        if tenant_webhook_enabled and not isinstance(tenant_webhook_enabled, bool):
            raise TypeError("Expected argument 'tenant_webhook_enabled' to be a bool")
        pulumi.set(__self__, "tenant_webhook_enabled", tenant_webhook_enabled)
        if zscaler_app_tenant_ids and not isinstance(zscaler_app_tenant_ids, list):
            raise TypeError("Expected argument 'zscaler_app_tenant_ids' to be a list")
        pulumi.set(__self__, "zscaler_app_tenant_ids", zscaler_app_tenant_ids)

    @property
    @pulumi.getter(name="activeOnly")
    def active_only(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "active_only")

    @property
    @pulumi.getter
    def app(self) -> Optional[builtins.str]:
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="appType")
    def app_type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "app_type")

    @property
    @pulumi.getter(name="enterpriseTenantId")
    def enterprise_tenant_id(self) -> builtins.str:
        return pulumi.get(self, "enterprise_tenant_id")

    @property
    @pulumi.getter(name="featuresSupporteds")
    def features_supporteds(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "features_supporteds")

    @property
    @pulumi.getter(name="filterByFeatures")
    def filter_by_features(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "filter_by_features")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeBucketReadyS3Tenants")
    def include_bucket_ready_s3_tenants(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "include_bucket_ready_s3_tenants")

    @property
    @pulumi.getter(name="includeDeleted")
    def include_deleted(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "include_deleted")

    @property
    @pulumi.getter(name="lastTenantValidationTime")
    def last_tenant_validation_time(self) -> builtins.int:
        return pulumi.get(self, "last_tenant_validation_time")

    @property
    @pulumi.getter(name="modifiedTime")
    def modified_time(self) -> builtins.int:
        return pulumi.get(self, "modified_time")

    @property
    @pulumi.getter(name="reAuth")
    def re_auth(self) -> builtins.bool:
        return pulumi.get(self, "re_auth")

    @property
    @pulumi.getter(name="saasApplication")
    def saas_application(self) -> builtins.str:
        return pulumi.get(self, "saas_application")

    @property
    @pulumi.getter(name="scanConfigTenantsOnly")
    def scan_config_tenants_only(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "scan_config_tenants_only")

    @property
    @pulumi.getter
    def statuses(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "statuses")

    @property
    @pulumi.getter(name="tenantDeleted")
    def tenant_deleted(self) -> builtins.bool:
        return pulumi.get(self, "tenant_deleted")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> builtins.int:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> builtins.str:
        return pulumi.get(self, "tenant_name")

    @property
    @pulumi.getter(name="tenantWebhookEnabled")
    def tenant_webhook_enabled(self) -> builtins.bool:
        return pulumi.get(self, "tenant_webhook_enabled")

    @property
    @pulumi.getter(name="zscalerAppTenantIds")
    def zscaler_app_tenant_ids(self) -> Sequence['outputs.GetCasbTenantZscalerAppTenantIdResult']:
        return pulumi.get(self, "zscaler_app_tenant_ids")


class AwaitableGetCasbTenantResult(GetCasbTenantResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCasbTenantResult(
            active_only=self.active_only,
            app=self.app,
            app_type=self.app_type,
            enterprise_tenant_id=self.enterprise_tenant_id,
            features_supporteds=self.features_supporteds,
            filter_by_features=self.filter_by_features,
            id=self.id,
            include_bucket_ready_s3_tenants=self.include_bucket_ready_s3_tenants,
            include_deleted=self.include_deleted,
            last_tenant_validation_time=self.last_tenant_validation_time,
            modified_time=self.modified_time,
            re_auth=self.re_auth,
            saas_application=self.saas_application,
            scan_config_tenants_only=self.scan_config_tenants_only,
            statuses=self.statuses,
            tenant_deleted=self.tenant_deleted,
            tenant_id=self.tenant_id,
            tenant_name=self.tenant_name,
            tenant_webhook_enabled=self.tenant_webhook_enabled,
            zscaler_app_tenant_ids=self.zscaler_app_tenant_ids)


def get_casb_tenant(active_only: Optional[builtins.bool] = None,
                    app: Optional[builtins.str] = None,
                    app_type: Optional[builtins.str] = None,
                    filter_by_features: Optional[Sequence[builtins.str]] = None,
                    include_bucket_ready_s3_tenants: Optional[builtins.bool] = None,
                    include_deleted: Optional[builtins.bool] = None,
                    scan_config_tenants_only: Optional[builtins.bool] = None,
                    tenant_id: Optional[builtins.int] = None,
                    tenant_name: Optional[builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCasbTenantResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-saas-application-tenants)
    * [API documentation](https://help.zscaler.com/zia/saas-security-api#/casbTenant/lite-get)

    Use the **zia_casb_tenant** data source to get information about a ZIA SaaS Application Tenants in the Zscaler Internet Access cloud or via the API.

    ## Example Usage

    ### By Name

    ### By ID

    ### Use Optional Parameters
    """
    __args__ = dict()
    __args__['activeOnly'] = active_only
    __args__['app'] = app
    __args__['appType'] = app_type
    __args__['filterByFeatures'] = filter_by_features
    __args__['includeBucketReadyS3Tenants'] = include_bucket_ready_s3_tenants
    __args__['includeDeleted'] = include_deleted
    __args__['scanConfigTenantsOnly'] = scan_config_tenants_only
    __args__['tenantId'] = tenant_id
    __args__['tenantName'] = tenant_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getCasbTenant:getCasbTenant', __args__, opts=opts, typ=GetCasbTenantResult).value

    return AwaitableGetCasbTenantResult(
        active_only=pulumi.get(__ret__, 'active_only'),
        app=pulumi.get(__ret__, 'app'),
        app_type=pulumi.get(__ret__, 'app_type'),
        enterprise_tenant_id=pulumi.get(__ret__, 'enterprise_tenant_id'),
        features_supporteds=pulumi.get(__ret__, 'features_supporteds'),
        filter_by_features=pulumi.get(__ret__, 'filter_by_features'),
        id=pulumi.get(__ret__, 'id'),
        include_bucket_ready_s3_tenants=pulumi.get(__ret__, 'include_bucket_ready_s3_tenants'),
        include_deleted=pulumi.get(__ret__, 'include_deleted'),
        last_tenant_validation_time=pulumi.get(__ret__, 'last_tenant_validation_time'),
        modified_time=pulumi.get(__ret__, 'modified_time'),
        re_auth=pulumi.get(__ret__, 're_auth'),
        saas_application=pulumi.get(__ret__, 'saas_application'),
        scan_config_tenants_only=pulumi.get(__ret__, 'scan_config_tenants_only'),
        statuses=pulumi.get(__ret__, 'statuses'),
        tenant_deleted=pulumi.get(__ret__, 'tenant_deleted'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'),
        tenant_name=pulumi.get(__ret__, 'tenant_name'),
        tenant_webhook_enabled=pulumi.get(__ret__, 'tenant_webhook_enabled'),
        zscaler_app_tenant_ids=pulumi.get(__ret__, 'zscaler_app_tenant_ids'))
def get_casb_tenant_output(active_only: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                           app: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           app_type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           filter_by_features: Optional[pulumi.Input[Optional[Sequence[builtins.str]]]] = None,
                           include_bucket_ready_s3_tenants: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                           include_deleted: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                           scan_config_tenants_only: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                           tenant_id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                           tenant_name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCasbTenantResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-saas-application-tenants)
    * [API documentation](https://help.zscaler.com/zia/saas-security-api#/casbTenant/lite-get)

    Use the **zia_casb_tenant** data source to get information about a ZIA SaaS Application Tenants in the Zscaler Internet Access cloud or via the API.

    ## Example Usage

    ### By Name

    ### By ID

    ### Use Optional Parameters
    """
    __args__ = dict()
    __args__['activeOnly'] = active_only
    __args__['app'] = app
    __args__['appType'] = app_type
    __args__['filterByFeatures'] = filter_by_features
    __args__['includeBucketReadyS3Tenants'] = include_bucket_ready_s3_tenants
    __args__['includeDeleted'] = include_deleted
    __args__['scanConfigTenantsOnly'] = scan_config_tenants_only
    __args__['tenantId'] = tenant_id
    __args__['tenantName'] = tenant_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getCasbTenant:getCasbTenant', __args__, opts=opts, typ=GetCasbTenantResult)
    return __ret__.apply(lambda __response__: GetCasbTenantResult(
        active_only=pulumi.get(__response__, 'active_only'),
        app=pulumi.get(__response__, 'app'),
        app_type=pulumi.get(__response__, 'app_type'),
        enterprise_tenant_id=pulumi.get(__response__, 'enterprise_tenant_id'),
        features_supporteds=pulumi.get(__response__, 'features_supporteds'),
        filter_by_features=pulumi.get(__response__, 'filter_by_features'),
        id=pulumi.get(__response__, 'id'),
        include_bucket_ready_s3_tenants=pulumi.get(__response__, 'include_bucket_ready_s3_tenants'),
        include_deleted=pulumi.get(__response__, 'include_deleted'),
        last_tenant_validation_time=pulumi.get(__response__, 'last_tenant_validation_time'),
        modified_time=pulumi.get(__response__, 'modified_time'),
        re_auth=pulumi.get(__response__, 're_auth'),
        saas_application=pulumi.get(__response__, 'saas_application'),
        scan_config_tenants_only=pulumi.get(__response__, 'scan_config_tenants_only'),
        statuses=pulumi.get(__response__, 'statuses'),
        tenant_deleted=pulumi.get(__response__, 'tenant_deleted'),
        tenant_id=pulumi.get(__response__, 'tenant_id'),
        tenant_name=pulumi.get(__response__, 'tenant_name'),
        tenant_webhook_enabled=pulumi.get(__response__, 'tenant_webhook_enabled'),
        zscaler_app_tenant_ids=pulumi.get(__response__, 'zscaler_app_tenant_ids')))
