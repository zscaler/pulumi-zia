# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['TrafficForwardingStaticIPArgs', 'TrafficForwardingStaticIP']

@pulumi.input_type
class TrafficForwardingStaticIPArgs:
    def __init__(__self__, *,
                 ip_address: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None,
                 geo_override: Optional[pulumi.Input[bool]] = None,
                 latitude: Optional[pulumi.Input[float]] = None,
                 longitude: Optional[pulumi.Input[float]] = None,
                 routable_ip: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a TrafficForwardingStaticIP resource.
        :param pulumi.Input[str] ip_address: The static IP address
        :param pulumi.Input[str] comment: Additional information about this static IP address
        :param pulumi.Input[bool] geo_override: If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.
        :param pulumi.Input[float] latitude: Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between -90 and 90 degrees.
        :param pulumi.Input[float] longitude: Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between -180 and 180 degrees.
        :param pulumi.Input[bool] routable_ip: Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.
        """
        pulumi.set(__self__, "ip_address", ip_address)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if geo_override is not None:
            pulumi.set(__self__, "geo_override", geo_override)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)
        if routable_ip is not None:
            pulumi.set(__self__, "routable_ip", routable_ip)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        """
        The static IP address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information about this static IP address
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="geoOverride")
    def geo_override(self) -> Optional[pulumi.Input[bool]]:
        """
        If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.
        """
        return pulumi.get(self, "geo_override")

    @geo_override.setter
    def geo_override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "geo_override", value)

    @property
    @pulumi.getter
    def latitude(self) -> Optional[pulumi.Input[float]]:
        """
        Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between -90 and 90 degrees.
        """
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "latitude", value)

    @property
    @pulumi.getter
    def longitude(self) -> Optional[pulumi.Input[float]]:
        """
        Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between -180 and 180 degrees.
        """
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "longitude", value)

    @property
    @pulumi.getter(name="routableIp")
    def routable_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.
        """
        return pulumi.get(self, "routable_ip")

    @routable_ip.setter
    def routable_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "routable_ip", value)


@pulumi.input_type
class _TrafficForwardingStaticIPState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 geo_override: Optional[pulumi.Input[bool]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 latitude: Optional[pulumi.Input[float]] = None,
                 longitude: Optional[pulumi.Input[float]] = None,
                 routable_ip: Optional[pulumi.Input[bool]] = None,
                 static_ip_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering TrafficForwardingStaticIP resources.
        :param pulumi.Input[str] comment: Additional information about this static IP address
        :param pulumi.Input[bool] geo_override: If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.
        :param pulumi.Input[str] ip_address: The static IP address
        :param pulumi.Input[float] latitude: Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between -90 and 90 degrees.
        :param pulumi.Input[float] longitude: Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between -180 and 180 degrees.
        :param pulumi.Input[bool] routable_ip: Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.
        :param pulumi.Input[int] static_ip_id: The ID of the Static IP.
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if geo_override is not None:
            pulumi.set(__self__, "geo_override", geo_override)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if latitude is not None:
            pulumi.set(__self__, "latitude", latitude)
        if longitude is not None:
            pulumi.set(__self__, "longitude", longitude)
        if routable_ip is not None:
            pulumi.set(__self__, "routable_ip", routable_ip)
        if static_ip_id is not None:
            pulumi.set(__self__, "static_ip_id", static_ip_id)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information about this static IP address
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="geoOverride")
    def geo_override(self) -> Optional[pulumi.Input[bool]]:
        """
        If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.
        """
        return pulumi.get(self, "geo_override")

    @geo_override.setter
    def geo_override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "geo_override", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        The static IP address
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def latitude(self) -> Optional[pulumi.Input[float]]:
        """
        Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between -90 and 90 degrees.
        """
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "latitude", value)

    @property
    @pulumi.getter
    def longitude(self) -> Optional[pulumi.Input[float]]:
        """
        Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between -180 and 180 degrees.
        """
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "longitude", value)

    @property
    @pulumi.getter(name="routableIp")
    def routable_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.
        """
        return pulumi.get(self, "routable_ip")

    @routable_ip.setter
    def routable_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "routable_ip", value)

    @property
    @pulumi.getter(name="staticIpId")
    def static_ip_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the Static IP.
        """
        return pulumi.get(self, "static_ip_id")

    @static_ip_id.setter
    def static_ip_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "static_ip_id", value)


class TrafficForwardingStaticIP(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 geo_override: Optional[pulumi.Input[bool]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 latitude: Optional[pulumi.Input[float]] = None,
                 longitude: Optional[pulumi.Input[float]] = None,
                 routable_ip: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        The **zia_traffic_forwarding_static_ip** resource allows the creation and management of static ip addresses in the Zscaler Internet Access cloud. The resource, can then be associated with other resources such as:

        * VPN Credentials of type `IP`
        * Location Management
        * GRE Tunnel

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        # ZIA Traffic Forwarding - Static IP
        example = zia.TrafficForwardingStaticIP("example",
            comment="Example",
            geo_override=True,
            ip_address="1.1.1.1",
            latitude=-36.848461,
            longitude=174.763336,
            routable_ip=True)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        Static IP resources can be imported by using `<STATIC IP ID>` or `<IP ADDRESS>`as the import ID.

        ```sh
        $ pulumi import zia:index/trafficForwardingStaticIP:TrafficForwardingStaticIP example <static_ip_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/trafficForwardingStaticIP:TrafficForwardingStaticIP example <ip_address>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Additional information about this static IP address
        :param pulumi.Input[bool] geo_override: If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.
        :param pulumi.Input[str] ip_address: The static IP address
        :param pulumi.Input[float] latitude: Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between -90 and 90 degrees.
        :param pulumi.Input[float] longitude: Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between -180 and 180 degrees.
        :param pulumi.Input[bool] routable_ip: Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TrafficForwardingStaticIPArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_traffic_forwarding_static_ip** resource allows the creation and management of static ip addresses in the Zscaler Internet Access cloud. The resource, can then be associated with other resources such as:

        * VPN Credentials of type `IP`
        * Location Management
        * GRE Tunnel

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        # ZIA Traffic Forwarding - Static IP
        example = zia.TrafficForwardingStaticIP("example",
            comment="Example",
            geo_override=True,
            ip_address="1.1.1.1",
            latitude=-36.848461,
            longitude=174.763336,
            routable_ip=True)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        Static IP resources can be imported by using `<STATIC IP ID>` or `<IP ADDRESS>`as the import ID.

        ```sh
        $ pulumi import zia:index/trafficForwardingStaticIP:TrafficForwardingStaticIP example <static_ip_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/trafficForwardingStaticIP:TrafficForwardingStaticIP example <ip_address>
        ```

        :param str resource_name: The name of the resource.
        :param TrafficForwardingStaticIPArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TrafficForwardingStaticIPArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 geo_override: Optional[pulumi.Input[bool]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 latitude: Optional[pulumi.Input[float]] = None,
                 longitude: Optional[pulumi.Input[float]] = None,
                 routable_ip: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TrafficForwardingStaticIPArgs.__new__(TrafficForwardingStaticIPArgs)

            __props__.__dict__["comment"] = comment
            __props__.__dict__["geo_override"] = geo_override
            if ip_address is None and not opts.urn:
                raise TypeError("Missing required property 'ip_address'")
            __props__.__dict__["ip_address"] = ip_address
            __props__.__dict__["latitude"] = latitude
            __props__.__dict__["longitude"] = longitude
            __props__.__dict__["routable_ip"] = routable_ip
            __props__.__dict__["static_ip_id"] = None
        super(TrafficForwardingStaticIP, __self__).__init__(
            'zia:index/trafficForwardingStaticIP:TrafficForwardingStaticIP',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            geo_override: Optional[pulumi.Input[bool]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            latitude: Optional[pulumi.Input[float]] = None,
            longitude: Optional[pulumi.Input[float]] = None,
            routable_ip: Optional[pulumi.Input[bool]] = None,
            static_ip_id: Optional[pulumi.Input[int]] = None) -> 'TrafficForwardingStaticIP':
        """
        Get an existing TrafficForwardingStaticIP resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Additional information about this static IP address
        :param pulumi.Input[bool] geo_override: If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.
        :param pulumi.Input[str] ip_address: The static IP address
        :param pulumi.Input[float] latitude: Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between -90 and 90 degrees.
        :param pulumi.Input[float] longitude: Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between -180 and 180 degrees.
        :param pulumi.Input[bool] routable_ip: Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.
        :param pulumi.Input[int] static_ip_id: The ID of the Static IP.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TrafficForwardingStaticIPState.__new__(_TrafficForwardingStaticIPState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["geo_override"] = geo_override
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["latitude"] = latitude
        __props__.__dict__["longitude"] = longitude
        __props__.__dict__["routable_ip"] = routable_ip
        __props__.__dict__["static_ip_id"] = static_ip_id
        return TrafficForwardingStaticIP(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Additional information about this static IP address
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="geoOverride")
    def geo_override(self) -> pulumi.Output[bool]:
        """
        If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.
        """
        return pulumi.get(self, "geo_override")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[str]:
        """
        The static IP address
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def latitude(self) -> pulumi.Output[float]:
        """
        Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between -90 and 90 degrees.
        """
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> pulumi.Output[float]:
        """
        Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between -180 and 180 degrees.
        """
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="routableIp")
    def routable_ip(self) -> pulumi.Output[bool]:
        """
        Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.
        """
        return pulumi.get(self, "routable_ip")

    @property
    @pulumi.getter(name="staticIpId")
    def static_ip_id(self) -> pulumi.Output[int]:
        """
        The ID of the Static IP.
        """
        return pulumi.get(self, "static_ip_id")

