# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'AdminUsersAdminScopeEntities',
    'AdminUsersRole',
    'BrowserControlPolicySmartIsolationGroups',
    'BrowserControlPolicySmartIsolationProfile',
    'BrowserControlPolicySmartIsolationUsers',
    'CasbDlpRulesAuditorNotification',
    'CasbDlpRulesBuckets',
    'CasbDlpRulesCasbEmailLabel',
    'CasbDlpRulesCasbTombstoneTemplate',
    'CasbDlpRulesCloudAppTenants',
    'CasbDlpRulesCriteriaDomainProfiles',
    'CasbDlpRulesDepartments',
    'CasbDlpRulesDlpEngines',
    'CasbDlpRulesEmailRecipientProfiles',
    'CasbDlpRulesEntityGroups',
    'CasbDlpRulesExcludedDomainProfiles',
    'CasbDlpRulesGroups',
    'CasbDlpRulesIncludedDomainProfiles',
    'CasbDlpRulesLabels',
    'CasbDlpRulesObjectTypes',
    'CasbDlpRulesRedactionProfile',
    'CasbDlpRulesTag',
    'CasbDlpRulesUsers',
    'CasbDlpRulesWatermarkProfile',
    'CasbDlpRulesZscalerIncidentReceiver',
    'CasbMalwareRulesBuckets',
    'CasbMalwareRulesCasbEmailLabel',
    'CasbMalwareRulesCasbTombstoneTemplate',
    'CasbMalwareRulesCloudAppTenantIds',
    'CasbMalwareRulesCloudAppTenants',
    'CasbMalwareRulesLabels',
    'CloudAppControlRuleCbiProfile',
    'CloudAppControlRuleCloudAppInstances',
    'CloudAppControlRuleCloudAppRiskProfile',
    'CloudAppControlRuleDepartments',
    'CloudAppControlRuleDeviceGroups',
    'CloudAppControlRuleDevices',
    'CloudAppControlRuleGroups',
    'CloudAppControlRuleLabels',
    'CloudAppControlRuleLocationGroups',
    'CloudAppControlRuleLocations',
    'CloudAppControlRuleTenancyProfileIds',
    'CloudAppControlRuleTimeWindows',
    'CloudAppControlRuleUsers',
    'CloudApplicationInstanceInstanceIdentifier',
    'DLPDictionariesExactDataMatchDetail',
    'DLPDictionariesIdmProfileMatchAccuracy',
    'DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile',
    'DLPDictionariesPattern',
    'DLPDictionariesPhrase',
    'DLPWebRulesAuditor',
    'DLPWebRulesDepartments',
    'DLPWebRulesDlpEngines',
    'DLPWebRulesExcludedDepartments',
    'DLPWebRulesExcludedDomainProfiles',
    'DLPWebRulesExcludedGroups',
    'DLPWebRulesExcludedUsers',
    'DLPWebRulesGroups',
    'DLPWebRulesIcapServer',
    'DLPWebRulesIncludedDomainProfiles',
    'DLPWebRulesLabels',
    'DLPWebRulesLocationGroups',
    'DLPWebRulesLocations',
    'DLPWebRulesNotificationTemplate',
    'DLPWebRulesSourceIpGroups',
    'DLPWebRulesTimeWindows',
    'DLPWebRulesUrlCategories',
    'DLPWebRulesUsers',
    'DLPWebRulesWorkloadGroup',
    'FileTypeControlRulesDepartments',
    'FileTypeControlRulesDeviceGroups',
    'FileTypeControlRulesDevices',
    'FileTypeControlRulesGroups',
    'FileTypeControlRulesLabels',
    'FileTypeControlRulesLocationGroups',
    'FileTypeControlRulesLocations',
    'FileTypeControlRulesTimeWindows',
    'FileTypeControlRulesUsers',
    'FileTypeControlRulesZpaAppSegment',
    'FirewallDNSRuleApplicationGroups',
    'FirewallDNSRuleDepartments',
    'FirewallDNSRuleDestIpGroups',
    'FirewallDNSRuleDestIpv6Groups',
    'FirewallDNSRuleDeviceGroups',
    'FirewallDNSRuleDevices',
    'FirewallDNSRuleDnsGateway',
    'FirewallDNSRuleEdnsEcsObject',
    'FirewallDNSRuleGroups',
    'FirewallDNSRuleLabels',
    'FirewallDNSRuleLocationGroups',
    'FirewallDNSRuleLocations',
    'FirewallDNSRuleSrcIpGroups',
    'FirewallDNSRuleSrcIpv6Groups',
    'FirewallDNSRuleTimeWindows',
    'FirewallDNSRuleUsers',
    'FirewallDNSRuleZpaIpGroup',
    'FirewallFilteringNetworkServicesDestTcpPort',
    'FirewallFilteringNetworkServicesDestUdpPort',
    'FirewallFilteringNetworkServicesSrcTcpPort',
    'FirewallFilteringNetworkServicesSrcUdpPort',
    'FirewallFilteringRuleAppServiceGroups',
    'FirewallFilteringRuleAppServices',
    'FirewallFilteringRuleDepartments',
    'FirewallFilteringRuleDestIpGroups',
    'FirewallFilteringRuleDeviceGroups',
    'FirewallFilteringRuleDevices',
    'FirewallFilteringRuleGroups',
    'FirewallFilteringRuleLabels',
    'FirewallFilteringRuleLocationGroups',
    'FirewallFilteringRuleLocations',
    'FirewallFilteringRuleNwApplicationGroups',
    'FirewallFilteringRuleNwServiceGroups',
    'FirewallFilteringRuleNwServices',
    'FirewallFilteringRuleSrcIpGroups',
    'FirewallFilteringRuleTimeWindows',
    'FirewallFilteringRuleUsers',
    'FirewallFilteringRuleWorkloadGroup',
    'FirewallFilteringRuleZpaAppSegment',
    'FirewallFilteringServiceGroupsService',
    'ForwardingControlProxiesCert',
    'ForwardingControlRuleAppServiceGroups',
    'ForwardingControlRuleDepartments',
    'ForwardingControlRuleDestIpGroups',
    'ForwardingControlRuleDestIpv6Groups',
    'ForwardingControlRuleEcGroups',
    'ForwardingControlRuleGroups',
    'ForwardingControlRuleLabels',
    'ForwardingControlRuleLocationGroups',
    'ForwardingControlRuleLocations',
    'ForwardingControlRuleNwApplicationGroups',
    'ForwardingControlRuleNwServiceGroups',
    'ForwardingControlRuleNwServices',
    'ForwardingControlRuleProxyGateway',
    'ForwardingControlRuleSrcIpGroups',
    'ForwardingControlRuleSrcIpv6Groups',
    'ForwardingControlRuleUsers',
    'ForwardingControlRuleZpaAppSegment',
    'ForwardingControlRuleZpaApplicationSegmentGroups',
    'ForwardingControlRuleZpaApplicationSegments',
    'ForwardingControlRuleZpaGateway',
    'ForwardingControlZPAGatewayZpaAppSegment',
    'ForwardingControlZPAGatewayZpaServerGroup',
    'IPSFirewallRuleDepartments',
    'IPSFirewallRuleDestIpGroups',
    'IPSFirewallRuleDestIpv6Groups',
    'IPSFirewallRuleDeviceGroups',
    'IPSFirewallRuleDevices',
    'IPSFirewallRuleGroups',
    'IPSFirewallRuleLabels',
    'IPSFirewallRuleLocationGroups',
    'IPSFirewallRuleLocations',
    'IPSFirewallRuleNwServiceGroups',
    'IPSFirewallRuleNwServices',
    'IPSFirewallRuleSrcIpGroups',
    'IPSFirewallRuleSrcIpv6Groups',
    'IPSFirewallRuleThreatCategories',
    'IPSFirewallRuleTimeWindows',
    'IPSFirewallRuleUsers',
    'IPSFirewallRuleZpaAppSegment',
    'LocationManagementDynamicLocationGroups',
    'LocationManagementExtranet',
    'LocationManagementExtranetDn',
    'LocationManagementExtranetIpPool',
    'LocationManagementStaticLocationGroups',
    'LocationManagementVpnCredential',
    'NatControlRulesDepartments',
    'NatControlRulesDestIpGroups',
    'NatControlRulesDestIpv6Groups',
    'NatControlRulesDeviceGroups',
    'NatControlRulesDevices',
    'NatControlRulesGroups',
    'NatControlRulesLabels',
    'NatControlRulesLocationGroups',
    'NatControlRulesLocations',
    'NatControlRulesNwServiceGroups',
    'NatControlRulesNwServices',
    'NatControlRulesSrcIpGroups',
    'NatControlRulesSrcIpv6Groups',
    'NatControlRulesTimeWindows',
    'NatControlRulesUsers',
    'RiskProfilesCustomTags',
    'SSLInspectionRulesAction',
    'SSLInspectionRulesActionDecryptSubAction',
    'SSLInspectionRulesActionDoNotDecryptSubAction',
    'SSLInspectionRulesActionSslInterceptionCert',
    'SSLInspectionRulesDepartments',
    'SSLInspectionRulesDestIpGroups',
    'SSLInspectionRulesDeviceGroups',
    'SSLInspectionRulesDevices',
    'SSLInspectionRulesGroups',
    'SSLInspectionRulesLabels',
    'SSLInspectionRulesLocationGroups',
    'SSLInspectionRulesLocations',
    'SSLInspectionRulesProxyGateways',
    'SSLInspectionRulesSourceIpGroups',
    'SSLInspectionRulesTimeWindows',
    'SSLInspectionRulesUsers',
    'SSLInspectionRulesWorkloadGroup',
    'SSLInspectionRulesZpaAppSegment',
    'SandboxRulesDepartments',
    'SandboxRulesGroups',
    'SandboxRulesLabels',
    'SandboxRulesLocationGroups',
    'SandboxRulesLocations',
    'SandboxRulesUsers',
    'SandboxRulesZpaAppSegment',
    'TrafficForwardingGRETunnelPrimaryDestVip',
    'TrafficForwardingGRETunnelSecondaryDestVip',
    'URLCategoriesScope',
    'URLCategoriesScopeScopeEntities',
    'URLCategoriesScopeScopeGroupMemberEntities',
    'URLCategoriesUrlKeywordCounts',
    'URLFilteringRulesCbiProfile',
    'URLFilteringRulesDepartments',
    'URLFilteringRulesDeviceGroups',
    'URLFilteringRulesDevices',
    'URLFilteringRulesGroups',
    'URLFilteringRulesLabels',
    'URLFilteringRulesLocationGroups',
    'URLFilteringRulesLocations',
    'URLFilteringRulesOverrideGroups',
    'URLFilteringRulesOverrideUsers',
    'URLFilteringRulesSourceIpGroups',
    'URLFilteringRulesTimeWindows',
    'URLFilteringRulesUsers',
    'URLFilteringRulesWorkloadGroup',
    'UserManagementDepartment',
    'UserManagementGroups',
    'VirtualServiceEdgeClusterVirtualZenNodes',
    'GetAdminUsersAdminScopeResult',
    'GetAdminUsersAdminScopeScopeEntityResult',
    'GetAdminUsersAdminScopeScopeGroupMemberEntityResult',
    'GetAdminUsersExecMobileAppTokenResult',
    'GetAdminUsersRoleResult',
    'GetBrowserControlPolicySmartIsolationProfileResult',
    'GetCasbDlpRulesAuditorNotificationResult',
    'GetCasbDlpRulesBucketResult',
    'GetCasbDlpRulesCasbEmailLabelResult',
    'GetCasbDlpRulesCasbTombstoneTemplateResult',
    'GetCasbDlpRulesCloudAppTenantResult',
    'GetCasbDlpRulesCriteriaDomainProfileResult',
    'GetCasbDlpRulesDepartmentResult',
    'GetCasbDlpRulesDlpEngineResult',
    'GetCasbDlpRulesEmailRecipientProfileResult',
    'GetCasbDlpRulesEntityGroupResult',
    'GetCasbDlpRulesExcludedDomainProfileResult',
    'GetCasbDlpRulesGroupResult',
    'GetCasbDlpRulesIncludedDomainProfileResult',
    'GetCasbDlpRulesLabelResult',
    'GetCasbDlpRulesObjectTypeResult',
    'GetCasbDlpRulesRedactionProfileResult',
    'GetCasbDlpRulesTagResult',
    'GetCasbDlpRulesUserResult',
    'GetCasbDlpRulesWatermarkProfileResult',
    'GetCasbDlpRulesZscalerIncidentReceiverResult',
    'GetCasbMalwareRulesBucketResult',
    'GetCasbMalwareRulesCasbEmailLabelResult',
    'GetCasbMalwareRulesCasbTombstoneTemplateResult',
    'GetCasbMalwareRulesCloudAppTenantResult',
    'GetCasbMalwareRulesCloudAppTenantIdResult',
    'GetCasbMalwareRulesLabelResult',
    'GetCasbMalwareRulesLastModifiedByResult',
    'GetCasbTenantZscalerAppTenantIdResult',
    'GetCloudAppControlRuleCbiProfileResult',
    'GetCloudAppControlRuleDepartmentResult',
    'GetCloudAppControlRuleDeviceResult',
    'GetCloudAppControlRuleDeviceGroupResult',
    'GetCloudAppControlRuleGroupResult',
    'GetCloudAppControlRuleLabelResult',
    'GetCloudAppControlRuleLocationResult',
    'GetCloudAppControlRuleLocationGroupResult',
    'GetCloudAppControlRuleUserResult',
    'GetCloudApplicationInstanceInstanceIdentifierResult',
    'GetCloudApplicationInstanceInstanceIdentifierLastModifiedByResult',
    'GetCloudApplicationInstanceLastModifiedByResult',
    'GetCloudApplicationsApplicationResult',
    'GetDLPDictionariesExactDataMatchDetailResult',
    'GetDLPDictionariesIdmProfileMatchAccuracyResult',
    'GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileResult',
    'GetDLPDictionariesPatternResult',
    'GetDLPDictionariesPhraseResult',
    'GetDLPEDMSchemaCreatedByResult',
    'GetDLPEDMSchemaEdmClientResult',
    'GetDLPEDMSchemaLastModifiedByResult',
    'GetDLPEDMSchemaScheduleResult',
    'GetDLPEDMSchemaTokenListResult',
    'GetDLPIDMProfileLiteClientVmResult',
    'GetDLPIDMProfileLiteLastModifiedByResult',
    'GetDLPIDMProfilesIdmClientResult',
    'GetDLPIDMProfilesLastModifiedByResult',
    'GetDLPWebRulesDepartmentResult',
    'GetDLPWebRulesDlpEngineResult',
    'GetDLPWebRulesExcludedDepartmentResult',
    'GetDLPWebRulesExcludedGroupResult',
    'GetDLPWebRulesExcludedUserResult',
    'GetDLPWebRulesGroupResult',
    'GetDLPWebRulesIncludedDomainProfileResult',
    'GetDLPWebRulesLabelResult',
    'GetDLPWebRulesLastModifiedByResult',
    'GetDLPWebRulesLocationResult',
    'GetDLPWebRulesLocationGroupResult',
    'GetDLPWebRulesSourceIpGroupResult',
    'GetDLPWebRulesTimeWindowResult',
    'GetDLPWebRulesUrlCategoryResult',
    'GetDLPWebRulesUserResult',
    'GetDLPWebRulesWorkloadGroupResult',
    'GetDLPWebRulesWorkloadGroupLastModifiedByResult',
    'GetFileTypeControlRulesDepartmentResult',
    'GetFileTypeControlRulesDeviceResult',
    'GetFileTypeControlRulesDeviceGroupResult',
    'GetFileTypeControlRulesGroupResult',
    'GetFileTypeControlRulesLabelResult',
    'GetFileTypeControlRulesLastModifiedByResult',
    'GetFileTypeControlRulesLocationResult',
    'GetFileTypeControlRulesLocationGroupResult',
    'GetFileTypeControlRulesTimeWindowResult',
    'GetFileTypeControlRulesUserResult',
    'GetFileTypeControlRulesZpaAppSegmentResult',
    'GetFirewallDNSRulesApplicationGroupResult',
    'GetFirewallDNSRulesDepartmentResult',
    'GetFirewallDNSRulesDestIpGroupResult',
    'GetFirewallDNSRulesDestIpv6GroupResult',
    'GetFirewallDNSRulesDeviceResult',
    'GetFirewallDNSRulesDeviceGroupResult',
    'GetFirewallDNSRulesGroupResult',
    'GetFirewallDNSRulesLabelResult',
    'GetFirewallDNSRulesLastModifiedByResult',
    'GetFirewallDNSRulesLocationResult',
    'GetFirewallDNSRulesLocationGroupResult',
    'GetFirewallDNSRulesSrcIpGroupResult',
    'GetFirewallDNSRulesSrcIpv6GroupResult',
    'GetFirewallDNSRulesTimeWindowResult',
    'GetFirewallDNSRulesUserResult',
    'GetFirewallFilteringNetworkServiceGroupsServiceResult',
    'GetFirewallFilteringNetworkServicesDestTcpPortResult',
    'GetFirewallFilteringNetworkServicesDestUdpPortResult',
    'GetFirewallFilteringNetworkServicesSrcTcpPortResult',
    'GetFirewallFilteringNetworkServicesSrcUdpPortResult',
    'GetFirewallFilteringRuleAppServiceResult',
    'GetFirewallFilteringRuleAppServiceGroupResult',
    'GetFirewallFilteringRuleDepartmentResult',
    'GetFirewallFilteringRuleDestIpGroupResult',
    'GetFirewallFilteringRuleDeviceResult',
    'GetFirewallFilteringRuleDeviceGroupResult',
    'GetFirewallFilteringRuleGroupResult',
    'GetFirewallFilteringRuleLabelResult',
    'GetFirewallFilteringRuleLastModifiedByResult',
    'GetFirewallFilteringRuleLocationResult',
    'GetFirewallFilteringRuleLocationGroupResult',
    'GetFirewallFilteringRuleNwApplicationGroupResult',
    'GetFirewallFilteringRuleNwServiceResult',
    'GetFirewallFilteringRuleNwServiceGroupResult',
    'GetFirewallFilteringRuleSrcIpGroupResult',
    'GetFirewallFilteringRuleTimeWindowResult',
    'GetFirewallFilteringRuleUserResult',
    'GetFirewallFilteringRuleWorkloadGroupResult',
    'GetFirewallFilteringRuleWorkloadGroupExpressionJsonResult',
    'GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerResult',
    'GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerResult',
    'GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult',
    'GetFirewallFilteringRuleWorkloadGroupLastModifiedByResult',
    'GetFirewallFilteringRuleZpaAppSegmentResult',
    'GetForwardingControlProxiesCertResult',
    'GetForwardingControlProxiesLastModifiedByResult',
    'GetForwardingControlProxyGatewayLastModifiedByResult',
    'GetForwardingControlProxyGatewayPrimaryProxyResult',
    'GetForwardingControlProxyGatewaySecondaryProxyResult',
    'GetForwardingControlRuleDepartmentResult',
    'GetForwardingControlRuleDestIpGroupResult',
    'GetForwardingControlRuleDestIpv6GroupResult',
    'GetForwardingControlRuleDeviceResult',
    'GetForwardingControlRuleDeviceGroupResult',
    'GetForwardingControlRuleEcGroupResult',
    'GetForwardingControlRuleGroupResult',
    'GetForwardingControlRuleLabelResult',
    'GetForwardingControlRuleLocationResult',
    'GetForwardingControlRuleLocationGroupResult',
    'GetForwardingControlRuleNwApplicationGroupResult',
    'GetForwardingControlRuleNwServiceResult',
    'GetForwardingControlRuleNwServiceGroupResult',
    'GetForwardingControlRuleProxyGatewayResult',
    'GetForwardingControlRuleSrcIpGroupResult',
    'GetForwardingControlRuleSrcIpv6GroupResult',
    'GetForwardingControlRuleUserResult',
    'GetForwardingControlRuleZpaAppSegmentResult',
    'GetForwardingControlRuleZpaApplicationSegmentResult',
    'GetForwardingControlRuleZpaApplicationSegmentGroupResult',
    'GetForwardingControlRuleZpaGatewayResult',
    'GetForwardingControlZPAGatewayLastModifiedByResult',
    'GetForwardingControlZPAGatewayZpaAppSegmentResult',
    'GetForwardingControlZPAGatewayZpaServerGroupResult',
    'GetIPSFirewallRuleDepartmentResult',
    'GetIPSFirewallRuleDestIpGroupResult',
    'GetIPSFirewallRuleDestIpv6GroupResult',
    'GetIPSFirewallRuleDeviceResult',
    'GetIPSFirewallRuleDeviceGroupResult',
    'GetIPSFirewallRuleGroupResult',
    'GetIPSFirewallRuleLabelResult',
    'GetIPSFirewallRuleLastModifiedByResult',
    'GetIPSFirewallRuleLocationResult',
    'GetIPSFirewallRuleLocationGroupResult',
    'GetIPSFirewallRuleNwServiceResult',
    'GetIPSFirewallRuleNwServiceGroupResult',
    'GetIPSFirewallRuleSrcIpGroupResult',
    'GetIPSFirewallRuleSrcIpv6GroupResult',
    'GetIPSFirewallRuleThreatCategoryResult',
    'GetIPSFirewallRuleTimeWindowResult',
    'GetIPSFirewallRuleUserResult',
    'GetIPSFirewallRuleZpaAppSegmentResult',
    'GetLocationGroupsDynamicLocationGroupCriteriaResult',
    'GetLocationGroupsDynamicLocationGroupCriteriaCityResult',
    'GetLocationGroupsDynamicLocationGroupCriteriaManagedByResult',
    'GetLocationGroupsDynamicLocationGroupCriteriaNameResult',
    'GetLocationGroupsLastModUserResult',
    'GetLocationGroupsLocationResult',
    'GetLocationManagementExtranetResult',
    'GetLocationManagementExtranetDnResult',
    'GetLocationManagementExtranetIpPoolResult',
    'GetLocationManagementVpnCredentialResult',
    'GetLocationManagementVpnCredentialLocationResult',
    'GetLocationManagementVpnCredentialManagedByResult',
    'GetNatControlRulesDepartmentResult',
    'GetNatControlRulesDestIpGroupResult',
    'GetNatControlRulesDestIpv6GroupResult',
    'GetNatControlRulesDeviceResult',
    'GetNatControlRulesDeviceGroupResult',
    'GetNatControlRulesGroupResult',
    'GetNatControlRulesLabelResult',
    'GetNatControlRulesLastModifiedByResult',
    'GetNatControlRulesLocationResult',
    'GetNatControlRulesLocationGroupResult',
    'GetNatControlRulesNwServiceResult',
    'GetNatControlRulesNwServiceGroupResult',
    'GetNatControlRulesSrcIpGroupResult',
    'GetNatControlRulesSrcIpv6GroupResult',
    'GetNatControlRulesTimeWindowResult',
    'GetNatControlRulesUserResult',
    'GetRiskProfilesCustomTagResult',
    'GetRiskProfilesLastModifiedByResult',
    'GetRuleLabelsCreatedByResult',
    'GetRuleLabelsLastModifiedByResult',
    'GetSSLInspectionRulesActionResult',
    'GetSSLInspectionRulesActionDecryptSubActionResult',
    'GetSSLInspectionRulesActionDoNotDecryptSubActionResult',
    'GetSSLInspectionRulesActionSslInterceptionCertResult',
    'GetSSLInspectionRulesDepartmentResult',
    'GetSSLInspectionRulesDestIpGroupResult',
    'GetSSLInspectionRulesDeviceResult',
    'GetSSLInspectionRulesDeviceGroupResult',
    'GetSSLInspectionRulesGroupResult',
    'GetSSLInspectionRulesLabelResult',
    'GetSSLInspectionRulesLastModifiedByResult',
    'GetSSLInspectionRulesLocationResult',
    'GetSSLInspectionRulesLocationGroupResult',
    'GetSSLInspectionRulesProxyGatewayResult',
    'GetSSLInspectionRulesSourceIpGroupResult',
    'GetSSLInspectionRulesTimeWindowResult',
    'GetSSLInspectionRulesUserResult',
    'GetSSLInspectionRulesWorkloadGroupResult',
    'GetSSLInspectionRulesWorkloadGroupExpressionJsonResult',
    'GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerResult',
    'GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult',
    'GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult',
    'GetSSLInspectionRulesWorkloadGroupLastModifiedByResult',
    'GetSSLInspectionRulesZpaAppSegmentResult',
    'GetSandboxReportClassificationResult',
    'GetSandboxReportExploitResult',
    'GetSandboxReportFilePropertyResult',
    'GetSandboxReportNetworkingResult',
    'GetSandboxReportOriginResult',
    'GetSandboxReportPersistenceResult',
    'GetSandboxReportSecurityBypassResult',
    'GetSandboxReportSpywareResult',
    'GetSandboxReportStealthResult',
    'GetSandboxReportSummaryResult',
    'GetSandboxReportSystemSummaryResult',
    'GetSandboxRulesDepartmentResult',
    'GetSandboxRulesGroupResult',
    'GetSandboxRulesLabelResult',
    'GetSandboxRulesLastModifiedByResult',
    'GetSandboxRulesLocationResult',
    'GetSandboxRulesLocationGroupResult',
    'GetSandboxRulesUserResult',
    'GetSandboxRulesZpaAppSegmentResult',
    'GetTrafficForwardingGREInternalIPRangeListResult',
    'GetTrafficForwardingGRETunnelLastModifiedByResult',
    'GetTrafficForwardingGRETunnelManagedByResult',
    'GetTrafficForwardingGRETunnelPrimaryDestVipResult',
    'GetTrafficForwardingGRETunnelSecondaryDestVipResult',
    'GetTrafficForwardingStaticIPCityResult',
    'GetTrafficForwardingStaticIPLastModifiedByResult',
    'GetTrafficForwardingStaticIPManagedByResult',
    'GetTrafficForwardingVIPRecommendedListListResult',
    'GetTrafficForwardingVPNCredentialsLocationResult',
    'GetTrafficForwardingVPNCredentialsManagedByResult',
    'GetURLCategoriesScopeResult',
    'GetURLCategoriesScopeScopeEntityResult',
    'GetURLCategoriesScopeScopeGroupMemberEntityResult',
    'GetURLCategoriesUrlKeywordCountResult',
    'GetURLFilteringRulesCbiProfileResult',
    'GetURLFilteringRulesDepartmentResult',
    'GetURLFilteringRulesDeviceResult',
    'GetURLFilteringRulesDeviceGroupResult',
    'GetURLFilteringRulesGroupResult',
    'GetURLFilteringRulesLabelResult',
    'GetURLFilteringRulesLastModifiedByResult',
    'GetURLFilteringRulesLocationResult',
    'GetURLFilteringRulesLocationGroupResult',
    'GetURLFilteringRulesOverrideGroupResult',
    'GetURLFilteringRulesOverrideUserResult',
    'GetURLFilteringRulesSourceIpGroupResult',
    'GetURLFilteringRulesTimeWindowResult',
    'GetURLFilteringRulesUserResult',
    'GetURLFilteringRulesWorkloadGroupResult',
    'GetURLFilteringRulesWorkloadGroupExpressionJsonResult',
    'GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerResult',
    'GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult',
    'GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult',
    'GetURLFilteringRulesWorkloadGroupLastModifiedByResult',
    'GetUserManagementDepartmentResult',
    'GetUserManagementGroupResult',
    'GetVirtualServiceEdgeClusterVirtualZenNodeResult',
    'GetWorkloadGroupsExpressionJsonResult',
    'GetWorkloadGroupsExpressionJsonExpressionContainerResult',
    'GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerResult',
    'GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerTagResult',
    'GetWorkloadGroupsLastModifiedByResult',
]

@pulumi.output_type
class AdminUsersAdminScopeEntities(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class AdminUsersRole(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class BrowserControlPolicySmartIsolationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: A unique identifier for an entity.
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        A unique identifier for an entity.
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class BrowserControlPolicySmartIsolationProfile(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None):
        """
        :param builtins.str id: The universally unique identifier (UUID) for the browser isolation profile
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        The universally unique identifier (UUID) for the browser isolation profile
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class BrowserControlPolicySmartIsolationUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: A unique identifier for an entity.
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        A unique identifier for an entity.
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class CasbDlpRulesAuditorNotification(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class CasbDlpRulesBuckets(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CasbDlpRulesCasbEmailLabel(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class CasbDlpRulesCasbTombstoneTemplate(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class CasbDlpRulesCloudAppTenants(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CasbDlpRulesCriteriaDomainProfiles(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CasbDlpRulesDepartments(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CasbDlpRulesDlpEngines(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CasbDlpRulesEmailRecipientProfiles(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CasbDlpRulesEntityGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CasbDlpRulesExcludedDomainProfiles(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CasbDlpRulesGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CasbDlpRulesIncludedDomainProfiles(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CasbDlpRulesLabels(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class CasbDlpRulesObjectTypes(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CasbDlpRulesRedactionProfile(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class CasbDlpRulesTag(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class CasbDlpRulesUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CasbDlpRulesWatermarkProfile(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class CasbDlpRulesZscalerIncidentReceiver(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class CasbMalwareRulesBuckets(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CasbMalwareRulesCasbEmailLabel(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class CasbMalwareRulesCasbTombstoneTemplate(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class CasbMalwareRulesCloudAppTenantIds(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class CasbMalwareRulesCloudAppTenants(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class CasbMalwareRulesLabels(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class CloudAppControlRuleCbiProfile(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 url: Optional[builtins.str] = None):
        """
        :param builtins.str url: The browser isolation profile URL
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> Optional[builtins.str]:
        """
        The browser isolation profile URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class CloudAppControlRuleCloudAppInstances(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CloudAppControlRuleCloudAppRiskProfile(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class CloudAppControlRuleDepartments(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CloudAppControlRuleDeviceGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CloudAppControlRuleDevices(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CloudAppControlRuleGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CloudAppControlRuleLabels(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CloudAppControlRuleLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CloudAppControlRuleLocations(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CloudAppControlRuleTenancyProfileIds(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CloudAppControlRuleTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CloudAppControlRuleUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class CloudApplicationInstanceInstanceIdentifier(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identifierType":
            suggest = "identifier_type"
        elif key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceIdentifier":
            suggest = "instance_identifier"
        elif key == "instanceIdentifierName":
            suggest = "instance_identifier_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CloudApplicationInstanceInstanceIdentifier. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CloudApplicationInstanceInstanceIdentifier.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CloudApplicationInstanceInstanceIdentifier.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identifier_type: Optional[builtins.str] = None,
                 instance_id: Optional[builtins.int] = None,
                 instance_identifier: Optional[builtins.str] = None,
                 instance_identifier_name: Optional[builtins.str] = None):
        """
        :param builtins.str identifier_type: Type of the cloud application instance.
        :param builtins.int instance_id: Unique identifier for the cloud application instance.
        :param builtins.str instance_identifier: Unique identifying string for the instance.
        :param builtins.str instance_identifier_name: Unique identifying string for the instance.
        """
        if identifier_type is not None:
            pulumi.set(__self__, "identifier_type", identifier_type)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_identifier is not None:
            pulumi.set(__self__, "instance_identifier", instance_identifier)
        if instance_identifier_name is not None:
            pulumi.set(__self__, "instance_identifier_name", instance_identifier_name)

    @property
    @pulumi.getter(name="identifierType")
    def identifier_type(self) -> Optional[builtins.str]:
        """
        Type of the cloud application instance.
        """
        return pulumi.get(self, "identifier_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[builtins.int]:
        """
        Unique identifier for the cloud application instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceIdentifier")
    def instance_identifier(self) -> Optional[builtins.str]:
        """
        Unique identifying string for the instance.
        """
        return pulumi.get(self, "instance_identifier")

    @property
    @pulumi.getter(name="instanceIdentifierName")
    def instance_identifier_name(self) -> Optional[builtins.str]:
        """
        Unique identifying string for the instance.
        """
        return pulumi.get(self, "instance_identifier_name")


@pulumi.output_type
class DLPDictionariesExactDataMatchDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dictionaryEdmMappingId":
            suggest = "dictionary_edm_mapping_id"
        elif key == "primaryField":
            suggest = "primary_field"
        elif key == "schemaId":
            suggest = "schema_id"
        elif key == "secondaryFieldMatchOn":
            suggest = "secondary_field_match_on"
        elif key == "secondaryFields":
            suggest = "secondary_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DLPDictionariesExactDataMatchDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DLPDictionariesExactDataMatchDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DLPDictionariesExactDataMatchDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dictionary_edm_mapping_id: Optional[builtins.int] = None,
                 primary_field: Optional[builtins.int] = None,
                 schema_id: Optional[builtins.int] = None,
                 secondary_field_match_on: Optional[builtins.str] = None,
                 secondary_fields: Optional[Sequence[builtins.int]] = None):
        """
        :param builtins.int dictionary_edm_mapping_id: The unique identifier for the EDM mapping
        :param builtins.int primary_field: The EDM template's primary field.
        :param builtins.int schema_id: The unique identifier for the EDM template (or schema).
        :param builtins.str secondary_field_match_on: The EDM secondary field to match on.
        :param Sequence[builtins.int] secondary_fields: The EDM template's secondary fields.
        """
        if dictionary_edm_mapping_id is not None:
            pulumi.set(__self__, "dictionary_edm_mapping_id", dictionary_edm_mapping_id)
        if primary_field is not None:
            pulumi.set(__self__, "primary_field", primary_field)
        if schema_id is not None:
            pulumi.set(__self__, "schema_id", schema_id)
        if secondary_field_match_on is not None:
            pulumi.set(__self__, "secondary_field_match_on", secondary_field_match_on)
        if secondary_fields is not None:
            pulumi.set(__self__, "secondary_fields", secondary_fields)

    @property
    @pulumi.getter(name="dictionaryEdmMappingId")
    def dictionary_edm_mapping_id(self) -> Optional[builtins.int]:
        """
        The unique identifier for the EDM mapping
        """
        return pulumi.get(self, "dictionary_edm_mapping_id")

    @property
    @pulumi.getter(name="primaryField")
    def primary_field(self) -> Optional[builtins.int]:
        """
        The EDM template's primary field.
        """
        return pulumi.get(self, "primary_field")

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> Optional[builtins.int]:
        """
        The unique identifier for the EDM template (or schema).
        """
        return pulumi.get(self, "schema_id")

    @property
    @pulumi.getter(name="secondaryFieldMatchOn")
    def secondary_field_match_on(self) -> Optional[builtins.str]:
        """
        The EDM secondary field to match on.
        """
        return pulumi.get(self, "secondary_field_match_on")

    @property
    @pulumi.getter(name="secondaryFields")
    def secondary_fields(self) -> Optional[Sequence[builtins.int]]:
        """
        The EDM template's secondary fields.
        """
        return pulumi.get(self, "secondary_fields")


@pulumi.output_type
class DLPDictionariesIdmProfileMatchAccuracy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adpIdmProfiles":
            suggest = "adp_idm_profiles"
        elif key == "matchAccuracy":
            suggest = "match_accuracy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DLPDictionariesIdmProfileMatchAccuracy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DLPDictionariesIdmProfileMatchAccuracy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DLPDictionariesIdmProfileMatchAccuracy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adp_idm_profiles: Optional[Sequence['outputs.DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile']] = None,
                 match_accuracy: Optional[builtins.str] = None):
        """
        :param Sequence['DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs'] adp_idm_profiles: The action applied to a DLP dictionary using patterns
        :param builtins.str match_accuracy: The IDM template match accuracy.
        """
        if adp_idm_profiles is not None:
            pulumi.set(__self__, "adp_idm_profiles", adp_idm_profiles)
        if match_accuracy is not None:
            pulumi.set(__self__, "match_accuracy", match_accuracy)

    @property
    @pulumi.getter(name="adpIdmProfiles")
    def adp_idm_profiles(self) -> Optional[Sequence['outputs.DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile']]:
        """
        The action applied to a DLP dictionary using patterns
        """
        return pulumi.get(self, "adp_idm_profiles")

    @property
    @pulumi.getter(name="matchAccuracy")
    def match_accuracy(self) -> Optional[builtins.str]:
        """
        The IDM template match accuracy.
        """
        return pulumi.get(self, "match_accuracy")


@pulumi.output_type
class DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile(dict):
    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, builtins.str]] = None,
                 id: Optional[builtins.int] = None):
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class DLPDictionariesPattern(dict):
    def __init__(__self__, *,
                 action: Optional[builtins.str] = None,
                 pattern: Optional[builtins.str] = None):
        """
        :param builtins.str action: The action applied to a DLP dictionary using patterns
        :param builtins.str pattern: DLP dictionary pattern
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def action(self) -> Optional[builtins.str]:
        """
        The action applied to a DLP dictionary using patterns
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[builtins.str]:
        """
        DLP dictionary pattern
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class DLPDictionariesPhrase(dict):
    def __init__(__self__, *,
                 action: Optional[builtins.str] = None,
                 phrase: Optional[builtins.str] = None):
        """
        :param builtins.str phrase: DLP dictionary phrase
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if phrase is not None:
            pulumi.set(__self__, "phrase", phrase)

    @property
    @pulumi.getter
    def action(self) -> Optional[builtins.str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def phrase(self) -> Optional[builtins.str]:
        """
        DLP dictionary phrase
        """
        return pulumi.get(self, "phrase")


@pulumi.output_type
class DLPWebRulesAuditor(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class DLPWebRulesDepartments(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesDlpEngines(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesExcludedDepartments(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesExcludedDomainProfiles(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesExcludedGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesExcludedUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesIcapServer(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class DLPWebRulesIncludedDomainProfiles(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesLabels(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class DLPWebRulesLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesLocations(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesNotificationTemplate(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class DLPWebRulesSourceIpGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesUrlCategories(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesWorkloadGroup(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.int id: The unique identifier for the resource.
        :param builtins.str name: The name of the resource.
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique identifier for the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the resource.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FileTypeControlRulesDepartments(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FileTypeControlRulesDeviceGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FileTypeControlRulesDevices(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FileTypeControlRulesGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FileTypeControlRulesLabels(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FileTypeControlRulesLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FileTypeControlRulesLocations(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FileTypeControlRulesTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FileTypeControlRulesUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FileTypeControlRulesZpaAppSegment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FileTypeControlRulesZpaAppSegment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FileTypeControlRulesZpaAppSegment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FileTypeControlRulesZpaAppSegment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str external_id: External ID of the application segment.
        :param builtins.str name: Name of the application segment.
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        External ID of the application segment.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the application segment.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallDNSRuleApplicationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: Unique identifier for the Firewall Filtering policy rule
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallDNSRuleDepartments(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: Unique identifier for the Firewall Filtering policy rule
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallDNSRuleDestIpGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: Unique identifier for the Firewall Filtering policy rule
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallDNSRuleDestIpv6Groups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: Unique identifier for the Firewall Filtering policy rule
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallDNSRuleDeviceGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: Unique identifier for the Firewall Filtering policy rule
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallDNSRuleDevices(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: Unique identifier for the Firewall Filtering policy rule
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallDNSRuleDnsGateway(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallDNSRuleEdnsEcsObject(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallDNSRuleGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: Unique identifier for the Firewall Filtering policy rule
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallDNSRuleLabels(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallDNSRuleLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: Unique identifier for the Firewall Filtering policy rule
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallDNSRuleLocations(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: Unique identifier for the Firewall Filtering policy rule
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallDNSRuleSrcIpGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: Unique identifier for the Firewall Filtering policy rule
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallDNSRuleSrcIpv6Groups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: Unique identifier for the Firewall Filtering policy rule
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallDNSRuleTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: Unique identifier for the Firewall Filtering policy rule
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallDNSRuleUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: Unique identifier for the Firewall Filtering policy rule
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallDNSRuleZpaIpGroup(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallFilteringNetworkServicesDestTcpPort(dict):
    def __init__(__self__, *,
                 end: Optional[builtins.int] = None,
                 start: Optional[builtins.int] = None):
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[builtins.int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[builtins.int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class FirewallFilteringNetworkServicesDestUdpPort(dict):
    def __init__(__self__, *,
                 end: Optional[builtins.int] = None,
                 start: Optional[builtins.int] = None):
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[builtins.int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[builtins.int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class FirewallFilteringNetworkServicesSrcTcpPort(dict):
    def __init__(__self__, *,
                 end: Optional[builtins.int] = None,
                 start: Optional[builtins.int] = None):
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[builtins.int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[builtins.int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class FirewallFilteringNetworkServicesSrcUdpPort(dict):
    def __init__(__self__, *,
                 end: Optional[builtins.int] = None,
                 start: Optional[builtins.int] = None):
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[builtins.int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[builtins.int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class FirewallFilteringRuleAppServiceGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleAppServices(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleDepartments(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleDestIpGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleDeviceGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleDevices(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleLabels(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallFilteringRuleLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleLocations(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleNwApplicationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleNwServiceGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleNwServices(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleSrcIpGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleWorkloadGroup(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.int id: The unique identifier for the resource.
        :param builtins.str name: The name of the resource.
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique identifier for the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the resource.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallFilteringRuleZpaAppSegment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallFilteringRuleZpaAppSegment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallFilteringRuleZpaAppSegment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallFilteringRuleZpaAppSegment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str external_id: External ID of the application segment.
        :param builtins.str name: Name of the application segment.
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        External ID of the application segment.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the application segment.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallFilteringServiceGroupsService(dict):
    def __init__(__self__, *,
                 ids: Sequence[builtins.int]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[builtins.int]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlProxiesCert(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        """
        :param builtins.int id: (Integer) Identifier that uniquely identifies the certificate
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        (Integer) Identifier that uniquely identifies the certificate
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ForwardingControlRuleAppServiceGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleDepartments(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleDestIpGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleDestIpv6Groups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleEcGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleLabels(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        """
        :param builtins.int id: (int) Identifier that uniquely identifies an entity
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ForwardingControlRuleLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleLocations(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleNwApplicationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleNwServiceGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleNwServices(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleProxyGateway(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.int id: (int) Identifier that uniquely identifies an entity
        :param builtins.str name: (string) The configured name of the entity
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        (string) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ForwardingControlRuleSrcIpGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleSrcIpv6Groups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleZpaAppSegment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ForwardingControlRuleZpaAppSegment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ForwardingControlRuleZpaAppSegment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ForwardingControlRuleZpaAppSegment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str external_id: (int) Identifier that uniquely identifies an entity
        :param builtins.str name: (string) The configured name of the entity
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (string) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ForwardingControlRuleZpaApplicationSegmentGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleZpaApplicationSegments(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (int) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleZpaGateway(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.int id: (int) Identifier that uniquely identifies an entity
        :param builtins.str name: (string) The configured name of the entity
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        (string) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ForwardingControlZPAGatewayZpaAppSegment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ForwardingControlZPAGatewayZpaAppSegment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ForwardingControlZPAGatewayZpaAppSegment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ForwardingControlZPAGatewayZpaAppSegment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str external_id: An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ForwardingControlZPAGatewayZpaServerGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ForwardingControlZPAGatewayZpaServerGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ForwardingControlZPAGatewayZpaServerGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ForwardingControlZPAGatewayZpaServerGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str external_id: An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class IPSFirewallRuleDepartments(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleDestIpGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleDestIpv6Groups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleDeviceGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleDevices(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleLabels(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        """
        :param builtins.int id: (Integer) Identifier that uniquely identifies an entity
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class IPSFirewallRuleLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleLocations(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleNwServiceGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleNwServices(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleSrcIpGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleSrcIpv6Groups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleThreatCategories(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class IPSFirewallRuleZpaAppSegment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IPSFirewallRuleZpaAppSegment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IPSFirewallRuleZpaAppSegment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IPSFirewallRuleZpaAppSegment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str external_id: External ID of the application segment.
        :param builtins.str name: Name of the application segment.
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        External ID of the application segment.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the application segment.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class LocationManagementDynamicLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class LocationManagementExtranet(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LocationManagementExtranetDn(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LocationManagementExtranetIpPool(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class LocationManagementStaticLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class LocationManagementVpnCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "preSharedKey":
            suggest = "pre_shared_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocationManagementVpnCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocationManagementVpnCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocationManagementVpnCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comments: Optional[builtins.str] = None,
                 fqdn: Optional[builtins.str] = None,
                 id: Optional[builtins.int] = None,
                 ip_address: Optional[builtins.str] = None,
                 pre_shared_key: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None):
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if pre_shared_key is not None:
            pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comments(self) -> Optional[builtins.str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> Optional[builtins.str]:
        return pulumi.get(self, "pre_shared_key")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class NatControlRulesDepartments(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class NatControlRulesDestIpGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class NatControlRulesDestIpv6Groups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class NatControlRulesDeviceGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class NatControlRulesDevices(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class NatControlRulesGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class NatControlRulesLabels(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class NatControlRulesLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class NatControlRulesLocations(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class NatControlRulesNwServiceGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class NatControlRulesNwServices(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class NatControlRulesSrcIpGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class NatControlRulesSrcIpv6Groups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class NatControlRulesTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class NatControlRulesUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class RiskProfilesCustomTags(dict):
    def __init__(__self__, *,
                 ids: Sequence[builtins.int]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[builtins.int]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class SSLInspectionRulesAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "decryptSubActions":
            suggest = "decrypt_sub_actions"
        elif key == "doNotDecryptSubActions":
            suggest = "do_not_decrypt_sub_actions"
        elif key == "overrideDefaultCertificate":
            suggest = "override_default_certificate"
        elif key == "showEun":
            suggest = "show_eun"
        elif key == "showEunatp":
            suggest = "show_eunatp"
        elif key == "sslInterceptionCerts":
            suggest = "ssl_interception_certs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SSLInspectionRulesAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SSLInspectionRulesAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SSLInspectionRulesAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 decrypt_sub_actions: Optional[Sequence['outputs.SSLInspectionRulesActionDecryptSubAction']] = None,
                 do_not_decrypt_sub_actions: Optional[Sequence['outputs.SSLInspectionRulesActionDoNotDecryptSubAction']] = None,
                 override_default_certificate: Optional[builtins.bool] = None,
                 show_eun: Optional[builtins.bool] = None,
                 show_eunatp: Optional[builtins.bool] = None,
                 ssl_interception_certs: Optional[Sequence['outputs.SSLInspectionRulesActionSslInterceptionCert']] = None,
                 type: Optional[builtins.str] = None):
        """
        :param Sequence['SSLInspectionRulesActionDecryptSubActionArgs'] decrypt_sub_actions: (Block List) - Action taken when enabling SSL intercept
        :param Sequence['SSLInspectionRulesActionDoNotDecryptSubActionArgs'] do_not_decrypt_sub_actions: (Block List) - Action taken when bypassing SSL intercept
        :param builtins.bool override_default_certificate: (Boolean) - Whether to override the default SSL interception certificate.
        :param builtins.bool show_eun: (Boolean) - Enable this setting to display end user notifications.
        :param builtins.bool show_eunatp: (Boolean) - Whether to display the EUN ATP page.
        :param Sequence['SSLInspectionRulesActionSslInterceptionCertArgs'] ssl_interception_certs: has the following attributes:
               **NOTE** This block can only be set when `override_default_certificate` is `true`
        :param builtins.str type: (String) - The action type for this rule. Possible values: `BLOCK`.
        """
        if decrypt_sub_actions is not None:
            pulumi.set(__self__, "decrypt_sub_actions", decrypt_sub_actions)
        if do_not_decrypt_sub_actions is not None:
            pulumi.set(__self__, "do_not_decrypt_sub_actions", do_not_decrypt_sub_actions)
        if override_default_certificate is not None:
            pulumi.set(__self__, "override_default_certificate", override_default_certificate)
        if show_eun is not None:
            pulumi.set(__self__, "show_eun", show_eun)
        if show_eunatp is not None:
            pulumi.set(__self__, "show_eunatp", show_eunatp)
        if ssl_interception_certs is not None:
            pulumi.set(__self__, "ssl_interception_certs", ssl_interception_certs)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="decryptSubActions")
    def decrypt_sub_actions(self) -> Optional[Sequence['outputs.SSLInspectionRulesActionDecryptSubAction']]:
        """
        (Block List) - Action taken when enabling SSL intercept
        """
        return pulumi.get(self, "decrypt_sub_actions")

    @property
    @pulumi.getter(name="doNotDecryptSubActions")
    def do_not_decrypt_sub_actions(self) -> Optional[Sequence['outputs.SSLInspectionRulesActionDoNotDecryptSubAction']]:
        """
        (Block List) - Action taken when bypassing SSL intercept
        """
        return pulumi.get(self, "do_not_decrypt_sub_actions")

    @property
    @pulumi.getter(name="overrideDefaultCertificate")
    def override_default_certificate(self) -> Optional[builtins.bool]:
        """
        (Boolean) - Whether to override the default SSL interception certificate.
        """
        return pulumi.get(self, "override_default_certificate")

    @property
    @pulumi.getter(name="showEun")
    def show_eun(self) -> Optional[builtins.bool]:
        """
        (Boolean) - Enable this setting to display end user notifications.
        """
        return pulumi.get(self, "show_eun")

    @property
    @pulumi.getter(name="showEunatp")
    def show_eunatp(self) -> Optional[builtins.bool]:
        """
        (Boolean) - Whether to display the EUN ATP page.
        """
        return pulumi.get(self, "show_eunatp")

    @property
    @pulumi.getter(name="sslInterceptionCerts")
    def ssl_interception_certs(self) -> Optional[Sequence['outputs.SSLInspectionRulesActionSslInterceptionCert']]:
        """
        has the following attributes:
        **NOTE** This block can only be set when `override_default_certificate` is `true`
        """
        return pulumi.get(self, "ssl_interception_certs")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        (String) - The action type for this rule. Possible values: `BLOCK`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class SSLInspectionRulesActionDecryptSubAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockSslTrafficWithNoSniEnabled":
            suggest = "block_ssl_traffic_with_no_sni_enabled"
        elif key == "blockUndecrypt":
            suggest = "block_undecrypt"
        elif key == "http2Enabled":
            suggest = "http2_enabled"
        elif key == "minClientTlsVersion":
            suggest = "min_client_tls_version"
        elif key == "minServerTlsVersion":
            suggest = "min_server_tls_version"
        elif key == "ocspCheck":
            suggest = "ocsp_check"
        elif key == "serverCertificates":
            suggest = "server_certificates"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SSLInspectionRulesActionDecryptSubAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SSLInspectionRulesActionDecryptSubAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SSLInspectionRulesActionDecryptSubAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_ssl_traffic_with_no_sni_enabled: Optional[builtins.bool] = None,
                 block_undecrypt: Optional[builtins.bool] = None,
                 http2_enabled: Optional[builtins.bool] = None,
                 min_client_tls_version: Optional[builtins.str] = None,
                 min_server_tls_version: Optional[builtins.str] = None,
                 ocsp_check: Optional[builtins.bool] = None,
                 server_certificates: Optional[builtins.str] = None):
        """
        :param builtins.bool block_ssl_traffic_with_no_sni_enabled: (Boolean) - Whether to block SSL traffic when SNI is not present.
        :param builtins.bool block_undecrypt: (Boolean) - Enable to block traffic from servers that use non-standard encryption methods or require mutual TLS authentication.
        :param builtins.bool http2_enabled: (Boolean)
        :param builtins.str min_client_tls_version: (String) - The minimum TLS version allowed on the client side: Supported Values are: `CLIENT_TLS_1_0`, `CLIENT_TLS_1_1`, `CLIENT_TLS_1_2`,  `CLIENT_TLS_1_3`.
        :param builtins.str min_server_tls_version: (String) - The minimum TLS version allowed on the server side: Supported Values are: `SERVER_TLS_1_0`, `SERVER_TLS_1_1`, `SERVER_TLS_1_2`,  `SERVER_TLS_1_3`.
        :param builtins.bool ocsp_check: (Boolean) - Whether to enable OCSP check.
        :param builtins.str server_certificates: (String) - Action to take on server certificates. Valid values might include `ALLOW`, `BLOCK`, or `PASS_THRU`.
        """
        if block_ssl_traffic_with_no_sni_enabled is not None:
            pulumi.set(__self__, "block_ssl_traffic_with_no_sni_enabled", block_ssl_traffic_with_no_sni_enabled)
        if block_undecrypt is not None:
            pulumi.set(__self__, "block_undecrypt", block_undecrypt)
        if http2_enabled is not None:
            pulumi.set(__self__, "http2_enabled", http2_enabled)
        if min_client_tls_version is not None:
            pulumi.set(__self__, "min_client_tls_version", min_client_tls_version)
        if min_server_tls_version is not None:
            pulumi.set(__self__, "min_server_tls_version", min_server_tls_version)
        if ocsp_check is not None:
            pulumi.set(__self__, "ocsp_check", ocsp_check)
        if server_certificates is not None:
            pulumi.set(__self__, "server_certificates", server_certificates)

    @property
    @pulumi.getter(name="blockSslTrafficWithNoSniEnabled")
    def block_ssl_traffic_with_no_sni_enabled(self) -> Optional[builtins.bool]:
        """
        (Boolean) - Whether to block SSL traffic when SNI is not present.
        """
        return pulumi.get(self, "block_ssl_traffic_with_no_sni_enabled")

    @property
    @pulumi.getter(name="blockUndecrypt")
    def block_undecrypt(self) -> Optional[builtins.bool]:
        """
        (Boolean) - Enable to block traffic from servers that use non-standard encryption methods or require mutual TLS authentication.
        """
        return pulumi.get(self, "block_undecrypt")

    @property
    @pulumi.getter(name="http2Enabled")
    def http2_enabled(self) -> Optional[builtins.bool]:
        """
        (Boolean)
        """
        return pulumi.get(self, "http2_enabled")

    @property
    @pulumi.getter(name="minClientTlsVersion")
    def min_client_tls_version(self) -> Optional[builtins.str]:
        """
        (String) - The minimum TLS version allowed on the client side: Supported Values are: `CLIENT_TLS_1_0`, `CLIENT_TLS_1_1`, `CLIENT_TLS_1_2`,  `CLIENT_TLS_1_3`.
        """
        return pulumi.get(self, "min_client_tls_version")

    @property
    @pulumi.getter(name="minServerTlsVersion")
    def min_server_tls_version(self) -> Optional[builtins.str]:
        """
        (String) - The minimum TLS version allowed on the server side: Supported Values are: `SERVER_TLS_1_0`, `SERVER_TLS_1_1`, `SERVER_TLS_1_2`,  `SERVER_TLS_1_3`.
        """
        return pulumi.get(self, "min_server_tls_version")

    @property
    @pulumi.getter(name="ocspCheck")
    def ocsp_check(self) -> Optional[builtins.bool]:
        """
        (Boolean) - Whether to enable OCSP check.
        """
        return pulumi.get(self, "ocsp_check")

    @property
    @pulumi.getter(name="serverCertificates")
    def server_certificates(self) -> Optional[builtins.str]:
        """
        (String) - Action to take on server certificates. Valid values might include `ALLOW`, `BLOCK`, or `PASS_THRU`.
        """
        return pulumi.get(self, "server_certificates")


@pulumi.output_type
class SSLInspectionRulesActionDoNotDecryptSubAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockSslTrafficWithNoSniEnabled":
            suggest = "block_ssl_traffic_with_no_sni_enabled"
        elif key == "bypassOtherPolicies":
            suggest = "bypass_other_policies"
        elif key == "minTlsVersion":
            suggest = "min_tls_version"
        elif key == "ocspCheck":
            suggest = "ocsp_check"
        elif key == "serverCertificates":
            suggest = "server_certificates"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SSLInspectionRulesActionDoNotDecryptSubAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SSLInspectionRulesActionDoNotDecryptSubAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SSLInspectionRulesActionDoNotDecryptSubAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_ssl_traffic_with_no_sni_enabled: Optional[builtins.bool] = None,
                 bypass_other_policies: Optional[builtins.bool] = None,
                 min_tls_version: Optional[builtins.str] = None,
                 ocsp_check: Optional[builtins.bool] = None,
                 server_certificates: Optional[builtins.str] = None):
        """
        :param builtins.bool block_ssl_traffic_with_no_sni_enabled: (Boolean) - Whether to block SSL traffic when SNI is not present.
        :param builtins.bool bypass_other_policies: (Boolean) - Whether to bypass other policies when action is set to `DO_NOT_DECRYPT`.
        :param builtins.str min_tls_version: (String) -  The minimum TLS version allowed on the server side: Supported Values are: `SERVER_TLS_1_0`, `SERVER_TLS_1_1`, `SERVER_TLS_1_2`,  `SERVER_TLS_1_3`.
               **NOTE** `min_tls_version` and `server_certificates` CANNOT be set if `bypass_other_policies` is `true`
        :param builtins.bool ocsp_check: (Boolean) - Whether to enable OCSP check.
        :param builtins.str server_certificates: (String) - Action to take on server certificates. Valid values might include `ALLOW`, `BLOCK`, or `PASS_THRU`.
        """
        if block_ssl_traffic_with_no_sni_enabled is not None:
            pulumi.set(__self__, "block_ssl_traffic_with_no_sni_enabled", block_ssl_traffic_with_no_sni_enabled)
        if bypass_other_policies is not None:
            pulumi.set(__self__, "bypass_other_policies", bypass_other_policies)
        if min_tls_version is not None:
            pulumi.set(__self__, "min_tls_version", min_tls_version)
        if ocsp_check is not None:
            pulumi.set(__self__, "ocsp_check", ocsp_check)
        if server_certificates is not None:
            pulumi.set(__self__, "server_certificates", server_certificates)

    @property
    @pulumi.getter(name="blockSslTrafficWithNoSniEnabled")
    def block_ssl_traffic_with_no_sni_enabled(self) -> Optional[builtins.bool]:
        """
        (Boolean) - Whether to block SSL traffic when SNI is not present.
        """
        return pulumi.get(self, "block_ssl_traffic_with_no_sni_enabled")

    @property
    @pulumi.getter(name="bypassOtherPolicies")
    def bypass_other_policies(self) -> Optional[builtins.bool]:
        """
        (Boolean) - Whether to bypass other policies when action is set to `DO_NOT_DECRYPT`.
        """
        return pulumi.get(self, "bypass_other_policies")

    @property
    @pulumi.getter(name="minTlsVersion")
    def min_tls_version(self) -> Optional[builtins.str]:
        """
        (String) -  The minimum TLS version allowed on the server side: Supported Values are: `SERVER_TLS_1_0`, `SERVER_TLS_1_1`, `SERVER_TLS_1_2`,  `SERVER_TLS_1_3`.
        **NOTE** `min_tls_version` and `server_certificates` CANNOT be set if `bypass_other_policies` is `true`
        """
        return pulumi.get(self, "min_tls_version")

    @property
    @pulumi.getter(name="ocspCheck")
    def ocsp_check(self) -> Optional[builtins.bool]:
        """
        (Boolean) - Whether to enable OCSP check.
        """
        return pulumi.get(self, "ocsp_check")

    @property
    @pulumi.getter(name="serverCertificates")
    def server_certificates(self) -> Optional[builtins.str]:
        """
        (String) - Action to take on server certificates. Valid values might include `ALLOW`, `BLOCK`, or `PASS_THRU`.
        """
        return pulumi.get(self, "server_certificates")


@pulumi.output_type
class SSLInspectionRulesActionSslInterceptionCert(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        """
        :param builtins.int id: (Integer) - A unique identifier assigned to the workload group
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        (Integer) - A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SSLInspectionRulesDepartments(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) - A unique identifier assigned to the workload group
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) - A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SSLInspectionRulesDestIpGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) - A unique identifier assigned to the workload group
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) - A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SSLInspectionRulesDeviceGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) - A unique identifier assigned to the workload group
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) - A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SSLInspectionRulesDevices(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) - A unique identifier assigned to the workload group
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) - A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SSLInspectionRulesGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) - A unique identifier assigned to the workload group
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) - A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SSLInspectionRulesLabels(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        """
        :param builtins.int id: (Integer) - A unique identifier assigned to the workload group
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        (Integer) - A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SSLInspectionRulesLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) - A unique identifier assigned to the workload group
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) - A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SSLInspectionRulesLocations(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) - A unique identifier assigned to the workload group
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) - A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SSLInspectionRulesProxyGateways(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) - A unique identifier assigned to the workload group
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) - A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SSLInspectionRulesSourceIpGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) - A unique identifier assigned to the workload group
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) - A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SSLInspectionRulesTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) - A unique identifier assigned to the workload group
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) - A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SSLInspectionRulesUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) - A unique identifier assigned to the workload group
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) - A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SSLInspectionRulesWorkloadGroup(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.int id: (Integer) - A unique identifier assigned to the workload group
        :param builtins.str name: The name of the resource.
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        (Integer) - A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the resource.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SSLInspectionRulesZpaAppSegment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SSLInspectionRulesZpaAppSegment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SSLInspectionRulesZpaAppSegment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SSLInspectionRulesZpaAppSegment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str external_id: External ID of the application segment.
        :param builtins.str name: Name of the application segment.
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        External ID of the application segment.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the application segment.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SandboxRulesDepartments(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SandboxRulesGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SandboxRulesLabels(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.int] = None):
        """
        :param builtins.int id: (Integer) Identifier that uniquely identifies an entity
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class SandboxRulesLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SandboxRulesLocations(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SandboxRulesUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: (Integer) Identifier that uniquely identifies an entity
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        (Integer) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class SandboxRulesZpaAppSegment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SandboxRulesZpaAppSegment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SandboxRulesZpaAppSegment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SandboxRulesZpaAppSegment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str external_id: External ID of the application segment.
        :param builtins.str name: Name of the application segment.
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        External ID of the application segment.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the application segment.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TrafficForwardingGRETunnelPrimaryDestVip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "virtualIp":
            suggest = "virtual_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrafficForwardingGRETunnelPrimaryDestVip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrafficForwardingGRETunnelPrimaryDestVip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrafficForwardingGRETunnelPrimaryDestVip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter: Optional[builtins.str] = None,
                 id: Optional[builtins.int] = None,
                 virtual_ip: Optional[builtins.str] = None):
        """
        :param builtins.str datacenter: Data center information
        :param builtins.int id: GRE cluster virtual IP ID
        :param builtins.str virtual_ip: GRE cluster virtual IP address (VIP)
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if virtual_ip is not None:
            pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[builtins.str]:
        """
        Data center information
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        GRE cluster virtual IP ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> Optional[builtins.str]:
        """
        GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class TrafficForwardingGRETunnelSecondaryDestVip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "virtualIp":
            suggest = "virtual_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrafficForwardingGRETunnelSecondaryDestVip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrafficForwardingGRETunnelSecondaryDestVip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrafficForwardingGRETunnelSecondaryDestVip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter: Optional[builtins.str] = None,
                 id: Optional[builtins.int] = None,
                 virtual_ip: Optional[builtins.str] = None):
        """
        :param builtins.str datacenter: Data center information
        :param builtins.int id: GRE cluster virtual IP ID
        :param builtins.str virtual_ip: GRE cluster virtual IP address (VIP)
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if virtual_ip is not None:
            pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[builtins.str]:
        """
        Data center information
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        GRE cluster virtual IP ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> Optional[builtins.str]:
        """
        GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class URLCategoriesScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scopeEntities":
            suggest = "scope_entities"
        elif key == "scopeGroupMemberEntities":
            suggest = "scope_group_member_entities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in URLCategoriesScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        URLCategoriesScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        URLCategoriesScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scope_entities: Optional['outputs.URLCategoriesScopeScopeEntities'] = None,
                 scope_group_member_entities: Optional['outputs.URLCategoriesScopeScopeGroupMemberEntities'] = None,
                 type: Optional[builtins.str] = None):
        """
        :param 'URLCategoriesScopeScopeEntitiesArgs' scope_entities: list of scope IDs
        :param 'URLCategoriesScopeScopeGroupMemberEntitiesArgs' scope_group_member_entities: list of scope group member IDs
        """
        if scope_entities is not None:
            pulumi.set(__self__, "scope_entities", scope_entities)
        if scope_group_member_entities is not None:
            pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Optional['outputs.URLCategoriesScopeScopeEntities']:
        """
        list of scope IDs
        """
        return pulumi.get(self, "scope_entities")

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Optional['outputs.URLCategoriesScopeScopeGroupMemberEntities']:
        """
        list of scope group member IDs
        """
        return pulumi.get(self, "scope_group_member_entities")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class URLCategoriesScopeScopeEntities(dict):
    def __init__(__self__, *,
                 ids: Sequence[builtins.int]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[builtins.int]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLCategoriesScopeScopeGroupMemberEntities(dict):
    def __init__(__self__, *,
                 ids: Sequence[builtins.int]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[builtins.int]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLCategoriesUrlKeywordCounts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retainParentKeywordCount":
            suggest = "retain_parent_keyword_count"
        elif key == "retainParentUrlCount":
            suggest = "retain_parent_url_count"
        elif key == "totalKeywordCount":
            suggest = "total_keyword_count"
        elif key == "totalUrlCount":
            suggest = "total_url_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in URLCategoriesUrlKeywordCounts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        URLCategoriesUrlKeywordCounts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        URLCategoriesUrlKeywordCounts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 retain_parent_keyword_count: Optional[builtins.int] = None,
                 retain_parent_url_count: Optional[builtins.int] = None,
                 total_keyword_count: Optional[builtins.int] = None,
                 total_url_count: Optional[builtins.int] = None):
        """
        :param builtins.int retain_parent_keyword_count: Count of total keywords with retain parent category.
        :param builtins.int retain_parent_url_count: Count of URLs with retain parent category.
        :param builtins.int total_keyword_count: Total keyword count for the category.
        :param builtins.int total_url_count: Custom URL count for the category.
        """
        if retain_parent_keyword_count is not None:
            pulumi.set(__self__, "retain_parent_keyword_count", retain_parent_keyword_count)
        if retain_parent_url_count is not None:
            pulumi.set(__self__, "retain_parent_url_count", retain_parent_url_count)
        if total_keyword_count is not None:
            pulumi.set(__self__, "total_keyword_count", total_keyword_count)
        if total_url_count is not None:
            pulumi.set(__self__, "total_url_count", total_url_count)

    @property
    @pulumi.getter(name="retainParentKeywordCount")
    def retain_parent_keyword_count(self) -> Optional[builtins.int]:
        """
        Count of total keywords with retain parent category.
        """
        return pulumi.get(self, "retain_parent_keyword_count")

    @property
    @pulumi.getter(name="retainParentUrlCount")
    def retain_parent_url_count(self) -> Optional[builtins.int]:
        """
        Count of URLs with retain parent category.
        """
        return pulumi.get(self, "retain_parent_url_count")

    @property
    @pulumi.getter(name="totalKeywordCount")
    def total_keyword_count(self) -> Optional[builtins.int]:
        """
        Total keyword count for the category.
        """
        return pulumi.get(self, "total_keyword_count")

    @property
    @pulumi.getter(name="totalUrlCount")
    def total_url_count(self) -> Optional[builtins.int]:
        """
        Custom URL count for the category.
        """
        return pulumi.get(self, "total_url_count")


@pulumi.output_type
class URLFilteringRulesCbiProfile(dict):
    def __init__(__self__, *,
                 id: Optional[builtins.str] = None,
                 name: Optional[builtins.str] = None,
                 url: Optional[builtins.str] = None):
        """
        :param builtins.str name: Name of the Firewall Filtering policy rule
        :param builtins.str url: The browser isolation profile URL
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> Optional[builtins.str]:
        """
        The browser isolation profile URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class URLFilteringRulesDepartments(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesDeviceGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesDevices(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesLabels(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesLocations(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesOverrideGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesOverrideUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesSourceIpGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesUsers(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesWorkloadGroup(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.int id: The unique identifier for the resource.
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique identifier for the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserManagementDepartment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idpId":
            suggest = "idp_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserManagementDepartment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserManagementDepartment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserManagementDepartment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comments: Optional[builtins.str] = None,
                 deleted: Optional[builtins.bool] = None,
                 id: Optional[builtins.int] = None,
                 idp_id: Optional[builtins.int] = None,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.str comments: Additional information about this department
        :param builtins.int idp_id: Identity provider (IdP) ID
        :param builtins.str name: User name. This appears when choosing users for policies.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if deleted is not None:
            pulumi.set(__self__, "deleted", deleted)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comments(self) -> Optional[builtins.str]:
        """
        Additional information about this department
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def deleted(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[builtins.int]:
        """
        Identity provider (IdP) ID
        """
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        User name. This appears when choosing users for policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserManagementGroups(dict):
    def __init__(__self__, *,
                 ids: Optional[Sequence[builtins.int]] = None):
        """
        :param Sequence[builtins.int] ids: Unique identfier for the group
        """
        if ids is not None:
            pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Optional[Sequence[builtins.int]]:
        """
        Unique identfier for the group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class VirtualServiceEdgeClusterVirtualZenNodes(dict):
    def __init__(__self__, *,
                 ids: Sequence[builtins.int]):
        """
        :param Sequence[builtins.int] ids: (Number) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[builtins.int]:
        """
        (Number) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class GetAdminUsersAdminScopeResult(dict):
    def __init__(__self__, *,
                 scope_entities: Sequence['outputs.GetAdminUsersAdminScopeScopeEntityResult'],
                 scope_group_member_entities: Sequence['outputs.GetAdminUsersAdminScopeScopeGroupMemberEntityResult'],
                 type: builtins.str):
        """
        :param Sequence['GetAdminUsersAdminScopeScopeEntityArgs'] scope_entities: (String) Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        :param Sequence['GetAdminUsersAdminScopeScopeGroupMemberEntityArgs'] scope_group_member_entities: (Number) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
        :param builtins.str type: (String) The admin scope type. The attribute name is subject to change.
        """
        pulumi.set(__self__, "scope_entities", scope_entities)
        pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Sequence['outputs.GetAdminUsersAdminScopeScopeEntityResult']:
        """
        (String) Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        """
        return pulumi.get(self, "scope_entities")

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Sequence['outputs.GetAdminUsersAdminScopeScopeGroupMemberEntityResult']:
        """
        (Number) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (String) The admin scope type. The attribute name is subject to change.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAdminUsersAdminScopeScopeEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The ID of the admin user to be exported.
        :param builtins.str name: (String)
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the admin user to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (String)
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAdminUsersAdminScopeScopeGroupMemberEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The ID of the admin user to be exported.
        :param builtins.str name: (String)
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the admin user to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (String)
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAdminUsersExecMobileAppTokenResult(dict):
    def __init__(__self__, *,
                 cloud: builtins.str,
                 create_time: builtins.int,
                 device_id: builtins.str,
                 device_name: builtins.str,
                 name: builtins.str,
                 org_id: builtins.int,
                 token: builtins.str,
                 token_expiry: builtins.int,
                 token_id: builtins.str):
        """
        :param builtins.str cloud: (String)
        :param builtins.int create_time: (Number)
        :param builtins.str device_id: (String)
        :param builtins.str device_name: (String)
        :param builtins.str name: (String)
        :param builtins.int org_id: (Number)
        :param builtins.str token: (String)
        :param builtins.int token_expiry: (Number)
        :param builtins.str token_id: (String)
        """
        pulumi.set(__self__, "cloud", cloud)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "token_expiry", token_expiry)
        pulumi.set(__self__, "token_id", token_id)

    @property
    @pulumi.getter
    def cloud(self) -> builtins.str:
        """
        (String)
        """
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> builtins.int:
        """
        (Number)
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> builtins.str:
        """
        (String)
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> builtins.str:
        """
        (String)
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (String)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> builtins.int:
        """
        (Number)
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def token(self) -> builtins.str:
        """
        (String)
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="tokenExpiry")
    def token_expiry(self) -> builtins.int:
        """
        (Number)
        """
        return pulumi.get(self, "token_expiry")

    @property
    @pulumi.getter(name="tokenId")
    def token_id(self) -> builtins.str:
        """
        (String)
        """
        return pulumi.get(self, "token_id")


@pulumi.output_type
class GetAdminUsersRoleResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The ID of the admin user to be exported.
        :param builtins.str name: (String)
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the admin user to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (String)
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetBrowserControlPolicySmartIsolationProfileResult(dict):
    def __init__(__self__, *,
                 default_profile: builtins.bool,
                 id: builtins.str,
                 name: builtins.str,
                 url: builtins.str):
        """
        :param builtins.bool default_profile: Indicates whether this is a default browser isolation profile. Zscaler sets this field.
        :param builtins.str id: (int) A unique identifier for an entity.
        :param builtins.str name: Name of the browser isolation profile
        :param builtins.str url: The browser isolation profile URL
        """
        pulumi.set(__self__, "default_profile", default_profile)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="defaultProfile")
    def default_profile(self) -> builtins.bool:
        """
        Indicates whether this is a default browser isolation profile. Zscaler sets this field.
        """
        return pulumi.get(self, "default_profile")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        (int) A unique identifier for an entity.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the browser isolation profile
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        The browser isolation profile URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetCasbDlpRulesAuditorNotificationResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesBucketResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesCasbEmailLabelResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesCasbTombstoneTemplateResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesCloudAppTenantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesCriteriaDomainProfileResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesDepartmentResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesDlpEngineResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String) Optional metadata for the DLP engine.
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String) Optional metadata for the DLP engine.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesEmailRecipientProfileResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesEntityGroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesExcludedDomainProfileResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesGroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesIncludedDomainProfileResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesLabelResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesObjectTypeResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesRedactionProfileResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesTagResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesUserResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesWatermarkProfileResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbDlpRulesZscalerIncidentReceiverResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbMalwareRulesBucketResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbMalwareRulesCasbEmailLabelResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbMalwareRulesCasbTombstoneTemplateResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbMalwareRulesCloudAppTenantResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbMalwareRulesCloudAppTenantIdResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbMalwareRulesLabelResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbMalwareRulesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
        :param builtins.str name: Rule name.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Rule name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCasbTenantZscalerAppTenantIdResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudAppControlRuleCbiProfileResult(dict):
    def __init__(__self__, *,
                 default_profile: builtins.bool,
                 id: builtins.str,
                 name: builtins.str,
                 sandbox_mode: builtins.bool,
                 url: builtins.str):
        """
        :param builtins.bool default_profile: The browser isolation profile URL
        :param builtins.str id: The universally unique identifier (UUID) for the browser isolation profile
        :param builtins.str name: Name of the browser isolation profile
        :param builtins.bool sandbox_mode: The browser isolation profile URL
        :param builtins.str url: The browser isolation profile URL
        """
        pulumi.set(__self__, "default_profile", default_profile)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sandbox_mode", sandbox_mode)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="defaultProfile")
    def default_profile(self) -> builtins.bool:
        """
        The browser isolation profile URL
        """
        return pulumi.get(self, "default_profile")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The universally unique identifier (UUID) for the browser isolation profile
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the browser isolation profile
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sandboxMode")
    def sandbox_mode(self) -> builtins.bool:
        """
        The browser isolation profile URL
        """
        return pulumi.get(self, "sandbox_mode")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        The browser isolation profile URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetCloudAppControlRuleDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudAppControlRuleDeviceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudAppControlRuleDeviceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudAppControlRuleGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudAppControlRuleLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudAppControlRuleLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudAppControlRuleLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudAppControlRuleUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudApplicationInstanceInstanceIdentifierResult(dict):
    def __init__(__self__, *,
                 identifier_type: builtins.str,
                 instance_id: builtins.int,
                 instance_identifier: builtins.str,
                 instance_identifier_name: builtins.str,
                 last_modified_bies: Sequence['outputs.GetCloudApplicationInstanceInstanceIdentifierLastModifiedByResult'],
                 modified_at: builtins.int):
        """
        :param builtins.str identifier_type: Type of the cloud application instance
        :param builtins.int instance_id: Unique identifier for the cloud application instance
        :param builtins.str instance_identifier: Unique identifying string for the instance
        :param builtins.str instance_identifier_name: Unique identifying string for the instance
        :param Sequence['GetCloudApplicationInstanceInstanceIdentifierLastModifiedByArgs'] last_modified_bies: The admin that modified the instance last.
        :param builtins.int modified_at: Timestamp of when the instance was last modified.
        """
        pulumi.set(__self__, "identifier_type", identifier_type)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_identifier", instance_identifier)
        pulumi.set(__self__, "instance_identifier_name", instance_identifier_name)
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        pulumi.set(__self__, "modified_at", modified_at)

    @property
    @pulumi.getter(name="identifierType")
    def identifier_type(self) -> builtins.str:
        """
        Type of the cloud application instance
        """
        return pulumi.get(self, "identifier_type")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> builtins.int:
        """
        Unique identifier for the cloud application instance
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceIdentifier")
    def instance_identifier(self) -> builtins.str:
        """
        Unique identifying string for the instance
        """
        return pulumi.get(self, "instance_identifier")

    @property
    @pulumi.getter(name="instanceIdentifierName")
    def instance_identifier_name(self) -> builtins.str:
        """
        Unique identifying string for the instance
        """
        return pulumi.get(self, "instance_identifier_name")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetCloudApplicationInstanceInstanceIdentifierLastModifiedByResult']:
        """
        The admin that modified the instance last.
        """
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> builtins.int:
        """
        Timestamp of when the instance was last modified.
        """
        return pulumi.get(self, "modified_at")


@pulumi.output_type
class GetCloudApplicationInstanceInstanceIdentifierLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudApplicationInstanceLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetCloudApplicationsApplicationResult(dict):
    def __init__(__self__, *,
                 app: builtins.str,
                 app_name: builtins.str,
                 parent: builtins.str,
                 parent_name: builtins.str):
        """
        :param builtins.str app: (String) Application enum constant
        :param builtins.str app_name: (String) Cloud application name
        :param builtins.str parent: (String) pplication category enum constant
        :param builtins.str parent_name: (String) Name of the cloud application category
        """
        pulumi.set(__self__, "app", app)
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "parent", parent)
        pulumi.set(__self__, "parent_name", parent_name)

    @property
    @pulumi.getter
    def app(self) -> builtins.str:
        """
        (String) Application enum constant
        """
        return pulumi.get(self, "app")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> builtins.str:
        """
        (String) Cloud application name
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def parent(self) -> builtins.str:
        """
        (String) pplication category enum constant
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter(name="parentName")
    def parent_name(self) -> builtins.str:
        """
        (String) Name of the cloud application category
        """
        return pulumi.get(self, "parent_name")


@pulumi.output_type
class GetDLPDictionariesExactDataMatchDetailResult(dict):
    def __init__(__self__, *,
                 dictionary_edm_mapping_id: builtins.int,
                 primary_field: builtins.int,
                 schema_id: builtins.int,
                 secondary_field_match_on: builtins.str,
                 secondary_fields: Sequence[builtins.int]):
        """
        :param builtins.int dictionary_edm_mapping_id: The unique identifier for the EDM mapping
        :param builtins.int primary_field: The EDM template's primary field.
        :param builtins.int schema_id: The unique identifier for the EDM template (or schema).
        :param builtins.str secondary_field_match_on: The EDM secondary field to match on.
        """
        pulumi.set(__self__, "dictionary_edm_mapping_id", dictionary_edm_mapping_id)
        pulumi.set(__self__, "primary_field", primary_field)
        pulumi.set(__self__, "schema_id", schema_id)
        pulumi.set(__self__, "secondary_field_match_on", secondary_field_match_on)
        pulumi.set(__self__, "secondary_fields", secondary_fields)

    @property
    @pulumi.getter(name="dictionaryEdmMappingId")
    def dictionary_edm_mapping_id(self) -> builtins.int:
        """
        The unique identifier for the EDM mapping
        """
        return pulumi.get(self, "dictionary_edm_mapping_id")

    @property
    @pulumi.getter(name="primaryField")
    def primary_field(self) -> builtins.int:
        """
        The EDM template's primary field.
        """
        return pulumi.get(self, "primary_field")

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> builtins.int:
        """
        The unique identifier for the EDM template (or schema).
        """
        return pulumi.get(self, "schema_id")

    @property
    @pulumi.getter(name="secondaryFieldMatchOn")
    def secondary_field_match_on(self) -> builtins.str:
        """
        The EDM secondary field to match on.
        """
        return pulumi.get(self, "secondary_field_match_on")

    @property
    @pulumi.getter(name="secondaryFields")
    def secondary_fields(self) -> Sequence[builtins.int]:
        return pulumi.get(self, "secondary_fields")


@pulumi.output_type
class GetDLPDictionariesIdmProfileMatchAccuracyResult(dict):
    def __init__(__self__, *,
                 adp_idm_profiles: Sequence['outputs.GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileResult'],
                 match_accuracy: builtins.str):
        """
        :param Sequence['GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs'] adp_idm_profiles: The action applied to a DLP dictionary using patterns
        :param builtins.str match_accuracy: The IDM template match accuracy.
        """
        pulumi.set(__self__, "adp_idm_profiles", adp_idm_profiles)
        pulumi.set(__self__, "match_accuracy", match_accuracy)

    @property
    @pulumi.getter(name="adpIdmProfiles")
    def adp_idm_profiles(self) -> Sequence['outputs.GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileResult']:
        """
        The action applied to a DLP dictionary using patterns
        """
        return pulumi.get(self, "adp_idm_profiles")

    @property
    @pulumi.getter(name="matchAccuracy")
    def match_accuracy(self) -> builtins.str:
        """
        The IDM template match accuracy.
        """
        return pulumi.get(self, "match_accuracy")


@pulumi.output_type
class GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the DLP dictionary
        :param builtins.str name: DLP dictionary name
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the DLP dictionary
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        DLP dictionary name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPDictionariesPatternResult(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 pattern: builtins.str):
        """
        :param builtins.str action: (String) The action applied to a DLP dictionary using patterns
        :param builtins.str pattern: (String) DLP dictionary pattern
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        (String) The action applied to a DLP dictionary using patterns
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def pattern(self) -> builtins.str:
        """
        (String) DLP dictionary pattern
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class GetDLPDictionariesPhraseResult(dict):
    def __init__(__self__, *,
                 action: builtins.str,
                 phrase: builtins.str):
        """
        :param builtins.str action: (String) The action applied to a DLP dictionary using patterns
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "phrase", phrase)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        (String) The action applied to a DLP dictionary using patterns
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def phrase(self) -> builtins.str:
        return pulumi.get(self, "phrase")


@pulumi.output_type
class GetDLPEDMSchemaCreatedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPEDMSchemaEdmClientResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPEDMSchemaLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPEDMSchemaScheduleResult(dict):
    def __init__(__self__, *,
                 schedule_day_of_months: Sequence[builtins.str],
                 schedule_day_of_weeks: Sequence[builtins.str],
                 schedule_disabled: builtins.bool,
                 schedule_time: builtins.int,
                 schedule_type: builtins.str):
        """
        :param Sequence[builtins.str] schedule_day_of_months: The day of the month that the IDM template is scheduled for. This attribute is required by PUT and POST requests, and when scheduleType is set to MONTHLY.
        :param Sequence[builtins.str] schedule_day_of_weeks: The day of the week the IDM template is scheduled for. This attribute is required by PUT and POST requests, and when scheduleType is set to WEEKLY.
        :param builtins.bool schedule_disabled: If set to true, the schedule for the IDM template is temporarily in a disabled state. This attribute is required by PUT requests in order to disable or enable a schedule.
        :param builtins.int schedule_time: The time of the day (in minutes) that the IDM template is scheduled for. For example: at 3am= 180 mins. This attribute is required by PUT and POST requests.
        :param builtins.str schedule_type: The schedule type for the IDM template's schedule (i.e., Monthly, Weekly, Daily, or None). This attribute is required by PUT and POST requests.
        """
        pulumi.set(__self__, "schedule_day_of_months", schedule_day_of_months)
        pulumi.set(__self__, "schedule_day_of_weeks", schedule_day_of_weeks)
        pulumi.set(__self__, "schedule_disabled", schedule_disabled)
        pulumi.set(__self__, "schedule_time", schedule_time)
        pulumi.set(__self__, "schedule_type", schedule_type)

    @property
    @pulumi.getter(name="scheduleDayOfMonths")
    def schedule_day_of_months(self) -> Sequence[builtins.str]:
        """
        The day of the month that the IDM template is scheduled for. This attribute is required by PUT and POST requests, and when scheduleType is set to MONTHLY.
        """
        return pulumi.get(self, "schedule_day_of_months")

    @property
    @pulumi.getter(name="scheduleDayOfWeeks")
    def schedule_day_of_weeks(self) -> Sequence[builtins.str]:
        """
        The day of the week the IDM template is scheduled for. This attribute is required by PUT and POST requests, and when scheduleType is set to WEEKLY.
        """
        return pulumi.get(self, "schedule_day_of_weeks")

    @property
    @pulumi.getter(name="scheduleDisabled")
    def schedule_disabled(self) -> builtins.bool:
        """
        If set to true, the schedule for the IDM template is temporarily in a disabled state. This attribute is required by PUT requests in order to disable or enable a schedule.
        """
        return pulumi.get(self, "schedule_disabled")

    @property
    @pulumi.getter(name="scheduleTime")
    def schedule_time(self) -> builtins.int:
        """
        The time of the day (in minutes) that the IDM template is scheduled for. For example: at 3am= 180 mins. This attribute is required by PUT and POST requests.
        """
        return pulumi.get(self, "schedule_time")

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> builtins.str:
        """
        The schedule type for the IDM template's schedule (i.e., Monthly, Weekly, Daily, or None). This attribute is required by PUT and POST requests.
        """
        return pulumi.get(self, "schedule_type")


@pulumi.output_type
class GetDLPEDMSchemaTokenListResult(dict):
    def __init__(__self__, *,
                 col_length_bitmap: builtins.int,
                 hash_file_column_order: builtins.int,
                 name: builtins.str,
                 original_column: builtins.int,
                 primary_key: builtins.bool,
                 type: builtins.str):
        """
        :param builtins.int col_length_bitmap: The length of the column bitmap in the hashed file.
        :param builtins.int hash_file_column_order: The column position for the token in the hashed file, starting from 1.
        :param builtins.str name: The token (i.e., criteria) name. This attribute is required by PUT and POST requests.
        :param builtins.int original_column: The column position for the token in the original CSV file uploaded to the Index Tool, starting from 1. This attribue required by PUT and POST requests.
        :param builtins.bool primary_key: Indicates whether the token is a primary key.
        :param builtins.str type: The token (i.e., criteria) name. This attribute is required by PUT and POST requests.
        """
        pulumi.set(__self__, "col_length_bitmap", col_length_bitmap)
        pulumi.set(__self__, "hash_file_column_order", hash_file_column_order)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "original_column", original_column)
        pulumi.set(__self__, "primary_key", primary_key)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="colLengthBitmap")
    def col_length_bitmap(self) -> builtins.int:
        """
        The length of the column bitmap in the hashed file.
        """
        return pulumi.get(self, "col_length_bitmap")

    @property
    @pulumi.getter(name="hashFileColumnOrder")
    def hash_file_column_order(self) -> builtins.int:
        """
        The column position for the token in the hashed file, starting from 1.
        """
        return pulumi.get(self, "hash_file_column_order")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The token (i.e., criteria) name. This attribute is required by PUT and POST requests.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="originalColumn")
    def original_column(self) -> builtins.int:
        """
        The column position for the token in the original CSV file uploaded to the Index Tool, starting from 1. This attribue required by PUT and POST requests.
        """
        return pulumi.get(self, "original_column")

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> builtins.bool:
        """
        Indicates whether the token is a primary key.
        """
        return pulumi.get(self, "primary_key")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The token (i.e., criteria) name. This attribute is required by PUT and POST requests.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDLPIDMProfileLiteClientVmResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPIDMProfileLiteLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPIDMProfilesIdmClientResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: The configured name of the entity
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPIDMProfilesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: The configured name of the entity
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesDlpEngineResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesExcludedDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDLPWebRulesExcludedGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDLPWebRulesExcludedUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDLPWebRulesGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesIncludedDomainProfileResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesSourceIpGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesTimeWindowResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesUrlCategoryResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Identifier that uniquely identifies an entity
        :param builtins.str name: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesWorkloadGroupResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 id: builtins.int,
                 last_modified_bies: Sequence['outputs.GetDLPWebRulesWorkloadGroupLastModifiedByResult'],
                 last_modified_time: builtins.int,
                 name: builtins.str):
        """
        :param builtins.str description: The description of the workload group
        :param builtins.int id: A unique identifier assigned to the workload group
        :param Sequence['GetDLPWebRulesWorkloadGroupLastModifiedByArgs'] last_modified_bies: The admin that modified the DLP policy rule last.
        :param builtins.int last_modified_time: Timestamp when the DLP policy rule was last modified.
        :param builtins.str name: The name of the workload group
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the workload group
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetDLPWebRulesWorkloadGroupLastModifiedByResult']:
        """
        The admin that modified the DLP policy rule last.
        """
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> builtins.int:
        """
        Timestamp when the DLP policy rule was last modified.
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesWorkloadGroupLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFileTypeControlRulesDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: A unique identifier for an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier for an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFileTypeControlRulesDeviceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: A unique identifier for an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier for an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFileTypeControlRulesDeviceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: A unique identifier for an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier for an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFileTypeControlRulesGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: A unique identifier for an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier for an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFileTypeControlRulesLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: A unique identifier for an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier for an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFileTypeControlRulesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: A unique identifier for an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier for an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFileTypeControlRulesLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: A unique identifier for an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier for an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFileTypeControlRulesLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: A unique identifier for an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier for an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFileTypeControlRulesTimeWindowResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: A unique identifier for an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier for an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFileTypeControlRulesUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: A unique identifier for an entity
        :param builtins.str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier for an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFileTypeControlRulesZpaAppSegmentResult(dict):
    def __init__(__self__, *,
                 external_id: builtins.str,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.str external_id: Indicates the external ID. Applicable only when this reference is of an external entity.
        :param builtins.int id: A unique identifier assigned to the Application Segment
        :param builtins.str name: The name of the Application Segment
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        Indicates the external ID. Applicable only when this reference is of an external entity.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the Application Segment
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the Application Segment
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesApplicationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesDestIpGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesDestIpv6GroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesDeviceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesDeviceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesSrcIpGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesSrcIpv6GroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesTimeWindowResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallDNSRulesUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringNetworkServiceGroupsServiceResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 id: builtins.int,
                 is_name_l10n_tag: builtins.bool,
                 name: Optional[builtins.str] = None):
        """
        :param builtins.str description: (String)
        :param builtins.int id: The ID of the ip source group to be exported.
        :param builtins.bool is_name_l10n_tag: (Bool) - Default: false
        :param builtins.str name: The name of the ip source group to be exported.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_name_l10n_tag", is_name_l10n_tag)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        (String)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the ip source group to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isNameL10nTag")
    def is_name_l10n_tag(self) -> builtins.bool:
        """
        (Bool) - Default: false
        """
        return pulumi.get(self, "is_name_l10n_tag")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the ip source group to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringNetworkServicesDestTcpPortResult(dict):
    def __init__(__self__, *,
                 end: builtins.int,
                 start: builtins.int):
        """
        :param builtins.int end: (Number)
        :param builtins.int start: (Number)
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> builtins.int:
        """
        (Number)
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> builtins.int:
        """
        (Number)
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetFirewallFilteringNetworkServicesDestUdpPortResult(dict):
    def __init__(__self__, *,
                 end: builtins.int,
                 start: builtins.int):
        """
        :param builtins.int end: (Number)
        :param builtins.int start: (Number)
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> builtins.int:
        """
        (Number)
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> builtins.int:
        """
        (Number)
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetFirewallFilteringNetworkServicesSrcTcpPortResult(dict):
    def __init__(__self__, *,
                 end: builtins.int,
                 start: builtins.int):
        """
        :param builtins.int end: (Number)
        :param builtins.int start: (Number)
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> builtins.int:
        """
        (Number)
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> builtins.int:
        """
        (Number)
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetFirewallFilteringNetworkServicesSrcUdpPortResult(dict):
    def __init__(__self__, *,
                 end: builtins.int,
                 start: builtins.int):
        """
        :param builtins.int end: (Number)
        :param builtins.int start: (Number)
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> builtins.int:
        """
        (Number)
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> builtins.int:
        """
        (Number)
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetFirewallFilteringRuleAppServiceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleAppServiceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleDestIpGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleDeviceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleDeviceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleNwApplicationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleNwServiceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleNwServiceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleSrcIpGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleTimeWindowResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleWorkloadGroupResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 expression: builtins.str,
                 expression_jsons: Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonResult'],
                 id: builtins.int,
                 last_modified_bies: Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupLastModifiedByResult'],
                 last_modified_time: builtins.int,
                 name: builtins.str):
        """
        :param builtins.str description: (Optional) Enter additional notes or information. The description cannot exceed 10,240 characters.
        :param builtins.str expression: The description of the workload group
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.int last_modified_time: (Number)
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "expression_jsons", expression_jsons)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        (Optional) Enter additional notes or information. The description cannot exceed 10,240 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> builtins.str:
        """
        The description of the workload group
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="expressionJsons")
    def expression_jsons(self) -> Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonResult']:
        return pulumi.get(self, "expression_jsons")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupLastModifiedByResult']:
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> builtins.int:
        """
        (Number)
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleWorkloadGroupExpressionJsonResult(dict):
    def __init__(__self__, *,
                 expression_containers: Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerResult']):
        pulumi.set(__self__, "expression_containers", expression_containers)

    @property
    @pulumi.getter(name="expressionContainers")
    def expression_containers(self) -> Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerResult']:
        return pulumi.get(self, "expression_containers")


@pulumi.output_type
class GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerResult(dict):
    def __init__(__self__, *,
                 operator: builtins.str,
                 tag_containers: Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerResult'],
                 tag_type: builtins.str):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tag_containers", tag_containers)
        pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def operator(self) -> builtins.str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tagContainers")
    def tag_containers(self) -> Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerResult']:
        return pulumi.get(self, "tag_containers")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> builtins.str:
        return pulumi.get(self, "tag_type")


@pulumi.output_type
class GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerResult(dict):
    def __init__(__self__, *,
                 operator: builtins.str,
                 tags: Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult']):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def operator(self) -> builtins.str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFirewallFilteringRuleWorkloadGroupLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleZpaAppSegmentResult(dict):
    def __init__(__self__, *,
                 external_id: builtins.str,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.str external_id: Indicates the external ID. Applicable only when this reference is of an external entity.
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        Indicates the external ID. Applicable only when this reference is of an external entity.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlProxiesCertResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 external_id: builtins.str,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.str external_id: The configured name of the entity
        :param builtins.int id: Unique identifier for the third-party proxy services
        :param builtins.str name: Proxy name for the third-party proxy services
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the third-party proxy services
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Proxy name for the third-party proxy services
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlProxiesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 external_id: builtins.str,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.str external_id: The configured name of the entity
        :param builtins.int id: Unique identifier for the third-party proxy services
        :param builtins.str name: Proxy name for the third-party proxy services
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the third-party proxy services
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Proxy name for the third-party proxy services
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlProxyGatewayLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The ID of the forwarding control Proxy Gateway resource.
        :param builtins.str name: The name of the forwarding control Proxy Gateway to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the forwarding control Proxy Gateway resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding control Proxy Gateway to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlProxyGatewayPrimaryProxyResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The ID of the forwarding control Proxy Gateway resource.
        :param builtins.str name: The name of the forwarding control Proxy Gateway to be exported.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the forwarding control Proxy Gateway resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding control Proxy Gateway to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlProxyGatewaySecondaryProxyResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The ID of the forwarding control Proxy Gateway resource.
        :param builtins.str name: The name of the forwarding control Proxy Gateway to be exported.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the forwarding control Proxy Gateway resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding control Proxy Gateway to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleDepartmentResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleDestIpGroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleDestIpv6GroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleDeviceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleDeviceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleEcGroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleGroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleLabelResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleLocationResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleLocationGroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleNwApplicationGroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleNwServiceResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleNwServiceGroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleProxyGatewayResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleSrcIpGroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleSrcIpv6GroupResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleUserResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleZpaAppSegmentResult(dict):
    def __init__(__self__, *,
                 external_id: builtins.str,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.str external_id: (int) Identifier that uniquely identifies an entity
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleZpaApplicationSegmentResult(dict):
    def __init__(__self__, *,
                 ddescription: builtins.str,
                 deleted: builtins.bool,
                 id: builtins.int,
                 name: builtins.str,
                 zpa_id: builtins.int):
        """
        :param builtins.str ddescription: Additional information about the Application Segment
        :param builtins.bool deleted: ID of the ZPA tenant where the Application Segment is configured
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        :param builtins.int zpa_id: ID of the ZPA tenant where the Application Segment is configured
        """
        pulumi.set(__self__, "ddescription", ddescription)
        pulumi.set(__self__, "deleted", deleted)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "zpa_id", zpa_id)

    @property
    @pulumi.getter
    def ddescription(self) -> builtins.str:
        """
        Additional information about the Application Segment
        """
        return pulumi.get(self, "ddescription")

    @property
    @pulumi.getter
    def deleted(self) -> builtins.bool:
        """
        ID of the ZPA tenant where the Application Segment is configured
        """
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="zpaId")
    def zpa_id(self) -> builtins.int:
        """
        ID of the ZPA tenant where the Application Segment is configured
        """
        return pulumi.get(self, "zpa_id")


@pulumi.output_type
class GetForwardingControlRuleZpaApplicationSegmentGroupResult(dict):
    def __init__(__self__, *,
                 deleted: builtins.bool,
                 id: builtins.int,
                 name: builtins.str,
                 zpa_app_segments_count: builtins.int,
                 zpa_id: builtins.int):
        """
        :param builtins.bool deleted: Indicates whether the ZPA Application Segment Group has been deleted
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        :param builtins.int zpa_app_segments_count: The number of ZPA Application Segments in the group
        :param builtins.int zpa_id: Indicates the external ID. Applicable only when this reference is of an external entity.
        """
        pulumi.set(__self__, "deleted", deleted)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "zpa_app_segments_count", zpa_app_segments_count)
        pulumi.set(__self__, "zpa_id", zpa_id)

    @property
    @pulumi.getter
    def deleted(self) -> builtins.bool:
        """
        Indicates whether the ZPA Application Segment Group has been deleted
        """
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="zpaAppSegmentsCount")
    def zpa_app_segments_count(self) -> builtins.int:
        """
        The number of ZPA Application Segments in the group
        """
        return pulumi.get(self, "zpa_app_segments_count")

    @property
    @pulumi.getter(name="zpaId")
    def zpa_id(self) -> builtins.int:
        """
        Indicates the external ID. Applicable only when this reference is of an external entity.
        """
        return pulumi.get(self, "zpa_id")


@pulumi.output_type
class GetForwardingControlRuleZpaGatewayResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlZPAGatewayLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The ID of the forwarding control ZPA Gateway resource.
        :param builtins.str name: The name of the forwarding control ZPA Gateway to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the forwarding control ZPA Gateway resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding control ZPA Gateway to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlZPAGatewayZpaAppSegmentResult(dict):
    def __init__(__self__, *,
                 external_id: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str external_id: (string) An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        :param builtins.str name: The name of the forwarding control ZPA Gateway to be exported.
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        (string) An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding control ZPA Gateway to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlZPAGatewayZpaServerGroupResult(dict):
    def __init__(__self__, *,
                 external_id: builtins.str,
                 name: builtins.str):
        """
        :param builtins.str external_id: (string) An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        :param builtins.str name: The name of the forwarding control ZPA Gateway to be exported.
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        (string) An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding control ZPA Gateway to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleDestIpGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleDestIpv6GroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleDeviceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleDeviceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleNwServiceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleNwServiceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleSrcIpGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleSrcIpv6GroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleThreatCategoryResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleTimeWindowResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetIPSFirewallRuleZpaAppSegmentResult(dict):
    def __init__(__self__, *,
                 external_id: builtins.str,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.str external_id: Indicates the external ID. Applicable only when this reference is of an external entity.
        :param builtins.int id: Unique identifier for the Firewall Filtering policy rule
        :param builtins.str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        Indicates the external ID. Applicable only when this reference is of an external entity.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetLocationGroupsDynamicLocationGroupCriteriaResult(dict):
    def __init__(__self__, *,
                 enable_bandwidth_control: builtins.bool,
                 enable_caution: builtins.bool,
                 enable_xff_forwarding: builtins.bool,
                 enforce_aup: builtins.bool,
                 enforce_authentication: builtins.bool,
                 enforce_firewall_control: builtins.bool,
                 managed_bies: Sequence['outputs.GetLocationGroupsDynamicLocationGroupCriteriaManagedByResult'],
                 cities: Optional[Sequence['outputs.GetLocationGroupsDynamicLocationGroupCriteriaCityResult']] = None,
                 countries: Optional[Sequence[builtins.str]] = None,
                 names: Optional[Sequence['outputs.GetLocationGroupsDynamicLocationGroupCriteriaNameResult']] = None,
                 profiles: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.bool enable_bandwidth_control: (Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.
        :param builtins.bool enable_caution: (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
        :param builtins.bool enable_xff_forwarding: (Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        :param builtins.bool enforce_aup: (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
        :param builtins.bool enforce_authentication: (Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        :param builtins.bool enforce_firewall_control: (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
        :param Sequence['GetLocationGroupsDynamicLocationGroupCriteriaManagedByArgs'] managed_bies: (Block List)
        :param Sequence['GetLocationGroupsDynamicLocationGroupCriteriaCityArgs'] cities: (Block List)
        :param Sequence[builtins.str] countries: (List of String) One or more countries from a predefined set
        :param Sequence['GetLocationGroupsDynamicLocationGroupCriteriaNameArgs'] names: Location group name
        :param Sequence[builtins.str] profiles: (List of String) One or more location profiles from a predefined set
        """
        pulumi.set(__self__, "enable_bandwidth_control", enable_bandwidth_control)
        pulumi.set(__self__, "enable_caution", enable_caution)
        pulumi.set(__self__, "enable_xff_forwarding", enable_xff_forwarding)
        pulumi.set(__self__, "enforce_aup", enforce_aup)
        pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        pulumi.set(__self__, "enforce_firewall_control", enforce_firewall_control)
        pulumi.set(__self__, "managed_bies", managed_bies)
        if cities is not None:
            pulumi.set(__self__, "cities", cities)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if names is not None:
            pulumi.set(__self__, "names", names)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)

    @property
    @pulumi.getter(name="enableBandwidthControl")
    def enable_bandwidth_control(self) -> builtins.bool:
        """
        (Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.
        """
        return pulumi.get(self, "enable_bandwidth_control")

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> builtins.bool:
        """
        (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
        """
        return pulumi.get(self, "enable_caution")

    @property
    @pulumi.getter(name="enableXffForwarding")
    def enable_xff_forwarding(self) -> builtins.bool:
        """
        (Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        """
        return pulumi.get(self, "enable_xff_forwarding")

    @property
    @pulumi.getter(name="enforceAup")
    def enforce_aup(self) -> builtins.bool:
        """
        (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
        """
        return pulumi.get(self, "enforce_aup")

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> builtins.bool:
        """
        (Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        """
        return pulumi.get(self, "enforce_authentication")

    @property
    @pulumi.getter(name="enforceFirewallControl")
    def enforce_firewall_control(self) -> builtins.bool:
        """
        (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
        """
        return pulumi.get(self, "enforce_firewall_control")

    @property
    @pulumi.getter(name="managedBies")
    def managed_bies(self) -> Sequence['outputs.GetLocationGroupsDynamicLocationGroupCriteriaManagedByResult']:
        """
        (Block List)
        """
        return pulumi.get(self, "managed_bies")

    @property
    @pulumi.getter
    def cities(self) -> Optional[Sequence['outputs.GetLocationGroupsDynamicLocationGroupCriteriaCityResult']]:
        """
        (Block List)
        """
        return pulumi.get(self, "cities")

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[builtins.str]]:
        """
        (List of String) One or more countries from a predefined set
        """
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence['outputs.GetLocationGroupsDynamicLocationGroupCriteriaNameResult']]:
        """
        Location group name
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence[builtins.str]]:
        """
        (List of String) One or more location profiles from a predefined set
        """
        return pulumi.get(self, "profiles")


@pulumi.output_type
class GetLocationGroupsDynamicLocationGroupCriteriaCityResult(dict):
    def __init__(__self__, *,
                 match_string: Optional[builtins.str] = None,
                 match_type: Optional[builtins.str] = None):
        """
        :param builtins.str match_string: (String) String value to be matched or partially matched
        :param builtins.str match_type: (String) Operator that performs match action
        """
        if match_string is not None:
            pulumi.set(__self__, "match_string", match_string)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[builtins.str]:
        """
        (String) String value to be matched or partially matched
        """
        return pulumi.get(self, "match_string")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[builtins.str]:
        """
        (String) Operator that performs match action
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class GetLocationGroupsDynamicLocationGroupCriteriaManagedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the location group
        :param builtins.str name: Location group name
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the location group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Location group name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetLocationGroupsDynamicLocationGroupCriteriaNameResult(dict):
    def __init__(__self__, *,
                 match_string: Optional[builtins.str] = None,
                 match_type: Optional[builtins.str] = None):
        """
        :param builtins.str match_string: (String) String value to be matched or partially matched
        :param builtins.str match_type: (String) Operator that performs match action
        """
        if match_string is not None:
            pulumi.set(__self__, "match_string", match_string)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[builtins.str]:
        """
        (String) String value to be matched or partially matched
        """
        return pulumi.get(self, "match_string")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[builtins.str]:
        """
        (String) Operator that performs match action
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class GetLocationGroupsLastModUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the location group
        :param builtins.str name: Location group name
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the location group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Location group name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetLocationGroupsLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifier for the location group
        :param builtins.str name: Location group name
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the location group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Location group name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetLocationManagementExtranetResult(dict):
    def __init__(__self__, *,
                 id: builtins.int):
        """
        :param builtins.int id: The ID of the location to be exported.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the location to be exported.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLocationManagementExtranetDnResult(dict):
    def __init__(__self__, *,
                 id: builtins.int):
        """
        :param builtins.int id: The ID of the location to be exported.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the location to be exported.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLocationManagementExtranetIpPoolResult(dict):
    def __init__(__self__, *,
                 id: builtins.int):
        """
        :param builtins.int id: The ID of the location to be exported.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the location to be exported.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetLocationManagementVpnCredentialResult(dict):
    def __init__(__self__, *,
                 comments: builtins.str,
                 fqdn: builtins.str,
                 id: builtins.int,
                 locations: Sequence['outputs.GetLocationManagementVpnCredentialLocationResult'],
                 managed_bies: Sequence['outputs.GetLocationManagementVpnCredentialManagedByResult'],
                 pre_shared_key: builtins.str,
                 type: builtins.str):
        """
        :param builtins.str comments: (String) Additional information about this VPN credential.
               Additional information about this VPN credential.
        :param builtins.str fqdn: (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
        :param builtins.int id: The ID of the location to be exported.
        :param Sequence['GetLocationManagementVpnCredentialLocationArgs'] locations: (List of Object)
        :param Sequence['GetLocationManagementVpnCredentialManagedByArgs'] managed_bies: (List of Object)
        :param builtins.str pre_shared_key: (String) Pre-shared key. This is a required field for `UFQDN` and IP auth type.
        :param builtins.str type: (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "managed_bies", managed_bies)
        pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comments(self) -> builtins.str:
        """
        (String) Additional information about this VPN credential.
        Additional information about this VPN credential.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def fqdn(self) -> builtins.str:
        """
        (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the location to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetLocationManagementVpnCredentialLocationResult']:
        """
        (List of Object)
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="managedBies")
    def managed_bies(self) -> Sequence['outputs.GetLocationManagementVpnCredentialManagedByResult']:
        """
        (List of Object)
        """
        return pulumi.get(self, "managed_bies")

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> builtins.str:
        """
        (String) Pre-shared key. This is a required field for `UFQDN` and IP auth type.
        """
        return pulumi.get(self, "pre_shared_key")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetLocationManagementVpnCredentialLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: The ID of the location to be exported.
        :param builtins.str name: The name of the location to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the location to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the location to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetLocationManagementVpnCredentialManagedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: The ID of the location to be exported.
        :param builtins.str name: The name of the location to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the location to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the location to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesDestIpGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesDestIpv6GroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesDeviceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesDeviceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesNwServiceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesNwServiceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesSrcIpGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesSrcIpv6GroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesTimeWindowResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetNatControlRulesUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: A unique identifier assigned to the forwarding rule.
        :param builtins.str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRiskProfilesCustomTagResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the risk profile.
        :param builtins.str name: Cloud application risk profile name.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the risk profile.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Cloud application risk profile name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRiskProfilesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the risk profile.
        :param builtins.str name: Cloud application risk profile name.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the risk profile.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Cloud application risk profile name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRuleLabelsCreatedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The unique identifer for the rule label.
        :param builtins.str name: The name of the rule label to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique identifer for the rule label.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the rule label to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRuleLabelsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The unique identifer for the rule label.
        :param builtins.str name: The name of the rule label to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique identifer for the rule label.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the rule label to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesActionResult(dict):
    def __init__(__self__, *,
                 do_not_decrypt_sub_actions: Sequence['outputs.GetSSLInspectionRulesActionDoNotDecryptSubActionResult'],
                 override_default_certificate: builtins.bool,
                 show_eun: builtins.bool,
                 show_eunatp: builtins.bool,
                 ssl_interception_certs: Sequence['outputs.GetSSLInspectionRulesActionSslInterceptionCertResult'],
                 type: builtins.str,
                 decrypt_sub_actions: Optional[Sequence['outputs.GetSSLInspectionRulesActionDecryptSubActionResult']] = None):
        """
        :param Sequence['GetSSLInspectionRulesActionDoNotDecryptSubActionArgs'] do_not_decrypt_sub_actions: Action taken when bypassing SSL intercept
        :param builtins.bool override_default_certificate: Whether to override the default SSL interception certificate.
        :param builtins.bool show_eun: Whether to show End User Notification (EUN).
        :param builtins.bool show_eunatp: Whether to display the EUN ATP page.
        :param Sequence['GetSSLInspectionRulesActionSslInterceptionCertArgs'] ssl_interception_certs: Action taken when enabling SSL intercept
        :param builtins.str type: The action type for this rule. Possible values: `BLOCK`, `DECRYPT`, or `DO_NOT_DECRYPT`.
        """
        pulumi.set(__self__, "do_not_decrypt_sub_actions", do_not_decrypt_sub_actions)
        pulumi.set(__self__, "override_default_certificate", override_default_certificate)
        pulumi.set(__self__, "show_eun", show_eun)
        pulumi.set(__self__, "show_eunatp", show_eunatp)
        pulumi.set(__self__, "ssl_interception_certs", ssl_interception_certs)
        pulumi.set(__self__, "type", type)
        if decrypt_sub_actions is not None:
            pulumi.set(__self__, "decrypt_sub_actions", decrypt_sub_actions)

    @property
    @pulumi.getter(name="doNotDecryptSubActions")
    def do_not_decrypt_sub_actions(self) -> Sequence['outputs.GetSSLInspectionRulesActionDoNotDecryptSubActionResult']:
        """
        Action taken when bypassing SSL intercept
        """
        return pulumi.get(self, "do_not_decrypt_sub_actions")

    @property
    @pulumi.getter(name="overrideDefaultCertificate")
    def override_default_certificate(self) -> builtins.bool:
        """
        Whether to override the default SSL interception certificate.
        """
        return pulumi.get(self, "override_default_certificate")

    @property
    @pulumi.getter(name="showEun")
    def show_eun(self) -> builtins.bool:
        """
        Whether to show End User Notification (EUN).
        """
        return pulumi.get(self, "show_eun")

    @property
    @pulumi.getter(name="showEunatp")
    def show_eunatp(self) -> builtins.bool:
        """
        Whether to display the EUN ATP page.
        """
        return pulumi.get(self, "show_eunatp")

    @property
    @pulumi.getter(name="sslInterceptionCerts")
    def ssl_interception_certs(self) -> Sequence['outputs.GetSSLInspectionRulesActionSslInterceptionCertResult']:
        """
        Action taken when enabling SSL intercept
        """
        return pulumi.get(self, "ssl_interception_certs")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        The action type for this rule. Possible values: `BLOCK`, `DECRYPT`, or `DO_NOT_DECRYPT`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="decryptSubActions")
    def decrypt_sub_actions(self) -> Optional[Sequence['outputs.GetSSLInspectionRulesActionDecryptSubActionResult']]:
        return pulumi.get(self, "decrypt_sub_actions")


@pulumi.output_type
class GetSSLInspectionRulesActionDecryptSubActionResult(dict):
    def __init__(__self__, *,
                 block_ssl_traffic_with_no_sni_enabled: builtins.bool,
                 block_undecrypt: builtins.bool,
                 http2_enabled: builtins.bool,
                 min_client_tls_version: builtins.str,
                 min_server_tls_version: builtins.str,
                 ocsp_check: builtins.bool,
                 server_certificates: builtins.str):
        """
        :param builtins.bool block_ssl_traffic_with_no_sni_enabled: Whether to block SSL traffic when SNI is not present.
        :param builtins.bool ocsp_check: Whether to enable OCSP check.
        :param builtins.str server_certificates: Action to take on server certificates. Valid values might include `ALLOW`, `BLOCK`, or `PASS_THRU`.
        """
        pulumi.set(__self__, "block_ssl_traffic_with_no_sni_enabled", block_ssl_traffic_with_no_sni_enabled)
        pulumi.set(__self__, "block_undecrypt", block_undecrypt)
        pulumi.set(__self__, "http2_enabled", http2_enabled)
        pulumi.set(__self__, "min_client_tls_version", min_client_tls_version)
        pulumi.set(__self__, "min_server_tls_version", min_server_tls_version)
        pulumi.set(__self__, "ocsp_check", ocsp_check)
        pulumi.set(__self__, "server_certificates", server_certificates)

    @property
    @pulumi.getter(name="blockSslTrafficWithNoSniEnabled")
    def block_ssl_traffic_with_no_sni_enabled(self) -> builtins.bool:
        """
        Whether to block SSL traffic when SNI is not present.
        """
        return pulumi.get(self, "block_ssl_traffic_with_no_sni_enabled")

    @property
    @pulumi.getter(name="blockUndecrypt")
    def block_undecrypt(self) -> builtins.bool:
        return pulumi.get(self, "block_undecrypt")

    @property
    @pulumi.getter(name="http2Enabled")
    def http2_enabled(self) -> builtins.bool:
        return pulumi.get(self, "http2_enabled")

    @property
    @pulumi.getter(name="minClientTlsVersion")
    def min_client_tls_version(self) -> builtins.str:
        return pulumi.get(self, "min_client_tls_version")

    @property
    @pulumi.getter(name="minServerTlsVersion")
    def min_server_tls_version(self) -> builtins.str:
        return pulumi.get(self, "min_server_tls_version")

    @property
    @pulumi.getter(name="ocspCheck")
    def ocsp_check(self) -> builtins.bool:
        """
        Whether to enable OCSP check.
        """
        return pulumi.get(self, "ocsp_check")

    @property
    @pulumi.getter(name="serverCertificates")
    def server_certificates(self) -> builtins.str:
        """
        Action to take on server certificates. Valid values might include `ALLOW`, `BLOCK`, or `PASS_THRU`.
        """
        return pulumi.get(self, "server_certificates")


@pulumi.output_type
class GetSSLInspectionRulesActionDoNotDecryptSubActionResult(dict):
    def __init__(__self__, *,
                 block_ssl_traffic_with_no_sni_enabled: builtins.bool,
                 bypass_other_policies: builtins.bool,
                 min_tls_version: builtins.str,
                 ocsp_check: builtins.bool,
                 server_certificates: builtins.str):
        """
        :param builtins.bool block_ssl_traffic_with_no_sni_enabled: Whether to block SSL traffic when SNI is not present.
        :param builtins.bool bypass_other_policies: Whether to bypass other policies when action is set to `DO_NOT_DECRYPT`.
        :param builtins.str min_tls_version: The minimum TLS version allowed when action is `DO_NOT_DECRYPT`.
        :param builtins.bool ocsp_check: Whether to enable OCSP check.
        :param builtins.str server_certificates: Action to take on server certificates. Valid values might include `ALLOW`, `BLOCK`, or `PASS_THRU`.
        """
        pulumi.set(__self__, "block_ssl_traffic_with_no_sni_enabled", block_ssl_traffic_with_no_sni_enabled)
        pulumi.set(__self__, "bypass_other_policies", bypass_other_policies)
        pulumi.set(__self__, "min_tls_version", min_tls_version)
        pulumi.set(__self__, "ocsp_check", ocsp_check)
        pulumi.set(__self__, "server_certificates", server_certificates)

    @property
    @pulumi.getter(name="blockSslTrafficWithNoSniEnabled")
    def block_ssl_traffic_with_no_sni_enabled(self) -> builtins.bool:
        """
        Whether to block SSL traffic when SNI is not present.
        """
        return pulumi.get(self, "block_ssl_traffic_with_no_sni_enabled")

    @property
    @pulumi.getter(name="bypassOtherPolicies")
    def bypass_other_policies(self) -> builtins.bool:
        """
        Whether to bypass other policies when action is set to `DO_NOT_DECRYPT`.
        """
        return pulumi.get(self, "bypass_other_policies")

    @property
    @pulumi.getter(name="minTlsVersion")
    def min_tls_version(self) -> builtins.str:
        """
        The minimum TLS version allowed when action is `DO_NOT_DECRYPT`.
        """
        return pulumi.get(self, "min_tls_version")

    @property
    @pulumi.getter(name="ocspCheck")
    def ocsp_check(self) -> builtins.bool:
        """
        Whether to enable OCSP check.
        """
        return pulumi.get(self, "ocsp_check")

    @property
    @pulumi.getter(name="serverCertificates")
    def server_certificates(self) -> builtins.str:
        """
        Action to take on server certificates. Valid values might include `ALLOW`, `BLOCK`, or `PASS_THRU`.
        """
        return pulumi.get(self, "server_certificates")


@pulumi.output_type
class GetSSLInspectionRulesActionSslInterceptionCertResult(dict):
    def __init__(__self__, *,
                 id: builtins.int):
        """
        :param builtins.int id: Unique identifier for the SSL Inspection
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetSSLInspectionRulesDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the time window.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the time window.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesDestIpGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the time window.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the time window.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesDeviceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the time window.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the time window.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesDeviceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the time window.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the time window.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the time window.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the time window.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the time window.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the time window.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the time window.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the time window.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the time window.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the time window.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the time window.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the time window.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesProxyGatewayResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesSourceIpGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the time window.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the time window.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesTimeWindowResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the time window.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the time window.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the time window.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the time window.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesWorkloadGroupResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 expression: builtins.str,
                 expression_jsons: Sequence['outputs.GetSSLInspectionRulesWorkloadGroupExpressionJsonResult'],
                 id: builtins.int,
                 last_modified_bies: Sequence['outputs.GetSSLInspectionRulesWorkloadGroupLastModifiedByResult'],
                 last_modified_time: builtins.int,
                 name: builtins.str):
        """
        :param builtins.str description: The description of the workload group
        :param builtins.str expression: The expression used within the workload group.
        :param Sequence['GetSSLInspectionRulesWorkloadGroupExpressionJsonArgs'] expression_jsons: A nested block describing the JSON expression for the workload group.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param Sequence['GetSSLInspectionRulesWorkloadGroupLastModifiedByArgs'] last_modified_bies: A nested block with details about who last modified the workload group.
        :param builtins.int last_modified_time: Timestamp when the workload group was last modified.
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "expression_jsons", expression_jsons)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the workload group
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> builtins.str:
        """
        The expression used within the workload group.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="expressionJsons")
    def expression_jsons(self) -> Sequence['outputs.GetSSLInspectionRulesWorkloadGroupExpressionJsonResult']:
        """
        A nested block describing the JSON expression for the workload group.
        """
        return pulumi.get(self, "expression_jsons")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetSSLInspectionRulesWorkloadGroupLastModifiedByResult']:
        """
        A nested block with details about who last modified the workload group.
        """
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> builtins.int:
        """
        Timestamp when the workload group was last modified.
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesWorkloadGroupExpressionJsonResult(dict):
    def __init__(__self__, *,
                 expression_containers: Sequence['outputs.GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerResult']):
        """
        :param Sequence['GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerArgs'] expression_containers: Contains one or more tag types (and associated tags) combined using logical operators within a workload group
        """
        pulumi.set(__self__, "expression_containers", expression_containers)

    @property
    @pulumi.getter(name="expressionContainers")
    def expression_containers(self) -> Sequence['outputs.GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerResult']:
        """
        Contains one or more tag types (and associated tags) combined using logical operators within a workload group
        """
        return pulumi.get(self, "expression_containers")


@pulumi.output_type
class GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerResult(dict):
    def __init__(__self__, *,
                 operator: builtins.str,
                 tag_containers: Sequence['outputs.GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult'],
                 tag_type: builtins.str):
        """
        :param builtins.str operator: The operator (either AND or OR) used to create logical relationships among tag types
        :param Sequence['GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerArgs'] tag_containers: Contains one or more tags and the logical operator used to combine the tags within a tag type
        :param builtins.str tag_type: The tag type selected from a predefined list
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tag_containers", tag_containers)
        pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def operator(self) -> builtins.str:
        """
        The operator (either AND or OR) used to create logical relationships among tag types
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tagContainers")
    def tag_containers(self) -> Sequence['outputs.GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult']:
        """
        Contains one or more tags and the logical operator used to combine the tags within a tag type
        """
        return pulumi.get(self, "tag_containers")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> builtins.str:
        """
        The tag type selected from a predefined list
        """
        return pulumi.get(self, "tag_type")


@pulumi.output_type
class GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult(dict):
    def __init__(__self__, *,
                 operator: builtins.str,
                 tags: Sequence['outputs.GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult']):
        """
        :param builtins.str operator: The operator (either AND or OR) used to create logical relationships among tag types
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def operator(self) -> builtins.str:
        """
        The operator (either AND or OR) used to create logical relationships among tag types
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetSSLInspectionRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetSSLInspectionRulesWorkloadGroupLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the time window.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the time window.
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSSLInspectionRulesZpaAppSegmentResult(dict):
    def __init__(__self__, *,
                 external_id: builtins.str,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.str external_id: Indicates the external ID. Applicable only when this reference is of an external entity.
        :param builtins.int id: Unique identifier for the SSL Inspection
        :param builtins.str name: Name of the SSL Inspection
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        Indicates the external ID. Applicable only when this reference is of an external entity.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the SSL Inspection
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the SSL Inspection
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSandboxReportClassificationResult(dict):
    def __init__(__self__, *,
                 category: builtins.str,
                 detected_malware: builtins.str,
                 score: builtins.int,
                 type: builtins.str):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "detected_malware", detected_malware)
        pulumi.set(__self__, "score", score)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="detectedMalware")
    def detected_malware(self) -> builtins.str:
        return pulumi.get(self, "detected_malware")

    @property
    @pulumi.getter
    def score(self) -> builtins.int:
        return pulumi.get(self, "score")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSandboxReportExploitResult(dict):
    def __init__(__self__, *,
                 risk: builtins.str,
                 signature: builtins.str,
                 signature_sources: Sequence[builtins.str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> builtins.str:
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter
    def signature(self) -> builtins.str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "signature_sources")


@pulumi.output_type
class GetSandboxReportFilePropertyResult(dict):
    def __init__(__self__, *,
                 digital_cerificate: builtins.str,
                 file_size: builtins.int,
                 file_type: builtins.str,
                 issuer: builtins.str,
                 md5: builtins.str,
                 root_ca: builtins.str,
                 sha1: builtins.str,
                 sha256: builtins.str,
                 ssdeep: builtins.str):
        pulumi.set(__self__, "digital_cerificate", digital_cerificate)
        pulumi.set(__self__, "file_size", file_size)
        pulumi.set(__self__, "file_type", file_type)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "md5", md5)
        pulumi.set(__self__, "root_ca", root_ca)
        pulumi.set(__self__, "sha1", sha1)
        pulumi.set(__self__, "sha256", sha256)
        pulumi.set(__self__, "ssdeep", ssdeep)

    @property
    @pulumi.getter(name="digitalCerificate")
    def digital_cerificate(self) -> builtins.str:
        return pulumi.get(self, "digital_cerificate")

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> builtins.int:
        return pulumi.get(self, "file_size")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> builtins.str:
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter
    def issuer(self) -> builtins.str:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter
    def md5(self) -> builtins.str:
        return pulumi.get(self, "md5")

    @property
    @pulumi.getter(name="rootCa")
    def root_ca(self) -> builtins.str:
        return pulumi.get(self, "root_ca")

    @property
    @pulumi.getter
    def sha1(self) -> builtins.str:
        return pulumi.get(self, "sha1")

    @property
    @pulumi.getter
    def sha256(self) -> builtins.str:
        return pulumi.get(self, "sha256")

    @property
    @pulumi.getter
    def ssdeep(self) -> builtins.str:
        return pulumi.get(self, "ssdeep")


@pulumi.output_type
class GetSandboxReportNetworkingResult(dict):
    def __init__(__self__, *,
                 risk: builtins.str,
                 signature: builtins.str,
                 signature_sources: Sequence[builtins.str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> builtins.str:
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter
    def signature(self) -> builtins.str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "signature_sources")


@pulumi.output_type
class GetSandboxReportOriginResult(dict):
    def __init__(__self__, *,
                 country: builtins.str,
                 language: builtins.str,
                 risk: builtins.str):
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "risk", risk)

    @property
    @pulumi.getter
    def country(self) -> builtins.str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def language(self) -> builtins.str:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def risk(self) -> builtins.str:
        return pulumi.get(self, "risk")


@pulumi.output_type
class GetSandboxReportPersistenceResult(dict):
    def __init__(__self__, *,
                 risk: builtins.str,
                 signature: builtins.str,
                 signature_sources: Sequence[builtins.str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> builtins.str:
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter
    def signature(self) -> builtins.str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "signature_sources")


@pulumi.output_type
class GetSandboxReportSecurityBypassResult(dict):
    def __init__(__self__, *,
                 risk: builtins.str,
                 signature: builtins.str,
                 signature_sources: Sequence[builtins.str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> builtins.str:
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter
    def signature(self) -> builtins.str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "signature_sources")


@pulumi.output_type
class GetSandboxReportSpywareResult(dict):
    def __init__(__self__, *,
                 risk: builtins.str,
                 signature: builtins.str,
                 signature_sources: Sequence[builtins.str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> builtins.str:
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter
    def signature(self) -> builtins.str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "signature_sources")


@pulumi.output_type
class GetSandboxReportStealthResult(dict):
    def __init__(__self__, *,
                 risk: builtins.str,
                 signature: builtins.str,
                 signature_sources: Sequence[builtins.str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> builtins.str:
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter
    def signature(self) -> builtins.str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "signature_sources")


@pulumi.output_type
class GetSandboxReportSummaryResult(dict):
    def __init__(__self__, *,
                 category: builtins.str,
                 duration: builtins.int,
                 file_type: builtins.str,
                 start_time: builtins.int,
                 status: builtins.str):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "file_type", file_type)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def category(self) -> builtins.str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def duration(self) -> builtins.int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> builtins.str:
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> builtins.int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSandboxReportSystemSummaryResult(dict):
    def __init__(__self__, *,
                 risk: builtins.str,
                 signature: builtins.str,
                 signature_sources: Sequence[builtins.str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> builtins.str:
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter
    def signature(self) -> builtins.str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "signature_sources")


@pulumi.output_type
class GetSandboxRulesDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: Unique identifier for the Sandbox rule
        :param builtins.str name: Name of the Sandbox rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Sandbox rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Sandbox rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSandboxRulesGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: Unique identifier for the Sandbox rule
        :param builtins.str name: Name of the Sandbox rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Sandbox rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Sandbox rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSandboxRulesLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: Unique identifier for the Sandbox rule
        :param builtins.str name: Name of the Sandbox rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Sandbox rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Sandbox rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSandboxRulesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: Unique identifier for the Sandbox rule
        :param builtins.str name: Name of the Sandbox rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Sandbox rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Sandbox rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSandboxRulesLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: Unique identifier for the Sandbox rule
        :param builtins.str name: Name of the Sandbox rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Sandbox rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Sandbox rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSandboxRulesLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: Unique identifier for the Sandbox rule
        :param builtins.str name: Name of the Sandbox rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Sandbox rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Sandbox rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSandboxRulesUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: Additional information about the entity
        :param builtins.int id: Unique identifier for the Sandbox rule
        :param builtins.str name: Name of the Sandbox rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        Additional information about the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Sandbox rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Sandbox rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSandboxRulesZpaAppSegmentResult(dict):
    def __init__(__self__, *,
                 external_id: builtins.str,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.str external_id: Indicates the external ID. Applicable only when this reference is of an external entity.
        :param builtins.int id: Unique identifier for the Sandbox rule
        :param builtins.str name: Name of the Sandbox rule
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        Indicates the external ID. Applicable only when this reference is of an external entity.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier for the Sandbox rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Sandbox rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingGREInternalIPRangeListResult(dict):
    def __init__(__self__, *,
                 end_ip_address: builtins.str,
                 start_ip_address: builtins.str):
        """
        :param builtins.str end_ip_address: (String) Starting IP address in the range
        :param builtins.str start_ip_address: (String) Ending IP address in the range
        """
        pulumi.set(__self__, "end_ip_address", end_ip_address)
        pulumi.set(__self__, "start_ip_address", start_ip_address)

    @property
    @pulumi.getter(name="endIpAddress")
    def end_ip_address(self) -> builtins.str:
        """
        (String) Starting IP address in the range
        """
        return pulumi.get(self, "end_ip_address")

    @property
    @pulumi.getter(name="startIpAddress")
    def start_ip_address(self) -> builtins.str:
        """
        (String) Ending IP address in the range
        """
        return pulumi.get(self, "start_ip_address")


@pulumi.output_type
class GetTrafficForwardingGRETunnelLastModifiedByResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier of the static IP address that is associated to a GRE tunnel
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier of the static IP address that is associated to a GRE tunnel
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingGRETunnelManagedByResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: Unique identifier of the static IP address that is associated to a GRE tunnel
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier of the static IP address that is associated to a GRE tunnel
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingGRETunnelPrimaryDestVipResult(dict):
    def __init__(__self__, *,
                 city: builtins.str,
                 country_code: builtins.str,
                 datacenter: builtins.str,
                 id: builtins.int,
                 latitude: builtins.int,
                 longitude: builtins.int,
                 private_service_edge: builtins.bool,
                 region: builtins.str,
                 virtual_ip: builtins.str):
        """
        :param builtins.str country_code: (String) When within_country is enabled, you must set this to the country code.
        :param builtins.int id: Unique identifier of the static IP address that is associated to a GRE tunnel
        :param builtins.str virtual_ip: (String) GRE cluster virtual IP address (VIP)
        """
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "private_service_edge", private_service_edge)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def city(self) -> builtins.str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> builtins.str:
        """
        (String) When within_country is enabled, you must set this to the country code.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def datacenter(self) -> builtins.str:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier of the static IP address that is associated to a GRE tunnel
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latitude(self) -> builtins.int:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> builtins.int:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> builtins.bool:
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> builtins.str:
        """
        (String) GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class GetTrafficForwardingGRETunnelSecondaryDestVipResult(dict):
    def __init__(__self__, *,
                 city: builtins.str,
                 country_code: builtins.str,
                 datacenter: builtins.str,
                 id: builtins.int,
                 latitude: builtins.int,
                 longitude: builtins.int,
                 private_service_edge: builtins.bool,
                 region: builtins.str,
                 virtual_ip: builtins.str):
        """
        :param builtins.str country_code: (String) When within_country is enabled, you must set this to the country code.
        :param builtins.int id: Unique identifier of the static IP address that is associated to a GRE tunnel
        :param builtins.str virtual_ip: (String) GRE cluster virtual IP address (VIP)
        """
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "private_service_edge", private_service_edge)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def city(self) -> builtins.str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> builtins.str:
        """
        (String) When within_country is enabled, you must set this to the country code.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def datacenter(self) -> builtins.str:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifier of the static IP address that is associated to a GRE tunnel
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latitude(self) -> builtins.int:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> builtins.int:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> builtins.bool:
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> builtins.str:
        """
        (String) GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class GetTrafficForwardingStaticIPCityResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The unique identifier for the static IP address
        :param builtins.str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique identifier for the static IP address
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingStaticIPLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: The unique identifier for the static IP address
        :param builtins.str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique identifier for the static IP address
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingStaticIPManagedByResult(dict):
    def __init__(__self__, *,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.int id: The unique identifier for the static IP address
        :param builtins.str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique identifier for the static IP address
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingVIPRecommendedListListResult(dict):
    def __init__(__self__, *,
                 city: builtins.str,
                 latitude: builtins.float,
                 longitude: builtins.float,
                 region: builtins.str,
                 datacenter: Optional[builtins.str] = None,
                 id: Optional[builtins.int] = None,
                 private_service_edge: Optional[builtins.bool] = None,
                 virtual_ip: Optional[builtins.str] = None):
        """
        :param builtins.str city: (String) Data center city information
        :param builtins.float latitude: (Number) The latitude coordinate of the GRE tunnel source.
        :param builtins.float longitude: (Number) The longitude coordinate of the GRE tunnel source.
        :param builtins.str region: (String) Data center region information.
        :param builtins.str datacenter: (String) Data center information
        :param builtins.int id: Unique identifer of the GRE virtual IP address (VIP)
        :param builtins.bool private_service_edge: (Boolean) Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        :param builtins.str virtual_ip: (String) GRE cluster virtual IP address (VIP)
        """
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "region", region)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_service_edge is not None:
            pulumi.set(__self__, "private_service_edge", private_service_edge)
        if virtual_ip is not None:
            pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def city(self) -> builtins.str:
        """
        (String) Data center city information
        """
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def latitude(self) -> builtins.float:
        """
        (Number) The latitude coordinate of the GRE tunnel source.
        """
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> builtins.float:
        """
        (Number) The longitude coordinate of the GRE tunnel source.
        """
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter
    def region(self) -> builtins.str:
        """
        (String) Data center region information.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[builtins.str]:
        """
        (String) Data center information
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> Optional[builtins.bool]:
        """
        (Boolean) Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        """
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> Optional[builtins.str]:
        """
        (String) GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class GetTrafficForwardingVPNCredentialsLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifer of the GRE virtual IP address (VIP)
        :param builtins.str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingVPNCredentialsManagedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: Unique identifer of the GRE virtual IP address (VIP)
        :param builtins.str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLCategoriesScopeResult(dict):
    def __init__(__self__, *,
                 scope_entities: Sequence['outputs.GetURLCategoriesScopeScopeEntityResult'],
                 scope_group_member_entities: Sequence['outputs.GetURLCategoriesScopeScopeGroupMemberEntityResult'],
                 type: builtins.str):
        """
        :param Sequence['GetURLCategoriesScopeScopeEntityArgs'] scope_entities: (List of Object)
        :param Sequence['GetURLCategoriesScopeScopeGroupMemberEntityArgs'] scope_group_member_entities: (List of Object) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        :param builtins.str type: (String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        pulumi.set(__self__, "scope_entities", scope_entities)
        pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Sequence['outputs.GetURLCategoriesScopeScopeEntityResult']:
        """
        (List of Object)
        """
        return pulumi.get(self, "scope_entities")

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Sequence['outputs.GetURLCategoriesScopeScopeGroupMemberEntityResult']:
        """
        (List of Object) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetURLCategoriesScopeScopeEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL category
        :param builtins.str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL category
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLCategoriesScopeScopeGroupMemberEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL category
        :param builtins.str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL category
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLCategoriesUrlKeywordCountResult(dict):
    def __init__(__self__, *,
                 retain_parent_keyword_count: builtins.int,
                 retain_parent_url_count: builtins.int,
                 total_keyword_count: builtins.int,
                 total_url_count: builtins.int):
        """
        :param builtins.int retain_parent_keyword_count: (Number) Count of total keywords with retain parent category.
        :param builtins.int retain_parent_url_count: (Number) Count of URLs with retain parent category.
        :param builtins.int total_keyword_count: (Number) Total keyword count for the category.
        :param builtins.int total_url_count: (Number) Custom URL count for the category.
        """
        pulumi.set(__self__, "retain_parent_keyword_count", retain_parent_keyword_count)
        pulumi.set(__self__, "retain_parent_url_count", retain_parent_url_count)
        pulumi.set(__self__, "total_keyword_count", total_keyword_count)
        pulumi.set(__self__, "total_url_count", total_url_count)

    @property
    @pulumi.getter(name="retainParentKeywordCount")
    def retain_parent_keyword_count(self) -> builtins.int:
        """
        (Number) Count of total keywords with retain parent category.
        """
        return pulumi.get(self, "retain_parent_keyword_count")

    @property
    @pulumi.getter(name="retainParentUrlCount")
    def retain_parent_url_count(self) -> builtins.int:
        """
        (Number) Count of URLs with retain parent category.
        """
        return pulumi.get(self, "retain_parent_url_count")

    @property
    @pulumi.getter(name="totalKeywordCount")
    def total_keyword_count(self) -> builtins.int:
        """
        (Number) Total keyword count for the category.
        """
        return pulumi.get(self, "total_keyword_count")

    @property
    @pulumi.getter(name="totalUrlCount")
    def total_url_count(self) -> builtins.int:
        """
        (Number) Custom URL count for the category.
        """
        return pulumi.get(self, "total_url_count")


@pulumi.output_type
class GetURLFilteringRulesCbiProfileResult(dict):
    def __init__(__self__, *,
                 id: builtins.str,
                 name: builtins.str,
                 url: builtins.str):
        """
        :param builtins.str id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        :param builtins.str url: (String) The browser isolation profile URL
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> builtins.str:
        """
        (String) The browser isolation profile URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetURLFilteringRulesDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesDeviceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesDeviceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesOverrideGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesOverrideUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesSourceIpGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesTimeWindowResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesWorkloadGroupResult(dict):
    def __init__(__self__, *,
                 description: builtins.str,
                 expression: builtins.str,
                 expression_jsons: Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonResult'],
                 id: builtins.int,
                 last_modified_bies: Sequence['outputs.GetURLFilteringRulesWorkloadGroupLastModifiedByResult'],
                 last_modified_time: builtins.int,
                 name: builtins.str):
        """
        :param builtins.str description: (String) Additional information about the rule
        :param builtins.str expression: The description of the workload group
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.int last_modified_time: (Number) When the rule was last modified
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "expression_jsons", expression_jsons)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        (String) Additional information about the rule
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> builtins.str:
        """
        The description of the workload group
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="expressionJsons")
    def expression_jsons(self) -> Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonResult']:
        return pulumi.get(self, "expression_jsons")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetURLFilteringRulesWorkloadGroupLastModifiedByResult']:
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> builtins.int:
        """
        (Number) When the rule was last modified
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesWorkloadGroupExpressionJsonResult(dict):
    def __init__(__self__, *,
                 expression_containers: Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerResult']):
        pulumi.set(__self__, "expression_containers", expression_containers)

    @property
    @pulumi.getter(name="expressionContainers")
    def expression_containers(self) -> Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerResult']:
        return pulumi.get(self, "expression_containers")


@pulumi.output_type
class GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerResult(dict):
    def __init__(__self__, *,
                 operator: builtins.str,
                 tag_containers: Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult'],
                 tag_type: builtins.str):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tag_containers", tag_containers)
        pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def operator(self) -> builtins.str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tagContainers")
    def tag_containers(self) -> Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult']:
        return pulumi.get(self, "tag_containers")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> builtins.str:
        return pulumi.get(self, "tag_type")


@pulumi.output_type
class GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult(dict):
    def __init__(__self__, *,
                 operator: builtins.str,
                 tags: Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult']):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def operator(self) -> builtins.str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetURLFilteringRulesWorkloadGroupLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: URL Filtering Rule ID
        :param builtins.str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserManagementDepartmentResult(dict):
    def __init__(__self__, *,
                 comments: builtins.str,
                 deleted: builtins.bool,
                 id: builtins.int,
                 idp_id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.str comments: (String) Additional information about the group
        :param builtins.bool deleted: (Boolean) default: `false`
        :param builtins.int id: The ID of the time window resource.
        :param builtins.int idp_id: (Number) Unique identfier for the identity provider (IdP)
        :param builtins.str name: User name. This appears when choosing users for policies.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "deleted", deleted)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idp_id", idp_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comments(self) -> builtins.str:
        """
        (String) Additional information about the group
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def deleted(self) -> builtins.bool:
        """
        (Boolean) default: `false`
        """
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the time window resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> builtins.int:
        """
        (Number) Unique identfier for the identity provider (IdP)
        """
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        User name. This appears when choosing users for policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserManagementGroupResult(dict):
    def __init__(__self__, *,
                 comments: builtins.str,
                 id: builtins.int,
                 idp_id: builtins.int,
                 name: builtins.str):
        """
        :param builtins.str comments: (String) Additional information about the group
        :param builtins.int id: The ID of the time window resource.
        :param builtins.int idp_id: (Number) Unique identfier for the identity provider (IdP)
        :param builtins.str name: User name. This appears when choosing users for policies.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idp_id", idp_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comments(self) -> builtins.str:
        """
        (String) Additional information about the group
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The ID of the time window resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> builtins.int:
        """
        (Number) Unique identfier for the identity provider (IdP)
        """
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        User name. This appears when choosing users for policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetVirtualServiceEdgeClusterVirtualZenNodeResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 external_id: builtins.str,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.str external_id: (String) An external identifier used for an entity that is managed outside of ZIA.
        :param builtins.int id: USystem-generated Virtual Service Edge cluster ID
        :param builtins.str name: Name of the Virtual Service Edge cluster
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        """
        (String) An external identifier used for an entity that is managed outside of ZIA.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        USystem-generated Virtual Service Edge cluster ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        Name of the Virtual Service Edge cluster
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWorkloadGroupsExpressionJsonResult(dict):
    def __init__(__self__, *,
                 expression_containers: Sequence['outputs.GetWorkloadGroupsExpressionJsonExpressionContainerResult']):
        """
        :param Sequence['GetWorkloadGroupsExpressionJsonExpressionContainerArgs'] expression_containers: (List) Contains one or more tag types (and associated tags) combined using logical operators within a workload group
        """
        pulumi.set(__self__, "expression_containers", expression_containers)

    @property
    @pulumi.getter(name="expressionContainers")
    def expression_containers(self) -> Sequence['outputs.GetWorkloadGroupsExpressionJsonExpressionContainerResult']:
        """
        (List) Contains one or more tag types (and associated tags) combined using logical operators within a workload group
        """
        return pulumi.get(self, "expression_containers")


@pulumi.output_type
class GetWorkloadGroupsExpressionJsonExpressionContainerResult(dict):
    def __init__(__self__, *,
                 operator: builtins.str,
                 tag_containers: Sequence['outputs.GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerResult'],
                 tag_type: builtins.str):
        """
        :param builtins.str operator: (String) The operator (either AND or OR) used to create logical relationships among tag types. Returned values are: ``AND``, ``OR``, ``OPEN_PARENTHESES``, ``CLOSE_PARENTHESES``
        :param Sequence['GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerArgs'] tag_containers: (String) Contains one or more tags and the logical operator used to combine the tags within a tag type ``CLOSE_PARENTHESES``
        :param builtins.str tag_type: (String) The tag type selected from a predefined list. Returned values are: ``ANY``, ``VPC``, ``SUBNET``, ``VM``, ``ENI``, ``ATTR``
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tag_containers", tag_containers)
        pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def operator(self) -> builtins.str:
        """
        (String) The operator (either AND or OR) used to create logical relationships among tag types. Returned values are: ``AND``, ``OR``, ``OPEN_PARENTHESES``, ``CLOSE_PARENTHESES``
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tagContainers")
    def tag_containers(self) -> Sequence['outputs.GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerResult']:
        """
        (String) Contains one or more tags and the logical operator used to combine the tags within a tag type ``CLOSE_PARENTHESES``
        """
        return pulumi.get(self, "tag_containers")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> builtins.str:
        """
        (String) The tag type selected from a predefined list. Returned values are: ``ANY``, ``VPC``, ``SUBNET``, ``VM``, ``ENI``, ``ATTR``
        """
        return pulumi.get(self, "tag_type")


@pulumi.output_type
class GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerResult(dict):
    def __init__(__self__, *,
                 operator: builtins.str,
                 tags: Sequence['outputs.GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerTagResult']):
        """
        :param builtins.str operator: (String) The operator (either AND or OR) used to create logical relationships among tag types. Returned values are: ``AND``, ``OR``, ``OPEN_PARENTHESES``, ``CLOSE_PARENTHESES``
        :param Sequence['GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerTagArgs'] tags: (String) One or more tags, each consisting of a key-value pair, selected within a tag type. If multiple tags are present within a tag type, they are combined using a logical operator. Note: A maximum of 8 tags can be added to a workload group, irrespective of the number of tag types present.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def operator(self) -> builtins.str:
        """
        (String) The operator (either AND or OR) used to create logical relationships among tag types. Returned values are: ``AND``, ``OR``, ``OPEN_PARENTHESES``, ``CLOSE_PARENTHESES``
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerTagResult']:
        """
        (String) One or more tags, each consisting of a key-value pair, selected within a tag type. If multiple tags are present within a tag type, they are combined using a logical operator. Note: A maximum of 8 tags can be added to a workload group, irrespective of the number of tag types present.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerTagResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: (String) The key component present in the key-value pair contained in a tag
        :param builtins.str value: (string) The value component present in the key-value pair contained in a tag
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        (String) The key component present in the key-value pair contained in a tag
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        (string) The value component present in the key-value pair contained in a tag
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWorkloadGroupsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, builtins.str],
                 external_id: builtins.str,
                 id: builtins.int,
                 name: builtins.str):
        """
        :param Mapping[str, builtins.str] extensions: (Map of String)
        :param builtins.int id: The unique identifer for the workload group.
        :param builtins.str name: The name of the workload group to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, builtins.str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> builtins.str:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        The unique identifer for the workload group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name of the workload group to be exported.
        """
        return pulumi.get(self, "name")


