# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AdminUsersAdminScopeEntities',
    'AdminUsersRole',
    'DLPDictionariesExactDataMatchDetail',
    'DLPDictionariesIdmProfileMatchAccuracy',
    'DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile',
    'DLPDictionariesPattern',
    'DLPDictionariesPhrase',
    'DLPWebRulesAuditor',
    'DLPWebRulesDepartments',
    'DLPWebRulesDlpEngines',
    'DLPWebRulesExcludedDepartments',
    'DLPWebRulesExcludedGroups',
    'DLPWebRulesExcludedUsers',
    'DLPWebRulesGroups',
    'DLPWebRulesIcapServer',
    'DLPWebRulesLabels',
    'DLPWebRulesLocationGroups',
    'DLPWebRulesLocations',
    'DLPWebRulesNotificationTemplate',
    'DLPWebRulesTimeWindows',
    'DLPWebRulesUrlCategories',
    'DLPWebRulesUsers',
    'DLPWebRulesWorkloadGroup',
    'FirewallFilteringNetworkServicesDestTcpPort',
    'FirewallFilteringNetworkServicesDestUdpPort',
    'FirewallFilteringNetworkServicesSrcTcpPort',
    'FirewallFilteringNetworkServicesSrcUdpPort',
    'FirewallFilteringRuleAppServiceGroups',
    'FirewallFilteringRuleAppServices',
    'FirewallFilteringRuleDepartments',
    'FirewallFilteringRuleDestIpGroups',
    'FirewallFilteringRuleDeviceGroups',
    'FirewallFilteringRuleDevices',
    'FirewallFilteringRuleGroups',
    'FirewallFilteringRuleLabels',
    'FirewallFilteringRuleLocationGroups',
    'FirewallFilteringRuleLocations',
    'FirewallFilteringRuleNwApplicationGroups',
    'FirewallFilteringRuleNwServiceGroups',
    'FirewallFilteringRuleNwServices',
    'FirewallFilteringRuleSrcIpGroups',
    'FirewallFilteringRuleTimeWindows',
    'FirewallFilteringRuleUsers',
    'FirewallFilteringRuleWorkloadGroup',
    'FirewallFilteringRuleZpaAppSegment',
    'FirewallFilteringServiceGroupsService',
    'ForwardingControlRuleAppServiceGroups',
    'ForwardingControlRuleDepartments',
    'ForwardingControlRuleDestIpGroups',
    'ForwardingControlRuleDestIpv6Groups',
    'ForwardingControlRuleEcGroups',
    'ForwardingControlRuleGroups',
    'ForwardingControlRuleLabels',
    'ForwardingControlRuleLocationGroups',
    'ForwardingControlRuleLocations',
    'ForwardingControlRuleNwApplicationGroups',
    'ForwardingControlRuleNwServiceGroups',
    'ForwardingControlRuleNwServices',
    'ForwardingControlRuleProxyGateway',
    'ForwardingControlRuleSrcIpGroups',
    'ForwardingControlRuleSrcIpv6Groups',
    'ForwardingControlRuleUsers',
    'ForwardingControlRuleZpaAppSegment',
    'ForwardingControlRuleZpaApplicationSegmentGroups',
    'ForwardingControlRuleZpaApplicationSegments',
    'ForwardingControlRuleZpaGateway',
    'ForwardingControlZPAGatewayZpaAppSegment',
    'ForwardingControlZPAGatewayZpaServerGroup',
    'LocationManagementVpnCredential',
    'TrafficForwardingGRETunnelPrimaryDestVip',
    'TrafficForwardingGRETunnelSecondaryDestVip',
    'URLCategoriesScope',
    'URLCategoriesScopeScopeEntities',
    'URLCategoriesScopeScopeGroupMemberEntities',
    'URLCategoriesUrlKeywordCounts',
    'URLFilteringRulesCbiProfile',
    'URLFilteringRulesDepartments',
    'URLFilteringRulesDeviceGroups',
    'URLFilteringRulesDevices',
    'URLFilteringRulesGroups',
    'URLFilteringRulesLabels',
    'URLFilteringRulesLocationGroups',
    'URLFilteringRulesLocations',
    'URLFilteringRulesOverrideGroups',
    'URLFilteringRulesOverrideUsers',
    'URLFilteringRulesTimeWindows',
    'URLFilteringRulesUsers',
    'URLFilteringRulesWorkloadGroup',
    'UserManagementDepartment',
    'UserManagementGroups',
    'GetAdminUsersAdminScopeResult',
    'GetAdminUsersAdminScopeScopeEntityResult',
    'GetAdminUsersAdminScopeScopeGroupMemberEntityResult',
    'GetAdminUsersExecMobileAppTokenResult',
    'GetAdminUsersRoleResult',
    'GetDLPDictionariesExactDataMatchDetailResult',
    'GetDLPDictionariesIdmProfileMatchAccuracyResult',
    'GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileResult',
    'GetDLPDictionariesPatternResult',
    'GetDLPDictionariesPhraseResult',
    'GetDLPEDMSchemaCreatedByResult',
    'GetDLPEDMSchemaEdmClientResult',
    'GetDLPEDMSchemaLastModifiedByResult',
    'GetDLPEDMSchemaScheduleResult',
    'GetDLPEDMSchemaTokenListResult',
    'GetDLPIDMProfileLiteClientVmResult',
    'GetDLPIDMProfileLiteLastModifiedByResult',
    'GetDLPIDMProfilesIdmClientResult',
    'GetDLPIDMProfilesLastModifiedByResult',
    'GetDLPWebRulesAuditorResult',
    'GetDLPWebRulesDepartmentResult',
    'GetDLPWebRulesDlpEngineResult',
    'GetDLPWebRulesExcludedDepartmentResult',
    'GetDLPWebRulesExcludedGroupResult',
    'GetDLPWebRulesExcludedUserResult',
    'GetDLPWebRulesGroupResult',
    'GetDLPWebRulesIcapServerResult',
    'GetDLPWebRulesLabelResult',
    'GetDLPWebRulesLastModifiedByResult',
    'GetDLPWebRulesLocationResult',
    'GetDLPWebRulesLocationGroupResult',
    'GetDLPWebRulesNotificationTemplateResult',
    'GetDLPWebRulesTimeWindowResult',
    'GetDLPWebRulesUrlCategoryResult',
    'GetDLPWebRulesUserResult',
    'GetDLPWebRulesWorkloadGroupResult',
    'GetDLPWebRulesWorkloadGroupExpressionJsonResult',
    'GetDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerResult',
    'GetDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult',
    'GetDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult',
    'GetDLPWebRulesWorkloadGroupLastModifiedByResult',
    'GetFirewallFilteringNetworkServiceGroupsServiceResult',
    'GetFirewallFilteringNetworkServicesDestTcpPortResult',
    'GetFirewallFilteringNetworkServicesDestUdpPortResult',
    'GetFirewallFilteringNetworkServicesSrcTcpPortResult',
    'GetFirewallFilteringNetworkServicesSrcUdpPortResult',
    'GetFirewallFilteringRuleAppServiceResult',
    'GetFirewallFilteringRuleAppServiceGroupResult',
    'GetFirewallFilteringRuleDepartmentResult',
    'GetFirewallFilteringRuleDestIpGroupResult',
    'GetFirewallFilteringRuleDeviceResult',
    'GetFirewallFilteringRuleDeviceGroupResult',
    'GetFirewallFilteringRuleGroupResult',
    'GetFirewallFilteringRuleLabelResult',
    'GetFirewallFilteringRuleLastModifiedByResult',
    'GetFirewallFilteringRuleLocationResult',
    'GetFirewallFilteringRuleLocationGroupResult',
    'GetFirewallFilteringRuleNwApplicationGroupResult',
    'GetFirewallFilteringRuleNwServiceResult',
    'GetFirewallFilteringRuleNwServiceGroupResult',
    'GetFirewallFilteringRuleSrcIpGroupResult',
    'GetFirewallFilteringRuleTimeWindowResult',
    'GetFirewallFilteringRuleUserResult',
    'GetFirewallFilteringRuleWorkloadGroupResult',
    'GetFirewallFilteringRuleWorkloadGroupExpressionJsonResult',
    'GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerResult',
    'GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerResult',
    'GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult',
    'GetFirewallFilteringRuleWorkloadGroupLastModifiedByResult',
    'GetFirewallFilteringRuleZpaAppSegmentResult',
    'GetForwardingControlRuleDepartmentResult',
    'GetForwardingControlRuleDestIpGroupResult',
    'GetForwardingControlRuleDestIpv6GroupResult',
    'GetForwardingControlRuleDeviceResult',
    'GetForwardingControlRuleDeviceGroupResult',
    'GetForwardingControlRuleEcGroupResult',
    'GetForwardingControlRuleGroupResult',
    'GetForwardingControlRuleLabelResult',
    'GetForwardingControlRuleLocationResult',
    'GetForwardingControlRuleLocationGroupResult',
    'GetForwardingControlRuleNwApplicationGroupResult',
    'GetForwardingControlRuleNwServiceResult',
    'GetForwardingControlRuleNwServiceGroupResult',
    'GetForwardingControlRuleProxyGatewayResult',
    'GetForwardingControlRuleSrcIpGroupResult',
    'GetForwardingControlRuleSrcIpv6GroupResult',
    'GetForwardingControlRuleUserResult',
    'GetForwardingControlRuleZpaAppSegmentResult',
    'GetForwardingControlRuleZpaApplicationSegmentResult',
    'GetForwardingControlRuleZpaApplicationSegmentGroupResult',
    'GetForwardingControlRuleZpaGatewayResult',
    'GetForwardingControlZPAGatewayLastModifiedByResult',
    'GetForwardingControlZPAGatewayZpaAppSegmentResult',
    'GetForwardingControlZPAGatewayZpaServerGroupResult',
    'GetLocationGroupsDynamicLocationGroupCriteriaResult',
    'GetLocationGroupsDynamicLocationGroupCriteriaCityResult',
    'GetLocationGroupsDynamicLocationGroupCriteriaManagedByResult',
    'GetLocationGroupsDynamicLocationGroupCriteriaNameResult',
    'GetLocationGroupsLastModUserResult',
    'GetLocationGroupsLocationResult',
    'GetLocationManagementVpnCredentialResult',
    'GetLocationManagementVpnCredentialLocationResult',
    'GetLocationManagementVpnCredentialManagedByResult',
    'GetRuleLabelsCreatedByResult',
    'GetRuleLabelsLastModifiedByResult',
    'GetSandboxReportClassificationResult',
    'GetSandboxReportExploitResult',
    'GetSandboxReportFilePropertyResult',
    'GetSandboxReportNetworkingResult',
    'GetSandboxReportOriginResult',
    'GetSandboxReportPersistenceResult',
    'GetSandboxReportSecurityBypassResult',
    'GetSandboxReportSpywareResult',
    'GetSandboxReportStealthResult',
    'GetSandboxReportSummaryResult',
    'GetSandboxReportSystemSummaryResult',
    'GetTrafficForwardingGREInternalIPRangeListResult',
    'GetTrafficForwardingGRETunnelLastModifiedByResult',
    'GetTrafficForwardingGRETunnelManagedByResult',
    'GetTrafficForwardingGRETunnelPrimaryDestVipResult',
    'GetTrafficForwardingGRETunnelSecondaryDestVipResult',
    'GetTrafficForwardingStaticIPLastModifiedByResult',
    'GetTrafficForwardingStaticIPManagedByResult',
    'GetTrafficForwardingVIPRecommendedListListResult',
    'GetTrafficForwardingVPNCredentialsLocationResult',
    'GetTrafficForwardingVPNCredentialsManagedByResult',
    'GetURLCategoriesScopeResult',
    'GetURLCategoriesScopeScopeEntityResult',
    'GetURLCategoriesScopeScopeGroupMemberEntityResult',
    'GetURLCategoriesUrlKeywordCountResult',
    'GetURLFilteringRulesCbiProfileResult',
    'GetURLFilteringRulesDepartmentResult',
    'GetURLFilteringRulesDeviceResult',
    'GetURLFilteringRulesDeviceGroupResult',
    'GetURLFilteringRulesGroupResult',
    'GetURLFilteringRulesLabelResult',
    'GetURLFilteringRulesLastModifiedByResult',
    'GetURLFilteringRulesLocationResult',
    'GetURLFilteringRulesLocationGroupResult',
    'GetURLFilteringRulesOverrideGroupResult',
    'GetURLFilteringRulesOverrideUserResult',
    'GetURLFilteringRulesTimeWindowResult',
    'GetURLFilteringRulesUserResult',
    'GetURLFilteringRulesWorkloadGroupResult',
    'GetURLFilteringRulesWorkloadGroupExpressionJsonResult',
    'GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerResult',
    'GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult',
    'GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult',
    'GetURLFilteringRulesWorkloadGroupLastModifiedByResult',
    'GetUserManagementDepartmentResult',
    'GetUserManagementGroupResult',
    'GetWorkloadGroupsExpressionJsonResult',
    'GetWorkloadGroupsExpressionJsonExpressionContainerResult',
    'GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerResult',
    'GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerTagResult',
    'GetWorkloadGroupsLastModifiedByResult',
]

@pulumi.output_type
class AdminUsersAdminScopeEntities(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class AdminUsersRole(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None):
        """
        :param int id: Identifier that uniquely identifies an entity
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class DLPDictionariesExactDataMatchDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dictionaryEdmMappingId":
            suggest = "dictionary_edm_mapping_id"
        elif key == "primaryField":
            suggest = "primary_field"
        elif key == "schemaId":
            suggest = "schema_id"
        elif key == "secondaryFieldMatchOn":
            suggest = "secondary_field_match_on"
        elif key == "secondaryFields":
            suggest = "secondary_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DLPDictionariesExactDataMatchDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DLPDictionariesExactDataMatchDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DLPDictionariesExactDataMatchDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dictionary_edm_mapping_id: Optional[int] = None,
                 primary_field: Optional[int] = None,
                 schema_id: Optional[int] = None,
                 secondary_field_match_on: Optional[str] = None,
                 secondary_fields: Optional[Sequence[int]] = None):
        """
        :param int dictionary_edm_mapping_id: The unique identifier for the EDM mapping.
        :param int primary_field: The EDM template's primary field.
        :param int schema_id: The unique identifier for the EDM template (or schema).
        :param str secondary_field_match_on: The EDM secondary field to match on.
               - `"MATCHON_NONE"`
               - `"MATCHON_ANY_1"`
               - `"MATCHON_ANY_2"`
               - `"MATCHON_ANY_3"`
               - `"MATCHON_ANY_4"`
               - `"MATCHON_ANY_5"`
               - `"MATCHON_ANY_6"`
               - `"MATCHON_ANY_7"`
               - `"MATCHON_ANY_8"`
               - `"MATCHON_ANY_9"`
               - `"MATCHON_ANY_10"`
               - `"MATCHON_ANY_11"`
               - `"MATCHON_ANY_12"`
               - `"MATCHON_ANY_13"`
               - `"MATCHON_ANY_14"`
               - `"MATCHON_ANY_15"`
               - `"MATCHON_ALL"`
        :param Sequence[int] secondary_fields: The EDM template's secondary fields.
        """
        if dictionary_edm_mapping_id is not None:
            pulumi.set(__self__, "dictionary_edm_mapping_id", dictionary_edm_mapping_id)
        if primary_field is not None:
            pulumi.set(__self__, "primary_field", primary_field)
        if schema_id is not None:
            pulumi.set(__self__, "schema_id", schema_id)
        if secondary_field_match_on is not None:
            pulumi.set(__self__, "secondary_field_match_on", secondary_field_match_on)
        if secondary_fields is not None:
            pulumi.set(__self__, "secondary_fields", secondary_fields)

    @property
    @pulumi.getter(name="dictionaryEdmMappingId")
    def dictionary_edm_mapping_id(self) -> Optional[int]:
        """
        The unique identifier for the EDM mapping.
        """
        return pulumi.get(self, "dictionary_edm_mapping_id")

    @property
    @pulumi.getter(name="primaryField")
    def primary_field(self) -> Optional[int]:
        """
        The EDM template's primary field.
        """
        return pulumi.get(self, "primary_field")

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> Optional[int]:
        """
        The unique identifier for the EDM template (or schema).
        """
        return pulumi.get(self, "schema_id")

    @property
    @pulumi.getter(name="secondaryFieldMatchOn")
    def secondary_field_match_on(self) -> Optional[str]:
        """
        The EDM secondary field to match on.
        - `"MATCHON_NONE"`
        - `"MATCHON_ANY_1"`
        - `"MATCHON_ANY_2"`
        - `"MATCHON_ANY_3"`
        - `"MATCHON_ANY_4"`
        - `"MATCHON_ANY_5"`
        - `"MATCHON_ANY_6"`
        - `"MATCHON_ANY_7"`
        - `"MATCHON_ANY_8"`
        - `"MATCHON_ANY_9"`
        - `"MATCHON_ANY_10"`
        - `"MATCHON_ANY_11"`
        - `"MATCHON_ANY_12"`
        - `"MATCHON_ANY_13"`
        - `"MATCHON_ANY_14"`
        - `"MATCHON_ANY_15"`
        - `"MATCHON_ALL"`
        """
        return pulumi.get(self, "secondary_field_match_on")

    @property
    @pulumi.getter(name="secondaryFields")
    def secondary_fields(self) -> Optional[Sequence[int]]:
        """
        The EDM template's secondary fields.
        """
        return pulumi.get(self, "secondary_fields")


@pulumi.output_type
class DLPDictionariesIdmProfileMatchAccuracy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adpIdmProfiles":
            suggest = "adp_idm_profiles"
        elif key == "matchAccuracy":
            suggest = "match_accuracy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DLPDictionariesIdmProfileMatchAccuracy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DLPDictionariesIdmProfileMatchAccuracy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DLPDictionariesIdmProfileMatchAccuracy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adp_idm_profiles: Optional[Sequence['outputs.DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile']] = None,
                 match_accuracy: Optional[str] = None):
        """
        :param Sequence['DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs'] adp_idm_profiles: The IDM template reference.
        :param str match_accuracy: The IDM template match accuracy.
               - `"LOW"`
               - `"MEDIUM"`
               - `"HEAVY"`
        """
        if adp_idm_profiles is not None:
            pulumi.set(__self__, "adp_idm_profiles", adp_idm_profiles)
        if match_accuracy is not None:
            pulumi.set(__self__, "match_accuracy", match_accuracy)

    @property
    @pulumi.getter(name="adpIdmProfiles")
    def adp_idm_profiles(self) -> Optional[Sequence['outputs.DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile']]:
        """
        The IDM template reference.
        """
        return pulumi.get(self, "adp_idm_profiles")

    @property
    @pulumi.getter(name="matchAccuracy")
    def match_accuracy(self) -> Optional[str]:
        """
        The IDM template match accuracy.
        - `"LOW"`
        - `"MEDIUM"`
        - `"HEAVY"`
        """
        return pulumi.get(self, "match_accuracy")


@pulumi.output_type
class DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile(dict):
    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None):
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class DLPDictionariesPattern(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 pattern: Optional[str] = None):
        """
        :param str action: The action applied to a DLP dictionary using patterns. The following values are supported:
        :param str pattern: DLP dictionary pattern
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        The action applied to a DLP dictionary using patterns. The following values are supported:
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        DLP dictionary pattern
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class DLPDictionariesPhrase(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 phrase: Optional[str] = None):
        """
        :param str action: The action applied to a DLP dictionary using patterns. The following values are supported:
        :param str phrase: DLP dictionary phrase
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if phrase is not None:
            pulumi.set(__self__, "phrase", phrase)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        The action applied to a DLP dictionary using patterns. The following values are supported:
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def phrase(self) -> Optional[str]:
        """
        DLP dictionary phrase
        """
        return pulumi.get(self, "phrase")


@pulumi.output_type
class DLPWebRulesAuditor(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class DLPWebRulesDepartments(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesDlpEngines(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesExcludedDepartments(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesExcludedGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesExcludedUsers(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesIcapServer(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class DLPWebRulesLabels(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class DLPWebRulesLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesLocations(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesNotificationTemplate(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class DLPWebRulesTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesUrlCategories(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesUsers(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class DLPWebRulesWorkloadGroup(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallFilteringNetworkServicesDestTcpPort(dict):
    def __init__(__self__, *,
                 end: Optional[int] = None,
                 start: Optional[int] = None):
        """
        :param int end: > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        """
        > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class FirewallFilteringNetworkServicesDestUdpPort(dict):
    def __init__(__self__, *,
                 end: Optional[int] = None,
                 start: Optional[int] = None):
        """
        :param int end: > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        """
        > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class FirewallFilteringNetworkServicesSrcTcpPort(dict):
    def __init__(__self__, *,
                 end: Optional[int] = None,
                 start: Optional[int] = None):
        """
        :param int end: > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        """
        > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class FirewallFilteringNetworkServicesSrcUdpPort(dict):
    def __init__(__self__, *,
                 end: Optional[int] = None,
                 start: Optional[int] = None):
        """
        :param int end: > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        """
        > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class FirewallFilteringRuleAppServiceGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleAppServices(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleDepartments(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleDestIpGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleDeviceGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleDevices(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleLabels(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class FirewallFilteringRuleLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleLocations(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleNwApplicationGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleNwServiceGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleNwServices(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleSrcIpGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleUsers(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class FirewallFilteringRuleWorkloadGroup(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
               
               * `Other Exported Arguments`
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group

        * `Other Exported Arguments`
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallFilteringRuleZpaAppSegment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FirewallFilteringRuleZpaAppSegment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FirewallFilteringRuleZpaAppSegment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FirewallFilteringRuleZpaAppSegment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: str,
                 name: str):
        """
        :param str external_id: External ID of the application segment.
        :param str name: The name of the workload group
               
               * `Other Exported Arguments`
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        External ID of the application segment.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group

        * `Other Exported Arguments`
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class FirewallFilteringServiceGroupsService(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleAppServiceGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleDepartments(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleDestIpGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleDestIpv6Groups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleEcGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleLabels(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ForwardingControlRuleLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleLocations(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleNwApplicationGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleNwServiceGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleNwServices(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleProxyGateway(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: (int) Identifier that uniquely identifies an entity
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ForwardingControlRuleSrcIpGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleSrcIpv6Groups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleUsers(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleZpaAppSegment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ForwardingControlRuleZpaAppSegment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ForwardingControlRuleZpaAppSegment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ForwardingControlRuleZpaAppSegment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: str,
                 name: str):
        """
        :param str external_id: (int) Identifier that uniquely identifies an entity
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ForwardingControlRuleZpaApplicationSegmentGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleZpaApplicationSegments(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ForwardingControlRuleZpaGateway(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: (int) Identifier that uniquely identifies an entity
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ForwardingControlZPAGatewayZpaAppSegment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ForwardingControlZPAGatewayZpaAppSegment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ForwardingControlZPAGatewayZpaAppSegment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ForwardingControlZPAGatewayZpaAppSegment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: str,
                 name: str):
        """
        :param str external_id: An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        :param str name: The configured name of the entity
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ForwardingControlZPAGatewayZpaServerGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ForwardingControlZPAGatewayZpaServerGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ForwardingControlZPAGatewayZpaServerGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ForwardingControlZPAGatewayZpaServerGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: str,
                 name: str):
        """
        :param str external_id: An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        :param str name: The configured name of the entity
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class LocationManagementVpnCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "preSharedKey":
            suggest = "pre_shared_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LocationManagementVpnCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LocationManagementVpnCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LocationManagementVpnCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comments: Optional[str] = None,
                 fqdn: Optional[str] = None,
                 id: Optional[int] = None,
                 ip_address: Optional[str] = None,
                 pre_shared_key: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param int id: Identifier that uniquely identifies an entity
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if pre_shared_key is not None:
            pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> Optional[str]:
        return pulumi.get(self, "pre_shared_key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class TrafficForwardingGRETunnelPrimaryDestVip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateServiceEdge":
            suggest = "private_service_edge"
        elif key == "virtualIp":
            suggest = "virtual_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrafficForwardingGRETunnelPrimaryDestVip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrafficForwardingGRETunnelPrimaryDestVip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrafficForwardingGRETunnelPrimaryDestVip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter: Optional[str] = None,
                 id: Optional[int] = None,
                 private_service_edge: Optional[bool] = None,
                 virtual_ip: Optional[str] = None):
        """
        :param str datacenter: Data center information
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param bool private_service_edge: Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        :param str virtual_ip: GRE cluster virtual IP address (VIP)
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_service_edge is not None:
            pulumi.set(__self__, "private_service_edge", private_service_edge)
        if virtual_ip is not None:
            pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        """
        Data center information
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> Optional[bool]:
        """
        Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        """
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> Optional[str]:
        """
        GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class TrafficForwardingGRETunnelSecondaryDestVip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateServiceEdge":
            suggest = "private_service_edge"
        elif key == "virtualIp":
            suggest = "virtual_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrafficForwardingGRETunnelSecondaryDestVip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrafficForwardingGRETunnelSecondaryDestVip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrafficForwardingGRETunnelSecondaryDestVip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter: Optional[str] = None,
                 id: Optional[int] = None,
                 private_service_edge: Optional[bool] = None,
                 virtual_ip: Optional[str] = None):
        """
        :param str datacenter: Data center information
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param bool private_service_edge: Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        :param str virtual_ip: GRE cluster virtual IP address (VIP)
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_service_edge is not None:
            pulumi.set(__self__, "private_service_edge", private_service_edge)
        if virtual_ip is not None:
            pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        """
        Data center information
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> Optional[bool]:
        """
        Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        """
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> Optional[str]:
        """
        GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class URLCategoriesScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scopeEntities":
            suggest = "scope_entities"
        elif key == "scopeGroupMemberEntities":
            suggest = "scope_group_member_entities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in URLCategoriesScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        URLCategoriesScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        URLCategoriesScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scope_entities: Optional['outputs.URLCategoriesScopeScopeEntities'] = None,
                 scope_group_member_entities: Optional['outputs.URLCategoriesScopeScopeGroupMemberEntities'] = None,
                 type: Optional[str] = None):
        """
        :param 'URLCategoriesScopeScopeEntitiesArgs' scope_entities: list of scope IDs
        :param 'URLCategoriesScopeScopeGroupMemberEntitiesArgs' scope_group_member_entities: Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        :param str type: The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        if scope_entities is not None:
            pulumi.set(__self__, "scope_entities", scope_entities)
        if scope_group_member_entities is not None:
            pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Optional['outputs.URLCategoriesScopeScopeEntities']:
        """
        list of scope IDs
        """
        return pulumi.get(self, "scope_entities")

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Optional['outputs.URLCategoriesScopeScopeGroupMemberEntities']:
        """
        Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class URLCategoriesScopeScopeEntities(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLCategoriesScopeScopeGroupMemberEntities(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLCategoriesUrlKeywordCounts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retainParentKeywordCount":
            suggest = "retain_parent_keyword_count"
        elif key == "retainParentUrlCount":
            suggest = "retain_parent_url_count"
        elif key == "totalKeywordCount":
            suggest = "total_keyword_count"
        elif key == "totalUrlCount":
            suggest = "total_url_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in URLCategoriesUrlKeywordCounts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        URLCategoriesUrlKeywordCounts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        URLCategoriesUrlKeywordCounts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 retain_parent_keyword_count: Optional[int] = None,
                 retain_parent_url_count: Optional[int] = None,
                 total_keyword_count: Optional[int] = None,
                 total_url_count: Optional[int] = None):
        """
        :param int retain_parent_keyword_count: Count of total keywords with retain parent category.
        :param int retain_parent_url_count: Count of URLs with retain parent category.
        :param int total_keyword_count: Total keyword count for the category.
        :param int total_url_count: Custom URL count for the category.
        """
        if retain_parent_keyword_count is not None:
            pulumi.set(__self__, "retain_parent_keyword_count", retain_parent_keyword_count)
        if retain_parent_url_count is not None:
            pulumi.set(__self__, "retain_parent_url_count", retain_parent_url_count)
        if total_keyword_count is not None:
            pulumi.set(__self__, "total_keyword_count", total_keyword_count)
        if total_url_count is not None:
            pulumi.set(__self__, "total_url_count", total_url_count)

    @property
    @pulumi.getter(name="retainParentKeywordCount")
    def retain_parent_keyword_count(self) -> Optional[int]:
        """
        Count of total keywords with retain parent category.
        """
        return pulumi.get(self, "retain_parent_keyword_count")

    @property
    @pulumi.getter(name="retainParentUrlCount")
    def retain_parent_url_count(self) -> Optional[int]:
        """
        Count of URLs with retain parent category.
        """
        return pulumi.get(self, "retain_parent_url_count")

    @property
    @pulumi.getter(name="totalKeywordCount")
    def total_keyword_count(self) -> Optional[int]:
        """
        Total keyword count for the category.
        """
        return pulumi.get(self, "total_keyword_count")

    @property
    @pulumi.getter(name="totalUrlCount")
    def total_url_count(self) -> Optional[int]:
        """
        Custom URL count for the category.
        """
        return pulumi.get(self, "total_url_count")


@pulumi.output_type
class URLFilteringRulesCbiProfile(dict):
    def __init__(__self__, *,
                 id: Optional[str] = None,
                 name: Optional[str] = None,
                 url: Optional[str] = None):
        """
        :param str id: A unique identifier assigned to the workload group
        :param str name: Name of the Firewall Filtering policy rule
        :param str url: The browser isolation profile URL
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        The browser isolation profile URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class URLFilteringRulesDepartments(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesDeviceGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesDevices(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesLabels(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesLocations(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesOverrideGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesOverrideUsers(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesUsers(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLFilteringRulesWorkloadGroup(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserManagementDepartment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idpId":
            suggest = "idp_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserManagementDepartment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserManagementDepartment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserManagementDepartment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comments: Optional[str] = None,
                 deleted: Optional[bool] = None,
                 id: Optional[int] = None,
                 idp_id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param str comments: Additional information about this department
        :param int idp_id: Identity provider (IdP) ID
        :param str name: User name. This appears when choosing users for policies.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if deleted is not None:
            pulumi.set(__self__, "deleted", deleted)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        """
        Additional information about this department
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def deleted(self) -> Optional[bool]:
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[int]:
        """
        Identity provider (IdP) ID
        """
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        User name. This appears when choosing users for policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class UserManagementGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class GetAdminUsersAdminScopeResult(dict):
    def __init__(__self__, *,
                 scope_entities: Sequence['outputs.GetAdminUsersAdminScopeScopeEntityResult'],
                 scope_group_member_entities: Sequence['outputs.GetAdminUsersAdminScopeScopeGroupMemberEntityResult'],
                 type: str):
        """
        :param Sequence['GetAdminUsersAdminScopeScopeEntityArgs'] scope_entities: (String) Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        :param Sequence['GetAdminUsersAdminScopeScopeGroupMemberEntityArgs'] scope_group_member_entities: (Number) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
        :param str type: (String) The admin scope type. The attribute name is subject to change.
        """
        pulumi.set(__self__, "scope_entities", scope_entities)
        pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Sequence['outputs.GetAdminUsersAdminScopeScopeEntityResult']:
        """
        (String) Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        """
        return pulumi.get(self, "scope_entities")

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Sequence['outputs.GetAdminUsersAdminScopeScopeGroupMemberEntityResult']:
        """
        (Number) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (String) The admin scope type. The attribute name is subject to change.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAdminUsersAdminScopeScopeEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: The ID of the admin user to be exported.
        :param str name: (String)
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the admin user to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAdminUsersAdminScopeScopeGroupMemberEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: The ID of the admin user to be exported.
        :param str name: (String)
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the admin user to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAdminUsersExecMobileAppTokenResult(dict):
    def __init__(__self__, *,
                 cloud: str,
                 create_time: int,
                 device_id: str,
                 device_name: str,
                 name: str,
                 org_id: int,
                 token: str,
                 token_expiry: int,
                 token_id: str):
        """
        :param str cloud: (String)
        :param int create_time: (Number)
        :param str device_id: (String)
        :param str device_name: (String)
        :param str name: (String)
        :param int org_id: (Number)
        :param str token: (String)
        :param int token_expiry: (Number)
        :param str token_id: (String)
        """
        pulumi.set(__self__, "cloud", cloud)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "token_expiry", token_expiry)
        pulumi.set(__self__, "token_id", token_id)

    @property
    @pulumi.getter
    def cloud(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="tokenExpiry")
    def token_expiry(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "token_expiry")

    @property
    @pulumi.getter(name="tokenId")
    def token_id(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "token_id")


@pulumi.output_type
class GetAdminUsersRoleResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: The ID of the admin user to be exported.
        :param str name: (String)
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the admin user to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPDictionariesExactDataMatchDetailResult(dict):
    def __init__(__self__, *,
                 dictionary_edm_mapping_id: int,
                 primary_field: int,
                 schema_id: int,
                 secondary_field_match_on: str,
                 secondary_fields: Sequence[int]):
        """
        :param int dictionary_edm_mapping_id: The unique identifier for the EDM mapping
        :param int primary_field: The EDM template's primary field.
        :param int schema_id: The unique identifier for the EDM template (or schema).
        :param str secondary_field_match_on: The EDM secondary field to match on.
        """
        pulumi.set(__self__, "dictionary_edm_mapping_id", dictionary_edm_mapping_id)
        pulumi.set(__self__, "primary_field", primary_field)
        pulumi.set(__self__, "schema_id", schema_id)
        pulumi.set(__self__, "secondary_field_match_on", secondary_field_match_on)
        pulumi.set(__self__, "secondary_fields", secondary_fields)

    @property
    @pulumi.getter(name="dictionaryEdmMappingId")
    def dictionary_edm_mapping_id(self) -> int:
        """
        The unique identifier for the EDM mapping
        """
        return pulumi.get(self, "dictionary_edm_mapping_id")

    @property
    @pulumi.getter(name="primaryField")
    def primary_field(self) -> int:
        """
        The EDM template's primary field.
        """
        return pulumi.get(self, "primary_field")

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> int:
        """
        The unique identifier for the EDM template (or schema).
        """
        return pulumi.get(self, "schema_id")

    @property
    @pulumi.getter(name="secondaryFieldMatchOn")
    def secondary_field_match_on(self) -> str:
        """
        The EDM secondary field to match on.
        """
        return pulumi.get(self, "secondary_field_match_on")

    @property
    @pulumi.getter(name="secondaryFields")
    def secondary_fields(self) -> Sequence[int]:
        return pulumi.get(self, "secondary_fields")


@pulumi.output_type
class GetDLPDictionariesIdmProfileMatchAccuracyResult(dict):
    def __init__(__self__, *,
                 adp_idm_profiles: Sequence['outputs.GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileResult'],
                 match_accuracy: str):
        """
        :param Sequence['GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs'] adp_idm_profiles: The action applied to a DLP dictionary using patterns
        :param str match_accuracy: The IDM template match accuracy.
        """
        pulumi.set(__self__, "adp_idm_profiles", adp_idm_profiles)
        pulumi.set(__self__, "match_accuracy", match_accuracy)

    @property
    @pulumi.getter(name="adpIdmProfiles")
    def adp_idm_profiles(self) -> Sequence['outputs.GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileResult']:
        """
        The action applied to a DLP dictionary using patterns
        """
        return pulumi.get(self, "adp_idm_profiles")

    @property
    @pulumi.getter(name="matchAccuracy")
    def match_accuracy(self) -> str:
        """
        The IDM template match accuracy.
        """
        return pulumi.get(self, "match_accuracy")


@pulumi.output_type
class GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Unique identifier for the DLP dictionary
        :param str name: DLP dictionary name
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the DLP dictionary
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        DLP dictionary name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPDictionariesPatternResult(dict):
    def __init__(__self__, *,
                 action: str,
                 pattern: str):
        """
        :param str action: (String) The action applied to a DLP dictionary using patterns
        :param str pattern: (String) DLP dictionary pattern
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        (String) The action applied to a DLP dictionary using patterns
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def pattern(self) -> str:
        """
        (String) DLP dictionary pattern
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class GetDLPDictionariesPhraseResult(dict):
    def __init__(__self__, *,
                 action: str,
                 phrase: str):
        """
        :param str action: (String) The action applied to a DLP dictionary using patterns
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "phrase", phrase)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        (String) The action applied to a DLP dictionary using patterns
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def phrase(self) -> str:
        return pulumi.get(self, "phrase")


@pulumi.output_type
class GetDLPEDMSchemaCreatedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The token (i.e., criteria) name.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The token (i.e., criteria) name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPEDMSchemaEdmClientResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The token (i.e., criteria) name.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The token (i.e., criteria) name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPEDMSchemaLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The token (i.e., criteria) name.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The token (i.e., criteria) name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPEDMSchemaScheduleResult(dict):
    def __init__(__self__, *,
                 schedule_day_of_months: Sequence[str],
                 schedule_day_of_weeks: Sequence[str],
                 schedule_disabled: bool,
                 schedule_time: int,
                 schedule_type: str):
        """
        :param Sequence[str] schedule_day_of_months: The day of the month the EDM schema (i.e., EDM template) is scheduled for.
        :param Sequence[str] schedule_day_of_weeks: The day of the week the EDM schema (i.e., EDM template) is scheduled for.
        :param bool schedule_disabled: If set to true, the schedule for the EDM schema (i.e., EDM template) is temporarily in a disabled state.
        :param int schedule_time: The time of the day (in minutes) that the EDM schema (i.e., EDM template) is scheduled for.
        :param str schedule_type: The schedule type for the EDM schema (i.e., EDM template), Monthly, Weekly, Daily, or None.
        """
        pulumi.set(__self__, "schedule_day_of_months", schedule_day_of_months)
        pulumi.set(__self__, "schedule_day_of_weeks", schedule_day_of_weeks)
        pulumi.set(__self__, "schedule_disabled", schedule_disabled)
        pulumi.set(__self__, "schedule_time", schedule_time)
        pulumi.set(__self__, "schedule_type", schedule_type)

    @property
    @pulumi.getter(name="scheduleDayOfMonths")
    def schedule_day_of_months(self) -> Sequence[str]:
        """
        The day of the month the EDM schema (i.e., EDM template) is scheduled for.
        """
        return pulumi.get(self, "schedule_day_of_months")

    @property
    @pulumi.getter(name="scheduleDayOfWeeks")
    def schedule_day_of_weeks(self) -> Sequence[str]:
        """
        The day of the week the EDM schema (i.e., EDM template) is scheduled for.
        """
        return pulumi.get(self, "schedule_day_of_weeks")

    @property
    @pulumi.getter(name="scheduleDisabled")
    def schedule_disabled(self) -> bool:
        """
        If set to true, the schedule for the EDM schema (i.e., EDM template) is temporarily in a disabled state.
        """
        return pulumi.get(self, "schedule_disabled")

    @property
    @pulumi.getter(name="scheduleTime")
    def schedule_time(self) -> int:
        """
        The time of the day (in minutes) that the EDM schema (i.e., EDM template) is scheduled for.
        """
        return pulumi.get(self, "schedule_time")

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> str:
        """
        The schedule type for the EDM schema (i.e., EDM template), Monthly, Weekly, Daily, or None.
        """
        return pulumi.get(self, "schedule_type")


@pulumi.output_type
class GetDLPEDMSchemaTokenListResult(dict):
    def __init__(__self__, *,
                 col_length_bitmap: int,
                 hash_file_column_order: int,
                 name: str,
                 original_column: int,
                 primary_key: bool,
                 type: str):
        """
        :param int col_length_bitmap: The length of the column bitmap in the hashed file.
        :param int hash_file_column_order: The column position for the token in the hashed file, starting from 1.
        :param str name: The token (i.e., criteria) name.
        :param int original_column: The column position for the token in the original CSV file uploaded to the Index Tool, starting from 1.
        :param bool primary_key: Indicates whether the token is a primary key.
        :param str type: The token type.
        """
        pulumi.set(__self__, "col_length_bitmap", col_length_bitmap)
        pulumi.set(__self__, "hash_file_column_order", hash_file_column_order)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "original_column", original_column)
        pulumi.set(__self__, "primary_key", primary_key)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="colLengthBitmap")
    def col_length_bitmap(self) -> int:
        """
        The length of the column bitmap in the hashed file.
        """
        return pulumi.get(self, "col_length_bitmap")

    @property
    @pulumi.getter(name="hashFileColumnOrder")
    def hash_file_column_order(self) -> int:
        """
        The column position for the token in the hashed file, starting from 1.
        """
        return pulumi.get(self, "hash_file_column_order")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The token (i.e., criteria) name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="originalColumn")
    def original_column(self) -> int:
        """
        The column position for the token in the original CSV file uploaded to the Index Tool, starting from 1.
        """
        return pulumi.get(self, "original_column")

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> bool:
        """
        Indicates whether the token is a primary key.
        """
        return pulumi.get(self, "primary_key")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The token type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetDLPIDMProfileLiteClientVmResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPIDMProfileLiteLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPIDMProfilesIdmClientResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: The configured name of the entity
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPIDMProfilesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: The configured name of the entity
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesAuditorResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesDlpEngineResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesExcludedDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int):
        """
        :param int id: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDLPWebRulesExcludedGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int):
        """
        :param int id: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDLPWebRulesExcludedUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int):
        """
        :param int id: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetDLPWebRulesGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesIcapServerResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesNotificationTemplateResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesTimeWindowResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesUrlCategoryResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesWorkloadGroupResult(dict):
    def __init__(__self__, *,
                 description: str,
                 expression: str,
                 expression_jsons: Sequence['outputs.GetDLPWebRulesWorkloadGroupExpressionJsonResult'],
                 id: int,
                 last_modified_bies: Sequence['outputs.GetDLPWebRulesWorkloadGroupLastModifiedByResult'],
                 last_modified_time: int,
                 name: str):
        """
        :param str description: The description of the DLP policy rule.
        :param str expression: The description of the workload group
        :param int id: A unique identifier assigned to the workload group
        :param Sequence['GetDLPWebRulesWorkloadGroupLastModifiedByArgs'] last_modified_bies: The admin that modified the DLP policy rule last.
        :param int last_modified_time: Timestamp when the DLP policy rule was last modified.
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "expression_jsons", expression_jsons)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of the DLP policy rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        The description of the workload group
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="expressionJsons")
    def expression_jsons(self) -> Sequence['outputs.GetDLPWebRulesWorkloadGroupExpressionJsonResult']:
        return pulumi.get(self, "expression_jsons")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetDLPWebRulesWorkloadGroupLastModifiedByResult']:
        """
        The admin that modified the DLP policy rule last.
        """
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> int:
        """
        Timestamp when the DLP policy rule was last modified.
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetDLPWebRulesWorkloadGroupExpressionJsonResult(dict):
    def __init__(__self__, *,
                 expression_containers: Sequence['outputs.GetDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerResult']):
        pulumi.set(__self__, "expression_containers", expression_containers)

    @property
    @pulumi.getter(name="expressionContainers")
    def expression_containers(self) -> Sequence['outputs.GetDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerResult']:
        return pulumi.get(self, "expression_containers")


@pulumi.output_type
class GetDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 tag_containers: Sequence['outputs.GetDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult'],
                 tag_type: str):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tag_containers", tag_containers)
        pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tagContainers")
    def tag_containers(self) -> Sequence['outputs.GetDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult']:
        return pulumi.get(self, "tag_containers")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> str:
        return pulumi.get(self, "tag_type")


@pulumi.output_type
class GetDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 tags: Sequence['outputs.GetDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult']):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetDLPWebRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDLPWebRulesWorkloadGroupLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the workload group
        :param str name: The name of the workload group
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringNetworkServiceGroupsServiceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: int,
                 is_name_l10n_tag: bool,
                 name: Optional[str] = None):
        """
        :param str description: (String)
        :param int id: The ID of the ip source group to be exported.
        :param bool is_name_l10n_tag: (Bool) - Default: false
        :param str name: The name of the ip source group to be exported.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_name_l10n_tag", is_name_l10n_tag)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the ip source group to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isNameL10nTag")
    def is_name_l10n_tag(self) -> bool:
        """
        (Bool) - Default: false
        """
        return pulumi.get(self, "is_name_l10n_tag")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the ip source group to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringNetworkServicesDestTcpPortResult(dict):
    def __init__(__self__, *,
                 end: int,
                 start: int):
        """
        :param int end: (Number)
        :param int start: (Number)
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetFirewallFilteringNetworkServicesDestUdpPortResult(dict):
    def __init__(__self__, *,
                 end: int,
                 start: int):
        """
        :param int end: (Number)
        :param int start: (Number)
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetFirewallFilteringNetworkServicesSrcTcpPortResult(dict):
    def __init__(__self__, *,
                 end: int,
                 start: int):
        """
        :param int end: (Number)
        :param int start: (Number)
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetFirewallFilteringNetworkServicesSrcUdpPortResult(dict):
    def __init__(__self__, *,
                 end: int,
                 start: int):
        """
        :param int end: (Number)
        :param int start: (Number)
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetFirewallFilteringRuleAppServiceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleAppServiceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleDestIpGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleDeviceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleDeviceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleNwApplicationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleNwServiceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleNwServiceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleSrcIpGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleTimeWindowResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleWorkloadGroupResult(dict):
    def __init__(__self__, *,
                 description: str,
                 expression: str,
                 expression_jsons: Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonResult'],
                 id: int,
                 last_modified_bies: Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupLastModifiedByResult'],
                 last_modified_time: int,
                 name: str):
        """
        :param str description: (Optional) Enter additional notes or information. The description cannot exceed 10,240 characters.
        :param str expression: The description of the workload group
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param int last_modified_time: (Number)
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "expression_jsons", expression_jsons)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (Optional) Enter additional notes or information. The description cannot exceed 10,240 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        The description of the workload group
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="expressionJsons")
    def expression_jsons(self) -> Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonResult']:
        return pulumi.get(self, "expression_jsons")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupLastModifiedByResult']:
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleWorkloadGroupExpressionJsonResult(dict):
    def __init__(__self__, *,
                 expression_containers: Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerResult']):
        pulumi.set(__self__, "expression_containers", expression_containers)

    @property
    @pulumi.getter(name="expressionContainers")
    def expression_containers(self) -> Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerResult']:
        return pulumi.get(self, "expression_containers")


@pulumi.output_type
class GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 tag_containers: Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerResult'],
                 tag_type: str):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tag_containers", tag_containers)
        pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tagContainers")
    def tag_containers(self) -> Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerResult']:
        return pulumi.get(self, "tag_containers")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> str:
        return pulumi.get(self, "tag_type")


@pulumi.output_type
class GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 tags: Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult']):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetFirewallFilteringRuleWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetFirewallFilteringRuleWorkloadGroupLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetFirewallFilteringRuleZpaAppSegmentResult(dict):
    def __init__(__self__, *,
                 external_id: str,
                 id: int,
                 name: str):
        """
        :param str external_id: Indicates the external ID. Applicable only when this reference is of an external entity.
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        Indicates the external ID. Applicable only when this reference is of an external entity.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleDepartmentResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleDestIpGroupResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleDestIpv6GroupResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleDeviceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleDeviceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleEcGroupResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleGroupResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleLabelResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleLocationResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleLocationGroupResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleNwApplicationGroupResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleNwServiceResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleNwServiceGroupResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleProxyGatewayResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleSrcIpGroupResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleSrcIpv6GroupResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleUserResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleZpaAppSegmentResult(dict):
    def __init__(__self__, *,
                 external_id: str,
                 id: int,
                 name: str):
        """
        :param str external_id: (int) Identifier that uniquely identifies an entity
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlRuleZpaApplicationSegmentResult(dict):
    def __init__(__self__, *,
                 ddescription: str,
                 deleted: bool,
                 id: int,
                 name: str,
                 zpa_id: int):
        """
        :param str ddescription: Additional information about the Application Segment
        :param bool deleted: ID of the ZPA tenant where the Application Segment is configured
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        :param int zpa_id: ID of the ZPA tenant where the Application Segment is configured
        """
        pulumi.set(__self__, "ddescription", ddescription)
        pulumi.set(__self__, "deleted", deleted)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "zpa_id", zpa_id)

    @property
    @pulumi.getter
    def ddescription(self) -> str:
        """
        Additional information about the Application Segment
        """
        return pulumi.get(self, "ddescription")

    @property
    @pulumi.getter
    def deleted(self) -> bool:
        """
        ID of the ZPA tenant where the Application Segment is configured
        """
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="zpaId")
    def zpa_id(self) -> int:
        """
        ID of the ZPA tenant where the Application Segment is configured
        """
        return pulumi.get(self, "zpa_id")


@pulumi.output_type
class GetForwardingControlRuleZpaApplicationSegmentGroupResult(dict):
    def __init__(__self__, *,
                 deleted: bool,
                 id: int,
                 name: str,
                 zpa_app_segments_count: int,
                 zpa_id: int):
        """
        :param bool deleted: Indicates whether the ZPA Application Segment Group has been deleted
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        :param int zpa_app_segments_count: The number of ZPA Application Segments in the group
        :param int zpa_id: Indicates the external ID. Applicable only when this reference is of an external entity.
        """
        pulumi.set(__self__, "deleted", deleted)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "zpa_app_segments_count", zpa_app_segments_count)
        pulumi.set(__self__, "zpa_id", zpa_id)

    @property
    @pulumi.getter
    def deleted(self) -> bool:
        """
        Indicates whether the ZPA Application Segment Group has been deleted
        """
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="zpaAppSegmentsCount")
    def zpa_app_segments_count(self) -> int:
        """
        The number of ZPA Application Segments in the group
        """
        return pulumi.get(self, "zpa_app_segments_count")

    @property
    @pulumi.getter(name="zpaId")
    def zpa_id(self) -> int:
        """
        Indicates the external ID. Applicable only when this reference is of an external entity.
        """
        return pulumi.get(self, "zpa_id")


@pulumi.output_type
class GetForwardingControlRuleZpaGatewayResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: A unique identifier assigned to the forwarding rule.
        :param str name: The name of the forwarding rule.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        A unique identifier assigned to the forwarding rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding rule.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlZPAGatewayLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: The ID of the forwarding control ZPA Gateway resource.
        :param str name: The name of the forwarding control ZPA Gateway to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the forwarding control ZPA Gateway resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding control ZPA Gateway to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlZPAGatewayZpaAppSegmentResult(dict):
    def __init__(__self__, *,
                 external_id: str,
                 name: str):
        """
        :param str external_id: (string) An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        :param str name: The name of the forwarding control ZPA Gateway to be exported.
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        (string) An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding control ZPA Gateway to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetForwardingControlZPAGatewayZpaServerGroupResult(dict):
    def __init__(__self__, *,
                 external_id: str,
                 name: str):
        """
        :param str external_id: (string) An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        :param str name: The name of the forwarding control ZPA Gateway to be exported.
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        """
        (string) An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        """
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the forwarding control ZPA Gateway to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetLocationGroupsDynamicLocationGroupCriteriaResult(dict):
    def __init__(__self__, *,
                 enable_bandwidth_control: bool,
                 enable_caution: bool,
                 enable_xff_forwarding: bool,
                 enforce_aup: bool,
                 enforce_authentication: bool,
                 enforce_firewall_control: bool,
                 managed_bies: Sequence['outputs.GetLocationGroupsDynamicLocationGroupCriteriaManagedByResult'],
                 cities: Optional[Sequence['outputs.GetLocationGroupsDynamicLocationGroupCriteriaCityResult']] = None,
                 countries: Optional[Sequence[str]] = None,
                 names: Optional[Sequence['outputs.GetLocationGroupsDynamicLocationGroupCriteriaNameResult']] = None,
                 profiles: Optional[Sequence[str]] = None):
        """
        :param bool enable_bandwidth_control: (Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.
        :param bool enable_caution: (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
        :param bool enable_xff_forwarding: (Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        :param bool enforce_aup: (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
        :param bool enforce_authentication: (Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        :param bool enforce_firewall_control: (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
        :param Sequence['GetLocationGroupsDynamicLocationGroupCriteriaManagedByArgs'] managed_bies: (Block List)
        :param Sequence['GetLocationGroupsDynamicLocationGroupCriteriaCityArgs'] cities: (Block List)
        :param Sequence[str] countries: (List of String) One or more countries from a predefined set
        :param Sequence['GetLocationGroupsDynamicLocationGroupCriteriaNameArgs'] names: Location group name
        :param Sequence[str] profiles: (List of String) One or more location profiles from a predefined set
        """
        pulumi.set(__self__, "enable_bandwidth_control", enable_bandwidth_control)
        pulumi.set(__self__, "enable_caution", enable_caution)
        pulumi.set(__self__, "enable_xff_forwarding", enable_xff_forwarding)
        pulumi.set(__self__, "enforce_aup", enforce_aup)
        pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        pulumi.set(__self__, "enforce_firewall_control", enforce_firewall_control)
        pulumi.set(__self__, "managed_bies", managed_bies)
        if cities is not None:
            pulumi.set(__self__, "cities", cities)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if names is not None:
            pulumi.set(__self__, "names", names)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)

    @property
    @pulumi.getter(name="enableBandwidthControl")
    def enable_bandwidth_control(self) -> bool:
        """
        (Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.
        """
        return pulumi.get(self, "enable_bandwidth_control")

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> bool:
        """
        (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
        """
        return pulumi.get(self, "enable_caution")

    @property
    @pulumi.getter(name="enableXffForwarding")
    def enable_xff_forwarding(self) -> bool:
        """
        (Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        """
        return pulumi.get(self, "enable_xff_forwarding")

    @property
    @pulumi.getter(name="enforceAup")
    def enforce_aup(self) -> bool:
        """
        (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
        """
        return pulumi.get(self, "enforce_aup")

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> bool:
        """
        (Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        """
        return pulumi.get(self, "enforce_authentication")

    @property
    @pulumi.getter(name="enforceFirewallControl")
    def enforce_firewall_control(self) -> bool:
        """
        (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
        """
        return pulumi.get(self, "enforce_firewall_control")

    @property
    @pulumi.getter(name="managedBies")
    def managed_bies(self) -> Sequence['outputs.GetLocationGroupsDynamicLocationGroupCriteriaManagedByResult']:
        """
        (Block List)
        """
        return pulumi.get(self, "managed_bies")

    @property
    @pulumi.getter
    def cities(self) -> Optional[Sequence['outputs.GetLocationGroupsDynamicLocationGroupCriteriaCityResult']]:
        """
        (Block List)
        """
        return pulumi.get(self, "cities")

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        """
        (List of String) One or more countries from a predefined set
        """
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence['outputs.GetLocationGroupsDynamicLocationGroupCriteriaNameResult']]:
        """
        Location group name
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence[str]]:
        """
        (List of String) One or more location profiles from a predefined set
        """
        return pulumi.get(self, "profiles")


@pulumi.output_type
class GetLocationGroupsDynamicLocationGroupCriteriaCityResult(dict):
    def __init__(__self__, *,
                 match_string: Optional[str] = None,
                 match_type: Optional[str] = None):
        """
        :param str match_string: (String) String value to be matched or partially matched
        :param str match_type: (String) Operator that performs match action
        """
        if match_string is not None:
            pulumi.set(__self__, "match_string", match_string)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[str]:
        """
        (String) String value to be matched or partially matched
        """
        return pulumi.get(self, "match_string")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        """
        (String) Operator that performs match action
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class GetLocationGroupsDynamicLocationGroupCriteriaManagedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the location group
        :param str name: Location group name
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the location group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Location group name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetLocationGroupsDynamicLocationGroupCriteriaNameResult(dict):
    def __init__(__self__, *,
                 match_string: Optional[str] = None,
                 match_type: Optional[str] = None):
        """
        :param str match_string: (String) String value to be matched or partially matched
        :param str match_type: (String) Operator that performs match action
        """
        if match_string is not None:
            pulumi.set(__self__, "match_string", match_string)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[str]:
        """
        (String) String value to be matched or partially matched
        """
        return pulumi.get(self, "match_string")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        """
        (String) Operator that performs match action
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class GetLocationGroupsLastModUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the location group
        :param str name: Location group name
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the location group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Location group name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetLocationGroupsLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the location group
        :param str name: Location group name
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the location group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Location group name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetLocationManagementVpnCredentialResult(dict):
    def __init__(__self__, *,
                 comments: str,
                 fqdn: str,
                 id: int,
                 locations: Sequence['outputs.GetLocationManagementVpnCredentialLocationResult'],
                 managed_bies: Sequence['outputs.GetLocationManagementVpnCredentialManagedByResult'],
                 pre_shared_key: str,
                 type: str):
        """
        :param str comments: (String) Additional information about this VPN credential.
               Additional information about this VPN credential.
        :param str fqdn: (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
        :param int id: The ID of the location to be exported.
        :param Sequence['GetLocationManagementVpnCredentialLocationArgs'] locations: (List of Object)
        :param Sequence['GetLocationManagementVpnCredentialManagedByArgs'] managed_bies: (List of Object)
        :param str pre_shared_key: (String) Pre-shared key. This is a required field for `UFQDN` and IP auth type.
        :param str type: (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "managed_bies", managed_bies)
        pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        (String) Additional information about this VPN credential.
        Additional information about this VPN credential.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the location to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetLocationManagementVpnCredentialLocationResult']:
        """
        (List of Object)
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="managedBies")
    def managed_bies(self) -> Sequence['outputs.GetLocationManagementVpnCredentialManagedByResult']:
        """
        (List of Object)
        """
        return pulumi.get(self, "managed_bies")

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> str:
        """
        (String) Pre-shared key. This is a required field for `UFQDN` and IP auth type.
        """
        return pulumi.get(self, "pre_shared_key")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetLocationManagementVpnCredentialLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: The ID of the location to be exported.
        :param str name: The name of the location to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the location to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the location to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetLocationManagementVpnCredentialManagedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: The ID of the location to be exported.
        :param str name: The name of the location to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the location to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the location to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRuleLabelsCreatedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: The unique identifer for the device group.
        :param str name: The name of the rule label to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique identifer for the device group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the rule label to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRuleLabelsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: The unique identifer for the device group.
        :param str name: The name of the rule label to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique identifer for the device group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the rule label to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSandboxReportClassificationResult(dict):
    def __init__(__self__, *,
                 category: str,
                 detected_malware: str,
                 score: int,
                 type: str):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "detected_malware", detected_malware)
        pulumi.set(__self__, "score", score)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="detectedMalware")
    def detected_malware(self) -> str:
        return pulumi.get(self, "detected_malware")

    @property
    @pulumi.getter
    def score(self) -> int:
        return pulumi.get(self, "score")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSandboxReportExploitResult(dict):
    def __init__(__self__, *,
                 risk: str,
                 signature: str,
                 signature_sources: Sequence[str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> str:
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[str]:
        return pulumi.get(self, "signature_sources")


@pulumi.output_type
class GetSandboxReportFilePropertyResult(dict):
    def __init__(__self__, *,
                 digital_cerificate: str,
                 file_size: int,
                 file_type: str,
                 issuer: str,
                 md5: str,
                 root_ca: str,
                 sha1: str,
                 sha256: str,
                 ssdeep: str):
        pulumi.set(__self__, "digital_cerificate", digital_cerificate)
        pulumi.set(__self__, "file_size", file_size)
        pulumi.set(__self__, "file_type", file_type)
        pulumi.set(__self__, "issuer", issuer)
        pulumi.set(__self__, "md5", md5)
        pulumi.set(__self__, "root_ca", root_ca)
        pulumi.set(__self__, "sha1", sha1)
        pulumi.set(__self__, "sha256", sha256)
        pulumi.set(__self__, "ssdeep", ssdeep)

    @property
    @pulumi.getter(name="digitalCerificate")
    def digital_cerificate(self) -> str:
        return pulumi.get(self, "digital_cerificate")

    @property
    @pulumi.getter(name="fileSize")
    def file_size(self) -> int:
        return pulumi.get(self, "file_size")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> str:
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter
    def md5(self) -> str:
        return pulumi.get(self, "md5")

    @property
    @pulumi.getter(name="rootCa")
    def root_ca(self) -> str:
        return pulumi.get(self, "root_ca")

    @property
    @pulumi.getter
    def sha1(self) -> str:
        return pulumi.get(self, "sha1")

    @property
    @pulumi.getter
    def sha256(self) -> str:
        return pulumi.get(self, "sha256")

    @property
    @pulumi.getter
    def ssdeep(self) -> str:
        return pulumi.get(self, "ssdeep")


@pulumi.output_type
class GetSandboxReportNetworkingResult(dict):
    def __init__(__self__, *,
                 risk: str,
                 signature: str,
                 signature_sources: Sequence[str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> str:
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[str]:
        return pulumi.get(self, "signature_sources")


@pulumi.output_type
class GetSandboxReportOriginResult(dict):
    def __init__(__self__, *,
                 country: str,
                 language: str,
                 risk: str):
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "language", language)
        pulumi.set(__self__, "risk", risk)

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def language(self) -> str:
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def risk(self) -> str:
        return pulumi.get(self, "risk")


@pulumi.output_type
class GetSandboxReportPersistenceResult(dict):
    def __init__(__self__, *,
                 risk: str,
                 signature: str,
                 signature_sources: Sequence[str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> str:
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[str]:
        return pulumi.get(self, "signature_sources")


@pulumi.output_type
class GetSandboxReportSecurityBypassResult(dict):
    def __init__(__self__, *,
                 risk: str,
                 signature: str,
                 signature_sources: Sequence[str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> str:
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[str]:
        return pulumi.get(self, "signature_sources")


@pulumi.output_type
class GetSandboxReportSpywareResult(dict):
    def __init__(__self__, *,
                 risk: str,
                 signature: str,
                 signature_sources: Sequence[str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> str:
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[str]:
        return pulumi.get(self, "signature_sources")


@pulumi.output_type
class GetSandboxReportStealthResult(dict):
    def __init__(__self__, *,
                 risk: str,
                 signature: str,
                 signature_sources: Sequence[str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> str:
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[str]:
        return pulumi.get(self, "signature_sources")


@pulumi.output_type
class GetSandboxReportSummaryResult(dict):
    def __init__(__self__, *,
                 category: str,
                 duration: int,
                 file_type: str,
                 start_time: int,
                 status: str):
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "file_type", file_type)
        pulumi.set(__self__, "start_time", start_time)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def category(self) -> str:
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def duration(self) -> int:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> str:
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> int:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetSandboxReportSystemSummaryResult(dict):
    def __init__(__self__, *,
                 risk: str,
                 signature: str,
                 signature_sources: Sequence[str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> str:
        return pulumi.get(self, "risk")

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[str]:
        return pulumi.get(self, "signature_sources")


@pulumi.output_type
class GetTrafficForwardingGREInternalIPRangeListResult(dict):
    def __init__(__self__, *,
                 end_ip_address: str,
                 start_ip_address: str):
        pulumi.set(__self__, "end_ip_address", end_ip_address)
        pulumi.set(__self__, "start_ip_address", start_ip_address)

    @property
    @pulumi.getter(name="endIpAddress")
    def end_ip_address(self) -> str:
        return pulumi.get(self, "end_ip_address")

    @property
    @pulumi.getter(name="startIpAddress")
    def start_ip_address(self) -> str:
        return pulumi.get(self, "start_ip_address")


@pulumi.output_type
class GetTrafficForwardingGRETunnelLastModifiedByResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingGRETunnelManagedByResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingGRETunnelPrimaryDestVipResult(dict):
    def __init__(__self__, *,
                 city: str,
                 country_code: str,
                 datacenter: str,
                 id: int,
                 latitude: int,
                 longitude: int,
                 private_service_edge: bool,
                 region: str,
                 virtual_ip: str):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "private_service_edge", private_service_edge)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latitude(self) -> int:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> int:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> bool:
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> str:
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class GetTrafficForwardingGRETunnelSecondaryDestVipResult(dict):
    def __init__(__self__, *,
                 city: str,
                 country_code: str,
                 datacenter: str,
                 id: int,
                 latitude: int,
                 longitude: int,
                 private_service_edge: bool,
                 region: str,
                 virtual_ip: str):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "private_service_edge", private_service_edge)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latitude(self) -> int:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> int:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> bool:
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> str:
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class GetTrafficForwardingStaticIPLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: The unique identifier for the static IP address
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique identifier for the static IP address
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingStaticIPManagedByResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: The unique identifier for the static IP address
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique identifier for the static IP address
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingVIPRecommendedListListResult(dict):
    def __init__(__self__, *,
                 city: str,
                 latitude: float,
                 longitude: float,
                 region: str,
                 datacenter: Optional[str] = None,
                 id: Optional[int] = None,
                 private_service_edge: Optional[bool] = None,
                 virtual_ip: Optional[str] = None):
        """
        :param str datacenter: (String) Data center information
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param bool private_service_edge: (Boolean) Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        :param str virtual_ip: (String) GRE cluster virtual IP address (VIP)
        """
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "region", region)
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_service_edge is not None:
            pulumi.set(__self__, "private_service_edge", private_service_edge)
        if virtual_ip is not None:
            pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter
    def latitude(self) -> float:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        """
        (String) Data center information
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> Optional[bool]:
        """
        (Boolean) Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        """
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> Optional[str]:
        """
        (String) GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class GetTrafficForwardingVPNCredentialsLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingVPNCredentialsManagedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLCategoriesScopeResult(dict):
    def __init__(__self__, *,
                 scope_entities: Sequence['outputs.GetURLCategoriesScopeScopeEntityResult'],
                 scope_group_member_entities: Sequence['outputs.GetURLCategoriesScopeScopeGroupMemberEntityResult'],
                 type: str):
        """
        :param Sequence['GetURLCategoriesScopeScopeEntityArgs'] scope_entities: (List of Object)
        :param Sequence['GetURLCategoriesScopeScopeGroupMemberEntityArgs'] scope_group_member_entities: (List of Object) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        :param str type: (String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        pulumi.set(__self__, "scope_entities", scope_entities)
        pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Sequence['outputs.GetURLCategoriesScopeScopeEntityResult']:
        """
        (List of Object)
        """
        return pulumi.get(self, "scope_entities")

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Sequence['outputs.GetURLCategoriesScopeScopeGroupMemberEntityResult']:
        """
        (List of Object) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetURLCategoriesScopeScopeEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL category
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL category
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLCategoriesScopeScopeGroupMemberEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL category
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL category
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLCategoriesUrlKeywordCountResult(dict):
    def __init__(__self__, *,
                 retain_parent_keyword_count: int,
                 retain_parent_url_count: int,
                 total_keyword_count: int,
                 total_url_count: int):
        """
        :param int retain_parent_keyword_count: (Number) Count of total keywords with retain parent category.
        :param int retain_parent_url_count: (Number) Count of URLs with retain parent category.
        :param int total_keyword_count: (Number) Total keyword count for the category.
        :param int total_url_count: (Number) Custom URL count for the category.
        """
        pulumi.set(__self__, "retain_parent_keyword_count", retain_parent_keyword_count)
        pulumi.set(__self__, "retain_parent_url_count", retain_parent_url_count)
        pulumi.set(__self__, "total_keyword_count", total_keyword_count)
        pulumi.set(__self__, "total_url_count", total_url_count)

    @property
    @pulumi.getter(name="retainParentKeywordCount")
    def retain_parent_keyword_count(self) -> int:
        """
        (Number) Count of total keywords with retain parent category.
        """
        return pulumi.get(self, "retain_parent_keyword_count")

    @property
    @pulumi.getter(name="retainParentUrlCount")
    def retain_parent_url_count(self) -> int:
        """
        (Number) Count of URLs with retain parent category.
        """
        return pulumi.get(self, "retain_parent_url_count")

    @property
    @pulumi.getter(name="totalKeywordCount")
    def total_keyword_count(self) -> int:
        """
        (Number) Total keyword count for the category.
        """
        return pulumi.get(self, "total_keyword_count")

    @property
    @pulumi.getter(name="totalUrlCount")
    def total_url_count(self) -> int:
        """
        (Number) Custom URL count for the category.
        """
        return pulumi.get(self, "total_url_count")


@pulumi.output_type
class GetURLFilteringRulesCbiProfileResult(dict):
    def __init__(__self__, *,
                 id: str,
                 name: str,
                 url: str):
        """
        :param str id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        :param str url: (String) The browser isolation profile URL
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        (String) The browser isolation profile URL
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetURLFilteringRulesDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesDeviceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesDeviceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesOverrideGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesOverrideUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesTimeWindowResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesWorkloadGroupResult(dict):
    def __init__(__self__, *,
                 description: str,
                 expression: str,
                 expression_jsons: Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonResult'],
                 id: int,
                 last_modified_bies: Sequence['outputs.GetURLFilteringRulesWorkloadGroupLastModifiedByResult'],
                 last_modified_time: int,
                 name: str):
        """
        :param str description: (String) Additional information about the rule
        :param str expression: The description of the workload group
        :param int id: URL Filtering Rule ID
        :param int last_modified_time: (Number) When the rule was last modified
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "expression_jsons", expression_jsons)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (String) Additional information about the rule
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        The description of the workload group
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="expressionJsons")
    def expression_jsons(self) -> Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonResult']:
        return pulumi.get(self, "expression_jsons")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetURLFilteringRulesWorkloadGroupLastModifiedByResult']:
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> int:
        """
        (Number) When the rule was last modified
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLFilteringRulesWorkloadGroupExpressionJsonResult(dict):
    def __init__(__self__, *,
                 expression_containers: Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerResult']):
        pulumi.set(__self__, "expression_containers", expression_containers)

    @property
    @pulumi.getter(name="expressionContainers")
    def expression_containers(self) -> Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerResult']:
        return pulumi.get(self, "expression_containers")


@pulumi.output_type
class GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 tag_containers: Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult'],
                 tag_type: str):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tag_containers", tag_containers)
        pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tagContainers")
    def tag_containers(self) -> Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult']:
        return pulumi.get(self, "tag_containers")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> str:
        return pulumi.get(self, "tag_type")


@pulumi.output_type
class GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 tags: Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult']):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def operator(self) -> str:
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult']:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetURLFilteringRulesWorkloadGroupExpressionJsonExpressionContainerTagContainerTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetURLFilteringRulesWorkloadGroupLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserManagementDepartmentResult(dict):
    def __init__(__self__, *,
                 comments: str,
                 deleted: bool,
                 id: int,
                 idp_id: int,
                 name: str):
        """
        :param str comments: (String) Additional information about the group
        :param bool deleted: (Boolean) default: `false`
        :param int id: The ID of the time window resource.
        :param int idp_id: (Number) Unique identfier for the identity provider (IdP)
        :param str name: User name. This appears when choosing users for policies.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "deleted", deleted)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idp_id", idp_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        (String) Additional information about the group
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def deleted(self) -> bool:
        """
        (Boolean) default: `false`
        """
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the time window resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> int:
        """
        (Number) Unique identfier for the identity provider (IdP)
        """
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name. This appears when choosing users for policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetUserManagementGroupResult(dict):
    def __init__(__self__, *,
                 comments: str,
                 id: int,
                 idp_id: int,
                 name: str):
        """
        :param str comments: (String) Additional information about the group
        :param int id: The ID of the time window resource.
        :param int idp_id: (Number) Unique identfier for the identity provider (IdP)
        :param str name: User name. This appears when choosing users for policies.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idp_id", idp_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        (String) Additional information about the group
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the time window resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> int:
        """
        (Number) Unique identfier for the identity provider (IdP)
        """
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name. This appears when choosing users for policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetWorkloadGroupsExpressionJsonResult(dict):
    def __init__(__self__, *,
                 expression_containers: Sequence['outputs.GetWorkloadGroupsExpressionJsonExpressionContainerResult']):
        """
        :param Sequence['GetWorkloadGroupsExpressionJsonExpressionContainerArgs'] expression_containers: (List) Contains one or more tag types (and associated tags) combined using logical operators within a workload group
        """
        pulumi.set(__self__, "expression_containers", expression_containers)

    @property
    @pulumi.getter(name="expressionContainers")
    def expression_containers(self) -> Sequence['outputs.GetWorkloadGroupsExpressionJsonExpressionContainerResult']:
        """
        (List) Contains one or more tag types (and associated tags) combined using logical operators within a workload group
        """
        return pulumi.get(self, "expression_containers")


@pulumi.output_type
class GetWorkloadGroupsExpressionJsonExpressionContainerResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 tag_containers: Sequence['outputs.GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerResult'],
                 tag_type: str):
        """
        :param str operator: (String) The operator (either AND or OR) used to create logical relationships among tag types. Returned values are: ``AND``, ``OR``, ``OPEN_PARENTHESES``, ``CLOSE_PARENTHESES``
        :param Sequence['GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerArgs'] tag_containers: (String) Contains one or more tags and the logical operator used to combine the tags within a tag type ``CLOSE_PARENTHESES``
        :param str tag_type: (String) The tag type selected from a predefined list. Returned values are: ``ANY``, ``VPC``, ``SUBNET``, ``VM``, ``ENI``, ``ATTR``
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tag_containers", tag_containers)
        pulumi.set(__self__, "tag_type", tag_type)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        (String) The operator (either AND or OR) used to create logical relationships among tag types. Returned values are: ``AND``, ``OR``, ``OPEN_PARENTHESES``, ``CLOSE_PARENTHESES``
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tagContainers")
    def tag_containers(self) -> Sequence['outputs.GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerResult']:
        """
        (String) Contains one or more tags and the logical operator used to combine the tags within a tag type ``CLOSE_PARENTHESES``
        """
        return pulumi.get(self, "tag_containers")

    @property
    @pulumi.getter(name="tagType")
    def tag_type(self) -> str:
        """
        (String) The tag type selected from a predefined list. Returned values are: ``ANY``, ``VPC``, ``SUBNET``, ``VM``, ``ENI``, ``ATTR``
        """
        return pulumi.get(self, "tag_type")


@pulumi.output_type
class GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerResult(dict):
    def __init__(__self__, *,
                 operator: str,
                 tags: Sequence['outputs.GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerTagResult']):
        """
        :param str operator: (String) The operator (either AND or OR) used to create logical relationships among tag types. Returned values are: ``AND``, ``OR``, ``OPEN_PARENTHESES``, ``CLOSE_PARENTHESES``
        :param Sequence['GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerTagArgs'] tags: (String) One or more tags, each consisting of a key-value pair, selected within a tag type. If multiple tags are present within a tag type, they are combined using a logical operator. Note: A maximum of 8 tags can be added to a workload group, irrespective of the number of tag types present.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        (String) The operator (either AND or OR) used to create logical relationships among tag types. Returned values are: ``AND``, ``OR``, ``OPEN_PARENTHESES``, ``CLOSE_PARENTHESES``
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerTagResult']:
        """
        (String) One or more tags, each consisting of a key-value pair, selected within a tag type. If multiple tags are present within a tag type, they are combined using a logical operator. Note: A maximum of 8 tags can be added to a workload group, irrespective of the number of tag types present.
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetWorkloadGroupsExpressionJsonExpressionContainerTagContainerTagResult(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: (String) The key component present in the key-value pair contained in a tag
        :param str value: (string) The value component present in the key-value pair contained in a tag
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (String) The key component present in the key-value pair contained in a tag
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        (string) The value component present in the key-value pair contained in a tag
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetWorkloadGroupsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 external_id: str,
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: The unique identifer for the workload group.
        :param str name: The name of the workload group to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> str:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique identifer for the workload group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the workload group to be exported.
        """
        return pulumi.get(self, "name")


