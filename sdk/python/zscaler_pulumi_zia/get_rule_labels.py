# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetRuleLabelsResult',
    'AwaitableGetRuleLabelsResult',
    'get_rule_labels',
    'get_rule_labels_output',
]

@pulumi.output_type
class GetRuleLabelsResult:
    """
    A collection of values returned by getRuleLabels.
    """
    def __init__(__self__, created_bies=None, description=None, id=None, last_modified_bies=None, last_modified_time=None, name=None, referenced_rule_count=None):
        if created_bies and not isinstance(created_bies, list):
            raise TypeError("Expected argument 'created_bies' to be a list")
        pulumi.set(__self__, "created_bies", created_bies)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if last_modified_bies and not isinstance(last_modified_bies, list):
            raise TypeError("Expected argument 'last_modified_bies' to be a list")
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        if last_modified_time and not isinstance(last_modified_time, int):
            raise TypeError("Expected argument 'last_modified_time' to be a int")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if referenced_rule_count and not isinstance(referenced_rule_count, int):
            raise TypeError("Expected argument 'referenced_rule_count' to be a int")
        pulumi.set(__self__, "referenced_rule_count", referenced_rule_count)

    @property
    @pulumi.getter(name="createdBies")
    def created_bies(self) -> Sequence['outputs.GetRuleLabelsCreatedByResult']:
        """
        (String) The admin that created the rule label. This is a read-only field. Ignored by PUT requests.
        """
        return pulumi.get(self, "created_bies")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (String) The rule label description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetRuleLabelsLastModifiedByResult']:
        """
        (String) The admin that modified the rule label last. This is a read-only field. Ignored by PUT requests.
        """
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> int:
        """
        (String) Timestamp when the rule lable was last modified. This is a read-only field. Ignored by PUT and DELETE requests.
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="referencedRuleCount")
    def referenced_rule_count(self) -> int:
        """
        (int) The number of rules that reference the label.
        """
        return pulumi.get(self, "referenced_rule_count")


class AwaitableGetRuleLabelsResult(GetRuleLabelsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRuleLabelsResult(
            created_bies=self.created_bies,
            description=self.description,
            id=self.id,
            last_modified_bies=self.last_modified_bies,
            last_modified_time=self.last_modified_time,
            name=self.name,
            referenced_rule_count=self.referenced_rule_count)


def get_rule_labels(id: Optional[int] = None,
                    name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRuleLabelsResult:
    """
    Use the **zia_rule_labels** data source to get information about a rule label resource in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: Firewall Rules and URL filtering rules

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    example = zia.get_rule_labels(name="Example")
    ```
    <!--End PulumiCodeChooser -->


    :param int id: The unique identifer for the device group.
    :param str name: The name of the rule label to be exported.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getRuleLabels:getRuleLabels', __args__, opts=opts, typ=GetRuleLabelsResult).value

    return AwaitableGetRuleLabelsResult(
        created_bies=pulumi.get(__ret__, 'created_bies'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        last_modified_bies=pulumi.get(__ret__, 'last_modified_bies'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        name=pulumi.get(__ret__, 'name'),
        referenced_rule_count=pulumi.get(__ret__, 'referenced_rule_count'))


@_utilities.lift_output_func(get_rule_labels)
def get_rule_labels_output(id: Optional[pulumi.Input[Optional[int]]] = None,
                           name: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRuleLabelsResult]:
    """
    Use the **zia_rule_labels** data source to get information about a rule label resource in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: Firewall Rules and URL filtering rules

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    example = zia.get_rule_labels(name="Example")
    ```
    <!--End PulumiCodeChooser -->


    :param int id: The unique identifer for the device group.
    :param str name: The name of the rule label to be exported.
    """
    ...
