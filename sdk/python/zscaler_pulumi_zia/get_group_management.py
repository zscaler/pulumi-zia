# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetGroupManagementResult',
    'AwaitableGetGroupManagementResult',
    'get_group_management',
    'get_group_management_output',
]

@pulumi.output_type
class GetGroupManagementResult:
    """
    A collection of values returned by getGroupManagement.
    """
    def __init__(__self__, comments=None, id=None, idp_id=None, name=None):
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if idp_id and not isinstance(idp_id, int):
            raise TypeError("Expected argument 'idp_id' to be a int")
        pulumi.set(__self__, "idp_id", idp_id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comments(self) -> builtins.str:
        """
        (Optional) Additional information about the group
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> builtins.int:
        """
        (Optional) Unique identfier for the identity provider (IdP)
        """
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "name")


class AwaitableGetGroupManagementResult(GetGroupManagementResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupManagementResult(
            comments=self.comments,
            id=self.id,
            idp_id=self.idp_id,
            name=self.name)


def get_group_management(name: Optional[builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupManagementResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/user-management#/groups-get)
    * [API documentation](https://help.zscaler.com/zia/user-management#/groups-get)

    Use the **zia_group_management** data source to get information about a user group that may have been created in the Zscaler Internet Access portal. This data source can then be associated with a ZIA cloud firewall filtering rule, and URL filtering rules.

    ## Example Usage


    :param builtins.str name: Name of the user group
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getGroupManagement:getGroupManagement', __args__, opts=opts, typ=GetGroupManagementResult).value

    return AwaitableGetGroupManagementResult(
        comments=pulumi.get(__ret__, 'comments'),
        id=pulumi.get(__ret__, 'id'),
        idp_id=pulumi.get(__ret__, 'idp_id'),
        name=pulumi.get(__ret__, 'name'))
def get_group_management_output(name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGroupManagementResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/user-management#/groups-get)
    * [API documentation](https://help.zscaler.com/zia/user-management#/groups-get)

    Use the **zia_group_management** data source to get information about a user group that may have been created in the Zscaler Internet Access portal. This data source can then be associated with a ZIA cloud firewall filtering rule, and URL filtering rules.

    ## Example Usage


    :param builtins.str name: Name of the user group
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getGroupManagement:getGroupManagement', __args__, opts=opts, typ=GetGroupManagementResult)
    return __ret__.apply(lambda __response__: GetGroupManagementResult(
        comments=pulumi.get(__response__, 'comments'),
        id=pulumi.get(__response__, 'id'),
        idp_id=pulumi.get(__response__, 'idp_id'),
        name=pulumi.get(__response__, 'name')))
