# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ForwardingControlRuleArgs', 'ForwardingControlRule']

@pulumi.input_type
class ForwardingControlRuleArgs:
    def __init__(__self__, *,
                 forward_method: pulumi.Input[str],
                 order: pulumi.Input[int],
                 app_service_groups: Optional[pulumi.Input['ForwardingControlRuleAppServiceGroupsArgs']] = None,
                 departments: Optional[pulumi.Input['ForwardingControlRuleDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input['ForwardingControlRuleDestIpGroupsArgs']] = None,
                 dest_ipv6_groups: Optional[pulumi.Input['ForwardingControlRuleDestIpv6GroupsArgs']] = None,
                 ec_groups: Optional[pulumi.Input['ForwardingControlRuleEcGroupsArgs']] = None,
                 groups: Optional[pulumi.Input['ForwardingControlRuleGroupsArgs']] = None,
                 labels: Optional[pulumi.Input['ForwardingControlRuleLabelsArgs']] = None,
                 location_groups: Optional[pulumi.Input['ForwardingControlRuleLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['ForwardingControlRuleLocationsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nw_application_groups: Optional[pulumi.Input['ForwardingControlRuleNwApplicationGroupsArgs']] = None,
                 nw_service_groups: Optional[pulumi.Input['ForwardingControlRuleNwServiceGroupsArgs']] = None,
                 nw_services: Optional[pulumi.Input['ForwardingControlRuleNwServicesArgs']] = None,
                 proxy_gateway: Optional[pulumi.Input['ForwardingControlRuleProxyGatewayArgs']] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 src_ip_groups: Optional[pulumi.Input['ForwardingControlRuleSrcIpGroupsArgs']] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input['ForwardingControlRuleSrcIpv6GroupsArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input['ForwardingControlRuleUsersArgs']] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlRuleZpaAppSegmentArgs']]]] = None,
                 zpa_application_segment_groups: Optional[pulumi.Input['ForwardingControlRuleZpaApplicationSegmentGroupsArgs']] = None,
                 zpa_application_segments: Optional[pulumi.Input['ForwardingControlRuleZpaApplicationSegmentsArgs']] = None,
                 zpa_gateway: Optional[pulumi.Input['ForwardingControlRuleZpaGatewayArgs']] = None):
        """
        The set of arguments for constructing a ForwardingControlRule resource.
        :param pulumi.Input[str] forward_method: The type of traffic forwarding method selected from the available options.
        :param pulumi.Input[int] order: Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        :param pulumi.Input['ForwardingControlRuleAppServiceGroupsArgs'] app_service_groups: (list) - Application service groups on which this rule is applied
        :param pulumi.Input['ForwardingControlRuleDepartmentsArgs'] departments: (list) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        :param pulumi.Input[str] description: (string) - Additional information about the forwarding rule
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_addresses: ** - (list) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_countries: ** - (list) estination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries. Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_ip_categories: ** - (list) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        :param pulumi.Input['ForwardingControlRuleDestIpGroupsArgs'] dest_ip_groups: ** - (list) Any number of destination IP address groups that you want to control with this rule.
        :param pulumi.Input['ForwardingControlRuleDestIpv6GroupsArgs'] dest_ipv6_groups: ** - (list) Destination IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        :param pulumi.Input['ForwardingControlRuleEcGroupsArgs'] ec_groups: (list) - Name-ID pairs of the Zscaler Cloud Connector groups to which the forwarding rule applies
        :param pulumi.Input['ForwardingControlRuleGroupsArgs'] groups: (list) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input['ForwardingControlRuleLabelsArgs'] labels: (list) Labels that are applicable to the rule.
        :param pulumi.Input['ForwardingControlRuleLocationGroupsArgs'] location_groups: (Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input['ForwardingControlRuleLocationsArgs'] locations: (Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[str] name: Name of the Firewall Filtering policy rule
        :param pulumi.Input['ForwardingControlRuleNwApplicationGroupsArgs'] nw_application_groups: (list) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        :param pulumi.Input['ForwardingControlRuleNwServiceGroupsArgs'] nw_service_groups: (list) Any number of predefined or custom network service groups to which the rule applies.
        :param pulumi.Input['ForwardingControlRuleNwServicesArgs'] nw_services: (list) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        :param pulumi.Input['ForwardingControlRuleProxyGatewayArgs'] proxy_gateway: (set) The proxy gateway for which the rule is applicable. This field is applicable only for the `PROXYCHAIN` forwarding method.
        :param pulumi.Input[int] rank: Admin rank assigned to the forwarding rule
        :param pulumi.Input[Sequence[pulumi.Input[str]]] res_categories: ** - (list) List of destination domain categories to which the rule applies.
        :param pulumi.Input['ForwardingControlRuleSrcIpGroupsArgs'] src_ip_groups: (list) Any number of source IP address groups that you want to control with this rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] src_ips: (Optional) You can enter individual IP addresses, subnets, or address ranges.
        :param pulumi.Input['ForwardingControlRuleSrcIpv6GroupsArgs'] src_ipv6_groups: (list) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        :param pulumi.Input[str] state: (string) - Indicates whether the forwarding rule is enabled or disabled. Supported values are: `ENABLED` and `DISABLED`.
        :param pulumi.Input[str] type: The rule type selected from the available options. Supported Values: ``FORWARDING``
        :param pulumi.Input['ForwardingControlRuleUsersArgs'] users: (list) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[Sequence[pulumi.Input['ForwardingControlRuleZpaAppSegmentArgs']]] zpa_app_segments: (set) The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ZPA` Gateway forwarding method.
        :param pulumi.Input['ForwardingControlRuleZpaApplicationSegmentGroupsArgs'] zpa_application_segment_groups: (set) List of ZPA Application Segment Groups for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        :param pulumi.Input['ForwardingControlRuleZpaApplicationSegmentsArgs'] zpa_application_segments: (set) List of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        :param pulumi.Input['ForwardingControlRuleZpaGatewayArgs'] zpa_gateway: (set) The ZPA Gateway for which this rule is applicable. This field is applicable only for the `ZPA` forwarding method.
        """
        pulumi.set(__self__, "forward_method", forward_method)
        pulumi.set(__self__, "order", order)
        if app_service_groups is not None:
            pulumi.set(__self__, "app_service_groups", app_service_groups)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dest_addresses is not None:
            pulumi.set(__self__, "dest_addresses", dest_addresses)
        if dest_countries is not None:
            pulumi.set(__self__, "dest_countries", dest_countries)
        if dest_ip_categories is not None:
            pulumi.set(__self__, "dest_ip_categories", dest_ip_categories)
        if dest_ip_groups is not None:
            pulumi.set(__self__, "dest_ip_groups", dest_ip_groups)
        if dest_ipv6_groups is not None:
            pulumi.set(__self__, "dest_ipv6_groups", dest_ipv6_groups)
        if ec_groups is not None:
            pulumi.set(__self__, "ec_groups", ec_groups)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nw_application_groups is not None:
            pulumi.set(__self__, "nw_application_groups", nw_application_groups)
        if nw_service_groups is not None:
            pulumi.set(__self__, "nw_service_groups", nw_service_groups)
        if nw_services is not None:
            pulumi.set(__self__, "nw_services", nw_services)
        if proxy_gateway is not None:
            pulumi.set(__self__, "proxy_gateway", proxy_gateway)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if res_categories is not None:
            pulumi.set(__self__, "res_categories", res_categories)
        if src_ip_groups is not None:
            pulumi.set(__self__, "src_ip_groups", src_ip_groups)
        if src_ips is not None:
            pulumi.set(__self__, "src_ips", src_ips)
        if src_ipv6_groups is not None:
            pulumi.set(__self__, "src_ipv6_groups", src_ipv6_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if zpa_app_segments is not None:
            pulumi.set(__self__, "zpa_app_segments", zpa_app_segments)
        if zpa_application_segment_groups is not None:
            pulumi.set(__self__, "zpa_application_segment_groups", zpa_application_segment_groups)
        if zpa_application_segments is not None:
            pulumi.set(__self__, "zpa_application_segments", zpa_application_segments)
        if zpa_gateway is not None:
            pulumi.set(__self__, "zpa_gateway", zpa_gateway)

    @property
    @pulumi.getter(name="forwardMethod")
    def forward_method(self) -> pulumi.Input[str]:
        """
        The type of traffic forwarding method selected from the available options.
        """
        return pulumi.get(self, "forward_method")

    @forward_method.setter
    def forward_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "forward_method", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        """
        Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="appServiceGroups")
    def app_service_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleAppServiceGroupsArgs']]:
        """
        (list) - Application service groups on which this rule is applied
        """
        return pulumi.get(self, "app_service_groups")

    @app_service_groups.setter
    def app_service_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleAppServiceGroupsArgs']]):
        pulumi.set(self, "app_service_groups", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['ForwardingControlRuleDepartmentsArgs']]:
        """
        (list) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['ForwardingControlRuleDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (string) - Additional information about the forwarding rule
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ** - (list) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        """
        return pulumi.get(self, "dest_addresses")

    @dest_addresses.setter
    def dest_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dest_addresses", value)

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ** - (list) estination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries. Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).
        """
        return pulumi.get(self, "dest_countries")

    @dest_countries.setter
    def dest_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dest_countries", value)

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ** - (list) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        """
        return pulumi.get(self, "dest_ip_categories")

    @dest_ip_categories.setter
    def dest_ip_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dest_ip_categories", value)

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleDestIpGroupsArgs']]:
        """
        ** - (list) Any number of destination IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "dest_ip_groups")

    @dest_ip_groups.setter
    def dest_ip_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleDestIpGroupsArgs']]):
        pulumi.set(self, "dest_ip_groups", value)

    @property
    @pulumi.getter(name="destIpv6Groups")
    def dest_ipv6_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleDestIpv6GroupsArgs']]:
        """
        ** - (list) Destination IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        """
        return pulumi.get(self, "dest_ipv6_groups")

    @dest_ipv6_groups.setter
    def dest_ipv6_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleDestIpv6GroupsArgs']]):
        pulumi.set(self, "dest_ipv6_groups", value)

    @property
    @pulumi.getter(name="ecGroups")
    def ec_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleEcGroupsArgs']]:
        """
        (list) - Name-ID pairs of the Zscaler Cloud Connector groups to which the forwarding rule applies
        """
        return pulumi.get(self, "ec_groups")

    @ec_groups.setter
    def ec_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleEcGroupsArgs']]):
        pulumi.set(self, "ec_groups", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['ForwardingControlRuleGroupsArgs']]:
        """
        (list) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['ForwardingControlRuleGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['ForwardingControlRuleLabelsArgs']]:
        """
        (list) Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['ForwardingControlRuleLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleLocationGroupsArgs']]:
        """
        (Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['ForwardingControlRuleLocationsArgs']]:
        """
        (Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['ForwardingControlRuleLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nwApplicationGroups")
    def nw_application_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleNwApplicationGroupsArgs']]:
        """
        (list) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        """
        return pulumi.get(self, "nw_application_groups")

    @nw_application_groups.setter
    def nw_application_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleNwApplicationGroupsArgs']]):
        pulumi.set(self, "nw_application_groups", value)

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleNwServiceGroupsArgs']]:
        """
        (list) Any number of predefined or custom network service groups to which the rule applies.
        """
        return pulumi.get(self, "nw_service_groups")

    @nw_service_groups.setter
    def nw_service_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleNwServiceGroupsArgs']]):
        pulumi.set(self, "nw_service_groups", value)

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> Optional[pulumi.Input['ForwardingControlRuleNwServicesArgs']]:
        """
        (list) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        """
        return pulumi.get(self, "nw_services")

    @nw_services.setter
    def nw_services(self, value: Optional[pulumi.Input['ForwardingControlRuleNwServicesArgs']]):
        pulumi.set(self, "nw_services", value)

    @property
    @pulumi.getter(name="proxyGateway")
    def proxy_gateway(self) -> Optional[pulumi.Input['ForwardingControlRuleProxyGatewayArgs']]:
        """
        (set) The proxy gateway for which the rule is applicable. This field is applicable only for the `PROXYCHAIN` forwarding method.
        """
        return pulumi.get(self, "proxy_gateway")

    @proxy_gateway.setter
    def proxy_gateway(self, value: Optional[pulumi.Input['ForwardingControlRuleProxyGatewayArgs']]):
        pulumi.set(self, "proxy_gateway", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[int]]:
        """
        Admin rank assigned to the forwarding rule
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="resCategories")
    def res_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ** - (list) List of destination domain categories to which the rule applies.
        """
        return pulumi.get(self, "res_categories")

    @res_categories.setter
    def res_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "res_categories", value)

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleSrcIpGroupsArgs']]:
        """
        (list) Any number of source IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "src_ip_groups")

    @src_ip_groups.setter
    def src_ip_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleSrcIpGroupsArgs']]):
        pulumi.set(self, "src_ip_groups", value)

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional) You can enter individual IP addresses, subnets, or address ranges.
        """
        return pulumi.get(self, "src_ips")

    @src_ips.setter
    def src_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "src_ips", value)

    @property
    @pulumi.getter(name="srcIpv6Groups")
    def src_ipv6_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleSrcIpv6GroupsArgs']]:
        """
        (list) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        """
        return pulumi.get(self, "src_ipv6_groups")

    @src_ipv6_groups.setter
    def src_ipv6_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleSrcIpv6GroupsArgs']]):
        pulumi.set(self, "src_ipv6_groups", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        (string) - Indicates whether the forwarding rule is enabled or disabled. Supported values are: `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The rule type selected from the available options. Supported Values: ``FORWARDING``
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['ForwardingControlRuleUsersArgs']]:
        """
        (list) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['ForwardingControlRuleUsersArgs']]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="zpaAppSegments")
    def zpa_app_segments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlRuleZpaAppSegmentArgs']]]]:
        """
        (set) The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ZPA` Gateway forwarding method.
        """
        return pulumi.get(self, "zpa_app_segments")

    @zpa_app_segments.setter
    def zpa_app_segments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlRuleZpaAppSegmentArgs']]]]):
        pulumi.set(self, "zpa_app_segments", value)

    @property
    @pulumi.getter(name="zpaApplicationSegmentGroups")
    def zpa_application_segment_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleZpaApplicationSegmentGroupsArgs']]:
        """
        (set) List of ZPA Application Segment Groups for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        """
        return pulumi.get(self, "zpa_application_segment_groups")

    @zpa_application_segment_groups.setter
    def zpa_application_segment_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleZpaApplicationSegmentGroupsArgs']]):
        pulumi.set(self, "zpa_application_segment_groups", value)

    @property
    @pulumi.getter(name="zpaApplicationSegments")
    def zpa_application_segments(self) -> Optional[pulumi.Input['ForwardingControlRuleZpaApplicationSegmentsArgs']]:
        """
        (set) List of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        """
        return pulumi.get(self, "zpa_application_segments")

    @zpa_application_segments.setter
    def zpa_application_segments(self, value: Optional[pulumi.Input['ForwardingControlRuleZpaApplicationSegmentsArgs']]):
        pulumi.set(self, "zpa_application_segments", value)

    @property
    @pulumi.getter(name="zpaGateway")
    def zpa_gateway(self) -> Optional[pulumi.Input['ForwardingControlRuleZpaGatewayArgs']]:
        """
        (set) The ZPA Gateway for which this rule is applicable. This field is applicable only for the `ZPA` forwarding method.
        """
        return pulumi.get(self, "zpa_gateway")

    @zpa_gateway.setter
    def zpa_gateway(self, value: Optional[pulumi.Input['ForwardingControlRuleZpaGatewayArgs']]):
        pulumi.set(self, "zpa_gateway", value)


@pulumi.input_type
class _ForwardingControlRuleState:
    def __init__(__self__, *,
                 app_service_groups: Optional[pulumi.Input['ForwardingControlRuleAppServiceGroupsArgs']] = None,
                 departments: Optional[pulumi.Input['ForwardingControlRuleDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input['ForwardingControlRuleDestIpGroupsArgs']] = None,
                 dest_ipv6_groups: Optional[pulumi.Input['ForwardingControlRuleDestIpv6GroupsArgs']] = None,
                 ec_groups: Optional[pulumi.Input['ForwardingControlRuleEcGroupsArgs']] = None,
                 forward_method: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input['ForwardingControlRuleGroupsArgs']] = None,
                 labels: Optional[pulumi.Input['ForwardingControlRuleLabelsArgs']] = None,
                 location_groups: Optional[pulumi.Input['ForwardingControlRuleLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['ForwardingControlRuleLocationsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nw_application_groups: Optional[pulumi.Input['ForwardingControlRuleNwApplicationGroupsArgs']] = None,
                 nw_service_groups: Optional[pulumi.Input['ForwardingControlRuleNwServiceGroupsArgs']] = None,
                 nw_services: Optional[pulumi.Input['ForwardingControlRuleNwServicesArgs']] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 proxy_gateway: Optional[pulumi.Input['ForwardingControlRuleProxyGatewayArgs']] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 src_ip_groups: Optional[pulumi.Input['ForwardingControlRuleSrcIpGroupsArgs']] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input['ForwardingControlRuleSrcIpv6GroupsArgs']] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input['ForwardingControlRuleUsersArgs']] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlRuleZpaAppSegmentArgs']]]] = None,
                 zpa_application_segment_groups: Optional[pulumi.Input['ForwardingControlRuleZpaApplicationSegmentGroupsArgs']] = None,
                 zpa_application_segments: Optional[pulumi.Input['ForwardingControlRuleZpaApplicationSegmentsArgs']] = None,
                 zpa_gateway: Optional[pulumi.Input['ForwardingControlRuleZpaGatewayArgs']] = None):
        """
        Input properties used for looking up and filtering ForwardingControlRule resources.
        :param pulumi.Input['ForwardingControlRuleAppServiceGroupsArgs'] app_service_groups: (list) - Application service groups on which this rule is applied
        :param pulumi.Input['ForwardingControlRuleDepartmentsArgs'] departments: (list) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        :param pulumi.Input[str] description: (string) - Additional information about the forwarding rule
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_addresses: ** - (list) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_countries: ** - (list) estination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries. Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_ip_categories: ** - (list) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        :param pulumi.Input['ForwardingControlRuleDestIpGroupsArgs'] dest_ip_groups: ** - (list) Any number of destination IP address groups that you want to control with this rule.
        :param pulumi.Input['ForwardingControlRuleDestIpv6GroupsArgs'] dest_ipv6_groups: ** - (list) Destination IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        :param pulumi.Input['ForwardingControlRuleEcGroupsArgs'] ec_groups: (list) - Name-ID pairs of the Zscaler Cloud Connector groups to which the forwarding rule applies
        :param pulumi.Input[str] forward_method: The type of traffic forwarding method selected from the available options.
        :param pulumi.Input['ForwardingControlRuleGroupsArgs'] groups: (list) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input['ForwardingControlRuleLabelsArgs'] labels: (list) Labels that are applicable to the rule.
        :param pulumi.Input['ForwardingControlRuleLocationGroupsArgs'] location_groups: (Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input['ForwardingControlRuleLocationsArgs'] locations: (Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[str] name: Name of the Firewall Filtering policy rule
        :param pulumi.Input['ForwardingControlRuleNwApplicationGroupsArgs'] nw_application_groups: (list) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        :param pulumi.Input['ForwardingControlRuleNwServiceGroupsArgs'] nw_service_groups: (list) Any number of predefined or custom network service groups to which the rule applies.
        :param pulumi.Input['ForwardingControlRuleNwServicesArgs'] nw_services: (list) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        :param pulumi.Input[int] order: Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        :param pulumi.Input['ForwardingControlRuleProxyGatewayArgs'] proxy_gateway: (set) The proxy gateway for which the rule is applicable. This field is applicable only for the `PROXYCHAIN` forwarding method.
        :param pulumi.Input[int] rank: Admin rank assigned to the forwarding rule
        :param pulumi.Input[Sequence[pulumi.Input[str]]] res_categories: ** - (list) List of destination domain categories to which the rule applies.
        :param pulumi.Input[int] rule_id: A unique identifier assigned to the forwarding rule
        :param pulumi.Input['ForwardingControlRuleSrcIpGroupsArgs'] src_ip_groups: (list) Any number of source IP address groups that you want to control with this rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] src_ips: (Optional) You can enter individual IP addresses, subnets, or address ranges.
        :param pulumi.Input['ForwardingControlRuleSrcIpv6GroupsArgs'] src_ipv6_groups: (list) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        :param pulumi.Input[str] state: (string) - Indicates whether the forwarding rule is enabled or disabled. Supported values are: `ENABLED` and `DISABLED`.
        :param pulumi.Input[str] type: The rule type selected from the available options. Supported Values: ``FORWARDING``
        :param pulumi.Input['ForwardingControlRuleUsersArgs'] users: (list) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[Sequence[pulumi.Input['ForwardingControlRuleZpaAppSegmentArgs']]] zpa_app_segments: (set) The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ZPA` Gateway forwarding method.
        :param pulumi.Input['ForwardingControlRuleZpaApplicationSegmentGroupsArgs'] zpa_application_segment_groups: (set) List of ZPA Application Segment Groups for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        :param pulumi.Input['ForwardingControlRuleZpaApplicationSegmentsArgs'] zpa_application_segments: (set) List of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        :param pulumi.Input['ForwardingControlRuleZpaGatewayArgs'] zpa_gateway: (set) The ZPA Gateway for which this rule is applicable. This field is applicable only for the `ZPA` forwarding method.
        """
        if app_service_groups is not None:
            pulumi.set(__self__, "app_service_groups", app_service_groups)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dest_addresses is not None:
            pulumi.set(__self__, "dest_addresses", dest_addresses)
        if dest_countries is not None:
            pulumi.set(__self__, "dest_countries", dest_countries)
        if dest_ip_categories is not None:
            pulumi.set(__self__, "dest_ip_categories", dest_ip_categories)
        if dest_ip_groups is not None:
            pulumi.set(__self__, "dest_ip_groups", dest_ip_groups)
        if dest_ipv6_groups is not None:
            pulumi.set(__self__, "dest_ipv6_groups", dest_ipv6_groups)
        if ec_groups is not None:
            pulumi.set(__self__, "ec_groups", ec_groups)
        if forward_method is not None:
            pulumi.set(__self__, "forward_method", forward_method)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nw_application_groups is not None:
            pulumi.set(__self__, "nw_application_groups", nw_application_groups)
        if nw_service_groups is not None:
            pulumi.set(__self__, "nw_service_groups", nw_service_groups)
        if nw_services is not None:
            pulumi.set(__self__, "nw_services", nw_services)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if proxy_gateway is not None:
            pulumi.set(__self__, "proxy_gateway", proxy_gateway)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if res_categories is not None:
            pulumi.set(__self__, "res_categories", res_categories)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if src_ip_groups is not None:
            pulumi.set(__self__, "src_ip_groups", src_ip_groups)
        if src_ips is not None:
            pulumi.set(__self__, "src_ips", src_ips)
        if src_ipv6_groups is not None:
            pulumi.set(__self__, "src_ipv6_groups", src_ipv6_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if zpa_app_segments is not None:
            pulumi.set(__self__, "zpa_app_segments", zpa_app_segments)
        if zpa_application_segment_groups is not None:
            pulumi.set(__self__, "zpa_application_segment_groups", zpa_application_segment_groups)
        if zpa_application_segments is not None:
            pulumi.set(__self__, "zpa_application_segments", zpa_application_segments)
        if zpa_gateway is not None:
            pulumi.set(__self__, "zpa_gateway", zpa_gateway)

    @property
    @pulumi.getter(name="appServiceGroups")
    def app_service_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleAppServiceGroupsArgs']]:
        """
        (list) - Application service groups on which this rule is applied
        """
        return pulumi.get(self, "app_service_groups")

    @app_service_groups.setter
    def app_service_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleAppServiceGroupsArgs']]):
        pulumi.set(self, "app_service_groups", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['ForwardingControlRuleDepartmentsArgs']]:
        """
        (list) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['ForwardingControlRuleDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (string) - Additional information about the forwarding rule
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ** - (list) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        """
        return pulumi.get(self, "dest_addresses")

    @dest_addresses.setter
    def dest_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dest_addresses", value)

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ** - (list) estination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries. Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).
        """
        return pulumi.get(self, "dest_countries")

    @dest_countries.setter
    def dest_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dest_countries", value)

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ** - (list) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        """
        return pulumi.get(self, "dest_ip_categories")

    @dest_ip_categories.setter
    def dest_ip_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dest_ip_categories", value)

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleDestIpGroupsArgs']]:
        """
        ** - (list) Any number of destination IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "dest_ip_groups")

    @dest_ip_groups.setter
    def dest_ip_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleDestIpGroupsArgs']]):
        pulumi.set(self, "dest_ip_groups", value)

    @property
    @pulumi.getter(name="destIpv6Groups")
    def dest_ipv6_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleDestIpv6GroupsArgs']]:
        """
        ** - (list) Destination IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        """
        return pulumi.get(self, "dest_ipv6_groups")

    @dest_ipv6_groups.setter
    def dest_ipv6_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleDestIpv6GroupsArgs']]):
        pulumi.set(self, "dest_ipv6_groups", value)

    @property
    @pulumi.getter(name="ecGroups")
    def ec_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleEcGroupsArgs']]:
        """
        (list) - Name-ID pairs of the Zscaler Cloud Connector groups to which the forwarding rule applies
        """
        return pulumi.get(self, "ec_groups")

    @ec_groups.setter
    def ec_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleEcGroupsArgs']]):
        pulumi.set(self, "ec_groups", value)

    @property
    @pulumi.getter(name="forwardMethod")
    def forward_method(self) -> Optional[pulumi.Input[str]]:
        """
        The type of traffic forwarding method selected from the available options.
        """
        return pulumi.get(self, "forward_method")

    @forward_method.setter
    def forward_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forward_method", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['ForwardingControlRuleGroupsArgs']]:
        """
        (list) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['ForwardingControlRuleGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['ForwardingControlRuleLabelsArgs']]:
        """
        (list) Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['ForwardingControlRuleLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleLocationGroupsArgs']]:
        """
        (Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['ForwardingControlRuleLocationsArgs']]:
        """
        (Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['ForwardingControlRuleLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nwApplicationGroups")
    def nw_application_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleNwApplicationGroupsArgs']]:
        """
        (list) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        """
        return pulumi.get(self, "nw_application_groups")

    @nw_application_groups.setter
    def nw_application_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleNwApplicationGroupsArgs']]):
        pulumi.set(self, "nw_application_groups", value)

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleNwServiceGroupsArgs']]:
        """
        (list) Any number of predefined or custom network service groups to which the rule applies.
        """
        return pulumi.get(self, "nw_service_groups")

    @nw_service_groups.setter
    def nw_service_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleNwServiceGroupsArgs']]):
        pulumi.set(self, "nw_service_groups", value)

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> Optional[pulumi.Input['ForwardingControlRuleNwServicesArgs']]:
        """
        (list) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        """
        return pulumi.get(self, "nw_services")

    @nw_services.setter
    def nw_services(self, value: Optional[pulumi.Input['ForwardingControlRuleNwServicesArgs']]):
        pulumi.set(self, "nw_services", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[int]]:
        """
        Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="proxyGateway")
    def proxy_gateway(self) -> Optional[pulumi.Input['ForwardingControlRuleProxyGatewayArgs']]:
        """
        (set) The proxy gateway for which the rule is applicable. This field is applicable only for the `PROXYCHAIN` forwarding method.
        """
        return pulumi.get(self, "proxy_gateway")

    @proxy_gateway.setter
    def proxy_gateway(self, value: Optional[pulumi.Input['ForwardingControlRuleProxyGatewayArgs']]):
        pulumi.set(self, "proxy_gateway", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[int]]:
        """
        Admin rank assigned to the forwarding rule
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="resCategories")
    def res_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ** - (list) List of destination domain categories to which the rule applies.
        """
        return pulumi.get(self, "res_categories")

    @res_categories.setter
    def res_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "res_categories", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        """
        A unique identifier assigned to the forwarding rule
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleSrcIpGroupsArgs']]:
        """
        (list) Any number of source IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "src_ip_groups")

    @src_ip_groups.setter
    def src_ip_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleSrcIpGroupsArgs']]):
        pulumi.set(self, "src_ip_groups", value)

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        (Optional) You can enter individual IP addresses, subnets, or address ranges.
        """
        return pulumi.get(self, "src_ips")

    @src_ips.setter
    def src_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "src_ips", value)

    @property
    @pulumi.getter(name="srcIpv6Groups")
    def src_ipv6_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleSrcIpv6GroupsArgs']]:
        """
        (list) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        """
        return pulumi.get(self, "src_ipv6_groups")

    @src_ipv6_groups.setter
    def src_ipv6_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleSrcIpv6GroupsArgs']]):
        pulumi.set(self, "src_ipv6_groups", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        (string) - Indicates whether the forwarding rule is enabled or disabled. Supported values are: `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The rule type selected from the available options. Supported Values: ``FORWARDING``
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['ForwardingControlRuleUsersArgs']]:
        """
        (list) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['ForwardingControlRuleUsersArgs']]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="zpaAppSegments")
    def zpa_app_segments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlRuleZpaAppSegmentArgs']]]]:
        """
        (set) The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ZPA` Gateway forwarding method.
        """
        return pulumi.get(self, "zpa_app_segments")

    @zpa_app_segments.setter
    def zpa_app_segments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlRuleZpaAppSegmentArgs']]]]):
        pulumi.set(self, "zpa_app_segments", value)

    @property
    @pulumi.getter(name="zpaApplicationSegmentGroups")
    def zpa_application_segment_groups(self) -> Optional[pulumi.Input['ForwardingControlRuleZpaApplicationSegmentGroupsArgs']]:
        """
        (set) List of ZPA Application Segment Groups for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        """
        return pulumi.get(self, "zpa_application_segment_groups")

    @zpa_application_segment_groups.setter
    def zpa_application_segment_groups(self, value: Optional[pulumi.Input['ForwardingControlRuleZpaApplicationSegmentGroupsArgs']]):
        pulumi.set(self, "zpa_application_segment_groups", value)

    @property
    @pulumi.getter(name="zpaApplicationSegments")
    def zpa_application_segments(self) -> Optional[pulumi.Input['ForwardingControlRuleZpaApplicationSegmentsArgs']]:
        """
        (set) List of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        """
        return pulumi.get(self, "zpa_application_segments")

    @zpa_application_segments.setter
    def zpa_application_segments(self, value: Optional[pulumi.Input['ForwardingControlRuleZpaApplicationSegmentsArgs']]):
        pulumi.set(self, "zpa_application_segments", value)

    @property
    @pulumi.getter(name="zpaGateway")
    def zpa_gateway(self) -> Optional[pulumi.Input['ForwardingControlRuleZpaGatewayArgs']]:
        """
        (set) The ZPA Gateway for which this rule is applicable. This field is applicable only for the `ZPA` forwarding method.
        """
        return pulumi.get(self, "zpa_gateway")

    @zpa_gateway.setter
    def zpa_gateway(self, value: Optional[pulumi.Input['ForwardingControlRuleZpaGatewayArgs']]):
        pulumi.set(self, "zpa_gateway", value)


class ForwardingControlRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_service_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleAppServiceGroupsArgs']]] = None,
                 departments: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleDepartmentsArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleDestIpGroupsArgs']]] = None,
                 dest_ipv6_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleDestIpv6GroupsArgs']]] = None,
                 ec_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleEcGroupsArgs']]] = None,
                 forward_method: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleGroupsArgs']]] = None,
                 labels: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleLabelsArgs']]] = None,
                 location_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleLocationGroupsArgs']]] = None,
                 locations: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleLocationsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nw_application_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleNwApplicationGroupsArgs']]] = None,
                 nw_service_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleNwServiceGroupsArgs']]] = None,
                 nw_services: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleNwServicesArgs']]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 proxy_gateway: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleProxyGatewayArgs']]] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 src_ip_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleSrcIpGroupsArgs']]] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleSrcIpv6GroupsArgs']]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleUsersArgs']]] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaAppSegmentArgs']]]]] = None,
                 zpa_application_segment_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaApplicationSegmentGroupsArgs']]] = None,
                 zpa_application_segments: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaApplicationSegmentsArgs']]] = None,
                 zpa_gateway: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaGatewayArgs']]] = None,
                 __props__=None):
        """
        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_forwarding_control_rule** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/forwardingControlRule:ForwardingControlRule example <rule_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/forwardingControlRule:ForwardingControlRule example <rule_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleAppServiceGroupsArgs']] app_service_groups: (list) - Application service groups on which this rule is applied
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleDepartmentsArgs']] departments: (list) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        :param pulumi.Input[str] description: (string) - Additional information about the forwarding rule
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_addresses: ** - (list) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_countries: ** - (list) estination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries. Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_ip_categories: ** - (list) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleDestIpGroupsArgs']] dest_ip_groups: ** - (list) Any number of destination IP address groups that you want to control with this rule.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleDestIpv6GroupsArgs']] dest_ipv6_groups: ** - (list) Destination IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleEcGroupsArgs']] ec_groups: (list) - Name-ID pairs of the Zscaler Cloud Connector groups to which the forwarding rule applies
        :param pulumi.Input[str] forward_method: The type of traffic forwarding method selected from the available options.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleGroupsArgs']] groups: (list) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleLabelsArgs']] labels: (list) Labels that are applicable to the rule.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleLocationGroupsArgs']] location_groups: (Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleLocationsArgs']] locations: (Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[str] name: Name of the Firewall Filtering policy rule
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleNwApplicationGroupsArgs']] nw_application_groups: (list) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleNwServiceGroupsArgs']] nw_service_groups: (list) Any number of predefined or custom network service groups to which the rule applies.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleNwServicesArgs']] nw_services: (list) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        :param pulumi.Input[int] order: Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleProxyGatewayArgs']] proxy_gateway: (set) The proxy gateway for which the rule is applicable. This field is applicable only for the `PROXYCHAIN` forwarding method.
        :param pulumi.Input[int] rank: Admin rank assigned to the forwarding rule
        :param pulumi.Input[Sequence[pulumi.Input[str]]] res_categories: ** - (list) List of destination domain categories to which the rule applies.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleSrcIpGroupsArgs']] src_ip_groups: (list) Any number of source IP address groups that you want to control with this rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] src_ips: (Optional) You can enter individual IP addresses, subnets, or address ranges.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleSrcIpv6GroupsArgs']] src_ipv6_groups: (list) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        :param pulumi.Input[str] state: (string) - Indicates whether the forwarding rule is enabled or disabled. Supported values are: `ENABLED` and `DISABLED`.
        :param pulumi.Input[str] type: The rule type selected from the available options. Supported Values: ``FORWARDING``
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleUsersArgs']] users: (list) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaAppSegmentArgs']]]] zpa_app_segments: (set) The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ZPA` Gateway forwarding method.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaApplicationSegmentGroupsArgs']] zpa_application_segment_groups: (set) List of ZPA Application Segment Groups for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaApplicationSegmentsArgs']] zpa_application_segments: (set) List of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaGatewayArgs']] zpa_gateway: (set) The ZPA Gateway for which this rule is applicable. This field is applicable only for the `ZPA` forwarding method.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ForwardingControlRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_forwarding_control_rule** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/forwardingControlRule:ForwardingControlRule example <rule_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/forwardingControlRule:ForwardingControlRule example <rule_name>
        ```

        :param str resource_name: The name of the resource.
        :param ForwardingControlRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ForwardingControlRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_service_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleAppServiceGroupsArgs']]] = None,
                 departments: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleDepartmentsArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleDestIpGroupsArgs']]] = None,
                 dest_ipv6_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleDestIpv6GroupsArgs']]] = None,
                 ec_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleEcGroupsArgs']]] = None,
                 forward_method: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleGroupsArgs']]] = None,
                 labels: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleLabelsArgs']]] = None,
                 location_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleLocationGroupsArgs']]] = None,
                 locations: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleLocationsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nw_application_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleNwApplicationGroupsArgs']]] = None,
                 nw_service_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleNwServiceGroupsArgs']]] = None,
                 nw_services: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleNwServicesArgs']]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 proxy_gateway: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleProxyGatewayArgs']]] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 src_ip_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleSrcIpGroupsArgs']]] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleSrcIpv6GroupsArgs']]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleUsersArgs']]] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaAppSegmentArgs']]]]] = None,
                 zpa_application_segment_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaApplicationSegmentGroupsArgs']]] = None,
                 zpa_application_segments: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaApplicationSegmentsArgs']]] = None,
                 zpa_gateway: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaGatewayArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ForwardingControlRuleArgs.__new__(ForwardingControlRuleArgs)

            __props__.__dict__["app_service_groups"] = app_service_groups
            __props__.__dict__["departments"] = departments
            __props__.__dict__["description"] = description
            __props__.__dict__["dest_addresses"] = dest_addresses
            __props__.__dict__["dest_countries"] = dest_countries
            __props__.__dict__["dest_ip_categories"] = dest_ip_categories
            __props__.__dict__["dest_ip_groups"] = dest_ip_groups
            __props__.__dict__["dest_ipv6_groups"] = dest_ipv6_groups
            __props__.__dict__["ec_groups"] = ec_groups
            if forward_method is None and not opts.urn:
                raise TypeError("Missing required property 'forward_method'")
            __props__.__dict__["forward_method"] = forward_method
            __props__.__dict__["groups"] = groups
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location_groups"] = location_groups
            __props__.__dict__["locations"] = locations
            __props__.__dict__["name"] = name
            __props__.__dict__["nw_application_groups"] = nw_application_groups
            __props__.__dict__["nw_service_groups"] = nw_service_groups
            __props__.__dict__["nw_services"] = nw_services
            if order is None and not opts.urn:
                raise TypeError("Missing required property 'order'")
            __props__.__dict__["order"] = order
            __props__.__dict__["proxy_gateway"] = proxy_gateway
            __props__.__dict__["rank"] = rank
            __props__.__dict__["res_categories"] = res_categories
            __props__.__dict__["src_ip_groups"] = src_ip_groups
            __props__.__dict__["src_ips"] = src_ips
            __props__.__dict__["src_ipv6_groups"] = src_ipv6_groups
            __props__.__dict__["state"] = state
            __props__.__dict__["type"] = type
            __props__.__dict__["users"] = users
            __props__.__dict__["zpa_app_segments"] = zpa_app_segments
            __props__.__dict__["zpa_application_segment_groups"] = zpa_application_segment_groups
            __props__.__dict__["zpa_application_segments"] = zpa_application_segments
            __props__.__dict__["zpa_gateway"] = zpa_gateway
            __props__.__dict__["rule_id"] = None
        super(ForwardingControlRule, __self__).__init__(
            'zia:index/forwardingControlRule:ForwardingControlRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_service_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleAppServiceGroupsArgs']]] = None,
            departments: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleDepartmentsArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dest_ip_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleDestIpGroupsArgs']]] = None,
            dest_ipv6_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleDestIpv6GroupsArgs']]] = None,
            ec_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleEcGroupsArgs']]] = None,
            forward_method: Optional[pulumi.Input[str]] = None,
            groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleGroupsArgs']]] = None,
            labels: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleLabelsArgs']]] = None,
            location_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleLocationGroupsArgs']]] = None,
            locations: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleLocationsArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nw_application_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleNwApplicationGroupsArgs']]] = None,
            nw_service_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleNwServiceGroupsArgs']]] = None,
            nw_services: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleNwServicesArgs']]] = None,
            order: Optional[pulumi.Input[int]] = None,
            proxy_gateway: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleProxyGatewayArgs']]] = None,
            rank: Optional[pulumi.Input[int]] = None,
            res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            rule_id: Optional[pulumi.Input[int]] = None,
            src_ip_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleSrcIpGroupsArgs']]] = None,
            src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            src_ipv6_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleSrcIpv6GroupsArgs']]] = None,
            state: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            users: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleUsersArgs']]] = None,
            zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaAppSegmentArgs']]]]] = None,
            zpa_application_segment_groups: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaApplicationSegmentGroupsArgs']]] = None,
            zpa_application_segments: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaApplicationSegmentsArgs']]] = None,
            zpa_gateway: Optional[pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaGatewayArgs']]] = None) -> 'ForwardingControlRule':
        """
        Get an existing ForwardingControlRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleAppServiceGroupsArgs']] app_service_groups: (list) - Application service groups on which this rule is applied
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleDepartmentsArgs']] departments: (list) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        :param pulumi.Input[str] description: (string) - Additional information about the forwarding rule
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_addresses: ** - (list) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_countries: ** - (list) estination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries. Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_ip_categories: ** - (list) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleDestIpGroupsArgs']] dest_ip_groups: ** - (list) Any number of destination IP address groups that you want to control with this rule.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleDestIpv6GroupsArgs']] dest_ipv6_groups: ** - (list) Destination IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleEcGroupsArgs']] ec_groups: (list) - Name-ID pairs of the Zscaler Cloud Connector groups to which the forwarding rule applies
        :param pulumi.Input[str] forward_method: The type of traffic forwarding method selected from the available options.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleGroupsArgs']] groups: (list) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleLabelsArgs']] labels: (list) Labels that are applicable to the rule.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleLocationGroupsArgs']] location_groups: (Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleLocationsArgs']] locations: (Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[str] name: Name of the Firewall Filtering policy rule
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleNwApplicationGroupsArgs']] nw_application_groups: (list) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleNwServiceGroupsArgs']] nw_service_groups: (list) Any number of predefined or custom network service groups to which the rule applies.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleNwServicesArgs']] nw_services: (list) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        :param pulumi.Input[int] order: Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleProxyGatewayArgs']] proxy_gateway: (set) The proxy gateway for which the rule is applicable. This field is applicable only for the `PROXYCHAIN` forwarding method.
        :param pulumi.Input[int] rank: Admin rank assigned to the forwarding rule
        :param pulumi.Input[Sequence[pulumi.Input[str]]] res_categories: ** - (list) List of destination domain categories to which the rule applies.
        :param pulumi.Input[int] rule_id: A unique identifier assigned to the forwarding rule
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleSrcIpGroupsArgs']] src_ip_groups: (list) Any number of source IP address groups that you want to control with this rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] src_ips: (Optional) You can enter individual IP addresses, subnets, or address ranges.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleSrcIpv6GroupsArgs']] src_ipv6_groups: (list) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        :param pulumi.Input[str] state: (string) - Indicates whether the forwarding rule is enabled or disabled. Supported values are: `ENABLED` and `DISABLED`.
        :param pulumi.Input[str] type: The rule type selected from the available options. Supported Values: ``FORWARDING``
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleUsersArgs']] users: (list) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaAppSegmentArgs']]]] zpa_app_segments: (set) The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ZPA` Gateway forwarding method.
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaApplicationSegmentGroupsArgs']] zpa_application_segment_groups: (set) List of ZPA Application Segment Groups for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaApplicationSegmentsArgs']] zpa_application_segments: (set) List of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        :param pulumi.Input[pulumi.InputType['ForwardingControlRuleZpaGatewayArgs']] zpa_gateway: (set) The ZPA Gateway for which this rule is applicable. This field is applicable only for the `ZPA` forwarding method.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ForwardingControlRuleState.__new__(_ForwardingControlRuleState)

        __props__.__dict__["app_service_groups"] = app_service_groups
        __props__.__dict__["departments"] = departments
        __props__.__dict__["description"] = description
        __props__.__dict__["dest_addresses"] = dest_addresses
        __props__.__dict__["dest_countries"] = dest_countries
        __props__.__dict__["dest_ip_categories"] = dest_ip_categories
        __props__.__dict__["dest_ip_groups"] = dest_ip_groups
        __props__.__dict__["dest_ipv6_groups"] = dest_ipv6_groups
        __props__.__dict__["ec_groups"] = ec_groups
        __props__.__dict__["forward_method"] = forward_method
        __props__.__dict__["groups"] = groups
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location_groups"] = location_groups
        __props__.__dict__["locations"] = locations
        __props__.__dict__["name"] = name
        __props__.__dict__["nw_application_groups"] = nw_application_groups
        __props__.__dict__["nw_service_groups"] = nw_service_groups
        __props__.__dict__["nw_services"] = nw_services
        __props__.__dict__["order"] = order
        __props__.__dict__["proxy_gateway"] = proxy_gateway
        __props__.__dict__["rank"] = rank
        __props__.__dict__["res_categories"] = res_categories
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["src_ip_groups"] = src_ip_groups
        __props__.__dict__["src_ips"] = src_ips
        __props__.__dict__["src_ipv6_groups"] = src_ipv6_groups
        __props__.__dict__["state"] = state
        __props__.__dict__["type"] = type
        __props__.__dict__["users"] = users
        __props__.__dict__["zpa_app_segments"] = zpa_app_segments
        __props__.__dict__["zpa_application_segment_groups"] = zpa_application_segment_groups
        __props__.__dict__["zpa_application_segments"] = zpa_application_segments
        __props__.__dict__["zpa_gateway"] = zpa_gateway
        return ForwardingControlRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appServiceGroups")
    def app_service_groups(self) -> pulumi.Output['outputs.ForwardingControlRuleAppServiceGroups']:
        """
        (list) - Application service groups on which this rule is applied
        """
        return pulumi.get(self, "app_service_groups")

    @property
    @pulumi.getter
    def departments(self) -> pulumi.Output['outputs.ForwardingControlRuleDepartments']:
        """
        (list) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        """
        return pulumi.get(self, "departments")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        (string) - Additional information about the forwarding rule
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        ** - (list) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        """
        return pulumi.get(self, "dest_addresses")

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> pulumi.Output[Sequence[str]]:
        """
        ** - (list) estination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination countries. Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes).
        """
        return pulumi.get(self, "dest_countries")

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        ** - (list) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        """
        return pulumi.get(self, "dest_ip_categories")

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> pulumi.Output['outputs.ForwardingControlRuleDestIpGroups']:
        """
        ** - (list) Any number of destination IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "dest_ip_groups")

    @property
    @pulumi.getter(name="destIpv6Groups")
    def dest_ipv6_groups(self) -> pulumi.Output['outputs.ForwardingControlRuleDestIpv6Groups']:
        """
        ** - (list) Destination IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        """
        return pulumi.get(self, "dest_ipv6_groups")

    @property
    @pulumi.getter(name="ecGroups")
    def ec_groups(self) -> pulumi.Output['outputs.ForwardingControlRuleEcGroups']:
        """
        (list) - Name-ID pairs of the Zscaler Cloud Connector groups to which the forwarding rule applies
        """
        return pulumi.get(self, "ec_groups")

    @property
    @pulumi.getter(name="forwardMethod")
    def forward_method(self) -> pulumi.Output[str]:
        """
        The type of traffic forwarding method selected from the available options.
        """
        return pulumi.get(self, "forward_method")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output['outputs.ForwardingControlRuleGroups']:
        """
        (list) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output['outputs.ForwardingControlRuleLabels']:
        """
        (list) Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> pulumi.Output['outputs.ForwardingControlRuleLocationGroups']:
        """
        (Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Output['outputs.ForwardingControlRuleLocations']:
        """
        (Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nwApplicationGroups")
    def nw_application_groups(self) -> pulumi.Output['outputs.ForwardingControlRuleNwApplicationGroups']:
        """
        (list) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        """
        return pulumi.get(self, "nw_application_groups")

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> pulumi.Output['outputs.ForwardingControlRuleNwServiceGroups']:
        """
        (list) Any number of predefined or custom network service groups to which the rule applies.
        """
        return pulumi.get(self, "nw_service_groups")

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> pulumi.Output['outputs.ForwardingControlRuleNwServices']:
        """
        (list) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        """
        return pulumi.get(self, "nw_services")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[int]:
        """
        Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="proxyGateway")
    def proxy_gateway(self) -> pulumi.Output['outputs.ForwardingControlRuleProxyGateway']:
        """
        (set) The proxy gateway for which the rule is applicable. This field is applicable only for the `PROXYCHAIN` forwarding method.
        """
        return pulumi.get(self, "proxy_gateway")

    @property
    @pulumi.getter
    def rank(self) -> pulumi.Output[Optional[int]]:
        """
        Admin rank assigned to the forwarding rule
        """
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="resCategories")
    def res_categories(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        ** - (list) List of destination domain categories to which the rule applies.
        """
        return pulumi.get(self, "res_categories")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[int]:
        """
        A unique identifier assigned to the forwarding rule
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> pulumi.Output['outputs.ForwardingControlRuleSrcIpGroups']:
        """
        (list) Any number of source IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "src_ip_groups")

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        (Optional) You can enter individual IP addresses, subnets, or address ranges.
        """
        return pulumi.get(self, "src_ips")

    @property
    @pulumi.getter(name="srcIpv6Groups")
    def src_ipv6_groups(self) -> pulumi.Output['outputs.ForwardingControlRuleSrcIpv6Groups']:
        """
        (list) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        """
        return pulumi.get(self, "src_ipv6_groups")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[str]]:
        """
        (string) - Indicates whether the forwarding rule is enabled or disabled. Supported values are: `ENABLED` and `DISABLED`.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        The rule type selected from the available options. Supported Values: ``FORWARDING``
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output['outputs.ForwardingControlRuleUsers']:
        """
        (list) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="zpaAppSegments")
    def zpa_app_segments(self) -> pulumi.Output[Sequence['outputs.ForwardingControlRuleZpaAppSegment']]:
        """
        (set) The list of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ZPA` Gateway forwarding method.
        """
        return pulumi.get(self, "zpa_app_segments")

    @property
    @pulumi.getter(name="zpaApplicationSegmentGroups")
    def zpa_application_segment_groups(self) -> pulumi.Output['outputs.ForwardingControlRuleZpaApplicationSegmentGroups']:
        """
        (set) List of ZPA Application Segment Groups for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        """
        return pulumi.get(self, "zpa_application_segment_groups")

    @property
    @pulumi.getter(name="zpaApplicationSegments")
    def zpa_application_segments(self) -> pulumi.Output['outputs.ForwardingControlRuleZpaApplicationSegments']:
        """
        (set) List of ZPA Application Segments for which this rule is applicable. This field is applicable only for the `ECZPA` forwarding method (used for Zscaler Cloud Connector).
        """
        return pulumi.get(self, "zpa_application_segments")

    @property
    @pulumi.getter(name="zpaGateway")
    def zpa_gateway(self) -> pulumi.Output['outputs.ForwardingControlRuleZpaGateway']:
        """
        (set) The ZPA Gateway for which this rule is applicable. This field is applicable only for the `ZPA` forwarding method.
        """
        return pulumi.get(self, "zpa_gateway")

