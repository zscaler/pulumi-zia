# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FirewallFilteringServiceGroupsArgs', 'FirewallFilteringServiceGroups']

@pulumi.input_type
class FirewallFilteringServiceGroupsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallFilteringServiceGroupsServiceArgs']]]] = None):
        """
        The set of arguments for constructing a FirewallFilteringServiceGroups resource.
        :param pulumi.Input[str] description: Description of the network services group
        :param pulumi.Input[str] name: Name of the network service group
        :param pulumi.Input[Sequence[pulumi.Input['FirewallFilteringServiceGroupsServiceArgs']]] services: Any number of network services ID to be added to the group
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if services is not None:
            pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the network services group
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the network service group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallFilteringServiceGroupsServiceArgs']]]]:
        """
        Any number of network services ID to be added to the group
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallFilteringServiceGroupsServiceArgs']]]]):
        pulumi.set(self, "services", value)


@pulumi.input_type
class _FirewallFilteringServiceGroupsState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 group_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallFilteringServiceGroupsServiceArgs']]]] = None):
        """
        Input properties used for looking up and filtering FirewallFilteringServiceGroups resources.
        :param pulumi.Input[str] description: Description of the network services group
        :param pulumi.Input[str] name: Name of the network service group
        :param pulumi.Input[Sequence[pulumi.Input['FirewallFilteringServiceGroupsServiceArgs']]] services: Any number of network services ID to be added to the group
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group_id is not None:
            pulumi.set(__self__, "group_id", group_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if services is not None:
            pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the network services group
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the network service group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallFilteringServiceGroupsServiceArgs']]]]:
        """
        Any number of network services ID to be added to the group
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallFilteringServiceGroupsServiceArgs']]]]):
        pulumi.set(self, "services", value)


class FirewallFilteringServiceGroups(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallFilteringServiceGroupsServiceArgs']]]]] = None,
                 __props__=None):
        """
        The **zia_firewall_filtering_network_service_groups** resource allows the creation and management of ZIA Cloud Firewall IP network service groups in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        example1 = zia.get_firewall_filtering_network_services(name="FTP")
        example2 = zia.get_firewall_filtering_network_services(name="NETBIOS")
        example3 = zia.get_firewall_filtering_network_services(name="DNS")
        # Add network services to a network services group
        example = zia.FirewallFilteringServiceGroups("example",
            description="example",
            services=[zia.FirewallFilteringServiceGroupsServiceArgs(
                ids=[
                    example1.id,
                    example2.id,
                    example3.id,
                ],
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **firewall_filtering_network_service_groups** can be imported by using `<GROUP_ID>` or `<GROUP_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/firewallFilteringServiceGroups:FirewallFilteringServiceGroups example <group_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/firewallFilteringServiceGroups:FirewallFilteringServiceGroups example <group_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the network services group
        :param pulumi.Input[str] name: Name of the network service group
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallFilteringServiceGroupsServiceArgs']]]] services: Any number of network services ID to be added to the group
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FirewallFilteringServiceGroupsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_firewall_filtering_network_service_groups** resource allows the creation and management of ZIA Cloud Firewall IP network service groups in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        example1 = zia.get_firewall_filtering_network_services(name="FTP")
        example2 = zia.get_firewall_filtering_network_services(name="NETBIOS")
        example3 = zia.get_firewall_filtering_network_services(name="DNS")
        # Add network services to a network services group
        example = zia.FirewallFilteringServiceGroups("example",
            description="example",
            services=[zia.FirewallFilteringServiceGroupsServiceArgs(
                ids=[
                    example1.id,
                    example2.id,
                    example3.id,
                ],
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **firewall_filtering_network_service_groups** can be imported by using `<GROUP_ID>` or `<GROUP_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/firewallFilteringServiceGroups:FirewallFilteringServiceGroups example <group_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/firewallFilteringServiceGroups:FirewallFilteringServiceGroups example <group_name>
        ```

        :param str resource_name: The name of the resource.
        :param FirewallFilteringServiceGroupsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallFilteringServiceGroupsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallFilteringServiceGroupsServiceArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallFilteringServiceGroupsArgs.__new__(FirewallFilteringServiceGroupsArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["services"] = services
            __props__.__dict__["group_id"] = None
        super(FirewallFilteringServiceGroups, __self__).__init__(
            'zia:index/firewallFilteringServiceGroups:FirewallFilteringServiceGroups',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            group_id: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            services: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallFilteringServiceGroupsServiceArgs']]]]] = None) -> 'FirewallFilteringServiceGroups':
        """
        Get an existing FirewallFilteringServiceGroups resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the network services group
        :param pulumi.Input[str] name: Name of the network service group
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['FirewallFilteringServiceGroupsServiceArgs']]]] services: Any number of network services ID to be added to the group
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallFilteringServiceGroupsState.__new__(_FirewallFilteringServiceGroupsState)

        __props__.__dict__["description"] = description
        __props__.__dict__["group_id"] = group_id
        __props__.__dict__["name"] = name
        __props__.__dict__["services"] = services
        return FirewallFilteringServiceGroups(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the network services group
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the network service group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def services(self) -> pulumi.Output[Sequence['outputs.FirewallFilteringServiceGroupsService']]:
        """
        Any number of network services ID to be added to the group
        """
        return pulumi.get(self, "services")

