# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetDomainProfilesResult',
    'AwaitableGetDomainProfilesResult',
    'get_domain_profiles',
    'get_domain_profiles_output',
]

@pulumi.output_type
class GetDomainProfilesResult:
    """
    A collection of values returned by getDomainProfiles.
    """
    def __init__(__self__, custom_domains=None, description=None, id=None, include_company_domains=None, include_subdomains=None, predefined_email_domains=None, profile_id=None, profile_name=None):
        if custom_domains and not isinstance(custom_domains, list):
            raise TypeError("Expected argument 'custom_domains' to be a list")
        pulumi.set(__self__, "custom_domains", custom_domains)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_company_domains and not isinstance(include_company_domains, bool):
            raise TypeError("Expected argument 'include_company_domains' to be a bool")
        pulumi.set(__self__, "include_company_domains", include_company_domains)
        if include_subdomains and not isinstance(include_subdomains, bool):
            raise TypeError("Expected argument 'include_subdomains' to be a bool")
        pulumi.set(__self__, "include_subdomains", include_subdomains)
        if predefined_email_domains and not isinstance(predefined_email_domains, list):
            raise TypeError("Expected argument 'predefined_email_domains' to be a list")
        pulumi.set(__self__, "predefined_email_domains", predefined_email_domains)
        if profile_id and not isinstance(profile_id, int):
            raise TypeError("Expected argument 'profile_id' to be a int")
        pulumi.set(__self__, "profile_id", profile_id)
        if profile_name and not isinstance(profile_name, str):
            raise TypeError("Expected argument 'profile_name' to be a str")
        pulumi.set(__self__, "profile_name", profile_name)

    @property
    @pulumi.getter(name="customDomains")
    def custom_domains(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "custom_domains")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeCompanyDomains")
    def include_company_domains(self) -> builtins.bool:
        return pulumi.get(self, "include_company_domains")

    @property
    @pulumi.getter(name="includeSubdomains")
    def include_subdomains(self) -> builtins.bool:
        return pulumi.get(self, "include_subdomains")

    @property
    @pulumi.getter(name="predefinedEmailDomains")
    def predefined_email_domains(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "predefined_email_domains")

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> builtins.int:
        return pulumi.get(self, "profile_id")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> builtins.str:
        return pulumi.get(self, "profile_name")


class AwaitableGetDomainProfilesResult(GetDomainProfilesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainProfilesResult(
            custom_domains=self.custom_domains,
            description=self.description,
            id=self.id,
            include_company_domains=self.include_company_domains,
            include_subdomains=self.include_subdomains,
            predefined_email_domains=self.predefined_email_domains,
            profile_id=self.profile_id,
            profile_name=self.profile_name)


def get_domain_profiles(profile_id: Optional[builtins.int] = None,
                        profile_name: Optional[builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainProfilesResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-email-profiles)
    * [API documentation](https://help.zscaler.com/zia/saas-security-api#/domainProfiles/lite-get)

    Use the **zia_domain_profiles** data source to get information about a ZIA Domain Profiles in the Zscaler Internet Access cloud or via the API. The resource can then be utilized when configuring a Web DLP Rule resource `DLPWebRules`

    ## Example Usage

    ### By Name

    ### By ID
    """
    __args__ = dict()
    __args__['profileId'] = profile_id
    __args__['profileName'] = profile_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getDomainProfiles:getDomainProfiles', __args__, opts=opts, typ=GetDomainProfilesResult).value

    return AwaitableGetDomainProfilesResult(
        custom_domains=pulumi.get(__ret__, 'custom_domains'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        include_company_domains=pulumi.get(__ret__, 'include_company_domains'),
        include_subdomains=pulumi.get(__ret__, 'include_subdomains'),
        predefined_email_domains=pulumi.get(__ret__, 'predefined_email_domains'),
        profile_id=pulumi.get(__ret__, 'profile_id'),
        profile_name=pulumi.get(__ret__, 'profile_name'))
def get_domain_profiles_output(profile_id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                               profile_name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDomainProfilesResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-email-profiles)
    * [API documentation](https://help.zscaler.com/zia/saas-security-api#/domainProfiles/lite-get)

    Use the **zia_domain_profiles** data source to get information about a ZIA Domain Profiles in the Zscaler Internet Access cloud or via the API. The resource can then be utilized when configuring a Web DLP Rule resource `DLPWebRules`

    ## Example Usage

    ### By Name

    ### By ID
    """
    __args__ = dict()
    __args__['profileId'] = profile_id
    __args__['profileName'] = profile_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getDomainProfiles:getDomainProfiles', __args__, opts=opts, typ=GetDomainProfilesResult)
    return __ret__.apply(lambda __response__: GetDomainProfilesResult(
        custom_domains=pulumi.get(__response__, 'custom_domains'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        include_company_domains=pulumi.get(__response__, 'include_company_domains'),
        include_subdomains=pulumi.get(__response__, 'include_subdomains'),
        predefined_email_domains=pulumi.get(__response__, 'predefined_email_domains'),
        profile_id=pulumi.get(__response__, 'profile_id'),
        profile_name=pulumi.get(__response__, 'profile_name')))
