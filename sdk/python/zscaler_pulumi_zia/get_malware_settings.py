# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMalwareSettingsResult',
    'AwaitableGetMalwareSettingsResult',
    'get_malware_settings',
    'get_malware_settings_output',
]

@pulumi.output_type
class GetMalwareSettingsResult:
    """
    A collection of values returned by getMalwareSettings.
    """
    def __init__(__self__, adware_blocked=None, adware_capture=None, id=None, ransomware_blocked=None, ransomware_capture=None, remote_access_tool_blocked=None, remote_access_tool_capture=None, spyware_blocked=None, spyware_capture=None, trojan_blocked=None, trojan_capture=None, unwanted_applications_blocked=None, unwanted_applications_capture=None, virus_blocked=None, virus_capture=None, worm_blocked=None, worm_capture=None):
        if adware_blocked and not isinstance(adware_blocked, bool):
            raise TypeError("Expected argument 'adware_blocked' to be a bool")
        pulumi.set(__self__, "adware_blocked", adware_blocked)
        if adware_capture and not isinstance(adware_capture, bool):
            raise TypeError("Expected argument 'adware_capture' to be a bool")
        pulumi.set(__self__, "adware_capture", adware_capture)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ransomware_blocked and not isinstance(ransomware_blocked, bool):
            raise TypeError("Expected argument 'ransomware_blocked' to be a bool")
        pulumi.set(__self__, "ransomware_blocked", ransomware_blocked)
        if ransomware_capture and not isinstance(ransomware_capture, bool):
            raise TypeError("Expected argument 'ransomware_capture' to be a bool")
        pulumi.set(__self__, "ransomware_capture", ransomware_capture)
        if remote_access_tool_blocked and not isinstance(remote_access_tool_blocked, bool):
            raise TypeError("Expected argument 'remote_access_tool_blocked' to be a bool")
        pulumi.set(__self__, "remote_access_tool_blocked", remote_access_tool_blocked)
        if remote_access_tool_capture and not isinstance(remote_access_tool_capture, bool):
            raise TypeError("Expected argument 'remote_access_tool_capture' to be a bool")
        pulumi.set(__self__, "remote_access_tool_capture", remote_access_tool_capture)
        if spyware_blocked and not isinstance(spyware_blocked, bool):
            raise TypeError("Expected argument 'spyware_blocked' to be a bool")
        pulumi.set(__self__, "spyware_blocked", spyware_blocked)
        if spyware_capture and not isinstance(spyware_capture, bool):
            raise TypeError("Expected argument 'spyware_capture' to be a bool")
        pulumi.set(__self__, "spyware_capture", spyware_capture)
        if trojan_blocked and not isinstance(trojan_blocked, bool):
            raise TypeError("Expected argument 'trojan_blocked' to be a bool")
        pulumi.set(__self__, "trojan_blocked", trojan_blocked)
        if trojan_capture and not isinstance(trojan_capture, bool):
            raise TypeError("Expected argument 'trojan_capture' to be a bool")
        pulumi.set(__self__, "trojan_capture", trojan_capture)
        if unwanted_applications_blocked and not isinstance(unwanted_applications_blocked, bool):
            raise TypeError("Expected argument 'unwanted_applications_blocked' to be a bool")
        pulumi.set(__self__, "unwanted_applications_blocked", unwanted_applications_blocked)
        if unwanted_applications_capture and not isinstance(unwanted_applications_capture, bool):
            raise TypeError("Expected argument 'unwanted_applications_capture' to be a bool")
        pulumi.set(__self__, "unwanted_applications_capture", unwanted_applications_capture)
        if virus_blocked and not isinstance(virus_blocked, bool):
            raise TypeError("Expected argument 'virus_blocked' to be a bool")
        pulumi.set(__self__, "virus_blocked", virus_blocked)
        if virus_capture and not isinstance(virus_capture, bool):
            raise TypeError("Expected argument 'virus_capture' to be a bool")
        pulumi.set(__self__, "virus_capture", virus_capture)
        if worm_blocked and not isinstance(worm_blocked, bool):
            raise TypeError("Expected argument 'worm_blocked' to be a bool")
        pulumi.set(__self__, "worm_blocked", worm_blocked)
        if worm_capture and not isinstance(worm_capture, bool):
            raise TypeError("Expected argument 'worm_capture' to be a bool")
        pulumi.set(__self__, "worm_capture", worm_capture)

    @property
    @pulumi.getter(name="adwareBlocked")
    def adware_blocked(self) -> builtins.bool:
        return pulumi.get(self, "adware_blocked")

    @property
    @pulumi.getter(name="adwareCapture")
    def adware_capture(self) -> builtins.bool:
        return pulumi.get(self, "adware_capture")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ransomwareBlocked")
    def ransomware_blocked(self) -> builtins.bool:
        return pulumi.get(self, "ransomware_blocked")

    @property
    @pulumi.getter(name="ransomwareCapture")
    def ransomware_capture(self) -> builtins.bool:
        return pulumi.get(self, "ransomware_capture")

    @property
    @pulumi.getter(name="remoteAccessToolBlocked")
    def remote_access_tool_blocked(self) -> builtins.bool:
        return pulumi.get(self, "remote_access_tool_blocked")

    @property
    @pulumi.getter(name="remoteAccessToolCapture")
    def remote_access_tool_capture(self) -> builtins.bool:
        return pulumi.get(self, "remote_access_tool_capture")

    @property
    @pulumi.getter(name="spywareBlocked")
    def spyware_blocked(self) -> builtins.bool:
        return pulumi.get(self, "spyware_blocked")

    @property
    @pulumi.getter(name="spywareCapture")
    def spyware_capture(self) -> builtins.bool:
        return pulumi.get(self, "spyware_capture")

    @property
    @pulumi.getter(name="trojanBlocked")
    def trojan_blocked(self) -> builtins.bool:
        return pulumi.get(self, "trojan_blocked")

    @property
    @pulumi.getter(name="trojanCapture")
    def trojan_capture(self) -> builtins.bool:
        return pulumi.get(self, "trojan_capture")

    @property
    @pulumi.getter(name="unwantedApplicationsBlocked")
    def unwanted_applications_blocked(self) -> builtins.bool:
        return pulumi.get(self, "unwanted_applications_blocked")

    @property
    @pulumi.getter(name="unwantedApplicationsCapture")
    def unwanted_applications_capture(self) -> builtins.bool:
        return pulumi.get(self, "unwanted_applications_capture")

    @property
    @pulumi.getter(name="virusBlocked")
    def virus_blocked(self) -> builtins.bool:
        return pulumi.get(self, "virus_blocked")

    @property
    @pulumi.getter(name="virusCapture")
    def virus_capture(self) -> builtins.bool:
        return pulumi.get(self, "virus_capture")

    @property
    @pulumi.getter(name="wormBlocked")
    def worm_blocked(self) -> builtins.bool:
        return pulumi.get(self, "worm_blocked")

    @property
    @pulumi.getter(name="wormCapture")
    def worm_capture(self) -> builtins.bool:
        return pulumi.get(self, "worm_capture")


class AwaitableGetMalwareSettingsResult(GetMalwareSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMalwareSettingsResult(
            adware_blocked=self.adware_blocked,
            adware_capture=self.adware_capture,
            id=self.id,
            ransomware_blocked=self.ransomware_blocked,
            ransomware_capture=self.ransomware_capture,
            remote_access_tool_blocked=self.remote_access_tool_blocked,
            remote_access_tool_capture=self.remote_access_tool_capture,
            spyware_blocked=self.spyware_blocked,
            spyware_capture=self.spyware_capture,
            trojan_blocked=self.trojan_blocked,
            trojan_capture=self.trojan_capture,
            unwanted_applications_blocked=self.unwanted_applications_blocked,
            unwanted_applications_capture=self.unwanted_applications_capture,
            virus_blocked=self.virus_blocked,
            virus_capture=self.virus_capture,
            worm_blocked=self.worm_blocked,
            worm_capture=self.worm_capture)


def get_malware_settings(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMalwareSettingsResult:
    """
    Use the **zia_atp_malware_settings** data source to retrieves the malware protection policy configuration setting details. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getMalwareSettings:getMalwareSettings', __args__, opts=opts, typ=GetMalwareSettingsResult).value

    return AwaitableGetMalwareSettingsResult(
        adware_blocked=pulumi.get(__ret__, 'adware_blocked'),
        adware_capture=pulumi.get(__ret__, 'adware_capture'),
        id=pulumi.get(__ret__, 'id'),
        ransomware_blocked=pulumi.get(__ret__, 'ransomware_blocked'),
        ransomware_capture=pulumi.get(__ret__, 'ransomware_capture'),
        remote_access_tool_blocked=pulumi.get(__ret__, 'remote_access_tool_blocked'),
        remote_access_tool_capture=pulumi.get(__ret__, 'remote_access_tool_capture'),
        spyware_blocked=pulumi.get(__ret__, 'spyware_blocked'),
        spyware_capture=pulumi.get(__ret__, 'spyware_capture'),
        trojan_blocked=pulumi.get(__ret__, 'trojan_blocked'),
        trojan_capture=pulumi.get(__ret__, 'trojan_capture'),
        unwanted_applications_blocked=pulumi.get(__ret__, 'unwanted_applications_blocked'),
        unwanted_applications_capture=pulumi.get(__ret__, 'unwanted_applications_capture'),
        virus_blocked=pulumi.get(__ret__, 'virus_blocked'),
        virus_capture=pulumi.get(__ret__, 'virus_capture'),
        worm_blocked=pulumi.get(__ret__, 'worm_blocked'),
        worm_capture=pulumi.get(__ret__, 'worm_capture'))
def get_malware_settings_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMalwareSettingsResult]:
    """
    Use the **zia_atp_malware_settings** data source to retrieves the malware protection policy configuration setting details. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getMalwareSettings:getMalwareSettings', __args__, opts=opts, typ=GetMalwareSettingsResult)
    return __ret__.apply(lambda __response__: GetMalwareSettingsResult(
        adware_blocked=pulumi.get(__response__, 'adware_blocked'),
        adware_capture=pulumi.get(__response__, 'adware_capture'),
        id=pulumi.get(__response__, 'id'),
        ransomware_blocked=pulumi.get(__response__, 'ransomware_blocked'),
        ransomware_capture=pulumi.get(__response__, 'ransomware_capture'),
        remote_access_tool_blocked=pulumi.get(__response__, 'remote_access_tool_blocked'),
        remote_access_tool_capture=pulumi.get(__response__, 'remote_access_tool_capture'),
        spyware_blocked=pulumi.get(__response__, 'spyware_blocked'),
        spyware_capture=pulumi.get(__response__, 'spyware_capture'),
        trojan_blocked=pulumi.get(__response__, 'trojan_blocked'),
        trojan_capture=pulumi.get(__response__, 'trojan_capture'),
        unwanted_applications_blocked=pulumi.get(__response__, 'unwanted_applications_blocked'),
        unwanted_applications_capture=pulumi.get(__response__, 'unwanted_applications_capture'),
        virus_blocked=pulumi.get(__response__, 'virus_blocked'),
        virus_capture=pulumi.get(__response__, 'virus_capture'),
        worm_blocked=pulumi.get(__response__, 'worm_blocked'),
        worm_capture=pulumi.get(__response__, 'worm_capture')))
