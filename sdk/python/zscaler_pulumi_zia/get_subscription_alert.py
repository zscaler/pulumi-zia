# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSubscriptionAlertResult',
    'AwaitableGetSubscriptionAlertResult',
    'get_subscription_alert',
    'get_subscription_alert_output',
]

@pulumi.output_type
class GetSubscriptionAlertResult:
    """
    A collection of values returned by getSubscriptionAlert.
    """
    def __init__(__self__, comply_severities=None, deleted=None, description=None, email=None, id=None, manage_severities=None, pt0_severities=None, secure_severities=None, system_severities=None):
        if comply_severities and not isinstance(comply_severities, list):
            raise TypeError("Expected argument 'comply_severities' to be a list")
        pulumi.set(__self__, "comply_severities", comply_severities)
        if deleted and not isinstance(deleted, bool):
            raise TypeError("Expected argument 'deleted' to be a bool")
        pulumi.set(__self__, "deleted", deleted)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if manage_severities and not isinstance(manage_severities, list):
            raise TypeError("Expected argument 'manage_severities' to be a list")
        pulumi.set(__self__, "manage_severities", manage_severities)
        if pt0_severities and not isinstance(pt0_severities, list):
            raise TypeError("Expected argument 'pt0_severities' to be a list")
        pulumi.set(__self__, "pt0_severities", pt0_severities)
        if secure_severities and not isinstance(secure_severities, list):
            raise TypeError("Expected argument 'secure_severities' to be a list")
        pulumi.set(__self__, "secure_severities", secure_severities)
        if system_severities and not isinstance(system_severities, list):
            raise TypeError("Expected argument 'system_severities' to be a list")
        pulumi.set(__self__, "system_severities", system_severities)

    @property
    @pulumi.getter(name="complySeverities")
    def comply_severities(self) -> Sequence[builtins.str]:
        """
        (List of String) Lists the severity levels of the Comply Severity Alert class information that the recipient receives
        """
        return pulumi.get(self, "comply_severities")

    @property
    @pulumi.getter
    def deleted(self) -> builtins.bool:
        """
        (bool) Deletes an existing alert subscription
        """
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        (String) Additional comments or information about the alert subscription
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def email(self) -> builtins.str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="manageSeverities")
    def manage_severities(self) -> Sequence[builtins.str]:
        """
        (List of String) Lists the severity levels of the Manage Severity Alert class information that the recipient receives
        """
        return pulumi.get(self, "manage_severities")

    @property
    @pulumi.getter(name="pt0Severities")
    def pt0_severities(self) -> Sequence[builtins.str]:
        """
        (List of String) Lists the severity levels of the Patient 0 Severity Alert class information that the recipient receives
        """
        return pulumi.get(self, "pt0_severities")

    @property
    @pulumi.getter(name="secureSeverities")
    def secure_severities(self) -> Sequence[builtins.str]:
        """
        (List of String) Lists the severity levels of the Secure Severity Alert class information that the recipient receives
        """
        return pulumi.get(self, "secure_severities")

    @property
    @pulumi.getter(name="systemSeverities")
    def system_severities(self) -> Sequence[builtins.str]:
        """
        (List of String) Lists the severity levels of the System Severity Alert class information that the recipient receives
        """
        return pulumi.get(self, "system_severities")


class AwaitableGetSubscriptionAlertResult(GetSubscriptionAlertResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSubscriptionAlertResult(
            comply_severities=self.comply_severities,
            deleted=self.deleted,
            description=self.description,
            email=self.email,
            id=self.id,
            manage_severities=self.manage_severities,
            pt0_severities=self.pt0_severities,
            secure_severities=self.secure_severities,
            system_severities=self.system_severities)


def get_subscription_alert(email: Optional[builtins.str] = None,
                           id: Optional[builtins.int] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSubscriptionAlertResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-alert-subscriptions)
    * [API documentation](https://help.zscaler.com/zia/alerts#/alertSubscriptions-get)

    Use the **zia_subscription_alert** data source to get information about a subscription alert resource in the Zscaler Internet Access cloud or via the API.

    ## Example Usage

    ### Via Email

    ### Via ID


    :param builtins.str email: The name of the subscription alert to be exported.
    :param builtins.int id: The unique identifer for the subscription alert.
    """
    __args__ = dict()
    __args__['email'] = email
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getSubscriptionAlert:getSubscriptionAlert', __args__, opts=opts, typ=GetSubscriptionAlertResult).value

    return AwaitableGetSubscriptionAlertResult(
        comply_severities=pulumi.get(__ret__, 'comply_severities'),
        deleted=pulumi.get(__ret__, 'deleted'),
        description=pulumi.get(__ret__, 'description'),
        email=pulumi.get(__ret__, 'email'),
        id=pulumi.get(__ret__, 'id'),
        manage_severities=pulumi.get(__ret__, 'manage_severities'),
        pt0_severities=pulumi.get(__ret__, 'pt0_severities'),
        secure_severities=pulumi.get(__ret__, 'secure_severities'),
        system_severities=pulumi.get(__ret__, 'system_severities'))
def get_subscription_alert_output(email: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                  id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSubscriptionAlertResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-alert-subscriptions)
    * [API documentation](https://help.zscaler.com/zia/alerts#/alertSubscriptions-get)

    Use the **zia_subscription_alert** data source to get information about a subscription alert resource in the Zscaler Internet Access cloud or via the API.

    ## Example Usage

    ### Via Email

    ### Via ID


    :param builtins.str email: The name of the subscription alert to be exported.
    :param builtins.int id: The unique identifer for the subscription alert.
    """
    __args__ = dict()
    __args__['email'] = email
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getSubscriptionAlert:getSubscriptionAlert', __args__, opts=opts, typ=GetSubscriptionAlertResult)
    return __ret__.apply(lambda __response__: GetSubscriptionAlertResult(
        comply_severities=pulumi.get(__response__, 'comply_severities'),
        deleted=pulumi.get(__response__, 'deleted'),
        description=pulumi.get(__response__, 'description'),
        email=pulumi.get(__response__, 'email'),
        id=pulumi.get(__response__, 'id'),
        manage_severities=pulumi.get(__response__, 'manage_severities'),
        pt0_severities=pulumi.get(__response__, 'pt0_severities'),
        secure_severities=pulumi.get(__response__, 'secure_severities'),
        system_severities=pulumi.get(__response__, 'system_severities')))
