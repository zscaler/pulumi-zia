# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetTrafficForwardingGRETunnelResult',
    'AwaitableGetTrafficForwardingGRETunnelResult',
    'get_traffic_forwarding_gre_tunnel',
    'get_traffic_forwarding_gre_tunnel_output',
]

@pulumi.output_type
class GetTrafficForwardingGRETunnelResult:
    """
    A collection of values returned by getTrafficForwardingGRETunnel.
    """
    def __init__(__self__, comment=None, id=None, internal_ip_range=None, ip_unnumbered=None, last_modification_time=None, last_modified_bies=None, managed_bies=None, primary_dest_vips=None, secondary_dest_vips=None, source_ip=None, within_country=None):
        if comment and not isinstance(comment, str):
            raise TypeError("Expected argument 'comment' to be a str")
        pulumi.set(__self__, "comment", comment)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if internal_ip_range and not isinstance(internal_ip_range, str):
            raise TypeError("Expected argument 'internal_ip_range' to be a str")
        pulumi.set(__self__, "internal_ip_range", internal_ip_range)
        if ip_unnumbered and not isinstance(ip_unnumbered, bool):
            raise TypeError("Expected argument 'ip_unnumbered' to be a bool")
        pulumi.set(__self__, "ip_unnumbered", ip_unnumbered)
        if last_modification_time and not isinstance(last_modification_time, int):
            raise TypeError("Expected argument 'last_modification_time' to be a int")
        pulumi.set(__self__, "last_modification_time", last_modification_time)
        if last_modified_bies and not isinstance(last_modified_bies, list):
            raise TypeError("Expected argument 'last_modified_bies' to be a list")
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        if managed_bies and not isinstance(managed_bies, list):
            raise TypeError("Expected argument 'managed_bies' to be a list")
        pulumi.set(__self__, "managed_bies", managed_bies)
        if primary_dest_vips and not isinstance(primary_dest_vips, list):
            raise TypeError("Expected argument 'primary_dest_vips' to be a list")
        pulumi.set(__self__, "primary_dest_vips", primary_dest_vips)
        if secondary_dest_vips and not isinstance(secondary_dest_vips, list):
            raise TypeError("Expected argument 'secondary_dest_vips' to be a list")
        pulumi.set(__self__, "secondary_dest_vips", secondary_dest_vips)
        if source_ip and not isinstance(source_ip, str):
            raise TypeError("Expected argument 'source_ip' to be a str")
        pulumi.set(__self__, "source_ip", source_ip)
        if within_country and not isinstance(within_country, bool):
            raise TypeError("Expected argument 'within_country' to be a bool")
        pulumi.set(__self__, "within_country", within_country)

    @property
    @pulumi.getter
    def comment(self) -> builtins.str:
        """
        (String) Additional information about this GRE tunnel
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.int]:
        """
        (Number) Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="internalIpRange")
    def internal_ip_range(self) -> builtins.str:
        """
        (String) The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ip_unnumbered` is set to `false`.
        """
        return pulumi.get(self, "internal_ip_range")

    @property
    @pulumi.getter(name="ipUnnumbered")
    def ip_unnumbered(self) -> builtins.bool:
        """
        (Boolean) This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id are set to null
        """
        return pulumi.get(self, "ip_unnumbered")

    @property
    @pulumi.getter(name="lastModificationTime")
    def last_modification_time(self) -> builtins.int:
        return pulumi.get(self, "last_modification_time")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetTrafficForwardingGRETunnelLastModifiedByResult']:
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="managedBies")
    def managed_bies(self) -> Sequence['outputs.GetTrafficForwardingGRETunnelManagedByResult']:
        return pulumi.get(self, "managed_bies")

    @property
    @pulumi.getter(name="primaryDestVips")
    def primary_dest_vips(self) -> Sequence['outputs.GetTrafficForwardingGRETunnelPrimaryDestVipResult']:
        """
        **` (List) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.
        """
        return pulumi.get(self, "primary_dest_vips")

    @property
    @pulumi.getter(name="secondaryDestVips")
    def secondary_dest_vips(self) -> Sequence['outputs.GetTrafficForwardingGRETunnelSecondaryDestVipResult']:
        """
        (List) The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.
        """
        return pulumi.get(self, "secondary_dest_vips")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[builtins.str]:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="withinCountry")
    def within_country(self) -> builtins.bool:
        """
        (Boolean) Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
        """
        return pulumi.get(self, "within_country")


class AwaitableGetTrafficForwardingGRETunnelResult(GetTrafficForwardingGRETunnelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrafficForwardingGRETunnelResult(
            comment=self.comment,
            id=self.id,
            internal_ip_range=self.internal_ip_range,
            ip_unnumbered=self.ip_unnumbered,
            last_modification_time=self.last_modification_time,
            last_modified_bies=self.last_modified_bies,
            managed_bies=self.managed_bies,
            primary_dest_vips=self.primary_dest_vips,
            secondary_dest_vips=self.secondary_dest_vips,
            source_ip=self.source_ip,
            within_country=self.within_country)


def get_traffic_forwarding_gre_tunnel(id: Optional[builtins.int] = None,
                                      source_ip: Optional[builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrafficForwardingGRETunnelResult:
    """
    The **zia_traffic_forwarding_gre_tunnel** data source to get information about provisioned GRE tunnel information created in the Zscaler Internet Access portal.

    ## Example Usage

    ### Retrieve GRE Tunnel By Source IP

    ### Retrieve GRE Tunnel By ID


    :param builtins.int id: Unique identifier of the static IP address that is associated to a GRE tunnel
    :param builtins.str source_ip: The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
           
           > **NOTE** `source_ip` is the public IP address (Static IP) associated with the GRE Tunnel
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['sourceIp'] = source_ip
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getTrafficForwardingGRETunnel:getTrafficForwardingGRETunnel', __args__, opts=opts, typ=GetTrafficForwardingGRETunnelResult).value

    return AwaitableGetTrafficForwardingGRETunnelResult(
        comment=pulumi.get(__ret__, 'comment'),
        id=pulumi.get(__ret__, 'id'),
        internal_ip_range=pulumi.get(__ret__, 'internal_ip_range'),
        ip_unnumbered=pulumi.get(__ret__, 'ip_unnumbered'),
        last_modification_time=pulumi.get(__ret__, 'last_modification_time'),
        last_modified_bies=pulumi.get(__ret__, 'last_modified_bies'),
        managed_bies=pulumi.get(__ret__, 'managed_bies'),
        primary_dest_vips=pulumi.get(__ret__, 'primary_dest_vips'),
        secondary_dest_vips=pulumi.get(__ret__, 'secondary_dest_vips'),
        source_ip=pulumi.get(__ret__, 'source_ip'),
        within_country=pulumi.get(__ret__, 'within_country'))
def get_traffic_forwarding_gre_tunnel_output(id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                                             source_ip: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTrafficForwardingGRETunnelResult]:
    """
    The **zia_traffic_forwarding_gre_tunnel** data source to get information about provisioned GRE tunnel information created in the Zscaler Internet Access portal.

    ## Example Usage

    ### Retrieve GRE Tunnel By Source IP

    ### Retrieve GRE Tunnel By ID


    :param builtins.int id: Unique identifier of the static IP address that is associated to a GRE tunnel
    :param builtins.str source_ip: The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
           
           > **NOTE** `source_ip` is the public IP address (Static IP) associated with the GRE Tunnel
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['sourceIp'] = source_ip
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getTrafficForwardingGRETunnel:getTrafficForwardingGRETunnel', __args__, opts=opts, typ=GetTrafficForwardingGRETunnelResult)
    return __ret__.apply(lambda __response__: GetTrafficForwardingGRETunnelResult(
        comment=pulumi.get(__response__, 'comment'),
        id=pulumi.get(__response__, 'id'),
        internal_ip_range=pulumi.get(__response__, 'internal_ip_range'),
        ip_unnumbered=pulumi.get(__response__, 'ip_unnumbered'),
        last_modification_time=pulumi.get(__response__, 'last_modification_time'),
        last_modified_bies=pulumi.get(__response__, 'last_modified_bies'),
        managed_bies=pulumi.get(__response__, 'managed_bies'),
        primary_dest_vips=pulumi.get(__response__, 'primary_dest_vips'),
        secondary_dest_vips=pulumi.get(__response__, 'secondary_dest_vips'),
        source_ip=pulumi.get(__response__, 'source_ip'),
        within_country=pulumi.get(__response__, 'within_country')))
