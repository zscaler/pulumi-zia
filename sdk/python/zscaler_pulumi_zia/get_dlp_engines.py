# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetDLPEnginesResult',
    'AwaitableGetDLPEnginesResult',
    'get_dlp_engines',
    'get_dlp_engines_output',
]

@pulumi.output_type
class GetDLPEnginesResult:
    """
    A collection of values returned by getDLPEngines.
    """
    def __init__(__self__, custom_dlp_engine=None, description=None, engine_expression=None, id=None, name=None, predefined_engine_name=None):
        if custom_dlp_engine and not isinstance(custom_dlp_engine, bool):
            raise TypeError("Expected argument 'custom_dlp_engine' to be a bool")
        pulumi.set(__self__, "custom_dlp_engine", custom_dlp_engine)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if engine_expression and not isinstance(engine_expression, str):
            raise TypeError("Expected argument 'engine_expression' to be a str")
        pulumi.set(__self__, "engine_expression", engine_expression)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if predefined_engine_name and not isinstance(predefined_engine_name, str):
            raise TypeError("Expected argument 'predefined_engine_name' to be a str")
        pulumi.set(__self__, "predefined_engine_name", predefined_engine_name)

    @property
    @pulumi.getter(name="customDlpEngine")
    def custom_dlp_engine(self) -> bool:
        return pulumi.get(self, "custom_dlp_engine")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="engineExpression")
    def engine_expression(self) -> str:
        return pulumi.get(self, "engine_expression")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="predefinedEngineName")
    def predefined_engine_name(self) -> Optional[str]:
        return pulumi.get(self, "predefined_engine_name")


class AwaitableGetDLPEnginesResult(GetDLPEnginesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDLPEnginesResult(
            custom_dlp_engine=self.custom_dlp_engine,
            description=self.description,
            engine_expression=self.engine_expression,
            id=self.id,
            name=self.name,
            predefined_engine_name=self.predefined_engine_name)


def get_dlp_engines(id: Optional[int] = None,
                    name: Optional[str] = None,
                    predefined_engine_name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDLPEnginesResult:
    """
    Use the **zia_dlp_engines** data source to get information about a ZIA DLP Engines in the Zscaler Internet Access cloud or via the API.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    this = zia.get_dlp_engines(name="Example")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    this = zia.get_dlp_engines(id=1234567890)
    ```
    <!--End PulumiCodeChooser -->


    :param int id: The unique identifier for the DLP engine.
    :param str name: The DLP engine name as configured by the admin. This attribute is required in POST and PUT requests for custom DLP engines.
    :param str predefined_engine_name: The name of the predefined DLP engine.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['predefinedEngineName'] = predefined_engine_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getDLPEngines:getDLPEngines', __args__, opts=opts, typ=GetDLPEnginesResult).value

    return AwaitableGetDLPEnginesResult(
        custom_dlp_engine=pulumi.get(__ret__, 'custom_dlp_engine'),
        description=pulumi.get(__ret__, 'description'),
        engine_expression=pulumi.get(__ret__, 'engine_expression'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        predefined_engine_name=pulumi.get(__ret__, 'predefined_engine_name'))


@_utilities.lift_output_func(get_dlp_engines)
def get_dlp_engines_output(id: Optional[pulumi.Input[Optional[int]]] = None,
                           name: Optional[pulumi.Input[Optional[str]]] = None,
                           predefined_engine_name: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDLPEnginesResult]:
    """
    Use the **zia_dlp_engines** data source to get information about a ZIA DLP Engines in the Zscaler Internet Access cloud or via the API.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    this = zia.get_dlp_engines(name="Example")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    this = zia.get_dlp_engines(id=1234567890)
    ```
    <!--End PulumiCodeChooser -->


    :param int id: The unique identifier for the DLP engine.
    :param str name: The DLP engine name as configured by the admin. This attribute is required in POST and PUT requests for custom DLP engines.
    :param str predefined_engine_name: The name of the predefined DLP engine.
    """
    ...
