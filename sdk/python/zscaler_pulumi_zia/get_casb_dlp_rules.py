# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCasbDlpRulesResult',
    'AwaitableGetCasbDlpRulesResult',
    'get_casb_dlp_rules',
    'get_casb_dlp_rules_output',
]

@pulumi.output_type
class GetCasbDlpRulesResult:
    """
    A collection of values returned by getCasbDlpRules.
    """
    def __init__(__self__, access_control=None, action=None, auditor_notifications=None, bucket_owner=None, buckets=None, casb_email_labels=None, casb_tombstone_templates=None, cloud_app_tenants=None, collaboration_scopes=None, components=None, content_location=None, criteria_domain_profiles=None, departments=None, description=None, dlp_engines=None, domains=None, email_recipient_profiles=None, entity_groups=None, excluded_domain_profiles=None, external_auditor_email=None, file_types=None, groups=None, id=None, include_criteria_domain_profile=None, include_email_recipient_profile=None, include_entity_groups=None, included_domain_profiles=None, labels=None, last_modified_time=None, name=None, number_of_external_collaborators=None, number_of_internal_collaborators=None, object_types=None, order=None, quarantine_location=None, rank=None, recipient=None, redaction_profiles=None, severity=None, state=None, tags=None, type=None, users=None, watermark_delete_old_version=None, watermark_profiles=None, without_content_inspection=None, zscaler_incident_receivers=None):
        if access_control and not isinstance(access_control, str):
            raise TypeError("Expected argument 'access_control' to be a str")
        pulumi.set(__self__, "access_control", access_control)
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if auditor_notifications and not isinstance(auditor_notifications, list):
            raise TypeError("Expected argument 'auditor_notifications' to be a list")
        pulumi.set(__self__, "auditor_notifications", auditor_notifications)
        if bucket_owner and not isinstance(bucket_owner, str):
            raise TypeError("Expected argument 'bucket_owner' to be a str")
        pulumi.set(__self__, "bucket_owner", bucket_owner)
        if buckets and not isinstance(buckets, list):
            raise TypeError("Expected argument 'buckets' to be a list")
        pulumi.set(__self__, "buckets", buckets)
        if casb_email_labels and not isinstance(casb_email_labels, list):
            raise TypeError("Expected argument 'casb_email_labels' to be a list")
        pulumi.set(__self__, "casb_email_labels", casb_email_labels)
        if casb_tombstone_templates and not isinstance(casb_tombstone_templates, list):
            raise TypeError("Expected argument 'casb_tombstone_templates' to be a list")
        pulumi.set(__self__, "casb_tombstone_templates", casb_tombstone_templates)
        if cloud_app_tenants and not isinstance(cloud_app_tenants, list):
            raise TypeError("Expected argument 'cloud_app_tenants' to be a list")
        pulumi.set(__self__, "cloud_app_tenants", cloud_app_tenants)
        if collaboration_scopes and not isinstance(collaboration_scopes, list):
            raise TypeError("Expected argument 'collaboration_scopes' to be a list")
        pulumi.set(__self__, "collaboration_scopes", collaboration_scopes)
        if components and not isinstance(components, list):
            raise TypeError("Expected argument 'components' to be a list")
        pulumi.set(__self__, "components", components)
        if content_location and not isinstance(content_location, str):
            raise TypeError("Expected argument 'content_location' to be a str")
        pulumi.set(__self__, "content_location", content_location)
        if criteria_domain_profiles and not isinstance(criteria_domain_profiles, list):
            raise TypeError("Expected argument 'criteria_domain_profiles' to be a list")
        pulumi.set(__self__, "criteria_domain_profiles", criteria_domain_profiles)
        if departments and not isinstance(departments, list):
            raise TypeError("Expected argument 'departments' to be a list")
        pulumi.set(__self__, "departments", departments)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dlp_engines and not isinstance(dlp_engines, list):
            raise TypeError("Expected argument 'dlp_engines' to be a list")
        pulumi.set(__self__, "dlp_engines", dlp_engines)
        if domains and not isinstance(domains, list):
            raise TypeError("Expected argument 'domains' to be a list")
        pulumi.set(__self__, "domains", domains)
        if email_recipient_profiles and not isinstance(email_recipient_profiles, list):
            raise TypeError("Expected argument 'email_recipient_profiles' to be a list")
        pulumi.set(__self__, "email_recipient_profiles", email_recipient_profiles)
        if entity_groups and not isinstance(entity_groups, list):
            raise TypeError("Expected argument 'entity_groups' to be a list")
        pulumi.set(__self__, "entity_groups", entity_groups)
        if excluded_domain_profiles and not isinstance(excluded_domain_profiles, list):
            raise TypeError("Expected argument 'excluded_domain_profiles' to be a list")
        pulumi.set(__self__, "excluded_domain_profiles", excluded_domain_profiles)
        if external_auditor_email and not isinstance(external_auditor_email, str):
            raise TypeError("Expected argument 'external_auditor_email' to be a str")
        pulumi.set(__self__, "external_auditor_email", external_auditor_email)
        if file_types and not isinstance(file_types, list):
            raise TypeError("Expected argument 'file_types' to be a list")
        pulumi.set(__self__, "file_types", file_types)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if include_criteria_domain_profile and not isinstance(include_criteria_domain_profile, bool):
            raise TypeError("Expected argument 'include_criteria_domain_profile' to be a bool")
        pulumi.set(__self__, "include_criteria_domain_profile", include_criteria_domain_profile)
        if include_email_recipient_profile and not isinstance(include_email_recipient_profile, bool):
            raise TypeError("Expected argument 'include_email_recipient_profile' to be a bool")
        pulumi.set(__self__, "include_email_recipient_profile", include_email_recipient_profile)
        if include_entity_groups and not isinstance(include_entity_groups, bool):
            raise TypeError("Expected argument 'include_entity_groups' to be a bool")
        pulumi.set(__self__, "include_entity_groups", include_entity_groups)
        if included_domain_profiles and not isinstance(included_domain_profiles, list):
            raise TypeError("Expected argument 'included_domain_profiles' to be a list")
        pulumi.set(__self__, "included_domain_profiles", included_domain_profiles)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if last_modified_time and not isinstance(last_modified_time, int):
            raise TypeError("Expected argument 'last_modified_time' to be a int")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if number_of_external_collaborators and not isinstance(number_of_external_collaborators, str):
            raise TypeError("Expected argument 'number_of_external_collaborators' to be a str")
        pulumi.set(__self__, "number_of_external_collaborators", number_of_external_collaborators)
        if number_of_internal_collaborators and not isinstance(number_of_internal_collaborators, str):
            raise TypeError("Expected argument 'number_of_internal_collaborators' to be a str")
        pulumi.set(__self__, "number_of_internal_collaborators", number_of_internal_collaborators)
        if object_types and not isinstance(object_types, list):
            raise TypeError("Expected argument 'object_types' to be a list")
        pulumi.set(__self__, "object_types", object_types)
        if order and not isinstance(order, int):
            raise TypeError("Expected argument 'order' to be a int")
        pulumi.set(__self__, "order", order)
        if quarantine_location and not isinstance(quarantine_location, str):
            raise TypeError("Expected argument 'quarantine_location' to be a str")
        pulumi.set(__self__, "quarantine_location", quarantine_location)
        if rank and not isinstance(rank, int):
            raise TypeError("Expected argument 'rank' to be a int")
        pulumi.set(__self__, "rank", rank)
        if recipient and not isinstance(recipient, str):
            raise TypeError("Expected argument 'recipient' to be a str")
        pulumi.set(__self__, "recipient", recipient)
        if redaction_profiles and not isinstance(redaction_profiles, list):
            raise TypeError("Expected argument 'redaction_profiles' to be a list")
        pulumi.set(__self__, "redaction_profiles", redaction_profiles)
        if severity and not isinstance(severity, str):
            raise TypeError("Expected argument 'severity' to be a str")
        pulumi.set(__self__, "severity", severity)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)
        if watermark_delete_old_version and not isinstance(watermark_delete_old_version, bool):
            raise TypeError("Expected argument 'watermark_delete_old_version' to be a bool")
        pulumi.set(__self__, "watermark_delete_old_version", watermark_delete_old_version)
        if watermark_profiles and not isinstance(watermark_profiles, list):
            raise TypeError("Expected argument 'watermark_profiles' to be a list")
        pulumi.set(__self__, "watermark_profiles", watermark_profiles)
        if without_content_inspection and not isinstance(without_content_inspection, bool):
            raise TypeError("Expected argument 'without_content_inspection' to be a bool")
        pulumi.set(__self__, "without_content_inspection", without_content_inspection)
        if zscaler_incident_receivers and not isinstance(zscaler_incident_receivers, list):
            raise TypeError("Expected argument 'zscaler_incident_receivers' to be a list")
        pulumi.set(__self__, "zscaler_incident_receivers", zscaler_incident_receivers)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> builtins.str:
        """
        (string) Access privilege of this rule based on the admin's RBA state.
        """
        return pulumi.get(self, "access_control")

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        (string) The configured action for the policy rule.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="auditorNotifications")
    def auditor_notifications(self) -> Sequence['outputs.GetCasbDlpRulesAuditorNotificationResult']:
        return pulumi.get(self, "auditor_notifications")

    @property
    @pulumi.getter(name="bucketOwner")
    def bucket_owner(self) -> builtins.str:
        """
        (string) A user who inspects their buckets for sensitive data.
        """
        return pulumi.get(self, "bucket_owner")

    @property
    @pulumi.getter
    def buckets(self) -> Sequence['outputs.GetCasbDlpRulesBucketResult']:
        return pulumi.get(self, "buckets")

    @property
    @pulumi.getter(name="casbEmailLabels")
    def casb_email_labels(self) -> Sequence['outputs.GetCasbDlpRulesCasbEmailLabelResult']:
        return pulumi.get(self, "casb_email_labels")

    @property
    @pulumi.getter(name="casbTombstoneTemplates")
    def casb_tombstone_templates(self) -> Sequence['outputs.GetCasbDlpRulesCasbTombstoneTemplateResult']:
        return pulumi.get(self, "casb_tombstone_templates")

    @property
    @pulumi.getter(name="cloudAppTenants")
    def cloud_app_tenants(self) -> Sequence['outputs.GetCasbDlpRulesCloudAppTenantResult']:
        return pulumi.get(self, "cloud_app_tenants")

    @property
    @pulumi.getter(name="collaborationScopes")
    def collaboration_scopes(self) -> Sequence[builtins.str]:
        """
        (List of String) Collaboration scope for the rule.
        """
        return pulumi.get(self, "collaboration_scopes")

    @property
    @pulumi.getter
    def components(self) -> Sequence[builtins.str]:
        """
        (List of String) List of components for which the rule is applied.
        """
        return pulumi.get(self, "components")

    @property
    @pulumi.getter(name="contentLocation")
    def content_location(self) -> builtins.str:
        """
        (string) The location for the content that the Zscaler service inspects for sensitive data.
        """
        return pulumi.get(self, "content_location")

    @property
    @pulumi.getter(name="criteriaDomainProfiles")
    def criteria_domain_profiles(self) -> Sequence['outputs.GetCasbDlpRulesCriteriaDomainProfileResult']:
        return pulumi.get(self, "criteria_domain_profiles")

    @property
    @pulumi.getter
    def departments(self) -> Sequence['outputs.GetCasbDlpRulesDepartmentResult']:
        return pulumi.get(self, "departments")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        (string) An admin editable text-based description of the rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dlpEngines")
    def dlp_engines(self) -> Sequence['outputs.GetCasbDlpRulesDlpEngineResult']:
        return pulumi.get(self, "dlp_engines")

    @property
    @pulumi.getter
    def domains(self) -> Sequence[builtins.str]:
        """
        (List of String) Domain for the external organization sharing the channel.
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter(name="emailRecipientProfiles")
    def email_recipient_profiles(self) -> Sequence['outputs.GetCasbDlpRulesEmailRecipientProfileResult']:
        return pulumi.get(self, "email_recipient_profiles")

    @property
    @pulumi.getter(name="entityGroups")
    def entity_groups(self) -> Sequence['outputs.GetCasbDlpRulesEntityGroupResult']:
        return pulumi.get(self, "entity_groups")

    @property
    @pulumi.getter(name="excludedDomainProfiles")
    def excluded_domain_profiles(self) -> Sequence['outputs.GetCasbDlpRulesExcludedDomainProfileResult']:
        return pulumi.get(self, "excluded_domain_profiles")

    @property
    @pulumi.getter(name="externalAuditorEmail")
    def external_auditor_email(self) -> builtins.str:
        """
        (string) Email address of the external auditor to whom the DLP email alerts are sent.
        """
        return pulumi.get(self, "external_auditor_email")

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Sequence[builtins.str]:
        """
        (List of String) File types to which the rule is applied.
        """
        return pulumi.get(self, "file_types")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetCasbDlpRulesGroupResult']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        (int) A unique identifier for the tombstone template.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeCriteriaDomainProfile")
    def include_criteria_domain_profile(self) -> builtins.bool:
        """
        (bool) If true, `criteriaDomainProfiles` is included in the criteria.
        """
        return pulumi.get(self, "include_criteria_domain_profile")

    @property
    @pulumi.getter(name="includeEmailRecipientProfile")
    def include_email_recipient_profile(self) -> builtins.bool:
        """
        (bool) If true, `emailRecipientProfiles` is included in the criteria.
        """
        return pulumi.get(self, "include_email_recipient_profile")

    @property
    @pulumi.getter(name="includeEntityGroups")
    def include_entity_groups(self) -> builtins.bool:
        """
        (bool) If true, `entityGroups` is included in the criteria.
        """
        return pulumi.get(self, "include_entity_groups")

    @property
    @pulumi.getter(name="includedDomainProfiles")
    def included_domain_profiles(self) -> Sequence['outputs.GetCasbDlpRulesIncludedDomainProfileResult']:
        return pulumi.get(self, "included_domain_profiles")

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetCasbDlpRulesLabelResult']:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> builtins.int:
        """
        (int) Last modification time of the rule.
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (string) The configured name of the tombstone template.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfExternalCollaborators")
    def number_of_external_collaborators(self) -> builtins.str:
        """
        (string) Number of external collaborators for files shared outside of an organization.
        """
        return pulumi.get(self, "number_of_external_collaborators")

    @property
    @pulumi.getter(name="numberOfInternalCollaborators")
    def number_of_internal_collaborators(self) -> builtins.str:
        """
        (string) Number of internal collaborators for files shared within an organization.
        """
        return pulumi.get(self, "number_of_internal_collaborators")

    @property
    @pulumi.getter(name="objectTypes")
    def object_types(self) -> Sequence['outputs.GetCasbDlpRulesObjectTypeResult']:
        return pulumi.get(self, "object_types")

    @property
    @pulumi.getter
    def order(self) -> builtins.int:
        """
        (int) Order of rule execution with respect to other SaaS Security Data at Rest Scanning DLP rules.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="quarantineLocation")
    def quarantine_location(self) -> builtins.str:
        """
        (string) Location where all quarantined files are moved for action.
        """
        return pulumi.get(self, "quarantine_location")

    @property
    @pulumi.getter
    def rank(self) -> builtins.int:
        """
        (int) Rank of the rule.
        """
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter
    def recipient(self) -> builtins.str:
        """
        (string) Specifies if the email recipient is internal or external.
        """
        return pulumi.get(self, "recipient")

    @property
    @pulumi.getter(name="redactionProfiles")
    def redaction_profiles(self) -> Sequence['outputs.GetCasbDlpRulesRedactionProfileResult']:
        return pulumi.get(self, "redaction_profiles")

    @property
    @pulumi.getter
    def severity(self) -> builtins.str:
        """
        (string) The severity level of the incidents that match the policy rule.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        (string) Administrative state of the rule.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetCasbDlpRulesTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetCasbDlpRulesUserResult']:
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="watermarkDeleteOldVersion")
    def watermark_delete_old_version(self) -> builtins.bool:
        """
        (bool) Specifies whether to delete an old version of the watermarked file.
        """
        return pulumi.get(self, "watermark_delete_old_version")

    @property
    @pulumi.getter(name="watermarkProfiles")
    def watermark_profiles(self) -> Sequence['outputs.GetCasbDlpRulesWatermarkProfileResult']:
        return pulumi.get(self, "watermark_profiles")

    @property
    @pulumi.getter(name="withoutContentInspection")
    def without_content_inspection(self) -> builtins.bool:
        """
        (bool) If true, Content Matching is set to None.
        """
        return pulumi.get(self, "without_content_inspection")

    @property
    @pulumi.getter(name="zscalerIncidentReceivers")
    def zscaler_incident_receivers(self) -> Sequence['outputs.GetCasbDlpRulesZscalerIncidentReceiverResult']:
        return pulumi.get(self, "zscaler_incident_receivers")


class AwaitableGetCasbDlpRulesResult(GetCasbDlpRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCasbDlpRulesResult(
            access_control=self.access_control,
            action=self.action,
            auditor_notifications=self.auditor_notifications,
            bucket_owner=self.bucket_owner,
            buckets=self.buckets,
            casb_email_labels=self.casb_email_labels,
            casb_tombstone_templates=self.casb_tombstone_templates,
            cloud_app_tenants=self.cloud_app_tenants,
            collaboration_scopes=self.collaboration_scopes,
            components=self.components,
            content_location=self.content_location,
            criteria_domain_profiles=self.criteria_domain_profiles,
            departments=self.departments,
            description=self.description,
            dlp_engines=self.dlp_engines,
            domains=self.domains,
            email_recipient_profiles=self.email_recipient_profiles,
            entity_groups=self.entity_groups,
            excluded_domain_profiles=self.excluded_domain_profiles,
            external_auditor_email=self.external_auditor_email,
            file_types=self.file_types,
            groups=self.groups,
            id=self.id,
            include_criteria_domain_profile=self.include_criteria_domain_profile,
            include_email_recipient_profile=self.include_email_recipient_profile,
            include_entity_groups=self.include_entity_groups,
            included_domain_profiles=self.included_domain_profiles,
            labels=self.labels,
            last_modified_time=self.last_modified_time,
            name=self.name,
            number_of_external_collaborators=self.number_of_external_collaborators,
            number_of_internal_collaborators=self.number_of_internal_collaborators,
            object_types=self.object_types,
            order=self.order,
            quarantine_location=self.quarantine_location,
            rank=self.rank,
            recipient=self.recipient,
            redaction_profiles=self.redaction_profiles,
            severity=self.severity,
            state=self.state,
            tags=self.tags,
            type=self.type,
            users=self.users,
            watermark_delete_old_version=self.watermark_delete_old_version,
            watermark_profiles=self.watermark_profiles,
            without_content_inspection=self.without_content_inspection,
            zscaler_incident_receivers=self.zscaler_incident_receivers)


def get_casb_dlp_rules(id: Optional[builtins.int] = None,
                       name: Optional[builtins.str] = None,
                       type: Optional[builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCasbDlpRulesResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/configuring-data-rest-scanning-dlp-policy)
    * [API documentation](https://help.zscaler.com/zia/saas-security-api#/casbDlpRules-post)

    Use the **zia_casb_dlp_rules** data source to get information about SaaS Security Data at Rest Scanning Data Loss Prevention (DLP) rules based on the specified rule type.

    ## Example Usage

    ### By Name

    ### By ID


    :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
    :param builtins.str name: Rule name.
    :param builtins.str type: The type of SaaS Security Data at Rest Scanning DLP rule.
           * `OFLCASB_DLP_FILE`
           * `OFLCASB_DLP_EMAIL`
           * `OFLCASB_DLP_CRM`
           * `OFLCASB_DLP_ITSM`
           * `OFLCASB_DLP_COLLAB`
           * `OFLCASB_DLP_REPO`
           * `OFLCASB_DLP_STORAGE`
           * `OFLCASB_DLP_GENAI`
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getCasbDlpRules:getCasbDlpRules', __args__, opts=opts, typ=GetCasbDlpRulesResult).value

    return AwaitableGetCasbDlpRulesResult(
        access_control=pulumi.get(__ret__, 'access_control'),
        action=pulumi.get(__ret__, 'action'),
        auditor_notifications=pulumi.get(__ret__, 'auditor_notifications'),
        bucket_owner=pulumi.get(__ret__, 'bucket_owner'),
        buckets=pulumi.get(__ret__, 'buckets'),
        casb_email_labels=pulumi.get(__ret__, 'casb_email_labels'),
        casb_tombstone_templates=pulumi.get(__ret__, 'casb_tombstone_templates'),
        cloud_app_tenants=pulumi.get(__ret__, 'cloud_app_tenants'),
        collaboration_scopes=pulumi.get(__ret__, 'collaboration_scopes'),
        components=pulumi.get(__ret__, 'components'),
        content_location=pulumi.get(__ret__, 'content_location'),
        criteria_domain_profiles=pulumi.get(__ret__, 'criteria_domain_profiles'),
        departments=pulumi.get(__ret__, 'departments'),
        description=pulumi.get(__ret__, 'description'),
        dlp_engines=pulumi.get(__ret__, 'dlp_engines'),
        domains=pulumi.get(__ret__, 'domains'),
        email_recipient_profiles=pulumi.get(__ret__, 'email_recipient_profiles'),
        entity_groups=pulumi.get(__ret__, 'entity_groups'),
        excluded_domain_profiles=pulumi.get(__ret__, 'excluded_domain_profiles'),
        external_auditor_email=pulumi.get(__ret__, 'external_auditor_email'),
        file_types=pulumi.get(__ret__, 'file_types'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        include_criteria_domain_profile=pulumi.get(__ret__, 'include_criteria_domain_profile'),
        include_email_recipient_profile=pulumi.get(__ret__, 'include_email_recipient_profile'),
        include_entity_groups=pulumi.get(__ret__, 'include_entity_groups'),
        included_domain_profiles=pulumi.get(__ret__, 'included_domain_profiles'),
        labels=pulumi.get(__ret__, 'labels'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        name=pulumi.get(__ret__, 'name'),
        number_of_external_collaborators=pulumi.get(__ret__, 'number_of_external_collaborators'),
        number_of_internal_collaborators=pulumi.get(__ret__, 'number_of_internal_collaborators'),
        object_types=pulumi.get(__ret__, 'object_types'),
        order=pulumi.get(__ret__, 'order'),
        quarantine_location=pulumi.get(__ret__, 'quarantine_location'),
        rank=pulumi.get(__ret__, 'rank'),
        recipient=pulumi.get(__ret__, 'recipient'),
        redaction_profiles=pulumi.get(__ret__, 'redaction_profiles'),
        severity=pulumi.get(__ret__, 'severity'),
        state=pulumi.get(__ret__, 'state'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        users=pulumi.get(__ret__, 'users'),
        watermark_delete_old_version=pulumi.get(__ret__, 'watermark_delete_old_version'),
        watermark_profiles=pulumi.get(__ret__, 'watermark_profiles'),
        without_content_inspection=pulumi.get(__ret__, 'without_content_inspection'),
        zscaler_incident_receivers=pulumi.get(__ret__, 'zscaler_incident_receivers'))
def get_casb_dlp_rules_output(id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                              name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                              type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCasbDlpRulesResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/configuring-data-rest-scanning-dlp-policy)
    * [API documentation](https://help.zscaler.com/zia/saas-security-api#/casbDlpRules-post)

    Use the **zia_casb_dlp_rules** data source to get information about SaaS Security Data at Rest Scanning Data Loss Prevention (DLP) rules based on the specified rule type.

    ## Example Usage

    ### By Name

    ### By ID


    :param builtins.int id: System-generated identifier for the SaaS Security Data at Rest Scanning DLP rule.
    :param builtins.str name: Rule name.
    :param builtins.str type: The type of SaaS Security Data at Rest Scanning DLP rule.
           * `OFLCASB_DLP_FILE`
           * `OFLCASB_DLP_EMAIL`
           * `OFLCASB_DLP_CRM`
           * `OFLCASB_DLP_ITSM`
           * `OFLCASB_DLP_COLLAB`
           * `OFLCASB_DLP_REPO`
           * `OFLCASB_DLP_STORAGE`
           * `OFLCASB_DLP_GENAI`
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getCasbDlpRules:getCasbDlpRules', __args__, opts=opts, typ=GetCasbDlpRulesResult)
    return __ret__.apply(lambda __response__: GetCasbDlpRulesResult(
        access_control=pulumi.get(__response__, 'access_control'),
        action=pulumi.get(__response__, 'action'),
        auditor_notifications=pulumi.get(__response__, 'auditor_notifications'),
        bucket_owner=pulumi.get(__response__, 'bucket_owner'),
        buckets=pulumi.get(__response__, 'buckets'),
        casb_email_labels=pulumi.get(__response__, 'casb_email_labels'),
        casb_tombstone_templates=pulumi.get(__response__, 'casb_tombstone_templates'),
        cloud_app_tenants=pulumi.get(__response__, 'cloud_app_tenants'),
        collaboration_scopes=pulumi.get(__response__, 'collaboration_scopes'),
        components=pulumi.get(__response__, 'components'),
        content_location=pulumi.get(__response__, 'content_location'),
        criteria_domain_profiles=pulumi.get(__response__, 'criteria_domain_profiles'),
        departments=pulumi.get(__response__, 'departments'),
        description=pulumi.get(__response__, 'description'),
        dlp_engines=pulumi.get(__response__, 'dlp_engines'),
        domains=pulumi.get(__response__, 'domains'),
        email_recipient_profiles=pulumi.get(__response__, 'email_recipient_profiles'),
        entity_groups=pulumi.get(__response__, 'entity_groups'),
        excluded_domain_profiles=pulumi.get(__response__, 'excluded_domain_profiles'),
        external_auditor_email=pulumi.get(__response__, 'external_auditor_email'),
        file_types=pulumi.get(__response__, 'file_types'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        include_criteria_domain_profile=pulumi.get(__response__, 'include_criteria_domain_profile'),
        include_email_recipient_profile=pulumi.get(__response__, 'include_email_recipient_profile'),
        include_entity_groups=pulumi.get(__response__, 'include_entity_groups'),
        included_domain_profiles=pulumi.get(__response__, 'included_domain_profiles'),
        labels=pulumi.get(__response__, 'labels'),
        last_modified_time=pulumi.get(__response__, 'last_modified_time'),
        name=pulumi.get(__response__, 'name'),
        number_of_external_collaborators=pulumi.get(__response__, 'number_of_external_collaborators'),
        number_of_internal_collaborators=pulumi.get(__response__, 'number_of_internal_collaborators'),
        object_types=pulumi.get(__response__, 'object_types'),
        order=pulumi.get(__response__, 'order'),
        quarantine_location=pulumi.get(__response__, 'quarantine_location'),
        rank=pulumi.get(__response__, 'rank'),
        recipient=pulumi.get(__response__, 'recipient'),
        redaction_profiles=pulumi.get(__response__, 'redaction_profiles'),
        severity=pulumi.get(__response__, 'severity'),
        state=pulumi.get(__response__, 'state'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        users=pulumi.get(__response__, 'users'),
        watermark_delete_old_version=pulumi.get(__response__, 'watermark_delete_old_version'),
        watermark_profiles=pulumi.get(__response__, 'watermark_profiles'),
        without_content_inspection=pulumi.get(__response__, 'without_content_inspection'),
        zscaler_incident_receivers=pulumi.get(__response__, 'zscaler_incident_receivers')))
