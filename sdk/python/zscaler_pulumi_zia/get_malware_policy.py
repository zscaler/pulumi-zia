# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMalwarePolicyResult',
    'AwaitableGetMalwarePolicyResult',
    'get_malware_policy',
    'get_malware_policy_output',
]

@pulumi.output_type
class GetMalwarePolicyResult:
    """
    A collection of values returned by getMalwarePolicy.
    """
    def __init__(__self__, block_password_protected_archive_files=None, block_unscannable_files=None, id=None):
        if block_password_protected_archive_files and not isinstance(block_password_protected_archive_files, bool):
            raise TypeError("Expected argument 'block_password_protected_archive_files' to be a bool")
        pulumi.set(__self__, "block_password_protected_archive_files", block_password_protected_archive_files)
        if block_unscannable_files and not isinstance(block_unscannable_files, bool):
            raise TypeError("Expected argument 'block_unscannable_files' to be a bool")
        pulumi.set(__self__, "block_unscannable_files", block_unscannable_files)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="blockPasswordProtectedArchiveFiles")
    def block_password_protected_archive_files(self) -> builtins.bool:
        return pulumi.get(self, "block_password_protected_archive_files")

    @property
    @pulumi.getter(name="blockUnscannableFiles")
    def block_unscannable_files(self) -> builtins.bool:
        return pulumi.get(self, "block_unscannable_files")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetMalwarePolicyResult(GetMalwarePolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMalwarePolicyResult(
            block_password_protected_archive_files=self.block_password_protected_archive_files,
            block_unscannable_files=self.block_unscannable_files,
            id=self.id)


def get_malware_policy(block_password_protected_archive_files: Optional[builtins.bool] = None,
                       block_unscannable_files: Optional[builtins.bool] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMalwarePolicyResult:
    """
    Use the **zia_atp_malware_policy** data source to retrieves information about the security exceptions configured for the Malware Protection policy. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)

    ## Example Usage
    """
    __args__ = dict()
    __args__['blockPasswordProtectedArchiveFiles'] = block_password_protected_archive_files
    __args__['blockUnscannableFiles'] = block_unscannable_files
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getMalwarePolicy:getMalwarePolicy', __args__, opts=opts, typ=GetMalwarePolicyResult).value

    return AwaitableGetMalwarePolicyResult(
        block_password_protected_archive_files=pulumi.get(__ret__, 'block_password_protected_archive_files'),
        block_unscannable_files=pulumi.get(__ret__, 'block_unscannable_files'),
        id=pulumi.get(__ret__, 'id'))
def get_malware_policy_output(block_password_protected_archive_files: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                              block_unscannable_files: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMalwarePolicyResult]:
    """
    Use the **zia_atp_malware_policy** data source to retrieves information about the security exceptions configured for the Malware Protection policy. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)

    ## Example Usage
    """
    __args__ = dict()
    __args__['blockPasswordProtectedArchiveFiles'] = block_password_protected_archive_files
    __args__['blockUnscannableFiles'] = block_unscannable_files
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getMalwarePolicy:getMalwarePolicy', __args__, opts=opts, typ=GetMalwarePolicyResult)
    return __ret__.apply(lambda __response__: GetMalwarePolicyResult(
        block_password_protected_archive_files=pulumi.get(__response__, 'block_password_protected_archive_files'),
        block_unscannable_files=pulumi.get(__response__, 'block_unscannable_files'),
        id=pulumi.get(__response__, 'id')))
