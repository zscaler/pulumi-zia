# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetATPMaliciousURLsResult',
    'AwaitableGetATPMaliciousURLsResult',
    'get_atp_malicious_urls',
    'get_atp_malicious_urls_output',
]

@pulumi.output_type
class GetATPMaliciousURLsResult:
    """
    A collection of values returned by getATPMaliciousURLs.
    """
    def __init__(__self__, id=None, malicious_urls=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if malicious_urls and not isinstance(malicious_urls, list):
            raise TypeError("Expected argument 'malicious_urls' to be a list")
        pulumi.set(__self__, "malicious_urls", malicious_urls)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maliciousUrls")
    def malicious_urls(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "malicious_urls")


class AwaitableGetATPMaliciousURLsResult(GetATPMaliciousURLsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetATPMaliciousURLsResult(
            id=self.id,
            malicious_urls=self.malicious_urls)


def get_atp_malicious_urls(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetATPMaliciousURLsResult:
    """
    Use the **zia_atp_malicious_urls** data source to Retrieves the malicious URLs added to the denylist in the Advanced Threat Protection (ATP) policy. To learn more see [Advanced Threat Protection](https://help.zscaler.com/unified/configuring-security-exceptions-advanced-threat-protection-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getATPMaliciousURLs:getATPMaliciousURLs', __args__, opts=opts, typ=GetATPMaliciousURLsResult).value

    return AwaitableGetATPMaliciousURLsResult(
        id=pulumi.get(__ret__, 'id'),
        malicious_urls=pulumi.get(__ret__, 'malicious_urls'))
def get_atp_malicious_urls_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetATPMaliciousURLsResult]:
    """
    Use the **zia_atp_malicious_urls** data source to Retrieves the malicious URLs added to the denylist in the Advanced Threat Protection (ATP) policy. To learn more see [Advanced Threat Protection](https://help.zscaler.com/unified/configuring-security-exceptions-advanced-threat-protection-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getATPMaliciousURLs:getATPMaliciousURLs', __args__, opts=opts, typ=GetATPMaliciousURLsResult)
    return __ret__.apply(lambda __response__: GetATPMaliciousURLsResult(
        id=pulumi.get(__response__, 'id'),
        malicious_urls=pulumi.get(__response__, 'malicious_urls')))
