# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetDeviceGroupsResult',
    'AwaitableGetDeviceGroupsResult',
    'get_device_groups',
    'get_device_groups_output',
]

@pulumi.output_type
class GetDeviceGroupsResult:
    """
    A collection of values returned by getDeviceGroups.
    """
    def __init__(__self__, description=None, device_count=None, device_names=None, group_type=None, id=None, name=None, os_type=None, predefined=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_count and not isinstance(device_count, int):
            raise TypeError("Expected argument 'device_count' to be a int")
        pulumi.set(__self__, "device_count", device_count)
        if device_names and not isinstance(device_names, str):
            raise TypeError("Expected argument 'device_names' to be a str")
        pulumi.set(__self__, "device_names", device_names)
        if group_type and not isinstance(group_type, str):
            raise TypeError("Expected argument 'group_type' to be a str")
        pulumi.set(__self__, "group_type", group_type)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if os_type and not isinstance(os_type, str):
            raise TypeError("Expected argument 'os_type' to be a str")
        pulumi.set(__self__, "os_type", os_type)
        if predefined and not isinstance(predefined, bool):
            raise TypeError("Expected argument 'predefined' to be a bool")
        pulumi.set(__self__, "predefined", predefined)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (String) The device group's description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceCount")
    def device_count(self) -> int:
        """
        (int) The number of devices within the group.
        """
        return pulumi.get(self, "device_count")

    @property
    @pulumi.getter(name="deviceNames")
    def device_names(self) -> str:
        """
        (String) The names of devices that belong to the device group. The device names are comma-separated.
        """
        return pulumi.get(self, "device_names")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> str:
        """
        (String) The device group type. i.e ``ZCC_OS``, ``NON_ZCC``, ``CBI``
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        (String) The unique identifer for the device group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (String) The device group name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> str:
        """
        (String) The operating system (OS).
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def predefined(self) -> bool:
        """
        (Boolean) Indicates whether this is a predefined device group. If this value is set to true, the group is predefined.
        """
        return pulumi.get(self, "predefined")


class AwaitableGetDeviceGroupsResult(GetDeviceGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDeviceGroupsResult(
            description=self.description,
            device_count=self.device_count,
            device_names=self.device_names,
            group_type=self.group_type,
            id=self.id,
            name=self.name,
            os_type=self.os_type,
            predefined=self.predefined)


def get_device_groups(name: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDeviceGroupsResult:
    """
    Use the **zia_device_groups** data source to get information about a device group in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: URL Filtering Rules

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    ios = zia.get_device_groups(name="IOS")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    android = zia.get_device_groups(name="Android")
    ```
    <!--End PulumiCodeChooser -->


    :param str name: The name of the device group to be exported.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getDeviceGroups:getDeviceGroups', __args__, opts=opts, typ=GetDeviceGroupsResult).value

    return AwaitableGetDeviceGroupsResult(
        description=pulumi.get(__ret__, 'description'),
        device_count=pulumi.get(__ret__, 'device_count'),
        device_names=pulumi.get(__ret__, 'device_names'),
        group_type=pulumi.get(__ret__, 'group_type'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        os_type=pulumi.get(__ret__, 'os_type'),
        predefined=pulumi.get(__ret__, 'predefined'))


@_utilities.lift_output_func(get_device_groups)
def get_device_groups_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDeviceGroupsResult]:
    """
    Use the **zia_device_groups** data source to get information about a device group in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: URL Filtering Rules

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    ios = zia.get_device_groups(name="IOS")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    android = zia.get_device_groups(name="Android")
    ```
    <!--End PulumiCodeChooser -->


    :param str name: The name of the device group to be exported.
    """
    ...
