# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AdvancedSettingsArgs', 'AdvancedSettings']

@pulumi.input_type
class AdvancedSettingsArgs:
    def __init__(__self__, *,
                 auth_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 auth_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 auth_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 basic_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 basic_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 block_connect_host_sni_mismatch: Optional[pulumi.Input[builtins.bool]] = None,
                 block_domain_fronting_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 block_domain_fronting_on_host_header: Optional[pulumi.Input[builtins.bool]] = None,
                 block_http_tunnel_on_non_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 block_non_compliant_http_request_on_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 block_non_http_on_http_port_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 cascade_url_filtering: Optional[pulumi.Input[builtins.bool]] = None,
                 digest_auth_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 digest_auth_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 digest_auth_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_exempt_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_exempt_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_exempt_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_exempt_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 domain_fronting_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dynamic_user_risk_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ecs_for_all_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_admin_rank_access: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_dns_resolution_on_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_evaluate_policy_on_global_ssl_bypass: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ipv6_dns_optimization_on_all_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ipv6_dns_resolution_on_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_office365: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_policy_for_unauthenticated_traffic: Optional[pulumi.Input[builtins.bool]] = None,
                 enforce_surrogate_ip_for_windows_app: Optional[pulumi.Input[builtins.bool]] = None,
                 http2_nonbrowser_traffic_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 http_range_header_remove_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kerberos_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kerberos_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kerberos_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 log_internal_ip: Optional[pulumi.Input[builtins.bool]] = None,
                 prefer_sni_over_conn_host: Optional[pulumi.Input[builtins.bool]] = None,
                 prefer_sni_over_conn_host_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sipa_xff_header_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 sni_dns_optimization_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 track_http_tunnel_on_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 ui_session_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 zscaler_client_connector1_and_pac_road_warrior_in_firewall: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a AdvancedSettings resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] auth_bypass_apps: Cloud applications that are exempted from cookie authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] auth_bypass_url_categories: URL categories that are exempted from cookie authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] auth_bypass_urls: Custom URLs that are exempted from cookie authentication for users
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] basic_bypass_apps: Cloud applications that are exempted from Basic authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] basic_bypass_url_categories: URL categories that are exempted from Basic authentication
        :param pulumi.Input[builtins.bool] block_connect_host_sni_mismatch: Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
               is blocked or not
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] block_domain_fronting_apps: Applications which are subjected to Domain Fronting
        :param pulumi.Input[builtins.bool] block_domain_fronting_on_host_header: Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
               the FQDN of the request's host header
        :param pulumi.Input[builtins.bool] block_http_tunnel_on_non_http_ports: Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
               to ports other than the standard HTTP/S ports 80 and 443)
        :param pulumi.Input[builtins.bool] block_non_compliant_http_request_on_http_ports: Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
        :param pulumi.Input[builtins.bool] block_non_http_on_http_port_enabled: Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
        :param pulumi.Input[builtins.bool] cascade_url_filtering: Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
               transaction explicitly
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] digest_auth_bypass_apps: Cloud applications that are exempted from Digest authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] digest_auth_bypass_url_categories: URL categories that are exempted from Digest authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] digest_auth_bypass_urls: Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
               authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_apps: Cloud applications to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_exempt_apps: Cloud applications that are excluded from DNS optimization on transparent proxy mode
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_exempt_urls: URLs that are excluded from DNS optimization on transparent proxy mode
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_ipv6_apps: Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_ipv6_exempt_apps: Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_ipv6_url_categories: IPv6 URL categories to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_url_categories: URL categories to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_urls: URLs to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] domain_fronting_bypass_url_categories: URL categories that are exempted from domain fronting
        :param pulumi.Input[builtins.bool] dynamic_user_risk_enabled: Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
        :param pulumi.Input[builtins.bool] ecs_for_all_enabled: Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
               users.
        :param pulumi.Input[builtins.bool] enable_admin_rank_access: Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
        :param pulumi.Input[builtins.bool] enable_dns_resolution_on_transparent_proxy: Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
               (e.g., traffic via GRE or IPSec tunnels without a PAC file).
        :param pulumi.Input[builtins.bool] enable_evaluate_policy_on_global_ssl_bypass: Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
        :param pulumi.Input[builtins.bool] enable_ipv6_dns_optimization_on_all_transparent_proxy: Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
        :param pulumi.Input[builtins.bool] enable_ipv6_dns_resolution_on_transparent_proxy: Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
               destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
               PAC file).
        :param pulumi.Input[builtins.bool] enable_office365: Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
        :param pulumi.Input[builtins.bool] enable_policy_for_unauthenticated_traffic: Value indicating whether policies that include user and department criteria can be configured and applied for
               unauthenticated traffic
        :param pulumi.Input[builtins.bool] enforce_surrogate_ip_for_windows_app: Enforce Surrogate IP authentication for Windows app traffic
        :param pulumi.Input[builtins.bool] http2_nonbrowser_traffic_enabled: Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
               organizational level
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] http_range_header_remove_url_categories: URL categories for which HTTP range headers must be removed
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] kerberos_bypass_apps: Cloud applications that are exempted from Kerberos authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] kerberos_bypass_url_categories: URL categories that are exempted from Kerberos authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] kerberos_bypass_urls: Custom URLs that are exempted from Kerberos authentication
        :param pulumi.Input[builtins.bool] log_internal_ip: Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
        :param pulumi.Input[builtins.bool] prefer_sni_over_conn_host: Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
               forward proxy connections
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] prefer_sni_over_conn_host_apps: Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
               resolution instead of the CONNECT host for forward proxy connections)
        :param pulumi.Input[builtins.bool] sipa_xff_header_enabled: Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
               IP-anchored and ZIA-inspected ZPA application traffic.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sni_dns_optimization_bypass_url_categories: URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
               resolution instead of the CONNECT host for forward proxy connections)
        :param pulumi.Input[builtins.bool] track_http_tunnel_on_http_ports: Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
               80
        :param pulumi.Input[builtins.int] ui_session_timeout: Specifies the login session timeout for admins accessing the ZIA Admin Portal
        :param pulumi.Input[builtins.bool] zscaler_client_connector1_and_pac_road_warrior_in_firewall: Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
               Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
        """
        if auth_bypass_apps is not None:
            pulumi.set(__self__, "auth_bypass_apps", auth_bypass_apps)
        if auth_bypass_url_categories is not None:
            pulumi.set(__self__, "auth_bypass_url_categories", auth_bypass_url_categories)
        if auth_bypass_urls is not None:
            pulumi.set(__self__, "auth_bypass_urls", auth_bypass_urls)
        if basic_bypass_apps is not None:
            pulumi.set(__self__, "basic_bypass_apps", basic_bypass_apps)
        if basic_bypass_url_categories is not None:
            pulumi.set(__self__, "basic_bypass_url_categories", basic_bypass_url_categories)
        if block_connect_host_sni_mismatch is not None:
            pulumi.set(__self__, "block_connect_host_sni_mismatch", block_connect_host_sni_mismatch)
        if block_domain_fronting_apps is not None:
            pulumi.set(__self__, "block_domain_fronting_apps", block_domain_fronting_apps)
        if block_domain_fronting_on_host_header is not None:
            pulumi.set(__self__, "block_domain_fronting_on_host_header", block_domain_fronting_on_host_header)
        if block_http_tunnel_on_non_http_ports is not None:
            pulumi.set(__self__, "block_http_tunnel_on_non_http_ports", block_http_tunnel_on_non_http_ports)
        if block_non_compliant_http_request_on_http_ports is not None:
            pulumi.set(__self__, "block_non_compliant_http_request_on_http_ports", block_non_compliant_http_request_on_http_ports)
        if block_non_http_on_http_port_enabled is not None:
            pulumi.set(__self__, "block_non_http_on_http_port_enabled", block_non_http_on_http_port_enabled)
        if cascade_url_filtering is not None:
            pulumi.set(__self__, "cascade_url_filtering", cascade_url_filtering)
        if digest_auth_bypass_apps is not None:
            pulumi.set(__self__, "digest_auth_bypass_apps", digest_auth_bypass_apps)
        if digest_auth_bypass_url_categories is not None:
            pulumi.set(__self__, "digest_auth_bypass_url_categories", digest_auth_bypass_url_categories)
        if digest_auth_bypass_urls is not None:
            pulumi.set(__self__, "digest_auth_bypass_urls", digest_auth_bypass_urls)
        if dns_resolution_on_transparent_proxy_apps is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_apps", dns_resolution_on_transparent_proxy_apps)
        if dns_resolution_on_transparent_proxy_exempt_apps is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_exempt_apps", dns_resolution_on_transparent_proxy_exempt_apps)
        if dns_resolution_on_transparent_proxy_exempt_url_categories is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_exempt_url_categories", dns_resolution_on_transparent_proxy_exempt_url_categories)
        if dns_resolution_on_transparent_proxy_exempt_urls is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_exempt_urls", dns_resolution_on_transparent_proxy_exempt_urls)
        if dns_resolution_on_transparent_proxy_ipv6_apps is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_ipv6_apps", dns_resolution_on_transparent_proxy_ipv6_apps)
        if dns_resolution_on_transparent_proxy_ipv6_exempt_apps is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_ipv6_exempt_apps", dns_resolution_on_transparent_proxy_ipv6_exempt_apps)
        if dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories", dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories)
        if dns_resolution_on_transparent_proxy_ipv6_url_categories is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_ipv6_url_categories", dns_resolution_on_transparent_proxy_ipv6_url_categories)
        if dns_resolution_on_transparent_proxy_url_categories is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_url_categories", dns_resolution_on_transparent_proxy_url_categories)
        if dns_resolution_on_transparent_proxy_urls is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_urls", dns_resolution_on_transparent_proxy_urls)
        if domain_fronting_bypass_url_categories is not None:
            pulumi.set(__self__, "domain_fronting_bypass_url_categories", domain_fronting_bypass_url_categories)
        if dynamic_user_risk_enabled is not None:
            pulumi.set(__self__, "dynamic_user_risk_enabled", dynamic_user_risk_enabled)
        if ecs_for_all_enabled is not None:
            pulumi.set(__self__, "ecs_for_all_enabled", ecs_for_all_enabled)
        if enable_admin_rank_access is not None:
            pulumi.set(__self__, "enable_admin_rank_access", enable_admin_rank_access)
        if enable_dns_resolution_on_transparent_proxy is not None:
            pulumi.set(__self__, "enable_dns_resolution_on_transparent_proxy", enable_dns_resolution_on_transparent_proxy)
        if enable_evaluate_policy_on_global_ssl_bypass is not None:
            pulumi.set(__self__, "enable_evaluate_policy_on_global_ssl_bypass", enable_evaluate_policy_on_global_ssl_bypass)
        if enable_ipv6_dns_optimization_on_all_transparent_proxy is not None:
            pulumi.set(__self__, "enable_ipv6_dns_optimization_on_all_transparent_proxy", enable_ipv6_dns_optimization_on_all_transparent_proxy)
        if enable_ipv6_dns_resolution_on_transparent_proxy is not None:
            pulumi.set(__self__, "enable_ipv6_dns_resolution_on_transparent_proxy", enable_ipv6_dns_resolution_on_transparent_proxy)
        if enable_office365 is not None:
            pulumi.set(__self__, "enable_office365", enable_office365)
        if enable_policy_for_unauthenticated_traffic is not None:
            pulumi.set(__self__, "enable_policy_for_unauthenticated_traffic", enable_policy_for_unauthenticated_traffic)
        if enforce_surrogate_ip_for_windows_app is not None:
            pulumi.set(__self__, "enforce_surrogate_ip_for_windows_app", enforce_surrogate_ip_for_windows_app)
        if http2_nonbrowser_traffic_enabled is not None:
            pulumi.set(__self__, "http2_nonbrowser_traffic_enabled", http2_nonbrowser_traffic_enabled)
        if http_range_header_remove_url_categories is not None:
            pulumi.set(__self__, "http_range_header_remove_url_categories", http_range_header_remove_url_categories)
        if kerberos_bypass_apps is not None:
            pulumi.set(__self__, "kerberos_bypass_apps", kerberos_bypass_apps)
        if kerberos_bypass_url_categories is not None:
            pulumi.set(__self__, "kerberos_bypass_url_categories", kerberos_bypass_url_categories)
        if kerberos_bypass_urls is not None:
            pulumi.set(__self__, "kerberos_bypass_urls", kerberos_bypass_urls)
        if log_internal_ip is not None:
            pulumi.set(__self__, "log_internal_ip", log_internal_ip)
        if prefer_sni_over_conn_host is not None:
            pulumi.set(__self__, "prefer_sni_over_conn_host", prefer_sni_over_conn_host)
        if prefer_sni_over_conn_host_apps is not None:
            pulumi.set(__self__, "prefer_sni_over_conn_host_apps", prefer_sni_over_conn_host_apps)
        if sipa_xff_header_enabled is not None:
            pulumi.set(__self__, "sipa_xff_header_enabled", sipa_xff_header_enabled)
        if sni_dns_optimization_bypass_url_categories is not None:
            pulumi.set(__self__, "sni_dns_optimization_bypass_url_categories", sni_dns_optimization_bypass_url_categories)
        if track_http_tunnel_on_http_ports is not None:
            pulumi.set(__self__, "track_http_tunnel_on_http_ports", track_http_tunnel_on_http_ports)
        if ui_session_timeout is not None:
            pulumi.set(__self__, "ui_session_timeout", ui_session_timeout)
        if zscaler_client_connector1_and_pac_road_warrior_in_firewall is not None:
            pulumi.set(__self__, "zscaler_client_connector1_and_pac_road_warrior_in_firewall", zscaler_client_connector1_and_pac_road_warrior_in_firewall)

    @property
    @pulumi.getter(name="authBypassApps")
    def auth_bypass_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications that are exempted from cookie authentication
        """
        return pulumi.get(self, "auth_bypass_apps")

    @auth_bypass_apps.setter
    def auth_bypass_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "auth_bypass_apps", value)

    @property
    @pulumi.getter(name="authBypassUrlCategories")
    def auth_bypass_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories that are exempted from cookie authentication
        """
        return pulumi.get(self, "auth_bypass_url_categories")

    @auth_bypass_url_categories.setter
    def auth_bypass_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "auth_bypass_url_categories", value)

    @property
    @pulumi.getter(name="authBypassUrls")
    def auth_bypass_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Custom URLs that are exempted from cookie authentication for users
        """
        return pulumi.get(self, "auth_bypass_urls")

    @auth_bypass_urls.setter
    def auth_bypass_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "auth_bypass_urls", value)

    @property
    @pulumi.getter(name="basicBypassApps")
    def basic_bypass_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications that are exempted from Basic authentication
        """
        return pulumi.get(self, "basic_bypass_apps")

    @basic_bypass_apps.setter
    def basic_bypass_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "basic_bypass_apps", value)

    @property
    @pulumi.getter(name="basicBypassUrlCategories")
    def basic_bypass_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories that are exempted from Basic authentication
        """
        return pulumi.get(self, "basic_bypass_url_categories")

    @basic_bypass_url_categories.setter
    def basic_bypass_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "basic_bypass_url_categories", value)

    @property
    @pulumi.getter(name="blockConnectHostSniMismatch")
    def block_connect_host_sni_mismatch(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
        is blocked or not
        """
        return pulumi.get(self, "block_connect_host_sni_mismatch")

    @block_connect_host_sni_mismatch.setter
    def block_connect_host_sni_mismatch(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_connect_host_sni_mismatch", value)

    @property
    @pulumi.getter(name="blockDomainFrontingApps")
    def block_domain_fronting_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Applications which are subjected to Domain Fronting
        """
        return pulumi.get(self, "block_domain_fronting_apps")

    @block_domain_fronting_apps.setter
    def block_domain_fronting_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "block_domain_fronting_apps", value)

    @property
    @pulumi.getter(name="blockDomainFrontingOnHostHeader")
    def block_domain_fronting_on_host_header(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
        the FQDN of the request's host header
        """
        return pulumi.get(self, "block_domain_fronting_on_host_header")

    @block_domain_fronting_on_host_header.setter
    def block_domain_fronting_on_host_header(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_domain_fronting_on_host_header", value)

    @property
    @pulumi.getter(name="blockHttpTunnelOnNonHttpPorts")
    def block_http_tunnel_on_non_http_ports(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
        to ports other than the standard HTTP/S ports 80 and 443)
        """
        return pulumi.get(self, "block_http_tunnel_on_non_http_ports")

    @block_http_tunnel_on_non_http_ports.setter
    def block_http_tunnel_on_non_http_ports(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_http_tunnel_on_non_http_ports", value)

    @property
    @pulumi.getter(name="blockNonCompliantHttpRequestOnHttpPorts")
    def block_non_compliant_http_request_on_http_ports(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
        """
        return pulumi.get(self, "block_non_compliant_http_request_on_http_ports")

    @block_non_compliant_http_request_on_http_ports.setter
    def block_non_compliant_http_request_on_http_ports(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_non_compliant_http_request_on_http_ports", value)

    @property
    @pulumi.getter(name="blockNonHttpOnHttpPortEnabled")
    def block_non_http_on_http_port_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
        """
        return pulumi.get(self, "block_non_http_on_http_port_enabled")

    @block_non_http_on_http_port_enabled.setter
    def block_non_http_on_http_port_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_non_http_on_http_port_enabled", value)

    @property
    @pulumi.getter(name="cascadeUrlFiltering")
    def cascade_url_filtering(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
        transaction explicitly
        """
        return pulumi.get(self, "cascade_url_filtering")

    @cascade_url_filtering.setter
    def cascade_url_filtering(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cascade_url_filtering", value)

    @property
    @pulumi.getter(name="digestAuthBypassApps")
    def digest_auth_bypass_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications that are exempted from Digest authentication
        """
        return pulumi.get(self, "digest_auth_bypass_apps")

    @digest_auth_bypass_apps.setter
    def digest_auth_bypass_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "digest_auth_bypass_apps", value)

    @property
    @pulumi.getter(name="digestAuthBypassUrlCategories")
    def digest_auth_bypass_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories that are exempted from Digest authentication
        """
        return pulumi.get(self, "digest_auth_bypass_url_categories")

    @digest_auth_bypass_url_categories.setter
    def digest_auth_bypass_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "digest_auth_bypass_url_categories", value)

    @property
    @pulumi.getter(name="digestAuthBypassUrls")
    def digest_auth_bypass_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
        authentication
        """
        return pulumi.get(self, "digest_auth_bypass_urls")

    @digest_auth_bypass_urls.setter
    def digest_auth_bypass_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "digest_auth_bypass_urls", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyApps")
    def dns_resolution_on_transparent_proxy_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications to which DNS optimization on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_apps")

    @dns_resolution_on_transparent_proxy_apps.setter
    def dns_resolution_on_transparent_proxy_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_apps", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyExemptApps")
    def dns_resolution_on_transparent_proxy_exempt_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications that are excluded from DNS optimization on transparent proxy mode
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_exempt_apps")

    @dns_resolution_on_transparent_proxy_exempt_apps.setter
    def dns_resolution_on_transparent_proxy_exempt_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_exempt_apps", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyExemptUrlCategories")
    def dns_resolution_on_transparent_proxy_exempt_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_exempt_url_categories")

    @dns_resolution_on_transparent_proxy_exempt_url_categories.setter
    def dns_resolution_on_transparent_proxy_exempt_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_exempt_url_categories", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyExemptUrls")
    def dns_resolution_on_transparent_proxy_exempt_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URLs that are excluded from DNS optimization on transparent proxy mode
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_exempt_urls")

    @dns_resolution_on_transparent_proxy_exempt_urls.setter
    def dns_resolution_on_transparent_proxy_exempt_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_exempt_urls", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6Apps")
    def dns_resolution_on_transparent_proxy_ipv6_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_apps")

    @dns_resolution_on_transparent_proxy_ipv6_apps.setter
    def dns_resolution_on_transparent_proxy_ipv6_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_ipv6_apps", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6ExemptApps")
    def dns_resolution_on_transparent_proxy_ipv6_exempt_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_exempt_apps")

    @dns_resolution_on_transparent_proxy_ipv6_exempt_apps.setter
    def dns_resolution_on_transparent_proxy_ipv6_exempt_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_ipv6_exempt_apps", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories")
    def dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories")

    @dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories.setter
    def dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6UrlCategories")
    def dns_resolution_on_transparent_proxy_ipv6_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        IPv6 URL categories to which DNS optimization on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_url_categories")

    @dns_resolution_on_transparent_proxy_ipv6_url_categories.setter
    def dns_resolution_on_transparent_proxy_ipv6_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_ipv6_url_categories", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyUrlCategories")
    def dns_resolution_on_transparent_proxy_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories to which DNS optimization on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_url_categories")

    @dns_resolution_on_transparent_proxy_url_categories.setter
    def dns_resolution_on_transparent_proxy_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_url_categories", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyUrls")
    def dns_resolution_on_transparent_proxy_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URLs to which DNS optimization on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_urls")

    @dns_resolution_on_transparent_proxy_urls.setter
    def dns_resolution_on_transparent_proxy_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_urls", value)

    @property
    @pulumi.getter(name="domainFrontingBypassUrlCategories")
    def domain_fronting_bypass_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories that are exempted from domain fronting
        """
        return pulumi.get(self, "domain_fronting_bypass_url_categories")

    @domain_fronting_bypass_url_categories.setter
    def domain_fronting_bypass_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "domain_fronting_bypass_url_categories", value)

    @property
    @pulumi.getter(name="dynamicUserRiskEnabled")
    def dynamic_user_risk_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
        """
        return pulumi.get(self, "dynamic_user_risk_enabled")

    @dynamic_user_risk_enabled.setter
    def dynamic_user_risk_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dynamic_user_risk_enabled", value)

    @property
    @pulumi.getter(name="ecsForAllEnabled")
    def ecs_for_all_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
        users.
        """
        return pulumi.get(self, "ecs_for_all_enabled")

    @ecs_for_all_enabled.setter
    def ecs_for_all_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ecs_for_all_enabled", value)

    @property
    @pulumi.getter(name="enableAdminRankAccess")
    def enable_admin_rank_access(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
        """
        return pulumi.get(self, "enable_admin_rank_access")

    @enable_admin_rank_access.setter
    def enable_admin_rank_access(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_admin_rank_access", value)

    @property
    @pulumi.getter(name="enableDnsResolutionOnTransparentProxy")
    def enable_dns_resolution_on_transparent_proxy(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
        (e.g., traffic via GRE or IPSec tunnels without a PAC file).
        """
        return pulumi.get(self, "enable_dns_resolution_on_transparent_proxy")

    @enable_dns_resolution_on_transparent_proxy.setter
    def enable_dns_resolution_on_transparent_proxy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_dns_resolution_on_transparent_proxy", value)

    @property
    @pulumi.getter(name="enableEvaluatePolicyOnGlobalSslBypass")
    def enable_evaluate_policy_on_global_ssl_bypass(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
        """
        return pulumi.get(self, "enable_evaluate_policy_on_global_ssl_bypass")

    @enable_evaluate_policy_on_global_ssl_bypass.setter
    def enable_evaluate_policy_on_global_ssl_bypass(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_evaluate_policy_on_global_ssl_bypass", value)

    @property
    @pulumi.getter(name="enableIpv6DnsOptimizationOnAllTransparentProxy")
    def enable_ipv6_dns_optimization_on_all_transparent_proxy(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
        """
        return pulumi.get(self, "enable_ipv6_dns_optimization_on_all_transparent_proxy")

    @enable_ipv6_dns_optimization_on_all_transparent_proxy.setter
    def enable_ipv6_dns_optimization_on_all_transparent_proxy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ipv6_dns_optimization_on_all_transparent_proxy", value)

    @property
    @pulumi.getter(name="enableIpv6DnsResolutionOnTransparentProxy")
    def enable_ipv6_dns_resolution_on_transparent_proxy(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
        destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
        PAC file).
        """
        return pulumi.get(self, "enable_ipv6_dns_resolution_on_transparent_proxy")

    @enable_ipv6_dns_resolution_on_transparent_proxy.setter
    def enable_ipv6_dns_resolution_on_transparent_proxy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ipv6_dns_resolution_on_transparent_proxy", value)

    @property
    @pulumi.getter(name="enableOffice365")
    def enable_office365(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
        """
        return pulumi.get(self, "enable_office365")

    @enable_office365.setter
    def enable_office365(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_office365", value)

    @property
    @pulumi.getter(name="enablePolicyForUnauthenticatedTraffic")
    def enable_policy_for_unauthenticated_traffic(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether policies that include user and department criteria can be configured and applied for
        unauthenticated traffic
        """
        return pulumi.get(self, "enable_policy_for_unauthenticated_traffic")

    @enable_policy_for_unauthenticated_traffic.setter
    def enable_policy_for_unauthenticated_traffic(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_policy_for_unauthenticated_traffic", value)

    @property
    @pulumi.getter(name="enforceSurrogateIpForWindowsApp")
    def enforce_surrogate_ip_for_windows_app(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enforce Surrogate IP authentication for Windows app traffic
        """
        return pulumi.get(self, "enforce_surrogate_ip_for_windows_app")

    @enforce_surrogate_ip_for_windows_app.setter
    def enforce_surrogate_ip_for_windows_app(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enforce_surrogate_ip_for_windows_app", value)

    @property
    @pulumi.getter(name="http2NonbrowserTrafficEnabled")
    def http2_nonbrowser_traffic_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
        organizational level
        """
        return pulumi.get(self, "http2_nonbrowser_traffic_enabled")

    @http2_nonbrowser_traffic_enabled.setter
    def http2_nonbrowser_traffic_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "http2_nonbrowser_traffic_enabled", value)

    @property
    @pulumi.getter(name="httpRangeHeaderRemoveUrlCategories")
    def http_range_header_remove_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories for which HTTP range headers must be removed
        """
        return pulumi.get(self, "http_range_header_remove_url_categories")

    @http_range_header_remove_url_categories.setter
    def http_range_header_remove_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "http_range_header_remove_url_categories", value)

    @property
    @pulumi.getter(name="kerberosBypassApps")
    def kerberos_bypass_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications that are exempted from Kerberos authentication
        """
        return pulumi.get(self, "kerberos_bypass_apps")

    @kerberos_bypass_apps.setter
    def kerberos_bypass_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "kerberos_bypass_apps", value)

    @property
    @pulumi.getter(name="kerberosBypassUrlCategories")
    def kerberos_bypass_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories that are exempted from Kerberos authentication
        """
        return pulumi.get(self, "kerberos_bypass_url_categories")

    @kerberos_bypass_url_categories.setter
    def kerberos_bypass_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "kerberos_bypass_url_categories", value)

    @property
    @pulumi.getter(name="kerberosBypassUrls")
    def kerberos_bypass_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Custom URLs that are exempted from Kerberos authentication
        """
        return pulumi.get(self, "kerberos_bypass_urls")

    @kerberos_bypass_urls.setter
    def kerberos_bypass_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "kerberos_bypass_urls", value)

    @property
    @pulumi.getter(name="logInternalIp")
    def log_internal_ip(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
        """
        return pulumi.get(self, "log_internal_ip")

    @log_internal_ip.setter
    def log_internal_ip(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "log_internal_ip", value)

    @property
    @pulumi.getter(name="preferSniOverConnHost")
    def prefer_sni_over_conn_host(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
        forward proxy connections
        """
        return pulumi.get(self, "prefer_sni_over_conn_host")

    @prefer_sni_over_conn_host.setter
    def prefer_sni_over_conn_host(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "prefer_sni_over_conn_host", value)

    @property
    @pulumi.getter(name="preferSniOverConnHostApps")
    def prefer_sni_over_conn_host_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
        resolution instead of the CONNECT host for forward proxy connections)
        """
        return pulumi.get(self, "prefer_sni_over_conn_host_apps")

    @prefer_sni_over_conn_host_apps.setter
    def prefer_sni_over_conn_host_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "prefer_sni_over_conn_host_apps", value)

    @property
    @pulumi.getter(name="sipaXffHeaderEnabled")
    def sipa_xff_header_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
        IP-anchored and ZIA-inspected ZPA application traffic.
        """
        return pulumi.get(self, "sipa_xff_header_enabled")

    @sipa_xff_header_enabled.setter
    def sipa_xff_header_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sipa_xff_header_enabled", value)

    @property
    @pulumi.getter(name="sniDnsOptimizationBypassUrlCategories")
    def sni_dns_optimization_bypass_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
        resolution instead of the CONNECT host for forward proxy connections)
        """
        return pulumi.get(self, "sni_dns_optimization_bypass_url_categories")

    @sni_dns_optimization_bypass_url_categories.setter
    def sni_dns_optimization_bypass_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "sni_dns_optimization_bypass_url_categories", value)

    @property
    @pulumi.getter(name="trackHttpTunnelOnHttpPorts")
    def track_http_tunnel_on_http_ports(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
        80
        """
        return pulumi.get(self, "track_http_tunnel_on_http_ports")

    @track_http_tunnel_on_http_ports.setter
    def track_http_tunnel_on_http_ports(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "track_http_tunnel_on_http_ports", value)

    @property
    @pulumi.getter(name="uiSessionTimeout")
    def ui_session_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Specifies the login session timeout for admins accessing the ZIA Admin Portal
        """
        return pulumi.get(self, "ui_session_timeout")

    @ui_session_timeout.setter
    def ui_session_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ui_session_timeout", value)

    @property
    @pulumi.getter(name="zscalerClientConnector1AndPacRoadWarriorInFirewall")
    def zscaler_client_connector1_and_pac_road_warrior_in_firewall(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
        Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
        """
        return pulumi.get(self, "zscaler_client_connector1_and_pac_road_warrior_in_firewall")

    @zscaler_client_connector1_and_pac_road_warrior_in_firewall.setter
    def zscaler_client_connector1_and_pac_road_warrior_in_firewall(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "zscaler_client_connector1_and_pac_road_warrior_in_firewall", value)


@pulumi.input_type
class _AdvancedSettingsState:
    def __init__(__self__, *,
                 auth_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 auth_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 auth_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 basic_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 basic_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 block_connect_host_sni_mismatch: Optional[pulumi.Input[builtins.bool]] = None,
                 block_domain_fronting_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 block_domain_fronting_on_host_header: Optional[pulumi.Input[builtins.bool]] = None,
                 block_http_tunnel_on_non_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 block_non_compliant_http_request_on_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 block_non_http_on_http_port_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 cascade_url_filtering: Optional[pulumi.Input[builtins.bool]] = None,
                 digest_auth_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 digest_auth_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 digest_auth_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_exempt_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_exempt_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_exempt_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_exempt_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 domain_fronting_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dynamic_user_risk_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ecs_for_all_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_admin_rank_access: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_dns_resolution_on_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_evaluate_policy_on_global_ssl_bypass: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ipv6_dns_optimization_on_all_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ipv6_dns_resolution_on_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_office365: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_policy_for_unauthenticated_traffic: Optional[pulumi.Input[builtins.bool]] = None,
                 enforce_surrogate_ip_for_windows_app: Optional[pulumi.Input[builtins.bool]] = None,
                 http2_nonbrowser_traffic_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 http_range_header_remove_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kerberos_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kerberos_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kerberos_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 log_internal_ip: Optional[pulumi.Input[builtins.bool]] = None,
                 prefer_sni_over_conn_host: Optional[pulumi.Input[builtins.bool]] = None,
                 prefer_sni_over_conn_host_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sipa_xff_header_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 sni_dns_optimization_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 track_http_tunnel_on_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 ui_session_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 zscaler_client_connector1_and_pac_road_warrior_in_firewall: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering AdvancedSettings resources.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] auth_bypass_apps: Cloud applications that are exempted from cookie authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] auth_bypass_url_categories: URL categories that are exempted from cookie authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] auth_bypass_urls: Custom URLs that are exempted from cookie authentication for users
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] basic_bypass_apps: Cloud applications that are exempted from Basic authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] basic_bypass_url_categories: URL categories that are exempted from Basic authentication
        :param pulumi.Input[builtins.bool] block_connect_host_sni_mismatch: Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
               is blocked or not
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] block_domain_fronting_apps: Applications which are subjected to Domain Fronting
        :param pulumi.Input[builtins.bool] block_domain_fronting_on_host_header: Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
               the FQDN of the request's host header
        :param pulumi.Input[builtins.bool] block_http_tunnel_on_non_http_ports: Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
               to ports other than the standard HTTP/S ports 80 and 443)
        :param pulumi.Input[builtins.bool] block_non_compliant_http_request_on_http_ports: Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
        :param pulumi.Input[builtins.bool] block_non_http_on_http_port_enabled: Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
        :param pulumi.Input[builtins.bool] cascade_url_filtering: Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
               transaction explicitly
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] digest_auth_bypass_apps: Cloud applications that are exempted from Digest authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] digest_auth_bypass_url_categories: URL categories that are exempted from Digest authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] digest_auth_bypass_urls: Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
               authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_apps: Cloud applications to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_exempt_apps: Cloud applications that are excluded from DNS optimization on transparent proxy mode
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_exempt_urls: URLs that are excluded from DNS optimization on transparent proxy mode
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_ipv6_apps: Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_ipv6_exempt_apps: Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_ipv6_url_categories: IPv6 URL categories to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_url_categories: URL categories to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_urls: URLs to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] domain_fronting_bypass_url_categories: URL categories that are exempted from domain fronting
        :param pulumi.Input[builtins.bool] dynamic_user_risk_enabled: Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
        :param pulumi.Input[builtins.bool] ecs_for_all_enabled: Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
               users.
        :param pulumi.Input[builtins.bool] enable_admin_rank_access: Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
        :param pulumi.Input[builtins.bool] enable_dns_resolution_on_transparent_proxy: Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
               (e.g., traffic via GRE or IPSec tunnels without a PAC file).
        :param pulumi.Input[builtins.bool] enable_evaluate_policy_on_global_ssl_bypass: Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
        :param pulumi.Input[builtins.bool] enable_ipv6_dns_optimization_on_all_transparent_proxy: Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
        :param pulumi.Input[builtins.bool] enable_ipv6_dns_resolution_on_transparent_proxy: Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
               destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
               PAC file).
        :param pulumi.Input[builtins.bool] enable_office365: Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
        :param pulumi.Input[builtins.bool] enable_policy_for_unauthenticated_traffic: Value indicating whether policies that include user and department criteria can be configured and applied for
               unauthenticated traffic
        :param pulumi.Input[builtins.bool] enforce_surrogate_ip_for_windows_app: Enforce Surrogate IP authentication for Windows app traffic
        :param pulumi.Input[builtins.bool] http2_nonbrowser_traffic_enabled: Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
               organizational level
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] http_range_header_remove_url_categories: URL categories for which HTTP range headers must be removed
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] kerberos_bypass_apps: Cloud applications that are exempted from Kerberos authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] kerberos_bypass_url_categories: URL categories that are exempted from Kerberos authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] kerberos_bypass_urls: Custom URLs that are exempted from Kerberos authentication
        :param pulumi.Input[builtins.bool] log_internal_ip: Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
        :param pulumi.Input[builtins.bool] prefer_sni_over_conn_host: Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
               forward proxy connections
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] prefer_sni_over_conn_host_apps: Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
               resolution instead of the CONNECT host for forward proxy connections)
        :param pulumi.Input[builtins.bool] sipa_xff_header_enabled: Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
               IP-anchored and ZIA-inspected ZPA application traffic.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sni_dns_optimization_bypass_url_categories: URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
               resolution instead of the CONNECT host for forward proxy connections)
        :param pulumi.Input[builtins.bool] track_http_tunnel_on_http_ports: Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
               80
        :param pulumi.Input[builtins.int] ui_session_timeout: Specifies the login session timeout for admins accessing the ZIA Admin Portal
        :param pulumi.Input[builtins.bool] zscaler_client_connector1_and_pac_road_warrior_in_firewall: Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
               Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
        """
        if auth_bypass_apps is not None:
            pulumi.set(__self__, "auth_bypass_apps", auth_bypass_apps)
        if auth_bypass_url_categories is not None:
            pulumi.set(__self__, "auth_bypass_url_categories", auth_bypass_url_categories)
        if auth_bypass_urls is not None:
            pulumi.set(__self__, "auth_bypass_urls", auth_bypass_urls)
        if basic_bypass_apps is not None:
            pulumi.set(__self__, "basic_bypass_apps", basic_bypass_apps)
        if basic_bypass_url_categories is not None:
            pulumi.set(__self__, "basic_bypass_url_categories", basic_bypass_url_categories)
        if block_connect_host_sni_mismatch is not None:
            pulumi.set(__self__, "block_connect_host_sni_mismatch", block_connect_host_sni_mismatch)
        if block_domain_fronting_apps is not None:
            pulumi.set(__self__, "block_domain_fronting_apps", block_domain_fronting_apps)
        if block_domain_fronting_on_host_header is not None:
            pulumi.set(__self__, "block_domain_fronting_on_host_header", block_domain_fronting_on_host_header)
        if block_http_tunnel_on_non_http_ports is not None:
            pulumi.set(__self__, "block_http_tunnel_on_non_http_ports", block_http_tunnel_on_non_http_ports)
        if block_non_compliant_http_request_on_http_ports is not None:
            pulumi.set(__self__, "block_non_compliant_http_request_on_http_ports", block_non_compliant_http_request_on_http_ports)
        if block_non_http_on_http_port_enabled is not None:
            pulumi.set(__self__, "block_non_http_on_http_port_enabled", block_non_http_on_http_port_enabled)
        if cascade_url_filtering is not None:
            pulumi.set(__self__, "cascade_url_filtering", cascade_url_filtering)
        if digest_auth_bypass_apps is not None:
            pulumi.set(__self__, "digest_auth_bypass_apps", digest_auth_bypass_apps)
        if digest_auth_bypass_url_categories is not None:
            pulumi.set(__self__, "digest_auth_bypass_url_categories", digest_auth_bypass_url_categories)
        if digest_auth_bypass_urls is not None:
            pulumi.set(__self__, "digest_auth_bypass_urls", digest_auth_bypass_urls)
        if dns_resolution_on_transparent_proxy_apps is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_apps", dns_resolution_on_transparent_proxy_apps)
        if dns_resolution_on_transparent_proxy_exempt_apps is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_exempt_apps", dns_resolution_on_transparent_proxy_exempt_apps)
        if dns_resolution_on_transparent_proxy_exempt_url_categories is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_exempt_url_categories", dns_resolution_on_transparent_proxy_exempt_url_categories)
        if dns_resolution_on_transparent_proxy_exempt_urls is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_exempt_urls", dns_resolution_on_transparent_proxy_exempt_urls)
        if dns_resolution_on_transparent_proxy_ipv6_apps is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_ipv6_apps", dns_resolution_on_transparent_proxy_ipv6_apps)
        if dns_resolution_on_transparent_proxy_ipv6_exempt_apps is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_ipv6_exempt_apps", dns_resolution_on_transparent_proxy_ipv6_exempt_apps)
        if dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories", dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories)
        if dns_resolution_on_transparent_proxy_ipv6_url_categories is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_ipv6_url_categories", dns_resolution_on_transparent_proxy_ipv6_url_categories)
        if dns_resolution_on_transparent_proxy_url_categories is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_url_categories", dns_resolution_on_transparent_proxy_url_categories)
        if dns_resolution_on_transparent_proxy_urls is not None:
            pulumi.set(__self__, "dns_resolution_on_transparent_proxy_urls", dns_resolution_on_transparent_proxy_urls)
        if domain_fronting_bypass_url_categories is not None:
            pulumi.set(__self__, "domain_fronting_bypass_url_categories", domain_fronting_bypass_url_categories)
        if dynamic_user_risk_enabled is not None:
            pulumi.set(__self__, "dynamic_user_risk_enabled", dynamic_user_risk_enabled)
        if ecs_for_all_enabled is not None:
            pulumi.set(__self__, "ecs_for_all_enabled", ecs_for_all_enabled)
        if enable_admin_rank_access is not None:
            pulumi.set(__self__, "enable_admin_rank_access", enable_admin_rank_access)
        if enable_dns_resolution_on_transparent_proxy is not None:
            pulumi.set(__self__, "enable_dns_resolution_on_transparent_proxy", enable_dns_resolution_on_transparent_proxy)
        if enable_evaluate_policy_on_global_ssl_bypass is not None:
            pulumi.set(__self__, "enable_evaluate_policy_on_global_ssl_bypass", enable_evaluate_policy_on_global_ssl_bypass)
        if enable_ipv6_dns_optimization_on_all_transparent_proxy is not None:
            pulumi.set(__self__, "enable_ipv6_dns_optimization_on_all_transparent_proxy", enable_ipv6_dns_optimization_on_all_transparent_proxy)
        if enable_ipv6_dns_resolution_on_transparent_proxy is not None:
            pulumi.set(__self__, "enable_ipv6_dns_resolution_on_transparent_proxy", enable_ipv6_dns_resolution_on_transparent_proxy)
        if enable_office365 is not None:
            pulumi.set(__self__, "enable_office365", enable_office365)
        if enable_policy_for_unauthenticated_traffic is not None:
            pulumi.set(__self__, "enable_policy_for_unauthenticated_traffic", enable_policy_for_unauthenticated_traffic)
        if enforce_surrogate_ip_for_windows_app is not None:
            pulumi.set(__self__, "enforce_surrogate_ip_for_windows_app", enforce_surrogate_ip_for_windows_app)
        if http2_nonbrowser_traffic_enabled is not None:
            pulumi.set(__self__, "http2_nonbrowser_traffic_enabled", http2_nonbrowser_traffic_enabled)
        if http_range_header_remove_url_categories is not None:
            pulumi.set(__self__, "http_range_header_remove_url_categories", http_range_header_remove_url_categories)
        if kerberos_bypass_apps is not None:
            pulumi.set(__self__, "kerberos_bypass_apps", kerberos_bypass_apps)
        if kerberos_bypass_url_categories is not None:
            pulumi.set(__self__, "kerberos_bypass_url_categories", kerberos_bypass_url_categories)
        if kerberos_bypass_urls is not None:
            pulumi.set(__self__, "kerberos_bypass_urls", kerberos_bypass_urls)
        if log_internal_ip is not None:
            pulumi.set(__self__, "log_internal_ip", log_internal_ip)
        if prefer_sni_over_conn_host is not None:
            pulumi.set(__self__, "prefer_sni_over_conn_host", prefer_sni_over_conn_host)
        if prefer_sni_over_conn_host_apps is not None:
            pulumi.set(__self__, "prefer_sni_over_conn_host_apps", prefer_sni_over_conn_host_apps)
        if sipa_xff_header_enabled is not None:
            pulumi.set(__self__, "sipa_xff_header_enabled", sipa_xff_header_enabled)
        if sni_dns_optimization_bypass_url_categories is not None:
            pulumi.set(__self__, "sni_dns_optimization_bypass_url_categories", sni_dns_optimization_bypass_url_categories)
        if track_http_tunnel_on_http_ports is not None:
            pulumi.set(__self__, "track_http_tunnel_on_http_ports", track_http_tunnel_on_http_ports)
        if ui_session_timeout is not None:
            pulumi.set(__self__, "ui_session_timeout", ui_session_timeout)
        if zscaler_client_connector1_and_pac_road_warrior_in_firewall is not None:
            pulumi.set(__self__, "zscaler_client_connector1_and_pac_road_warrior_in_firewall", zscaler_client_connector1_and_pac_road_warrior_in_firewall)

    @property
    @pulumi.getter(name="authBypassApps")
    def auth_bypass_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications that are exempted from cookie authentication
        """
        return pulumi.get(self, "auth_bypass_apps")

    @auth_bypass_apps.setter
    def auth_bypass_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "auth_bypass_apps", value)

    @property
    @pulumi.getter(name="authBypassUrlCategories")
    def auth_bypass_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories that are exempted from cookie authentication
        """
        return pulumi.get(self, "auth_bypass_url_categories")

    @auth_bypass_url_categories.setter
    def auth_bypass_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "auth_bypass_url_categories", value)

    @property
    @pulumi.getter(name="authBypassUrls")
    def auth_bypass_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Custom URLs that are exempted from cookie authentication for users
        """
        return pulumi.get(self, "auth_bypass_urls")

    @auth_bypass_urls.setter
    def auth_bypass_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "auth_bypass_urls", value)

    @property
    @pulumi.getter(name="basicBypassApps")
    def basic_bypass_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications that are exempted from Basic authentication
        """
        return pulumi.get(self, "basic_bypass_apps")

    @basic_bypass_apps.setter
    def basic_bypass_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "basic_bypass_apps", value)

    @property
    @pulumi.getter(name="basicBypassUrlCategories")
    def basic_bypass_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories that are exempted from Basic authentication
        """
        return pulumi.get(self, "basic_bypass_url_categories")

    @basic_bypass_url_categories.setter
    def basic_bypass_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "basic_bypass_url_categories", value)

    @property
    @pulumi.getter(name="blockConnectHostSniMismatch")
    def block_connect_host_sni_mismatch(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
        is blocked or not
        """
        return pulumi.get(self, "block_connect_host_sni_mismatch")

    @block_connect_host_sni_mismatch.setter
    def block_connect_host_sni_mismatch(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_connect_host_sni_mismatch", value)

    @property
    @pulumi.getter(name="blockDomainFrontingApps")
    def block_domain_fronting_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Applications which are subjected to Domain Fronting
        """
        return pulumi.get(self, "block_domain_fronting_apps")

    @block_domain_fronting_apps.setter
    def block_domain_fronting_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "block_domain_fronting_apps", value)

    @property
    @pulumi.getter(name="blockDomainFrontingOnHostHeader")
    def block_domain_fronting_on_host_header(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
        the FQDN of the request's host header
        """
        return pulumi.get(self, "block_domain_fronting_on_host_header")

    @block_domain_fronting_on_host_header.setter
    def block_domain_fronting_on_host_header(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_domain_fronting_on_host_header", value)

    @property
    @pulumi.getter(name="blockHttpTunnelOnNonHttpPorts")
    def block_http_tunnel_on_non_http_ports(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
        to ports other than the standard HTTP/S ports 80 and 443)
        """
        return pulumi.get(self, "block_http_tunnel_on_non_http_ports")

    @block_http_tunnel_on_non_http_ports.setter
    def block_http_tunnel_on_non_http_ports(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_http_tunnel_on_non_http_ports", value)

    @property
    @pulumi.getter(name="blockNonCompliantHttpRequestOnHttpPorts")
    def block_non_compliant_http_request_on_http_ports(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
        """
        return pulumi.get(self, "block_non_compliant_http_request_on_http_ports")

    @block_non_compliant_http_request_on_http_ports.setter
    def block_non_compliant_http_request_on_http_ports(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_non_compliant_http_request_on_http_ports", value)

    @property
    @pulumi.getter(name="blockNonHttpOnHttpPortEnabled")
    def block_non_http_on_http_port_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
        """
        return pulumi.get(self, "block_non_http_on_http_port_enabled")

    @block_non_http_on_http_port_enabled.setter
    def block_non_http_on_http_port_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_non_http_on_http_port_enabled", value)

    @property
    @pulumi.getter(name="cascadeUrlFiltering")
    def cascade_url_filtering(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
        transaction explicitly
        """
        return pulumi.get(self, "cascade_url_filtering")

    @cascade_url_filtering.setter
    def cascade_url_filtering(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cascade_url_filtering", value)

    @property
    @pulumi.getter(name="digestAuthBypassApps")
    def digest_auth_bypass_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications that are exempted from Digest authentication
        """
        return pulumi.get(self, "digest_auth_bypass_apps")

    @digest_auth_bypass_apps.setter
    def digest_auth_bypass_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "digest_auth_bypass_apps", value)

    @property
    @pulumi.getter(name="digestAuthBypassUrlCategories")
    def digest_auth_bypass_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories that are exempted from Digest authentication
        """
        return pulumi.get(self, "digest_auth_bypass_url_categories")

    @digest_auth_bypass_url_categories.setter
    def digest_auth_bypass_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "digest_auth_bypass_url_categories", value)

    @property
    @pulumi.getter(name="digestAuthBypassUrls")
    def digest_auth_bypass_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
        authentication
        """
        return pulumi.get(self, "digest_auth_bypass_urls")

    @digest_auth_bypass_urls.setter
    def digest_auth_bypass_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "digest_auth_bypass_urls", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyApps")
    def dns_resolution_on_transparent_proxy_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications to which DNS optimization on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_apps")

    @dns_resolution_on_transparent_proxy_apps.setter
    def dns_resolution_on_transparent_proxy_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_apps", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyExemptApps")
    def dns_resolution_on_transparent_proxy_exempt_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications that are excluded from DNS optimization on transparent proxy mode
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_exempt_apps")

    @dns_resolution_on_transparent_proxy_exempt_apps.setter
    def dns_resolution_on_transparent_proxy_exempt_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_exempt_apps", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyExemptUrlCategories")
    def dns_resolution_on_transparent_proxy_exempt_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_exempt_url_categories")

    @dns_resolution_on_transparent_proxy_exempt_url_categories.setter
    def dns_resolution_on_transparent_proxy_exempt_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_exempt_url_categories", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyExemptUrls")
    def dns_resolution_on_transparent_proxy_exempt_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URLs that are excluded from DNS optimization on transparent proxy mode
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_exempt_urls")

    @dns_resolution_on_transparent_proxy_exempt_urls.setter
    def dns_resolution_on_transparent_proxy_exempt_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_exempt_urls", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6Apps")
    def dns_resolution_on_transparent_proxy_ipv6_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_apps")

    @dns_resolution_on_transparent_proxy_ipv6_apps.setter
    def dns_resolution_on_transparent_proxy_ipv6_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_ipv6_apps", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6ExemptApps")
    def dns_resolution_on_transparent_proxy_ipv6_exempt_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_exempt_apps")

    @dns_resolution_on_transparent_proxy_ipv6_exempt_apps.setter
    def dns_resolution_on_transparent_proxy_ipv6_exempt_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_ipv6_exempt_apps", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories")
    def dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories")

    @dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories.setter
    def dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6UrlCategories")
    def dns_resolution_on_transparent_proxy_ipv6_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        IPv6 URL categories to which DNS optimization on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_url_categories")

    @dns_resolution_on_transparent_proxy_ipv6_url_categories.setter
    def dns_resolution_on_transparent_proxy_ipv6_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_ipv6_url_categories", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyUrlCategories")
    def dns_resolution_on_transparent_proxy_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories to which DNS optimization on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_url_categories")

    @dns_resolution_on_transparent_proxy_url_categories.setter
    def dns_resolution_on_transparent_proxy_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_url_categories", value)

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyUrls")
    def dns_resolution_on_transparent_proxy_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URLs to which DNS optimization on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_urls")

    @dns_resolution_on_transparent_proxy_urls.setter
    def dns_resolution_on_transparent_proxy_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_resolution_on_transparent_proxy_urls", value)

    @property
    @pulumi.getter(name="domainFrontingBypassUrlCategories")
    def domain_fronting_bypass_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories that are exempted from domain fronting
        """
        return pulumi.get(self, "domain_fronting_bypass_url_categories")

    @domain_fronting_bypass_url_categories.setter
    def domain_fronting_bypass_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "domain_fronting_bypass_url_categories", value)

    @property
    @pulumi.getter(name="dynamicUserRiskEnabled")
    def dynamic_user_risk_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
        """
        return pulumi.get(self, "dynamic_user_risk_enabled")

    @dynamic_user_risk_enabled.setter
    def dynamic_user_risk_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dynamic_user_risk_enabled", value)

    @property
    @pulumi.getter(name="ecsForAllEnabled")
    def ecs_for_all_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
        users.
        """
        return pulumi.get(self, "ecs_for_all_enabled")

    @ecs_for_all_enabled.setter
    def ecs_for_all_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ecs_for_all_enabled", value)

    @property
    @pulumi.getter(name="enableAdminRankAccess")
    def enable_admin_rank_access(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
        """
        return pulumi.get(self, "enable_admin_rank_access")

    @enable_admin_rank_access.setter
    def enable_admin_rank_access(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_admin_rank_access", value)

    @property
    @pulumi.getter(name="enableDnsResolutionOnTransparentProxy")
    def enable_dns_resolution_on_transparent_proxy(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
        (e.g., traffic via GRE or IPSec tunnels without a PAC file).
        """
        return pulumi.get(self, "enable_dns_resolution_on_transparent_proxy")

    @enable_dns_resolution_on_transparent_proxy.setter
    def enable_dns_resolution_on_transparent_proxy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_dns_resolution_on_transparent_proxy", value)

    @property
    @pulumi.getter(name="enableEvaluatePolicyOnGlobalSslBypass")
    def enable_evaluate_policy_on_global_ssl_bypass(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
        """
        return pulumi.get(self, "enable_evaluate_policy_on_global_ssl_bypass")

    @enable_evaluate_policy_on_global_ssl_bypass.setter
    def enable_evaluate_policy_on_global_ssl_bypass(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_evaluate_policy_on_global_ssl_bypass", value)

    @property
    @pulumi.getter(name="enableIpv6DnsOptimizationOnAllTransparentProxy")
    def enable_ipv6_dns_optimization_on_all_transparent_proxy(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
        """
        return pulumi.get(self, "enable_ipv6_dns_optimization_on_all_transparent_proxy")

    @enable_ipv6_dns_optimization_on_all_transparent_proxy.setter
    def enable_ipv6_dns_optimization_on_all_transparent_proxy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ipv6_dns_optimization_on_all_transparent_proxy", value)

    @property
    @pulumi.getter(name="enableIpv6DnsResolutionOnTransparentProxy")
    def enable_ipv6_dns_resolution_on_transparent_proxy(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
        destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
        PAC file).
        """
        return pulumi.get(self, "enable_ipv6_dns_resolution_on_transparent_proxy")

    @enable_ipv6_dns_resolution_on_transparent_proxy.setter
    def enable_ipv6_dns_resolution_on_transparent_proxy(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ipv6_dns_resolution_on_transparent_proxy", value)

    @property
    @pulumi.getter(name="enableOffice365")
    def enable_office365(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
        """
        return pulumi.get(self, "enable_office365")

    @enable_office365.setter
    def enable_office365(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_office365", value)

    @property
    @pulumi.getter(name="enablePolicyForUnauthenticatedTraffic")
    def enable_policy_for_unauthenticated_traffic(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether policies that include user and department criteria can be configured and applied for
        unauthenticated traffic
        """
        return pulumi.get(self, "enable_policy_for_unauthenticated_traffic")

    @enable_policy_for_unauthenticated_traffic.setter
    def enable_policy_for_unauthenticated_traffic(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_policy_for_unauthenticated_traffic", value)

    @property
    @pulumi.getter(name="enforceSurrogateIpForWindowsApp")
    def enforce_surrogate_ip_for_windows_app(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Enforce Surrogate IP authentication for Windows app traffic
        """
        return pulumi.get(self, "enforce_surrogate_ip_for_windows_app")

    @enforce_surrogate_ip_for_windows_app.setter
    def enforce_surrogate_ip_for_windows_app(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enforce_surrogate_ip_for_windows_app", value)

    @property
    @pulumi.getter(name="http2NonbrowserTrafficEnabled")
    def http2_nonbrowser_traffic_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
        organizational level
        """
        return pulumi.get(self, "http2_nonbrowser_traffic_enabled")

    @http2_nonbrowser_traffic_enabled.setter
    def http2_nonbrowser_traffic_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "http2_nonbrowser_traffic_enabled", value)

    @property
    @pulumi.getter(name="httpRangeHeaderRemoveUrlCategories")
    def http_range_header_remove_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories for which HTTP range headers must be removed
        """
        return pulumi.get(self, "http_range_header_remove_url_categories")

    @http_range_header_remove_url_categories.setter
    def http_range_header_remove_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "http_range_header_remove_url_categories", value)

    @property
    @pulumi.getter(name="kerberosBypassApps")
    def kerberos_bypass_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Cloud applications that are exempted from Kerberos authentication
        """
        return pulumi.get(self, "kerberos_bypass_apps")

    @kerberos_bypass_apps.setter
    def kerberos_bypass_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "kerberos_bypass_apps", value)

    @property
    @pulumi.getter(name="kerberosBypassUrlCategories")
    def kerberos_bypass_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories that are exempted from Kerberos authentication
        """
        return pulumi.get(self, "kerberos_bypass_url_categories")

    @kerberos_bypass_url_categories.setter
    def kerberos_bypass_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "kerberos_bypass_url_categories", value)

    @property
    @pulumi.getter(name="kerberosBypassUrls")
    def kerberos_bypass_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Custom URLs that are exempted from Kerberos authentication
        """
        return pulumi.get(self, "kerberos_bypass_urls")

    @kerberos_bypass_urls.setter
    def kerberos_bypass_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "kerberos_bypass_urls", value)

    @property
    @pulumi.getter(name="logInternalIp")
    def log_internal_ip(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
        """
        return pulumi.get(self, "log_internal_ip")

    @log_internal_ip.setter
    def log_internal_ip(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "log_internal_ip", value)

    @property
    @pulumi.getter(name="preferSniOverConnHost")
    def prefer_sni_over_conn_host(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
        forward proxy connections
        """
        return pulumi.get(self, "prefer_sni_over_conn_host")

    @prefer_sni_over_conn_host.setter
    def prefer_sni_over_conn_host(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "prefer_sni_over_conn_host", value)

    @property
    @pulumi.getter(name="preferSniOverConnHostApps")
    def prefer_sni_over_conn_host_apps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
        resolution instead of the CONNECT host for forward proxy connections)
        """
        return pulumi.get(self, "prefer_sni_over_conn_host_apps")

    @prefer_sni_over_conn_host_apps.setter
    def prefer_sni_over_conn_host_apps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "prefer_sni_over_conn_host_apps", value)

    @property
    @pulumi.getter(name="sipaXffHeaderEnabled")
    def sipa_xff_header_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
        IP-anchored and ZIA-inspected ZPA application traffic.
        """
        return pulumi.get(self, "sipa_xff_header_enabled")

    @sipa_xff_header_enabled.setter
    def sipa_xff_header_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "sipa_xff_header_enabled", value)

    @property
    @pulumi.getter(name="sniDnsOptimizationBypassUrlCategories")
    def sni_dns_optimization_bypass_url_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
        resolution instead of the CONNECT host for forward proxy connections)
        """
        return pulumi.get(self, "sni_dns_optimization_bypass_url_categories")

    @sni_dns_optimization_bypass_url_categories.setter
    def sni_dns_optimization_bypass_url_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "sni_dns_optimization_bypass_url_categories", value)

    @property
    @pulumi.getter(name="trackHttpTunnelOnHttpPorts")
    def track_http_tunnel_on_http_ports(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
        80
        """
        return pulumi.get(self, "track_http_tunnel_on_http_ports")

    @track_http_tunnel_on_http_ports.setter
    def track_http_tunnel_on_http_ports(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "track_http_tunnel_on_http_ports", value)

    @property
    @pulumi.getter(name="uiSessionTimeout")
    def ui_session_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Specifies the login session timeout for admins accessing the ZIA Admin Portal
        """
        return pulumi.get(self, "ui_session_timeout")

    @ui_session_timeout.setter
    def ui_session_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "ui_session_timeout", value)

    @property
    @pulumi.getter(name="zscalerClientConnector1AndPacRoadWarriorInFirewall")
    def zscaler_client_connector1_and_pac_road_warrior_in_firewall(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
        Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
        """
        return pulumi.get(self, "zscaler_client_connector1_and_pac_road_warrior_in_firewall")

    @zscaler_client_connector1_and_pac_road_warrior_in_firewall.setter
    def zscaler_client_connector1_and_pac_road_warrior_in_firewall(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "zscaler_client_connector1_and_pac_road_warrior_in_firewall", value)


@pulumi.type_token("zia:index/advancedSettings:AdvancedSettings")
class AdvancedSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 auth_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 auth_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 basic_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 basic_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 block_connect_host_sni_mismatch: Optional[pulumi.Input[builtins.bool]] = None,
                 block_domain_fronting_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 block_domain_fronting_on_host_header: Optional[pulumi.Input[builtins.bool]] = None,
                 block_http_tunnel_on_non_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 block_non_compliant_http_request_on_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 block_non_http_on_http_port_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 cascade_url_filtering: Optional[pulumi.Input[builtins.bool]] = None,
                 digest_auth_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 digest_auth_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 digest_auth_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_exempt_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_exempt_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_exempt_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_exempt_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 domain_fronting_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dynamic_user_risk_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ecs_for_all_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_admin_rank_access: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_dns_resolution_on_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_evaluate_policy_on_global_ssl_bypass: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ipv6_dns_optimization_on_all_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ipv6_dns_resolution_on_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_office365: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_policy_for_unauthenticated_traffic: Optional[pulumi.Input[builtins.bool]] = None,
                 enforce_surrogate_ip_for_windows_app: Optional[pulumi.Input[builtins.bool]] = None,
                 http2_nonbrowser_traffic_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 http_range_header_remove_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kerberos_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kerberos_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kerberos_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 log_internal_ip: Optional[pulumi.Input[builtins.bool]] = None,
                 prefer_sni_over_conn_host: Optional[pulumi.Input[builtins.bool]] = None,
                 prefer_sni_over_conn_host_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sipa_xff_header_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 sni_dns_optimization_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 track_http_tunnel_on_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 ui_session_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 zscaler_client_connector1_and_pac_road_warrior_in_firewall: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        The **zia_advanced_settings** resource alows you to updates the advanced settings configuration in the ZIA Admin Portal. To learn more see [Configuring Advanced Settings](https://help.zscaler.com/zia/configuring-advanced-settings)

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_advanced_settings** can be imported by using `advanced_settings` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/advancedSettings:AdvancedSettings this "advanced_settings"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] auth_bypass_apps: Cloud applications that are exempted from cookie authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] auth_bypass_url_categories: URL categories that are exempted from cookie authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] auth_bypass_urls: Custom URLs that are exempted from cookie authentication for users
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] basic_bypass_apps: Cloud applications that are exempted from Basic authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] basic_bypass_url_categories: URL categories that are exempted from Basic authentication
        :param pulumi.Input[builtins.bool] block_connect_host_sni_mismatch: Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
               is blocked or not
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] block_domain_fronting_apps: Applications which are subjected to Domain Fronting
        :param pulumi.Input[builtins.bool] block_domain_fronting_on_host_header: Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
               the FQDN of the request's host header
        :param pulumi.Input[builtins.bool] block_http_tunnel_on_non_http_ports: Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
               to ports other than the standard HTTP/S ports 80 and 443)
        :param pulumi.Input[builtins.bool] block_non_compliant_http_request_on_http_ports: Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
        :param pulumi.Input[builtins.bool] block_non_http_on_http_port_enabled: Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
        :param pulumi.Input[builtins.bool] cascade_url_filtering: Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
               transaction explicitly
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] digest_auth_bypass_apps: Cloud applications that are exempted from Digest authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] digest_auth_bypass_url_categories: URL categories that are exempted from Digest authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] digest_auth_bypass_urls: Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
               authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_apps: Cloud applications to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_exempt_apps: Cloud applications that are excluded from DNS optimization on transparent proxy mode
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_exempt_urls: URLs that are excluded from DNS optimization on transparent proxy mode
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_ipv6_apps: Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_ipv6_exempt_apps: Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_ipv6_url_categories: IPv6 URL categories to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_url_categories: URL categories to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_urls: URLs to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] domain_fronting_bypass_url_categories: URL categories that are exempted from domain fronting
        :param pulumi.Input[builtins.bool] dynamic_user_risk_enabled: Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
        :param pulumi.Input[builtins.bool] ecs_for_all_enabled: Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
               users.
        :param pulumi.Input[builtins.bool] enable_admin_rank_access: Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
        :param pulumi.Input[builtins.bool] enable_dns_resolution_on_transparent_proxy: Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
               (e.g., traffic via GRE or IPSec tunnels without a PAC file).
        :param pulumi.Input[builtins.bool] enable_evaluate_policy_on_global_ssl_bypass: Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
        :param pulumi.Input[builtins.bool] enable_ipv6_dns_optimization_on_all_transparent_proxy: Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
        :param pulumi.Input[builtins.bool] enable_ipv6_dns_resolution_on_transparent_proxy: Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
               destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
               PAC file).
        :param pulumi.Input[builtins.bool] enable_office365: Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
        :param pulumi.Input[builtins.bool] enable_policy_for_unauthenticated_traffic: Value indicating whether policies that include user and department criteria can be configured and applied for
               unauthenticated traffic
        :param pulumi.Input[builtins.bool] enforce_surrogate_ip_for_windows_app: Enforce Surrogate IP authentication for Windows app traffic
        :param pulumi.Input[builtins.bool] http2_nonbrowser_traffic_enabled: Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
               organizational level
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] http_range_header_remove_url_categories: URL categories for which HTTP range headers must be removed
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] kerberos_bypass_apps: Cloud applications that are exempted from Kerberos authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] kerberos_bypass_url_categories: URL categories that are exempted from Kerberos authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] kerberos_bypass_urls: Custom URLs that are exempted from Kerberos authentication
        :param pulumi.Input[builtins.bool] log_internal_ip: Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
        :param pulumi.Input[builtins.bool] prefer_sni_over_conn_host: Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
               forward proxy connections
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] prefer_sni_over_conn_host_apps: Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
               resolution instead of the CONNECT host for forward proxy connections)
        :param pulumi.Input[builtins.bool] sipa_xff_header_enabled: Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
               IP-anchored and ZIA-inspected ZPA application traffic.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sni_dns_optimization_bypass_url_categories: URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
               resolution instead of the CONNECT host for forward proxy connections)
        :param pulumi.Input[builtins.bool] track_http_tunnel_on_http_ports: Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
               80
        :param pulumi.Input[builtins.int] ui_session_timeout: Specifies the login session timeout for admins accessing the ZIA Admin Portal
        :param pulumi.Input[builtins.bool] zscaler_client_connector1_and_pac_road_warrior_in_firewall: Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
               Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AdvancedSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_advanced_settings** resource alows you to updates the advanced settings configuration in the ZIA Admin Portal. To learn more see [Configuring Advanced Settings](https://help.zscaler.com/zia/configuring-advanced-settings)

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_advanced_settings** can be imported by using `advanced_settings` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/advancedSettings:AdvancedSettings this "advanced_settings"
        ```

        :param str resource_name: The name of the resource.
        :param AdvancedSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AdvancedSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 auth_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 auth_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 basic_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 basic_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 block_connect_host_sni_mismatch: Optional[pulumi.Input[builtins.bool]] = None,
                 block_domain_fronting_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 block_domain_fronting_on_host_header: Optional[pulumi.Input[builtins.bool]] = None,
                 block_http_tunnel_on_non_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 block_non_compliant_http_request_on_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 block_non_http_on_http_port_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 cascade_url_filtering: Optional[pulumi.Input[builtins.bool]] = None,
                 digest_auth_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 digest_auth_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 digest_auth_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_exempt_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_exempt_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_exempt_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_exempt_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_ipv6_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_resolution_on_transparent_proxy_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 domain_fronting_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dynamic_user_risk_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 ecs_for_all_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_admin_rank_access: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_dns_resolution_on_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_evaluate_policy_on_global_ssl_bypass: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ipv6_dns_optimization_on_all_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ipv6_dns_resolution_on_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_office365: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_policy_for_unauthenticated_traffic: Optional[pulumi.Input[builtins.bool]] = None,
                 enforce_surrogate_ip_for_windows_app: Optional[pulumi.Input[builtins.bool]] = None,
                 http2_nonbrowser_traffic_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 http_range_header_remove_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kerberos_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kerberos_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 kerberos_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 log_internal_ip: Optional[pulumi.Input[builtins.bool]] = None,
                 prefer_sni_over_conn_host: Optional[pulumi.Input[builtins.bool]] = None,
                 prefer_sni_over_conn_host_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 sipa_xff_header_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 sni_dns_optimization_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 track_http_tunnel_on_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
                 ui_session_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 zscaler_client_connector1_and_pac_road_warrior_in_firewall: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AdvancedSettingsArgs.__new__(AdvancedSettingsArgs)

            __props__.__dict__["auth_bypass_apps"] = auth_bypass_apps
            __props__.__dict__["auth_bypass_url_categories"] = auth_bypass_url_categories
            __props__.__dict__["auth_bypass_urls"] = auth_bypass_urls
            __props__.__dict__["basic_bypass_apps"] = basic_bypass_apps
            __props__.__dict__["basic_bypass_url_categories"] = basic_bypass_url_categories
            __props__.__dict__["block_connect_host_sni_mismatch"] = block_connect_host_sni_mismatch
            __props__.__dict__["block_domain_fronting_apps"] = block_domain_fronting_apps
            __props__.__dict__["block_domain_fronting_on_host_header"] = block_domain_fronting_on_host_header
            __props__.__dict__["block_http_tunnel_on_non_http_ports"] = block_http_tunnel_on_non_http_ports
            __props__.__dict__["block_non_compliant_http_request_on_http_ports"] = block_non_compliant_http_request_on_http_ports
            __props__.__dict__["block_non_http_on_http_port_enabled"] = block_non_http_on_http_port_enabled
            __props__.__dict__["cascade_url_filtering"] = cascade_url_filtering
            __props__.__dict__["digest_auth_bypass_apps"] = digest_auth_bypass_apps
            __props__.__dict__["digest_auth_bypass_url_categories"] = digest_auth_bypass_url_categories
            __props__.__dict__["digest_auth_bypass_urls"] = digest_auth_bypass_urls
            __props__.__dict__["dns_resolution_on_transparent_proxy_apps"] = dns_resolution_on_transparent_proxy_apps
            __props__.__dict__["dns_resolution_on_transparent_proxy_exempt_apps"] = dns_resolution_on_transparent_proxy_exempt_apps
            __props__.__dict__["dns_resolution_on_transparent_proxy_exempt_url_categories"] = dns_resolution_on_transparent_proxy_exempt_url_categories
            __props__.__dict__["dns_resolution_on_transparent_proxy_exempt_urls"] = dns_resolution_on_transparent_proxy_exempt_urls
            __props__.__dict__["dns_resolution_on_transparent_proxy_ipv6_apps"] = dns_resolution_on_transparent_proxy_ipv6_apps
            __props__.__dict__["dns_resolution_on_transparent_proxy_ipv6_exempt_apps"] = dns_resolution_on_transparent_proxy_ipv6_exempt_apps
            __props__.__dict__["dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories"] = dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories
            __props__.__dict__["dns_resolution_on_transparent_proxy_ipv6_url_categories"] = dns_resolution_on_transparent_proxy_ipv6_url_categories
            __props__.__dict__["dns_resolution_on_transparent_proxy_url_categories"] = dns_resolution_on_transparent_proxy_url_categories
            __props__.__dict__["dns_resolution_on_transparent_proxy_urls"] = dns_resolution_on_transparent_proxy_urls
            __props__.__dict__["domain_fronting_bypass_url_categories"] = domain_fronting_bypass_url_categories
            __props__.__dict__["dynamic_user_risk_enabled"] = dynamic_user_risk_enabled
            __props__.__dict__["ecs_for_all_enabled"] = ecs_for_all_enabled
            __props__.__dict__["enable_admin_rank_access"] = enable_admin_rank_access
            __props__.__dict__["enable_dns_resolution_on_transparent_proxy"] = enable_dns_resolution_on_transparent_proxy
            __props__.__dict__["enable_evaluate_policy_on_global_ssl_bypass"] = enable_evaluate_policy_on_global_ssl_bypass
            __props__.__dict__["enable_ipv6_dns_optimization_on_all_transparent_proxy"] = enable_ipv6_dns_optimization_on_all_transparent_proxy
            __props__.__dict__["enable_ipv6_dns_resolution_on_transparent_proxy"] = enable_ipv6_dns_resolution_on_transparent_proxy
            __props__.__dict__["enable_office365"] = enable_office365
            __props__.__dict__["enable_policy_for_unauthenticated_traffic"] = enable_policy_for_unauthenticated_traffic
            __props__.__dict__["enforce_surrogate_ip_for_windows_app"] = enforce_surrogate_ip_for_windows_app
            __props__.__dict__["http2_nonbrowser_traffic_enabled"] = http2_nonbrowser_traffic_enabled
            __props__.__dict__["http_range_header_remove_url_categories"] = http_range_header_remove_url_categories
            __props__.__dict__["kerberos_bypass_apps"] = kerberos_bypass_apps
            __props__.__dict__["kerberos_bypass_url_categories"] = kerberos_bypass_url_categories
            __props__.__dict__["kerberos_bypass_urls"] = kerberos_bypass_urls
            __props__.__dict__["log_internal_ip"] = log_internal_ip
            __props__.__dict__["prefer_sni_over_conn_host"] = prefer_sni_over_conn_host
            __props__.__dict__["prefer_sni_over_conn_host_apps"] = prefer_sni_over_conn_host_apps
            __props__.__dict__["sipa_xff_header_enabled"] = sipa_xff_header_enabled
            __props__.__dict__["sni_dns_optimization_bypass_url_categories"] = sni_dns_optimization_bypass_url_categories
            __props__.__dict__["track_http_tunnel_on_http_ports"] = track_http_tunnel_on_http_ports
            __props__.__dict__["ui_session_timeout"] = ui_session_timeout
            __props__.__dict__["zscaler_client_connector1_and_pac_road_warrior_in_firewall"] = zscaler_client_connector1_and_pac_road_warrior_in_firewall
        super(AdvancedSettings, __self__).__init__(
            'zia:index/advancedSettings:AdvancedSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            auth_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            auth_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            basic_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            basic_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            block_connect_host_sni_mismatch: Optional[pulumi.Input[builtins.bool]] = None,
            block_domain_fronting_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            block_domain_fronting_on_host_header: Optional[pulumi.Input[builtins.bool]] = None,
            block_http_tunnel_on_non_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
            block_non_compliant_http_request_on_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
            block_non_http_on_http_port_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            cascade_url_filtering: Optional[pulumi.Input[builtins.bool]] = None,
            digest_auth_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            digest_auth_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            digest_auth_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dns_resolution_on_transparent_proxy_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dns_resolution_on_transparent_proxy_exempt_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dns_resolution_on_transparent_proxy_exempt_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dns_resolution_on_transparent_proxy_exempt_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dns_resolution_on_transparent_proxy_ipv6_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dns_resolution_on_transparent_proxy_ipv6_exempt_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dns_resolution_on_transparent_proxy_ipv6_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dns_resolution_on_transparent_proxy_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dns_resolution_on_transparent_proxy_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            domain_fronting_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dynamic_user_risk_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            ecs_for_all_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            enable_admin_rank_access: Optional[pulumi.Input[builtins.bool]] = None,
            enable_dns_resolution_on_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
            enable_evaluate_policy_on_global_ssl_bypass: Optional[pulumi.Input[builtins.bool]] = None,
            enable_ipv6_dns_optimization_on_all_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
            enable_ipv6_dns_resolution_on_transparent_proxy: Optional[pulumi.Input[builtins.bool]] = None,
            enable_office365: Optional[pulumi.Input[builtins.bool]] = None,
            enable_policy_for_unauthenticated_traffic: Optional[pulumi.Input[builtins.bool]] = None,
            enforce_surrogate_ip_for_windows_app: Optional[pulumi.Input[builtins.bool]] = None,
            http2_nonbrowser_traffic_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            http_range_header_remove_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            kerberos_bypass_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            kerberos_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            kerberos_bypass_urls: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            log_internal_ip: Optional[pulumi.Input[builtins.bool]] = None,
            prefer_sni_over_conn_host: Optional[pulumi.Input[builtins.bool]] = None,
            prefer_sni_over_conn_host_apps: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            sipa_xff_header_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            sni_dns_optimization_bypass_url_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            track_http_tunnel_on_http_ports: Optional[pulumi.Input[builtins.bool]] = None,
            ui_session_timeout: Optional[pulumi.Input[builtins.int]] = None,
            zscaler_client_connector1_and_pac_road_warrior_in_firewall: Optional[pulumi.Input[builtins.bool]] = None) -> 'AdvancedSettings':
        """
        Get an existing AdvancedSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] auth_bypass_apps: Cloud applications that are exempted from cookie authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] auth_bypass_url_categories: URL categories that are exempted from cookie authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] auth_bypass_urls: Custom URLs that are exempted from cookie authentication for users
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] basic_bypass_apps: Cloud applications that are exempted from Basic authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] basic_bypass_url_categories: URL categories that are exempted from Basic authentication
        :param pulumi.Input[builtins.bool] block_connect_host_sni_mismatch: Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
               is blocked or not
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] block_domain_fronting_apps: Applications which are subjected to Domain Fronting
        :param pulumi.Input[builtins.bool] block_domain_fronting_on_host_header: Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
               the FQDN of the request's host header
        :param pulumi.Input[builtins.bool] block_http_tunnel_on_non_http_ports: Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
               to ports other than the standard HTTP/S ports 80 and 443)
        :param pulumi.Input[builtins.bool] block_non_compliant_http_request_on_http_ports: Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
        :param pulumi.Input[builtins.bool] block_non_http_on_http_port_enabled: Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
        :param pulumi.Input[builtins.bool] cascade_url_filtering: Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
               transaction explicitly
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] digest_auth_bypass_apps: Cloud applications that are exempted from Digest authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] digest_auth_bypass_url_categories: URL categories that are exempted from Digest authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] digest_auth_bypass_urls: Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
               authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_apps: Cloud applications to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_exempt_apps: Cloud applications that are excluded from DNS optimization on transparent proxy mode
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_exempt_urls: URLs that are excluded from DNS optimization on transparent proxy mode
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_ipv6_apps: Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_ipv6_exempt_apps: Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_ipv6_url_categories: IPv6 URL categories to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_url_categories: URL categories to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_resolution_on_transparent_proxy_urls: URLs to which DNS optimization on transparent proxy mode applies
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] domain_fronting_bypass_url_categories: URL categories that are exempted from domain fronting
        :param pulumi.Input[builtins.bool] dynamic_user_risk_enabled: Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
        :param pulumi.Input[builtins.bool] ecs_for_all_enabled: Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
               users.
        :param pulumi.Input[builtins.bool] enable_admin_rank_access: Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
        :param pulumi.Input[builtins.bool] enable_dns_resolution_on_transparent_proxy: Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
               (e.g., traffic via GRE or IPSec tunnels without a PAC file).
        :param pulumi.Input[builtins.bool] enable_evaluate_policy_on_global_ssl_bypass: Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
        :param pulumi.Input[builtins.bool] enable_ipv6_dns_optimization_on_all_transparent_proxy: Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
        :param pulumi.Input[builtins.bool] enable_ipv6_dns_resolution_on_transparent_proxy: Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
               destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
               PAC file).
        :param pulumi.Input[builtins.bool] enable_office365: Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
        :param pulumi.Input[builtins.bool] enable_policy_for_unauthenticated_traffic: Value indicating whether policies that include user and department criteria can be configured and applied for
               unauthenticated traffic
        :param pulumi.Input[builtins.bool] enforce_surrogate_ip_for_windows_app: Enforce Surrogate IP authentication for Windows app traffic
        :param pulumi.Input[builtins.bool] http2_nonbrowser_traffic_enabled: Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
               organizational level
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] http_range_header_remove_url_categories: URL categories for which HTTP range headers must be removed
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] kerberos_bypass_apps: Cloud applications that are exempted from Kerberos authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] kerberos_bypass_url_categories: URL categories that are exempted from Kerberos authentication
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] kerberos_bypass_urls: Custom URLs that are exempted from Kerberos authentication
        :param pulumi.Input[builtins.bool] log_internal_ip: Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
        :param pulumi.Input[builtins.bool] prefer_sni_over_conn_host: Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
               forward proxy connections
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] prefer_sni_over_conn_host_apps: Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
               resolution instead of the CONNECT host for forward proxy connections)
        :param pulumi.Input[builtins.bool] sipa_xff_header_enabled: Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
               IP-anchored and ZIA-inspected ZPA application traffic.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sni_dns_optimization_bypass_url_categories: URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
               resolution instead of the CONNECT host for forward proxy connections)
        :param pulumi.Input[builtins.bool] track_http_tunnel_on_http_ports: Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
               80
        :param pulumi.Input[builtins.int] ui_session_timeout: Specifies the login session timeout for admins accessing the ZIA Admin Portal
        :param pulumi.Input[builtins.bool] zscaler_client_connector1_and_pac_road_warrior_in_firewall: Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
               Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AdvancedSettingsState.__new__(_AdvancedSettingsState)

        __props__.__dict__["auth_bypass_apps"] = auth_bypass_apps
        __props__.__dict__["auth_bypass_url_categories"] = auth_bypass_url_categories
        __props__.__dict__["auth_bypass_urls"] = auth_bypass_urls
        __props__.__dict__["basic_bypass_apps"] = basic_bypass_apps
        __props__.__dict__["basic_bypass_url_categories"] = basic_bypass_url_categories
        __props__.__dict__["block_connect_host_sni_mismatch"] = block_connect_host_sni_mismatch
        __props__.__dict__["block_domain_fronting_apps"] = block_domain_fronting_apps
        __props__.__dict__["block_domain_fronting_on_host_header"] = block_domain_fronting_on_host_header
        __props__.__dict__["block_http_tunnel_on_non_http_ports"] = block_http_tunnel_on_non_http_ports
        __props__.__dict__["block_non_compliant_http_request_on_http_ports"] = block_non_compliant_http_request_on_http_ports
        __props__.__dict__["block_non_http_on_http_port_enabled"] = block_non_http_on_http_port_enabled
        __props__.__dict__["cascade_url_filtering"] = cascade_url_filtering
        __props__.__dict__["digest_auth_bypass_apps"] = digest_auth_bypass_apps
        __props__.__dict__["digest_auth_bypass_url_categories"] = digest_auth_bypass_url_categories
        __props__.__dict__["digest_auth_bypass_urls"] = digest_auth_bypass_urls
        __props__.__dict__["dns_resolution_on_transparent_proxy_apps"] = dns_resolution_on_transparent_proxy_apps
        __props__.__dict__["dns_resolution_on_transparent_proxy_exempt_apps"] = dns_resolution_on_transparent_proxy_exempt_apps
        __props__.__dict__["dns_resolution_on_transparent_proxy_exempt_url_categories"] = dns_resolution_on_transparent_proxy_exempt_url_categories
        __props__.__dict__["dns_resolution_on_transparent_proxy_exempt_urls"] = dns_resolution_on_transparent_proxy_exempt_urls
        __props__.__dict__["dns_resolution_on_transparent_proxy_ipv6_apps"] = dns_resolution_on_transparent_proxy_ipv6_apps
        __props__.__dict__["dns_resolution_on_transparent_proxy_ipv6_exempt_apps"] = dns_resolution_on_transparent_proxy_ipv6_exempt_apps
        __props__.__dict__["dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories"] = dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories
        __props__.__dict__["dns_resolution_on_transparent_proxy_ipv6_url_categories"] = dns_resolution_on_transparent_proxy_ipv6_url_categories
        __props__.__dict__["dns_resolution_on_transparent_proxy_url_categories"] = dns_resolution_on_transparent_proxy_url_categories
        __props__.__dict__["dns_resolution_on_transparent_proxy_urls"] = dns_resolution_on_transparent_proxy_urls
        __props__.__dict__["domain_fronting_bypass_url_categories"] = domain_fronting_bypass_url_categories
        __props__.__dict__["dynamic_user_risk_enabled"] = dynamic_user_risk_enabled
        __props__.__dict__["ecs_for_all_enabled"] = ecs_for_all_enabled
        __props__.__dict__["enable_admin_rank_access"] = enable_admin_rank_access
        __props__.__dict__["enable_dns_resolution_on_transparent_proxy"] = enable_dns_resolution_on_transparent_proxy
        __props__.__dict__["enable_evaluate_policy_on_global_ssl_bypass"] = enable_evaluate_policy_on_global_ssl_bypass
        __props__.__dict__["enable_ipv6_dns_optimization_on_all_transparent_proxy"] = enable_ipv6_dns_optimization_on_all_transparent_proxy
        __props__.__dict__["enable_ipv6_dns_resolution_on_transparent_proxy"] = enable_ipv6_dns_resolution_on_transparent_proxy
        __props__.__dict__["enable_office365"] = enable_office365
        __props__.__dict__["enable_policy_for_unauthenticated_traffic"] = enable_policy_for_unauthenticated_traffic
        __props__.__dict__["enforce_surrogate_ip_for_windows_app"] = enforce_surrogate_ip_for_windows_app
        __props__.__dict__["http2_nonbrowser_traffic_enabled"] = http2_nonbrowser_traffic_enabled
        __props__.__dict__["http_range_header_remove_url_categories"] = http_range_header_remove_url_categories
        __props__.__dict__["kerberos_bypass_apps"] = kerberos_bypass_apps
        __props__.__dict__["kerberos_bypass_url_categories"] = kerberos_bypass_url_categories
        __props__.__dict__["kerberos_bypass_urls"] = kerberos_bypass_urls
        __props__.__dict__["log_internal_ip"] = log_internal_ip
        __props__.__dict__["prefer_sni_over_conn_host"] = prefer_sni_over_conn_host
        __props__.__dict__["prefer_sni_over_conn_host_apps"] = prefer_sni_over_conn_host_apps
        __props__.__dict__["sipa_xff_header_enabled"] = sipa_xff_header_enabled
        __props__.__dict__["sni_dns_optimization_bypass_url_categories"] = sni_dns_optimization_bypass_url_categories
        __props__.__dict__["track_http_tunnel_on_http_ports"] = track_http_tunnel_on_http_ports
        __props__.__dict__["ui_session_timeout"] = ui_session_timeout
        __props__.__dict__["zscaler_client_connector1_and_pac_road_warrior_in_firewall"] = zscaler_client_connector1_and_pac_road_warrior_in_firewall
        return AdvancedSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authBypassApps")
    def auth_bypass_apps(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Cloud applications that are exempted from cookie authentication
        """
        return pulumi.get(self, "auth_bypass_apps")

    @property
    @pulumi.getter(name="authBypassUrlCategories")
    def auth_bypass_url_categories(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        URL categories that are exempted from cookie authentication
        """
        return pulumi.get(self, "auth_bypass_url_categories")

    @property
    @pulumi.getter(name="authBypassUrls")
    def auth_bypass_urls(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Custom URLs that are exempted from cookie authentication for users
        """
        return pulumi.get(self, "auth_bypass_urls")

    @property
    @pulumi.getter(name="basicBypassApps")
    def basic_bypass_apps(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Cloud applications that are exempted from Basic authentication
        """
        return pulumi.get(self, "basic_bypass_apps")

    @property
    @pulumi.getter(name="basicBypassUrlCategories")
    def basic_bypass_url_categories(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        URL categories that are exempted from Basic authentication
        """
        return pulumi.get(self, "basic_bypass_url_categories")

    @property
    @pulumi.getter(name="blockConnectHostSniMismatch")
    def block_connect_host_sni_mismatch(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether CONNECT host and SNI mismatch (i.e., CONNECT host doesn't match the SSL/TLS client hello SNI)
        is blocked or not
        """
        return pulumi.get(self, "block_connect_host_sni_mismatch")

    @property
    @pulumi.getter(name="blockDomainFrontingApps")
    def block_domain_fronting_apps(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Applications which are subjected to Domain Fronting
        """
        return pulumi.get(self, "block_domain_fronting_apps")

    @property
    @pulumi.getter(name="blockDomainFrontingOnHostHeader")
    def block_domain_fronting_on_host_header(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether to block or allow HTTP/S transactions in which the FQDN of the request URL is different than
        the FQDN of the request's host header
        """
        return pulumi.get(self, "block_domain_fronting_on_host_header")

    @property
    @pulumi.getter(name="blockHttpTunnelOnNonHttpPorts")
    def block_http_tunnel_on_non_http_ports(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether HTTP CONNECT method requests to non-standard ports are allowed or not (i.e., requests directed
        to ports other than the standard HTTP/S ports 80 and 443)
        """
        return pulumi.get(self, "block_http_tunnel_on_non_http_ports")

    @property
    @pulumi.getter(name="blockNonCompliantHttpRequestOnHttpPorts")
    def block_non_compliant_http_request_on_http_ports(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether to allow or block traffic that is not compliant with RFC HTTP protocol standards
        """
        return pulumi.get(self, "block_non_compliant_http_request_on_http_ports")

    @property
    @pulumi.getter(name="blockNonHttpOnHttpPortEnabled")
    def block_non_http_on_http_port_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether non-HTTP Traffic on HTTP/S ports are allowed or blocked
        """
        return pulumi.get(self, "block_non_http_on_http_port_enabled")

    @property
    @pulumi.getter(name="cascadeUrlFiltering")
    def cascade_url_filtering(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether to apply the URL Filtering policy even when the Cloud App Control policy already allows a
        transaction explicitly
        """
        return pulumi.get(self, "cascade_url_filtering")

    @property
    @pulumi.getter(name="digestAuthBypassApps")
    def digest_auth_bypass_apps(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Cloud applications that are exempted from Digest authentication
        """
        return pulumi.get(self, "digest_auth_bypass_apps")

    @property
    @pulumi.getter(name="digestAuthBypassUrlCategories")
    def digest_auth_bypass_url_categories(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        URL categories that are exempted from Digest authentication
        """
        return pulumi.get(self, "digest_auth_bypass_url_categories")

    @property
    @pulumi.getter(name="digestAuthBypassUrls")
    def digest_auth_bypass_urls(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Custom URLs that are exempted from Digest authentication. Cloud applications that are exempted from Digest
        authentication
        """
        return pulumi.get(self, "digest_auth_bypass_urls")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyApps")
    def dns_resolution_on_transparent_proxy_apps(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Cloud applications to which DNS optimization on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_apps")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyExemptApps")
    def dns_resolution_on_transparent_proxy_exempt_apps(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Cloud applications that are excluded from DNS optimization on transparent proxy mode
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_exempt_apps")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyExemptUrlCategories")
    def dns_resolution_on_transparent_proxy_exempt_url_categories(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_exempt_url_categories")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyExemptUrls")
    def dns_resolution_on_transparent_proxy_exempt_urls(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        URLs that are excluded from DNS optimization on transparent proxy mode
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_exempt_urls")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6Apps")
    def dns_resolution_on_transparent_proxy_ipv6_apps(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Cloud applications to which DNS optimization for IPv6 addresses on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_apps")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6ExemptApps")
    def dns_resolution_on_transparent_proxy_ipv6_exempt_apps(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Cloud applications that are excluded from DNS optimization for IPv6 addresses on transparent proxy mode
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_exempt_apps")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories")
    def dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6UrlCategories")
    def dns_resolution_on_transparent_proxy_ipv6_url_categories(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        IPv6 URL categories to which DNS optimization on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_url_categories")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyUrlCategories")
    def dns_resolution_on_transparent_proxy_url_categories(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        URL categories to which DNS optimization on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_url_categories")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyUrls")
    def dns_resolution_on_transparent_proxy_urls(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        URLs to which DNS optimization on transparent proxy mode applies
        """
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_urls")

    @property
    @pulumi.getter(name="domainFrontingBypassUrlCategories")
    def domain_fronting_bypass_url_categories(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        URL categories that are exempted from domain fronting
        """
        return pulumi.get(self, "domain_fronting_bypass_url_categories")

    @property
    @pulumi.getter(name="dynamicUserRiskEnabled")
    def dynamic_user_risk_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether to dynamically update user risk score by tracking risky user activities in real time
        """
        return pulumi.get(self, "dynamic_user_risk_enabled")

    @property
    @pulumi.getter(name="ecsForAllEnabled")
    def ecs_for_all_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether or not to include the ECS option in all DNS queries, originating from all locations and remote
        users.
        """
        return pulumi.get(self, "ecs_for_all_enabled")

    @property
    @pulumi.getter(name="enableAdminRankAccess")
    def enable_admin_rank_access(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether ranks are enabled for admins to allow admin ranks in policy configuration and management
        """
        return pulumi.get(self, "enable_admin_rank_access")

    @property
    @pulumi.getter(name="enableDnsResolutionOnTransparentProxy")
    def enable_dns_resolution_on_transparent_proxy(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether DNS optimization is enabled or disabled for Z-Tunnel 2.0 and transparent proxy mode traffic
        (e.g., traffic via GRE or IPSec tunnels without a PAC file).
        """
        return pulumi.get(self, "enable_dns_resolution_on_transparent_proxy")

    @property
    @pulumi.getter(name="enableEvaluatePolicyOnGlobalSslBypass")
    def enable_evaluate_policy_on_global_ssl_bypass(self) -> pulumi.Output[builtins.bool]:
        """
        Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
        """
        return pulumi.get(self, "enable_evaluate_policy_on_global_ssl_bypass")

    @property
    @pulumi.getter(name="enableIpv6DnsOptimizationOnAllTransparentProxy")
    def enable_ipv6_dns_optimization_on_all_transparent_proxy(self) -> pulumi.Output[builtins.bool]:
        """
        Enable/Disable DNS optimization for all IPv6 transparent proxy traffic
        """
        return pulumi.get(self, "enable_ipv6_dns_optimization_on_all_transparent_proxy")

    @property
    @pulumi.getter(name="enableIpv6DnsResolutionOnTransparentProxy")
    def enable_ipv6_dns_resolution_on_transparent_proxy(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether DNS optimization is enabled or disabled for IPv6 connections to dual-stack or IPv6-only
        destinations sent via Z-Tunnel 2.0 and transparent proxy proxy mode (e.g., traffic via GRE or IPSec tunnels without a
        PAC file).
        """
        return pulumi.get(self, "enable_ipv6_dns_resolution_on_transparent_proxy")

    @property
    @pulumi.getter(name="enableOffice365")
    def enable_office365(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether Microsoft Office 365 One Click Configuration is enabled or not
        """
        return pulumi.get(self, "enable_office365")

    @property
    @pulumi.getter(name="enablePolicyForUnauthenticatedTraffic")
    def enable_policy_for_unauthenticated_traffic(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether policies that include user and department criteria can be configured and applied for
        unauthenticated traffic
        """
        return pulumi.get(self, "enable_policy_for_unauthenticated_traffic")

    @property
    @pulumi.getter(name="enforceSurrogateIpForWindowsApp")
    def enforce_surrogate_ip_for_windows_app(self) -> pulumi.Output[builtins.bool]:
        """
        Enforce Surrogate IP authentication for Windows app traffic
        """
        return pulumi.get(self, "enforce_surrogate_ip_for_windows_app")

    @property
    @pulumi.getter(name="http2NonbrowserTrafficEnabled")
    def http2_nonbrowser_traffic_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether or not HTTP/2 should be the default web protocol for accessing various applications at your
        organizational level
        """
        return pulumi.get(self, "http2_nonbrowser_traffic_enabled")

    @property
    @pulumi.getter(name="httpRangeHeaderRemoveUrlCategories")
    def http_range_header_remove_url_categories(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        URL categories for which HTTP range headers must be removed
        """
        return pulumi.get(self, "http_range_header_remove_url_categories")

    @property
    @pulumi.getter(name="kerberosBypassApps")
    def kerberos_bypass_apps(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Cloud applications that are exempted from Kerberos authentication
        """
        return pulumi.get(self, "kerberos_bypass_apps")

    @property
    @pulumi.getter(name="kerberosBypassUrlCategories")
    def kerberos_bypass_url_categories(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        URL categories that are exempted from Kerberos authentication
        """
        return pulumi.get(self, "kerberos_bypass_url_categories")

    @property
    @pulumi.getter(name="kerberosBypassUrls")
    def kerberos_bypass_urls(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Custom URLs that are exempted from Kerberos authentication
        """
        return pulumi.get(self, "kerberos_bypass_urls")

    @property
    @pulumi.getter(name="logInternalIp")
    def log_internal_ip(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether to log internal IP address present in X-Forwarded-For (XFF) proxy header or not
        """
        return pulumi.get(self, "log_internal_ip")

    @property
    @pulumi.getter(name="preferSniOverConnHost")
    def prefer_sni_over_conn_host(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether or not to use the SSL/TLS client hello SNI for DNS resolution instead of the CONNECT host for
        forward proxy connections
        """
        return pulumi.get(self, "prefer_sni_over_conn_host")

    @property
    @pulumi.getter(name="preferSniOverConnHostApps")
    def prefer_sni_over_conn_host_apps(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Applications that are exempted from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
        resolution instead of the CONNECT host for forward proxy connections)
        """
        return pulumi.get(self, "prefer_sni_over_conn_host_apps")

    @property
    @pulumi.getter(name="sipaXffHeaderEnabled")
    def sipa_xff_header_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether or not to insert XFF header to all traffic forwarded from ZIA to ZPA, including source
        IP-anchored and ZIA-inspected ZPA application traffic.
        """
        return pulumi.get(self, "sipa_xff_header_enabled")

    @property
    @pulumi.getter(name="sniDnsOptimizationBypassUrlCategories")
    def sni_dns_optimization_bypass_url_categories(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        URL categories that are excluded from the preferSniOverConnHost setting (i.e., prefer SSL/TLS client hello SNI for DNS
        resolution instead of the CONNECT host for forward proxy connections)
        """
        return pulumi.get(self, "sni_dns_optimization_bypass_url_categories")

    @property
    @pulumi.getter(name="trackHttpTunnelOnHttpPorts")
    def track_http_tunnel_on_http_ports(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether to apply configured policies on tunneled HTTP traffic sent via a CONNECT method request on port
        80
        """
        return pulumi.get(self, "track_http_tunnel_on_http_ports")

    @property
    @pulumi.getter(name="uiSessionTimeout")
    def ui_session_timeout(self) -> pulumi.Output[builtins.int]:
        """
        Specifies the login session timeout for admins accessing the ZIA Admin Portal
        """
        return pulumi.get(self, "ui_session_timeout")

    @property
    @pulumi.getter(name="zscalerClientConnector1AndPacRoadWarriorInFirewall")
    def zscaler_client_connector1_and_pac_road_warrior_in_firewall(self) -> pulumi.Output[builtins.bool]:
        """
        Value indicating whether to apply the Firewall rules configured without a specified location criteria (or with the Road
        Warrior location) to remote user traffic forwarded via Z-Tunnel 1.0 or PAC files
        """
        return pulumi.get(self, "zscaler_client_connector1_and_pac_road_warrior_in_firewall")

