# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AdminUsersArgs', 'AdminUsers']

@pulumi.input_type
class AdminUsersArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 login_name: pulumi.Input[str],
                 username: pulumi.Input[str],
                 admin_scope_entities: Optional[pulumi.Input['AdminUsersAdminScopeEntitiesArgs']] = None,
                 admin_scope_type: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 is_auditor: Optional[pulumi.Input[bool]] = None,
                 is_exec_mobile_app_enabled: Optional[pulumi.Input[bool]] = None,
                 is_non_editable: Optional[pulumi.Input[bool]] = None,
                 is_password_expired: Optional[pulumi.Input[bool]] = None,
                 is_password_login_allowed: Optional[pulumi.Input[bool]] = None,
                 is_product_update_comm_enabled: Optional[pulumi.Input[bool]] = None,
                 is_security_report_comm_enabled: Optional[pulumi.Input[bool]] = None,
                 is_service_update_comm_enabled: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]]] = None):
        """
        The set of arguments for constructing a AdminUsers resource.
        :param pulumi.Input[str] email: Admin or auditor's email address.
        :param pulumi.Input[str] login_name: The email address of the admin user to be exported.
        :param pulumi.Input[str] username: The username of the admin user to be exported.
        :param pulumi.Input['AdminUsersAdminScopeEntitiesArgs'] admin_scope_entities: Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        :param pulumi.Input[str] admin_scope_type: The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        :param pulumi.Input[str] comments: Additional information about the admin or auditor.
        :param pulumi.Input[bool] disabled: Indicates whether or not the admin account is disabled.
        :param pulumi.Input[bool] is_auditor: Indicates whether the user is an auditor. This attribute is subject to change.
        :param pulumi.Input[bool] is_exec_mobile_app_enabled: Indicates whether or not Executive Insights App access is enabled for the admin.
        :param pulumi.Input[bool] is_non_editable: Indicates whether or not the admin can be edited or deleted.
        :param pulumi.Input[bool] is_password_expired: Indicates whether or not an admin's password has expired.
        :param pulumi.Input[bool] is_password_login_allowed: The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
        :param pulumi.Input[bool] is_product_update_comm_enabled: Communication setting for Product Update.
        :param pulumi.Input[bool] is_security_report_comm_enabled: Communication for Security Report is enabled.
        :param pulumi.Input[bool] is_service_update_comm_enabled: Communication setting for Service Update.
        :param pulumi.Input[str] password: The username of the admin user to be exported.
        :param pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]] roles: Role of the admin. This is not required for an auditor.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "login_name", login_name)
        pulumi.set(__self__, "username", username)
        if admin_scope_entities is not None:
            pulumi.set(__self__, "admin_scope_entities", admin_scope_entities)
        if admin_scope_type is not None:
            pulumi.set(__self__, "admin_scope_type", admin_scope_type)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if is_auditor is not None:
            pulumi.set(__self__, "is_auditor", is_auditor)
        if is_exec_mobile_app_enabled is not None:
            pulumi.set(__self__, "is_exec_mobile_app_enabled", is_exec_mobile_app_enabled)
        if is_non_editable is not None:
            pulumi.set(__self__, "is_non_editable", is_non_editable)
        if is_password_expired is not None:
            pulumi.set(__self__, "is_password_expired", is_password_expired)
        if is_password_login_allowed is not None:
            pulumi.set(__self__, "is_password_login_allowed", is_password_login_allowed)
        if is_product_update_comm_enabled is not None:
            pulumi.set(__self__, "is_product_update_comm_enabled", is_product_update_comm_enabled)
        if is_security_report_comm_enabled is not None:
            pulumi.set(__self__, "is_security_report_comm_enabled", is_security_report_comm_enabled)
        if is_service_update_comm_enabled is not None:
            pulumi.set(__self__, "is_service_update_comm_enabled", is_service_update_comm_enabled)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        Admin or auditor's email address.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> pulumi.Input[str]:
        """
        The email address of the admin user to be exported.
        """
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username of the admin user to be exported.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="adminScopeEntities")
    def admin_scope_entities(self) -> Optional[pulumi.Input['AdminUsersAdminScopeEntitiesArgs']]:
        """
        Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        """
        return pulumi.get(self, "admin_scope_entities")

    @admin_scope_entities.setter
    def admin_scope_entities(self, value: Optional[pulumi.Input['AdminUsersAdminScopeEntitiesArgs']]):
        pulumi.set(self, "admin_scope_entities", value)

    @property
    @pulumi.getter(name="adminScopeType")
    def admin_scope_type(self) -> Optional[pulumi.Input[str]]:
        """
        The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        return pulumi.get(self, "admin_scope_type")

    @admin_scope_type.setter
    def admin_scope_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_scope_type", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information about the admin or auditor.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not the admin account is disabled.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="isAuditor")
    def is_auditor(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the user is an auditor. This attribute is subject to change.
        """
        return pulumi.get(self, "is_auditor")

    @is_auditor.setter
    def is_auditor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_auditor", value)

    @property
    @pulumi.getter(name="isExecMobileAppEnabled")
    def is_exec_mobile_app_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not Executive Insights App access is enabled for the admin.
        """
        return pulumi.get(self, "is_exec_mobile_app_enabled")

    @is_exec_mobile_app_enabled.setter
    def is_exec_mobile_app_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_exec_mobile_app_enabled", value)

    @property
    @pulumi.getter(name="isNonEditable")
    def is_non_editable(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not the admin can be edited or deleted.
        """
        return pulumi.get(self, "is_non_editable")

    @is_non_editable.setter
    def is_non_editable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_non_editable", value)

    @property
    @pulumi.getter(name="isPasswordExpired")
    def is_password_expired(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not an admin's password has expired.
        """
        return pulumi.get(self, "is_password_expired")

    @is_password_expired.setter
    def is_password_expired(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_password_expired", value)

    @property
    @pulumi.getter(name="isPasswordLoginAllowed")
    def is_password_login_allowed(self) -> Optional[pulumi.Input[bool]]:
        """
        The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
        """
        return pulumi.get(self, "is_password_login_allowed")

    @is_password_login_allowed.setter
    def is_password_login_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_password_login_allowed", value)

    @property
    @pulumi.getter(name="isProductUpdateCommEnabled")
    def is_product_update_comm_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Communication setting for Product Update.
        """
        return pulumi.get(self, "is_product_update_comm_enabled")

    @is_product_update_comm_enabled.setter
    def is_product_update_comm_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_product_update_comm_enabled", value)

    @property
    @pulumi.getter(name="isSecurityReportCommEnabled")
    def is_security_report_comm_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Communication for Security Report is enabled.
        """
        return pulumi.get(self, "is_security_report_comm_enabled")

    @is_security_report_comm_enabled.setter
    def is_security_report_comm_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_security_report_comm_enabled", value)

    @property
    @pulumi.getter(name="isServiceUpdateCommEnabled")
    def is_service_update_comm_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Communication setting for Service Update.
        """
        return pulumi.get(self, "is_service_update_comm_enabled")

    @is_service_update_comm_enabled.setter
    def is_service_update_comm_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_service_update_comm_enabled", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The username of the admin user to be exported.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]]]:
        """
        Role of the admin. This is not required for an auditor.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]]]):
        pulumi.set(self, "roles", value)


@pulumi.input_type
class _AdminUsersState:
    def __init__(__self__, *,
                 admin_id: Optional[pulumi.Input[int]] = None,
                 admin_scope_entities: Optional[pulumi.Input['AdminUsersAdminScopeEntitiesArgs']] = None,
                 admin_scope_type: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 is_auditor: Optional[pulumi.Input[bool]] = None,
                 is_exec_mobile_app_enabled: Optional[pulumi.Input[bool]] = None,
                 is_non_editable: Optional[pulumi.Input[bool]] = None,
                 is_password_expired: Optional[pulumi.Input[bool]] = None,
                 is_password_login_allowed: Optional[pulumi.Input[bool]] = None,
                 is_product_update_comm_enabled: Optional[pulumi.Input[bool]] = None,
                 is_security_report_comm_enabled: Optional[pulumi.Input[bool]] = None,
                 is_service_update_comm_enabled: Optional[pulumi.Input[bool]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AdminUsers resources.
        :param pulumi.Input['AdminUsersAdminScopeEntitiesArgs'] admin_scope_entities: Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        :param pulumi.Input[str] admin_scope_type: The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        :param pulumi.Input[str] comments: Additional information about the admin or auditor.
        :param pulumi.Input[bool] disabled: Indicates whether or not the admin account is disabled.
        :param pulumi.Input[str] email: Admin or auditor's email address.
        :param pulumi.Input[bool] is_auditor: Indicates whether the user is an auditor. This attribute is subject to change.
        :param pulumi.Input[bool] is_exec_mobile_app_enabled: Indicates whether or not Executive Insights App access is enabled for the admin.
        :param pulumi.Input[bool] is_non_editable: Indicates whether or not the admin can be edited or deleted.
        :param pulumi.Input[bool] is_password_expired: Indicates whether or not an admin's password has expired.
        :param pulumi.Input[bool] is_password_login_allowed: The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
        :param pulumi.Input[bool] is_product_update_comm_enabled: Communication setting for Product Update.
        :param pulumi.Input[bool] is_security_report_comm_enabled: Communication for Security Report is enabled.
        :param pulumi.Input[bool] is_service_update_comm_enabled: Communication setting for Service Update.
        :param pulumi.Input[str] login_name: The email address of the admin user to be exported.
        :param pulumi.Input[str] password: The username of the admin user to be exported.
        :param pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]] roles: Role of the admin. This is not required for an auditor.
        :param pulumi.Input[str] username: The username of the admin user to be exported.
        """
        if admin_id is not None:
            pulumi.set(__self__, "admin_id", admin_id)
        if admin_scope_entities is not None:
            pulumi.set(__self__, "admin_scope_entities", admin_scope_entities)
        if admin_scope_type is not None:
            pulumi.set(__self__, "admin_scope_type", admin_scope_type)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if is_auditor is not None:
            pulumi.set(__self__, "is_auditor", is_auditor)
        if is_exec_mobile_app_enabled is not None:
            pulumi.set(__self__, "is_exec_mobile_app_enabled", is_exec_mobile_app_enabled)
        if is_non_editable is not None:
            pulumi.set(__self__, "is_non_editable", is_non_editable)
        if is_password_expired is not None:
            pulumi.set(__self__, "is_password_expired", is_password_expired)
        if is_password_login_allowed is not None:
            pulumi.set(__self__, "is_password_login_allowed", is_password_login_allowed)
        if is_product_update_comm_enabled is not None:
            pulumi.set(__self__, "is_product_update_comm_enabled", is_product_update_comm_enabled)
        if is_security_report_comm_enabled is not None:
            pulumi.set(__self__, "is_security_report_comm_enabled", is_security_report_comm_enabled)
        if is_service_update_comm_enabled is not None:
            pulumi.set(__self__, "is_service_update_comm_enabled", is_service_update_comm_enabled)
        if login_name is not None:
            pulumi.set(__self__, "login_name", login_name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="adminId")
    def admin_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "admin_id")

    @admin_id.setter
    def admin_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "admin_id", value)

    @property
    @pulumi.getter(name="adminScopeEntities")
    def admin_scope_entities(self) -> Optional[pulumi.Input['AdminUsersAdminScopeEntitiesArgs']]:
        """
        Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        """
        return pulumi.get(self, "admin_scope_entities")

    @admin_scope_entities.setter
    def admin_scope_entities(self, value: Optional[pulumi.Input['AdminUsersAdminScopeEntitiesArgs']]):
        pulumi.set(self, "admin_scope_entities", value)

    @property
    @pulumi.getter(name="adminScopeType")
    def admin_scope_type(self) -> Optional[pulumi.Input[str]]:
        """
        The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        return pulumi.get(self, "admin_scope_type")

    @admin_scope_type.setter
    def admin_scope_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "admin_scope_type", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information about the admin or auditor.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not the admin account is disabled.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Admin or auditor's email address.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="isAuditor")
    def is_auditor(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the user is an auditor. This attribute is subject to change.
        """
        return pulumi.get(self, "is_auditor")

    @is_auditor.setter
    def is_auditor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_auditor", value)

    @property
    @pulumi.getter(name="isExecMobileAppEnabled")
    def is_exec_mobile_app_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not Executive Insights App access is enabled for the admin.
        """
        return pulumi.get(self, "is_exec_mobile_app_enabled")

    @is_exec_mobile_app_enabled.setter
    def is_exec_mobile_app_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_exec_mobile_app_enabled", value)

    @property
    @pulumi.getter(name="isNonEditable")
    def is_non_editable(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not the admin can be edited or deleted.
        """
        return pulumi.get(self, "is_non_editable")

    @is_non_editable.setter
    def is_non_editable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_non_editable", value)

    @property
    @pulumi.getter(name="isPasswordExpired")
    def is_password_expired(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether or not an admin's password has expired.
        """
        return pulumi.get(self, "is_password_expired")

    @is_password_expired.setter
    def is_password_expired(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_password_expired", value)

    @property
    @pulumi.getter(name="isPasswordLoginAllowed")
    def is_password_login_allowed(self) -> Optional[pulumi.Input[bool]]:
        """
        The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
        """
        return pulumi.get(self, "is_password_login_allowed")

    @is_password_login_allowed.setter
    def is_password_login_allowed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_password_login_allowed", value)

    @property
    @pulumi.getter(name="isProductUpdateCommEnabled")
    def is_product_update_comm_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Communication setting for Product Update.
        """
        return pulumi.get(self, "is_product_update_comm_enabled")

    @is_product_update_comm_enabled.setter
    def is_product_update_comm_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_product_update_comm_enabled", value)

    @property
    @pulumi.getter(name="isSecurityReportCommEnabled")
    def is_security_report_comm_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Communication for Security Report is enabled.
        """
        return pulumi.get(self, "is_security_report_comm_enabled")

    @is_security_report_comm_enabled.setter
    def is_security_report_comm_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_security_report_comm_enabled", value)

    @property
    @pulumi.getter(name="isServiceUpdateCommEnabled")
    def is_service_update_comm_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Communication setting for Service Update.
        """
        return pulumi.get(self, "is_service_update_comm_enabled")

    @is_service_update_comm_enabled.setter
    def is_service_update_comm_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_service_update_comm_enabled", value)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[pulumi.Input[str]]:
        """
        The email address of the admin user to be exported.
        """
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The username of the admin user to be exported.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]]]:
        """
        Role of the admin. This is not required for an auditor.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username of the admin user to be exported.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class AdminUsers(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_scope_entities: Optional[pulumi.Input[pulumi.InputType['AdminUsersAdminScopeEntitiesArgs']]] = None,
                 admin_scope_type: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 is_auditor: Optional[pulumi.Input[bool]] = None,
                 is_exec_mobile_app_enabled: Optional[pulumi.Input[bool]] = None,
                 is_non_editable: Optional[pulumi.Input[bool]] = None,
                 is_password_expired: Optional[pulumi.Input[bool]] = None,
                 is_password_login_allowed: Optional[pulumi.Input[bool]] = None,
                 is_product_update_comm_enabled: Optional[pulumi.Input[bool]] = None,
                 is_security_report_comm_enabled: Optional[pulumi.Input[bool]] = None,
                 is_service_update_comm_enabled: Optional[pulumi.Input[bool]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminUsersRoleArgs']]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The **zia_admin_users** resource allows the creation and management of ZIA admin user account created in the Zscaler Internet Access cloud or via the API.

        ## Example Usage

        ### Organization Scope

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        super_admin = zia.get_admin_roles(name="Super Admin")
        ######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########
        john_smith = zia.AdminUsers("johnSmith",
            login_name="john.smith@acme.com",
            user_name="John Smith",
            email="john.smith@acme.com",
            is_password_login_allowed=True,
            password="*********************",
            is_security_report_comm_enabled=True,
            is_service_update_comm_enabled=True,
            is_product_update_comm_enabled=True,
            comments="Administrator User",
            roles=[zia.AdminUsersRoleArgs(
                id=super_admin.id,
            )],
            admin_scope_type="ORGANIZATION")
        ```
        <!--End PulumiCodeChooser -->

        ### Department Scope

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        super_admin = zia.get_admin_roles(name="Super Admin")
        engineering = zia.get_department_management(name="Engineering")
        ######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########
        john_smith = zia.AdminUsers("johnSmith",
            login_name="john.smith@acme.com",
            user_name="John Smith",
            email="john.smith@acme.com",
            is_password_login_allowed=True,
            password="*********************",
            is_security_report_comm_enabled=True,
            is_service_update_comm_enabled=True,
            is_product_update_comm_enabled=True,
            comments="Administrator User",
            roles=[zia.AdminUsersRoleArgs(
                id=super_admin.id,
            )],
            admin_scope_type="DEPARTMENT",
            admin_scope_entities=zia.AdminUsersAdminScopeEntitiesArgs(
                ids=[
                    engineering.id,
                    data["zia_department_management"]["sales"]["id"],
                ],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Location Scope

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        super_admin = zia.get_admin_roles(name="Super Admin")
        au_sydney_branch01 = zia.get_location_management(name="AU - Sydney - Branch01")
        ######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########
        john_smith = zia.AdminUsers("johnSmith",
            login_name="john.smith@acme.com",
            user_name="John Smith",
            email="john.smith@acme.com",
            is_password_login_allowed=True,
            password="*********************",
            is_security_report_comm_enabled=True,
            is_service_update_comm_enabled=True,
            is_product_update_comm_enabled=True,
            comments="Administrator User",
            roles=[zia.AdminUsersRoleArgs(
                id=super_admin.id,
            )],
            admin_scope_type="LOCATION",
            admin_scope_entities=zia.AdminUsersAdminScopeEntitiesArgs(
                ids=[au_sydney_branch01.id],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Location Group Scope

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        super_admin = zia.get_admin_roles(name="Super Admin")
        corporate_user_traffic_group = zia.get_location_groups(name="Corporate User Traffic Group")
        ######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########
        john_smith = zia.AdminUsers("johnSmith",
            login_name="john.smith@acme.com",
            user_name="John Smith",
            email="john.smith@acme.com",
            is_password_login_allowed=True,
            password="*********************",
            is_security_report_comm_enabled=True,
            is_service_update_comm_enabled=True,
            is_product_update_comm_enabled=True,
            comments="Administrator User",
            roles=[zia.AdminUsersRoleArgs(
                id=super_admin.id,
            )],
            admin_scope_type="LOCATION_GROUP",
            admin_scope_entities=zia.AdminUsersAdminScopeEntitiesArgs(
                ids=[corporate_user_traffic_group.id],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_admin_users** can be imported by using `<ADMIN ID>` or `<LOGIN NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/adminUsers:AdminUsers example <admin_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/adminUsers:AdminUsers example <login_name>
        ```

        ⚠️ **NOTE :**:  This provider do not import the password attribute value during the importing process.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AdminUsersAdminScopeEntitiesArgs']] admin_scope_entities: Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        :param pulumi.Input[str] admin_scope_type: The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        :param pulumi.Input[str] comments: Additional information about the admin or auditor.
        :param pulumi.Input[bool] disabled: Indicates whether or not the admin account is disabled.
        :param pulumi.Input[str] email: Admin or auditor's email address.
        :param pulumi.Input[bool] is_auditor: Indicates whether the user is an auditor. This attribute is subject to change.
        :param pulumi.Input[bool] is_exec_mobile_app_enabled: Indicates whether or not Executive Insights App access is enabled for the admin.
        :param pulumi.Input[bool] is_non_editable: Indicates whether or not the admin can be edited or deleted.
        :param pulumi.Input[bool] is_password_expired: Indicates whether or not an admin's password has expired.
        :param pulumi.Input[bool] is_password_login_allowed: The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
        :param pulumi.Input[bool] is_product_update_comm_enabled: Communication setting for Product Update.
        :param pulumi.Input[bool] is_security_report_comm_enabled: Communication for Security Report is enabled.
        :param pulumi.Input[bool] is_service_update_comm_enabled: Communication setting for Service Update.
        :param pulumi.Input[str] login_name: The email address of the admin user to be exported.
        :param pulumi.Input[str] password: The username of the admin user to be exported.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminUsersRoleArgs']]]] roles: Role of the admin. This is not required for an auditor.
        :param pulumi.Input[str] username: The username of the admin user to be exported.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AdminUsersArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_admin_users** resource allows the creation and management of ZIA admin user account created in the Zscaler Internet Access cloud or via the API.

        ## Example Usage

        ### Organization Scope

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        super_admin = zia.get_admin_roles(name="Super Admin")
        ######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########
        john_smith = zia.AdminUsers("johnSmith",
            login_name="john.smith@acme.com",
            user_name="John Smith",
            email="john.smith@acme.com",
            is_password_login_allowed=True,
            password="*********************",
            is_security_report_comm_enabled=True,
            is_service_update_comm_enabled=True,
            is_product_update_comm_enabled=True,
            comments="Administrator User",
            roles=[zia.AdminUsersRoleArgs(
                id=super_admin.id,
            )],
            admin_scope_type="ORGANIZATION")
        ```
        <!--End PulumiCodeChooser -->

        ### Department Scope

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        super_admin = zia.get_admin_roles(name="Super Admin")
        engineering = zia.get_department_management(name="Engineering")
        ######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########
        john_smith = zia.AdminUsers("johnSmith",
            login_name="john.smith@acme.com",
            user_name="John Smith",
            email="john.smith@acme.com",
            is_password_login_allowed=True,
            password="*********************",
            is_security_report_comm_enabled=True,
            is_service_update_comm_enabled=True,
            is_product_update_comm_enabled=True,
            comments="Administrator User",
            roles=[zia.AdminUsersRoleArgs(
                id=super_admin.id,
            )],
            admin_scope_type="DEPARTMENT",
            admin_scope_entities=zia.AdminUsersAdminScopeEntitiesArgs(
                ids=[
                    engineering.id,
                    data["zia_department_management"]["sales"]["id"],
                ],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Location Scope

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        super_admin = zia.get_admin_roles(name="Super Admin")
        au_sydney_branch01 = zia.get_location_management(name="AU - Sydney - Branch01")
        ######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########
        john_smith = zia.AdminUsers("johnSmith",
            login_name="john.smith@acme.com",
            user_name="John Smith",
            email="john.smith@acme.com",
            is_password_login_allowed=True,
            password="*********************",
            is_security_report_comm_enabled=True,
            is_service_update_comm_enabled=True,
            is_product_update_comm_enabled=True,
            comments="Administrator User",
            roles=[zia.AdminUsersRoleArgs(
                id=super_admin.id,
            )],
            admin_scope_type="LOCATION",
            admin_scope_entities=zia.AdminUsersAdminScopeEntitiesArgs(
                ids=[au_sydney_branch01.id],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Location Group Scope

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        super_admin = zia.get_admin_roles(name="Super Admin")
        corporate_user_traffic_group = zia.get_location_groups(name="Corporate User Traffic Group")
        ######### PASSWORDS IN THIS FILE ARE FAKE AND NOT USED IN PRODUCTION SYSTEMS #########
        john_smith = zia.AdminUsers("johnSmith",
            login_name="john.smith@acme.com",
            user_name="John Smith",
            email="john.smith@acme.com",
            is_password_login_allowed=True,
            password="*********************",
            is_security_report_comm_enabled=True,
            is_service_update_comm_enabled=True,
            is_product_update_comm_enabled=True,
            comments="Administrator User",
            roles=[zia.AdminUsersRoleArgs(
                id=super_admin.id,
            )],
            admin_scope_type="LOCATION_GROUP",
            admin_scope_entities=zia.AdminUsersAdminScopeEntitiesArgs(
                ids=[corporate_user_traffic_group.id],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_admin_users** can be imported by using `<ADMIN ID>` or `<LOGIN NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/adminUsers:AdminUsers example <admin_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/adminUsers:AdminUsers example <login_name>
        ```

        ⚠️ **NOTE :**:  This provider do not import the password attribute value during the importing process.

        :param str resource_name: The name of the resource.
        :param AdminUsersArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AdminUsersArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_scope_entities: Optional[pulumi.Input[pulumi.InputType['AdminUsersAdminScopeEntitiesArgs']]] = None,
                 admin_scope_type: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 is_auditor: Optional[pulumi.Input[bool]] = None,
                 is_exec_mobile_app_enabled: Optional[pulumi.Input[bool]] = None,
                 is_non_editable: Optional[pulumi.Input[bool]] = None,
                 is_password_expired: Optional[pulumi.Input[bool]] = None,
                 is_password_login_allowed: Optional[pulumi.Input[bool]] = None,
                 is_product_update_comm_enabled: Optional[pulumi.Input[bool]] = None,
                 is_security_report_comm_enabled: Optional[pulumi.Input[bool]] = None,
                 is_service_update_comm_enabled: Optional[pulumi.Input[bool]] = None,
                 login_name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminUsersRoleArgs']]]]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AdminUsersArgs.__new__(AdminUsersArgs)

            __props__.__dict__["admin_scope_entities"] = admin_scope_entities
            __props__.__dict__["admin_scope_type"] = admin_scope_type
            __props__.__dict__["comments"] = comments
            __props__.__dict__["disabled"] = disabled
            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            __props__.__dict__["is_auditor"] = is_auditor
            __props__.__dict__["is_exec_mobile_app_enabled"] = is_exec_mobile_app_enabled
            __props__.__dict__["is_non_editable"] = is_non_editable
            __props__.__dict__["is_password_expired"] = is_password_expired
            __props__.__dict__["is_password_login_allowed"] = is_password_login_allowed
            __props__.__dict__["is_product_update_comm_enabled"] = is_product_update_comm_enabled
            __props__.__dict__["is_security_report_comm_enabled"] = is_security_report_comm_enabled
            __props__.__dict__["is_service_update_comm_enabled"] = is_service_update_comm_enabled
            if login_name is None and not opts.urn:
                raise TypeError("Missing required property 'login_name'")
            __props__.__dict__["login_name"] = login_name
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["roles"] = roles
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["admin_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(AdminUsers, __self__).__init__(
            'zia:index/adminUsers:AdminUsers',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_id: Optional[pulumi.Input[int]] = None,
            admin_scope_entities: Optional[pulumi.Input[pulumi.InputType['AdminUsersAdminScopeEntitiesArgs']]] = None,
            admin_scope_type: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            email: Optional[pulumi.Input[str]] = None,
            is_auditor: Optional[pulumi.Input[bool]] = None,
            is_exec_mobile_app_enabled: Optional[pulumi.Input[bool]] = None,
            is_non_editable: Optional[pulumi.Input[bool]] = None,
            is_password_expired: Optional[pulumi.Input[bool]] = None,
            is_password_login_allowed: Optional[pulumi.Input[bool]] = None,
            is_product_update_comm_enabled: Optional[pulumi.Input[bool]] = None,
            is_security_report_comm_enabled: Optional[pulumi.Input[bool]] = None,
            is_service_update_comm_enabled: Optional[pulumi.Input[bool]] = None,
            login_name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminUsersRoleArgs']]]]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'AdminUsers':
        """
        Get an existing AdminUsers resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['AdminUsersAdminScopeEntitiesArgs']] admin_scope_entities: Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        :param pulumi.Input[str] admin_scope_type: The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        :param pulumi.Input[str] comments: Additional information about the admin or auditor.
        :param pulumi.Input[bool] disabled: Indicates whether or not the admin account is disabled.
        :param pulumi.Input[str] email: Admin or auditor's email address.
        :param pulumi.Input[bool] is_auditor: Indicates whether the user is an auditor. This attribute is subject to change.
        :param pulumi.Input[bool] is_exec_mobile_app_enabled: Indicates whether or not Executive Insights App access is enabled for the admin.
        :param pulumi.Input[bool] is_non_editable: Indicates whether or not the admin can be edited or deleted.
        :param pulumi.Input[bool] is_password_expired: Indicates whether or not an admin's password has expired.
        :param pulumi.Input[bool] is_password_login_allowed: The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
        :param pulumi.Input[bool] is_product_update_comm_enabled: Communication setting for Product Update.
        :param pulumi.Input[bool] is_security_report_comm_enabled: Communication for Security Report is enabled.
        :param pulumi.Input[bool] is_service_update_comm_enabled: Communication setting for Service Update.
        :param pulumi.Input[str] login_name: The email address of the admin user to be exported.
        :param pulumi.Input[str] password: The username of the admin user to be exported.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AdminUsersRoleArgs']]]] roles: Role of the admin. This is not required for an auditor.
        :param pulumi.Input[str] username: The username of the admin user to be exported.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AdminUsersState.__new__(_AdminUsersState)

        __props__.__dict__["admin_id"] = admin_id
        __props__.__dict__["admin_scope_entities"] = admin_scope_entities
        __props__.__dict__["admin_scope_type"] = admin_scope_type
        __props__.__dict__["comments"] = comments
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["email"] = email
        __props__.__dict__["is_auditor"] = is_auditor
        __props__.__dict__["is_exec_mobile_app_enabled"] = is_exec_mobile_app_enabled
        __props__.__dict__["is_non_editable"] = is_non_editable
        __props__.__dict__["is_password_expired"] = is_password_expired
        __props__.__dict__["is_password_login_allowed"] = is_password_login_allowed
        __props__.__dict__["is_product_update_comm_enabled"] = is_product_update_comm_enabled
        __props__.__dict__["is_security_report_comm_enabled"] = is_security_report_comm_enabled
        __props__.__dict__["is_service_update_comm_enabled"] = is_service_update_comm_enabled
        __props__.__dict__["login_name"] = login_name
        __props__.__dict__["password"] = password
        __props__.__dict__["roles"] = roles
        __props__.__dict__["username"] = username
        return AdminUsers(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminId")
    def admin_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "admin_id")

    @property
    @pulumi.getter(name="adminScopeEntities")
    def admin_scope_entities(self) -> pulumi.Output['outputs.AdminUsersAdminScopeEntities']:
        """
        Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        """
        return pulumi.get(self, "admin_scope_entities")

    @property
    @pulumi.getter(name="adminScopeType")
    def admin_scope_type(self) -> pulumi.Output[str]:
        """
        The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change. Support values are: `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        return pulumi.get(self, "admin_scope_type")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Additional information about the admin or auditor.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether or not the admin account is disabled.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        Admin or auditor's email address.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="isAuditor")
    def is_auditor(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether the user is an auditor. This attribute is subject to change.
        """
        return pulumi.get(self, "is_auditor")

    @property
    @pulumi.getter(name="isExecMobileAppEnabled")
    def is_exec_mobile_app_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether or not Executive Insights App access is enabled for the admin.
        """
        return pulumi.get(self, "is_exec_mobile_app_enabled")

    @property
    @pulumi.getter(name="isNonEditable")
    def is_non_editable(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether or not the admin can be edited or deleted.
        """
        return pulumi.get(self, "is_non_editable")

    @property
    @pulumi.getter(name="isPasswordExpired")
    def is_password_expired(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether or not an admin's password has expired.
        """
        return pulumi.get(self, "is_password_expired")

    @property
    @pulumi.getter(name="isPasswordLoginAllowed")
    def is_password_login_allowed(self) -> pulumi.Output[Optional[bool]]:
        """
        The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
        """
        return pulumi.get(self, "is_password_login_allowed")

    @property
    @pulumi.getter(name="isProductUpdateCommEnabled")
    def is_product_update_comm_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Communication setting for Product Update.
        """
        return pulumi.get(self, "is_product_update_comm_enabled")

    @property
    @pulumi.getter(name="isSecurityReportCommEnabled")
    def is_security_report_comm_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Communication for Security Report is enabled.
        """
        return pulumi.get(self, "is_security_report_comm_enabled")

    @property
    @pulumi.getter(name="isServiceUpdateCommEnabled")
    def is_service_update_comm_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Communication setting for Service Update.
        """
        return pulumi.get(self, "is_service_update_comm_enabled")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> pulumi.Output[str]:
        """
        The email address of the admin user to be exported.
        """
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        The username of the admin user to be exported.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Optional[Sequence['outputs.AdminUsersRole']]]:
        """
        Role of the admin. This is not required for an auditor.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        The username of the admin user to be exported.
        """
        return pulumi.get(self, "username")

