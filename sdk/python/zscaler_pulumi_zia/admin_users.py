# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AdminUsersArgs', 'AdminUsers']

@pulumi.input_type
class AdminUsersArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[builtins.str],
                 login_name: pulumi.Input[builtins.str],
                 username: pulumi.Input[builtins.str],
                 admin_scope_entities: Optional[pulumi.Input['AdminUsersAdminScopeEntitiesArgs']] = None,
                 admin_scope_type: Optional[pulumi.Input[builtins.str]] = None,
                 comments: Optional[pulumi.Input[builtins.str]] = None,
                 disabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_auditor: Optional[pulumi.Input[builtins.bool]] = None,
                 is_exec_mobile_app_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_non_editable: Optional[pulumi.Input[builtins.bool]] = None,
                 is_password_expired: Optional[pulumi.Input[builtins.bool]] = None,
                 is_password_login_allowed: Optional[pulumi.Input[builtins.bool]] = None,
                 is_product_update_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_security_report_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_service_update_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]]] = None):
        """
        The set of arguments for constructing a AdminUsers resource.
        :param pulumi.Input[builtins.str] email: Admin or auditor's email address.
        :param pulumi.Input[builtins.str] username: Admin or auditor's username.
        :param pulumi.Input['AdminUsersAdminScopeEntitiesArgs'] admin_scope_entities: list of destination ip groups
        :param pulumi.Input[builtins.str] comments: Additional information about the admin or auditor.
        :param pulumi.Input[builtins.str] password: The admin's password. If admin single sign-on (SSO) is disabled, then this field is mandatory for POST requests. This
               information is not provided in a GET response.
        :param pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]] roles: Role of the admin. This is not required for an auditor.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "login_name", login_name)
        pulumi.set(__self__, "username", username)
        if admin_scope_entities is not None:
            pulumi.set(__self__, "admin_scope_entities", admin_scope_entities)
        if admin_scope_type is not None:
            pulumi.set(__self__, "admin_scope_type", admin_scope_type)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if is_auditor is not None:
            pulumi.set(__self__, "is_auditor", is_auditor)
        if is_exec_mobile_app_enabled is not None:
            pulumi.set(__self__, "is_exec_mobile_app_enabled", is_exec_mobile_app_enabled)
        if is_non_editable is not None:
            pulumi.set(__self__, "is_non_editable", is_non_editable)
        if is_password_expired is not None:
            pulumi.set(__self__, "is_password_expired", is_password_expired)
        if is_password_login_allowed is not None:
            pulumi.set(__self__, "is_password_login_allowed", is_password_login_allowed)
        if is_product_update_comm_enabled is not None:
            pulumi.set(__self__, "is_product_update_comm_enabled", is_product_update_comm_enabled)
        if is_security_report_comm_enabled is not None:
            pulumi.set(__self__, "is_security_report_comm_enabled", is_security_report_comm_enabled)
        if is_service_update_comm_enabled is not None:
            pulumi.set(__self__, "is_service_update_comm_enabled", is_service_update_comm_enabled)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[builtins.str]:
        """
        Admin or auditor's email address.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[builtins.str]:
        """
        Admin or auditor's username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="adminScopeEntities")
    def admin_scope_entities(self) -> Optional[pulumi.Input['AdminUsersAdminScopeEntitiesArgs']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "admin_scope_entities")

    @admin_scope_entities.setter
    def admin_scope_entities(self, value: Optional[pulumi.Input['AdminUsersAdminScopeEntitiesArgs']]):
        pulumi.set(self, "admin_scope_entities", value)

    @property
    @pulumi.getter(name="adminScopeType")
    def admin_scope_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "admin_scope_type")

    @admin_scope_type.setter
    def admin_scope_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "admin_scope_type", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Additional information about the admin or auditor.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="isAuditor")
    def is_auditor(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_auditor")

    @is_auditor.setter
    def is_auditor(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_auditor", value)

    @property
    @pulumi.getter(name="isExecMobileAppEnabled")
    def is_exec_mobile_app_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_exec_mobile_app_enabled")

    @is_exec_mobile_app_enabled.setter
    def is_exec_mobile_app_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_exec_mobile_app_enabled", value)

    @property
    @pulumi.getter(name="isNonEditable")
    def is_non_editable(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_non_editable")

    @is_non_editable.setter
    def is_non_editable(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_non_editable", value)

    @property
    @pulumi.getter(name="isPasswordExpired")
    def is_password_expired(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_password_expired")

    @is_password_expired.setter
    def is_password_expired(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_password_expired", value)

    @property
    @pulumi.getter(name="isPasswordLoginAllowed")
    def is_password_login_allowed(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_password_login_allowed")

    @is_password_login_allowed.setter
    def is_password_login_allowed(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_password_login_allowed", value)

    @property
    @pulumi.getter(name="isProductUpdateCommEnabled")
    def is_product_update_comm_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_product_update_comm_enabled")

    @is_product_update_comm_enabled.setter
    def is_product_update_comm_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_product_update_comm_enabled", value)

    @property
    @pulumi.getter(name="isSecurityReportCommEnabled")
    def is_security_report_comm_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_security_report_comm_enabled")

    @is_security_report_comm_enabled.setter
    def is_security_report_comm_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_security_report_comm_enabled", value)

    @property
    @pulumi.getter(name="isServiceUpdateCommEnabled")
    def is_service_update_comm_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_service_update_comm_enabled")

    @is_service_update_comm_enabled.setter
    def is_service_update_comm_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_service_update_comm_enabled", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The admin's password. If admin single sign-on (SSO) is disabled, then this field is mandatory for POST requests. This
        information is not provided in a GET response.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]]]:
        """
        Role of the admin. This is not required for an auditor.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]]]):
        pulumi.set(self, "roles", value)


@pulumi.input_type
class _AdminUsersState:
    def __init__(__self__, *,
                 admin_id: Optional[pulumi.Input[builtins.int]] = None,
                 admin_scope_entities: Optional[pulumi.Input['AdminUsersAdminScopeEntitiesArgs']] = None,
                 admin_scope_type: Optional[pulumi.Input[builtins.str]] = None,
                 comments: Optional[pulumi.Input[builtins.str]] = None,
                 disabled: Optional[pulumi.Input[builtins.bool]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 is_auditor: Optional[pulumi.Input[builtins.bool]] = None,
                 is_exec_mobile_app_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_non_editable: Optional[pulumi.Input[builtins.bool]] = None,
                 is_password_expired: Optional[pulumi.Input[builtins.bool]] = None,
                 is_password_login_allowed: Optional[pulumi.Input[builtins.bool]] = None,
                 is_product_update_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_security_report_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_service_update_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 login_name: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering AdminUsers resources.
        :param pulumi.Input['AdminUsersAdminScopeEntitiesArgs'] admin_scope_entities: list of destination ip groups
        :param pulumi.Input[builtins.str] comments: Additional information about the admin or auditor.
        :param pulumi.Input[builtins.str] email: Admin or auditor's email address.
        :param pulumi.Input[builtins.str] password: The admin's password. If admin single sign-on (SSO) is disabled, then this field is mandatory for POST requests. This
               information is not provided in a GET response.
        :param pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]] roles: Role of the admin. This is not required for an auditor.
        :param pulumi.Input[builtins.str] username: Admin or auditor's username.
        """
        if admin_id is not None:
            pulumi.set(__self__, "admin_id", admin_id)
        if admin_scope_entities is not None:
            pulumi.set(__self__, "admin_scope_entities", admin_scope_entities)
        if admin_scope_type is not None:
            pulumi.set(__self__, "admin_scope_type", admin_scope_type)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if is_auditor is not None:
            pulumi.set(__self__, "is_auditor", is_auditor)
        if is_exec_mobile_app_enabled is not None:
            pulumi.set(__self__, "is_exec_mobile_app_enabled", is_exec_mobile_app_enabled)
        if is_non_editable is not None:
            pulumi.set(__self__, "is_non_editable", is_non_editable)
        if is_password_expired is not None:
            pulumi.set(__self__, "is_password_expired", is_password_expired)
        if is_password_login_allowed is not None:
            pulumi.set(__self__, "is_password_login_allowed", is_password_login_allowed)
        if is_product_update_comm_enabled is not None:
            pulumi.set(__self__, "is_product_update_comm_enabled", is_product_update_comm_enabled)
        if is_security_report_comm_enabled is not None:
            pulumi.set(__self__, "is_security_report_comm_enabled", is_security_report_comm_enabled)
        if is_service_update_comm_enabled is not None:
            pulumi.set(__self__, "is_service_update_comm_enabled", is_service_update_comm_enabled)
        if login_name is not None:
            pulumi.set(__self__, "login_name", login_name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="adminId")
    def admin_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "admin_id")

    @admin_id.setter
    def admin_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "admin_id", value)

    @property
    @pulumi.getter(name="adminScopeEntities")
    def admin_scope_entities(self) -> Optional[pulumi.Input['AdminUsersAdminScopeEntitiesArgs']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "admin_scope_entities")

    @admin_scope_entities.setter
    def admin_scope_entities(self, value: Optional[pulumi.Input['AdminUsersAdminScopeEntitiesArgs']]):
        pulumi.set(self, "admin_scope_entities", value)

    @property
    @pulumi.getter(name="adminScopeType")
    def admin_scope_type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "admin_scope_type")

    @admin_scope_type.setter
    def admin_scope_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "admin_scope_type", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Additional information about the admin or auditor.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Admin or auditor's email address.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="isAuditor")
    def is_auditor(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_auditor")

    @is_auditor.setter
    def is_auditor(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_auditor", value)

    @property
    @pulumi.getter(name="isExecMobileAppEnabled")
    def is_exec_mobile_app_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_exec_mobile_app_enabled")

    @is_exec_mobile_app_enabled.setter
    def is_exec_mobile_app_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_exec_mobile_app_enabled", value)

    @property
    @pulumi.getter(name="isNonEditable")
    def is_non_editable(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_non_editable")

    @is_non_editable.setter
    def is_non_editable(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_non_editable", value)

    @property
    @pulumi.getter(name="isPasswordExpired")
    def is_password_expired(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_password_expired")

    @is_password_expired.setter
    def is_password_expired(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_password_expired", value)

    @property
    @pulumi.getter(name="isPasswordLoginAllowed")
    def is_password_login_allowed(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_password_login_allowed")

    @is_password_login_allowed.setter
    def is_password_login_allowed(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_password_login_allowed", value)

    @property
    @pulumi.getter(name="isProductUpdateCommEnabled")
    def is_product_update_comm_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_product_update_comm_enabled")

    @is_product_update_comm_enabled.setter
    def is_product_update_comm_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_product_update_comm_enabled", value)

    @property
    @pulumi.getter(name="isSecurityReportCommEnabled")
    def is_security_report_comm_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_security_report_comm_enabled")

    @is_security_report_comm_enabled.setter
    def is_security_report_comm_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_security_report_comm_enabled", value)

    @property
    @pulumi.getter(name="isServiceUpdateCommEnabled")
    def is_service_update_comm_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "is_service_update_comm_enabled")

    @is_service_update_comm_enabled.setter
    def is_service_update_comm_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_service_update_comm_enabled", value)

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "login_name")

    @login_name.setter
    def login_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "login_name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The admin's password. If admin single sign-on (SSO) is disabled, then this field is mandatory for POST requests. This
        information is not provided in a GET response.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]]]:
        """
        Role of the admin. This is not required for an auditor.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AdminUsersRoleArgs']]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Admin or auditor's username.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username", value)


@pulumi.type_token("zia:index/adminUsers:AdminUsers")
class AdminUsers(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_scope_entities: Optional[pulumi.Input[Union['AdminUsersAdminScopeEntitiesArgs', 'AdminUsersAdminScopeEntitiesArgsDict']]] = None,
                 admin_scope_type: Optional[pulumi.Input[builtins.str]] = None,
                 comments: Optional[pulumi.Input[builtins.str]] = None,
                 disabled: Optional[pulumi.Input[builtins.bool]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 is_auditor: Optional[pulumi.Input[builtins.bool]] = None,
                 is_exec_mobile_app_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_non_editable: Optional[pulumi.Input[builtins.bool]] = None,
                 is_password_expired: Optional[pulumi.Input[builtins.bool]] = None,
                 is_password_login_allowed: Optional[pulumi.Input[builtins.bool]] = None,
                 is_product_update_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_security_report_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_service_update_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 login_name: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AdminUsersRoleArgs', 'AdminUsersRoleArgsDict']]]]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        The **zia_admin_users** resource allows the creation and management of ZIA admin user account created in the Zscaler Internet Access cloud or via the API.

        ## Example Usage

        ### Organization Scope

        ### Department Scope

        ### Location Scope

        ### Location Group Scope

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_admin_users** can be imported by using `<ADMIN ID>` or `<LOGIN NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/adminUsers:AdminUsers example <admin_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/adminUsers:AdminUsers example <login_name>
        ```

        ⚠️ **NOTE :**:  This provider do not import the password attribute value during the importing process.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AdminUsersAdminScopeEntitiesArgs', 'AdminUsersAdminScopeEntitiesArgsDict']] admin_scope_entities: list of destination ip groups
        :param pulumi.Input[builtins.str] comments: Additional information about the admin or auditor.
        :param pulumi.Input[builtins.str] email: Admin or auditor's email address.
        :param pulumi.Input[builtins.str] password: The admin's password. If admin single sign-on (SSO) is disabled, then this field is mandatory for POST requests. This
               information is not provided in a GET response.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AdminUsersRoleArgs', 'AdminUsersRoleArgsDict']]]] roles: Role of the admin. This is not required for an auditor.
        :param pulumi.Input[builtins.str] username: Admin or auditor's username.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AdminUsersArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_admin_users** resource allows the creation and management of ZIA admin user account created in the Zscaler Internet Access cloud or via the API.

        ## Example Usage

        ### Organization Scope

        ### Department Scope

        ### Location Scope

        ### Location Group Scope

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_admin_users** can be imported by using `<ADMIN ID>` or `<LOGIN NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/adminUsers:AdminUsers example <admin_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/adminUsers:AdminUsers example <login_name>
        ```

        ⚠️ **NOTE :**:  This provider do not import the password attribute value during the importing process.

        :param str resource_name: The name of the resource.
        :param AdminUsersArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AdminUsersArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_scope_entities: Optional[pulumi.Input[Union['AdminUsersAdminScopeEntitiesArgs', 'AdminUsersAdminScopeEntitiesArgsDict']]] = None,
                 admin_scope_type: Optional[pulumi.Input[builtins.str]] = None,
                 comments: Optional[pulumi.Input[builtins.str]] = None,
                 disabled: Optional[pulumi.Input[builtins.bool]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 is_auditor: Optional[pulumi.Input[builtins.bool]] = None,
                 is_exec_mobile_app_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_non_editable: Optional[pulumi.Input[builtins.bool]] = None,
                 is_password_expired: Optional[pulumi.Input[builtins.bool]] = None,
                 is_password_login_allowed: Optional[pulumi.Input[builtins.bool]] = None,
                 is_product_update_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_security_report_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 is_service_update_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 login_name: Optional[pulumi.Input[builtins.str]] = None,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AdminUsersRoleArgs', 'AdminUsersRoleArgsDict']]]]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AdminUsersArgs.__new__(AdminUsersArgs)

            __props__.__dict__["admin_scope_entities"] = admin_scope_entities
            __props__.__dict__["admin_scope_type"] = admin_scope_type
            __props__.__dict__["comments"] = comments
            __props__.__dict__["disabled"] = disabled
            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            __props__.__dict__["is_auditor"] = is_auditor
            __props__.__dict__["is_exec_mobile_app_enabled"] = is_exec_mobile_app_enabled
            __props__.__dict__["is_non_editable"] = is_non_editable
            __props__.__dict__["is_password_expired"] = is_password_expired
            __props__.__dict__["is_password_login_allowed"] = is_password_login_allowed
            __props__.__dict__["is_product_update_comm_enabled"] = is_product_update_comm_enabled
            __props__.__dict__["is_security_report_comm_enabled"] = is_security_report_comm_enabled
            __props__.__dict__["is_service_update_comm_enabled"] = is_service_update_comm_enabled
            if login_name is None and not opts.urn:
                raise TypeError("Missing required property 'login_name'")
            __props__.__dict__["login_name"] = login_name
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["roles"] = roles
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["admin_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(AdminUsers, __self__).__init__(
            'zia:index/adminUsers:AdminUsers',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_id: Optional[pulumi.Input[builtins.int]] = None,
            admin_scope_entities: Optional[pulumi.Input[Union['AdminUsersAdminScopeEntitiesArgs', 'AdminUsersAdminScopeEntitiesArgsDict']]] = None,
            admin_scope_type: Optional[pulumi.Input[builtins.str]] = None,
            comments: Optional[pulumi.Input[builtins.str]] = None,
            disabled: Optional[pulumi.Input[builtins.bool]] = None,
            email: Optional[pulumi.Input[builtins.str]] = None,
            is_auditor: Optional[pulumi.Input[builtins.bool]] = None,
            is_exec_mobile_app_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            is_non_editable: Optional[pulumi.Input[builtins.bool]] = None,
            is_password_expired: Optional[pulumi.Input[builtins.bool]] = None,
            is_password_login_allowed: Optional[pulumi.Input[builtins.bool]] = None,
            is_product_update_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            is_security_report_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            is_service_update_comm_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            login_name: Optional[pulumi.Input[builtins.str]] = None,
            password: Optional[pulumi.Input[builtins.str]] = None,
            roles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AdminUsersRoleArgs', 'AdminUsersRoleArgsDict']]]]] = None,
            username: Optional[pulumi.Input[builtins.str]] = None) -> 'AdminUsers':
        """
        Get an existing AdminUsers resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AdminUsersAdminScopeEntitiesArgs', 'AdminUsersAdminScopeEntitiesArgsDict']] admin_scope_entities: list of destination ip groups
        :param pulumi.Input[builtins.str] comments: Additional information about the admin or auditor.
        :param pulumi.Input[builtins.str] email: Admin or auditor's email address.
        :param pulumi.Input[builtins.str] password: The admin's password. If admin single sign-on (SSO) is disabled, then this field is mandatory for POST requests. This
               information is not provided in a GET response.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AdminUsersRoleArgs', 'AdminUsersRoleArgsDict']]]] roles: Role of the admin. This is not required for an auditor.
        :param pulumi.Input[builtins.str] username: Admin or auditor's username.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AdminUsersState.__new__(_AdminUsersState)

        __props__.__dict__["admin_id"] = admin_id
        __props__.__dict__["admin_scope_entities"] = admin_scope_entities
        __props__.__dict__["admin_scope_type"] = admin_scope_type
        __props__.__dict__["comments"] = comments
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["email"] = email
        __props__.__dict__["is_auditor"] = is_auditor
        __props__.__dict__["is_exec_mobile_app_enabled"] = is_exec_mobile_app_enabled
        __props__.__dict__["is_non_editable"] = is_non_editable
        __props__.__dict__["is_password_expired"] = is_password_expired
        __props__.__dict__["is_password_login_allowed"] = is_password_login_allowed
        __props__.__dict__["is_product_update_comm_enabled"] = is_product_update_comm_enabled
        __props__.__dict__["is_security_report_comm_enabled"] = is_security_report_comm_enabled
        __props__.__dict__["is_service_update_comm_enabled"] = is_service_update_comm_enabled
        __props__.__dict__["login_name"] = login_name
        __props__.__dict__["password"] = password
        __props__.__dict__["roles"] = roles
        __props__.__dict__["username"] = username
        return AdminUsers(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminId")
    def admin_id(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "admin_id")

    @property
    @pulumi.getter(name="adminScopeEntities")
    def admin_scope_entities(self) -> pulumi.Output[Optional['outputs.AdminUsersAdminScopeEntities']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "admin_scope_entities")

    @property
    @pulumi.getter(name="adminScopeType")
    def admin_scope_type(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "admin_scope_type")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Additional information about the admin or auditor.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[builtins.str]:
        """
        Admin or auditor's email address.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="isAuditor")
    def is_auditor(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "is_auditor")

    @property
    @pulumi.getter(name="isExecMobileAppEnabled")
    def is_exec_mobile_app_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "is_exec_mobile_app_enabled")

    @property
    @pulumi.getter(name="isNonEditable")
    def is_non_editable(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "is_non_editable")

    @property
    @pulumi.getter(name="isPasswordExpired")
    def is_password_expired(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "is_password_expired")

    @property
    @pulumi.getter(name="isPasswordLoginAllowed")
    def is_password_login_allowed(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "is_password_login_allowed")

    @property
    @pulumi.getter(name="isProductUpdateCommEnabled")
    def is_product_update_comm_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "is_product_update_comm_enabled")

    @property
    @pulumi.getter(name="isSecurityReportCommEnabled")
    def is_security_report_comm_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "is_security_report_comm_enabled")

    @property
    @pulumi.getter(name="isServiceUpdateCommEnabled")
    def is_service_update_comm_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "is_service_update_comm_enabled")

    @property
    @pulumi.getter(name="loginName")
    def login_name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "login_name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The admin's password. If admin single sign-on (SSO) is disabled, then this field is mandatory for POST requests. This
        information is not provided in a GET response.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Optional[Sequence['outputs.AdminUsersRole']]]:
        """
        Role of the admin. This is not required for an auditor.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[builtins.str]:
        """
        Admin or auditor's username.
        """
        return pulumi.get(self, "username")

