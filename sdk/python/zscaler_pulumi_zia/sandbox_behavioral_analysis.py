# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SandboxBehavioralAnalysisArgs', 'SandboxBehavioralAnalysis']

@pulumi.input_type
class SandboxBehavioralAnalysisArgs:
    def __init__(__self__, *,
                 file_hashes_to_be_blockeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a SandboxBehavioralAnalysis resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_hashes_to_be_blockeds: A custom list of unique MD5 file hashes that must be blocked by Sandbox. A maximum of 10000 MD5 file hashes can be blocked.
               
               **Note 3**: The Sandbox only supports MD5 hashes. The provider will validate the MD5 format prior to submission.
        """
        if file_hashes_to_be_blockeds is not None:
            pulumi.set(__self__, "file_hashes_to_be_blockeds", file_hashes_to_be_blockeds)

    @property
    @pulumi.getter(name="fileHashesToBeBlockeds")
    def file_hashes_to_be_blockeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A custom list of unique MD5 file hashes that must be blocked by Sandbox. A maximum of 10000 MD5 file hashes can be blocked.

        **Note 3**: The Sandbox only supports MD5 hashes. The provider will validate the MD5 format prior to submission.
        """
        return pulumi.get(self, "file_hashes_to_be_blockeds")

    @file_hashes_to_be_blockeds.setter
    def file_hashes_to_be_blockeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_hashes_to_be_blockeds", value)


@pulumi.input_type
class _SandboxBehavioralAnalysisState:
    def __init__(__self__, *,
                 file_hashes_to_be_blockeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering SandboxBehavioralAnalysis resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_hashes_to_be_blockeds: A custom list of unique MD5 file hashes that must be blocked by Sandbox. A maximum of 10000 MD5 file hashes can be blocked.
               
               **Note 3**: The Sandbox only supports MD5 hashes. The provider will validate the MD5 format prior to submission.
        """
        if file_hashes_to_be_blockeds is not None:
            pulumi.set(__self__, "file_hashes_to_be_blockeds", file_hashes_to_be_blockeds)

    @property
    @pulumi.getter(name="fileHashesToBeBlockeds")
    def file_hashes_to_be_blockeds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A custom list of unique MD5 file hashes that must be blocked by Sandbox. A maximum of 10000 MD5 file hashes can be blocked.

        **Note 3**: The Sandbox only supports MD5 hashes. The provider will validate the MD5 format prior to submission.
        """
        return pulumi.get(self, "file_hashes_to_be_blockeds")

    @file_hashes_to_be_blockeds.setter
    def file_hashes_to_be_blockeds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_hashes_to_be_blockeds", value)


class SandboxBehavioralAnalysis(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 file_hashes_to_be_blockeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        The **zia_sandbox_behavioral_analysis** resource updates the custom list of MD5 file hashes that are blocked by Sandbox. This overwrites a previously generated blocklist. If you need to completely erase the blocklist, submit an empty list.

        **Note**: Only the file types that are supported by Sandbox analysis can be blocked using MD5 hashes.

        ## Example Usage

        ### Add MD5 Hashes To Sandbox

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        # Add MD5 Hashes to Sandbox
        this = zia.SandboxBehavioralAnalysis("this", file_hashes_to_be_blockeds=[
            "42914d6d213a20a2684064be5c80ffa9",
            "c0202cf6aeab8437c638533d14563d35",
        ])
        ```
        <!--End PulumiCodeChooser -->

        ### Remove All MD5 Hashes To Sandbox

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        # Remove All MD5 Hashes to Sandbox
        this = zia.SandboxBehavioralAnalysis("this", file_hashes_to_be_blockeds=[])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_sandbox_behavioral_analysis** can be imported by using `sandbox_settings` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/sandboxBehavioralAnalysis:SandboxBehavioralAnalysis example sandbox_settings
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_hashes_to_be_blockeds: A custom list of unique MD5 file hashes that must be blocked by Sandbox. A maximum of 10000 MD5 file hashes can be blocked.
               
               **Note 3**: The Sandbox only supports MD5 hashes. The provider will validate the MD5 format prior to submission.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SandboxBehavioralAnalysisArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_sandbox_behavioral_analysis** resource updates the custom list of MD5 file hashes that are blocked by Sandbox. This overwrites a previously generated blocklist. If you need to completely erase the blocklist, submit an empty list.

        **Note**: Only the file types that are supported by Sandbox analysis can be blocked using MD5 hashes.

        ## Example Usage

        ### Add MD5 Hashes To Sandbox

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        # Add MD5 Hashes to Sandbox
        this = zia.SandboxBehavioralAnalysis("this", file_hashes_to_be_blockeds=[
            "42914d6d213a20a2684064be5c80ffa9",
            "c0202cf6aeab8437c638533d14563d35",
        ])
        ```
        <!--End PulumiCodeChooser -->

        ### Remove All MD5 Hashes To Sandbox

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        # Remove All MD5 Hashes to Sandbox
        this = zia.SandboxBehavioralAnalysis("this", file_hashes_to_be_blockeds=[])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_sandbox_behavioral_analysis** can be imported by using `sandbox_settings` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/sandboxBehavioralAnalysis:SandboxBehavioralAnalysis example sandbox_settings
        ```

        :param str resource_name: The name of the resource.
        :param SandboxBehavioralAnalysisArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SandboxBehavioralAnalysisArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 file_hashes_to_be_blockeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SandboxBehavioralAnalysisArgs.__new__(SandboxBehavioralAnalysisArgs)

            __props__.__dict__["file_hashes_to_be_blockeds"] = file_hashes_to_be_blockeds
        super(SandboxBehavioralAnalysis, __self__).__init__(
            'zia:index/sandboxBehavioralAnalysis:SandboxBehavioralAnalysis',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            file_hashes_to_be_blockeds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'SandboxBehavioralAnalysis':
        """
        Get an existing SandboxBehavioralAnalysis resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_hashes_to_be_blockeds: A custom list of unique MD5 file hashes that must be blocked by Sandbox. A maximum of 10000 MD5 file hashes can be blocked.
               
               **Note 3**: The Sandbox only supports MD5 hashes. The provider will validate the MD5 format prior to submission.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SandboxBehavioralAnalysisState.__new__(_SandboxBehavioralAnalysisState)

        __props__.__dict__["file_hashes_to_be_blockeds"] = file_hashes_to_be_blockeds
        return SandboxBehavioralAnalysis(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="fileHashesToBeBlockeds")
    def file_hashes_to_be_blockeds(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A custom list of unique MD5 file hashes that must be blocked by Sandbox. A maximum of 10000 MD5 file hashes can be blocked.

        **Note 3**: The Sandbox only supports MD5 hashes. The provider will validate the MD5 format prior to submission.
        """
        return pulumi.get(self, "file_hashes_to_be_blockeds")

