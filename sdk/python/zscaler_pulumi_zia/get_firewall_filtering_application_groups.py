# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetFirewallFilteringApplicationGroupsResult',
    'AwaitableGetFirewallFilteringApplicationGroupsResult',
    'get_firewall_filtering_application_groups',
    'get_firewall_filtering_application_groups_output',
]

@pulumi.output_type
class GetFirewallFilteringApplicationGroupsResult:
    """
    A collection of values returned by getFirewallFilteringApplicationGroups.
    """
    def __init__(__self__, description=None, id=None, name=None, network_applications=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_applications and not isinstance(network_applications, list):
            raise TypeError("Expected argument 'network_applications' to be a list")
        pulumi.set(__self__, "network_applications", network_applications)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkApplications")
    def network_applications(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "network_applications")


class AwaitableGetFirewallFilteringApplicationGroupsResult(GetFirewallFilteringApplicationGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallFilteringApplicationGroupsResult(
            description=self.description,
            id=self.id,
            name=self.name,
            network_applications=self.network_applications)


def get_firewall_filtering_application_groups(id: Optional[builtins.int] = None,
                                              name: Optional[builtins.str] = None,
                                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallFilteringApplicationGroupsResult:
    """
    Use the **zia_firewall_filtering_network_application_groups** data source to get information about network application groups available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering rule.

    ## Example Usage


    :param builtins.int id: The ID of the ip source group resource.
    :param builtins.str name: The name of the ip source group to be exported.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getFirewallFilteringApplicationGroups:getFirewallFilteringApplicationGroups', __args__, opts=opts, typ=GetFirewallFilteringApplicationGroupsResult).value

    return AwaitableGetFirewallFilteringApplicationGroupsResult(
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        network_applications=pulumi.get(__ret__, 'network_applications'))
def get_firewall_filtering_application_groups_output(id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                                                     name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFirewallFilteringApplicationGroupsResult]:
    """
    Use the **zia_firewall_filtering_network_application_groups** data source to get information about network application groups available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering rule.

    ## Example Usage


    :param builtins.int id: The ID of the ip source group resource.
    :param builtins.str name: The name of the ip source group to be exported.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getFirewallFilteringApplicationGroups:getFirewallFilteringApplicationGroups', __args__, opts=opts, typ=GetFirewallFilteringApplicationGroupsResult)
    return __ret__.apply(lambda __response__: GetFirewallFilteringApplicationGroupsResult(
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        network_applications=pulumi.get(__response__, 'network_applications')))
