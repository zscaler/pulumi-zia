# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetFirewallDnsRuleResult',
    'AwaitableGetFirewallDnsRuleResult',
    'get_firewall_dns_rule',
    'get_firewall_dns_rule_output',
]

@pulumi.output_type
class GetFirewallDnsRuleResult:
    """
    A collection of values returned by getFirewallDnsRule.
    """
    def __init__(__self__, action=None, application_groups=None, applications=None, block_response_code=None, capture_pcap=None, default_rule=None, departments=None, description=None, dest_addresses=None, dest_countries=None, dest_ip_categories=None, dest_ip_groups=None, dest_ipv6_groups=None, device_groups=None, devices=None, dns_rule_request_types=None, groups=None, id=None, labels=None, last_modified_bies=None, last_modified_time=None, location_groups=None, locations=None, name=None, order=None, predefined=None, protocols=None, rank=None, redirect_ip=None, res_categories=None, source_countries=None, src_ip_groups=None, src_ips=None, src_ipv6_groups=None, state=None, time_windows=None, users=None):
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if application_groups and not isinstance(application_groups, list):
            raise TypeError("Expected argument 'application_groups' to be a list")
        pulumi.set(__self__, "application_groups", application_groups)
        if applications and not isinstance(applications, list):
            raise TypeError("Expected argument 'applications' to be a list")
        pulumi.set(__self__, "applications", applications)
        if block_response_code and not isinstance(block_response_code, str):
            raise TypeError("Expected argument 'block_response_code' to be a str")
        pulumi.set(__self__, "block_response_code", block_response_code)
        if capture_pcap and not isinstance(capture_pcap, bool):
            raise TypeError("Expected argument 'capture_pcap' to be a bool")
        pulumi.set(__self__, "capture_pcap", capture_pcap)
        if default_rule and not isinstance(default_rule, bool):
            raise TypeError("Expected argument 'default_rule' to be a bool")
        pulumi.set(__self__, "default_rule", default_rule)
        if departments and not isinstance(departments, list):
            raise TypeError("Expected argument 'departments' to be a list")
        pulumi.set(__self__, "departments", departments)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dest_addresses and not isinstance(dest_addresses, list):
            raise TypeError("Expected argument 'dest_addresses' to be a list")
        pulumi.set(__self__, "dest_addresses", dest_addresses)
        if dest_countries and not isinstance(dest_countries, list):
            raise TypeError("Expected argument 'dest_countries' to be a list")
        pulumi.set(__self__, "dest_countries", dest_countries)
        if dest_ip_categories and not isinstance(dest_ip_categories, list):
            raise TypeError("Expected argument 'dest_ip_categories' to be a list")
        pulumi.set(__self__, "dest_ip_categories", dest_ip_categories)
        if dest_ip_groups and not isinstance(dest_ip_groups, list):
            raise TypeError("Expected argument 'dest_ip_groups' to be a list")
        pulumi.set(__self__, "dest_ip_groups", dest_ip_groups)
        if dest_ipv6_groups and not isinstance(dest_ipv6_groups, list):
            raise TypeError("Expected argument 'dest_ipv6_groups' to be a list")
        pulumi.set(__self__, "dest_ipv6_groups", dest_ipv6_groups)
        if device_groups and not isinstance(device_groups, list):
            raise TypeError("Expected argument 'device_groups' to be a list")
        pulumi.set(__self__, "device_groups", device_groups)
        if devices and not isinstance(devices, list):
            raise TypeError("Expected argument 'devices' to be a list")
        pulumi.set(__self__, "devices", devices)
        if dns_rule_request_types and not isinstance(dns_rule_request_types, list):
            raise TypeError("Expected argument 'dns_rule_request_types' to be a list")
        pulumi.set(__self__, "dns_rule_request_types", dns_rule_request_types)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if last_modified_bies and not isinstance(last_modified_bies, list):
            raise TypeError("Expected argument 'last_modified_bies' to be a list")
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        if last_modified_time and not isinstance(last_modified_time, int):
            raise TypeError("Expected argument 'last_modified_time' to be a int")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if location_groups and not isinstance(location_groups, list):
            raise TypeError("Expected argument 'location_groups' to be a list")
        pulumi.set(__self__, "location_groups", location_groups)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if order and not isinstance(order, int):
            raise TypeError("Expected argument 'order' to be a int")
        pulumi.set(__self__, "order", order)
        if predefined and not isinstance(predefined, bool):
            raise TypeError("Expected argument 'predefined' to be a bool")
        pulumi.set(__self__, "predefined", predefined)
        if protocols and not isinstance(protocols, list):
            raise TypeError("Expected argument 'protocols' to be a list")
        pulumi.set(__self__, "protocols", protocols)
        if rank and not isinstance(rank, int):
            raise TypeError("Expected argument 'rank' to be a int")
        pulumi.set(__self__, "rank", rank)
        if redirect_ip and not isinstance(redirect_ip, str):
            raise TypeError("Expected argument 'redirect_ip' to be a str")
        pulumi.set(__self__, "redirect_ip", redirect_ip)
        if res_categories and not isinstance(res_categories, list):
            raise TypeError("Expected argument 'res_categories' to be a list")
        pulumi.set(__self__, "res_categories", res_categories)
        if source_countries and not isinstance(source_countries, list):
            raise TypeError("Expected argument 'source_countries' to be a list")
        pulumi.set(__self__, "source_countries", source_countries)
        if src_ip_groups and not isinstance(src_ip_groups, list):
            raise TypeError("Expected argument 'src_ip_groups' to be a list")
        pulumi.set(__self__, "src_ip_groups", src_ip_groups)
        if src_ips and not isinstance(src_ips, list):
            raise TypeError("Expected argument 'src_ips' to be a list")
        pulumi.set(__self__, "src_ips", src_ips)
        if src_ipv6_groups and not isinstance(src_ipv6_groups, list):
            raise TypeError("Expected argument 'src_ipv6_groups' to be a list")
        pulumi.set(__self__, "src_ipv6_groups", src_ipv6_groups)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if time_windows and not isinstance(time_windows, list):
            raise TypeError("Expected argument 'time_windows' to be a list")
        pulumi.set(__self__, "time_windows", time_windows)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="applicationGroups")
    def application_groups(self) -> Sequence['outputs.GetFirewallDnsRuleApplicationGroupResult']:
        return pulumi.get(self, "application_groups")

    @property
    @pulumi.getter
    def applications(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter(name="blockResponseCode")
    def block_response_code(self) -> builtins.str:
        return pulumi.get(self, "block_response_code")

    @property
    @pulumi.getter(name="capturePcap")
    def capture_pcap(self) -> builtins.bool:
        return pulumi.get(self, "capture_pcap")

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> builtins.bool:
        return pulumi.get(self, "default_rule")

    @property
    @pulumi.getter
    def departments(self) -> Sequence['outputs.GetFirewallDnsRuleDepartmentResult']:
        return pulumi.get(self, "departments")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dest_addresses")

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dest_countries")

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dest_ip_categories")

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> Sequence['outputs.GetFirewallDnsRuleDestIpGroupResult']:
        return pulumi.get(self, "dest_ip_groups")

    @property
    @pulumi.getter(name="destIpv6Groups")
    def dest_ipv6_groups(self) -> Sequence['outputs.GetFirewallDnsRuleDestIpv6GroupResult']:
        return pulumi.get(self, "dest_ipv6_groups")

    @property
    @pulumi.getter(name="deviceGroups")
    def device_groups(self) -> Sequence['outputs.GetFirewallDnsRuleDeviceGroupResult']:
        return pulumi.get(self, "device_groups")

    @property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.GetFirewallDnsRuleDeviceResult']:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="dnsRuleRequestTypes")
    def dns_rule_request_types(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dns_rule_request_types")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetFirewallDnsRuleGroupResult']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetFirewallDnsRuleLabelResult']:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetFirewallDnsRuleLastModifiedByResult']:
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> builtins.int:
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Sequence['outputs.GetFirewallDnsRuleLocationGroupResult']:
        return pulumi.get(self, "location_groups")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetFirewallDnsRuleLocationResult']:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def order(self) -> builtins.int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def predefined(self) -> builtins.bool:
        return pulumi.get(self, "predefined")

    @property
    @pulumi.getter
    def protocols(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter
    def rank(self) -> builtins.int:
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="redirectIp")
    def redirect_ip(self) -> builtins.str:
        return pulumi.get(self, "redirect_ip")

    @property
    @pulumi.getter(name="resCategories")
    def res_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "res_categories")

    @property
    @pulumi.getter(name="sourceCountries")
    def source_countries(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "source_countries")

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> Sequence['outputs.GetFirewallDnsRuleSrcIpGroupResult']:
        return pulumi.get(self, "src_ip_groups")

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "src_ips")

    @property
    @pulumi.getter(name="srcIpv6Groups")
    def src_ipv6_groups(self) -> Sequence['outputs.GetFirewallDnsRuleSrcIpv6GroupResult']:
        return pulumi.get(self, "src_ipv6_groups")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Sequence['outputs.GetFirewallDnsRuleTimeWindowResult']:
        return pulumi.get(self, "time_windows")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetFirewallDnsRuleUserResult']:
        return pulumi.get(self, "users")


class AwaitableGetFirewallDnsRuleResult(GetFirewallDnsRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFirewallDnsRuleResult(
            action=self.action,
            application_groups=self.application_groups,
            applications=self.applications,
            block_response_code=self.block_response_code,
            capture_pcap=self.capture_pcap,
            default_rule=self.default_rule,
            departments=self.departments,
            description=self.description,
            dest_addresses=self.dest_addresses,
            dest_countries=self.dest_countries,
            dest_ip_categories=self.dest_ip_categories,
            dest_ip_groups=self.dest_ip_groups,
            dest_ipv6_groups=self.dest_ipv6_groups,
            device_groups=self.device_groups,
            devices=self.devices,
            dns_rule_request_types=self.dns_rule_request_types,
            groups=self.groups,
            id=self.id,
            labels=self.labels,
            last_modified_bies=self.last_modified_bies,
            last_modified_time=self.last_modified_time,
            location_groups=self.location_groups,
            locations=self.locations,
            name=self.name,
            order=self.order,
            predefined=self.predefined,
            protocols=self.protocols,
            rank=self.rank,
            redirect_ip=self.redirect_ip,
            res_categories=self.res_categories,
            source_countries=self.source_countries,
            src_ip_groups=self.src_ip_groups,
            src_ips=self.src_ips,
            src_ipv6_groups=self.src_ipv6_groups,
            state=self.state,
            time_windows=self.time_windows,
            users=self.users)


def get_firewall_dns_rule(id: Optional[builtins.int] = None,
                          name: Optional[builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFirewallDnsRuleResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getFirewallDnsRule:getFirewallDnsRule', __args__, opts=opts, typ=GetFirewallDnsRuleResult).value

    return AwaitableGetFirewallDnsRuleResult(
        action=pulumi.get(__ret__, 'action'),
        application_groups=pulumi.get(__ret__, 'application_groups'),
        applications=pulumi.get(__ret__, 'applications'),
        block_response_code=pulumi.get(__ret__, 'block_response_code'),
        capture_pcap=pulumi.get(__ret__, 'capture_pcap'),
        default_rule=pulumi.get(__ret__, 'default_rule'),
        departments=pulumi.get(__ret__, 'departments'),
        description=pulumi.get(__ret__, 'description'),
        dest_addresses=pulumi.get(__ret__, 'dest_addresses'),
        dest_countries=pulumi.get(__ret__, 'dest_countries'),
        dest_ip_categories=pulumi.get(__ret__, 'dest_ip_categories'),
        dest_ip_groups=pulumi.get(__ret__, 'dest_ip_groups'),
        dest_ipv6_groups=pulumi.get(__ret__, 'dest_ipv6_groups'),
        device_groups=pulumi.get(__ret__, 'device_groups'),
        devices=pulumi.get(__ret__, 'devices'),
        dns_rule_request_types=pulumi.get(__ret__, 'dns_rule_request_types'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        last_modified_bies=pulumi.get(__ret__, 'last_modified_bies'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        location_groups=pulumi.get(__ret__, 'location_groups'),
        locations=pulumi.get(__ret__, 'locations'),
        name=pulumi.get(__ret__, 'name'),
        order=pulumi.get(__ret__, 'order'),
        predefined=pulumi.get(__ret__, 'predefined'),
        protocols=pulumi.get(__ret__, 'protocols'),
        rank=pulumi.get(__ret__, 'rank'),
        redirect_ip=pulumi.get(__ret__, 'redirect_ip'),
        res_categories=pulumi.get(__ret__, 'res_categories'),
        source_countries=pulumi.get(__ret__, 'source_countries'),
        src_ip_groups=pulumi.get(__ret__, 'src_ip_groups'),
        src_ips=pulumi.get(__ret__, 'src_ips'),
        src_ipv6_groups=pulumi.get(__ret__, 'src_ipv6_groups'),
        state=pulumi.get(__ret__, 'state'),
        time_windows=pulumi.get(__ret__, 'time_windows'),
        users=pulumi.get(__ret__, 'users'))
def get_firewall_dns_rule_output(id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                                 name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFirewallDnsRuleResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getFirewallDnsRule:getFirewallDnsRule', __args__, opts=opts, typ=GetFirewallDnsRuleResult)
    return __ret__.apply(lambda __response__: GetFirewallDnsRuleResult(
        action=pulumi.get(__response__, 'action'),
        application_groups=pulumi.get(__response__, 'application_groups'),
        applications=pulumi.get(__response__, 'applications'),
        block_response_code=pulumi.get(__response__, 'block_response_code'),
        capture_pcap=pulumi.get(__response__, 'capture_pcap'),
        default_rule=pulumi.get(__response__, 'default_rule'),
        departments=pulumi.get(__response__, 'departments'),
        description=pulumi.get(__response__, 'description'),
        dest_addresses=pulumi.get(__response__, 'dest_addresses'),
        dest_countries=pulumi.get(__response__, 'dest_countries'),
        dest_ip_categories=pulumi.get(__response__, 'dest_ip_categories'),
        dest_ip_groups=pulumi.get(__response__, 'dest_ip_groups'),
        dest_ipv6_groups=pulumi.get(__response__, 'dest_ipv6_groups'),
        device_groups=pulumi.get(__response__, 'device_groups'),
        devices=pulumi.get(__response__, 'devices'),
        dns_rule_request_types=pulumi.get(__response__, 'dns_rule_request_types'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        last_modified_bies=pulumi.get(__response__, 'last_modified_bies'),
        last_modified_time=pulumi.get(__response__, 'last_modified_time'),
        location_groups=pulumi.get(__response__, 'location_groups'),
        locations=pulumi.get(__response__, 'locations'),
        name=pulumi.get(__response__, 'name'),
        order=pulumi.get(__response__, 'order'),
        predefined=pulumi.get(__response__, 'predefined'),
        protocols=pulumi.get(__response__, 'protocols'),
        rank=pulumi.get(__response__, 'rank'),
        redirect_ip=pulumi.get(__response__, 'redirect_ip'),
        res_categories=pulumi.get(__response__, 'res_categories'),
        source_countries=pulumi.get(__response__, 'source_countries'),
        src_ip_groups=pulumi.get(__response__, 'src_ip_groups'),
        src_ips=pulumi.get(__response__, 'src_ips'),
        src_ipv6_groups=pulumi.get(__response__, 'src_ipv6_groups'),
        state=pulumi.get(__response__, 'state'),
        time_windows=pulumi.get(__response__, 'time_windows'),
        users=pulumi.get(__response__, 'users')))
