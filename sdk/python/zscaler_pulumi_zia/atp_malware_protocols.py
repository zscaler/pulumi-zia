# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ATPMalwareProtocolsArgs', 'ATPMalwareProtocols']

@pulumi.input_type
class ATPMalwareProtocolsArgs:
    def __init__(__self__, *,
                 inspect_ftp: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_ftp_over_http: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_http: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a ATPMalwareProtocols resource.
        :param pulumi.Input[builtins.bool] inspect_ftp: A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
        :param pulumi.Input[builtins.bool] inspect_ftp_over_http: A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
        :param pulumi.Input[builtins.bool] inspect_http: A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
               malicious content in real time
        """
        if inspect_ftp is not None:
            pulumi.set(__self__, "inspect_ftp", inspect_ftp)
        if inspect_ftp_over_http is not None:
            pulumi.set(__self__, "inspect_ftp_over_http", inspect_ftp_over_http)
        if inspect_http is not None:
            pulumi.set(__self__, "inspect_http", inspect_http)

    @property
    @pulumi.getter(name="inspectFtp")
    def inspect_ftp(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
        """
        return pulumi.get(self, "inspect_ftp")

    @inspect_ftp.setter
    def inspect_ftp(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_ftp", value)

    @property
    @pulumi.getter(name="inspectFtpOverHttp")
    def inspect_ftp_over_http(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
        """
        return pulumi.get(self, "inspect_ftp_over_http")

    @inspect_ftp_over_http.setter
    def inspect_ftp_over_http(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_ftp_over_http", value)

    @property
    @pulumi.getter(name="inspectHttp")
    def inspect_http(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
        malicious content in real time
        """
        return pulumi.get(self, "inspect_http")

    @inspect_http.setter
    def inspect_http(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_http", value)


@pulumi.input_type
class _ATPMalwareProtocolsState:
    def __init__(__self__, *,
                 inspect_ftp: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_ftp_over_http: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_http: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering ATPMalwareProtocols resources.
        :param pulumi.Input[builtins.bool] inspect_ftp: A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
        :param pulumi.Input[builtins.bool] inspect_ftp_over_http: A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
        :param pulumi.Input[builtins.bool] inspect_http: A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
               malicious content in real time
        """
        if inspect_ftp is not None:
            pulumi.set(__self__, "inspect_ftp", inspect_ftp)
        if inspect_ftp_over_http is not None:
            pulumi.set(__self__, "inspect_ftp_over_http", inspect_ftp_over_http)
        if inspect_http is not None:
            pulumi.set(__self__, "inspect_http", inspect_http)

    @property
    @pulumi.getter(name="inspectFtp")
    def inspect_ftp(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
        """
        return pulumi.get(self, "inspect_ftp")

    @inspect_ftp.setter
    def inspect_ftp(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_ftp", value)

    @property
    @pulumi.getter(name="inspectFtpOverHttp")
    def inspect_ftp_over_http(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
        """
        return pulumi.get(self, "inspect_ftp_over_http")

    @inspect_ftp_over_http.setter
    def inspect_ftp_over_http(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_ftp_over_http", value)

    @property
    @pulumi.getter(name="inspectHttp")
    def inspect_http(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
        malicious content in real time
        """
        return pulumi.get(self, "inspect_http")

    @inspect_http.setter
    def inspect_http(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_http", value)


@pulumi.type_token("zia:index/aTPMalwareProtocols:ATPMalwareProtocols")
class ATPMalwareProtocols(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 inspect_ftp: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_ftp_over_http: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_http: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        The **zia_atp_malware_protocols** resource allows you to update protocol inspection configurations of Malware Protection policy. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **atp_malware_protocols** can be imported by using `protocol` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/aTPMalwareProtocols:ATPMalwareProtocols this "protocol"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] inspect_ftp: A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
        :param pulumi.Input[builtins.bool] inspect_ftp_over_http: A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
        :param pulumi.Input[builtins.bool] inspect_http: A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
               malicious content in real time
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ATPMalwareProtocolsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_atp_malware_protocols** resource allows you to update protocol inspection configurations of Malware Protection policy. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **atp_malware_protocols** can be imported by using `protocol` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/aTPMalwareProtocols:ATPMalwareProtocols this "protocol"
        ```

        :param str resource_name: The name of the resource.
        :param ATPMalwareProtocolsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ATPMalwareProtocolsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 inspect_ftp: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_ftp_over_http: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_http: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ATPMalwareProtocolsArgs.__new__(ATPMalwareProtocolsArgs)

            __props__.__dict__["inspect_ftp"] = inspect_ftp
            __props__.__dict__["inspect_ftp_over_http"] = inspect_ftp_over_http
            __props__.__dict__["inspect_http"] = inspect_http
        super(ATPMalwareProtocols, __self__).__init__(
            'zia:index/aTPMalwareProtocols:ATPMalwareProtocols',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            inspect_ftp: Optional[pulumi.Input[builtins.bool]] = None,
            inspect_ftp_over_http: Optional[pulumi.Input[builtins.bool]] = None,
            inspect_http: Optional[pulumi.Input[builtins.bool]] = None) -> 'ATPMalwareProtocols':
        """
        Get an existing ATPMalwareProtocols resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] inspect_ftp: A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
        :param pulumi.Input[builtins.bool] inspect_ftp_over_http: A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
        :param pulumi.Input[builtins.bool] inspect_http: A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
               malicious content in real time
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ATPMalwareProtocolsState.__new__(_ATPMalwareProtocolsState)

        __props__.__dict__["inspect_ftp"] = inspect_ftp
        __props__.__dict__["inspect_ftp_over_http"] = inspect_ftp_over_http
        __props__.__dict__["inspect_http"] = inspect_http
        return ATPMalwareProtocols(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="inspectFtp")
    def inspect_ftp(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value that enables or disables scanning of FTP traffic for malicious content in real time
        """
        return pulumi.get(self, "inspect_ftp")

    @property
    @pulumi.getter(name="inspectFtpOverHttp")
    def inspect_ftp_over_http(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value that enables or disables scanning of FTP over HTTP traffic for malicious content in real time
        """
        return pulumi.get(self, "inspect_ftp_over_http")

    @property
    @pulumi.getter(name="inspectHttp")
    def inspect_http(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value that enables or disables scanning of HTTP traffic (and HTTPS traffic if SSL Inspection is enabled) for
        malicious content in real time
        """
        return pulumi.get(self, "inspect_http")

