# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAdvancedSettingsResult',
    'AwaitableGetAdvancedSettingsResult',
    'get_advanced_settings',
    'get_advanced_settings_output',
]

@pulumi.output_type
class GetAdvancedSettingsResult:
    """
    A collection of values returned by getAdvancedSettings.
    """
    def __init__(__self__, auth_bypass_apps=None, auth_bypass_url_categories=None, auth_bypass_urls=None, basic_bypass_apps=None, basic_bypass_url_categories=None, block_connect_host_sni_mismatch=None, block_domain_fronting_apps=None, block_domain_fronting_on_host_header=None, block_http_tunnel_on_non_http_ports=None, block_non_compliant_http_request_on_http_ports=None, block_non_http_on_http_port_enabled=None, cascade_url_filtering=None, digest_auth_bypass_apps=None, digest_auth_bypass_url_categories=None, digest_auth_bypass_urls=None, dns_resolution_on_transparent_proxy_apps=None, dns_resolution_on_transparent_proxy_exempt_apps=None, dns_resolution_on_transparent_proxy_exempt_url_categories=None, dns_resolution_on_transparent_proxy_exempt_urls=None, dns_resolution_on_transparent_proxy_ipv6_apps=None, dns_resolution_on_transparent_proxy_ipv6_exempt_apps=None, dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories=None, dns_resolution_on_transparent_proxy_ipv6_url_categories=None, dns_resolution_on_transparent_proxy_url_categories=None, dns_resolution_on_transparent_proxy_urls=None, domain_fronting_bypass_url_categories=None, dynamic_user_risk_enabled=None, ecs_for_all_enabled=None, enable_admin_rank_access=None, enable_dns_resolution_on_transparent_proxy=None, enable_evaluate_policy_on_global_ssl_bypass=None, enable_ipv6_dns_optimization_on_all_transparent_proxy=None, enable_ipv6_dns_resolution_on_transparent_proxy=None, enable_office365=None, enable_policy_for_unauthenticated_traffic=None, enforce_surrogate_ip_for_windows_app=None, http2_nonbrowser_traffic_enabled=None, http_range_header_remove_url_categories=None, id=None, kerberos_bypass_apps=None, kerberos_bypass_url_categories=None, kerberos_bypass_urls=None, log_internal_ip=None, prefer_sni_over_conn_host=None, prefer_sni_over_conn_host_apps=None, sipa_xff_header_enabled=None, sni_dns_optimization_bypass_url_categories=None, track_http_tunnel_on_http_ports=None, ui_session_timeout=None, zscaler_client_connector1_and_pac_road_warrior_in_firewall=None):
        if auth_bypass_apps and not isinstance(auth_bypass_apps, list):
            raise TypeError("Expected argument 'auth_bypass_apps' to be a list")
        pulumi.set(__self__, "auth_bypass_apps", auth_bypass_apps)
        if auth_bypass_url_categories and not isinstance(auth_bypass_url_categories, list):
            raise TypeError("Expected argument 'auth_bypass_url_categories' to be a list")
        pulumi.set(__self__, "auth_bypass_url_categories", auth_bypass_url_categories)
        if auth_bypass_urls and not isinstance(auth_bypass_urls, list):
            raise TypeError("Expected argument 'auth_bypass_urls' to be a list")
        pulumi.set(__self__, "auth_bypass_urls", auth_bypass_urls)
        if basic_bypass_apps and not isinstance(basic_bypass_apps, list):
            raise TypeError("Expected argument 'basic_bypass_apps' to be a list")
        pulumi.set(__self__, "basic_bypass_apps", basic_bypass_apps)
        if basic_bypass_url_categories and not isinstance(basic_bypass_url_categories, list):
            raise TypeError("Expected argument 'basic_bypass_url_categories' to be a list")
        pulumi.set(__self__, "basic_bypass_url_categories", basic_bypass_url_categories)
        if block_connect_host_sni_mismatch and not isinstance(block_connect_host_sni_mismatch, bool):
            raise TypeError("Expected argument 'block_connect_host_sni_mismatch' to be a bool")
        pulumi.set(__self__, "block_connect_host_sni_mismatch", block_connect_host_sni_mismatch)
        if block_domain_fronting_apps and not isinstance(block_domain_fronting_apps, list):
            raise TypeError("Expected argument 'block_domain_fronting_apps' to be a list")
        pulumi.set(__self__, "block_domain_fronting_apps", block_domain_fronting_apps)
        if block_domain_fronting_on_host_header and not isinstance(block_domain_fronting_on_host_header, bool):
            raise TypeError("Expected argument 'block_domain_fronting_on_host_header' to be a bool")
        pulumi.set(__self__, "block_domain_fronting_on_host_header", block_domain_fronting_on_host_header)
        if block_http_tunnel_on_non_http_ports and not isinstance(block_http_tunnel_on_non_http_ports, bool):
            raise TypeError("Expected argument 'block_http_tunnel_on_non_http_ports' to be a bool")
        pulumi.set(__self__, "block_http_tunnel_on_non_http_ports", block_http_tunnel_on_non_http_ports)
        if block_non_compliant_http_request_on_http_ports and not isinstance(block_non_compliant_http_request_on_http_ports, bool):
            raise TypeError("Expected argument 'block_non_compliant_http_request_on_http_ports' to be a bool")
        pulumi.set(__self__, "block_non_compliant_http_request_on_http_ports", block_non_compliant_http_request_on_http_ports)
        if block_non_http_on_http_port_enabled and not isinstance(block_non_http_on_http_port_enabled, bool):
            raise TypeError("Expected argument 'block_non_http_on_http_port_enabled' to be a bool")
        pulumi.set(__self__, "block_non_http_on_http_port_enabled", block_non_http_on_http_port_enabled)
        if cascade_url_filtering and not isinstance(cascade_url_filtering, bool):
            raise TypeError("Expected argument 'cascade_url_filtering' to be a bool")
        pulumi.set(__self__, "cascade_url_filtering", cascade_url_filtering)
        if digest_auth_bypass_apps and not isinstance(digest_auth_bypass_apps, list):
            raise TypeError("Expected argument 'digest_auth_bypass_apps' to be a list")
        pulumi.set(__self__, "digest_auth_bypass_apps", digest_auth_bypass_apps)
        if digest_auth_bypass_url_categories and not isinstance(digest_auth_bypass_url_categories, list):
            raise TypeError("Expected argument 'digest_auth_bypass_url_categories' to be a list")
        pulumi.set(__self__, "digest_auth_bypass_url_categories", digest_auth_bypass_url_categories)
        if digest_auth_bypass_urls and not isinstance(digest_auth_bypass_urls, list):
            raise TypeError("Expected argument 'digest_auth_bypass_urls' to be a list")
        pulumi.set(__self__, "digest_auth_bypass_urls", digest_auth_bypass_urls)
        if dns_resolution_on_transparent_proxy_apps and not isinstance(dns_resolution_on_transparent_proxy_apps, list):
            raise TypeError("Expected argument 'dns_resolution_on_transparent_proxy_apps' to be a list")
        pulumi.set(__self__, "dns_resolution_on_transparent_proxy_apps", dns_resolution_on_transparent_proxy_apps)
        if dns_resolution_on_transparent_proxy_exempt_apps and not isinstance(dns_resolution_on_transparent_proxy_exempt_apps, list):
            raise TypeError("Expected argument 'dns_resolution_on_transparent_proxy_exempt_apps' to be a list")
        pulumi.set(__self__, "dns_resolution_on_transparent_proxy_exempt_apps", dns_resolution_on_transparent_proxy_exempt_apps)
        if dns_resolution_on_transparent_proxy_exempt_url_categories and not isinstance(dns_resolution_on_transparent_proxy_exempt_url_categories, list):
            raise TypeError("Expected argument 'dns_resolution_on_transparent_proxy_exempt_url_categories' to be a list")
        pulumi.set(__self__, "dns_resolution_on_transparent_proxy_exempt_url_categories", dns_resolution_on_transparent_proxy_exempt_url_categories)
        if dns_resolution_on_transparent_proxy_exempt_urls and not isinstance(dns_resolution_on_transparent_proxy_exempt_urls, list):
            raise TypeError("Expected argument 'dns_resolution_on_transparent_proxy_exempt_urls' to be a list")
        pulumi.set(__self__, "dns_resolution_on_transparent_proxy_exempt_urls", dns_resolution_on_transparent_proxy_exempt_urls)
        if dns_resolution_on_transparent_proxy_ipv6_apps and not isinstance(dns_resolution_on_transparent_proxy_ipv6_apps, list):
            raise TypeError("Expected argument 'dns_resolution_on_transparent_proxy_ipv6_apps' to be a list")
        pulumi.set(__self__, "dns_resolution_on_transparent_proxy_ipv6_apps", dns_resolution_on_transparent_proxy_ipv6_apps)
        if dns_resolution_on_transparent_proxy_ipv6_exempt_apps and not isinstance(dns_resolution_on_transparent_proxy_ipv6_exempt_apps, list):
            raise TypeError("Expected argument 'dns_resolution_on_transparent_proxy_ipv6_exempt_apps' to be a list")
        pulumi.set(__self__, "dns_resolution_on_transparent_proxy_ipv6_exempt_apps", dns_resolution_on_transparent_proxy_ipv6_exempt_apps)
        if dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories and not isinstance(dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories, list):
            raise TypeError("Expected argument 'dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories' to be a list")
        pulumi.set(__self__, "dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories", dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories)
        if dns_resolution_on_transparent_proxy_ipv6_url_categories and not isinstance(dns_resolution_on_transparent_proxy_ipv6_url_categories, list):
            raise TypeError("Expected argument 'dns_resolution_on_transparent_proxy_ipv6_url_categories' to be a list")
        pulumi.set(__self__, "dns_resolution_on_transparent_proxy_ipv6_url_categories", dns_resolution_on_transparent_proxy_ipv6_url_categories)
        if dns_resolution_on_transparent_proxy_url_categories and not isinstance(dns_resolution_on_transparent_proxy_url_categories, list):
            raise TypeError("Expected argument 'dns_resolution_on_transparent_proxy_url_categories' to be a list")
        pulumi.set(__self__, "dns_resolution_on_transparent_proxy_url_categories", dns_resolution_on_transparent_proxy_url_categories)
        if dns_resolution_on_transparent_proxy_urls and not isinstance(dns_resolution_on_transparent_proxy_urls, list):
            raise TypeError("Expected argument 'dns_resolution_on_transparent_proxy_urls' to be a list")
        pulumi.set(__self__, "dns_resolution_on_transparent_proxy_urls", dns_resolution_on_transparent_proxy_urls)
        if domain_fronting_bypass_url_categories and not isinstance(domain_fronting_bypass_url_categories, list):
            raise TypeError("Expected argument 'domain_fronting_bypass_url_categories' to be a list")
        pulumi.set(__self__, "domain_fronting_bypass_url_categories", domain_fronting_bypass_url_categories)
        if dynamic_user_risk_enabled and not isinstance(dynamic_user_risk_enabled, bool):
            raise TypeError("Expected argument 'dynamic_user_risk_enabled' to be a bool")
        pulumi.set(__self__, "dynamic_user_risk_enabled", dynamic_user_risk_enabled)
        if ecs_for_all_enabled and not isinstance(ecs_for_all_enabled, bool):
            raise TypeError("Expected argument 'ecs_for_all_enabled' to be a bool")
        pulumi.set(__self__, "ecs_for_all_enabled", ecs_for_all_enabled)
        if enable_admin_rank_access and not isinstance(enable_admin_rank_access, bool):
            raise TypeError("Expected argument 'enable_admin_rank_access' to be a bool")
        pulumi.set(__self__, "enable_admin_rank_access", enable_admin_rank_access)
        if enable_dns_resolution_on_transparent_proxy and not isinstance(enable_dns_resolution_on_transparent_proxy, bool):
            raise TypeError("Expected argument 'enable_dns_resolution_on_transparent_proxy' to be a bool")
        pulumi.set(__self__, "enable_dns_resolution_on_transparent_proxy", enable_dns_resolution_on_transparent_proxy)
        if enable_evaluate_policy_on_global_ssl_bypass and not isinstance(enable_evaluate_policy_on_global_ssl_bypass, bool):
            raise TypeError("Expected argument 'enable_evaluate_policy_on_global_ssl_bypass' to be a bool")
        pulumi.set(__self__, "enable_evaluate_policy_on_global_ssl_bypass", enable_evaluate_policy_on_global_ssl_bypass)
        if enable_ipv6_dns_optimization_on_all_transparent_proxy and not isinstance(enable_ipv6_dns_optimization_on_all_transparent_proxy, bool):
            raise TypeError("Expected argument 'enable_ipv6_dns_optimization_on_all_transparent_proxy' to be a bool")
        pulumi.set(__self__, "enable_ipv6_dns_optimization_on_all_transparent_proxy", enable_ipv6_dns_optimization_on_all_transparent_proxy)
        if enable_ipv6_dns_resolution_on_transparent_proxy and not isinstance(enable_ipv6_dns_resolution_on_transparent_proxy, bool):
            raise TypeError("Expected argument 'enable_ipv6_dns_resolution_on_transparent_proxy' to be a bool")
        pulumi.set(__self__, "enable_ipv6_dns_resolution_on_transparent_proxy", enable_ipv6_dns_resolution_on_transparent_proxy)
        if enable_office365 and not isinstance(enable_office365, bool):
            raise TypeError("Expected argument 'enable_office365' to be a bool")
        pulumi.set(__self__, "enable_office365", enable_office365)
        if enable_policy_for_unauthenticated_traffic and not isinstance(enable_policy_for_unauthenticated_traffic, bool):
            raise TypeError("Expected argument 'enable_policy_for_unauthenticated_traffic' to be a bool")
        pulumi.set(__self__, "enable_policy_for_unauthenticated_traffic", enable_policy_for_unauthenticated_traffic)
        if enforce_surrogate_ip_for_windows_app and not isinstance(enforce_surrogate_ip_for_windows_app, bool):
            raise TypeError("Expected argument 'enforce_surrogate_ip_for_windows_app' to be a bool")
        pulumi.set(__self__, "enforce_surrogate_ip_for_windows_app", enforce_surrogate_ip_for_windows_app)
        if http2_nonbrowser_traffic_enabled and not isinstance(http2_nonbrowser_traffic_enabled, bool):
            raise TypeError("Expected argument 'http2_nonbrowser_traffic_enabled' to be a bool")
        pulumi.set(__self__, "http2_nonbrowser_traffic_enabled", http2_nonbrowser_traffic_enabled)
        if http_range_header_remove_url_categories and not isinstance(http_range_header_remove_url_categories, list):
            raise TypeError("Expected argument 'http_range_header_remove_url_categories' to be a list")
        pulumi.set(__self__, "http_range_header_remove_url_categories", http_range_header_remove_url_categories)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kerberos_bypass_apps and not isinstance(kerberos_bypass_apps, list):
            raise TypeError("Expected argument 'kerberos_bypass_apps' to be a list")
        pulumi.set(__self__, "kerberos_bypass_apps", kerberos_bypass_apps)
        if kerberos_bypass_url_categories and not isinstance(kerberos_bypass_url_categories, list):
            raise TypeError("Expected argument 'kerberos_bypass_url_categories' to be a list")
        pulumi.set(__self__, "kerberos_bypass_url_categories", kerberos_bypass_url_categories)
        if kerberos_bypass_urls and not isinstance(kerberos_bypass_urls, list):
            raise TypeError("Expected argument 'kerberos_bypass_urls' to be a list")
        pulumi.set(__self__, "kerberos_bypass_urls", kerberos_bypass_urls)
        if log_internal_ip and not isinstance(log_internal_ip, bool):
            raise TypeError("Expected argument 'log_internal_ip' to be a bool")
        pulumi.set(__self__, "log_internal_ip", log_internal_ip)
        if prefer_sni_over_conn_host and not isinstance(prefer_sni_over_conn_host, bool):
            raise TypeError("Expected argument 'prefer_sni_over_conn_host' to be a bool")
        pulumi.set(__self__, "prefer_sni_over_conn_host", prefer_sni_over_conn_host)
        if prefer_sni_over_conn_host_apps and not isinstance(prefer_sni_over_conn_host_apps, list):
            raise TypeError("Expected argument 'prefer_sni_over_conn_host_apps' to be a list")
        pulumi.set(__self__, "prefer_sni_over_conn_host_apps", prefer_sni_over_conn_host_apps)
        if sipa_xff_header_enabled and not isinstance(sipa_xff_header_enabled, bool):
            raise TypeError("Expected argument 'sipa_xff_header_enabled' to be a bool")
        pulumi.set(__self__, "sipa_xff_header_enabled", sipa_xff_header_enabled)
        if sni_dns_optimization_bypass_url_categories and not isinstance(sni_dns_optimization_bypass_url_categories, list):
            raise TypeError("Expected argument 'sni_dns_optimization_bypass_url_categories' to be a list")
        pulumi.set(__self__, "sni_dns_optimization_bypass_url_categories", sni_dns_optimization_bypass_url_categories)
        if track_http_tunnel_on_http_ports and not isinstance(track_http_tunnel_on_http_ports, bool):
            raise TypeError("Expected argument 'track_http_tunnel_on_http_ports' to be a bool")
        pulumi.set(__self__, "track_http_tunnel_on_http_ports", track_http_tunnel_on_http_ports)
        if ui_session_timeout and not isinstance(ui_session_timeout, int):
            raise TypeError("Expected argument 'ui_session_timeout' to be a int")
        pulumi.set(__self__, "ui_session_timeout", ui_session_timeout)
        if zscaler_client_connector1_and_pac_road_warrior_in_firewall and not isinstance(zscaler_client_connector1_and_pac_road_warrior_in_firewall, bool):
            raise TypeError("Expected argument 'zscaler_client_connector1_and_pac_road_warrior_in_firewall' to be a bool")
        pulumi.set(__self__, "zscaler_client_connector1_and_pac_road_warrior_in_firewall", zscaler_client_connector1_and_pac_road_warrior_in_firewall)

    @property
    @pulumi.getter(name="authBypassApps")
    def auth_bypass_apps(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "auth_bypass_apps")

    @property
    @pulumi.getter(name="authBypassUrlCategories")
    def auth_bypass_url_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "auth_bypass_url_categories")

    @property
    @pulumi.getter(name="authBypassUrls")
    def auth_bypass_urls(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "auth_bypass_urls")

    @property
    @pulumi.getter(name="basicBypassApps")
    def basic_bypass_apps(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "basic_bypass_apps")

    @property
    @pulumi.getter(name="basicBypassUrlCategories")
    def basic_bypass_url_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "basic_bypass_url_categories")

    @property
    @pulumi.getter(name="blockConnectHostSniMismatch")
    def block_connect_host_sni_mismatch(self) -> builtins.bool:
        return pulumi.get(self, "block_connect_host_sni_mismatch")

    @property
    @pulumi.getter(name="blockDomainFrontingApps")
    def block_domain_fronting_apps(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "block_domain_fronting_apps")

    @property
    @pulumi.getter(name="blockDomainFrontingOnHostHeader")
    def block_domain_fronting_on_host_header(self) -> builtins.bool:
        return pulumi.get(self, "block_domain_fronting_on_host_header")

    @property
    @pulumi.getter(name="blockHttpTunnelOnNonHttpPorts")
    def block_http_tunnel_on_non_http_ports(self) -> builtins.bool:
        return pulumi.get(self, "block_http_tunnel_on_non_http_ports")

    @property
    @pulumi.getter(name="blockNonCompliantHttpRequestOnHttpPorts")
    def block_non_compliant_http_request_on_http_ports(self) -> builtins.bool:
        return pulumi.get(self, "block_non_compliant_http_request_on_http_ports")

    @property
    @pulumi.getter(name="blockNonHttpOnHttpPortEnabled")
    def block_non_http_on_http_port_enabled(self) -> builtins.bool:
        return pulumi.get(self, "block_non_http_on_http_port_enabled")

    @property
    @pulumi.getter(name="cascadeUrlFiltering")
    def cascade_url_filtering(self) -> builtins.bool:
        return pulumi.get(self, "cascade_url_filtering")

    @property
    @pulumi.getter(name="digestAuthBypassApps")
    def digest_auth_bypass_apps(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "digest_auth_bypass_apps")

    @property
    @pulumi.getter(name="digestAuthBypassUrlCategories")
    def digest_auth_bypass_url_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "digest_auth_bypass_url_categories")

    @property
    @pulumi.getter(name="digestAuthBypassUrls")
    def digest_auth_bypass_urls(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "digest_auth_bypass_urls")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyApps")
    def dns_resolution_on_transparent_proxy_apps(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_apps")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyExemptApps")
    def dns_resolution_on_transparent_proxy_exempt_apps(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_exempt_apps")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyExemptUrlCategories")
    def dns_resolution_on_transparent_proxy_exempt_url_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_exempt_url_categories")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyExemptUrls")
    def dns_resolution_on_transparent_proxy_exempt_urls(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_exempt_urls")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6Apps")
    def dns_resolution_on_transparent_proxy_ipv6_apps(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_apps")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6ExemptApps")
    def dns_resolution_on_transparent_proxy_ipv6_exempt_apps(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_exempt_apps")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6ExemptUrlCategories")
    def dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyIpv6UrlCategories")
    def dns_resolution_on_transparent_proxy_ipv6_url_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_ipv6_url_categories")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyUrlCategories")
    def dns_resolution_on_transparent_proxy_url_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_url_categories")

    @property
    @pulumi.getter(name="dnsResolutionOnTransparentProxyUrls")
    def dns_resolution_on_transparent_proxy_urls(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "dns_resolution_on_transparent_proxy_urls")

    @property
    @pulumi.getter(name="domainFrontingBypassUrlCategories")
    def domain_fronting_bypass_url_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "domain_fronting_bypass_url_categories")

    @property
    @pulumi.getter(name="dynamicUserRiskEnabled")
    def dynamic_user_risk_enabled(self) -> builtins.bool:
        return pulumi.get(self, "dynamic_user_risk_enabled")

    @property
    @pulumi.getter(name="ecsForAllEnabled")
    def ecs_for_all_enabled(self) -> builtins.bool:
        return pulumi.get(self, "ecs_for_all_enabled")

    @property
    @pulumi.getter(name="enableAdminRankAccess")
    def enable_admin_rank_access(self) -> builtins.bool:
        return pulumi.get(self, "enable_admin_rank_access")

    @property
    @pulumi.getter(name="enableDnsResolutionOnTransparentProxy")
    def enable_dns_resolution_on_transparent_proxy(self) -> builtins.bool:
        return pulumi.get(self, "enable_dns_resolution_on_transparent_proxy")

    @property
    @pulumi.getter(name="enableEvaluatePolicyOnGlobalSslBypass")
    def enable_evaluate_policy_on_global_ssl_bypass(self) -> builtins.bool:
        return pulumi.get(self, "enable_evaluate_policy_on_global_ssl_bypass")

    @property
    @pulumi.getter(name="enableIpv6DnsOptimizationOnAllTransparentProxy")
    def enable_ipv6_dns_optimization_on_all_transparent_proxy(self) -> builtins.bool:
        return pulumi.get(self, "enable_ipv6_dns_optimization_on_all_transparent_proxy")

    @property
    @pulumi.getter(name="enableIpv6DnsResolutionOnTransparentProxy")
    def enable_ipv6_dns_resolution_on_transparent_proxy(self) -> builtins.bool:
        return pulumi.get(self, "enable_ipv6_dns_resolution_on_transparent_proxy")

    @property
    @pulumi.getter(name="enableOffice365")
    def enable_office365(self) -> builtins.bool:
        return pulumi.get(self, "enable_office365")

    @property
    @pulumi.getter(name="enablePolicyForUnauthenticatedTraffic")
    def enable_policy_for_unauthenticated_traffic(self) -> builtins.bool:
        return pulumi.get(self, "enable_policy_for_unauthenticated_traffic")

    @property
    @pulumi.getter(name="enforceSurrogateIpForWindowsApp")
    def enforce_surrogate_ip_for_windows_app(self) -> builtins.bool:
        return pulumi.get(self, "enforce_surrogate_ip_for_windows_app")

    @property
    @pulumi.getter(name="http2NonbrowserTrafficEnabled")
    def http2_nonbrowser_traffic_enabled(self) -> builtins.bool:
        return pulumi.get(self, "http2_nonbrowser_traffic_enabled")

    @property
    @pulumi.getter(name="httpRangeHeaderRemoveUrlCategories")
    def http_range_header_remove_url_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "http_range_header_remove_url_categories")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kerberosBypassApps")
    def kerberos_bypass_apps(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "kerberos_bypass_apps")

    @property
    @pulumi.getter(name="kerberosBypassUrlCategories")
    def kerberos_bypass_url_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "kerberos_bypass_url_categories")

    @property
    @pulumi.getter(name="kerberosBypassUrls")
    def kerberos_bypass_urls(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "kerberos_bypass_urls")

    @property
    @pulumi.getter(name="logInternalIp")
    def log_internal_ip(self) -> builtins.bool:
        return pulumi.get(self, "log_internal_ip")

    @property
    @pulumi.getter(name="preferSniOverConnHost")
    def prefer_sni_over_conn_host(self) -> builtins.bool:
        return pulumi.get(self, "prefer_sni_over_conn_host")

    @property
    @pulumi.getter(name="preferSniOverConnHostApps")
    def prefer_sni_over_conn_host_apps(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "prefer_sni_over_conn_host_apps")

    @property
    @pulumi.getter(name="sipaXffHeaderEnabled")
    def sipa_xff_header_enabled(self) -> builtins.bool:
        return pulumi.get(self, "sipa_xff_header_enabled")

    @property
    @pulumi.getter(name="sniDnsOptimizationBypassUrlCategories")
    def sni_dns_optimization_bypass_url_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "sni_dns_optimization_bypass_url_categories")

    @property
    @pulumi.getter(name="trackHttpTunnelOnHttpPorts")
    def track_http_tunnel_on_http_ports(self) -> builtins.bool:
        return pulumi.get(self, "track_http_tunnel_on_http_ports")

    @property
    @pulumi.getter(name="uiSessionTimeout")
    def ui_session_timeout(self) -> builtins.int:
        return pulumi.get(self, "ui_session_timeout")

    @property
    @pulumi.getter(name="zscalerClientConnector1AndPacRoadWarriorInFirewall")
    def zscaler_client_connector1_and_pac_road_warrior_in_firewall(self) -> builtins.bool:
        return pulumi.get(self, "zscaler_client_connector1_and_pac_road_warrior_in_firewall")


class AwaitableGetAdvancedSettingsResult(GetAdvancedSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAdvancedSettingsResult(
            auth_bypass_apps=self.auth_bypass_apps,
            auth_bypass_url_categories=self.auth_bypass_url_categories,
            auth_bypass_urls=self.auth_bypass_urls,
            basic_bypass_apps=self.basic_bypass_apps,
            basic_bypass_url_categories=self.basic_bypass_url_categories,
            block_connect_host_sni_mismatch=self.block_connect_host_sni_mismatch,
            block_domain_fronting_apps=self.block_domain_fronting_apps,
            block_domain_fronting_on_host_header=self.block_domain_fronting_on_host_header,
            block_http_tunnel_on_non_http_ports=self.block_http_tunnel_on_non_http_ports,
            block_non_compliant_http_request_on_http_ports=self.block_non_compliant_http_request_on_http_ports,
            block_non_http_on_http_port_enabled=self.block_non_http_on_http_port_enabled,
            cascade_url_filtering=self.cascade_url_filtering,
            digest_auth_bypass_apps=self.digest_auth_bypass_apps,
            digest_auth_bypass_url_categories=self.digest_auth_bypass_url_categories,
            digest_auth_bypass_urls=self.digest_auth_bypass_urls,
            dns_resolution_on_transparent_proxy_apps=self.dns_resolution_on_transparent_proxy_apps,
            dns_resolution_on_transparent_proxy_exempt_apps=self.dns_resolution_on_transparent_proxy_exempt_apps,
            dns_resolution_on_transparent_proxy_exempt_url_categories=self.dns_resolution_on_transparent_proxy_exempt_url_categories,
            dns_resolution_on_transparent_proxy_exempt_urls=self.dns_resolution_on_transparent_proxy_exempt_urls,
            dns_resolution_on_transparent_proxy_ipv6_apps=self.dns_resolution_on_transparent_proxy_ipv6_apps,
            dns_resolution_on_transparent_proxy_ipv6_exempt_apps=self.dns_resolution_on_transparent_proxy_ipv6_exempt_apps,
            dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories=self.dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories,
            dns_resolution_on_transparent_proxy_ipv6_url_categories=self.dns_resolution_on_transparent_proxy_ipv6_url_categories,
            dns_resolution_on_transparent_proxy_url_categories=self.dns_resolution_on_transparent_proxy_url_categories,
            dns_resolution_on_transparent_proxy_urls=self.dns_resolution_on_transparent_proxy_urls,
            domain_fronting_bypass_url_categories=self.domain_fronting_bypass_url_categories,
            dynamic_user_risk_enabled=self.dynamic_user_risk_enabled,
            ecs_for_all_enabled=self.ecs_for_all_enabled,
            enable_admin_rank_access=self.enable_admin_rank_access,
            enable_dns_resolution_on_transparent_proxy=self.enable_dns_resolution_on_transparent_proxy,
            enable_evaluate_policy_on_global_ssl_bypass=self.enable_evaluate_policy_on_global_ssl_bypass,
            enable_ipv6_dns_optimization_on_all_transparent_proxy=self.enable_ipv6_dns_optimization_on_all_transparent_proxy,
            enable_ipv6_dns_resolution_on_transparent_proxy=self.enable_ipv6_dns_resolution_on_transparent_proxy,
            enable_office365=self.enable_office365,
            enable_policy_for_unauthenticated_traffic=self.enable_policy_for_unauthenticated_traffic,
            enforce_surrogate_ip_for_windows_app=self.enforce_surrogate_ip_for_windows_app,
            http2_nonbrowser_traffic_enabled=self.http2_nonbrowser_traffic_enabled,
            http_range_header_remove_url_categories=self.http_range_header_remove_url_categories,
            id=self.id,
            kerberos_bypass_apps=self.kerberos_bypass_apps,
            kerberos_bypass_url_categories=self.kerberos_bypass_url_categories,
            kerberos_bypass_urls=self.kerberos_bypass_urls,
            log_internal_ip=self.log_internal_ip,
            prefer_sni_over_conn_host=self.prefer_sni_over_conn_host,
            prefer_sni_over_conn_host_apps=self.prefer_sni_over_conn_host_apps,
            sipa_xff_header_enabled=self.sipa_xff_header_enabled,
            sni_dns_optimization_bypass_url_categories=self.sni_dns_optimization_bypass_url_categories,
            track_http_tunnel_on_http_ports=self.track_http_tunnel_on_http_ports,
            ui_session_timeout=self.ui_session_timeout,
            zscaler_client_connector1_and_pac_road_warrior_in_firewall=self.zscaler_client_connector1_and_pac_road_warrior_in_firewall)


def get_advanced_settings(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAdvancedSettingsResult:
    """
    The **zia_advanced_settings** Retrieves information about the advanced settings configured in the ZIA Admin Portal. To learn more see [Configuring Advanced Settings](https://help.zscaler.com/zia/configuring-advanced-settings)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getAdvancedSettings:getAdvancedSettings', __args__, opts=opts, typ=GetAdvancedSettingsResult).value

    return AwaitableGetAdvancedSettingsResult(
        auth_bypass_apps=pulumi.get(__ret__, 'auth_bypass_apps'),
        auth_bypass_url_categories=pulumi.get(__ret__, 'auth_bypass_url_categories'),
        auth_bypass_urls=pulumi.get(__ret__, 'auth_bypass_urls'),
        basic_bypass_apps=pulumi.get(__ret__, 'basic_bypass_apps'),
        basic_bypass_url_categories=pulumi.get(__ret__, 'basic_bypass_url_categories'),
        block_connect_host_sni_mismatch=pulumi.get(__ret__, 'block_connect_host_sni_mismatch'),
        block_domain_fronting_apps=pulumi.get(__ret__, 'block_domain_fronting_apps'),
        block_domain_fronting_on_host_header=pulumi.get(__ret__, 'block_domain_fronting_on_host_header'),
        block_http_tunnel_on_non_http_ports=pulumi.get(__ret__, 'block_http_tunnel_on_non_http_ports'),
        block_non_compliant_http_request_on_http_ports=pulumi.get(__ret__, 'block_non_compliant_http_request_on_http_ports'),
        block_non_http_on_http_port_enabled=pulumi.get(__ret__, 'block_non_http_on_http_port_enabled'),
        cascade_url_filtering=pulumi.get(__ret__, 'cascade_url_filtering'),
        digest_auth_bypass_apps=pulumi.get(__ret__, 'digest_auth_bypass_apps'),
        digest_auth_bypass_url_categories=pulumi.get(__ret__, 'digest_auth_bypass_url_categories'),
        digest_auth_bypass_urls=pulumi.get(__ret__, 'digest_auth_bypass_urls'),
        dns_resolution_on_transparent_proxy_apps=pulumi.get(__ret__, 'dns_resolution_on_transparent_proxy_apps'),
        dns_resolution_on_transparent_proxy_exempt_apps=pulumi.get(__ret__, 'dns_resolution_on_transparent_proxy_exempt_apps'),
        dns_resolution_on_transparent_proxy_exempt_url_categories=pulumi.get(__ret__, 'dns_resolution_on_transparent_proxy_exempt_url_categories'),
        dns_resolution_on_transparent_proxy_exempt_urls=pulumi.get(__ret__, 'dns_resolution_on_transparent_proxy_exempt_urls'),
        dns_resolution_on_transparent_proxy_ipv6_apps=pulumi.get(__ret__, 'dns_resolution_on_transparent_proxy_ipv6_apps'),
        dns_resolution_on_transparent_proxy_ipv6_exempt_apps=pulumi.get(__ret__, 'dns_resolution_on_transparent_proxy_ipv6_exempt_apps'),
        dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories=pulumi.get(__ret__, 'dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories'),
        dns_resolution_on_transparent_proxy_ipv6_url_categories=pulumi.get(__ret__, 'dns_resolution_on_transparent_proxy_ipv6_url_categories'),
        dns_resolution_on_transparent_proxy_url_categories=pulumi.get(__ret__, 'dns_resolution_on_transparent_proxy_url_categories'),
        dns_resolution_on_transparent_proxy_urls=pulumi.get(__ret__, 'dns_resolution_on_transparent_proxy_urls'),
        domain_fronting_bypass_url_categories=pulumi.get(__ret__, 'domain_fronting_bypass_url_categories'),
        dynamic_user_risk_enabled=pulumi.get(__ret__, 'dynamic_user_risk_enabled'),
        ecs_for_all_enabled=pulumi.get(__ret__, 'ecs_for_all_enabled'),
        enable_admin_rank_access=pulumi.get(__ret__, 'enable_admin_rank_access'),
        enable_dns_resolution_on_transparent_proxy=pulumi.get(__ret__, 'enable_dns_resolution_on_transparent_proxy'),
        enable_evaluate_policy_on_global_ssl_bypass=pulumi.get(__ret__, 'enable_evaluate_policy_on_global_ssl_bypass'),
        enable_ipv6_dns_optimization_on_all_transparent_proxy=pulumi.get(__ret__, 'enable_ipv6_dns_optimization_on_all_transparent_proxy'),
        enable_ipv6_dns_resolution_on_transparent_proxy=pulumi.get(__ret__, 'enable_ipv6_dns_resolution_on_transparent_proxy'),
        enable_office365=pulumi.get(__ret__, 'enable_office365'),
        enable_policy_for_unauthenticated_traffic=pulumi.get(__ret__, 'enable_policy_for_unauthenticated_traffic'),
        enforce_surrogate_ip_for_windows_app=pulumi.get(__ret__, 'enforce_surrogate_ip_for_windows_app'),
        http2_nonbrowser_traffic_enabled=pulumi.get(__ret__, 'http2_nonbrowser_traffic_enabled'),
        http_range_header_remove_url_categories=pulumi.get(__ret__, 'http_range_header_remove_url_categories'),
        id=pulumi.get(__ret__, 'id'),
        kerberos_bypass_apps=pulumi.get(__ret__, 'kerberos_bypass_apps'),
        kerberos_bypass_url_categories=pulumi.get(__ret__, 'kerberos_bypass_url_categories'),
        kerberos_bypass_urls=pulumi.get(__ret__, 'kerberos_bypass_urls'),
        log_internal_ip=pulumi.get(__ret__, 'log_internal_ip'),
        prefer_sni_over_conn_host=pulumi.get(__ret__, 'prefer_sni_over_conn_host'),
        prefer_sni_over_conn_host_apps=pulumi.get(__ret__, 'prefer_sni_over_conn_host_apps'),
        sipa_xff_header_enabled=pulumi.get(__ret__, 'sipa_xff_header_enabled'),
        sni_dns_optimization_bypass_url_categories=pulumi.get(__ret__, 'sni_dns_optimization_bypass_url_categories'),
        track_http_tunnel_on_http_ports=pulumi.get(__ret__, 'track_http_tunnel_on_http_ports'),
        ui_session_timeout=pulumi.get(__ret__, 'ui_session_timeout'),
        zscaler_client_connector1_and_pac_road_warrior_in_firewall=pulumi.get(__ret__, 'zscaler_client_connector1_and_pac_road_warrior_in_firewall'))
def get_advanced_settings_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAdvancedSettingsResult]:
    """
    The **zia_advanced_settings** Retrieves information about the advanced settings configured in the ZIA Admin Portal. To learn more see [Configuring Advanced Settings](https://help.zscaler.com/zia/configuring-advanced-settings)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getAdvancedSettings:getAdvancedSettings', __args__, opts=opts, typ=GetAdvancedSettingsResult)
    return __ret__.apply(lambda __response__: GetAdvancedSettingsResult(
        auth_bypass_apps=pulumi.get(__response__, 'auth_bypass_apps'),
        auth_bypass_url_categories=pulumi.get(__response__, 'auth_bypass_url_categories'),
        auth_bypass_urls=pulumi.get(__response__, 'auth_bypass_urls'),
        basic_bypass_apps=pulumi.get(__response__, 'basic_bypass_apps'),
        basic_bypass_url_categories=pulumi.get(__response__, 'basic_bypass_url_categories'),
        block_connect_host_sni_mismatch=pulumi.get(__response__, 'block_connect_host_sni_mismatch'),
        block_domain_fronting_apps=pulumi.get(__response__, 'block_domain_fronting_apps'),
        block_domain_fronting_on_host_header=pulumi.get(__response__, 'block_domain_fronting_on_host_header'),
        block_http_tunnel_on_non_http_ports=pulumi.get(__response__, 'block_http_tunnel_on_non_http_ports'),
        block_non_compliant_http_request_on_http_ports=pulumi.get(__response__, 'block_non_compliant_http_request_on_http_ports'),
        block_non_http_on_http_port_enabled=pulumi.get(__response__, 'block_non_http_on_http_port_enabled'),
        cascade_url_filtering=pulumi.get(__response__, 'cascade_url_filtering'),
        digest_auth_bypass_apps=pulumi.get(__response__, 'digest_auth_bypass_apps'),
        digest_auth_bypass_url_categories=pulumi.get(__response__, 'digest_auth_bypass_url_categories'),
        digest_auth_bypass_urls=pulumi.get(__response__, 'digest_auth_bypass_urls'),
        dns_resolution_on_transparent_proxy_apps=pulumi.get(__response__, 'dns_resolution_on_transparent_proxy_apps'),
        dns_resolution_on_transparent_proxy_exempt_apps=pulumi.get(__response__, 'dns_resolution_on_transparent_proxy_exempt_apps'),
        dns_resolution_on_transparent_proxy_exempt_url_categories=pulumi.get(__response__, 'dns_resolution_on_transparent_proxy_exempt_url_categories'),
        dns_resolution_on_transparent_proxy_exempt_urls=pulumi.get(__response__, 'dns_resolution_on_transparent_proxy_exempt_urls'),
        dns_resolution_on_transparent_proxy_ipv6_apps=pulumi.get(__response__, 'dns_resolution_on_transparent_proxy_ipv6_apps'),
        dns_resolution_on_transparent_proxy_ipv6_exempt_apps=pulumi.get(__response__, 'dns_resolution_on_transparent_proxy_ipv6_exempt_apps'),
        dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories=pulumi.get(__response__, 'dns_resolution_on_transparent_proxy_ipv6_exempt_url_categories'),
        dns_resolution_on_transparent_proxy_ipv6_url_categories=pulumi.get(__response__, 'dns_resolution_on_transparent_proxy_ipv6_url_categories'),
        dns_resolution_on_transparent_proxy_url_categories=pulumi.get(__response__, 'dns_resolution_on_transparent_proxy_url_categories'),
        dns_resolution_on_transparent_proxy_urls=pulumi.get(__response__, 'dns_resolution_on_transparent_proxy_urls'),
        domain_fronting_bypass_url_categories=pulumi.get(__response__, 'domain_fronting_bypass_url_categories'),
        dynamic_user_risk_enabled=pulumi.get(__response__, 'dynamic_user_risk_enabled'),
        ecs_for_all_enabled=pulumi.get(__response__, 'ecs_for_all_enabled'),
        enable_admin_rank_access=pulumi.get(__response__, 'enable_admin_rank_access'),
        enable_dns_resolution_on_transparent_proxy=pulumi.get(__response__, 'enable_dns_resolution_on_transparent_proxy'),
        enable_evaluate_policy_on_global_ssl_bypass=pulumi.get(__response__, 'enable_evaluate_policy_on_global_ssl_bypass'),
        enable_ipv6_dns_optimization_on_all_transparent_proxy=pulumi.get(__response__, 'enable_ipv6_dns_optimization_on_all_transparent_proxy'),
        enable_ipv6_dns_resolution_on_transparent_proxy=pulumi.get(__response__, 'enable_ipv6_dns_resolution_on_transparent_proxy'),
        enable_office365=pulumi.get(__response__, 'enable_office365'),
        enable_policy_for_unauthenticated_traffic=pulumi.get(__response__, 'enable_policy_for_unauthenticated_traffic'),
        enforce_surrogate_ip_for_windows_app=pulumi.get(__response__, 'enforce_surrogate_ip_for_windows_app'),
        http2_nonbrowser_traffic_enabled=pulumi.get(__response__, 'http2_nonbrowser_traffic_enabled'),
        http_range_header_remove_url_categories=pulumi.get(__response__, 'http_range_header_remove_url_categories'),
        id=pulumi.get(__response__, 'id'),
        kerberos_bypass_apps=pulumi.get(__response__, 'kerberos_bypass_apps'),
        kerberos_bypass_url_categories=pulumi.get(__response__, 'kerberos_bypass_url_categories'),
        kerberos_bypass_urls=pulumi.get(__response__, 'kerberos_bypass_urls'),
        log_internal_ip=pulumi.get(__response__, 'log_internal_ip'),
        prefer_sni_over_conn_host=pulumi.get(__response__, 'prefer_sni_over_conn_host'),
        prefer_sni_over_conn_host_apps=pulumi.get(__response__, 'prefer_sni_over_conn_host_apps'),
        sipa_xff_header_enabled=pulumi.get(__response__, 'sipa_xff_header_enabled'),
        sni_dns_optimization_bypass_url_categories=pulumi.get(__response__, 'sni_dns_optimization_bypass_url_categories'),
        track_http_tunnel_on_http_ports=pulumi.get(__response__, 'track_http_tunnel_on_http_ports'),
        ui_session_timeout=pulumi.get(__response__, 'ui_session_timeout'),
        zscaler_client_connector1_and_pac_road_warrior_in_firewall=pulumi.get(__response__, 'zscaler_client_connector1_and_pac_road_warrior_in_firewall')))
