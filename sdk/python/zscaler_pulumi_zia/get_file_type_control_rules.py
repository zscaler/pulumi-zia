# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetFileTypeControlRulesResult',
    'AwaitableGetFileTypeControlRulesResult',
    'get_file_type_control_rules',
    'get_file_type_control_rules_output',
]

@pulumi.output_type
class GetFileTypeControlRulesResult:
    """
    A collection of values returned by getFileTypeControlRules.
    """
    def __init__(__self__, access_control=None, active_content=None, capture_pcap=None, cloud_applications=None, departments=None, description=None, device_groups=None, device_trust_levels=None, devices=None, file_types=None, filtering_action=None, groups=None, id=None, labels=None, last_modified_bies=None, last_modified_time=None, location_groups=None, locations=None, max_size=None, min_size=None, name=None, operation=None, order=None, protocols=None, rank=None, size_quota=None, state=None, time_quota=None, time_windows=None, unscannable=None, url_categories=None, users=None, zpa_app_segments=None):
        if access_control and not isinstance(access_control, str):
            raise TypeError("Expected argument 'access_control' to be a str")
        pulumi.set(__self__, "access_control", access_control)
        if active_content and not isinstance(active_content, bool):
            raise TypeError("Expected argument 'active_content' to be a bool")
        pulumi.set(__self__, "active_content", active_content)
        if capture_pcap and not isinstance(capture_pcap, bool):
            raise TypeError("Expected argument 'capture_pcap' to be a bool")
        pulumi.set(__self__, "capture_pcap", capture_pcap)
        if cloud_applications and not isinstance(cloud_applications, list):
            raise TypeError("Expected argument 'cloud_applications' to be a list")
        pulumi.set(__self__, "cloud_applications", cloud_applications)
        if departments and not isinstance(departments, list):
            raise TypeError("Expected argument 'departments' to be a list")
        pulumi.set(__self__, "departments", departments)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device_groups and not isinstance(device_groups, list):
            raise TypeError("Expected argument 'device_groups' to be a list")
        pulumi.set(__self__, "device_groups", device_groups)
        if device_trust_levels and not isinstance(device_trust_levels, list):
            raise TypeError("Expected argument 'device_trust_levels' to be a list")
        pulumi.set(__self__, "device_trust_levels", device_trust_levels)
        if devices and not isinstance(devices, list):
            raise TypeError("Expected argument 'devices' to be a list")
        pulumi.set(__self__, "devices", devices)
        if file_types and not isinstance(file_types, list):
            raise TypeError("Expected argument 'file_types' to be a list")
        pulumi.set(__self__, "file_types", file_types)
        if filtering_action and not isinstance(filtering_action, str):
            raise TypeError("Expected argument 'filtering_action' to be a str")
        pulumi.set(__self__, "filtering_action", filtering_action)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if last_modified_bies and not isinstance(last_modified_bies, list):
            raise TypeError("Expected argument 'last_modified_bies' to be a list")
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        if last_modified_time and not isinstance(last_modified_time, int):
            raise TypeError("Expected argument 'last_modified_time' to be a int")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if location_groups and not isinstance(location_groups, list):
            raise TypeError("Expected argument 'location_groups' to be a list")
        pulumi.set(__self__, "location_groups", location_groups)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if max_size and not isinstance(max_size, int):
            raise TypeError("Expected argument 'max_size' to be a int")
        pulumi.set(__self__, "max_size", max_size)
        if min_size and not isinstance(min_size, int):
            raise TypeError("Expected argument 'min_size' to be a int")
        pulumi.set(__self__, "min_size", min_size)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if operation and not isinstance(operation, str):
            raise TypeError("Expected argument 'operation' to be a str")
        pulumi.set(__self__, "operation", operation)
        if order and not isinstance(order, int):
            raise TypeError("Expected argument 'order' to be a int")
        pulumi.set(__self__, "order", order)
        if protocols and not isinstance(protocols, list):
            raise TypeError("Expected argument 'protocols' to be a list")
        pulumi.set(__self__, "protocols", protocols)
        if rank and not isinstance(rank, int):
            raise TypeError("Expected argument 'rank' to be a int")
        pulumi.set(__self__, "rank", rank)
        if size_quota and not isinstance(size_quota, int):
            raise TypeError("Expected argument 'size_quota' to be a int")
        pulumi.set(__self__, "size_quota", size_quota)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if time_quota and not isinstance(time_quota, int):
            raise TypeError("Expected argument 'time_quota' to be a int")
        pulumi.set(__self__, "time_quota", time_quota)
        if time_windows and not isinstance(time_windows, list):
            raise TypeError("Expected argument 'time_windows' to be a list")
        pulumi.set(__self__, "time_windows", time_windows)
        if unscannable and not isinstance(unscannable, bool):
            raise TypeError("Expected argument 'unscannable' to be a bool")
        pulumi.set(__self__, "unscannable", unscannable)
        if url_categories and not isinstance(url_categories, list):
            raise TypeError("Expected argument 'url_categories' to be a list")
        pulumi.set(__self__, "url_categories", url_categories)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)
        if zpa_app_segments and not isinstance(zpa_app_segments, list):
            raise TypeError("Expected argument 'zpa_app_segments' to be a list")
        pulumi.set(__self__, "zpa_app_segments", zpa_app_segments)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> builtins.str:
        return pulumi.get(self, "access_control")

    @property
    @pulumi.getter(name="activeContent")
    def active_content(self) -> builtins.bool:
        return pulumi.get(self, "active_content")

    @property
    @pulumi.getter(name="capturePcap")
    def capture_pcap(self) -> builtins.bool:
        return pulumi.get(self, "capture_pcap")

    @property
    @pulumi.getter(name="cloudApplications")
    def cloud_applications(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "cloud_applications")

    @property
    @pulumi.getter
    def departments(self) -> Sequence['outputs.GetFileTypeControlRulesDepartmentResult']:
        return pulumi.get(self, "departments")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceGroups")
    def device_groups(self) -> Sequence['outputs.GetFileTypeControlRulesDeviceGroupResult']:
        return pulumi.get(self, "device_groups")

    @property
    @pulumi.getter(name="deviceTrustLevels")
    def device_trust_levels(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "device_trust_levels")

    @property
    @pulumi.getter
    def devices(self) -> Sequence['outputs.GetFileTypeControlRulesDeviceResult']:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "file_types")

    @property
    @pulumi.getter(name="filteringAction")
    def filtering_action(self) -> builtins.str:
        return pulumi.get(self, "filtering_action")

    @property
    @pulumi.getter
    def groups(self) -> Sequence['outputs.GetFileTypeControlRulesGroupResult']:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetFileTypeControlRulesLabelResult']:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetFileTypeControlRulesLastModifiedByResult']:
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> builtins.int:
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Sequence['outputs.GetFileTypeControlRulesLocationGroupResult']:
        return pulumi.get(self, "location_groups")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetFileTypeControlRulesLocationResult']:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> builtins.int:
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> builtins.int:
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def operation(self) -> builtins.str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def order(self) -> builtins.int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def protocols(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter
    def rank(self) -> builtins.int:
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="sizeQuota")
    def size_quota(self) -> builtins.int:
        return pulumi.get(self, "size_quota")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeQuota")
    def time_quota(self) -> builtins.int:
        return pulumi.get(self, "time_quota")

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Sequence['outputs.GetFileTypeControlRulesTimeWindowResult']:
        return pulumi.get(self, "time_windows")

    @property
    @pulumi.getter
    def unscannable(self) -> builtins.bool:
        return pulumi.get(self, "unscannable")

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "url_categories")

    @property
    @pulumi.getter
    def users(self) -> Sequence['outputs.GetFileTypeControlRulesUserResult']:
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="zpaAppSegments")
    def zpa_app_segments(self) -> Sequence['outputs.GetFileTypeControlRulesZpaAppSegmentResult']:
        return pulumi.get(self, "zpa_app_segments")


class AwaitableGetFileTypeControlRulesResult(GetFileTypeControlRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFileTypeControlRulesResult(
            access_control=self.access_control,
            active_content=self.active_content,
            capture_pcap=self.capture_pcap,
            cloud_applications=self.cloud_applications,
            departments=self.departments,
            description=self.description,
            device_groups=self.device_groups,
            device_trust_levels=self.device_trust_levels,
            devices=self.devices,
            file_types=self.file_types,
            filtering_action=self.filtering_action,
            groups=self.groups,
            id=self.id,
            labels=self.labels,
            last_modified_bies=self.last_modified_bies,
            last_modified_time=self.last_modified_time,
            location_groups=self.location_groups,
            locations=self.locations,
            max_size=self.max_size,
            min_size=self.min_size,
            name=self.name,
            operation=self.operation,
            order=self.order,
            protocols=self.protocols,
            rank=self.rank,
            size_quota=self.size_quota,
            state=self.state,
            time_quota=self.time_quota,
            time_windows=self.time_windows,
            unscannable=self.unscannable,
            url_categories=self.url_categories,
            users=self.users,
            zpa_app_segments=self.zpa_app_segments)


def get_file_type_control_rules(id: Optional[builtins.int] = None,
                                name: Optional[builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFileTypeControlRulesResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-file-type-control)
    * [API documentation](https://help.zscaler.com/zia/file-type-control-policy#/fileTypeRules-post)

    Use the **zia_file_type_control_rules** data source to retrieves File Type Control rules.

    ## Example Usage
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getFileTypeControlRules:getFileTypeControlRules', __args__, opts=opts, typ=GetFileTypeControlRulesResult).value

    return AwaitableGetFileTypeControlRulesResult(
        access_control=pulumi.get(__ret__, 'access_control'),
        active_content=pulumi.get(__ret__, 'active_content'),
        capture_pcap=pulumi.get(__ret__, 'capture_pcap'),
        cloud_applications=pulumi.get(__ret__, 'cloud_applications'),
        departments=pulumi.get(__ret__, 'departments'),
        description=pulumi.get(__ret__, 'description'),
        device_groups=pulumi.get(__ret__, 'device_groups'),
        device_trust_levels=pulumi.get(__ret__, 'device_trust_levels'),
        devices=pulumi.get(__ret__, 'devices'),
        file_types=pulumi.get(__ret__, 'file_types'),
        filtering_action=pulumi.get(__ret__, 'filtering_action'),
        groups=pulumi.get(__ret__, 'groups'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        last_modified_bies=pulumi.get(__ret__, 'last_modified_bies'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        location_groups=pulumi.get(__ret__, 'location_groups'),
        locations=pulumi.get(__ret__, 'locations'),
        max_size=pulumi.get(__ret__, 'max_size'),
        min_size=pulumi.get(__ret__, 'min_size'),
        name=pulumi.get(__ret__, 'name'),
        operation=pulumi.get(__ret__, 'operation'),
        order=pulumi.get(__ret__, 'order'),
        protocols=pulumi.get(__ret__, 'protocols'),
        rank=pulumi.get(__ret__, 'rank'),
        size_quota=pulumi.get(__ret__, 'size_quota'),
        state=pulumi.get(__ret__, 'state'),
        time_quota=pulumi.get(__ret__, 'time_quota'),
        time_windows=pulumi.get(__ret__, 'time_windows'),
        unscannable=pulumi.get(__ret__, 'unscannable'),
        url_categories=pulumi.get(__ret__, 'url_categories'),
        users=pulumi.get(__ret__, 'users'),
        zpa_app_segments=pulumi.get(__ret__, 'zpa_app_segments'))
def get_file_type_control_rules_output(id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                                       name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFileTypeControlRulesResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-file-type-control)
    * [API documentation](https://help.zscaler.com/zia/file-type-control-policy#/fileTypeRules-post)

    Use the **zia_file_type_control_rules** data source to retrieves File Type Control rules.

    ## Example Usage
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getFileTypeControlRules:getFileTypeControlRules', __args__, opts=opts, typ=GetFileTypeControlRulesResult)
    return __ret__.apply(lambda __response__: GetFileTypeControlRulesResult(
        access_control=pulumi.get(__response__, 'access_control'),
        active_content=pulumi.get(__response__, 'active_content'),
        capture_pcap=pulumi.get(__response__, 'capture_pcap'),
        cloud_applications=pulumi.get(__response__, 'cloud_applications'),
        departments=pulumi.get(__response__, 'departments'),
        description=pulumi.get(__response__, 'description'),
        device_groups=pulumi.get(__response__, 'device_groups'),
        device_trust_levels=pulumi.get(__response__, 'device_trust_levels'),
        devices=pulumi.get(__response__, 'devices'),
        file_types=pulumi.get(__response__, 'file_types'),
        filtering_action=pulumi.get(__response__, 'filtering_action'),
        groups=pulumi.get(__response__, 'groups'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        last_modified_bies=pulumi.get(__response__, 'last_modified_bies'),
        last_modified_time=pulumi.get(__response__, 'last_modified_time'),
        location_groups=pulumi.get(__response__, 'location_groups'),
        locations=pulumi.get(__response__, 'locations'),
        max_size=pulumi.get(__response__, 'max_size'),
        min_size=pulumi.get(__response__, 'min_size'),
        name=pulumi.get(__response__, 'name'),
        operation=pulumi.get(__response__, 'operation'),
        order=pulumi.get(__response__, 'order'),
        protocols=pulumi.get(__response__, 'protocols'),
        rank=pulumi.get(__response__, 'rank'),
        size_quota=pulumi.get(__response__, 'size_quota'),
        state=pulumi.get(__response__, 'state'),
        time_quota=pulumi.get(__response__, 'time_quota'),
        time_windows=pulumi.get(__response__, 'time_windows'),
        unscannable=pulumi.get(__response__, 'unscannable'),
        url_categories=pulumi.get(__response__, 'url_categories'),
        users=pulumi.get(__response__, 'users'),
        zpa_app_segments=pulumi.get(__response__, 'zpa_app_segments')))
