# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetRiskProfilesResult',
    'AwaitableGetRiskProfilesResult',
    'get_risk_profiles',
    'get_risk_profiles_output',
]

@pulumi.output_type
class GetRiskProfilesResult:
    """
    A collection of values returned by getRiskProfiles.
    """
    def __init__(__self__, admin_audit_logs=None, certifications=None, create_time=None, custom_tags=None, data_breach=None, data_encryption_in_transits=None, dns_caa_policy=None, domain_based_message_auth=None, domain_keys_identified_mail=None, evasive=None, exclude_certificates=None, file_sharing=None, http_security_headers=None, id=None, last_mod_time=None, last_modified_bies=None, malware_scanning_for_content=None, mfa_support=None, name=None, password_strength=None, poor_items_of_service=None, profile_type=None, remote_screen_sharing=None, risk_indices=None, sender_policy_framework=None, source_ip_restrictions=None, ssl_cert_key_size=None, ssl_cert_validity=None, ssl_pinned=None, status=None, support_for_waf=None, vulnerability=None, vulnerability_disclosure=None, vulnerable_to_heart_bleed=None, vulnerable_to_log_jam=None, vulnerable_to_poodle=None, weak_cipher_support=None):
        if admin_audit_logs and not isinstance(admin_audit_logs, str):
            raise TypeError("Expected argument 'admin_audit_logs' to be a str")
        pulumi.set(__self__, "admin_audit_logs", admin_audit_logs)
        if certifications and not isinstance(certifications, list):
            raise TypeError("Expected argument 'certifications' to be a list")
        pulumi.set(__self__, "certifications", certifications)
        if create_time and not isinstance(create_time, int):
            raise TypeError("Expected argument 'create_time' to be a int")
        pulumi.set(__self__, "create_time", create_time)
        if custom_tags and not isinstance(custom_tags, list):
            raise TypeError("Expected argument 'custom_tags' to be a list")
        pulumi.set(__self__, "custom_tags", custom_tags)
        if data_breach and not isinstance(data_breach, str):
            raise TypeError("Expected argument 'data_breach' to be a str")
        pulumi.set(__self__, "data_breach", data_breach)
        if data_encryption_in_transits and not isinstance(data_encryption_in_transits, list):
            raise TypeError("Expected argument 'data_encryption_in_transits' to be a list")
        pulumi.set(__self__, "data_encryption_in_transits", data_encryption_in_transits)
        if dns_caa_policy and not isinstance(dns_caa_policy, str):
            raise TypeError("Expected argument 'dns_caa_policy' to be a str")
        pulumi.set(__self__, "dns_caa_policy", dns_caa_policy)
        if domain_based_message_auth and not isinstance(domain_based_message_auth, str):
            raise TypeError("Expected argument 'domain_based_message_auth' to be a str")
        pulumi.set(__self__, "domain_based_message_auth", domain_based_message_auth)
        if domain_keys_identified_mail and not isinstance(domain_keys_identified_mail, str):
            raise TypeError("Expected argument 'domain_keys_identified_mail' to be a str")
        pulumi.set(__self__, "domain_keys_identified_mail", domain_keys_identified_mail)
        if evasive and not isinstance(evasive, str):
            raise TypeError("Expected argument 'evasive' to be a str")
        pulumi.set(__self__, "evasive", evasive)
        if exclude_certificates and not isinstance(exclude_certificates, int):
            raise TypeError("Expected argument 'exclude_certificates' to be a int")
        pulumi.set(__self__, "exclude_certificates", exclude_certificates)
        if file_sharing and not isinstance(file_sharing, str):
            raise TypeError("Expected argument 'file_sharing' to be a str")
        pulumi.set(__self__, "file_sharing", file_sharing)
        if http_security_headers and not isinstance(http_security_headers, str):
            raise TypeError("Expected argument 'http_security_headers' to be a str")
        pulumi.set(__self__, "http_security_headers", http_security_headers)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if last_mod_time and not isinstance(last_mod_time, int):
            raise TypeError("Expected argument 'last_mod_time' to be a int")
        pulumi.set(__self__, "last_mod_time", last_mod_time)
        if last_modified_bies and not isinstance(last_modified_bies, list):
            raise TypeError("Expected argument 'last_modified_bies' to be a list")
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        if malware_scanning_for_content and not isinstance(malware_scanning_for_content, str):
            raise TypeError("Expected argument 'malware_scanning_for_content' to be a str")
        pulumi.set(__self__, "malware_scanning_for_content", malware_scanning_for_content)
        if mfa_support and not isinstance(mfa_support, str):
            raise TypeError("Expected argument 'mfa_support' to be a str")
        pulumi.set(__self__, "mfa_support", mfa_support)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password_strength and not isinstance(password_strength, str):
            raise TypeError("Expected argument 'password_strength' to be a str")
        pulumi.set(__self__, "password_strength", password_strength)
        if poor_items_of_service and not isinstance(poor_items_of_service, str):
            raise TypeError("Expected argument 'poor_items_of_service' to be a str")
        pulumi.set(__self__, "poor_items_of_service", poor_items_of_service)
        if profile_type and not isinstance(profile_type, str):
            raise TypeError("Expected argument 'profile_type' to be a str")
        pulumi.set(__self__, "profile_type", profile_type)
        if remote_screen_sharing and not isinstance(remote_screen_sharing, str):
            raise TypeError("Expected argument 'remote_screen_sharing' to be a str")
        pulumi.set(__self__, "remote_screen_sharing", remote_screen_sharing)
        if risk_indices and not isinstance(risk_indices, list):
            raise TypeError("Expected argument 'risk_indices' to be a list")
        pulumi.set(__self__, "risk_indices", risk_indices)
        if sender_policy_framework and not isinstance(sender_policy_framework, str):
            raise TypeError("Expected argument 'sender_policy_framework' to be a str")
        pulumi.set(__self__, "sender_policy_framework", sender_policy_framework)
        if source_ip_restrictions and not isinstance(source_ip_restrictions, str):
            raise TypeError("Expected argument 'source_ip_restrictions' to be a str")
        pulumi.set(__self__, "source_ip_restrictions", source_ip_restrictions)
        if ssl_cert_key_size and not isinstance(ssl_cert_key_size, str):
            raise TypeError("Expected argument 'ssl_cert_key_size' to be a str")
        pulumi.set(__self__, "ssl_cert_key_size", ssl_cert_key_size)
        if ssl_cert_validity and not isinstance(ssl_cert_validity, str):
            raise TypeError("Expected argument 'ssl_cert_validity' to be a str")
        pulumi.set(__self__, "ssl_cert_validity", ssl_cert_validity)
        if ssl_pinned and not isinstance(ssl_pinned, str):
            raise TypeError("Expected argument 'ssl_pinned' to be a str")
        pulumi.set(__self__, "ssl_pinned", ssl_pinned)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if support_for_waf and not isinstance(support_for_waf, str):
            raise TypeError("Expected argument 'support_for_waf' to be a str")
        pulumi.set(__self__, "support_for_waf", support_for_waf)
        if vulnerability and not isinstance(vulnerability, str):
            raise TypeError("Expected argument 'vulnerability' to be a str")
        pulumi.set(__self__, "vulnerability", vulnerability)
        if vulnerability_disclosure and not isinstance(vulnerability_disclosure, str):
            raise TypeError("Expected argument 'vulnerability_disclosure' to be a str")
        pulumi.set(__self__, "vulnerability_disclosure", vulnerability_disclosure)
        if vulnerable_to_heart_bleed and not isinstance(vulnerable_to_heart_bleed, str):
            raise TypeError("Expected argument 'vulnerable_to_heart_bleed' to be a str")
        pulumi.set(__self__, "vulnerable_to_heart_bleed", vulnerable_to_heart_bleed)
        if vulnerable_to_log_jam and not isinstance(vulnerable_to_log_jam, str):
            raise TypeError("Expected argument 'vulnerable_to_log_jam' to be a str")
        pulumi.set(__self__, "vulnerable_to_log_jam", vulnerable_to_log_jam)
        if vulnerable_to_poodle and not isinstance(vulnerable_to_poodle, str):
            raise TypeError("Expected argument 'vulnerable_to_poodle' to be a str")
        pulumi.set(__self__, "vulnerable_to_poodle", vulnerable_to_poodle)
        if weak_cipher_support and not isinstance(weak_cipher_support, str):
            raise TypeError("Expected argument 'weak_cipher_support' to be a str")
        pulumi.set(__self__, "weak_cipher_support", weak_cipher_support)

    @property
    @pulumi.getter(name="adminAuditLogs")
    def admin_audit_logs(self) -> builtins.str:
        """
        (String) Filters based on support for administrative logging. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "admin_audit_logs")

    @property
    @pulumi.getter
    def certifications(self) -> Sequence[builtins.str]:
        """
        (Optional) Filters based on supported certifications.
        """
        return pulumi.get(self, "certifications")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> builtins.int:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Sequence['outputs.GetRiskProfilesCustomTagResult']:
        """
        (Set) List of custom tags to be included or excluded for the profile.
        """
        return pulumi.get(self, "custom_tags")

    @property
    @pulumi.getter(name="dataBreach")
    def data_breach(self) -> builtins.str:
        """
        (String) Filters based on history of data breaches. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "data_breach")

    @property
    @pulumi.getter(name="dataEncryptionInTransits")
    def data_encryption_in_transits(self) -> Sequence[builtins.str]:
        """
        (Optional) Filters based on encryption of data in transit.
        """
        return pulumi.get(self, "data_encryption_in_transits")

    @property
    @pulumi.getter(name="dnsCaaPolicy")
    def dns_caa_policy(self) -> builtins.str:
        """
        (String) Filters based on DNS CAA policy implementation.
        """
        return pulumi.get(self, "dns_caa_policy")

    @property
    @pulumi.getter(name="domainBasedMessageAuth")
    def domain_based_message_auth(self) -> builtins.str:
        """
        (String) Filters based on DMARC support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "domain_based_message_auth")

    @property
    @pulumi.getter(name="domainKeysIdentifiedMail")
    def domain_keys_identified_mail(self) -> builtins.str:
        """
        (String) Filters based on DKIM authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "domain_keys_identified_mail")

    @property
    @pulumi.getter
    def evasive(self) -> builtins.str:
        """
        (String) Filters based on anonymous access support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "evasive")

    @property
    @pulumi.getter(name="excludeCertificates")
    def exclude_certificates(self) -> builtins.int:
        """
        (Int) Indicates if the certificates are included or not.
        """
        return pulumi.get(self, "exclude_certificates")

    @property
    @pulumi.getter(name="fileSharing")
    def file_sharing(self) -> builtins.str:
        """
        (String) Filters based on file sharing capability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "file_sharing")

    @property
    @pulumi.getter(name="httpSecurityHeaders")
    def http_security_headers(self) -> builtins.str:
        """
        (String) Filters based on HTTP security headers support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "http_security_headers")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModTime")
    def last_mod_time(self) -> builtins.int:
        return pulumi.get(self, "last_mod_time")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetRiskProfilesLastModifiedByResult']:
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="malwareScanningForContent")
    def malware_scanning_for_content(self) -> builtins.str:
        """
        (String) Filters based on content malware scanning. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "malware_scanning_for_content")

    @property
    @pulumi.getter(name="mfaSupport")
    def mfa_support(self) -> builtins.str:
        """
        (String) Filters based on multi-factor authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "mfa_support")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passwordStrength")
    def password_strength(self) -> builtins.str:
        """
        (String) Filters based on password strength policy. Supported values: `ANY`, `GOOD`, `POOR`, `UN_KNOWN`.
        """
        return pulumi.get(self, "password_strength")

    @property
    @pulumi.getter(name="poorItemsOfService")
    def poor_items_of_service(self) -> builtins.str:
        """
        (String) Filters applications based on questionable legal terms. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "poor_items_of_service")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> builtins.str:
        """
        (String) Risk profile type. Supported value: `CLOUD_APPLICATIONS`. Default is `CLOUD_APPLICATIONS`.
        """
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter(name="remoteScreenSharing")
    def remote_screen_sharing(self) -> builtins.str:
        """
        (String) Filters based on remote screen sharing support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "remote_screen_sharing")

    @property
    @pulumi.getter(name="riskIndices")
    def risk_indices(self) -> Sequence[builtins.int]:
        """
        (Optional) Filters based on risk index thresholds.
        """
        return pulumi.get(self, "risk_indices")

    @property
    @pulumi.getter(name="senderPolicyFramework")
    def sender_policy_framework(self) -> builtins.str:
        """
        (String) Filters based on SPF authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "sender_policy_framework")

    @property
    @pulumi.getter(name="sourceIpRestrictions")
    def source_ip_restrictions(self) -> builtins.str:
        """
        (String) Filters based on IP restriction support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "source_ip_restrictions")

    @property
    @pulumi.getter(name="sslCertKeySize")
    def ssl_cert_key_size(self) -> builtins.str:
        """
        (String) Filters based on SSL certificate key size. Supported values: `ANY`, `UN_KNOWN`, `BITS_1024`, `BITS_2048`, `BITS_256`, `BITS_3072`, `BITS_384`, `BITS_4096`, `BITS_8192`.
        """
        return pulumi.get(self, "ssl_cert_key_size")

    @property
    @pulumi.getter(name="sslCertValidity")
    def ssl_cert_validity(self) -> builtins.str:
        """
        (String) Filters based on SSL certificate validity period. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "ssl_cert_validity")

    @property
    @pulumi.getter(name="sslPinned")
    def ssl_pinned(self) -> builtins.str:
        """
        (String) Filters based on use of pinned SSL certificates. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "ssl_pinned")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        (String) Status of the applications. Supported values: `UN_SANCTIONED`, `SANCTIONED`, `ANY`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportForWaf")
    def support_for_waf(self) -> builtins.str:
        """
        (String) Filters based on Web Application Firewall (WAF) support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "support_for_waf")

    @property
    @pulumi.getter
    def vulnerability(self) -> builtins.str:
        """
        (String) Filters based on published CVE vulnerabilities. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerability")

    @property
    @pulumi.getter(name="vulnerabilityDisclosure")
    def vulnerability_disclosure(self) -> builtins.str:
        """
        (String) Filters based on vulnerability disclosure policy. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerability_disclosure")

    @property
    @pulumi.getter(name="vulnerableToHeartBleed")
    def vulnerable_to_heart_bleed(self) -> builtins.str:
        """
        (String) Filters based on Heartbleed vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerable_to_heart_bleed")

    @property
    @pulumi.getter(name="vulnerableToLogJam")
    def vulnerable_to_log_jam(self) -> builtins.str:
        """
        (String) Filters based on Logjam vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerable_to_log_jam")

    @property
    @pulumi.getter(name="vulnerableToPoodle")
    def vulnerable_to_poodle(self) -> builtins.str:
        """
        (String) Filters based on POODLE vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerable_to_poodle")

    @property
    @pulumi.getter(name="weakCipherSupport")
    def weak_cipher_support(self) -> builtins.str:
        """
        (String) Filters based on weak cipher usage. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "weak_cipher_support")


class AwaitableGetRiskProfilesResult(GetRiskProfilesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRiskProfilesResult(
            admin_audit_logs=self.admin_audit_logs,
            certifications=self.certifications,
            create_time=self.create_time,
            custom_tags=self.custom_tags,
            data_breach=self.data_breach,
            data_encryption_in_transits=self.data_encryption_in_transits,
            dns_caa_policy=self.dns_caa_policy,
            domain_based_message_auth=self.domain_based_message_auth,
            domain_keys_identified_mail=self.domain_keys_identified_mail,
            evasive=self.evasive,
            exclude_certificates=self.exclude_certificates,
            file_sharing=self.file_sharing,
            http_security_headers=self.http_security_headers,
            id=self.id,
            last_mod_time=self.last_mod_time,
            last_modified_bies=self.last_modified_bies,
            malware_scanning_for_content=self.malware_scanning_for_content,
            mfa_support=self.mfa_support,
            name=self.name,
            password_strength=self.password_strength,
            poor_items_of_service=self.poor_items_of_service,
            profile_type=self.profile_type,
            remote_screen_sharing=self.remote_screen_sharing,
            risk_indices=self.risk_indices,
            sender_policy_framework=self.sender_policy_framework,
            source_ip_restrictions=self.source_ip_restrictions,
            ssl_cert_key_size=self.ssl_cert_key_size,
            ssl_cert_validity=self.ssl_cert_validity,
            ssl_pinned=self.ssl_pinned,
            status=self.status,
            support_for_waf=self.support_for_waf,
            vulnerability=self.vulnerability,
            vulnerability_disclosure=self.vulnerability_disclosure,
            vulnerable_to_heart_bleed=self.vulnerable_to_heart_bleed,
            vulnerable_to_log_jam=self.vulnerable_to_log_jam,
            vulnerable_to_poodle=self.vulnerable_to_poodle,
            weak_cipher_support=self.weak_cipher_support)


def get_risk_profiles(id: Optional[builtins.int] = None,
                      name: Optional[builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRiskProfilesResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-cloud-application-risk-profile)
    * [API documentation](https://help.zscaler.com/zia/cloud-applications#/riskProfiles-get)

    Use the **zia_risk_profiles** data source to get information about a cloud application risk profile in the Zscaler Internet Access cloud or via the API.
    See [About Cloud Application Risk Profile](https://help.zscaler.com/zia/about-cloud-application-risk-profile) for more details.

    ## Example Usage

    ### Retrieve By Name

    ### Retrieve By ID


    :param builtins.int id: Unique identifier for the risk profile.
    :param builtins.str name: Cloud application risk profile name.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getRiskProfiles:getRiskProfiles', __args__, opts=opts, typ=GetRiskProfilesResult).value

    return AwaitableGetRiskProfilesResult(
        admin_audit_logs=pulumi.get(__ret__, 'admin_audit_logs'),
        certifications=pulumi.get(__ret__, 'certifications'),
        create_time=pulumi.get(__ret__, 'create_time'),
        custom_tags=pulumi.get(__ret__, 'custom_tags'),
        data_breach=pulumi.get(__ret__, 'data_breach'),
        data_encryption_in_transits=pulumi.get(__ret__, 'data_encryption_in_transits'),
        dns_caa_policy=pulumi.get(__ret__, 'dns_caa_policy'),
        domain_based_message_auth=pulumi.get(__ret__, 'domain_based_message_auth'),
        domain_keys_identified_mail=pulumi.get(__ret__, 'domain_keys_identified_mail'),
        evasive=pulumi.get(__ret__, 'evasive'),
        exclude_certificates=pulumi.get(__ret__, 'exclude_certificates'),
        file_sharing=pulumi.get(__ret__, 'file_sharing'),
        http_security_headers=pulumi.get(__ret__, 'http_security_headers'),
        id=pulumi.get(__ret__, 'id'),
        last_mod_time=pulumi.get(__ret__, 'last_mod_time'),
        last_modified_bies=pulumi.get(__ret__, 'last_modified_bies'),
        malware_scanning_for_content=pulumi.get(__ret__, 'malware_scanning_for_content'),
        mfa_support=pulumi.get(__ret__, 'mfa_support'),
        name=pulumi.get(__ret__, 'name'),
        password_strength=pulumi.get(__ret__, 'password_strength'),
        poor_items_of_service=pulumi.get(__ret__, 'poor_items_of_service'),
        profile_type=pulumi.get(__ret__, 'profile_type'),
        remote_screen_sharing=pulumi.get(__ret__, 'remote_screen_sharing'),
        risk_indices=pulumi.get(__ret__, 'risk_indices'),
        sender_policy_framework=pulumi.get(__ret__, 'sender_policy_framework'),
        source_ip_restrictions=pulumi.get(__ret__, 'source_ip_restrictions'),
        ssl_cert_key_size=pulumi.get(__ret__, 'ssl_cert_key_size'),
        ssl_cert_validity=pulumi.get(__ret__, 'ssl_cert_validity'),
        ssl_pinned=pulumi.get(__ret__, 'ssl_pinned'),
        status=pulumi.get(__ret__, 'status'),
        support_for_waf=pulumi.get(__ret__, 'support_for_waf'),
        vulnerability=pulumi.get(__ret__, 'vulnerability'),
        vulnerability_disclosure=pulumi.get(__ret__, 'vulnerability_disclosure'),
        vulnerable_to_heart_bleed=pulumi.get(__ret__, 'vulnerable_to_heart_bleed'),
        vulnerable_to_log_jam=pulumi.get(__ret__, 'vulnerable_to_log_jam'),
        vulnerable_to_poodle=pulumi.get(__ret__, 'vulnerable_to_poodle'),
        weak_cipher_support=pulumi.get(__ret__, 'weak_cipher_support'))
def get_risk_profiles_output(id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                             name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRiskProfilesResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-cloud-application-risk-profile)
    * [API documentation](https://help.zscaler.com/zia/cloud-applications#/riskProfiles-get)

    Use the **zia_risk_profiles** data source to get information about a cloud application risk profile in the Zscaler Internet Access cloud or via the API.
    See [About Cloud Application Risk Profile](https://help.zscaler.com/zia/about-cloud-application-risk-profile) for more details.

    ## Example Usage

    ### Retrieve By Name

    ### Retrieve By ID


    :param builtins.int id: Unique identifier for the risk profile.
    :param builtins.str name: Cloud application risk profile name.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getRiskProfiles:getRiskProfiles', __args__, opts=opts, typ=GetRiskProfilesResult)
    return __ret__.apply(lambda __response__: GetRiskProfilesResult(
        admin_audit_logs=pulumi.get(__response__, 'admin_audit_logs'),
        certifications=pulumi.get(__response__, 'certifications'),
        create_time=pulumi.get(__response__, 'create_time'),
        custom_tags=pulumi.get(__response__, 'custom_tags'),
        data_breach=pulumi.get(__response__, 'data_breach'),
        data_encryption_in_transits=pulumi.get(__response__, 'data_encryption_in_transits'),
        dns_caa_policy=pulumi.get(__response__, 'dns_caa_policy'),
        domain_based_message_auth=pulumi.get(__response__, 'domain_based_message_auth'),
        domain_keys_identified_mail=pulumi.get(__response__, 'domain_keys_identified_mail'),
        evasive=pulumi.get(__response__, 'evasive'),
        exclude_certificates=pulumi.get(__response__, 'exclude_certificates'),
        file_sharing=pulumi.get(__response__, 'file_sharing'),
        http_security_headers=pulumi.get(__response__, 'http_security_headers'),
        id=pulumi.get(__response__, 'id'),
        last_mod_time=pulumi.get(__response__, 'last_mod_time'),
        last_modified_bies=pulumi.get(__response__, 'last_modified_bies'),
        malware_scanning_for_content=pulumi.get(__response__, 'malware_scanning_for_content'),
        mfa_support=pulumi.get(__response__, 'mfa_support'),
        name=pulumi.get(__response__, 'name'),
        password_strength=pulumi.get(__response__, 'password_strength'),
        poor_items_of_service=pulumi.get(__response__, 'poor_items_of_service'),
        profile_type=pulumi.get(__response__, 'profile_type'),
        remote_screen_sharing=pulumi.get(__response__, 'remote_screen_sharing'),
        risk_indices=pulumi.get(__response__, 'risk_indices'),
        sender_policy_framework=pulumi.get(__response__, 'sender_policy_framework'),
        source_ip_restrictions=pulumi.get(__response__, 'source_ip_restrictions'),
        ssl_cert_key_size=pulumi.get(__response__, 'ssl_cert_key_size'),
        ssl_cert_validity=pulumi.get(__response__, 'ssl_cert_validity'),
        ssl_pinned=pulumi.get(__response__, 'ssl_pinned'),
        status=pulumi.get(__response__, 'status'),
        support_for_waf=pulumi.get(__response__, 'support_for_waf'),
        vulnerability=pulumi.get(__response__, 'vulnerability'),
        vulnerability_disclosure=pulumi.get(__response__, 'vulnerability_disclosure'),
        vulnerable_to_heart_bleed=pulumi.get(__response__, 'vulnerable_to_heart_bleed'),
        vulnerable_to_log_jam=pulumi.get(__response__, 'vulnerable_to_log_jam'),
        vulnerable_to_poodle=pulumi.get(__response__, 'vulnerable_to_poodle'),
        weak_cipher_support=pulumi.get(__response__, 'weak_cipher_support')))
