# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetForwardingControlProxiesResult',
    'AwaitableGetForwardingControlProxiesResult',
    'get_forwarding_control_proxies',
    'get_forwarding_control_proxies_output',
]

@pulumi.output_type
class GetForwardingControlProxiesResult:
    """
    A collection of values returned by getForwardingControlProxies.
    """
    def __init__(__self__, address=None, base64_encode_xau_header=None, certs=None, description=None, id=None, insert_xau_header=None, last_modified_bies=None, last_modified_time=None, name=None, port=None, type=None):
        if address and not isinstance(address, str):
            raise TypeError("Expected argument 'address' to be a str")
        pulumi.set(__self__, "address", address)
        if base64_encode_xau_header and not isinstance(base64_encode_xau_header, bool):
            raise TypeError("Expected argument 'base64_encode_xau_header' to be a bool")
        pulumi.set(__self__, "base64_encode_xau_header", base64_encode_xau_header)
        if certs and not isinstance(certs, list):
            raise TypeError("Expected argument 'certs' to be a list")
        pulumi.set(__self__, "certs", certs)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if insert_xau_header and not isinstance(insert_xau_header, bool):
            raise TypeError("Expected argument 'insert_xau_header' to be a bool")
        pulumi.set(__self__, "insert_xau_header", insert_xau_header)
        if last_modified_bies and not isinstance(last_modified_bies, list):
            raise TypeError("Expected argument 'last_modified_bies' to be a list")
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        if last_modified_time and not isinstance(last_modified_time, int):
            raise TypeError("Expected argument 'last_modified_time' to be a int")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def address(self) -> builtins.str:
        """
        (String) The IP address or the FQDN of the third-party proxy service
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="base64EncodeXauHeader")
    def base64_encode_xau_header(self) -> builtins.bool:
        """
        (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
        """
        return pulumi.get(self, "base64_encode_xau_header")

    @property
    @pulumi.getter
    def certs(self) -> Sequence['outputs.GetForwardingControlProxiesCertResult']:
        """
        (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
        """
        return pulumi.get(self, "certs")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        (String) Additional notes or information
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        (Integer) Identifier that uniquely identifies the certificate
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="insertXauHeader")
    def insert_xau_header(self) -> builtins.bool:
        """
        (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
        """
        return pulumi.get(self, "insert_xau_header")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetForwardingControlProxiesLastModifiedByResult']:
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> builtins.int:
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> builtins.int:
        """
        (integer) The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (String) Gateway type. Returned values: `PROXYCHAIN`, `ZIA`, `ECSELF`
        """
        return pulumi.get(self, "type")


class AwaitableGetForwardingControlProxiesResult(GetForwardingControlProxiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetForwardingControlProxiesResult(
            address=self.address,
            base64_encode_xau_header=self.base64_encode_xau_header,
            certs=self.certs,
            description=self.description,
            id=self.id,
            insert_xau_header=self.insert_xau_header,
            last_modified_bies=self.last_modified_bies,
            last_modified_time=self.last_modified_time,
            name=self.name,
            port=self.port,
            type=self.type)


def get_forwarding_control_proxies(id: Optional[builtins.int] = None,
                                   name: Optional[builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetForwardingControlProxiesResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-third-party-proxies)
    * [API documentation](https://help.zscaler.com/zia/forwarding-control-policy#/proxies-get)

    Use the **zia_forwarding_control_proxies** data source to get information about a third-party proxy service available in the Zscaler Internet Access.

    ## Example Usage

    ### Retrieve By Name

    ### Retrieve By ID


    :param builtins.int id: Unique identifier for the third-party proxy services
    :param builtins.str name: Proxy name for the third-party proxy services
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getForwardingControlProxies:getForwardingControlProxies', __args__, opts=opts, typ=GetForwardingControlProxiesResult).value

    return AwaitableGetForwardingControlProxiesResult(
        address=pulumi.get(__ret__, 'address'),
        base64_encode_xau_header=pulumi.get(__ret__, 'base64_encode_xau_header'),
        certs=pulumi.get(__ret__, 'certs'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        insert_xau_header=pulumi.get(__ret__, 'insert_xau_header'),
        last_modified_bies=pulumi.get(__ret__, 'last_modified_bies'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        name=pulumi.get(__ret__, 'name'),
        port=pulumi.get(__ret__, 'port'),
        type=pulumi.get(__ret__, 'type'))
def get_forwarding_control_proxies_output(id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                                          name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetForwardingControlProxiesResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-third-party-proxies)
    * [API documentation](https://help.zscaler.com/zia/forwarding-control-policy#/proxies-get)

    Use the **zia_forwarding_control_proxies** data source to get information about a third-party proxy service available in the Zscaler Internet Access.

    ## Example Usage

    ### Retrieve By Name

    ### Retrieve By ID


    :param builtins.int id: Unique identifier for the third-party proxy services
    :param builtins.str name: Proxy name for the third-party proxy services
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getForwardingControlProxies:getForwardingControlProxies', __args__, opts=opts, typ=GetForwardingControlProxiesResult)
    return __ret__.apply(lambda __response__: GetForwardingControlProxiesResult(
        address=pulumi.get(__response__, 'address'),
        base64_encode_xau_header=pulumi.get(__response__, 'base64_encode_xau_header'),
        certs=pulumi.get(__response__, 'certs'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        insert_xau_header=pulumi.get(__response__, 'insert_xau_header'),
        last_modified_bies=pulumi.get(__response__, 'last_modified_bies'),
        last_modified_time=pulumi.get(__response__, 'last_modified_time'),
        name=pulumi.get(__response__, 'name'),
        port=pulumi.get(__response__, 'port'),
        type=pulumi.get(__response__, 'type')))
