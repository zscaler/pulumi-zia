# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ForwardingControlProxiesArgs', 'ForwardingControlProxies']

@pulumi.input_type
class ForwardingControlProxiesArgs:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[builtins.str]] = None,
                 base64_encode_xau_header: Optional[pulumi.Input[builtins.bool]] = None,
                 certs: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlProxiesCertArgs']]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 insert_xau_header: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a ForwardingControlProxies resource.
        :param pulumi.Input[builtins.str] address: The IP address or the FQDN of the third-party proxy service
        :param pulumi.Input[builtins.bool] base64_encode_xau_header: (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
        :param pulumi.Input[Sequence[pulumi.Input['ForwardingControlProxiesCertArgs']]] certs: (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
        :param pulumi.Input[builtins.str] description: (String) Additional notes or information
        :param pulumi.Input[builtins.bool] insert_xau_header: (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
        :param pulumi.Input[builtins.str] name: Proxy name for the third-party proxy services
        :param pulumi.Input[builtins.int] port: The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
        :param pulumi.Input[builtins.str] type: Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if base64_encode_xau_header is not None:
            pulumi.set(__self__, "base64_encode_xau_header", base64_encode_xau_header)
        if certs is not None:
            pulumi.set(__self__, "certs", certs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if insert_xau_header is not None:
            pulumi.set(__self__, "insert_xau_header", insert_xau_header)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The IP address or the FQDN of the third-party proxy service
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="base64EncodeXauHeader")
    def base64_encode_xau_header(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
        """
        return pulumi.get(self, "base64_encode_xau_header")

    @base64_encode_xau_header.setter
    def base64_encode_xau_header(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "base64_encode_xau_header", value)

    @property
    @pulumi.getter
    def certs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlProxiesCertArgs']]]]:
        """
        (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
        """
        return pulumi.get(self, "certs")

    @certs.setter
    def certs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlProxiesCertArgs']]]]):
        pulumi.set(self, "certs", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Additional notes or information
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="insertXauHeader")
    def insert_xau_header(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
        """
        return pulumi.get(self, "insert_xau_header")

    @insert_xau_header.setter
    def insert_xau_header(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "insert_xau_header", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Proxy name for the third-party proxy services
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _ForwardingControlProxiesState:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[builtins.str]] = None,
                 base64_encode_xau_header: Optional[pulumi.Input[builtins.bool]] = None,
                 certs: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlProxiesCertArgs']]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 insert_xau_header: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 proxy_id: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering ForwardingControlProxies resources.
        :param pulumi.Input[builtins.str] address: The IP address or the FQDN of the third-party proxy service
        :param pulumi.Input[builtins.bool] base64_encode_xau_header: (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
        :param pulumi.Input[Sequence[pulumi.Input['ForwardingControlProxiesCertArgs']]] certs: (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
        :param pulumi.Input[builtins.str] description: (String) Additional notes or information
        :param pulumi.Input[builtins.bool] insert_xau_header: (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
        :param pulumi.Input[builtins.str] name: Proxy name for the third-party proxy services
        :param pulumi.Input[builtins.int] port: The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
        :param pulumi.Input[builtins.str] type: Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if base64_encode_xau_header is not None:
            pulumi.set(__self__, "base64_encode_xau_header", base64_encode_xau_header)
        if certs is not None:
            pulumi.set(__self__, "certs", certs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if insert_xau_header is not None:
            pulumi.set(__self__, "insert_xau_header", insert_xau_header)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_id is not None:
            pulumi.set(__self__, "proxy_id", proxy_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The IP address or the FQDN of the third-party proxy service
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="base64EncodeXauHeader")
    def base64_encode_xau_header(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
        """
        return pulumi.get(self, "base64_encode_xau_header")

    @base64_encode_xau_header.setter
    def base64_encode_xau_header(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "base64_encode_xau_header", value)

    @property
    @pulumi.getter
    def certs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlProxiesCertArgs']]]]:
        """
        (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
        """
        return pulumi.get(self, "certs")

    @certs.setter
    def certs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ForwardingControlProxiesCertArgs']]]]):
        pulumi.set(self, "certs", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Additional notes or information
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="insertXauHeader")
    def insert_xau_header(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
        """
        return pulumi.get(self, "insert_xau_header")

    @insert_xau_header.setter
    def insert_xau_header(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "insert_xau_header", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Proxy name for the third-party proxy services
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "proxy_id")

    @proxy_id.setter
    def proxy_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "proxy_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("zia:index/forwardingControlProxies:ForwardingControlProxies")
class ForwardingControlProxies(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[builtins.str]] = None,
                 base64_encode_xau_header: Optional[pulumi.Input[builtins.bool]] = None,
                 certs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ForwardingControlProxiesCertArgs', 'ForwardingControlProxiesCertArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 insert_xau_header: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zia/about-third-party-proxies)
        * [API documentation](https://help.zscaler.com/zia/forwarding-control-policy#/proxies-get)

        Use the **zia_forwarding_control_proxies** resource allows the creation and management of ZIA forwarding control Proxies for third-party proxy services integration between Zscaler Internet Access and Zscaler Private Access. This resource can then be associated with a ZIA Forwarding Control Rule.

        ## Example Usage

        ### No Certificate

        ### With Certificate

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_forwarding_control_proxies** can be imported by using `<PROXY_ID>` or `<PROXY_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/forwardingControlProxies:ForwardingControlProxies example <proxy_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/forwardingControlProxies:ForwardingControlProxies example <proxy_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] address: The IP address or the FQDN of the third-party proxy service
        :param pulumi.Input[builtins.bool] base64_encode_xau_header: (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ForwardingControlProxiesCertArgs', 'ForwardingControlProxiesCertArgsDict']]]] certs: (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
        :param pulumi.Input[builtins.str] description: (String) Additional notes or information
        :param pulumi.Input[builtins.bool] insert_xau_header: (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
        :param pulumi.Input[builtins.str] name: Proxy name for the third-party proxy services
        :param pulumi.Input[builtins.int] port: The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
        :param pulumi.Input[builtins.str] type: Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ForwardingControlProxiesArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zia/about-third-party-proxies)
        * [API documentation](https://help.zscaler.com/zia/forwarding-control-policy#/proxies-get)

        Use the **zia_forwarding_control_proxies** resource allows the creation and management of ZIA forwarding control Proxies for third-party proxy services integration between Zscaler Internet Access and Zscaler Private Access. This resource can then be associated with a ZIA Forwarding Control Rule.

        ## Example Usage

        ### No Certificate

        ### With Certificate

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_forwarding_control_proxies** can be imported by using `<PROXY_ID>` or `<PROXY_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/forwardingControlProxies:ForwardingControlProxies example <proxy_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/forwardingControlProxies:ForwardingControlProxies example <proxy_name>
        ```

        :param str resource_name: The name of the resource.
        :param ForwardingControlProxiesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ForwardingControlProxiesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[builtins.str]] = None,
                 base64_encode_xau_header: Optional[pulumi.Input[builtins.bool]] = None,
                 certs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ForwardingControlProxiesCertArgs', 'ForwardingControlProxiesCertArgsDict']]]]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 insert_xau_header: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ForwardingControlProxiesArgs.__new__(ForwardingControlProxiesArgs)

            __props__.__dict__["address"] = address
            __props__.__dict__["base64_encode_xau_header"] = base64_encode_xau_header
            __props__.__dict__["certs"] = certs
            __props__.__dict__["description"] = description
            __props__.__dict__["insert_xau_header"] = insert_xau_header
            __props__.__dict__["name"] = name
            __props__.__dict__["port"] = port
            __props__.__dict__["type"] = type
            __props__.__dict__["proxy_id"] = None
        super(ForwardingControlProxies, __self__).__init__(
            'zia:index/forwardingControlProxies:ForwardingControlProxies',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address: Optional[pulumi.Input[builtins.str]] = None,
            base64_encode_xau_header: Optional[pulumi.Input[builtins.bool]] = None,
            certs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ForwardingControlProxiesCertArgs', 'ForwardingControlProxiesCertArgsDict']]]]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            insert_xau_header: Optional[pulumi.Input[builtins.bool]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            port: Optional[pulumi.Input[builtins.int]] = None,
            proxy_id: Optional[pulumi.Input[builtins.int]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None) -> 'ForwardingControlProxies':
        """
        Get an existing ForwardingControlProxies resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] address: The IP address or the FQDN of the third-party proxy service
        :param pulumi.Input[builtins.bool] base64_encode_xau_header: (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ForwardingControlProxiesCertArgs', 'ForwardingControlProxiesCertArgsDict']]]] certs: (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
        :param pulumi.Input[builtins.str] description: (String) Additional notes or information
        :param pulumi.Input[builtins.bool] insert_xau_header: (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
        :param pulumi.Input[builtins.str] name: Proxy name for the third-party proxy services
        :param pulumi.Input[builtins.int] port: The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
        :param pulumi.Input[builtins.str] type: Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ForwardingControlProxiesState.__new__(_ForwardingControlProxiesState)

        __props__.__dict__["address"] = address
        __props__.__dict__["base64_encode_xau_header"] = base64_encode_xau_header
        __props__.__dict__["certs"] = certs
        __props__.__dict__["description"] = description
        __props__.__dict__["insert_xau_header"] = insert_xau_header
        __props__.__dict__["name"] = name
        __props__.__dict__["port"] = port
        __props__.__dict__["proxy_id"] = proxy_id
        __props__.__dict__["type"] = type
        return ForwardingControlProxies(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The IP address or the FQDN of the third-party proxy service
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="base64EncodeXauHeader")
    def base64_encode_xau_header(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        (Boolean) Flag indicating whether the added X-Authenticated-User header is Base64 encoded. When enabled, the user ID is encoded using the Base64 encoding method.
        """
        return pulumi.get(self, "base64_encode_xau_header")

    @property
    @pulumi.getter
    def certs(self) -> pulumi.Output[Optional[Sequence['outputs.ForwardingControlProxiesCert']]]:
        """
        (Set of Objects) The root certificate used by the third-party proxy to perform SSL inspection. This root certificate is used by Zscaler to validate the SSL leaf certificates signed by the upstream proxy. The required root certificate appears in this drop-down list only if it is uploaded from the Administration > Root Certificates page.
        """
        return pulumi.get(self, "certs")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Additional notes or information
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="insertXauHeader")
    def insert_xau_header(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        (Boolean) Flag indicating whether X-Authenticated-User header is added by the proxy. Enable to automatically insert authenticated user ID to the HTTP header, X-Authenticated-User.
        """
        return pulumi.get(self, "insert_xau_header")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Proxy name for the third-party proxy services
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The port number on which the third-party proxy service listens to the requests forwarded from Zscaler
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="proxyId")
    def proxy_id(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "proxy_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Gateway type. Supported values: `PROXYCHAIN`, `ZIA`, `ECSELF`
        """
        return pulumi.get(self, "type")

