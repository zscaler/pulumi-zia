# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'AdminUsersAdminScopeEntitiesArgs',
    'AdminUsersRoleArgs',
    'DLPDictionariesExactDataMatchDetailArgs',
    'DLPDictionariesIdmProfileMatchAccuracyArgs',
    'DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs',
    'DLPDictionariesPatternArgs',
    'DLPDictionariesPhraseArgs',
    'DLPWebRulesAuditorArgs',
    'DLPWebRulesDepartmentsArgs',
    'DLPWebRulesDlpEnginesArgs',
    'DLPWebRulesExcludedDepartmentsArgs',
    'DLPWebRulesExcludedGroupsArgs',
    'DLPWebRulesExcludedUsersArgs',
    'DLPWebRulesGroupsArgs',
    'DLPWebRulesIcapServerArgs',
    'DLPWebRulesLabelsArgs',
    'DLPWebRulesLocationGroupsArgs',
    'DLPWebRulesLocationsArgs',
    'DLPWebRulesNotificationTemplateArgs',
    'DLPWebRulesTimeWindowsArgs',
    'DLPWebRulesUrlCategoriesArgs',
    'DLPWebRulesUsersArgs',
    'DLPWebRulesWorkloadGroupArgs',
    'FirewallFilteringNetworkServicesDestTcpPortArgs',
    'FirewallFilteringNetworkServicesDestUdpPortArgs',
    'FirewallFilteringNetworkServicesSrcTcpPortArgs',
    'FirewallFilteringNetworkServicesSrcUdpPortArgs',
    'FirewallFilteringRuleAppServiceGroupsArgs',
    'FirewallFilteringRuleAppServicesArgs',
    'FirewallFilteringRuleDepartmentsArgs',
    'FirewallFilteringRuleDestIpGroupsArgs',
    'FirewallFilteringRuleDeviceGroupsArgs',
    'FirewallFilteringRuleDevicesArgs',
    'FirewallFilteringRuleGroupsArgs',
    'FirewallFilteringRuleLabelsArgs',
    'FirewallFilteringRuleLocationGroupsArgs',
    'FirewallFilteringRuleLocationsArgs',
    'FirewallFilteringRuleNwApplicationGroupsArgs',
    'FirewallFilteringRuleNwServiceGroupsArgs',
    'FirewallFilteringRuleNwServicesArgs',
    'FirewallFilteringRuleSrcIpGroupsArgs',
    'FirewallFilteringRuleTimeWindowsArgs',
    'FirewallFilteringRuleUsersArgs',
    'FirewallFilteringRuleWorkloadGroupArgs',
    'FirewallFilteringRuleZpaAppSegmentArgs',
    'FirewallFilteringServiceGroupsServiceArgs',
    'ForwardingControlRuleAppServiceGroupsArgs',
    'ForwardingControlRuleDepartmentsArgs',
    'ForwardingControlRuleDestIpGroupsArgs',
    'ForwardingControlRuleDestIpv6GroupsArgs',
    'ForwardingControlRuleEcGroupsArgs',
    'ForwardingControlRuleGroupsArgs',
    'ForwardingControlRuleLabelsArgs',
    'ForwardingControlRuleLocationGroupsArgs',
    'ForwardingControlRuleLocationsArgs',
    'ForwardingControlRuleNwApplicationGroupsArgs',
    'ForwardingControlRuleNwServiceGroupsArgs',
    'ForwardingControlRuleNwServicesArgs',
    'ForwardingControlRuleProxyGatewayArgs',
    'ForwardingControlRuleSrcIpGroupsArgs',
    'ForwardingControlRuleSrcIpv6GroupsArgs',
    'ForwardingControlRuleUsersArgs',
    'ForwardingControlRuleZpaAppSegmentArgs',
    'ForwardingControlRuleZpaApplicationSegmentGroupsArgs',
    'ForwardingControlRuleZpaApplicationSegmentsArgs',
    'ForwardingControlRuleZpaGatewayArgs',
    'ForwardingControlZPAGatewayZpaAppSegmentArgs',
    'ForwardingControlZPAGatewayZpaServerGroupArgs',
    'LocationManagementVpnCredentialArgs',
    'TrafficForwardingGRETunnelPrimaryDestVipArgs',
    'TrafficForwardingGRETunnelSecondaryDestVipArgs',
    'URLCategoriesScopeArgs',
    'URLCategoriesScopeScopeEntitiesArgs',
    'URLCategoriesScopeScopeGroupMemberEntitiesArgs',
    'URLCategoriesUrlKeywordCountsArgs',
    'URLFilteringRulesCbiProfileArgs',
    'URLFilteringRulesDepartmentsArgs',
    'URLFilteringRulesDeviceGroupsArgs',
    'URLFilteringRulesDevicesArgs',
    'URLFilteringRulesGroupsArgs',
    'URLFilteringRulesLabelsArgs',
    'URLFilteringRulesLocationGroupsArgs',
    'URLFilteringRulesLocationsArgs',
    'URLFilteringRulesOverrideGroupsArgs',
    'URLFilteringRulesOverrideUsersArgs',
    'URLFilteringRulesTimeWindowsArgs',
    'URLFilteringRulesUsersArgs',
    'URLFilteringRulesWorkloadGroupArgs',
    'UserManagementDepartmentArgs',
    'UserManagementGroupsArgs',
    'GetLocationGroupsDynamicLocationGroupCriteriaArgs',
    'GetLocationGroupsDynamicLocationGroupCriteriaCityArgs',
    'GetLocationGroupsDynamicLocationGroupCriteriaManagedByArgs',
    'GetLocationGroupsDynamicLocationGroupCriteriaNameArgs',
    'GetSandboxReportExploitArgs',
    'GetSandboxReportNetworkingArgs',
    'GetSandboxReportPersistenceArgs',
    'GetSandboxReportSecurityBypassArgs',
    'GetSandboxReportSpywareArgs',
    'GetSandboxReportStealthArgs',
]

@pulumi.input_type
class AdminUsersAdminScopeEntitiesArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class AdminUsersRoleArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] id: Identifier that uniquely identifies an entity
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class DLPDictionariesExactDataMatchDetailArgs:
    def __init__(__self__, *,
                 dictionary_edm_mapping_id: Optional[pulumi.Input[int]] = None,
                 primary_field: Optional[pulumi.Input[int]] = None,
                 schema_id: Optional[pulumi.Input[int]] = None,
                 secondary_field_match_on: Optional[pulumi.Input[str]] = None,
                 secondary_fields: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        :param pulumi.Input[int] dictionary_edm_mapping_id: The unique identifier for the EDM mapping.
        :param pulumi.Input[int] primary_field: The EDM template's primary field.
        :param pulumi.Input[int] schema_id: The unique identifier for the EDM template (or schema).
        :param pulumi.Input[str] secondary_field_match_on: The EDM secondary field to match on.
               - `"MATCHON_NONE"`
               - `"MATCHON_ANY_1"`
               - `"MATCHON_ANY_2"`
               - `"MATCHON_ANY_3"`
               - `"MATCHON_ANY_4"`
               - `"MATCHON_ANY_5"`
               - `"MATCHON_ANY_6"`
               - `"MATCHON_ANY_7"`
               - `"MATCHON_ANY_8"`
               - `"MATCHON_ANY_9"`
               - `"MATCHON_ANY_10"`
               - `"MATCHON_ANY_11"`
               - `"MATCHON_ANY_12"`
               - `"MATCHON_ANY_13"`
               - `"MATCHON_ANY_14"`
               - `"MATCHON_ANY_15"`
               - `"MATCHON_ALL"`
        :param pulumi.Input[Sequence[pulumi.Input[int]]] secondary_fields: The EDM template's secondary fields.
        """
        if dictionary_edm_mapping_id is not None:
            pulumi.set(__self__, "dictionary_edm_mapping_id", dictionary_edm_mapping_id)
        if primary_field is not None:
            pulumi.set(__self__, "primary_field", primary_field)
        if schema_id is not None:
            pulumi.set(__self__, "schema_id", schema_id)
        if secondary_field_match_on is not None:
            pulumi.set(__self__, "secondary_field_match_on", secondary_field_match_on)
        if secondary_fields is not None:
            pulumi.set(__self__, "secondary_fields", secondary_fields)

    @property
    @pulumi.getter(name="dictionaryEdmMappingId")
    def dictionary_edm_mapping_id(self) -> Optional[pulumi.Input[int]]:
        """
        The unique identifier for the EDM mapping.
        """
        return pulumi.get(self, "dictionary_edm_mapping_id")

    @dictionary_edm_mapping_id.setter
    def dictionary_edm_mapping_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dictionary_edm_mapping_id", value)

    @property
    @pulumi.getter(name="primaryField")
    def primary_field(self) -> Optional[pulumi.Input[int]]:
        """
        The EDM template's primary field.
        """
        return pulumi.get(self, "primary_field")

    @primary_field.setter
    def primary_field(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "primary_field", value)

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> Optional[pulumi.Input[int]]:
        """
        The unique identifier for the EDM template (or schema).
        """
        return pulumi.get(self, "schema_id")

    @schema_id.setter
    def schema_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "schema_id", value)

    @property
    @pulumi.getter(name="secondaryFieldMatchOn")
    def secondary_field_match_on(self) -> Optional[pulumi.Input[str]]:
        """
        The EDM secondary field to match on.
        - `"MATCHON_NONE"`
        - `"MATCHON_ANY_1"`
        - `"MATCHON_ANY_2"`
        - `"MATCHON_ANY_3"`
        - `"MATCHON_ANY_4"`
        - `"MATCHON_ANY_5"`
        - `"MATCHON_ANY_6"`
        - `"MATCHON_ANY_7"`
        - `"MATCHON_ANY_8"`
        - `"MATCHON_ANY_9"`
        - `"MATCHON_ANY_10"`
        - `"MATCHON_ANY_11"`
        - `"MATCHON_ANY_12"`
        - `"MATCHON_ANY_13"`
        - `"MATCHON_ANY_14"`
        - `"MATCHON_ANY_15"`
        - `"MATCHON_ALL"`
        """
        return pulumi.get(self, "secondary_field_match_on")

    @secondary_field_match_on.setter
    def secondary_field_match_on(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_field_match_on", value)

    @property
    @pulumi.getter(name="secondaryFields")
    def secondary_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        The EDM template's secondary fields.
        """
        return pulumi.get(self, "secondary_fields")

    @secondary_fields.setter
    def secondary_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "secondary_fields", value)


@pulumi.input_type
class DLPDictionariesIdmProfileMatchAccuracyArgs:
    def __init__(__self__, *,
                 adp_idm_profiles: Optional[pulumi.Input[Sequence[pulumi.Input['DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs']]]] = None,
                 match_accuracy: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs']]] adp_idm_profiles: The IDM template reference.
        :param pulumi.Input[str] match_accuracy: The IDM template match accuracy.
               - `"LOW"`
               - `"MEDIUM"`
               - `"HEAVY"`
        """
        if adp_idm_profiles is not None:
            pulumi.set(__self__, "adp_idm_profiles", adp_idm_profiles)
        if match_accuracy is not None:
            pulumi.set(__self__, "match_accuracy", match_accuracy)

    @property
    @pulumi.getter(name="adpIdmProfiles")
    def adp_idm_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs']]]]:
        """
        The IDM template reference.
        """
        return pulumi.get(self, "adp_idm_profiles")

    @adp_idm_profiles.setter
    def adp_idm_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs']]]]):
        pulumi.set(self, "adp_idm_profiles", value)

    @property
    @pulumi.getter(name="matchAccuracy")
    def match_accuracy(self) -> Optional[pulumi.Input[str]]:
        """
        The IDM template match accuracy.
        - `"LOW"`
        - `"MEDIUM"`
        - `"HEAVY"`
        """
        return pulumi.get(self, "match_accuracy")

    @match_accuracy.setter
    def match_accuracy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_accuracy", value)


@pulumi.input_type
class DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs:
    def __init__(__self__, *,
                 extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[int]] = None):
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class DLPDictionariesPatternArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: The action applied to a DLP dictionary using patterns. The following values are supported:
        :param pulumi.Input[str] pattern: DLP dictionary pattern
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The action applied to a DLP dictionary using patterns. The following values are supported:
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        DLP dictionary pattern
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class DLPDictionariesPhraseArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 phrase: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] action: The action applied to a DLP dictionary using patterns. The following values are supported:
        :param pulumi.Input[str] phrase: DLP dictionary phrase
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if phrase is not None:
            pulumi.set(__self__, "phrase", phrase)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The action applied to a DLP dictionary using patterns. The following values are supported:
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def phrase(self) -> Optional[pulumi.Input[str]]:
        """
        DLP dictionary phrase
        """
        return pulumi.get(self, "phrase")

    @phrase.setter
    def phrase(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phrase", value)


@pulumi.input_type
class DLPWebRulesAuditorArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int]):
        """
        :param pulumi.Input[int] id: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class DLPWebRulesDepartmentsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class DLPWebRulesDlpEnginesArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class DLPWebRulesExcludedDepartmentsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class DLPWebRulesExcludedGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class DLPWebRulesExcludedUsersArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class DLPWebRulesGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class DLPWebRulesIcapServerArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int]):
        """
        :param pulumi.Input[int] id: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class DLPWebRulesLabelsArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int]):
        """
        :param pulumi.Input[int] id: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class DLPWebRulesLocationGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class DLPWebRulesLocationsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class DLPWebRulesNotificationTemplateArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int]):
        """
        :param pulumi.Input[int] id: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class DLPWebRulesTimeWindowsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class DLPWebRulesUrlCategoriesArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class DLPWebRulesUsersArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class DLPWebRulesWorkloadGroupArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[int] id: A unique identifier assigned to the workload group
        :param pulumi.Input[str] name: The name of the workload group
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallFilteringNetworkServicesDestTcpPortArgs:
    def __init__(__self__, *,
                 end: Optional[pulumi.Input[int]] = None,
                 start: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end: > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[int]]:
        """
        > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class FirewallFilteringNetworkServicesDestUdpPortArgs:
    def __init__(__self__, *,
                 end: Optional[pulumi.Input[int]] = None,
                 start: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end: > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[int]]:
        """
        > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class FirewallFilteringNetworkServicesSrcTcpPortArgs:
    def __init__(__self__, *,
                 end: Optional[pulumi.Input[int]] = None,
                 start: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end: > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[int]]:
        """
        > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class FirewallFilteringNetworkServicesSrcUdpPortArgs:
    def __init__(__self__, *,
                 end: Optional[pulumi.Input[int]] = None,
                 start: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] end: > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[int]]:
        """
        > **NOTE** The `end` port parameter must always be greater than the value defined in the `start` port.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class FirewallFilteringRuleAppServiceGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleAppServicesArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleDepartmentsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleDestIpGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleDeviceGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleDevicesArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleLabelsArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int]):
        """
        :param pulumi.Input[int] id: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class FirewallFilteringRuleLocationGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleLocationsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleNwApplicationGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleNwServiceGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleNwServicesArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleSrcIpGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleTimeWindowsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleUsersArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class FirewallFilteringRuleWorkloadGroupArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[int] id: A unique identifier assigned to the workload group
        :param pulumi.Input[str] name: The name of the workload group
               
               * `Other Exported Arguments`
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the workload group

        * `Other Exported Arguments`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallFilteringRuleZpaAppSegmentArgs:
    def __init__(__self__, *,
                 external_id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] external_id: External ID of the application segment.
        :param pulumi.Input[str] name: The name of the workload group
               
               * `Other Exported Arguments`
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Input[str]:
        """
        External ID of the application segment.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the workload group

        * `Other Exported Arguments`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FirewallFilteringServiceGroupsServiceArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleAppServiceGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleDepartmentsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleDestIpGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleDestIpv6GroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleEcGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleLabelsArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int]):
        """
        :param pulumi.Input[int] id: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class ForwardingControlRuleLocationGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleLocationsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleNwApplicationGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleNwServiceGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleNwServicesArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleProxyGatewayArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[int] id: (int) Identifier that uniquely identifies an entity
        :param pulumi.Input[str] name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ForwardingControlRuleSrcIpGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleSrcIpv6GroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleUsersArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleZpaAppSegmentArgs:
    def __init__(__self__, *,
                 external_id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] external_id: (int) Identifier that uniquely identifies an entity
        :param pulumi.Input[str] name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Input[str]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ForwardingControlRuleZpaApplicationSegmentGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleZpaApplicationSegmentsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: (int) Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class ForwardingControlRuleZpaGatewayArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[int] id: (int) Identifier that uniquely identifies an entity
        :param pulumi.Input[str] name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        (int) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ForwardingControlZPAGatewayZpaAppSegmentArgs:
    def __init__(__self__, *,
                 external_id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] external_id: An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        :param pulumi.Input[str] name: The configured name of the entity
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Input[str]:
        """
        An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ForwardingControlZPAGatewayZpaServerGroupArgs:
    def __init__(__self__, *,
                 external_id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] external_id: An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        :param pulumi.Input[str] name: The configured name of the entity
        """
        pulumi.set(__self__, "external_id", external_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Input[str]:
        """
        An external identifier used for an entity that is managed outside of ZIA. Examples include zpaServerGroup and zpaAppSegments. This field is not applicable to ZIA-managed entities.
        """
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LocationManagementVpnCredentialArgs:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 pre_shared_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Identifier that uniquely identifies an entity
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if pre_shared_key is not None:
            pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_shared_key")

    @pre_shared_key.setter
    def pre_shared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_shared_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TrafficForwardingGRETunnelPrimaryDestVipArgs:
    def __init__(__self__, *,
                 datacenter: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 private_service_edge: Optional[pulumi.Input[bool]] = None,
                 virtual_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] datacenter: Data center information
        :param pulumi.Input[int] id: Unique identifer of the GRE virtual IP address (VIP)
        :param pulumi.Input[bool] private_service_edge: Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        :param pulumi.Input[str] virtual_ip: GRE cluster virtual IP address (VIP)
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_service_edge is not None:
            pulumi.set(__self__, "private_service_edge", private_service_edge)
        if virtual_ip is not None:
            pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[str]]:
        """
        Data center information
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        """
        return pulumi.get(self, "private_service_edge")

    @private_service_edge.setter
    def private_service_edge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_service_edge", value)

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> Optional[pulumi.Input[str]]:
        """
        GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")

    @virtual_ip.setter
    def virtual_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_ip", value)


@pulumi.input_type
class TrafficForwardingGRETunnelSecondaryDestVipArgs:
    def __init__(__self__, *,
                 datacenter: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 private_service_edge: Optional[pulumi.Input[bool]] = None,
                 virtual_ip: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] datacenter: Data center information
        :param pulumi.Input[int] id: Unique identifer of the GRE virtual IP address (VIP)
        :param pulumi.Input[bool] private_service_edge: Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        :param pulumi.Input[str] virtual_ip: GRE cluster virtual IP address (VIP)
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_service_edge is not None:
            pulumi.set(__self__, "private_service_edge", private_service_edge)
        if virtual_ip is not None:
            pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[pulumi.Input[str]]:
        """
        Data center information
        """
        return pulumi.get(self, "datacenter")

    @datacenter.setter
    def datacenter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datacenter", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> Optional[pulumi.Input[bool]]:
        """
        Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        """
        return pulumi.get(self, "private_service_edge")

    @private_service_edge.setter
    def private_service_edge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_service_edge", value)

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> Optional[pulumi.Input[str]]:
        """
        GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")

    @virtual_ip.setter
    def virtual_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_ip", value)


@pulumi.input_type
class URLCategoriesScopeArgs:
    def __init__(__self__, *,
                 scope_entities: Optional[pulumi.Input['URLCategoriesScopeScopeEntitiesArgs']] = None,
                 scope_group_member_entities: Optional[pulumi.Input['URLCategoriesScopeScopeGroupMemberEntitiesArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['URLCategoriesScopeScopeEntitiesArgs'] scope_entities: list of scope IDs
        :param pulumi.Input['URLCategoriesScopeScopeGroupMemberEntitiesArgs'] scope_group_member_entities: Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        :param pulumi.Input[str] type: The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        if scope_entities is not None:
            pulumi.set(__self__, "scope_entities", scope_entities)
        if scope_group_member_entities is not None:
            pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Optional[pulumi.Input['URLCategoriesScopeScopeEntitiesArgs']]:
        """
        list of scope IDs
        """
        return pulumi.get(self, "scope_entities")

    @scope_entities.setter
    def scope_entities(self, value: Optional[pulumi.Input['URLCategoriesScopeScopeEntitiesArgs']]):
        pulumi.set(self, "scope_entities", value)

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Optional[pulumi.Input['URLCategoriesScopeScopeGroupMemberEntitiesArgs']]:
        """
        Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @scope_group_member_entities.setter
    def scope_group_member_entities(self, value: Optional[pulumi.Input['URLCategoriesScopeScopeGroupMemberEntitiesArgs']]):
        pulumi.set(self, "scope_group_member_entities", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class URLCategoriesScopeScopeEntitiesArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLCategoriesScopeScopeGroupMemberEntitiesArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLCategoriesUrlKeywordCountsArgs:
    def __init__(__self__, *,
                 retain_parent_keyword_count: Optional[pulumi.Input[int]] = None,
                 retain_parent_url_count: Optional[pulumi.Input[int]] = None,
                 total_keyword_count: Optional[pulumi.Input[int]] = None,
                 total_url_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] retain_parent_keyword_count: Count of total keywords with retain parent category.
        :param pulumi.Input[int] retain_parent_url_count: Count of URLs with retain parent category.
        :param pulumi.Input[int] total_keyword_count: Total keyword count for the category.
        :param pulumi.Input[int] total_url_count: Custom URL count for the category.
        """
        if retain_parent_keyword_count is not None:
            pulumi.set(__self__, "retain_parent_keyword_count", retain_parent_keyword_count)
        if retain_parent_url_count is not None:
            pulumi.set(__self__, "retain_parent_url_count", retain_parent_url_count)
        if total_keyword_count is not None:
            pulumi.set(__self__, "total_keyword_count", total_keyword_count)
        if total_url_count is not None:
            pulumi.set(__self__, "total_url_count", total_url_count)

    @property
    @pulumi.getter(name="retainParentKeywordCount")
    def retain_parent_keyword_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of total keywords with retain parent category.
        """
        return pulumi.get(self, "retain_parent_keyword_count")

    @retain_parent_keyword_count.setter
    def retain_parent_keyword_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retain_parent_keyword_count", value)

    @property
    @pulumi.getter(name="retainParentUrlCount")
    def retain_parent_url_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of URLs with retain parent category.
        """
        return pulumi.get(self, "retain_parent_url_count")

    @retain_parent_url_count.setter
    def retain_parent_url_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retain_parent_url_count", value)

    @property
    @pulumi.getter(name="totalKeywordCount")
    def total_keyword_count(self) -> Optional[pulumi.Input[int]]:
        """
        Total keyword count for the category.
        """
        return pulumi.get(self, "total_keyword_count")

    @total_keyword_count.setter
    def total_keyword_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_keyword_count", value)

    @property
    @pulumi.getter(name="totalUrlCount")
    def total_url_count(self) -> Optional[pulumi.Input[int]]:
        """
        Custom URL count for the category.
        """
        return pulumi.get(self, "total_url_count")

    @total_url_count.setter
    def total_url_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_url_count", value)


@pulumi.input_type
class URLFilteringRulesCbiProfileArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: A unique identifier assigned to the workload group
        :param pulumi.Input[str] name: Name of the Firewall Filtering policy rule
        :param pulumi.Input[str] url: The browser isolation profile URL
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The browser isolation profile URL
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class URLFilteringRulesDepartmentsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLFilteringRulesDeviceGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLFilteringRulesDevicesArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLFilteringRulesGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLFilteringRulesLabelsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLFilteringRulesLocationGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLFilteringRulesLocationsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLFilteringRulesOverrideGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLFilteringRulesOverrideUsersArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLFilteringRulesTimeWindowsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLFilteringRulesUsersArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: A unique identifier assigned to the workload group
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLFilteringRulesWorkloadGroupArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[int] id: A unique identifier assigned to the workload group
        :param pulumi.Input[str] name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        """
        A unique identifier assigned to the workload group
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserManagementDepartmentArgs:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 deleted: Optional[pulumi.Input[bool]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 idp_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comments: Additional information about this department
        :param pulumi.Input[int] idp_id: Identity provider (IdP) ID
        :param pulumi.Input[str] name: User name. This appears when choosing users for policies.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if deleted is not None:
            pulumi.set(__self__, "deleted", deleted)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information about this department
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def deleted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "deleted")

    @deleted.setter
    def deleted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deleted", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[pulumi.Input[int]]:
        """
        Identity provider (IdP) ID
        """
        return pulumi.get(self, "idp_id")

    @idp_id.setter
    def idp_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idp_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User name. This appears when choosing users for policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class UserManagementGroupsArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class GetLocationGroupsDynamicLocationGroupCriteriaArgs:
    def __init__(__self__, *,
                 enable_bandwidth_control: bool,
                 enable_caution: bool,
                 enable_xff_forwarding: bool,
                 enforce_aup: bool,
                 enforce_authentication: bool,
                 enforce_firewall_control: bool,
                 managed_bies: Sequence['GetLocationGroupsDynamicLocationGroupCriteriaManagedByArgs'],
                 cities: Optional[Sequence['GetLocationGroupsDynamicLocationGroupCriteriaCityArgs']] = None,
                 countries: Optional[Sequence[str]] = None,
                 names: Optional[Sequence['GetLocationGroupsDynamicLocationGroupCriteriaNameArgs']] = None,
                 profiles: Optional[Sequence[str]] = None):
        """
        :param bool enable_bandwidth_control: (Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.
        :param bool enable_caution: (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
        :param bool enable_xff_forwarding: (Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        :param bool enforce_aup: (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
        :param bool enforce_authentication: (Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        :param bool enforce_firewall_control: (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
        :param Sequence['GetLocationGroupsDynamicLocationGroupCriteriaManagedByArgs'] managed_bies: (Block List)
        :param Sequence['GetLocationGroupsDynamicLocationGroupCriteriaCityArgs'] cities: (Block List)
        :param Sequence[str] countries: (List of String) One or more countries from a predefined set
        :param Sequence['GetLocationGroupsDynamicLocationGroupCriteriaNameArgs'] names: Location group name
        :param Sequence[str] profiles: (List of String) One or more location profiles from a predefined set
        """
        pulumi.set(__self__, "enable_bandwidth_control", enable_bandwidth_control)
        pulumi.set(__self__, "enable_caution", enable_caution)
        pulumi.set(__self__, "enable_xff_forwarding", enable_xff_forwarding)
        pulumi.set(__self__, "enforce_aup", enforce_aup)
        pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        pulumi.set(__self__, "enforce_firewall_control", enforce_firewall_control)
        pulumi.set(__self__, "managed_bies", managed_bies)
        if cities is not None:
            pulumi.set(__self__, "cities", cities)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if names is not None:
            pulumi.set(__self__, "names", names)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)

    @property
    @pulumi.getter(name="enableBandwidthControl")
    def enable_bandwidth_control(self) -> bool:
        """
        (Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.
        """
        return pulumi.get(self, "enable_bandwidth_control")

    @enable_bandwidth_control.setter
    def enable_bandwidth_control(self, value: bool):
        pulumi.set(self, "enable_bandwidth_control", value)

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> bool:
        """
        (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
        """
        return pulumi.get(self, "enable_caution")

    @enable_caution.setter
    def enable_caution(self, value: bool):
        pulumi.set(self, "enable_caution", value)

    @property
    @pulumi.getter(name="enableXffForwarding")
    def enable_xff_forwarding(self) -> bool:
        """
        (Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        """
        return pulumi.get(self, "enable_xff_forwarding")

    @enable_xff_forwarding.setter
    def enable_xff_forwarding(self, value: bool):
        pulumi.set(self, "enable_xff_forwarding", value)

    @property
    @pulumi.getter(name="enforceAup")
    def enforce_aup(self) -> bool:
        """
        (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
        """
        return pulumi.get(self, "enforce_aup")

    @enforce_aup.setter
    def enforce_aup(self, value: bool):
        pulumi.set(self, "enforce_aup", value)

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> bool:
        """
        (Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        """
        return pulumi.get(self, "enforce_authentication")

    @enforce_authentication.setter
    def enforce_authentication(self, value: bool):
        pulumi.set(self, "enforce_authentication", value)

    @property
    @pulumi.getter(name="enforceFirewallControl")
    def enforce_firewall_control(self) -> bool:
        """
        (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
        """
        return pulumi.get(self, "enforce_firewall_control")

    @enforce_firewall_control.setter
    def enforce_firewall_control(self, value: bool):
        pulumi.set(self, "enforce_firewall_control", value)

    @property
    @pulumi.getter(name="managedBies")
    def managed_bies(self) -> Sequence['GetLocationGroupsDynamicLocationGroupCriteriaManagedByArgs']:
        """
        (Block List)
        """
        return pulumi.get(self, "managed_bies")

    @managed_bies.setter
    def managed_bies(self, value: Sequence['GetLocationGroupsDynamicLocationGroupCriteriaManagedByArgs']):
        pulumi.set(self, "managed_bies", value)

    @property
    @pulumi.getter
    def cities(self) -> Optional[Sequence['GetLocationGroupsDynamicLocationGroupCriteriaCityArgs']]:
        """
        (Block List)
        """
        return pulumi.get(self, "cities")

    @cities.setter
    def cities(self, value: Optional[Sequence['GetLocationGroupsDynamicLocationGroupCriteriaCityArgs']]):
        pulumi.set(self, "cities", value)

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        """
        (List of String) One or more countries from a predefined set
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "countries", value)

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence['GetLocationGroupsDynamicLocationGroupCriteriaNameArgs']]:
        """
        Location group name
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: Optional[Sequence['GetLocationGroupsDynamicLocationGroupCriteriaNameArgs']]):
        pulumi.set(self, "names", value)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence[str]]:
        """
        (List of String) One or more location profiles from a predefined set
        """
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "profiles", value)


@pulumi.input_type
class GetLocationGroupsDynamicLocationGroupCriteriaCityArgs:
    def __init__(__self__, *,
                 match_string: Optional[str] = None,
                 match_type: Optional[str] = None):
        """
        :param str match_string: (String) String value to be matched or partially matched
        :param str match_type: (String) Operator that performs match action
        """
        if match_string is not None:
            pulumi.set(__self__, "match_string", match_string)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[str]:
        """
        (String) String value to be matched or partially matched
        """
        return pulumi.get(self, "match_string")

    @match_string.setter
    def match_string(self, value: Optional[str]):
        pulumi.set(self, "match_string", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        """
        (String) Operator that performs match action
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[str]):
        pulumi.set(self, "match_type", value)


@pulumi.input_type
class GetLocationGroupsDynamicLocationGroupCriteriaManagedByArgs:
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the location group
        :param str name: Location group name
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Mapping[str, str]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the location group
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Location group name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetLocationGroupsDynamicLocationGroupCriteriaNameArgs:
    def __init__(__self__, *,
                 match_string: Optional[str] = None,
                 match_type: Optional[str] = None):
        """
        :param str match_string: (String) String value to be matched or partially matched
        :param str match_type: (String) Operator that performs match action
        """
        if match_string is not None:
            pulumi.set(__self__, "match_string", match_string)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[str]:
        """
        (String) String value to be matched or partially matched
        """
        return pulumi.get(self, "match_string")

    @match_string.setter
    def match_string(self, value: Optional[str]):
        pulumi.set(self, "match_string", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        """
        (String) Operator that performs match action
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[str]):
        pulumi.set(self, "match_type", value)


@pulumi.input_type
class GetSandboxReportExploitArgs:
    def __init__(__self__, *,
                 risk: str,
                 signature: str,
                 signature_sources: Sequence[str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> str:
        return pulumi.get(self, "risk")

    @risk.setter
    def risk(self, value: str):
        pulumi.set(self, "risk", value)

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: str):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[str]:
        return pulumi.get(self, "signature_sources")

    @signature_sources.setter
    def signature_sources(self, value: Sequence[str]):
        pulumi.set(self, "signature_sources", value)


@pulumi.input_type
class GetSandboxReportNetworkingArgs:
    def __init__(__self__, *,
                 risk: str,
                 signature: str,
                 signature_sources: Sequence[str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> str:
        return pulumi.get(self, "risk")

    @risk.setter
    def risk(self, value: str):
        pulumi.set(self, "risk", value)

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: str):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[str]:
        return pulumi.get(self, "signature_sources")

    @signature_sources.setter
    def signature_sources(self, value: Sequence[str]):
        pulumi.set(self, "signature_sources", value)


@pulumi.input_type
class GetSandboxReportPersistenceArgs:
    def __init__(__self__, *,
                 risk: str,
                 signature: str,
                 signature_sources: Sequence[str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> str:
        return pulumi.get(self, "risk")

    @risk.setter
    def risk(self, value: str):
        pulumi.set(self, "risk", value)

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: str):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[str]:
        return pulumi.get(self, "signature_sources")

    @signature_sources.setter
    def signature_sources(self, value: Sequence[str]):
        pulumi.set(self, "signature_sources", value)


@pulumi.input_type
class GetSandboxReportSecurityBypassArgs:
    def __init__(__self__, *,
                 risk: str,
                 signature: str,
                 signature_sources: Sequence[str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> str:
        return pulumi.get(self, "risk")

    @risk.setter
    def risk(self, value: str):
        pulumi.set(self, "risk", value)

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: str):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[str]:
        return pulumi.get(self, "signature_sources")

    @signature_sources.setter
    def signature_sources(self, value: Sequence[str]):
        pulumi.set(self, "signature_sources", value)


@pulumi.input_type
class GetSandboxReportSpywareArgs:
    def __init__(__self__, *,
                 risk: str,
                 signature: str,
                 signature_sources: Sequence[str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> str:
        return pulumi.get(self, "risk")

    @risk.setter
    def risk(self, value: str):
        pulumi.set(self, "risk", value)

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: str):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[str]:
        return pulumi.get(self, "signature_sources")

    @signature_sources.setter
    def signature_sources(self, value: Sequence[str]):
        pulumi.set(self, "signature_sources", value)


@pulumi.input_type
class GetSandboxReportStealthArgs:
    def __init__(__self__, *,
                 risk: str,
                 signature: str,
                 signature_sources: Sequence[str]):
        pulumi.set(__self__, "risk", risk)
        pulumi.set(__self__, "signature", signature)
        pulumi.set(__self__, "signature_sources", signature_sources)

    @property
    @pulumi.getter
    def risk(self) -> str:
        return pulumi.get(self, "risk")

    @risk.setter
    def risk(self, value: str):
        pulumi.set(self, "risk", value)

    @property
    @pulumi.getter
    def signature(self) -> str:
        return pulumi.get(self, "signature")

    @signature.setter
    def signature(self, value: str):
        pulumi.set(self, "signature", value)

    @property
    @pulumi.getter(name="signatureSources")
    def signature_sources(self) -> Sequence[str]:
        return pulumi.get(self, "signature_sources")

    @signature_sources.setter
    def signature_sources(self, value: Sequence[str]):
        pulumi.set(self, "signature_sources", value)


