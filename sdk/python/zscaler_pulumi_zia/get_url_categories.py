# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetURLCategoriesResult',
    'AwaitableGetURLCategoriesResult',
    'get_url_categories',
    'get_url_categories_output',
]

@pulumi.output_type
class GetURLCategoriesResult:
    """
    A collection of values returned by getURLCategories.
    """
    def __init__(__self__, configured_name=None, custom_category=None, custom_ip_ranges_count=None, custom_urls_count=None, db_categorized_urls=None, description=None, editable=None, id=None, ip_ranges=None, ip_ranges_retaining_parent_categories=None, ip_ranges_retaining_parent_category_count=None, keywords=None, keywords_retaining_parent_categories=None, scopes=None, super_category=None, type=None, url_keyword_counts=None, urls=None, urls_retaining_parent_category_count=None, val=None):
        if configured_name and not isinstance(configured_name, str):
            raise TypeError("Expected argument 'configured_name' to be a str")
        pulumi.set(__self__, "configured_name", configured_name)
        if custom_category and not isinstance(custom_category, bool):
            raise TypeError("Expected argument 'custom_category' to be a bool")
        pulumi.set(__self__, "custom_category", custom_category)
        if custom_ip_ranges_count and not isinstance(custom_ip_ranges_count, int):
            raise TypeError("Expected argument 'custom_ip_ranges_count' to be a int")
        pulumi.set(__self__, "custom_ip_ranges_count", custom_ip_ranges_count)
        if custom_urls_count and not isinstance(custom_urls_count, int):
            raise TypeError("Expected argument 'custom_urls_count' to be a int")
        pulumi.set(__self__, "custom_urls_count", custom_urls_count)
        if db_categorized_urls and not isinstance(db_categorized_urls, list):
            raise TypeError("Expected argument 'db_categorized_urls' to be a list")
        pulumi.set(__self__, "db_categorized_urls", db_categorized_urls)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if editable and not isinstance(editable, bool):
            raise TypeError("Expected argument 'editable' to be a bool")
        pulumi.set(__self__, "editable", editable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_ranges and not isinstance(ip_ranges, list):
            raise TypeError("Expected argument 'ip_ranges' to be a list")
        pulumi.set(__self__, "ip_ranges", ip_ranges)
        if ip_ranges_retaining_parent_categories and not isinstance(ip_ranges_retaining_parent_categories, list):
            raise TypeError("Expected argument 'ip_ranges_retaining_parent_categories' to be a list")
        pulumi.set(__self__, "ip_ranges_retaining_parent_categories", ip_ranges_retaining_parent_categories)
        if ip_ranges_retaining_parent_category_count and not isinstance(ip_ranges_retaining_parent_category_count, int):
            raise TypeError("Expected argument 'ip_ranges_retaining_parent_category_count' to be a int")
        pulumi.set(__self__, "ip_ranges_retaining_parent_category_count", ip_ranges_retaining_parent_category_count)
        if keywords and not isinstance(keywords, list):
            raise TypeError("Expected argument 'keywords' to be a list")
        pulumi.set(__self__, "keywords", keywords)
        if keywords_retaining_parent_categories and not isinstance(keywords_retaining_parent_categories, list):
            raise TypeError("Expected argument 'keywords_retaining_parent_categories' to be a list")
        pulumi.set(__self__, "keywords_retaining_parent_categories", keywords_retaining_parent_categories)
        if scopes and not isinstance(scopes, list):
            raise TypeError("Expected argument 'scopes' to be a list")
        pulumi.set(__self__, "scopes", scopes)
        if super_category and not isinstance(super_category, str):
            raise TypeError("Expected argument 'super_category' to be a str")
        pulumi.set(__self__, "super_category", super_category)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if url_keyword_counts and not isinstance(url_keyword_counts, list):
            raise TypeError("Expected argument 'url_keyword_counts' to be a list")
        pulumi.set(__self__, "url_keyword_counts", url_keyword_counts)
        if urls and not isinstance(urls, list):
            raise TypeError("Expected argument 'urls' to be a list")
        pulumi.set(__self__, "urls", urls)
        if urls_retaining_parent_category_count and not isinstance(urls_retaining_parent_category_count, int):
            raise TypeError("Expected argument 'urls_retaining_parent_category_count' to be a int")
        pulumi.set(__self__, "urls_retaining_parent_category_count", urls_retaining_parent_category_count)
        if val and not isinstance(val, int):
            raise TypeError("Expected argument 'val' to be a int")
        pulumi.set(__self__, "val", val)

    @property
    @pulumi.getter(name="configuredName")
    def configured_name(self) -> builtins.str:
        """
        (String) Name of the URL category. This is only required for custom URL categories.
        """
        return pulumi.get(self, "configured_name")

    @property
    @pulumi.getter(name="customCategory")
    def custom_category(self) -> builtins.bool:
        """
        (Boolean) Set to true for custom URL category. Up to 48 custom URL categories can be added per organization.
        """
        return pulumi.get(self, "custom_category")

    @property
    @pulumi.getter(name="customIpRangesCount")
    def custom_ip_ranges_count(self) -> Optional[builtins.int]:
        """
        (Number) The number of custom IP address ranges associated to the URL category.
        """
        return pulumi.get(self, "custom_ip_ranges_count")

    @property
    @pulumi.getter(name="customUrlsCount")
    def custom_urls_count(self) -> builtins.int:
        """
        (Number) The number of custom URLs associated to the URL category.
        """
        return pulumi.get(self, "custom_urls_count")

    @property
    @pulumi.getter(name="dbCategorizedUrls")
    def db_categorized_urls(self) -> Sequence[builtins.str]:
        """
        (List of String) URLs added to a custom URL category are also retained under the original parent URL category (i.e., the predefined category the URL previously belonged to).
        """
        return pulumi.get(self, "db_categorized_urls")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        (String) Description of the category.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def editable(self) -> builtins.bool:
        """
        (Boolean) Value is set to false for custom URL category when due to scope user does not have edit permission
        """
        return pulumi.get(self, "editable")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        (String) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "ip_ranges")

    @property
    @pulumi.getter(name="ipRangesRetainingParentCategories")
    def ip_ranges_retaining_parent_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "ip_ranges_retaining_parent_categories")

    @property
    @pulumi.getter(name="ipRangesRetainingParentCategoryCount")
    def ip_ranges_retaining_parent_category_count(self) -> builtins.int:
        """
        (Number) The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.
        """
        return pulumi.get(self, "ip_ranges_retaining_parent_category_count")

    @property
    @pulumi.getter
    def keywords(self) -> Sequence[builtins.str]:
        """
        (List of String) Custom keywords associated to a URL category. Up to 2048 custom keywords can be added per organization across all categories (including bandwidth classes).
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter(name="keywordsRetainingParentCategories")
    def keywords_retaining_parent_categories(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "keywords_retaining_parent_categories")

    @property
    @pulumi.getter
    def scopes(self) -> Sequence['outputs.GetURLCategoriesScopeResult']:
        """
        (List of Object) Scope of the custom categories.
        """
        return pulumi.get(self, "scopes")

    @property
    @pulumi.getter(name="superCategory")
    def super_category(self) -> Optional[builtins.str]:
        """
        (String)
        """
        return pulumi.get(self, "super_category")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="urlKeywordCounts")
    def url_keyword_counts(self) -> Sequence['outputs.GetURLCategoriesUrlKeywordCountResult']:
        """
        (List of Object) URL and keyword counts for the category.
        """
        return pulumi.get(self, "url_keyword_counts")

    @property
    @pulumi.getter
    def urls(self) -> Sequence[builtins.str]:
        """
        (List of String) Custom URLs to add to a URL category. Up to 25,000 custom URLs can be added per organization across all categories (including bandwidth classes).
        """
        return pulumi.get(self, "urls")

    @property
    @pulumi.getter(name="urlsRetainingParentCategoryCount")
    def urls_retaining_parent_category_count(self) -> builtins.int:
        """
        (Number) The number of custom URLs associated to the URL category, that also need to be retained under the original parent category.
        """
        return pulumi.get(self, "urls_retaining_parent_category_count")

    @property
    @pulumi.getter
    def val(self) -> builtins.int:
        """
        (Number) The unique ID for the URL category.
        """
        return pulumi.get(self, "val")


class AwaitableGetURLCategoriesResult(GetURLCategoriesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetURLCategoriesResult(
            configured_name=self.configured_name,
            custom_category=self.custom_category,
            custom_ip_ranges_count=self.custom_ip_ranges_count,
            custom_urls_count=self.custom_urls_count,
            db_categorized_urls=self.db_categorized_urls,
            description=self.description,
            editable=self.editable,
            id=self.id,
            ip_ranges=self.ip_ranges,
            ip_ranges_retaining_parent_categories=self.ip_ranges_retaining_parent_categories,
            ip_ranges_retaining_parent_category_count=self.ip_ranges_retaining_parent_category_count,
            keywords=self.keywords,
            keywords_retaining_parent_categories=self.keywords_retaining_parent_categories,
            scopes=self.scopes,
            super_category=self.super_category,
            type=self.type,
            url_keyword_counts=self.url_keyword_counts,
            urls=self.urls,
            urls_retaining_parent_category_count=self.urls_retaining_parent_category_count,
            val=self.val)


def get_url_categories(configured_name: Optional[builtins.str] = None,
                       custom_category: Optional[builtins.bool] = None,
                       custom_ip_ranges_count: Optional[builtins.int] = None,
                       id: Optional[builtins.str] = None,
                       super_category: Optional[builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetURLCategoriesResult:
    """
    Use the **zia_url_categories** data source to get information about all or custom URL categories. By default, the response includes keywords.


    :param builtins.str configured_name: (String) Name of the URL category. This is only required for custom URL categories.
    :param builtins.bool custom_category: (Boolean) Set to true for custom URL category. Up to 48 custom URL categories can be added per organization.
    :param builtins.int custom_ip_ranges_count: (Number) The number of custom IP address ranges associated to the URL category.
    :param builtins.str id: URL category
    :param builtins.str super_category: (String)
    """
    __args__ = dict()
    __args__['configuredName'] = configured_name
    __args__['customCategory'] = custom_category
    __args__['customIpRangesCount'] = custom_ip_ranges_count
    __args__['id'] = id
    __args__['superCategory'] = super_category
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getURLCategories:getURLCategories', __args__, opts=opts, typ=GetURLCategoriesResult).value

    return AwaitableGetURLCategoriesResult(
        configured_name=pulumi.get(__ret__, 'configured_name'),
        custom_category=pulumi.get(__ret__, 'custom_category'),
        custom_ip_ranges_count=pulumi.get(__ret__, 'custom_ip_ranges_count'),
        custom_urls_count=pulumi.get(__ret__, 'custom_urls_count'),
        db_categorized_urls=pulumi.get(__ret__, 'db_categorized_urls'),
        description=pulumi.get(__ret__, 'description'),
        editable=pulumi.get(__ret__, 'editable'),
        id=pulumi.get(__ret__, 'id'),
        ip_ranges=pulumi.get(__ret__, 'ip_ranges'),
        ip_ranges_retaining_parent_categories=pulumi.get(__ret__, 'ip_ranges_retaining_parent_categories'),
        ip_ranges_retaining_parent_category_count=pulumi.get(__ret__, 'ip_ranges_retaining_parent_category_count'),
        keywords=pulumi.get(__ret__, 'keywords'),
        keywords_retaining_parent_categories=pulumi.get(__ret__, 'keywords_retaining_parent_categories'),
        scopes=pulumi.get(__ret__, 'scopes'),
        super_category=pulumi.get(__ret__, 'super_category'),
        type=pulumi.get(__ret__, 'type'),
        url_keyword_counts=pulumi.get(__ret__, 'url_keyword_counts'),
        urls=pulumi.get(__ret__, 'urls'),
        urls_retaining_parent_category_count=pulumi.get(__ret__, 'urls_retaining_parent_category_count'),
        val=pulumi.get(__ret__, 'val'))
def get_url_categories_output(configured_name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                              custom_category: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                              custom_ip_ranges_count: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                              id: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                              super_category: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetURLCategoriesResult]:
    """
    Use the **zia_url_categories** data source to get information about all or custom URL categories. By default, the response includes keywords.


    :param builtins.str configured_name: (String) Name of the URL category. This is only required for custom URL categories.
    :param builtins.bool custom_category: (Boolean) Set to true for custom URL category. Up to 48 custom URL categories can be added per organization.
    :param builtins.int custom_ip_ranges_count: (Number) The number of custom IP address ranges associated to the URL category.
    :param builtins.str id: URL category
    :param builtins.str super_category: (String)
    """
    __args__ = dict()
    __args__['configuredName'] = configured_name
    __args__['customCategory'] = custom_category
    __args__['customIpRangesCount'] = custom_ip_ranges_count
    __args__['id'] = id
    __args__['superCategory'] = super_category
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getURLCategories:getURLCategories', __args__, opts=opts, typ=GetURLCategoriesResult)
    return __ret__.apply(lambda __response__: GetURLCategoriesResult(
        configured_name=pulumi.get(__response__, 'configured_name'),
        custom_category=pulumi.get(__response__, 'custom_category'),
        custom_ip_ranges_count=pulumi.get(__response__, 'custom_ip_ranges_count'),
        custom_urls_count=pulumi.get(__response__, 'custom_urls_count'),
        db_categorized_urls=pulumi.get(__response__, 'db_categorized_urls'),
        description=pulumi.get(__response__, 'description'),
        editable=pulumi.get(__response__, 'editable'),
        id=pulumi.get(__response__, 'id'),
        ip_ranges=pulumi.get(__response__, 'ip_ranges'),
        ip_ranges_retaining_parent_categories=pulumi.get(__response__, 'ip_ranges_retaining_parent_categories'),
        ip_ranges_retaining_parent_category_count=pulumi.get(__response__, 'ip_ranges_retaining_parent_category_count'),
        keywords=pulumi.get(__response__, 'keywords'),
        keywords_retaining_parent_categories=pulumi.get(__response__, 'keywords_retaining_parent_categories'),
        scopes=pulumi.get(__response__, 'scopes'),
        super_category=pulumi.get(__response__, 'super_category'),
        type=pulumi.get(__response__, 'type'),
        url_keyword_counts=pulumi.get(__response__, 'url_keyword_counts'),
        urls=pulumi.get(__response__, 'urls'),
        urls_retaining_parent_category_count=pulumi.get(__response__, 'urls_retaining_parent_category_count'),
        val=pulumi.get(__response__, 'val')))
