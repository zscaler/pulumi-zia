# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCasbMalwareRulesResult',
    'AwaitableGetCasbMalwareRulesResult',
    'get_casb_malware_rules',
    'get_casb_malware_rules_output',
]

@pulumi.output_type
class GetCasbMalwareRulesResult:
    """
    A collection of values returned by getCasbMalwareRules.
    """
    def __init__(__self__, access_control=None, action=None, buckets=None, casb_email_labels=None, casb_tombstone_templates=None, cloud_app_tenant_ids=None, cloud_app_tenants=None, id=None, labels=None, last_modified_bies=None, last_modified_time=None, name=None, order=None, quarantine_location=None, scan_inbound_email_link=None, state=None, type=None):
        if access_control and not isinstance(access_control, str):
            raise TypeError("Expected argument 'access_control' to be a str")
        pulumi.set(__self__, "access_control", access_control)
        if action and not isinstance(action, str):
            raise TypeError("Expected argument 'action' to be a str")
        pulumi.set(__self__, "action", action)
        if buckets and not isinstance(buckets, list):
            raise TypeError("Expected argument 'buckets' to be a list")
        pulumi.set(__self__, "buckets", buckets)
        if casb_email_labels and not isinstance(casb_email_labels, list):
            raise TypeError("Expected argument 'casb_email_labels' to be a list")
        pulumi.set(__self__, "casb_email_labels", casb_email_labels)
        if casb_tombstone_templates and not isinstance(casb_tombstone_templates, list):
            raise TypeError("Expected argument 'casb_tombstone_templates' to be a list")
        pulumi.set(__self__, "casb_tombstone_templates", casb_tombstone_templates)
        if cloud_app_tenant_ids and not isinstance(cloud_app_tenant_ids, list):
            raise TypeError("Expected argument 'cloud_app_tenant_ids' to be a list")
        pulumi.set(__self__, "cloud_app_tenant_ids", cloud_app_tenant_ids)
        if cloud_app_tenants and not isinstance(cloud_app_tenants, list):
            raise TypeError("Expected argument 'cloud_app_tenants' to be a list")
        pulumi.set(__self__, "cloud_app_tenants", cloud_app_tenants)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, list):
            raise TypeError("Expected argument 'labels' to be a list")
        pulumi.set(__self__, "labels", labels)
        if last_modified_bies and not isinstance(last_modified_bies, list):
            raise TypeError("Expected argument 'last_modified_bies' to be a list")
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        if last_modified_time and not isinstance(last_modified_time, int):
            raise TypeError("Expected argument 'last_modified_time' to be a int")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if order and not isinstance(order, int):
            raise TypeError("Expected argument 'order' to be a int")
        pulumi.set(__self__, "order", order)
        if quarantine_location and not isinstance(quarantine_location, str):
            raise TypeError("Expected argument 'quarantine_location' to be a str")
        pulumi.set(__self__, "quarantine_location", quarantine_location)
        if scan_inbound_email_link and not isinstance(scan_inbound_email_link, str):
            raise TypeError("Expected argument 'scan_inbound_email_link' to be a str")
        pulumi.set(__self__, "scan_inbound_email_link", scan_inbound_email_link)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> builtins.str:
        """
        (string) Access privilege of this rule based on the admin's RBA state.
        """
        return pulumi.get(self, "access_control")

    @property
    @pulumi.getter
    def action(self) -> builtins.str:
        """
        (string) The configured action for the policy rule
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def buckets(self) -> Sequence['outputs.GetCasbMalwareRulesBucketResult']:
        return pulumi.get(self, "buckets")

    @property
    @pulumi.getter(name="casbEmailLabels")
    def casb_email_labels(self) -> Sequence['outputs.GetCasbMalwareRulesCasbEmailLabelResult']:
        return pulumi.get(self, "casb_email_labels")

    @property
    @pulumi.getter(name="casbTombstoneTemplates")
    def casb_tombstone_templates(self) -> Sequence['outputs.GetCasbMalwareRulesCasbTombstoneTemplateResult']:
        return pulumi.get(self, "casb_tombstone_templates")

    @property
    @pulumi.getter(name="cloudAppTenantIds")
    def cloud_app_tenant_ids(self) -> Sequence['outputs.GetCasbMalwareRulesCloudAppTenantIdResult']:
        return pulumi.get(self, "cloud_app_tenant_ids")

    @property
    @pulumi.getter(name="cloudAppTenants")
    def cloud_app_tenants(self) -> Sequence['outputs.GetCasbMalwareRulesCloudAppTenantResult']:
        return pulumi.get(self, "cloud_app_tenants")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        (int) A unique identifier for the tombstone template.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Sequence['outputs.GetCasbMalwareRulesLabelResult']:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetCasbMalwareRulesLastModifiedByResult']:
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> builtins.int:
        """
        (int) Last modification time of the rule.
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (string) The configured name of the tombstone template.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def order(self) -> builtins.int:
        """
        (int) Order of rule execution with respect to other SaaS Security Data at Rest Scanning DLP rules.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="quarantineLocation")
    def quarantine_location(self) -> builtins.str:
        """
        (string) Location where all the quarantined files are moved and necessary actions are taken by either deleting or restoring the data
        """
        return pulumi.get(self, "quarantine_location")

    @property
    @pulumi.getter(name="scanInboundEmailLink")
    def scan_inbound_email_link(self) -> builtins.str:
        return pulumi.get(self, "scan_inbound_email_link")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        (string) Administrative state of the rule.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        return pulumi.get(self, "type")


class AwaitableGetCasbMalwareRulesResult(GetCasbMalwareRulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCasbMalwareRulesResult(
            access_control=self.access_control,
            action=self.action,
            buckets=self.buckets,
            casb_email_labels=self.casb_email_labels,
            casb_tombstone_templates=self.casb_tombstone_templates,
            cloud_app_tenant_ids=self.cloud_app_tenant_ids,
            cloud_app_tenants=self.cloud_app_tenants,
            id=self.id,
            labels=self.labels,
            last_modified_bies=self.last_modified_bies,
            last_modified_time=self.last_modified_time,
            name=self.name,
            order=self.order,
            quarantine_location=self.quarantine_location,
            scan_inbound_email_link=self.scan_inbound_email_link,
            state=self.state,
            type=self.type)


def get_casb_malware_rules(id: Optional[builtins.int] = None,
                           name: Optional[builtins.str] = None,
                           type: Optional[builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCasbMalwareRulesResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/configuring-data-rest-scanning-malware-detection-policy)
    * [API documentation](https://help.zscaler.com/zia/saas-security-api#/casbMalwareRules-post)

    Use the **zia_casb_malware_rules** data source to get information about SaaS Security Data at Rest Scanning Malware Detection rules based on the specified rule type

    ## Example Usage

    ### By Name

    ### By ID


    :param builtins.int id: The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
    :param builtins.str name: Rule name.
    :param builtins.str type: The type of SaaS Security Data at Rest Scanning Malware rule. Supported Values:
           * `ANY`,
           * `OFLCASB_AVP_FILE`
           * `OFLCASB_AVP_EMAIL`
           * `OFLCASB_AVP_CRM`
           * `OFLCASB_AVP_ITSM`
           * `OFLCASB_AVP_COLLAB`
           * `OFLCASB_AVP_REPO`
           * `OFLCASB_AVP_STORAGE`
           * `OFLCASB_AVP_GENAI`
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getCasbMalwareRules:getCasbMalwareRules', __args__, opts=opts, typ=GetCasbMalwareRulesResult).value

    return AwaitableGetCasbMalwareRulesResult(
        access_control=pulumi.get(__ret__, 'access_control'),
        action=pulumi.get(__ret__, 'action'),
        buckets=pulumi.get(__ret__, 'buckets'),
        casb_email_labels=pulumi.get(__ret__, 'casb_email_labels'),
        casb_tombstone_templates=pulumi.get(__ret__, 'casb_tombstone_templates'),
        cloud_app_tenant_ids=pulumi.get(__ret__, 'cloud_app_tenant_ids'),
        cloud_app_tenants=pulumi.get(__ret__, 'cloud_app_tenants'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        last_modified_bies=pulumi.get(__ret__, 'last_modified_bies'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        name=pulumi.get(__ret__, 'name'),
        order=pulumi.get(__ret__, 'order'),
        quarantine_location=pulumi.get(__ret__, 'quarantine_location'),
        scan_inbound_email_link=pulumi.get(__ret__, 'scan_inbound_email_link'),
        state=pulumi.get(__ret__, 'state'),
        type=pulumi.get(__ret__, 'type'))
def get_casb_malware_rules_output(id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                                  name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                  type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCasbMalwareRulesResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/configuring-data-rest-scanning-malware-detection-policy)
    * [API documentation](https://help.zscaler.com/zia/saas-security-api#/casbMalwareRules-post)

    Use the **zia_casb_malware_rules** data source to get information about SaaS Security Data at Rest Scanning Malware Detection rules based on the specified rule type

    ## Example Usage

    ### By Name

    ### By ID


    :param builtins.int id: The type of SaaS Security Data at Rest Scanning Malware ruleData at Rest Scanning DLP rule.
    :param builtins.str name: Rule name.
    :param builtins.str type: The type of SaaS Security Data at Rest Scanning Malware rule. Supported Values:
           * `ANY`,
           * `OFLCASB_AVP_FILE`
           * `OFLCASB_AVP_EMAIL`
           * `OFLCASB_AVP_CRM`
           * `OFLCASB_AVP_ITSM`
           * `OFLCASB_AVP_COLLAB`
           * `OFLCASB_AVP_REPO`
           * `OFLCASB_AVP_STORAGE`
           * `OFLCASB_AVP_GENAI`
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getCasbMalwareRules:getCasbMalwareRules', __args__, opts=opts, typ=GetCasbMalwareRulesResult)
    return __ret__.apply(lambda __response__: GetCasbMalwareRulesResult(
        access_control=pulumi.get(__response__, 'access_control'),
        action=pulumi.get(__response__, 'action'),
        buckets=pulumi.get(__response__, 'buckets'),
        casb_email_labels=pulumi.get(__response__, 'casb_email_labels'),
        casb_tombstone_templates=pulumi.get(__response__, 'casb_tombstone_templates'),
        cloud_app_tenant_ids=pulumi.get(__response__, 'cloud_app_tenant_ids'),
        cloud_app_tenants=pulumi.get(__response__, 'cloud_app_tenants'),
        id=pulumi.get(__response__, 'id'),
        labels=pulumi.get(__response__, 'labels'),
        last_modified_bies=pulumi.get(__response__, 'last_modified_bies'),
        last_modified_time=pulumi.get(__response__, 'last_modified_time'),
        name=pulumi.get(__response__, 'name'),
        order=pulumi.get(__response__, 'order'),
        quarantine_location=pulumi.get(__response__, 'quarantine_location'),
        scan_inbound_email_link=pulumi.get(__response__, 'scan_inbound_email_link'),
        state=pulumi.get(__response__, 'state'),
        type=pulumi.get(__response__, 'type')))
