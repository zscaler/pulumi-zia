# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetCloudApplicationsResult',
    'AwaitableGetCloudApplicationsResult',
    'get_cloud_applications',
    'get_cloud_applications_output',
]

@pulumi.output_type
class GetCloudApplicationsResult:
    """
    A collection of values returned by getCloudApplications.
    """
    def __init__(__self__, app_classes=None, app_name=None, applications=None, id=None, policy_type=None):
        if app_classes and not isinstance(app_classes, list):
            raise TypeError("Expected argument 'app_classes' to be a list")
        pulumi.set(__self__, "app_classes", app_classes)
        if app_name and not isinstance(app_name, str):
            raise TypeError("Expected argument 'app_name' to be a str")
        pulumi.set(__self__, "app_name", app_name)
        if applications and not isinstance(applications, list):
            raise TypeError("Expected argument 'applications' to be a list")
        pulumi.set(__self__, "applications", applications)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if policy_type and not isinstance(policy_type, str):
            raise TypeError("Expected argument 'policy_type' to be a str")
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="appClasses")
    def app_classes(self) -> Optional[Sequence[builtins.str]]:
        """
        (Set of Strings) Filter application by application category
        """
        return pulumi.get(self, "app_classes")

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[builtins.str]:
        """
        (String) Cloud application name
        """
        return pulumi.get(self, "app_name")

    @property
    @pulumi.getter
    def applications(self) -> Sequence['outputs.GetCloudApplicationsApplicationResult']:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> builtins.str:
        return pulumi.get(self, "policy_type")


class AwaitableGetCloudApplicationsResult(GetCloudApplicationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudApplicationsResult(
            app_classes=self.app_classes,
            app_name=self.app_name,
            applications=self.applications,
            id=self.id,
            policy_type=self.policy_type)


def get_cloud_applications(app_classes: Optional[Sequence[builtins.str]] = None,
                           app_name: Optional[builtins.str] = None,
                           policy_type: Optional[builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudApplicationsResult:
    """
    Use the **zia_cloud_applications** data source to Retrieves a list of Predefined and User Defined Cloud Applications associated with the DLP rules, Cloud App Control rules, Advanced Settings, Bandwidth Classes, File Type Control and SSL Inspection rules. The returned information can be associated with the attribute `cloud_applications` on supported rules.

    ## Cloud Application Category App Class Matrix

    **Note**: Refer to this matrix when configuring types vs actions for each specific rules

    |             App Class                       |
    |:-------------------------------------------:|
    |---------------------------------------------|
    |               `WEBMAIL`                     |
    |           `SOCIAL_NETWORKING`               |
    |              `STREAMING`                    |
    |                 `P2P`                       |
    |            `INSTANT_MESSAGING`              |
    |               `WEB_SEARCH`                  |
    |            `GENERAL_BROWSING`               |
    |               `ADMINISTRATION`              |
    |               `ENTERPRISE_COLLABORATION`    |
    |               `BUSINESS_PRODUCTIVITY`       |
    |               `SALES_AND_MARKETING`         |
    |               `SYSTEM_AND_DEVELOPMENT`      |
    |               `CONSUMER`                    |
    |               `FILE_SHARE`                  |
    |               `HOSTING_PROVIDER`            |
    |               `IT_SERVICES`                 |
    |               `DNS_OVER_HTTPS`              |
    |               `HUMAN_RESOURCES`             |
    |               `LEGAL`                       |
    |               `HEALTH_CARE`                 |
    |               `FINANCE`                     |
    |               `CUSTOM_CAPP`                 |
    |               `AI_ML`                       |
    |---------------------------------------------|


    :param Sequence[builtins.str] app_classes: (Set of Strings) Filter application by application category
    :param builtins.str app_name: (String) Cloud application name
    """
    __args__ = dict()
    __args__['appClasses'] = app_classes
    __args__['appName'] = app_name
    __args__['policyType'] = policy_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getCloudApplications:getCloudApplications', __args__, opts=opts, typ=GetCloudApplicationsResult).value

    return AwaitableGetCloudApplicationsResult(
        app_classes=pulumi.get(__ret__, 'app_classes'),
        app_name=pulumi.get(__ret__, 'app_name'),
        applications=pulumi.get(__ret__, 'applications'),
        id=pulumi.get(__ret__, 'id'),
        policy_type=pulumi.get(__ret__, 'policy_type'))
def get_cloud_applications_output(app_classes: Optional[pulumi.Input[Optional[Sequence[builtins.str]]]] = None,
                                  app_name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                  policy_type: Optional[pulumi.Input[builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCloudApplicationsResult]:
    """
    Use the **zia_cloud_applications** data source to Retrieves a list of Predefined and User Defined Cloud Applications associated with the DLP rules, Cloud App Control rules, Advanced Settings, Bandwidth Classes, File Type Control and SSL Inspection rules. The returned information can be associated with the attribute `cloud_applications` on supported rules.

    ## Cloud Application Category App Class Matrix

    **Note**: Refer to this matrix when configuring types vs actions for each specific rules

    |             App Class                       |
    |:-------------------------------------------:|
    |---------------------------------------------|
    |               `WEBMAIL`                     |
    |           `SOCIAL_NETWORKING`               |
    |              `STREAMING`                    |
    |                 `P2P`                       |
    |            `INSTANT_MESSAGING`              |
    |               `WEB_SEARCH`                  |
    |            `GENERAL_BROWSING`               |
    |               `ADMINISTRATION`              |
    |               `ENTERPRISE_COLLABORATION`    |
    |               `BUSINESS_PRODUCTIVITY`       |
    |               `SALES_AND_MARKETING`         |
    |               `SYSTEM_AND_DEVELOPMENT`      |
    |               `CONSUMER`                    |
    |               `FILE_SHARE`                  |
    |               `HOSTING_PROVIDER`            |
    |               `IT_SERVICES`                 |
    |               `DNS_OVER_HTTPS`              |
    |               `HUMAN_RESOURCES`             |
    |               `LEGAL`                       |
    |               `HEALTH_CARE`                 |
    |               `FINANCE`                     |
    |               `CUSTOM_CAPP`                 |
    |               `AI_ML`                       |
    |---------------------------------------------|


    :param Sequence[builtins.str] app_classes: (Set of Strings) Filter application by application category
    :param builtins.str app_name: (String) Cloud application name
    """
    __args__ = dict()
    __args__['appClasses'] = app_classes
    __args__['appName'] = app_name
    __args__['policyType'] = policy_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getCloudApplications:getCloudApplications', __args__, opts=opts, typ=GetCloudApplicationsResult)
    return __ret__.apply(lambda __response__: GetCloudApplicationsResult(
        app_classes=pulumi.get(__response__, 'app_classes'),
        app_name=pulumi.get(__response__, 'app_name'),
        applications=pulumi.get(__response__, 'applications'),
        id=pulumi.get(__response__, 'id'),
        policy_type=pulumi.get(__response__, 'policy_type')))
