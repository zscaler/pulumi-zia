# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetEndUserNotificationResult',
    'AwaitableGetEndUserNotificationResult',
    'get_end_user_notification',
    'get_end_user_notification_output',
]

@pulumi.output_type
class GetEndUserNotificationResult:
    """
    A collection of values returned by getEndUserNotification.
    """
    def __init__(__self__, aup_custom_frequency=None, aup_day_offset=None, aup_frequency=None, aup_message=None, caution_again_after=None, caution_custom_text=None, caution_per_domain=None, custom_text=None, display_company_logo=None, display_company_name=None, display_reason=None, id=None, idp_proxy_notification_text=None, notification_type=None, org_policy_link=None, quarantine_custom_notification_text=None, redirect_url=None, security_review_custom_location=None, security_review_enabled=None, security_review_submit_to_security_cloud=None, security_review_text=None, support_email=None, support_phone=None, url_cat_review_custom_location=None, url_cat_review_enabled=None, url_cat_review_submit_to_security_cloud=None, url_cat_review_text=None, web_dlp_review_custom_location=None, web_dlp_review_enabled=None, web_dlp_review_submit_to_security_cloud=None, web_dlp_review_text=None):
        if aup_custom_frequency and not isinstance(aup_custom_frequency, int):
            raise TypeError("Expected argument 'aup_custom_frequency' to be a int")
        pulumi.set(__self__, "aup_custom_frequency", aup_custom_frequency)
        if aup_day_offset and not isinstance(aup_day_offset, int):
            raise TypeError("Expected argument 'aup_day_offset' to be a int")
        pulumi.set(__self__, "aup_day_offset", aup_day_offset)
        if aup_frequency and not isinstance(aup_frequency, str):
            raise TypeError("Expected argument 'aup_frequency' to be a str")
        pulumi.set(__self__, "aup_frequency", aup_frequency)
        if aup_message and not isinstance(aup_message, str):
            raise TypeError("Expected argument 'aup_message' to be a str")
        pulumi.set(__self__, "aup_message", aup_message)
        if caution_again_after and not isinstance(caution_again_after, int):
            raise TypeError("Expected argument 'caution_again_after' to be a int")
        pulumi.set(__self__, "caution_again_after", caution_again_after)
        if caution_custom_text and not isinstance(caution_custom_text, str):
            raise TypeError("Expected argument 'caution_custom_text' to be a str")
        pulumi.set(__self__, "caution_custom_text", caution_custom_text)
        if caution_per_domain and not isinstance(caution_per_domain, bool):
            raise TypeError("Expected argument 'caution_per_domain' to be a bool")
        pulumi.set(__self__, "caution_per_domain", caution_per_domain)
        if custom_text and not isinstance(custom_text, str):
            raise TypeError("Expected argument 'custom_text' to be a str")
        pulumi.set(__self__, "custom_text", custom_text)
        if display_company_logo and not isinstance(display_company_logo, bool):
            raise TypeError("Expected argument 'display_company_logo' to be a bool")
        pulumi.set(__self__, "display_company_logo", display_company_logo)
        if display_company_name and not isinstance(display_company_name, bool):
            raise TypeError("Expected argument 'display_company_name' to be a bool")
        pulumi.set(__self__, "display_company_name", display_company_name)
        if display_reason and not isinstance(display_reason, bool):
            raise TypeError("Expected argument 'display_reason' to be a bool")
        pulumi.set(__self__, "display_reason", display_reason)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idp_proxy_notification_text and not isinstance(idp_proxy_notification_text, str):
            raise TypeError("Expected argument 'idp_proxy_notification_text' to be a str")
        pulumi.set(__self__, "idp_proxy_notification_text", idp_proxy_notification_text)
        if notification_type and not isinstance(notification_type, str):
            raise TypeError("Expected argument 'notification_type' to be a str")
        pulumi.set(__self__, "notification_type", notification_type)
        if org_policy_link and not isinstance(org_policy_link, str):
            raise TypeError("Expected argument 'org_policy_link' to be a str")
        pulumi.set(__self__, "org_policy_link", org_policy_link)
        if quarantine_custom_notification_text and not isinstance(quarantine_custom_notification_text, str):
            raise TypeError("Expected argument 'quarantine_custom_notification_text' to be a str")
        pulumi.set(__self__, "quarantine_custom_notification_text", quarantine_custom_notification_text)
        if redirect_url and not isinstance(redirect_url, str):
            raise TypeError("Expected argument 'redirect_url' to be a str")
        pulumi.set(__self__, "redirect_url", redirect_url)
        if security_review_custom_location and not isinstance(security_review_custom_location, str):
            raise TypeError("Expected argument 'security_review_custom_location' to be a str")
        pulumi.set(__self__, "security_review_custom_location", security_review_custom_location)
        if security_review_enabled and not isinstance(security_review_enabled, bool):
            raise TypeError("Expected argument 'security_review_enabled' to be a bool")
        pulumi.set(__self__, "security_review_enabled", security_review_enabled)
        if security_review_submit_to_security_cloud and not isinstance(security_review_submit_to_security_cloud, bool):
            raise TypeError("Expected argument 'security_review_submit_to_security_cloud' to be a bool")
        pulumi.set(__self__, "security_review_submit_to_security_cloud", security_review_submit_to_security_cloud)
        if security_review_text and not isinstance(security_review_text, str):
            raise TypeError("Expected argument 'security_review_text' to be a str")
        pulumi.set(__self__, "security_review_text", security_review_text)
        if support_email and not isinstance(support_email, str):
            raise TypeError("Expected argument 'support_email' to be a str")
        pulumi.set(__self__, "support_email", support_email)
        if support_phone and not isinstance(support_phone, str):
            raise TypeError("Expected argument 'support_phone' to be a str")
        pulumi.set(__self__, "support_phone", support_phone)
        if url_cat_review_custom_location and not isinstance(url_cat_review_custom_location, str):
            raise TypeError("Expected argument 'url_cat_review_custom_location' to be a str")
        pulumi.set(__self__, "url_cat_review_custom_location", url_cat_review_custom_location)
        if url_cat_review_enabled and not isinstance(url_cat_review_enabled, bool):
            raise TypeError("Expected argument 'url_cat_review_enabled' to be a bool")
        pulumi.set(__self__, "url_cat_review_enabled", url_cat_review_enabled)
        if url_cat_review_submit_to_security_cloud and not isinstance(url_cat_review_submit_to_security_cloud, bool):
            raise TypeError("Expected argument 'url_cat_review_submit_to_security_cloud' to be a bool")
        pulumi.set(__self__, "url_cat_review_submit_to_security_cloud", url_cat_review_submit_to_security_cloud)
        if url_cat_review_text and not isinstance(url_cat_review_text, str):
            raise TypeError("Expected argument 'url_cat_review_text' to be a str")
        pulumi.set(__self__, "url_cat_review_text", url_cat_review_text)
        if web_dlp_review_custom_location and not isinstance(web_dlp_review_custom_location, str):
            raise TypeError("Expected argument 'web_dlp_review_custom_location' to be a str")
        pulumi.set(__self__, "web_dlp_review_custom_location", web_dlp_review_custom_location)
        if web_dlp_review_enabled and not isinstance(web_dlp_review_enabled, bool):
            raise TypeError("Expected argument 'web_dlp_review_enabled' to be a bool")
        pulumi.set(__self__, "web_dlp_review_enabled", web_dlp_review_enabled)
        if web_dlp_review_submit_to_security_cloud and not isinstance(web_dlp_review_submit_to_security_cloud, bool):
            raise TypeError("Expected argument 'web_dlp_review_submit_to_security_cloud' to be a bool")
        pulumi.set(__self__, "web_dlp_review_submit_to_security_cloud", web_dlp_review_submit_to_security_cloud)
        if web_dlp_review_text and not isinstance(web_dlp_review_text, str):
            raise TypeError("Expected argument 'web_dlp_review_text' to be a str")
        pulumi.set(__self__, "web_dlp_review_text", web_dlp_review_text)

    @property
    @pulumi.getter(name="aupCustomFrequency")
    def aup_custom_frequency(self) -> builtins.int:
        return pulumi.get(self, "aup_custom_frequency")

    @property
    @pulumi.getter(name="aupDayOffset")
    def aup_day_offset(self) -> builtins.int:
        return pulumi.get(self, "aup_day_offset")

    @property
    @pulumi.getter(name="aupFrequency")
    def aup_frequency(self) -> builtins.str:
        return pulumi.get(self, "aup_frequency")

    @property
    @pulumi.getter(name="aupMessage")
    def aup_message(self) -> builtins.str:
        return pulumi.get(self, "aup_message")

    @property
    @pulumi.getter(name="cautionAgainAfter")
    def caution_again_after(self) -> builtins.int:
        return pulumi.get(self, "caution_again_after")

    @property
    @pulumi.getter(name="cautionCustomText")
    def caution_custom_text(self) -> builtins.str:
        return pulumi.get(self, "caution_custom_text")

    @property
    @pulumi.getter(name="cautionPerDomain")
    def caution_per_domain(self) -> builtins.bool:
        return pulumi.get(self, "caution_per_domain")

    @property
    @pulumi.getter(name="customText")
    def custom_text(self) -> builtins.str:
        return pulumi.get(self, "custom_text")

    @property
    @pulumi.getter(name="displayCompanyLogo")
    def display_company_logo(self) -> builtins.bool:
        return pulumi.get(self, "display_company_logo")

    @property
    @pulumi.getter(name="displayCompanyName")
    def display_company_name(self) -> builtins.bool:
        return pulumi.get(self, "display_company_name")

    @property
    @pulumi.getter(name="displayReason")
    def display_reason(self) -> builtins.bool:
        return pulumi.get(self, "display_reason")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpProxyNotificationText")
    def idp_proxy_notification_text(self) -> builtins.str:
        return pulumi.get(self, "idp_proxy_notification_text")

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> builtins.str:
        return pulumi.get(self, "notification_type")

    @property
    @pulumi.getter(name="orgPolicyLink")
    def org_policy_link(self) -> builtins.str:
        return pulumi.get(self, "org_policy_link")

    @property
    @pulumi.getter(name="quarantineCustomNotificationText")
    def quarantine_custom_notification_text(self) -> builtins.str:
        return pulumi.get(self, "quarantine_custom_notification_text")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> builtins.str:
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="securityReviewCustomLocation")
    def security_review_custom_location(self) -> builtins.str:
        return pulumi.get(self, "security_review_custom_location")

    @property
    @pulumi.getter(name="securityReviewEnabled")
    def security_review_enabled(self) -> builtins.bool:
        return pulumi.get(self, "security_review_enabled")

    @property
    @pulumi.getter(name="securityReviewSubmitToSecurityCloud")
    def security_review_submit_to_security_cloud(self) -> builtins.bool:
        return pulumi.get(self, "security_review_submit_to_security_cloud")

    @property
    @pulumi.getter(name="securityReviewText")
    def security_review_text(self) -> builtins.str:
        return pulumi.get(self, "security_review_text")

    @property
    @pulumi.getter(name="supportEmail")
    def support_email(self) -> builtins.str:
        return pulumi.get(self, "support_email")

    @property
    @pulumi.getter(name="supportPhone")
    def support_phone(self) -> builtins.str:
        return pulumi.get(self, "support_phone")

    @property
    @pulumi.getter(name="urlCatReviewCustomLocation")
    def url_cat_review_custom_location(self) -> builtins.str:
        return pulumi.get(self, "url_cat_review_custom_location")

    @property
    @pulumi.getter(name="urlCatReviewEnabled")
    def url_cat_review_enabled(self) -> builtins.bool:
        return pulumi.get(self, "url_cat_review_enabled")

    @property
    @pulumi.getter(name="urlCatReviewSubmitToSecurityCloud")
    def url_cat_review_submit_to_security_cloud(self) -> builtins.bool:
        return pulumi.get(self, "url_cat_review_submit_to_security_cloud")

    @property
    @pulumi.getter(name="urlCatReviewText")
    def url_cat_review_text(self) -> builtins.str:
        return pulumi.get(self, "url_cat_review_text")

    @property
    @pulumi.getter(name="webDlpReviewCustomLocation")
    def web_dlp_review_custom_location(self) -> builtins.str:
        return pulumi.get(self, "web_dlp_review_custom_location")

    @property
    @pulumi.getter(name="webDlpReviewEnabled")
    def web_dlp_review_enabled(self) -> builtins.bool:
        return pulumi.get(self, "web_dlp_review_enabled")

    @property
    @pulumi.getter(name="webDlpReviewSubmitToSecurityCloud")
    def web_dlp_review_submit_to_security_cloud(self) -> builtins.bool:
        return pulumi.get(self, "web_dlp_review_submit_to_security_cloud")

    @property
    @pulumi.getter(name="webDlpReviewText")
    def web_dlp_review_text(self) -> builtins.str:
        return pulumi.get(self, "web_dlp_review_text")


class AwaitableGetEndUserNotificationResult(GetEndUserNotificationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEndUserNotificationResult(
            aup_custom_frequency=self.aup_custom_frequency,
            aup_day_offset=self.aup_day_offset,
            aup_frequency=self.aup_frequency,
            aup_message=self.aup_message,
            caution_again_after=self.caution_again_after,
            caution_custom_text=self.caution_custom_text,
            caution_per_domain=self.caution_per_domain,
            custom_text=self.custom_text,
            display_company_logo=self.display_company_logo,
            display_company_name=self.display_company_name,
            display_reason=self.display_reason,
            id=self.id,
            idp_proxy_notification_text=self.idp_proxy_notification_text,
            notification_type=self.notification_type,
            org_policy_link=self.org_policy_link,
            quarantine_custom_notification_text=self.quarantine_custom_notification_text,
            redirect_url=self.redirect_url,
            security_review_custom_location=self.security_review_custom_location,
            security_review_enabled=self.security_review_enabled,
            security_review_submit_to_security_cloud=self.security_review_submit_to_security_cloud,
            security_review_text=self.security_review_text,
            support_email=self.support_email,
            support_phone=self.support_phone,
            url_cat_review_custom_location=self.url_cat_review_custom_location,
            url_cat_review_enabled=self.url_cat_review_enabled,
            url_cat_review_submit_to_security_cloud=self.url_cat_review_submit_to_security_cloud,
            url_cat_review_text=self.url_cat_review_text,
            web_dlp_review_custom_location=self.web_dlp_review_custom_location,
            web_dlp_review_enabled=self.web_dlp_review_enabled,
            web_dlp_review_submit_to_security_cloud=self.web_dlp_review_submit_to_security_cloud,
            web_dlp_review_text=self.web_dlp_review_text)


def get_end_user_notification(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEndUserNotificationResult:
    """
    Use the **zia_end_user_notification** data source to get information about browser-based end user notification (EUN) configuration details.

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getEndUserNotification:getEndUserNotification', __args__, opts=opts, typ=GetEndUserNotificationResult).value

    return AwaitableGetEndUserNotificationResult(
        aup_custom_frequency=pulumi.get(__ret__, 'aup_custom_frequency'),
        aup_day_offset=pulumi.get(__ret__, 'aup_day_offset'),
        aup_frequency=pulumi.get(__ret__, 'aup_frequency'),
        aup_message=pulumi.get(__ret__, 'aup_message'),
        caution_again_after=pulumi.get(__ret__, 'caution_again_after'),
        caution_custom_text=pulumi.get(__ret__, 'caution_custom_text'),
        caution_per_domain=pulumi.get(__ret__, 'caution_per_domain'),
        custom_text=pulumi.get(__ret__, 'custom_text'),
        display_company_logo=pulumi.get(__ret__, 'display_company_logo'),
        display_company_name=pulumi.get(__ret__, 'display_company_name'),
        display_reason=pulumi.get(__ret__, 'display_reason'),
        id=pulumi.get(__ret__, 'id'),
        idp_proxy_notification_text=pulumi.get(__ret__, 'idp_proxy_notification_text'),
        notification_type=pulumi.get(__ret__, 'notification_type'),
        org_policy_link=pulumi.get(__ret__, 'org_policy_link'),
        quarantine_custom_notification_text=pulumi.get(__ret__, 'quarantine_custom_notification_text'),
        redirect_url=pulumi.get(__ret__, 'redirect_url'),
        security_review_custom_location=pulumi.get(__ret__, 'security_review_custom_location'),
        security_review_enabled=pulumi.get(__ret__, 'security_review_enabled'),
        security_review_submit_to_security_cloud=pulumi.get(__ret__, 'security_review_submit_to_security_cloud'),
        security_review_text=pulumi.get(__ret__, 'security_review_text'),
        support_email=pulumi.get(__ret__, 'support_email'),
        support_phone=pulumi.get(__ret__, 'support_phone'),
        url_cat_review_custom_location=pulumi.get(__ret__, 'url_cat_review_custom_location'),
        url_cat_review_enabled=pulumi.get(__ret__, 'url_cat_review_enabled'),
        url_cat_review_submit_to_security_cloud=pulumi.get(__ret__, 'url_cat_review_submit_to_security_cloud'),
        url_cat_review_text=pulumi.get(__ret__, 'url_cat_review_text'),
        web_dlp_review_custom_location=pulumi.get(__ret__, 'web_dlp_review_custom_location'),
        web_dlp_review_enabled=pulumi.get(__ret__, 'web_dlp_review_enabled'),
        web_dlp_review_submit_to_security_cloud=pulumi.get(__ret__, 'web_dlp_review_submit_to_security_cloud'),
        web_dlp_review_text=pulumi.get(__ret__, 'web_dlp_review_text'))
def get_end_user_notification_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEndUserNotificationResult]:
    """
    Use the **zia_end_user_notification** data source to get information about browser-based end user notification (EUN) configuration details.

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getEndUserNotification:getEndUserNotification', __args__, opts=opts, typ=GetEndUserNotificationResult)
    return __ret__.apply(lambda __response__: GetEndUserNotificationResult(
        aup_custom_frequency=pulumi.get(__response__, 'aup_custom_frequency'),
        aup_day_offset=pulumi.get(__response__, 'aup_day_offset'),
        aup_frequency=pulumi.get(__response__, 'aup_frequency'),
        aup_message=pulumi.get(__response__, 'aup_message'),
        caution_again_after=pulumi.get(__response__, 'caution_again_after'),
        caution_custom_text=pulumi.get(__response__, 'caution_custom_text'),
        caution_per_domain=pulumi.get(__response__, 'caution_per_domain'),
        custom_text=pulumi.get(__response__, 'custom_text'),
        display_company_logo=pulumi.get(__response__, 'display_company_logo'),
        display_company_name=pulumi.get(__response__, 'display_company_name'),
        display_reason=pulumi.get(__response__, 'display_reason'),
        id=pulumi.get(__response__, 'id'),
        idp_proxy_notification_text=pulumi.get(__response__, 'idp_proxy_notification_text'),
        notification_type=pulumi.get(__response__, 'notification_type'),
        org_policy_link=pulumi.get(__response__, 'org_policy_link'),
        quarantine_custom_notification_text=pulumi.get(__response__, 'quarantine_custom_notification_text'),
        redirect_url=pulumi.get(__response__, 'redirect_url'),
        security_review_custom_location=pulumi.get(__response__, 'security_review_custom_location'),
        security_review_enabled=pulumi.get(__response__, 'security_review_enabled'),
        security_review_submit_to_security_cloud=pulumi.get(__response__, 'security_review_submit_to_security_cloud'),
        security_review_text=pulumi.get(__response__, 'security_review_text'),
        support_email=pulumi.get(__response__, 'support_email'),
        support_phone=pulumi.get(__response__, 'support_phone'),
        url_cat_review_custom_location=pulumi.get(__response__, 'url_cat_review_custom_location'),
        url_cat_review_enabled=pulumi.get(__response__, 'url_cat_review_enabled'),
        url_cat_review_submit_to_security_cloud=pulumi.get(__response__, 'url_cat_review_submit_to_security_cloud'),
        url_cat_review_text=pulumi.get(__response__, 'url_cat_review_text'),
        web_dlp_review_custom_location=pulumi.get(__response__, 'web_dlp_review_custom_location'),
        web_dlp_review_enabled=pulumi.get(__response__, 'web_dlp_review_enabled'),
        web_dlp_review_submit_to_security_cloud=pulumi.get(__response__, 'web_dlp_review_submit_to_security_cloud'),
        web_dlp_review_text=pulumi.get(__response__, 'web_dlp_review_text')))
