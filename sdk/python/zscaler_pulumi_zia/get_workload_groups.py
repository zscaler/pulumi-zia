# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetWorkloadGroupsResult',
    'AwaitableGetWorkloadGroupsResult',
    'get_workload_groups',
    'get_workload_groups_output',
]

@pulumi.output_type
class GetWorkloadGroupsResult:
    """
    A collection of values returned by getWorkloadGroups.
    """
    def __init__(__self__, description=None, expression=None, expression_jsons=None, id=None, last_modified_bies=None, last_modified_time=None, name=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if expression and not isinstance(expression, str):
            raise TypeError("Expected argument 'expression' to be a str")
        pulumi.set(__self__, "expression", expression)
        if expression_jsons and not isinstance(expression_jsons, list):
            raise TypeError("Expected argument 'expression_jsons' to be a list")
        pulumi.set(__self__, "expression_jsons", expression_jsons)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if last_modified_bies and not isinstance(last_modified_bies, list):
            raise TypeError("Expected argument 'last_modified_bies' to be a list")
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        if last_modified_time and not isinstance(last_modified_time, int):
            raise TypeError("Expected argument 'last_modified_time' to be a int")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (String) The description of the workload group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        (String) The workload group expression containing tag types, tags, and their relationships.
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="expressionJsons")
    def expression_jsons(self) -> Sequence['outputs.GetWorkloadGroupsExpressionJsonResult']:
        """
        (List) The workload group expression containing tag types, tags, and their relationships represented in a JSON format.
        """
        return pulumi.get(self, "expression_jsons")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        (Number) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetWorkloadGroupsLastModifiedByResult']:
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> int:
        """
        (Number) When the rule was last modified
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


class AwaitableGetWorkloadGroupsResult(GetWorkloadGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkloadGroupsResult(
            description=self.description,
            expression=self.expression,
            expression_jsons=self.expression_jsons,
            id=self.id,
            last_modified_bies=self.last_modified_bies,
            last_modified_time=self.last_modified_time,
            name=self.name)


def get_workload_groups(name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkloadGroupsResult:
    """
    Use the **zia_workload_groups** data source to get information about Workload Groups in the Zscaler Internet Access cloud or via the API. This data source can then be used as a criterion in ZIA policies such as, Firewall Filtering, URL Filtering, and Data Loss Prevention (DLP) to apply security policies to the workload traffic.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    ios = zia.get_workload_groups(name="Example")
    ```
    <!--End PulumiCodeChooser -->


    :param str name: The name of the workload group to be exported.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getWorkloadGroups:getWorkloadGroups', __args__, opts=opts, typ=GetWorkloadGroupsResult).value

    return AwaitableGetWorkloadGroupsResult(
        description=pulumi.get(__ret__, 'description'),
        expression=pulumi.get(__ret__, 'expression'),
        expression_jsons=pulumi.get(__ret__, 'expression_jsons'),
        id=pulumi.get(__ret__, 'id'),
        last_modified_bies=pulumi.get(__ret__, 'last_modified_bies'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_workload_groups)
def get_workload_groups_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWorkloadGroupsResult]:
    """
    Use the **zia_workload_groups** data source to get information about Workload Groups in the Zscaler Internet Access cloud or via the API. This data source can then be used as a criterion in ZIA policies such as, Firewall Filtering, URL Filtering, and Data Loss Prevention (DLP) to apply security policies to the workload traffic.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    ios = zia.get_workload_groups(name="Example")
    ```
    <!--End PulumiCodeChooser -->


    :param str name: The name of the workload group to be exported.
    """
    ...
