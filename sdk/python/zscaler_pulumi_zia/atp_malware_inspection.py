# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ATPMalwareInspectionArgs', 'ATPMalwareInspection']

@pulumi.input_type
class ATPMalwareInspectionArgs:
    def __init__(__self__, *,
                 inspect_inbound: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_outbound: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a ATPMalwareInspection resource.
        :param pulumi.Input[builtins.bool] inspect_inbound: A Boolean value that enables or disables scanning of incoming internet traffic for malicious content
        :param pulumi.Input[builtins.bool] inspect_outbound: A Boolean value that enables or disables scanning of outgoing internet traffic for malicious content
        """
        if inspect_inbound is not None:
            pulumi.set(__self__, "inspect_inbound", inspect_inbound)
        if inspect_outbound is not None:
            pulumi.set(__self__, "inspect_outbound", inspect_outbound)

    @property
    @pulumi.getter(name="inspectInbound")
    def inspect_inbound(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that enables or disables scanning of incoming internet traffic for malicious content
        """
        return pulumi.get(self, "inspect_inbound")

    @inspect_inbound.setter
    def inspect_inbound(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_inbound", value)

    @property
    @pulumi.getter(name="inspectOutbound")
    def inspect_outbound(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that enables or disables scanning of outgoing internet traffic for malicious content
        """
        return pulumi.get(self, "inspect_outbound")

    @inspect_outbound.setter
    def inspect_outbound(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_outbound", value)


@pulumi.input_type
class _ATPMalwareInspectionState:
    def __init__(__self__, *,
                 inspect_inbound: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_outbound: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering ATPMalwareInspection resources.
        :param pulumi.Input[builtins.bool] inspect_inbound: A Boolean value that enables or disables scanning of incoming internet traffic for malicious content
        :param pulumi.Input[builtins.bool] inspect_outbound: A Boolean value that enables or disables scanning of outgoing internet traffic for malicious content
        """
        if inspect_inbound is not None:
            pulumi.set(__self__, "inspect_inbound", inspect_inbound)
        if inspect_outbound is not None:
            pulumi.set(__self__, "inspect_outbound", inspect_outbound)

    @property
    @pulumi.getter(name="inspectInbound")
    def inspect_inbound(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that enables or disables scanning of incoming internet traffic for malicious content
        """
        return pulumi.get(self, "inspect_inbound")

    @inspect_inbound.setter
    def inspect_inbound(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_inbound", value)

    @property
    @pulumi.getter(name="inspectOutbound")
    def inspect_outbound(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that enables or disables scanning of outgoing internet traffic for malicious content
        """
        return pulumi.get(self, "inspect_outbound")

    @inspect_outbound.setter
    def inspect_outbound(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_outbound", value)


@pulumi.type_token("zia:index/aTPMalwareInspection:ATPMalwareInspection")
class ATPMalwareInspection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 inspect_inbound: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_outbound: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zia/configuring-malware-protection-policy)
        * [API documentation](https://help.zscaler.com/zia/malware-protection-policy#/cyberThreatProtection/atpMalwareInspection-put)

        The **zia_atp_malware_inspection** resource allows you to update security exceptions for the Malware Protection inspection policy. To learn more see [Configuring Advanced Settings](https://help.zscaler.com/zia/configuring-advanced-settings)

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_atp_malware_inspection** can be imported by using `inspection` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/aTPMalwareInspection:ATPMalwareInspection this "inspection"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] inspect_inbound: A Boolean value that enables or disables scanning of incoming internet traffic for malicious content
        :param pulumi.Input[builtins.bool] inspect_outbound: A Boolean value that enables or disables scanning of outgoing internet traffic for malicious content
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ATPMalwareInspectionArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zia/configuring-malware-protection-policy)
        * [API documentation](https://help.zscaler.com/zia/malware-protection-policy#/cyberThreatProtection/atpMalwareInspection-put)

        The **zia_atp_malware_inspection** resource allows you to update security exceptions for the Malware Protection inspection policy. To learn more see [Configuring Advanced Settings](https://help.zscaler.com/zia/configuring-advanced-settings)

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_atp_malware_inspection** can be imported by using `inspection` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/aTPMalwareInspection:ATPMalwareInspection this "inspection"
        ```

        :param str resource_name: The name of the resource.
        :param ATPMalwareInspectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ATPMalwareInspectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 inspect_inbound: Optional[pulumi.Input[builtins.bool]] = None,
                 inspect_outbound: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ATPMalwareInspectionArgs.__new__(ATPMalwareInspectionArgs)

            __props__.__dict__["inspect_inbound"] = inspect_inbound
            __props__.__dict__["inspect_outbound"] = inspect_outbound
        super(ATPMalwareInspection, __self__).__init__(
            'zia:index/aTPMalwareInspection:ATPMalwareInspection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            inspect_inbound: Optional[pulumi.Input[builtins.bool]] = None,
            inspect_outbound: Optional[pulumi.Input[builtins.bool]] = None) -> 'ATPMalwareInspection':
        """
        Get an existing ATPMalwareInspection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] inspect_inbound: A Boolean value that enables or disables scanning of incoming internet traffic for malicious content
        :param pulumi.Input[builtins.bool] inspect_outbound: A Boolean value that enables or disables scanning of outgoing internet traffic for malicious content
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ATPMalwareInspectionState.__new__(_ATPMalwareInspectionState)

        __props__.__dict__["inspect_inbound"] = inspect_inbound
        __props__.__dict__["inspect_outbound"] = inspect_outbound
        return ATPMalwareInspection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="inspectInbound")
    def inspect_inbound(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value that enables or disables scanning of incoming internet traffic for malicious content
        """
        return pulumi.get(self, "inspect_inbound")

    @property
    @pulumi.getter(name="inspectOutbound")
    def inspect_outbound(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value that enables or disables scanning of outgoing internet traffic for malicious content
        """
        return pulumi.get(self, "inspect_outbound")

