# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetTrafficForwardingVIPRecommendedListResult',
    'AwaitableGetTrafficForwardingVIPRecommendedListResult',
    'get_traffic_forwarding_vip_recommended_list',
    'get_traffic_forwarding_vip_recommended_list_output',
]

@pulumi.output_type
class GetTrafficForwardingVIPRecommendedListResult:
    """
    A collection of values returned by getTrafficForwardingVIPRecommendedList.
    """
    def __init__(__self__, id=None, include_current_vips=None, include_private_service_edge=None, latitude=None, lists=None, longitude=None, required_count=None, routable_ip=None, source_ip=None, subcloud=None, within_country_only=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_current_vips and not isinstance(include_current_vips, bool):
            raise TypeError("Expected argument 'include_current_vips' to be a bool")
        pulumi.set(__self__, "include_current_vips", include_current_vips)
        if include_private_service_edge and not isinstance(include_private_service_edge, bool):
            raise TypeError("Expected argument 'include_private_service_edge' to be a bool")
        pulumi.set(__self__, "include_private_service_edge", include_private_service_edge)
        if latitude and not isinstance(latitude, float):
            raise TypeError("Expected argument 'latitude' to be a float")
        pulumi.set(__self__, "latitude", latitude)
        if lists and not isinstance(lists, list):
            raise TypeError("Expected argument 'lists' to be a list")
        pulumi.set(__self__, "lists", lists)
        if longitude and not isinstance(longitude, float):
            raise TypeError("Expected argument 'longitude' to be a float")
        pulumi.set(__self__, "longitude", longitude)
        if required_count and not isinstance(required_count, int):
            raise TypeError("Expected argument 'required_count' to be a int")
        pulumi.set(__self__, "required_count", required_count)
        if routable_ip and not isinstance(routable_ip, bool):
            raise TypeError("Expected argument 'routable_ip' to be a bool")
        pulumi.set(__self__, "routable_ip", routable_ip)
        if source_ip and not isinstance(source_ip, str):
            raise TypeError("Expected argument 'source_ip' to be a str")
        pulumi.set(__self__, "source_ip", source_ip)
        if subcloud and not isinstance(subcloud, str):
            raise TypeError("Expected argument 'subcloud' to be a str")
        pulumi.set(__self__, "subcloud", subcloud)
        if within_country_only and not isinstance(within_country_only, bool):
            raise TypeError("Expected argument 'within_country_only' to be a bool")
        pulumi.set(__self__, "within_country_only", within_country_only)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeCurrentVips")
    def include_current_vips(self) -> Optional[builtins.bool]:
        """
        (Boolean) Include currently assigned VIPs.
        """
        return pulumi.get(self, "include_current_vips")

    @property
    @pulumi.getter(name="includePrivateServiceEdge")
    def include_private_service_edge(self) -> Optional[builtins.bool]:
        """
        (Boolean) Include ZIA Private Service Edge VIPs.
        """
        return pulumi.get(self, "include_private_service_edge")

    @property
    @pulumi.getter
    def latitude(self) -> Optional[builtins.float]:
        """
        (Number) The latitude coordinate of the GRE tunnel source.
        """
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def lists(self) -> Sequence['outputs.GetTrafficForwardingVIPRecommendedListListResult']:
        """
        The list of all recommended returned Virtual IP Addresses (VIPs)
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter
    def longitude(self) -> Optional[builtins.float]:
        """
        (Number) The longitude coordinate of the GRE tunnel source.
        """
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="requiredCount")
    def required_count(self) -> Optional[builtins.int]:
        return pulumi.get(self, "required_count")

    @property
    @pulumi.getter(name="routableIp")
    def routable_ip(self) -> Optional[builtins.bool]:
        """
        (Boolean) The routable IP address.
        """
        return pulumi.get(self, "routable_ip")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[builtins.str]:
        """
        (String) The public source IP address.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter
    def subcloud(self) -> Optional[builtins.str]:
        """
        (String) The longitude coordinate of the GRE tunnel source.
        """
        return pulumi.get(self, "subcloud")

    @property
    @pulumi.getter(name="withinCountryOnly")
    def within_country_only(self) -> Optional[builtins.bool]:
        """
        (Boolean) Search within country only.
        """
        return pulumi.get(self, "within_country_only")


class AwaitableGetTrafficForwardingVIPRecommendedListResult(GetTrafficForwardingVIPRecommendedListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrafficForwardingVIPRecommendedListResult(
            id=self.id,
            include_current_vips=self.include_current_vips,
            include_private_service_edge=self.include_private_service_edge,
            latitude=self.latitude,
            lists=self.lists,
            longitude=self.longitude,
            required_count=self.required_count,
            routable_ip=self.routable_ip,
            source_ip=self.source_ip,
            subcloud=self.subcloud,
            within_country_only=self.within_country_only)


def get_traffic_forwarding_vip_recommended_list(include_current_vips: Optional[builtins.bool] = None,
                                                include_private_service_edge: Optional[builtins.bool] = None,
                                                latitude: Optional[builtins.float] = None,
                                                longitude: Optional[builtins.float] = None,
                                                required_count: Optional[builtins.int] = None,
                                                routable_ip: Optional[builtins.bool] = None,
                                                source_ip: Optional[builtins.str] = None,
                                                subcloud: Optional[builtins.str] = None,
                                                within_country_only: Optional[builtins.bool] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrafficForwardingVIPRecommendedListResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-gre-tunnels)
    * [API documentation](https://help.zscaler.com/zia/traffic-forwarding-0#/greTunnels-post)

    Use the **zia_traffic_forwarding_gre_vip_recommended_list** data source to get information about a list of recommended GRE tunnel virtual IP addresses (VIPs), based on source IP address or latitude/longitude coordinates.

    ## Example Usage

    ### With Overridden Geo Coordinates


    :param builtins.bool include_current_vips: (Boolean) Include currently assigned VIPs.
    :param builtins.bool include_private_service_edge: (Boolean) Include ZIA Private Service Edge VIPs.
    :param builtins.float latitude: (Number) The latitude coordinate of the GRE tunnel source.
    :param builtins.float longitude: (Number) The longitude coordinate of the GRE tunnel source.
    :param builtins.int required_count: Number of IP address to be exported.
    :param builtins.bool routable_ip: (Boolean) The routable IP address.
    :param builtins.str source_ip: Filter based on an IP address range.
    :param builtins.str subcloud: (String) The longitude coordinate of the GRE tunnel source.
    :param builtins.bool within_country_only: (Boolean) Search within country only.
    """
    __args__ = dict()
    __args__['includeCurrentVips'] = include_current_vips
    __args__['includePrivateServiceEdge'] = include_private_service_edge
    __args__['latitude'] = latitude
    __args__['longitude'] = longitude
    __args__['requiredCount'] = required_count
    __args__['routableIp'] = routable_ip
    __args__['sourceIp'] = source_ip
    __args__['subcloud'] = subcloud
    __args__['withinCountryOnly'] = within_country_only
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getTrafficForwardingVIPRecommendedList:getTrafficForwardingVIPRecommendedList', __args__, opts=opts, typ=GetTrafficForwardingVIPRecommendedListResult).value

    return AwaitableGetTrafficForwardingVIPRecommendedListResult(
        id=pulumi.get(__ret__, 'id'),
        include_current_vips=pulumi.get(__ret__, 'include_current_vips'),
        include_private_service_edge=pulumi.get(__ret__, 'include_private_service_edge'),
        latitude=pulumi.get(__ret__, 'latitude'),
        lists=pulumi.get(__ret__, 'lists'),
        longitude=pulumi.get(__ret__, 'longitude'),
        required_count=pulumi.get(__ret__, 'required_count'),
        routable_ip=pulumi.get(__ret__, 'routable_ip'),
        source_ip=pulumi.get(__ret__, 'source_ip'),
        subcloud=pulumi.get(__ret__, 'subcloud'),
        within_country_only=pulumi.get(__ret__, 'within_country_only'))
def get_traffic_forwarding_vip_recommended_list_output(include_current_vips: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                                                       include_private_service_edge: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                                                       latitude: Optional[pulumi.Input[Optional[builtins.float]]] = None,
                                                       longitude: Optional[pulumi.Input[Optional[builtins.float]]] = None,
                                                       required_count: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                                                       routable_ip: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                                                       source_ip: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                       subcloud: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                       within_country_only: Optional[pulumi.Input[Optional[builtins.bool]]] = None,
                                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTrafficForwardingVIPRecommendedListResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-gre-tunnels)
    * [API documentation](https://help.zscaler.com/zia/traffic-forwarding-0#/greTunnels-post)

    Use the **zia_traffic_forwarding_gre_vip_recommended_list** data source to get information about a list of recommended GRE tunnel virtual IP addresses (VIPs), based on source IP address or latitude/longitude coordinates.

    ## Example Usage

    ### With Overridden Geo Coordinates


    :param builtins.bool include_current_vips: (Boolean) Include currently assigned VIPs.
    :param builtins.bool include_private_service_edge: (Boolean) Include ZIA Private Service Edge VIPs.
    :param builtins.float latitude: (Number) The latitude coordinate of the GRE tunnel source.
    :param builtins.float longitude: (Number) The longitude coordinate of the GRE tunnel source.
    :param builtins.int required_count: Number of IP address to be exported.
    :param builtins.bool routable_ip: (Boolean) The routable IP address.
    :param builtins.str source_ip: Filter based on an IP address range.
    :param builtins.str subcloud: (String) The longitude coordinate of the GRE tunnel source.
    :param builtins.bool within_country_only: (Boolean) Search within country only.
    """
    __args__ = dict()
    __args__['includeCurrentVips'] = include_current_vips
    __args__['includePrivateServiceEdge'] = include_private_service_edge
    __args__['latitude'] = latitude
    __args__['longitude'] = longitude
    __args__['requiredCount'] = required_count
    __args__['routableIp'] = routable_ip
    __args__['sourceIp'] = source_ip
    __args__['subcloud'] = subcloud
    __args__['withinCountryOnly'] = within_country_only
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getTrafficForwardingVIPRecommendedList:getTrafficForwardingVIPRecommendedList', __args__, opts=opts, typ=GetTrafficForwardingVIPRecommendedListResult)
    return __ret__.apply(lambda __response__: GetTrafficForwardingVIPRecommendedListResult(
        id=pulumi.get(__response__, 'id'),
        include_current_vips=pulumi.get(__response__, 'include_current_vips'),
        include_private_service_edge=pulumi.get(__response__, 'include_private_service_edge'),
        latitude=pulumi.get(__response__, 'latitude'),
        lists=pulumi.get(__response__, 'lists'),
        longitude=pulumi.get(__response__, 'longitude'),
        required_count=pulumi.get(__response__, 'required_count'),
        routable_ip=pulumi.get(__response__, 'routable_ip'),
        source_ip=pulumi.get(__response__, 'source_ip'),
        subcloud=pulumi.get(__response__, 'subcloud'),
        within_country_only=pulumi.get(__response__, 'within_country_only')))
