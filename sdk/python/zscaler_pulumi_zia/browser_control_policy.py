# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BrowserControlPolicyArgs', 'BrowserControlPolicy']

@pulumi.input_type
class BrowserControlPolicyArgs:
    def __init__(__self__, *,
                 allow_all_browsers: Optional[pulumi.Input[builtins.bool]] = None,
                 blocked_chrome_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_firefox_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_internet_explorer_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_opera_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_safari_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 bypass_all_browsers: Optional[pulumi.Input[builtins.bool]] = None,
                 bypass_applications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 bypass_plugins: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enable_smart_browser_isolation: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_warnings: Optional[pulumi.Input[builtins.bool]] = None,
                 plugin_check_frequency: Optional[pulumi.Input[builtins.str]] = None,
                 smart_isolation_groups: Optional[pulumi.Input['BrowserControlPolicySmartIsolationGroupsArgs']] = None,
                 smart_isolation_profiles: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserControlPolicySmartIsolationProfileArgs']]]] = None,
                 smart_isolation_users: Optional[pulumi.Input['BrowserControlPolicySmartIsolationUsersArgs']] = None):
        """
        The set of arguments for constructing a BrowserControlPolicy resource.
        :param pulumi.Input[builtins.bool] allow_all_browsers: A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
               internet
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_chrome_versions: Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_firefox_versions: Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_internet_explorer_versions: Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_opera_versions: Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_safari_versions: Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
        :param pulumi.Input[builtins.bool] bypass_all_browsers: If set to true, all the browsers are bypassed for warnings
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] bypass_applications: List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
               attribute is set to true. If not set, all vulnerable applications are warned
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] bypass_plugins: List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
               is set to true. If not set, all vulnerable plugins are warned
        :param pulumi.Input[builtins.bool] enable_smart_browser_isolation: A Boolean value that specifies if Smart Browser Isolation is enabled
        :param pulumi.Input[builtins.bool] enable_warnings: A Boolean value that specifies if the warnings are enabled
        :param pulumi.Input[builtins.str] plugin_check_frequency: Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
               vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
        :param pulumi.Input['BrowserControlPolicySmartIsolationGroupsArgs'] smart_isolation_groups: Name-ID pairs of groups for which the rule is applied
        :param pulumi.Input[Sequence[pulumi.Input['BrowserControlPolicySmartIsolationProfileArgs']]] smart_isolation_profiles: The isolation profile
        :param pulumi.Input['BrowserControlPolicySmartIsolationUsersArgs'] smart_isolation_users: Name-ID pairs of users for which the rule is applied
        """
        if allow_all_browsers is not None:
            pulumi.set(__self__, "allow_all_browsers", allow_all_browsers)
        if blocked_chrome_versions is not None:
            pulumi.set(__self__, "blocked_chrome_versions", blocked_chrome_versions)
        if blocked_firefox_versions is not None:
            pulumi.set(__self__, "blocked_firefox_versions", blocked_firefox_versions)
        if blocked_internet_explorer_versions is not None:
            pulumi.set(__self__, "blocked_internet_explorer_versions", blocked_internet_explorer_versions)
        if blocked_opera_versions is not None:
            pulumi.set(__self__, "blocked_opera_versions", blocked_opera_versions)
        if blocked_safari_versions is not None:
            pulumi.set(__self__, "blocked_safari_versions", blocked_safari_versions)
        if bypass_all_browsers is not None:
            pulumi.set(__self__, "bypass_all_browsers", bypass_all_browsers)
        if bypass_applications is not None:
            pulumi.set(__self__, "bypass_applications", bypass_applications)
        if bypass_plugins is not None:
            pulumi.set(__self__, "bypass_plugins", bypass_plugins)
        if enable_smart_browser_isolation is not None:
            pulumi.set(__self__, "enable_smart_browser_isolation", enable_smart_browser_isolation)
        if enable_warnings is not None:
            pulumi.set(__self__, "enable_warnings", enable_warnings)
        if plugin_check_frequency is not None:
            pulumi.set(__self__, "plugin_check_frequency", plugin_check_frequency)
        if smart_isolation_groups is not None:
            pulumi.set(__self__, "smart_isolation_groups", smart_isolation_groups)
        if smart_isolation_profiles is not None:
            pulumi.set(__self__, "smart_isolation_profiles", smart_isolation_profiles)
        if smart_isolation_users is not None:
            pulumi.set(__self__, "smart_isolation_users", smart_isolation_users)

    @property
    @pulumi.getter(name="allowAllBrowsers")
    def allow_all_browsers(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
        internet
        """
        return pulumi.get(self, "allow_all_browsers")

    @allow_all_browsers.setter
    def allow_all_browsers(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_all_browsers", value)

    @property
    @pulumi.getter(name="blockedChromeVersions")
    def blocked_chrome_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
        """
        return pulumi.get(self, "blocked_chrome_versions")

    @blocked_chrome_versions.setter
    def blocked_chrome_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_chrome_versions", value)

    @property
    @pulumi.getter(name="blockedFirefoxVersions")
    def blocked_firefox_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
        """
        return pulumi.get(self, "blocked_firefox_versions")

    @blocked_firefox_versions.setter
    def blocked_firefox_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_firefox_versions", value)

    @property
    @pulumi.getter(name="blockedInternetExplorerVersions")
    def blocked_internet_explorer_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
        """
        return pulumi.get(self, "blocked_internet_explorer_versions")

    @blocked_internet_explorer_versions.setter
    def blocked_internet_explorer_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_internet_explorer_versions", value)

    @property
    @pulumi.getter(name="blockedOperaVersions")
    def blocked_opera_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
        """
        return pulumi.get(self, "blocked_opera_versions")

    @blocked_opera_versions.setter
    def blocked_opera_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_opera_versions", value)

    @property
    @pulumi.getter(name="blockedSafariVersions")
    def blocked_safari_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
        """
        return pulumi.get(self, "blocked_safari_versions")

    @blocked_safari_versions.setter
    def blocked_safari_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_safari_versions", value)

    @property
    @pulumi.getter(name="bypassAllBrowsers")
    def bypass_all_browsers(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If set to true, all the browsers are bypassed for warnings
        """
        return pulumi.get(self, "bypass_all_browsers")

    @bypass_all_browsers.setter
    def bypass_all_browsers(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bypass_all_browsers", value)

    @property
    @pulumi.getter(name="bypassApplications")
    def bypass_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
        attribute is set to true. If not set, all vulnerable applications are warned
        """
        return pulumi.get(self, "bypass_applications")

    @bypass_applications.setter
    def bypass_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "bypass_applications", value)

    @property
    @pulumi.getter(name="bypassPlugins")
    def bypass_plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
        is set to true. If not set, all vulnerable plugins are warned
        """
        return pulumi.get(self, "bypass_plugins")

    @bypass_plugins.setter
    def bypass_plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "bypass_plugins", value)

    @property
    @pulumi.getter(name="enableSmartBrowserIsolation")
    def enable_smart_browser_isolation(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that specifies if Smart Browser Isolation is enabled
        """
        return pulumi.get(self, "enable_smart_browser_isolation")

    @enable_smart_browser_isolation.setter
    def enable_smart_browser_isolation(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_smart_browser_isolation", value)

    @property
    @pulumi.getter(name="enableWarnings")
    def enable_warnings(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that specifies if the warnings are enabled
        """
        return pulumi.get(self, "enable_warnings")

    @enable_warnings.setter
    def enable_warnings(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_warnings", value)

    @property
    @pulumi.getter(name="pluginCheckFrequency")
    def plugin_check_frequency(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
        vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
        """
        return pulumi.get(self, "plugin_check_frequency")

    @plugin_check_frequency.setter
    def plugin_check_frequency(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "plugin_check_frequency", value)

    @property
    @pulumi.getter(name="smartIsolationGroups")
    def smart_isolation_groups(self) -> Optional[pulumi.Input['BrowserControlPolicySmartIsolationGroupsArgs']]:
        """
        Name-ID pairs of groups for which the rule is applied
        """
        return pulumi.get(self, "smart_isolation_groups")

    @smart_isolation_groups.setter
    def smart_isolation_groups(self, value: Optional[pulumi.Input['BrowserControlPolicySmartIsolationGroupsArgs']]):
        pulumi.set(self, "smart_isolation_groups", value)

    @property
    @pulumi.getter(name="smartIsolationProfiles")
    def smart_isolation_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserControlPolicySmartIsolationProfileArgs']]]]:
        """
        The isolation profile
        """
        return pulumi.get(self, "smart_isolation_profiles")

    @smart_isolation_profiles.setter
    def smart_isolation_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserControlPolicySmartIsolationProfileArgs']]]]):
        pulumi.set(self, "smart_isolation_profiles", value)

    @property
    @pulumi.getter(name="smartIsolationUsers")
    def smart_isolation_users(self) -> Optional[pulumi.Input['BrowserControlPolicySmartIsolationUsersArgs']]:
        """
        Name-ID pairs of users for which the rule is applied
        """
        return pulumi.get(self, "smart_isolation_users")

    @smart_isolation_users.setter
    def smart_isolation_users(self, value: Optional[pulumi.Input['BrowserControlPolicySmartIsolationUsersArgs']]):
        pulumi.set(self, "smart_isolation_users", value)


@pulumi.input_type
class _BrowserControlPolicyState:
    def __init__(__self__, *,
                 allow_all_browsers: Optional[pulumi.Input[builtins.bool]] = None,
                 blocked_chrome_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_firefox_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_internet_explorer_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_opera_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_safari_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 bypass_all_browsers: Optional[pulumi.Input[builtins.bool]] = None,
                 bypass_applications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 bypass_plugins: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enable_smart_browser_isolation: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_warnings: Optional[pulumi.Input[builtins.bool]] = None,
                 plugin_check_frequency: Optional[pulumi.Input[builtins.str]] = None,
                 smart_isolation_groups: Optional[pulumi.Input['BrowserControlPolicySmartIsolationGroupsArgs']] = None,
                 smart_isolation_profiles: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserControlPolicySmartIsolationProfileArgs']]]] = None,
                 smart_isolation_users: Optional[pulumi.Input['BrowserControlPolicySmartIsolationUsersArgs']] = None):
        """
        Input properties used for looking up and filtering BrowserControlPolicy resources.
        :param pulumi.Input[builtins.bool] allow_all_browsers: A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
               internet
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_chrome_versions: Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_firefox_versions: Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_internet_explorer_versions: Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_opera_versions: Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_safari_versions: Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
        :param pulumi.Input[builtins.bool] bypass_all_browsers: If set to true, all the browsers are bypassed for warnings
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] bypass_applications: List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
               attribute is set to true. If not set, all vulnerable applications are warned
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] bypass_plugins: List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
               is set to true. If not set, all vulnerable plugins are warned
        :param pulumi.Input[builtins.bool] enable_smart_browser_isolation: A Boolean value that specifies if Smart Browser Isolation is enabled
        :param pulumi.Input[builtins.bool] enable_warnings: A Boolean value that specifies if the warnings are enabled
        :param pulumi.Input[builtins.str] plugin_check_frequency: Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
               vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
        :param pulumi.Input['BrowserControlPolicySmartIsolationGroupsArgs'] smart_isolation_groups: Name-ID pairs of groups for which the rule is applied
        :param pulumi.Input[Sequence[pulumi.Input['BrowserControlPolicySmartIsolationProfileArgs']]] smart_isolation_profiles: The isolation profile
        :param pulumi.Input['BrowserControlPolicySmartIsolationUsersArgs'] smart_isolation_users: Name-ID pairs of users for which the rule is applied
        """
        if allow_all_browsers is not None:
            pulumi.set(__self__, "allow_all_browsers", allow_all_browsers)
        if blocked_chrome_versions is not None:
            pulumi.set(__self__, "blocked_chrome_versions", blocked_chrome_versions)
        if blocked_firefox_versions is not None:
            pulumi.set(__self__, "blocked_firefox_versions", blocked_firefox_versions)
        if blocked_internet_explorer_versions is not None:
            pulumi.set(__self__, "blocked_internet_explorer_versions", blocked_internet_explorer_versions)
        if blocked_opera_versions is not None:
            pulumi.set(__self__, "blocked_opera_versions", blocked_opera_versions)
        if blocked_safari_versions is not None:
            pulumi.set(__self__, "blocked_safari_versions", blocked_safari_versions)
        if bypass_all_browsers is not None:
            pulumi.set(__self__, "bypass_all_browsers", bypass_all_browsers)
        if bypass_applications is not None:
            pulumi.set(__self__, "bypass_applications", bypass_applications)
        if bypass_plugins is not None:
            pulumi.set(__self__, "bypass_plugins", bypass_plugins)
        if enable_smart_browser_isolation is not None:
            pulumi.set(__self__, "enable_smart_browser_isolation", enable_smart_browser_isolation)
        if enable_warnings is not None:
            pulumi.set(__self__, "enable_warnings", enable_warnings)
        if plugin_check_frequency is not None:
            pulumi.set(__self__, "plugin_check_frequency", plugin_check_frequency)
        if smart_isolation_groups is not None:
            pulumi.set(__self__, "smart_isolation_groups", smart_isolation_groups)
        if smart_isolation_profiles is not None:
            pulumi.set(__self__, "smart_isolation_profiles", smart_isolation_profiles)
        if smart_isolation_users is not None:
            pulumi.set(__self__, "smart_isolation_users", smart_isolation_users)

    @property
    @pulumi.getter(name="allowAllBrowsers")
    def allow_all_browsers(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
        internet
        """
        return pulumi.get(self, "allow_all_browsers")

    @allow_all_browsers.setter
    def allow_all_browsers(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "allow_all_browsers", value)

    @property
    @pulumi.getter(name="blockedChromeVersions")
    def blocked_chrome_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
        """
        return pulumi.get(self, "blocked_chrome_versions")

    @blocked_chrome_versions.setter
    def blocked_chrome_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_chrome_versions", value)

    @property
    @pulumi.getter(name="blockedFirefoxVersions")
    def blocked_firefox_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
        """
        return pulumi.get(self, "blocked_firefox_versions")

    @blocked_firefox_versions.setter
    def blocked_firefox_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_firefox_versions", value)

    @property
    @pulumi.getter(name="blockedInternetExplorerVersions")
    def blocked_internet_explorer_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
        """
        return pulumi.get(self, "blocked_internet_explorer_versions")

    @blocked_internet_explorer_versions.setter
    def blocked_internet_explorer_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_internet_explorer_versions", value)

    @property
    @pulumi.getter(name="blockedOperaVersions")
    def blocked_opera_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
        """
        return pulumi.get(self, "blocked_opera_versions")

    @blocked_opera_versions.setter
    def blocked_opera_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_opera_versions", value)

    @property
    @pulumi.getter(name="blockedSafariVersions")
    def blocked_safari_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
        """
        return pulumi.get(self, "blocked_safari_versions")

    @blocked_safari_versions.setter
    def blocked_safari_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_safari_versions", value)

    @property
    @pulumi.getter(name="bypassAllBrowsers")
    def bypass_all_browsers(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        If set to true, all the browsers are bypassed for warnings
        """
        return pulumi.get(self, "bypass_all_browsers")

    @bypass_all_browsers.setter
    def bypass_all_browsers(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bypass_all_browsers", value)

    @property
    @pulumi.getter(name="bypassApplications")
    def bypass_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
        attribute is set to true. If not set, all vulnerable applications are warned
        """
        return pulumi.get(self, "bypass_applications")

    @bypass_applications.setter
    def bypass_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "bypass_applications", value)

    @property
    @pulumi.getter(name="bypassPlugins")
    def bypass_plugins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
        is set to true. If not set, all vulnerable plugins are warned
        """
        return pulumi.get(self, "bypass_plugins")

    @bypass_plugins.setter
    def bypass_plugins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "bypass_plugins", value)

    @property
    @pulumi.getter(name="enableSmartBrowserIsolation")
    def enable_smart_browser_isolation(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that specifies if Smart Browser Isolation is enabled
        """
        return pulumi.get(self, "enable_smart_browser_isolation")

    @enable_smart_browser_isolation.setter
    def enable_smart_browser_isolation(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_smart_browser_isolation", value)

    @property
    @pulumi.getter(name="enableWarnings")
    def enable_warnings(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that specifies if the warnings are enabled
        """
        return pulumi.get(self, "enable_warnings")

    @enable_warnings.setter
    def enable_warnings(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_warnings", value)

    @property
    @pulumi.getter(name="pluginCheckFrequency")
    def plugin_check_frequency(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
        vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
        """
        return pulumi.get(self, "plugin_check_frequency")

    @plugin_check_frequency.setter
    def plugin_check_frequency(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "plugin_check_frequency", value)

    @property
    @pulumi.getter(name="smartIsolationGroups")
    def smart_isolation_groups(self) -> Optional[pulumi.Input['BrowserControlPolicySmartIsolationGroupsArgs']]:
        """
        Name-ID pairs of groups for which the rule is applied
        """
        return pulumi.get(self, "smart_isolation_groups")

    @smart_isolation_groups.setter
    def smart_isolation_groups(self, value: Optional[pulumi.Input['BrowserControlPolicySmartIsolationGroupsArgs']]):
        pulumi.set(self, "smart_isolation_groups", value)

    @property
    @pulumi.getter(name="smartIsolationProfiles")
    def smart_isolation_profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BrowserControlPolicySmartIsolationProfileArgs']]]]:
        """
        The isolation profile
        """
        return pulumi.get(self, "smart_isolation_profiles")

    @smart_isolation_profiles.setter
    def smart_isolation_profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BrowserControlPolicySmartIsolationProfileArgs']]]]):
        pulumi.set(self, "smart_isolation_profiles", value)

    @property
    @pulumi.getter(name="smartIsolationUsers")
    def smart_isolation_users(self) -> Optional[pulumi.Input['BrowserControlPolicySmartIsolationUsersArgs']]:
        """
        Name-ID pairs of users for which the rule is applied
        """
        return pulumi.get(self, "smart_isolation_users")

    @smart_isolation_users.setter
    def smart_isolation_users(self, value: Optional[pulumi.Input['BrowserControlPolicySmartIsolationUsersArgs']]):
        pulumi.set(self, "smart_isolation_users", value)


@pulumi.type_token("zia:index/browserControlPolicy:BrowserControlPolicy")
class BrowserControlPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_all_browsers: Optional[pulumi.Input[builtins.bool]] = None,
                 blocked_chrome_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_firefox_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_internet_explorer_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_opera_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_safari_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 bypass_all_browsers: Optional[pulumi.Input[builtins.bool]] = None,
                 bypass_applications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 bypass_plugins: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enable_smart_browser_isolation: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_warnings: Optional[pulumi.Input[builtins.bool]] = None,
                 plugin_check_frequency: Optional[pulumi.Input[builtins.str]] = None,
                 smart_isolation_groups: Optional[pulumi.Input[Union['BrowserControlPolicySmartIsolationGroupsArgs', 'BrowserControlPolicySmartIsolationGroupsArgsDict']]] = None,
                 smart_isolation_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BrowserControlPolicySmartIsolationProfileArgs', 'BrowserControlPolicySmartIsolationProfileArgsDict']]]]] = None,
                 smart_isolation_users: Optional[pulumi.Input[Union['BrowserControlPolicySmartIsolationUsersArgs', 'BrowserControlPolicySmartIsolationUsersArgsDict']]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zia/configuring-browser-control-policy)
        * [API documentation](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)

        The **zia_browser_control_policy** resource allows you to update the malware protection policy configuration details. To learn more see [Configuring the Browser Control Policy](https://help.zscaler.com/zia/configuring-browser-control-policy)

        ## Example Usage

        ### Enable Smart Isolation

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_browser_control_policy** can be imported by using `browser_settings` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/browserControlPolicy:BrowserControlPolicy this "browser_settings"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] allow_all_browsers: A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
               internet
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_chrome_versions: Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_firefox_versions: Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_internet_explorer_versions: Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_opera_versions: Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_safari_versions: Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
        :param pulumi.Input[builtins.bool] bypass_all_browsers: If set to true, all the browsers are bypassed for warnings
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] bypass_applications: List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
               attribute is set to true. If not set, all vulnerable applications are warned
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] bypass_plugins: List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
               is set to true. If not set, all vulnerable plugins are warned
        :param pulumi.Input[builtins.bool] enable_smart_browser_isolation: A Boolean value that specifies if Smart Browser Isolation is enabled
        :param pulumi.Input[builtins.bool] enable_warnings: A Boolean value that specifies if the warnings are enabled
        :param pulumi.Input[builtins.str] plugin_check_frequency: Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
               vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
        :param pulumi.Input[Union['BrowserControlPolicySmartIsolationGroupsArgs', 'BrowserControlPolicySmartIsolationGroupsArgsDict']] smart_isolation_groups: Name-ID pairs of groups for which the rule is applied
        :param pulumi.Input[Sequence[pulumi.Input[Union['BrowserControlPolicySmartIsolationProfileArgs', 'BrowserControlPolicySmartIsolationProfileArgsDict']]]] smart_isolation_profiles: The isolation profile
        :param pulumi.Input[Union['BrowserControlPolicySmartIsolationUsersArgs', 'BrowserControlPolicySmartIsolationUsersArgsDict']] smart_isolation_users: Name-ID pairs of users for which the rule is applied
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[BrowserControlPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zia/configuring-browser-control-policy)
        * [API documentation](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)

        The **zia_browser_control_policy** resource allows you to update the malware protection policy configuration details. To learn more see [Configuring the Browser Control Policy](https://help.zscaler.com/zia/configuring-browser-control-policy)

        ## Example Usage

        ### Enable Smart Isolation

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_browser_control_policy** can be imported by using `browser_settings` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/browserControlPolicy:BrowserControlPolicy this "browser_settings"
        ```

        :param str resource_name: The name of the resource.
        :param BrowserControlPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BrowserControlPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_all_browsers: Optional[pulumi.Input[builtins.bool]] = None,
                 blocked_chrome_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_firefox_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_internet_explorer_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_opera_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 blocked_safari_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 bypass_all_browsers: Optional[pulumi.Input[builtins.bool]] = None,
                 bypass_applications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 bypass_plugins: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 enable_smart_browser_isolation: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_warnings: Optional[pulumi.Input[builtins.bool]] = None,
                 plugin_check_frequency: Optional[pulumi.Input[builtins.str]] = None,
                 smart_isolation_groups: Optional[pulumi.Input[Union['BrowserControlPolicySmartIsolationGroupsArgs', 'BrowserControlPolicySmartIsolationGroupsArgsDict']]] = None,
                 smart_isolation_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BrowserControlPolicySmartIsolationProfileArgs', 'BrowserControlPolicySmartIsolationProfileArgsDict']]]]] = None,
                 smart_isolation_users: Optional[pulumi.Input[Union['BrowserControlPolicySmartIsolationUsersArgs', 'BrowserControlPolicySmartIsolationUsersArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BrowserControlPolicyArgs.__new__(BrowserControlPolicyArgs)

            __props__.__dict__["allow_all_browsers"] = allow_all_browsers
            __props__.__dict__["blocked_chrome_versions"] = blocked_chrome_versions
            __props__.__dict__["blocked_firefox_versions"] = blocked_firefox_versions
            __props__.__dict__["blocked_internet_explorer_versions"] = blocked_internet_explorer_versions
            __props__.__dict__["blocked_opera_versions"] = blocked_opera_versions
            __props__.__dict__["blocked_safari_versions"] = blocked_safari_versions
            __props__.__dict__["bypass_all_browsers"] = bypass_all_browsers
            __props__.__dict__["bypass_applications"] = bypass_applications
            __props__.__dict__["bypass_plugins"] = bypass_plugins
            __props__.__dict__["enable_smart_browser_isolation"] = enable_smart_browser_isolation
            __props__.__dict__["enable_warnings"] = enable_warnings
            __props__.__dict__["plugin_check_frequency"] = plugin_check_frequency
            __props__.__dict__["smart_isolation_groups"] = smart_isolation_groups
            __props__.__dict__["smart_isolation_profiles"] = smart_isolation_profiles
            __props__.__dict__["smart_isolation_users"] = smart_isolation_users
        super(BrowserControlPolicy, __self__).__init__(
            'zia:index/browserControlPolicy:BrowserControlPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_all_browsers: Optional[pulumi.Input[builtins.bool]] = None,
            blocked_chrome_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            blocked_firefox_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            blocked_internet_explorer_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            blocked_opera_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            blocked_safari_versions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            bypass_all_browsers: Optional[pulumi.Input[builtins.bool]] = None,
            bypass_applications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            bypass_plugins: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            enable_smart_browser_isolation: Optional[pulumi.Input[builtins.bool]] = None,
            enable_warnings: Optional[pulumi.Input[builtins.bool]] = None,
            plugin_check_frequency: Optional[pulumi.Input[builtins.str]] = None,
            smart_isolation_groups: Optional[pulumi.Input[Union['BrowserControlPolicySmartIsolationGroupsArgs', 'BrowserControlPolicySmartIsolationGroupsArgsDict']]] = None,
            smart_isolation_profiles: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BrowserControlPolicySmartIsolationProfileArgs', 'BrowserControlPolicySmartIsolationProfileArgsDict']]]]] = None,
            smart_isolation_users: Optional[pulumi.Input[Union['BrowserControlPolicySmartIsolationUsersArgs', 'BrowserControlPolicySmartIsolationUsersArgsDict']]] = None) -> 'BrowserControlPolicy':
        """
        Get an existing BrowserControlPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] allow_all_browsers: A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
               internet
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_chrome_versions: Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_firefox_versions: Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_internet_explorer_versions: Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_opera_versions: Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_safari_versions: Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
        :param pulumi.Input[builtins.bool] bypass_all_browsers: If set to true, all the browsers are bypassed for warnings
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] bypass_applications: List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
               attribute is set to true. If not set, all vulnerable applications are warned
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] bypass_plugins: List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
               is set to true. If not set, all vulnerable plugins are warned
        :param pulumi.Input[builtins.bool] enable_smart_browser_isolation: A Boolean value that specifies if Smart Browser Isolation is enabled
        :param pulumi.Input[builtins.bool] enable_warnings: A Boolean value that specifies if the warnings are enabled
        :param pulumi.Input[builtins.str] plugin_check_frequency: Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
               vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
        :param pulumi.Input[Union['BrowserControlPolicySmartIsolationGroupsArgs', 'BrowserControlPolicySmartIsolationGroupsArgsDict']] smart_isolation_groups: Name-ID pairs of groups for which the rule is applied
        :param pulumi.Input[Sequence[pulumi.Input[Union['BrowserControlPolicySmartIsolationProfileArgs', 'BrowserControlPolicySmartIsolationProfileArgsDict']]]] smart_isolation_profiles: The isolation profile
        :param pulumi.Input[Union['BrowserControlPolicySmartIsolationUsersArgs', 'BrowserControlPolicySmartIsolationUsersArgsDict']] smart_isolation_users: Name-ID pairs of users for which the rule is applied
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BrowserControlPolicyState.__new__(_BrowserControlPolicyState)

        __props__.__dict__["allow_all_browsers"] = allow_all_browsers
        __props__.__dict__["blocked_chrome_versions"] = blocked_chrome_versions
        __props__.__dict__["blocked_firefox_versions"] = blocked_firefox_versions
        __props__.__dict__["blocked_internet_explorer_versions"] = blocked_internet_explorer_versions
        __props__.__dict__["blocked_opera_versions"] = blocked_opera_versions
        __props__.__dict__["blocked_safari_versions"] = blocked_safari_versions
        __props__.__dict__["bypass_all_browsers"] = bypass_all_browsers
        __props__.__dict__["bypass_applications"] = bypass_applications
        __props__.__dict__["bypass_plugins"] = bypass_plugins
        __props__.__dict__["enable_smart_browser_isolation"] = enable_smart_browser_isolation
        __props__.__dict__["enable_warnings"] = enable_warnings
        __props__.__dict__["plugin_check_frequency"] = plugin_check_frequency
        __props__.__dict__["smart_isolation_groups"] = smart_isolation_groups
        __props__.__dict__["smart_isolation_profiles"] = smart_isolation_profiles
        __props__.__dict__["smart_isolation_users"] = smart_isolation_users
        return BrowserControlPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowAllBrowsers")
    def allow_all_browsers(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the
        internet
        """
        return pulumi.get(self, "allow_all_browsers")

    @property
    @pulumi.getter(name="blockedChromeVersions")
    def blocked_chrome_versions(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed.
        """
        return pulumi.get(self, "blocked_chrome_versions")

    @property
    @pulumi.getter(name="blockedFirefoxVersions")
    def blocked_firefox_versions(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed.
        """
        return pulumi.get(self, "blocked_firefox_versions")

    @property
    @pulumi.getter(name="blockedInternetExplorerVersions")
    def blocked_internet_explorer_versions(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed.
        """
        return pulumi.get(self, "blocked_internet_explorer_versions")

    @property
    @pulumi.getter(name="blockedOperaVersions")
    def blocked_opera_versions(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed
        """
        return pulumi.get(self, "blocked_opera_versions")

    @property
    @pulumi.getter(name="blockedSafariVersions")
    def blocked_safari_versions(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed
        """
        return pulumi.get(self, "blocked_safari_versions")

    @property
    @pulumi.getter(name="bypassAllBrowsers")
    def bypass_all_browsers(self) -> pulumi.Output[builtins.bool]:
        """
        If set to true, all the browsers are bypassed for warnings
        """
        return pulumi.get(self, "bypass_all_browsers")

    @property
    @pulumi.getter(name="bypassApplications")
    def bypass_applications(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings'
        attribute is set to true. If not set, all vulnerable applications are warned
        """
        return pulumi.get(self, "bypass_applications")

    @property
    @pulumi.getter(name="bypassPlugins")
    def bypass_plugins(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute
        is set to true. If not set, all vulnerable plugins are warned
        """
        return pulumi.get(self, "bypass_plugins")

    @property
    @pulumi.getter(name="enableSmartBrowserIsolation")
    def enable_smart_browser_isolation(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value that specifies if Smart Browser Isolation is enabled
        """
        return pulumi.get(self, "enable_smart_browser_isolation")

    @property
    @pulumi.getter(name="enableWarnings")
    def enable_warnings(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value that specifies if the warnings are enabled
        """
        return pulumi.get(self, "enable_warnings")

    @property
    @pulumi.getter(name="pluginCheckFrequency")
    def plugin_check_frequency(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or
        vulnerable browsers, plugins, and applications. If not set, the warnings are disabled
        """
        return pulumi.get(self, "plugin_check_frequency")

    @property
    @pulumi.getter(name="smartIsolationGroups")
    def smart_isolation_groups(self) -> pulumi.Output[Optional['outputs.BrowserControlPolicySmartIsolationGroups']]:
        """
        Name-ID pairs of groups for which the rule is applied
        """
        return pulumi.get(self, "smart_isolation_groups")

    @property
    @pulumi.getter(name="smartIsolationProfiles")
    def smart_isolation_profiles(self) -> pulumi.Output[Sequence['outputs.BrowserControlPolicySmartIsolationProfile']]:
        """
        The isolation profile
        """
        return pulumi.get(self, "smart_isolation_profiles")

    @property
    @pulumi.getter(name="smartIsolationUsers")
    def smart_isolation_users(self) -> pulumi.Output[Optional['outputs.BrowserControlPolicySmartIsolationUsers']]:
        """
        Name-ID pairs of users for which the rule is applied
        """
        return pulumi.get(self, "smart_isolation_users")

