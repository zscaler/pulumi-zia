# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['NssServerArgs', 'NssServer']

@pulumi.input_type
class NssServerArgs:
    def __init__(__self__, *,
                 icap_svr_id: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a NssServer resource.
        :param pulumi.Input[builtins.int] icap_svr_id: The ICAP server ID
        :param pulumi.Input[builtins.str] name: The name of the devices to be created.
        :param pulumi.Input[builtins.str] status: Enables or disables the status of the NSS server
        :param pulumi.Input[builtins.str] type: Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
        """
        if icap_svr_id is not None:
            pulumi.set(__self__, "icap_svr_id", icap_svr_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="icapSvrId")
    def icap_svr_id(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The ICAP server ID
        """
        return pulumi.get(self, "icap_svr_id")

    @icap_svr_id.setter
    def icap_svr_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "icap_svr_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the devices to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Enables or disables the status of the NSS server
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _NssServerState:
    def __init__(__self__, *,
                 icap_svr_id: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nss_id: Optional[pulumi.Input[builtins.int]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering NssServer resources.
        :param pulumi.Input[builtins.int] icap_svr_id: The ICAP server ID
        :param pulumi.Input[builtins.str] name: The name of the devices to be created.
        :param pulumi.Input[builtins.str] status: Enables or disables the status of the NSS server
        :param pulumi.Input[builtins.str] type: Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
        """
        if icap_svr_id is not None:
            pulumi.set(__self__, "icap_svr_id", icap_svr_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nss_id is not None:
            pulumi.set(__self__, "nss_id", nss_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="icapSvrId")
    def icap_svr_id(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The ICAP server ID
        """
        return pulumi.get(self, "icap_svr_id")

    @icap_svr_id.setter
    def icap_svr_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "icap_svr_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the devices to be created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nssId")
    def nss_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "nss_id")

    @nss_id.setter
    def nss_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "nss_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Enables or disables the status of the NSS server
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("zia:index/nssServer:NssServer")
class NssServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 icap_svr_id: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zia/about-nss-servers)
        * [API documentation](https://help.zscaler.com/zia/cloud-nanolog-streaming-service-nss#/nssServers-get)

        The **zia_nss_server** resource allows the creation and management of NSS Server Objects in the Zscaler Internet Access cloud or via the API.
        See [Adding NSS Servers](https://help.zscaler.com/zia/adding-nss-servers) for more details.

        ## Example Usage

        ### Type NSS_FOR_FIREWALL

        ### Type NSS_FOR_WEB

        resource "NssServer" "this" {
            name = "NSSServer01"
            status = "ENABLED"
            type = "NSS_FOR_WEB"
        }

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_nss_server** can be imported by using `<NSS_ID>` or `<NSS_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/nssServer:NssServer example <nss_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/nssServer:NssServer example <nss_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.int] icap_svr_id: The ICAP server ID
        :param pulumi.Input[builtins.str] name: The name of the devices to be created.
        :param pulumi.Input[builtins.str] status: Enables or disables the status of the NSS server
        :param pulumi.Input[builtins.str] type: Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NssServerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zia/about-nss-servers)
        * [API documentation](https://help.zscaler.com/zia/cloud-nanolog-streaming-service-nss#/nssServers-get)

        The **zia_nss_server** resource allows the creation and management of NSS Server Objects in the Zscaler Internet Access cloud or via the API.
        See [Adding NSS Servers](https://help.zscaler.com/zia/adding-nss-servers) for more details.

        ## Example Usage

        ### Type NSS_FOR_FIREWALL

        ### Type NSS_FOR_WEB

        resource "NssServer" "this" {
            name = "NSSServer01"
            status = "ENABLED"
            type = "NSS_FOR_WEB"
        }

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_nss_server** can be imported by using `<NSS_ID>` or `<NSS_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/nssServer:NssServer example <nss_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/nssServer:NssServer example <nss_name>
        ```

        :param str resource_name: The name of the resource.
        :param NssServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NssServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 icap_svr_id: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NssServerArgs.__new__(NssServerArgs)

            __props__.__dict__["icap_svr_id"] = icap_svr_id
            __props__.__dict__["name"] = name
            __props__.__dict__["status"] = status
            __props__.__dict__["type"] = type
            __props__.__dict__["nss_id"] = None
        super(NssServer, __self__).__init__(
            'zia:index/nssServer:NssServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            icap_svr_id: Optional[pulumi.Input[builtins.int]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            nss_id: Optional[pulumi.Input[builtins.int]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None) -> 'NssServer':
        """
        Get an existing NssServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.int] icap_svr_id: The ICAP server ID
        :param pulumi.Input[builtins.str] name: The name of the devices to be created.
        :param pulumi.Input[builtins.str] status: Enables or disables the status of the NSS server
        :param pulumi.Input[builtins.str] type: Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NssServerState.__new__(_NssServerState)

        __props__.__dict__["icap_svr_id"] = icap_svr_id
        __props__.__dict__["name"] = name
        __props__.__dict__["nss_id"] = nss_id
        __props__.__dict__["status"] = status
        __props__.__dict__["type"] = type
        return NssServer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="icapSvrId")
    def icap_svr_id(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The ICAP server ID
        """
        return pulumi.get(self, "icap_svr_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the devices to be created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nssId")
    def nss_id(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "nss_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Enables or disables the status of the NSS server
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
        """
        return pulumi.get(self, "type")

