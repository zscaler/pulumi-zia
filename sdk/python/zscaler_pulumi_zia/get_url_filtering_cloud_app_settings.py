# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetURLFilteringCloudAppSettingsResult',
    'AwaitableGetURLFilteringCloudAppSettingsResult',
    'get_url_filtering_cloud_app_settings',
    'get_url_filtering_cloud_app_settings_output',
]

@pulumi.output_type
class GetURLFilteringCloudAppSettingsResult:
    """
    A collection of values returned by getURLFilteringCloudAppSettings.
    """
    def __init__(__self__, block_skype=None, consider_embedded_sites=None, enable_block_override_for_non_auth_user=None, enable_chatgpt_prompt=None, enable_cipa_compliance=None, enable_dynamic_content_cat=None, enable_gemini_prompt=None, enable_meta_prompt=None, enable_microsoft_copilot_prompt=None, enable_msft_o365=None, enable_newly_registered_domains=None, enable_office365=None, enable_per_plexity_prompt=None, enable_poep_prompt=None, enable_ucaas_logmein=None, enable_ucaas_ring_central=None, enable_ucaas_talkdesk=None, enable_ucaas_webex=None, enable_ucaas_zoom=None, enforce_safe_search=None, id=None):
        if block_skype and not isinstance(block_skype, bool):
            raise TypeError("Expected argument 'block_skype' to be a bool")
        pulumi.set(__self__, "block_skype", block_skype)
        if consider_embedded_sites and not isinstance(consider_embedded_sites, bool):
            raise TypeError("Expected argument 'consider_embedded_sites' to be a bool")
        pulumi.set(__self__, "consider_embedded_sites", consider_embedded_sites)
        if enable_block_override_for_non_auth_user and not isinstance(enable_block_override_for_non_auth_user, bool):
            raise TypeError("Expected argument 'enable_block_override_for_non_auth_user' to be a bool")
        pulumi.set(__self__, "enable_block_override_for_non_auth_user", enable_block_override_for_non_auth_user)
        if enable_chatgpt_prompt and not isinstance(enable_chatgpt_prompt, bool):
            raise TypeError("Expected argument 'enable_chatgpt_prompt' to be a bool")
        pulumi.set(__self__, "enable_chatgpt_prompt", enable_chatgpt_prompt)
        if enable_cipa_compliance and not isinstance(enable_cipa_compliance, bool):
            raise TypeError("Expected argument 'enable_cipa_compliance' to be a bool")
        pulumi.set(__self__, "enable_cipa_compliance", enable_cipa_compliance)
        if enable_dynamic_content_cat and not isinstance(enable_dynamic_content_cat, bool):
            raise TypeError("Expected argument 'enable_dynamic_content_cat' to be a bool")
        pulumi.set(__self__, "enable_dynamic_content_cat", enable_dynamic_content_cat)
        if enable_gemini_prompt and not isinstance(enable_gemini_prompt, bool):
            raise TypeError("Expected argument 'enable_gemini_prompt' to be a bool")
        pulumi.set(__self__, "enable_gemini_prompt", enable_gemini_prompt)
        if enable_meta_prompt and not isinstance(enable_meta_prompt, bool):
            raise TypeError("Expected argument 'enable_meta_prompt' to be a bool")
        pulumi.set(__self__, "enable_meta_prompt", enable_meta_prompt)
        if enable_microsoft_copilot_prompt and not isinstance(enable_microsoft_copilot_prompt, bool):
            raise TypeError("Expected argument 'enable_microsoft_copilot_prompt' to be a bool")
        pulumi.set(__self__, "enable_microsoft_copilot_prompt", enable_microsoft_copilot_prompt)
        if enable_msft_o365 and not isinstance(enable_msft_o365, bool):
            raise TypeError("Expected argument 'enable_msft_o365' to be a bool")
        pulumi.set(__self__, "enable_msft_o365", enable_msft_o365)
        if enable_newly_registered_domains and not isinstance(enable_newly_registered_domains, bool):
            raise TypeError("Expected argument 'enable_newly_registered_domains' to be a bool")
        pulumi.set(__self__, "enable_newly_registered_domains", enable_newly_registered_domains)
        if enable_office365 and not isinstance(enable_office365, bool):
            raise TypeError("Expected argument 'enable_office365' to be a bool")
        pulumi.set(__self__, "enable_office365", enable_office365)
        if enable_per_plexity_prompt and not isinstance(enable_per_plexity_prompt, bool):
            raise TypeError("Expected argument 'enable_per_plexity_prompt' to be a bool")
        pulumi.set(__self__, "enable_per_plexity_prompt", enable_per_plexity_prompt)
        if enable_poep_prompt and not isinstance(enable_poep_prompt, bool):
            raise TypeError("Expected argument 'enable_poep_prompt' to be a bool")
        pulumi.set(__self__, "enable_poep_prompt", enable_poep_prompt)
        if enable_ucaas_logmein and not isinstance(enable_ucaas_logmein, bool):
            raise TypeError("Expected argument 'enable_ucaas_logmein' to be a bool")
        pulumi.set(__self__, "enable_ucaas_logmein", enable_ucaas_logmein)
        if enable_ucaas_ring_central and not isinstance(enable_ucaas_ring_central, bool):
            raise TypeError("Expected argument 'enable_ucaas_ring_central' to be a bool")
        pulumi.set(__self__, "enable_ucaas_ring_central", enable_ucaas_ring_central)
        if enable_ucaas_talkdesk and not isinstance(enable_ucaas_talkdesk, bool):
            raise TypeError("Expected argument 'enable_ucaas_talkdesk' to be a bool")
        pulumi.set(__self__, "enable_ucaas_talkdesk", enable_ucaas_talkdesk)
        if enable_ucaas_webex and not isinstance(enable_ucaas_webex, bool):
            raise TypeError("Expected argument 'enable_ucaas_webex' to be a bool")
        pulumi.set(__self__, "enable_ucaas_webex", enable_ucaas_webex)
        if enable_ucaas_zoom and not isinstance(enable_ucaas_zoom, bool):
            raise TypeError("Expected argument 'enable_ucaas_zoom' to be a bool")
        pulumi.set(__self__, "enable_ucaas_zoom", enable_ucaas_zoom)
        if enforce_safe_search and not isinstance(enforce_safe_search, bool):
            raise TypeError("Expected argument 'enforce_safe_search' to be a bool")
        pulumi.set(__self__, "enforce_safe_search", enforce_safe_search)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="blockSkype")
    def block_skype(self) -> builtins.bool:
        return pulumi.get(self, "block_skype")

    @property
    @pulumi.getter(name="considerEmbeddedSites")
    def consider_embedded_sites(self) -> builtins.bool:
        return pulumi.get(self, "consider_embedded_sites")

    @property
    @pulumi.getter(name="enableBlockOverrideForNonAuthUser")
    def enable_block_override_for_non_auth_user(self) -> builtins.bool:
        return pulumi.get(self, "enable_block_override_for_non_auth_user")

    @property
    @pulumi.getter(name="enableChatgptPrompt")
    def enable_chatgpt_prompt(self) -> builtins.bool:
        return pulumi.get(self, "enable_chatgpt_prompt")

    @property
    @pulumi.getter(name="enableCipaCompliance")
    def enable_cipa_compliance(self) -> builtins.bool:
        return pulumi.get(self, "enable_cipa_compliance")

    @property
    @pulumi.getter(name="enableDynamicContentCat")
    def enable_dynamic_content_cat(self) -> builtins.bool:
        return pulumi.get(self, "enable_dynamic_content_cat")

    @property
    @pulumi.getter(name="enableGeminiPrompt")
    def enable_gemini_prompt(self) -> builtins.bool:
        return pulumi.get(self, "enable_gemini_prompt")

    @property
    @pulumi.getter(name="enableMetaPrompt")
    def enable_meta_prompt(self) -> builtins.bool:
        return pulumi.get(self, "enable_meta_prompt")

    @property
    @pulumi.getter(name="enableMicrosoftCopilotPrompt")
    def enable_microsoft_copilot_prompt(self) -> builtins.bool:
        return pulumi.get(self, "enable_microsoft_copilot_prompt")

    @property
    @pulumi.getter(name="enableMsftO365")
    def enable_msft_o365(self) -> builtins.bool:
        return pulumi.get(self, "enable_msft_o365")

    @property
    @pulumi.getter(name="enableNewlyRegisteredDomains")
    def enable_newly_registered_domains(self) -> builtins.bool:
        return pulumi.get(self, "enable_newly_registered_domains")

    @property
    @pulumi.getter(name="enableOffice365")
    def enable_office365(self) -> builtins.bool:
        return pulumi.get(self, "enable_office365")

    @property
    @pulumi.getter(name="enablePerPlexityPrompt")
    def enable_per_plexity_prompt(self) -> builtins.bool:
        return pulumi.get(self, "enable_per_plexity_prompt")

    @property
    @pulumi.getter(name="enablePoepPrompt")
    def enable_poep_prompt(self) -> builtins.bool:
        return pulumi.get(self, "enable_poep_prompt")

    @property
    @pulumi.getter(name="enableUcaasLogmein")
    def enable_ucaas_logmein(self) -> builtins.bool:
        return pulumi.get(self, "enable_ucaas_logmein")

    @property
    @pulumi.getter(name="enableUcaasRingCentral")
    def enable_ucaas_ring_central(self) -> builtins.bool:
        return pulumi.get(self, "enable_ucaas_ring_central")

    @property
    @pulumi.getter(name="enableUcaasTalkdesk")
    def enable_ucaas_talkdesk(self) -> builtins.bool:
        return pulumi.get(self, "enable_ucaas_talkdesk")

    @property
    @pulumi.getter(name="enableUcaasWebex")
    def enable_ucaas_webex(self) -> builtins.bool:
        return pulumi.get(self, "enable_ucaas_webex")

    @property
    @pulumi.getter(name="enableUcaasZoom")
    def enable_ucaas_zoom(self) -> builtins.bool:
        return pulumi.get(self, "enable_ucaas_zoom")

    @property
    @pulumi.getter(name="enforceSafeSearch")
    def enforce_safe_search(self) -> builtins.bool:
        return pulumi.get(self, "enforce_safe_search")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetURLFilteringCloudAppSettingsResult(GetURLFilteringCloudAppSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetURLFilteringCloudAppSettingsResult(
            block_skype=self.block_skype,
            consider_embedded_sites=self.consider_embedded_sites,
            enable_block_override_for_non_auth_user=self.enable_block_override_for_non_auth_user,
            enable_chatgpt_prompt=self.enable_chatgpt_prompt,
            enable_cipa_compliance=self.enable_cipa_compliance,
            enable_dynamic_content_cat=self.enable_dynamic_content_cat,
            enable_gemini_prompt=self.enable_gemini_prompt,
            enable_meta_prompt=self.enable_meta_prompt,
            enable_microsoft_copilot_prompt=self.enable_microsoft_copilot_prompt,
            enable_msft_o365=self.enable_msft_o365,
            enable_newly_registered_domains=self.enable_newly_registered_domains,
            enable_office365=self.enable_office365,
            enable_per_plexity_prompt=self.enable_per_plexity_prompt,
            enable_poep_prompt=self.enable_poep_prompt,
            enable_ucaas_logmein=self.enable_ucaas_logmein,
            enable_ucaas_ring_central=self.enable_ucaas_ring_central,
            enable_ucaas_talkdesk=self.enable_ucaas_talkdesk,
            enable_ucaas_webex=self.enable_ucaas_webex,
            enable_ucaas_zoom=self.enable_ucaas_zoom,
            enforce_safe_search=self.enforce_safe_search,
            id=self.id)


def get_url_filtering_cloud_app_settings(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetURLFilteringCloudAppSettingsResult:
    """
    Use the **zia_url_filtering_and_cloud_app_settings** data source to get information about URL and Cloud App Control advanced policy settings.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getURLFilteringCloudAppSettings:getURLFilteringCloudAppSettings', __args__, opts=opts, typ=GetURLFilteringCloudAppSettingsResult).value

    return AwaitableGetURLFilteringCloudAppSettingsResult(
        block_skype=pulumi.get(__ret__, 'block_skype'),
        consider_embedded_sites=pulumi.get(__ret__, 'consider_embedded_sites'),
        enable_block_override_for_non_auth_user=pulumi.get(__ret__, 'enable_block_override_for_non_auth_user'),
        enable_chatgpt_prompt=pulumi.get(__ret__, 'enable_chatgpt_prompt'),
        enable_cipa_compliance=pulumi.get(__ret__, 'enable_cipa_compliance'),
        enable_dynamic_content_cat=pulumi.get(__ret__, 'enable_dynamic_content_cat'),
        enable_gemini_prompt=pulumi.get(__ret__, 'enable_gemini_prompt'),
        enable_meta_prompt=pulumi.get(__ret__, 'enable_meta_prompt'),
        enable_microsoft_copilot_prompt=pulumi.get(__ret__, 'enable_microsoft_copilot_prompt'),
        enable_msft_o365=pulumi.get(__ret__, 'enable_msft_o365'),
        enable_newly_registered_domains=pulumi.get(__ret__, 'enable_newly_registered_domains'),
        enable_office365=pulumi.get(__ret__, 'enable_office365'),
        enable_per_plexity_prompt=pulumi.get(__ret__, 'enable_per_plexity_prompt'),
        enable_poep_prompt=pulumi.get(__ret__, 'enable_poep_prompt'),
        enable_ucaas_logmein=pulumi.get(__ret__, 'enable_ucaas_logmein'),
        enable_ucaas_ring_central=pulumi.get(__ret__, 'enable_ucaas_ring_central'),
        enable_ucaas_talkdesk=pulumi.get(__ret__, 'enable_ucaas_talkdesk'),
        enable_ucaas_webex=pulumi.get(__ret__, 'enable_ucaas_webex'),
        enable_ucaas_zoom=pulumi.get(__ret__, 'enable_ucaas_zoom'),
        enforce_safe_search=pulumi.get(__ret__, 'enforce_safe_search'),
        id=pulumi.get(__ret__, 'id'))
def get_url_filtering_cloud_app_settings_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetURLFilteringCloudAppSettingsResult]:
    """
    Use the **zia_url_filtering_and_cloud_app_settings** data source to get information about URL and Cloud App Control advanced policy settings.
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getURLFilteringCloudAppSettings:getURLFilteringCloudAppSettings', __args__, opts=opts, typ=GetURLFilteringCloudAppSettingsResult)
    return __ret__.apply(lambda __response__: GetURLFilteringCloudAppSettingsResult(
        block_skype=pulumi.get(__response__, 'block_skype'),
        consider_embedded_sites=pulumi.get(__response__, 'consider_embedded_sites'),
        enable_block_override_for_non_auth_user=pulumi.get(__response__, 'enable_block_override_for_non_auth_user'),
        enable_chatgpt_prompt=pulumi.get(__response__, 'enable_chatgpt_prompt'),
        enable_cipa_compliance=pulumi.get(__response__, 'enable_cipa_compliance'),
        enable_dynamic_content_cat=pulumi.get(__response__, 'enable_dynamic_content_cat'),
        enable_gemini_prompt=pulumi.get(__response__, 'enable_gemini_prompt'),
        enable_meta_prompt=pulumi.get(__response__, 'enable_meta_prompt'),
        enable_microsoft_copilot_prompt=pulumi.get(__response__, 'enable_microsoft_copilot_prompt'),
        enable_msft_o365=pulumi.get(__response__, 'enable_msft_o365'),
        enable_newly_registered_domains=pulumi.get(__response__, 'enable_newly_registered_domains'),
        enable_office365=pulumi.get(__response__, 'enable_office365'),
        enable_per_plexity_prompt=pulumi.get(__response__, 'enable_per_plexity_prompt'),
        enable_poep_prompt=pulumi.get(__response__, 'enable_poep_prompt'),
        enable_ucaas_logmein=pulumi.get(__response__, 'enable_ucaas_logmein'),
        enable_ucaas_ring_central=pulumi.get(__response__, 'enable_ucaas_ring_central'),
        enable_ucaas_talkdesk=pulumi.get(__response__, 'enable_ucaas_talkdesk'),
        enable_ucaas_webex=pulumi.get(__response__, 'enable_ucaas_webex'),
        enable_ucaas_zoom=pulumi.get(__response__, 'enable_ucaas_zoom'),
        enforce_safe_search=pulumi.get(__response__, 'enforce_safe_search'),
        id=pulumi.get(__response__, 'id')))
