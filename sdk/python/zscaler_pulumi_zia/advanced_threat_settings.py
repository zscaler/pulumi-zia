# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AdvancedThreatSettingsArgs', 'AdvancedThreatSettings']

@pulumi.input_type
class AdvancedThreatSettingsArgs:
    def __init__(__self__, *,
                 activex_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 activex_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 ad_spyware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 ad_spyware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 alert_for_unknown_suspicious_c2_traffic: Optional[pulumi.Input[builtins.bool]] = None,
                 anonymizer_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 anonymizer_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 bit_torrent_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 bit_torrent_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 block_countries_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 blocked_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 browser_exploits_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 browser_exploits_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_server_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_server_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_traffic_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_traffic_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 cookie_stealing_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 cookie_stealing_pcap_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 crypto_mining_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 crypto_mining_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 dga_domains_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 dga_domains_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 file_format_vunerabilites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 file_format_vunerabilites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 google_talk_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 google_talk_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 irc_tunnelling_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 irc_tunnelling_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 known_phishing_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 known_phishing_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 malicious_urls_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 malware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 malware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 potential_malicious_requests_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 potential_malicious_requests_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 risk_tolerance: Optional[pulumi.Input[builtins.int]] = None,
                 risk_tolerance_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 ssh_tunnelling_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 ssh_tunnelling_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 suspect_adware_spyware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 suspect_adware_spyware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 suspected_phishing_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 suspected_phishing_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 tor_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 tor_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 web_spam_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 web_spam_capture: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a AdvancedThreatSettings resource.
        :param pulumi.Input[builtins.bool] activex_blocked: A Boolean value specifying whether sites are allowed or blocked from accessing vulnerable ActiveX controls that are
               known to have been exploited.
        :param pulumi.Input[builtins.bool] activex_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for ActiveX controls
        :param pulumi.Input[builtins.bool] ad_spyware_sites_blocked: A Boolean value specifying whether to allow or block websites known to contain adware or spyware that displays malicious
               advertisements that can collect users' information without their knowledge
        :param pulumi.Input[builtins.bool] ad_spyware_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for adware and spyware sites
        :param pulumi.Input[builtins.bool] alert_for_unknown_suspicious_c2_traffic: A Boolean value specifying whether to send alerts upon detecting unknown or suspicious C2 traffic
        :param pulumi.Input[builtins.bool] anonymizer_blocked: A Boolean value specifying whether to allow or block applications and methods used to obscure the destination and the
               content accessed by the user, therefore blocking traffic to anonymizing web proxies
        :param pulumi.Input[builtins.bool] anonymizer_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for anonymizers
        :param pulumi.Input[builtins.bool] bit_torrent_blocked: A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        :param pulumi.Input[builtins.bool] bit_torrent_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for BitTorrent
        :param pulumi.Input[builtins.bool] block_countries_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input[builtins.bool] browser_exploits_blocked: A Boolean value specifying whether known web browser vulnerabilities prone to exploitation are allowed or blocked.
        :param pulumi.Input[builtins.bool] browser_exploits_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for browser exploits
        :param pulumi.Input[builtins.bool] cmd_ctl_server_blocked: A Boolean value specifying whether connections to known Command & Control (C2) Servers are allowed or blocked
        :param pulumi.Input[builtins.bool] cmd_ctl_server_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for connections to known C2 servers
        :param pulumi.Input[builtins.bool] cmd_ctl_traffic_blocked: A Boolean value specifying whether botnets are allowed or blocked from sending or receiving commands to unknown servers
        :param pulumi.Input[builtins.bool] cmd_ctl_traffic_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for botnets
        :param pulumi.Input[builtins.bool] cookie_stealing_blocked: A Boolean value specifying whether to allow or block third-party websites that gather cookie information
        :param pulumi.Input[builtins.bool] cookie_stealing_pcap_enabled: A Boolean value specifying whether packet capture (PCAP) is enabled or not for cookie stealing
        :param pulumi.Input[builtins.bool] crypto_mining_blocked: A Boolean value specifying whether to allow or block cryptocurrency mining network traffic and script
        :param pulumi.Input[builtins.bool] crypto_mining_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for cryptomining
        :param pulumi.Input[builtins.bool] dga_domains_blocked: A Boolean value specifying whether to allow or block domains that are suspected to be generated using domain generation
               algorithms (DGA)
        :param pulumi.Input[builtins.bool] dga_domains_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for DGA domains
        :param pulumi.Input[builtins.bool] file_format_vunerabilites_blocked: A Boolean value specifying whether known file format vulnerabilities and suspicious or malicious content in Microsoft
               Office or PDF documents are allowed or blocked
        :param pulumi.Input[builtins.bool] file_format_vunerabilites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for file format vulnerabilities
        :param pulumi.Input[builtins.bool] google_talk_blocked: A Boolean value specifying whether to allow or block access to Google Hangouts, a popular P2P VoIP application.
        :param pulumi.Input[builtins.bool] google_talk_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for Google Hangouts
        :param pulumi.Input[builtins.bool] irc_tunnelling_blocked: A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        :param pulumi.Input[builtins.bool] irc_tunnelling_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for IRC tunnels
        :param pulumi.Input[builtins.bool] known_phishing_sites_blocked: A Boolean value specifying whether known phishing sites are allowed or blocked
        :param pulumi.Input[builtins.bool] known_phishing_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for known phishing sites
        :param pulumi.Input[builtins.bool] malicious_urls_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious URLs
        :param pulumi.Input[builtins.bool] malware_sites_blocked: A Boolean value specifying whether known malicious sites and content are allowed or blocked
        :param pulumi.Input[builtins.bool] malware_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious sites
        :param pulumi.Input[builtins.bool] potential_malicious_requests_blocked: A Boolean value specifying whether to allow or block this type of cross-site scripting (XSS)
        :param pulumi.Input[builtins.bool] potential_malicious_requests_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for (XSS) attacks
        :param pulumi.Input[builtins.int] risk_tolerance: The Page Risk tolerance index set between 0 and 100 (100 being the highest risk).
        :param pulumi.Input[builtins.bool] risk_tolerance_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspicious web pages
        :param pulumi.Input[builtins.bool] ssh_tunnelling_blocked: A Boolean value specifying whether to allow or block SSH traffic being tunneled over HTTP/Ss
        :param pulumi.Input[builtins.bool] ssh_tunnelling_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for SSH tunnels
        :param pulumi.Input[builtins.bool] suspect_adware_spyware_sites_blocked: A Boolean value specifying whether to allow or block any detections of communication and callback traffic associated
               with spyware agents and data transmission
        :param pulumi.Input[builtins.bool] suspect_adware_spyware_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected adware and spyware sites
        :param pulumi.Input[builtins.bool] suspected_phishing_sites_blocked: A Boolean value specifying whether to allow or block suspected phishing sites identified through heuristic detection.
        :param pulumi.Input[builtins.bool] suspected_phishing_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected phishing sites
        :param pulumi.Input[builtins.bool] tor_blocked: A Boolean value specifying whether to allow or block the usage of Tor, a popular P2P anonymizer protocol with support
               for encryption.
        :param pulumi.Input[builtins.bool] tor_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for Tor
        :param pulumi.Input[builtins.bool] web_spam_blocked: A Boolean value specifying whether to allow or block web pages that pretend to contain useful information, to get higher
               ranking in search engine results or drive traffic to phishing, adware, or spyware distribution sites.
        :param pulumi.Input[builtins.bool] web_spam_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        """
        if activex_blocked is not None:
            pulumi.set(__self__, "activex_blocked", activex_blocked)
        if activex_capture is not None:
            pulumi.set(__self__, "activex_capture", activex_capture)
        if ad_spyware_sites_blocked is not None:
            pulumi.set(__self__, "ad_spyware_sites_blocked", ad_spyware_sites_blocked)
        if ad_spyware_sites_capture is not None:
            pulumi.set(__self__, "ad_spyware_sites_capture", ad_spyware_sites_capture)
        if alert_for_unknown_suspicious_c2_traffic is not None:
            pulumi.set(__self__, "alert_for_unknown_suspicious_c2_traffic", alert_for_unknown_suspicious_c2_traffic)
        if anonymizer_blocked is not None:
            pulumi.set(__self__, "anonymizer_blocked", anonymizer_blocked)
        if anonymizer_capture is not None:
            pulumi.set(__self__, "anonymizer_capture", anonymizer_capture)
        if bit_torrent_blocked is not None:
            pulumi.set(__self__, "bit_torrent_blocked", bit_torrent_blocked)
        if bit_torrent_capture is not None:
            pulumi.set(__self__, "bit_torrent_capture", bit_torrent_capture)
        if block_countries_capture is not None:
            pulumi.set(__self__, "block_countries_capture", block_countries_capture)
        if blocked_countries is not None:
            pulumi.set(__self__, "blocked_countries", blocked_countries)
        if browser_exploits_blocked is not None:
            pulumi.set(__self__, "browser_exploits_blocked", browser_exploits_blocked)
        if browser_exploits_capture is not None:
            pulumi.set(__self__, "browser_exploits_capture", browser_exploits_capture)
        if cmd_ctl_server_blocked is not None:
            pulumi.set(__self__, "cmd_ctl_server_blocked", cmd_ctl_server_blocked)
        if cmd_ctl_server_capture is not None:
            pulumi.set(__self__, "cmd_ctl_server_capture", cmd_ctl_server_capture)
        if cmd_ctl_traffic_blocked is not None:
            pulumi.set(__self__, "cmd_ctl_traffic_blocked", cmd_ctl_traffic_blocked)
        if cmd_ctl_traffic_capture is not None:
            pulumi.set(__self__, "cmd_ctl_traffic_capture", cmd_ctl_traffic_capture)
        if cookie_stealing_blocked is not None:
            pulumi.set(__self__, "cookie_stealing_blocked", cookie_stealing_blocked)
        if cookie_stealing_pcap_enabled is not None:
            pulumi.set(__self__, "cookie_stealing_pcap_enabled", cookie_stealing_pcap_enabled)
        if crypto_mining_blocked is not None:
            pulumi.set(__self__, "crypto_mining_blocked", crypto_mining_blocked)
        if crypto_mining_capture is not None:
            pulumi.set(__self__, "crypto_mining_capture", crypto_mining_capture)
        if dga_domains_blocked is not None:
            pulumi.set(__self__, "dga_domains_blocked", dga_domains_blocked)
        if dga_domains_capture is not None:
            pulumi.set(__self__, "dga_domains_capture", dga_domains_capture)
        if file_format_vunerabilites_blocked is not None:
            pulumi.set(__self__, "file_format_vunerabilites_blocked", file_format_vunerabilites_blocked)
        if file_format_vunerabilites_capture is not None:
            pulumi.set(__self__, "file_format_vunerabilites_capture", file_format_vunerabilites_capture)
        if google_talk_blocked is not None:
            pulumi.set(__self__, "google_talk_blocked", google_talk_blocked)
        if google_talk_capture is not None:
            pulumi.set(__self__, "google_talk_capture", google_talk_capture)
        if irc_tunnelling_blocked is not None:
            pulumi.set(__self__, "irc_tunnelling_blocked", irc_tunnelling_blocked)
        if irc_tunnelling_capture is not None:
            pulumi.set(__self__, "irc_tunnelling_capture", irc_tunnelling_capture)
        if known_phishing_sites_blocked is not None:
            pulumi.set(__self__, "known_phishing_sites_blocked", known_phishing_sites_blocked)
        if known_phishing_sites_capture is not None:
            pulumi.set(__self__, "known_phishing_sites_capture", known_phishing_sites_capture)
        if malicious_urls_capture is not None:
            pulumi.set(__self__, "malicious_urls_capture", malicious_urls_capture)
        if malware_sites_blocked is not None:
            pulumi.set(__self__, "malware_sites_blocked", malware_sites_blocked)
        if malware_sites_capture is not None:
            pulumi.set(__self__, "malware_sites_capture", malware_sites_capture)
        if potential_malicious_requests_blocked is not None:
            pulumi.set(__self__, "potential_malicious_requests_blocked", potential_malicious_requests_blocked)
        if potential_malicious_requests_capture is not None:
            pulumi.set(__self__, "potential_malicious_requests_capture", potential_malicious_requests_capture)
        if risk_tolerance is not None:
            pulumi.set(__self__, "risk_tolerance", risk_tolerance)
        if risk_tolerance_capture is not None:
            pulumi.set(__self__, "risk_tolerance_capture", risk_tolerance_capture)
        if ssh_tunnelling_blocked is not None:
            pulumi.set(__self__, "ssh_tunnelling_blocked", ssh_tunnelling_blocked)
        if ssh_tunnelling_capture is not None:
            pulumi.set(__self__, "ssh_tunnelling_capture", ssh_tunnelling_capture)
        if suspect_adware_spyware_sites_blocked is not None:
            pulumi.set(__self__, "suspect_adware_spyware_sites_blocked", suspect_adware_spyware_sites_blocked)
        if suspect_adware_spyware_sites_capture is not None:
            pulumi.set(__self__, "suspect_adware_spyware_sites_capture", suspect_adware_spyware_sites_capture)
        if suspected_phishing_sites_blocked is not None:
            pulumi.set(__self__, "suspected_phishing_sites_blocked", suspected_phishing_sites_blocked)
        if suspected_phishing_sites_capture is not None:
            pulumi.set(__self__, "suspected_phishing_sites_capture", suspected_phishing_sites_capture)
        if tor_blocked is not None:
            pulumi.set(__self__, "tor_blocked", tor_blocked)
        if tor_capture is not None:
            pulumi.set(__self__, "tor_capture", tor_capture)
        if web_spam_blocked is not None:
            pulumi.set(__self__, "web_spam_blocked", web_spam_blocked)
        if web_spam_capture is not None:
            pulumi.set(__self__, "web_spam_capture", web_spam_capture)

    @property
    @pulumi.getter(name="activexBlocked")
    def activex_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether sites are allowed or blocked from accessing vulnerable ActiveX controls that are
        known to have been exploited.
        """
        return pulumi.get(self, "activex_blocked")

    @activex_blocked.setter
    def activex_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "activex_blocked", value)

    @property
    @pulumi.getter(name="activexCapture")
    def activex_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for ActiveX controls
        """
        return pulumi.get(self, "activex_capture")

    @activex_capture.setter
    def activex_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "activex_capture", value)

    @property
    @pulumi.getter(name="adSpywareSitesBlocked")
    def ad_spyware_sites_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block websites known to contain adware or spyware that displays malicious
        advertisements that can collect users' information without their knowledge
        """
        return pulumi.get(self, "ad_spyware_sites_blocked")

    @ad_spyware_sites_blocked.setter
    def ad_spyware_sites_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ad_spyware_sites_blocked", value)

    @property
    @pulumi.getter(name="adSpywareSitesCapture")
    def ad_spyware_sites_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for adware and spyware sites
        """
        return pulumi.get(self, "ad_spyware_sites_capture")

    @ad_spyware_sites_capture.setter
    def ad_spyware_sites_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ad_spyware_sites_capture", value)

    @property
    @pulumi.getter(name="alertForUnknownSuspiciousC2Traffic")
    def alert_for_unknown_suspicious_c2_traffic(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to send alerts upon detecting unknown or suspicious C2 traffic
        """
        return pulumi.get(self, "alert_for_unknown_suspicious_c2_traffic")

    @alert_for_unknown_suspicious_c2_traffic.setter
    def alert_for_unknown_suspicious_c2_traffic(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "alert_for_unknown_suspicious_c2_traffic", value)

    @property
    @pulumi.getter(name="anonymizerBlocked")
    def anonymizer_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block applications and methods used to obscure the destination and the
        content accessed by the user, therefore blocking traffic to anonymizing web proxies
        """
        return pulumi.get(self, "anonymizer_blocked")

    @anonymizer_blocked.setter
    def anonymizer_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "anonymizer_blocked", value)

    @property
    @pulumi.getter(name="anonymizerCapture")
    def anonymizer_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for anonymizers
        """
        return pulumi.get(self, "anonymizer_capture")

    @anonymizer_capture.setter
    def anonymizer_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "anonymizer_capture", value)

    @property
    @pulumi.getter(name="bitTorrentBlocked")
    def bit_torrent_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        """
        return pulumi.get(self, "bit_torrent_blocked")

    @bit_torrent_blocked.setter
    def bit_torrent_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bit_torrent_blocked", value)

    @property
    @pulumi.getter(name="bitTorrentCapture")
    def bit_torrent_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for BitTorrent
        """
        return pulumi.get(self, "bit_torrent_capture")

    @bit_torrent_capture.setter
    def bit_torrent_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bit_torrent_capture", value)

    @property
    @pulumi.getter(name="blockCountriesCapture")
    def block_countries_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        """
        return pulumi.get(self, "block_countries_capture")

    @block_countries_capture.setter
    def block_countries_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_countries_capture", value)

    @property
    @pulumi.getter(name="blockedCountries")
    def blocked_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        countries.
        """
        return pulumi.get(self, "blocked_countries")

    @blocked_countries.setter
    def blocked_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_countries", value)

    @property
    @pulumi.getter(name="browserExploitsBlocked")
    def browser_exploits_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether known web browser vulnerabilities prone to exploitation are allowed or blocked.
        """
        return pulumi.get(self, "browser_exploits_blocked")

    @browser_exploits_blocked.setter
    def browser_exploits_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "browser_exploits_blocked", value)

    @property
    @pulumi.getter(name="browserExploitsCapture")
    def browser_exploits_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for browser exploits
        """
        return pulumi.get(self, "browser_exploits_capture")

    @browser_exploits_capture.setter
    def browser_exploits_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "browser_exploits_capture", value)

    @property
    @pulumi.getter(name="cmdCtlServerBlocked")
    def cmd_ctl_server_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether connections to known Command & Control (C2) Servers are allowed or blocked
        """
        return pulumi.get(self, "cmd_ctl_server_blocked")

    @cmd_ctl_server_blocked.setter
    def cmd_ctl_server_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cmd_ctl_server_blocked", value)

    @property
    @pulumi.getter(name="cmdCtlServerCapture")
    def cmd_ctl_server_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for connections to known C2 servers
        """
        return pulumi.get(self, "cmd_ctl_server_capture")

    @cmd_ctl_server_capture.setter
    def cmd_ctl_server_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cmd_ctl_server_capture", value)

    @property
    @pulumi.getter(name="cmdCtlTrafficBlocked")
    def cmd_ctl_traffic_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether botnets are allowed or blocked from sending or receiving commands to unknown servers
        """
        return pulumi.get(self, "cmd_ctl_traffic_blocked")

    @cmd_ctl_traffic_blocked.setter
    def cmd_ctl_traffic_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cmd_ctl_traffic_blocked", value)

    @property
    @pulumi.getter(name="cmdCtlTrafficCapture")
    def cmd_ctl_traffic_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for botnets
        """
        return pulumi.get(self, "cmd_ctl_traffic_capture")

    @cmd_ctl_traffic_capture.setter
    def cmd_ctl_traffic_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cmd_ctl_traffic_capture", value)

    @property
    @pulumi.getter(name="cookieStealingBlocked")
    def cookie_stealing_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block third-party websites that gather cookie information
        """
        return pulumi.get(self, "cookie_stealing_blocked")

    @cookie_stealing_blocked.setter
    def cookie_stealing_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cookie_stealing_blocked", value)

    @property
    @pulumi.getter(name="cookieStealingPcapEnabled")
    def cookie_stealing_pcap_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for cookie stealing
        """
        return pulumi.get(self, "cookie_stealing_pcap_enabled")

    @cookie_stealing_pcap_enabled.setter
    def cookie_stealing_pcap_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cookie_stealing_pcap_enabled", value)

    @property
    @pulumi.getter(name="cryptoMiningBlocked")
    def crypto_mining_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block cryptocurrency mining network traffic and script
        """
        return pulumi.get(self, "crypto_mining_blocked")

    @crypto_mining_blocked.setter
    def crypto_mining_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "crypto_mining_blocked", value)

    @property
    @pulumi.getter(name="cryptoMiningCapture")
    def crypto_mining_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for cryptomining
        """
        return pulumi.get(self, "crypto_mining_capture")

    @crypto_mining_capture.setter
    def crypto_mining_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "crypto_mining_capture", value)

    @property
    @pulumi.getter(name="dgaDomainsBlocked")
    def dga_domains_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block domains that are suspected to be generated using domain generation
        algorithms (DGA)
        """
        return pulumi.get(self, "dga_domains_blocked")

    @dga_domains_blocked.setter
    def dga_domains_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dga_domains_blocked", value)

    @property
    @pulumi.getter(name="dgaDomainsCapture")
    def dga_domains_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for DGA domains
        """
        return pulumi.get(self, "dga_domains_capture")

    @dga_domains_capture.setter
    def dga_domains_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dga_domains_capture", value)

    @property
    @pulumi.getter(name="fileFormatVunerabilitesBlocked")
    def file_format_vunerabilites_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether known file format vulnerabilities and suspicious or malicious content in Microsoft
        Office or PDF documents are allowed or blocked
        """
        return pulumi.get(self, "file_format_vunerabilites_blocked")

    @file_format_vunerabilites_blocked.setter
    def file_format_vunerabilites_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "file_format_vunerabilites_blocked", value)

    @property
    @pulumi.getter(name="fileFormatVunerabilitesCapture")
    def file_format_vunerabilites_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for file format vulnerabilities
        """
        return pulumi.get(self, "file_format_vunerabilites_capture")

    @file_format_vunerabilites_capture.setter
    def file_format_vunerabilites_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "file_format_vunerabilites_capture", value)

    @property
    @pulumi.getter(name="googleTalkBlocked")
    def google_talk_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block access to Google Hangouts, a popular P2P VoIP application.
        """
        return pulumi.get(self, "google_talk_blocked")

    @google_talk_blocked.setter
    def google_talk_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "google_talk_blocked", value)

    @property
    @pulumi.getter(name="googleTalkCapture")
    def google_talk_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for Google Hangouts
        """
        return pulumi.get(self, "google_talk_capture")

    @google_talk_capture.setter
    def google_talk_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "google_talk_capture", value)

    @property
    @pulumi.getter(name="ircTunnellingBlocked")
    def irc_tunnelling_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        """
        return pulumi.get(self, "irc_tunnelling_blocked")

    @irc_tunnelling_blocked.setter
    def irc_tunnelling_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "irc_tunnelling_blocked", value)

    @property
    @pulumi.getter(name="ircTunnellingCapture")
    def irc_tunnelling_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for IRC tunnels
        """
        return pulumi.get(self, "irc_tunnelling_capture")

    @irc_tunnelling_capture.setter
    def irc_tunnelling_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "irc_tunnelling_capture", value)

    @property
    @pulumi.getter(name="knownPhishingSitesBlocked")
    def known_phishing_sites_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether known phishing sites are allowed or blocked
        """
        return pulumi.get(self, "known_phishing_sites_blocked")

    @known_phishing_sites_blocked.setter
    def known_phishing_sites_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "known_phishing_sites_blocked", value)

    @property
    @pulumi.getter(name="knownPhishingSitesCapture")
    def known_phishing_sites_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for known phishing sites
        """
        return pulumi.get(self, "known_phishing_sites_capture")

    @known_phishing_sites_capture.setter
    def known_phishing_sites_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "known_phishing_sites_capture", value)

    @property
    @pulumi.getter(name="maliciousUrlsCapture")
    def malicious_urls_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious URLs
        """
        return pulumi.get(self, "malicious_urls_capture")

    @malicious_urls_capture.setter
    def malicious_urls_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "malicious_urls_capture", value)

    @property
    @pulumi.getter(name="malwareSitesBlocked")
    def malware_sites_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether known malicious sites and content are allowed or blocked
        """
        return pulumi.get(self, "malware_sites_blocked")

    @malware_sites_blocked.setter
    def malware_sites_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "malware_sites_blocked", value)

    @property
    @pulumi.getter(name="malwareSitesCapture")
    def malware_sites_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious sites
        """
        return pulumi.get(self, "malware_sites_capture")

    @malware_sites_capture.setter
    def malware_sites_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "malware_sites_capture", value)

    @property
    @pulumi.getter(name="potentialMaliciousRequestsBlocked")
    def potential_malicious_requests_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block this type of cross-site scripting (XSS)
        """
        return pulumi.get(self, "potential_malicious_requests_blocked")

    @potential_malicious_requests_blocked.setter
    def potential_malicious_requests_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "potential_malicious_requests_blocked", value)

    @property
    @pulumi.getter(name="potentialMaliciousRequestsCapture")
    def potential_malicious_requests_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for (XSS) attacks
        """
        return pulumi.get(self, "potential_malicious_requests_capture")

    @potential_malicious_requests_capture.setter
    def potential_malicious_requests_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "potential_malicious_requests_capture", value)

    @property
    @pulumi.getter(name="riskTolerance")
    def risk_tolerance(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The Page Risk tolerance index set between 0 and 100 (100 being the highest risk).
        """
        return pulumi.get(self, "risk_tolerance")

    @risk_tolerance.setter
    def risk_tolerance(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "risk_tolerance", value)

    @property
    @pulumi.getter(name="riskToleranceCapture")
    def risk_tolerance_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspicious web pages
        """
        return pulumi.get(self, "risk_tolerance_capture")

    @risk_tolerance_capture.setter
    def risk_tolerance_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "risk_tolerance_capture", value)

    @property
    @pulumi.getter(name="sshTunnellingBlocked")
    def ssh_tunnelling_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block SSH traffic being tunneled over HTTP/Ss
        """
        return pulumi.get(self, "ssh_tunnelling_blocked")

    @ssh_tunnelling_blocked.setter
    def ssh_tunnelling_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ssh_tunnelling_blocked", value)

    @property
    @pulumi.getter(name="sshTunnellingCapture")
    def ssh_tunnelling_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for SSH tunnels
        """
        return pulumi.get(self, "ssh_tunnelling_capture")

    @ssh_tunnelling_capture.setter
    def ssh_tunnelling_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ssh_tunnelling_capture", value)

    @property
    @pulumi.getter(name="suspectAdwareSpywareSitesBlocked")
    def suspect_adware_spyware_sites_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block any detections of communication and callback traffic associated
        with spyware agents and data transmission
        """
        return pulumi.get(self, "suspect_adware_spyware_sites_blocked")

    @suspect_adware_spyware_sites_blocked.setter
    def suspect_adware_spyware_sites_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspect_adware_spyware_sites_blocked", value)

    @property
    @pulumi.getter(name="suspectAdwareSpywareSitesCapture")
    def suspect_adware_spyware_sites_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected adware and spyware sites
        """
        return pulumi.get(self, "suspect_adware_spyware_sites_capture")

    @suspect_adware_spyware_sites_capture.setter
    def suspect_adware_spyware_sites_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspect_adware_spyware_sites_capture", value)

    @property
    @pulumi.getter(name="suspectedPhishingSitesBlocked")
    def suspected_phishing_sites_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block suspected phishing sites identified through heuristic detection.
        """
        return pulumi.get(self, "suspected_phishing_sites_blocked")

    @suspected_phishing_sites_blocked.setter
    def suspected_phishing_sites_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspected_phishing_sites_blocked", value)

    @property
    @pulumi.getter(name="suspectedPhishingSitesCapture")
    def suspected_phishing_sites_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected phishing sites
        """
        return pulumi.get(self, "suspected_phishing_sites_capture")

    @suspected_phishing_sites_capture.setter
    def suspected_phishing_sites_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspected_phishing_sites_capture", value)

    @property
    @pulumi.getter(name="torBlocked")
    def tor_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block the usage of Tor, a popular P2P anonymizer protocol with support
        for encryption.
        """
        return pulumi.get(self, "tor_blocked")

    @tor_blocked.setter
    def tor_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "tor_blocked", value)

    @property
    @pulumi.getter(name="torCapture")
    def tor_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for Tor
        """
        return pulumi.get(self, "tor_capture")

    @tor_capture.setter
    def tor_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "tor_capture", value)

    @property
    @pulumi.getter(name="webSpamBlocked")
    def web_spam_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block web pages that pretend to contain useful information, to get higher
        ranking in search engine results or drive traffic to phishing, adware, or spyware distribution sites.
        """
        return pulumi.get(self, "web_spam_blocked")

    @web_spam_blocked.setter
    def web_spam_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "web_spam_blocked", value)

    @property
    @pulumi.getter(name="webSpamCapture")
    def web_spam_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        """
        return pulumi.get(self, "web_spam_capture")

    @web_spam_capture.setter
    def web_spam_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "web_spam_capture", value)


@pulumi.input_type
class _AdvancedThreatSettingsState:
    def __init__(__self__, *,
                 activex_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 activex_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 ad_spyware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 ad_spyware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 alert_for_unknown_suspicious_c2_traffic: Optional[pulumi.Input[builtins.bool]] = None,
                 anonymizer_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 anonymizer_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 bit_torrent_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 bit_torrent_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 block_countries_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 blocked_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 browser_exploits_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 browser_exploits_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_server_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_server_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_traffic_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_traffic_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 cookie_stealing_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 cookie_stealing_pcap_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 crypto_mining_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 crypto_mining_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 dga_domains_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 dga_domains_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 file_format_vunerabilites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 file_format_vunerabilites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 google_talk_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 google_talk_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 irc_tunnelling_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 irc_tunnelling_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 known_phishing_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 known_phishing_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 malicious_urls_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 malware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 malware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 potential_malicious_requests_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 potential_malicious_requests_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 risk_tolerance: Optional[pulumi.Input[builtins.int]] = None,
                 risk_tolerance_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 ssh_tunnelling_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 ssh_tunnelling_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 suspect_adware_spyware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 suspect_adware_spyware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 suspected_phishing_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 suspected_phishing_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 tor_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 tor_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 web_spam_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 web_spam_capture: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering AdvancedThreatSettings resources.
        :param pulumi.Input[builtins.bool] activex_blocked: A Boolean value specifying whether sites are allowed or blocked from accessing vulnerable ActiveX controls that are
               known to have been exploited.
        :param pulumi.Input[builtins.bool] activex_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for ActiveX controls
        :param pulumi.Input[builtins.bool] ad_spyware_sites_blocked: A Boolean value specifying whether to allow or block websites known to contain adware or spyware that displays malicious
               advertisements that can collect users' information without their knowledge
        :param pulumi.Input[builtins.bool] ad_spyware_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for adware and spyware sites
        :param pulumi.Input[builtins.bool] alert_for_unknown_suspicious_c2_traffic: A Boolean value specifying whether to send alerts upon detecting unknown or suspicious C2 traffic
        :param pulumi.Input[builtins.bool] anonymizer_blocked: A Boolean value specifying whether to allow or block applications and methods used to obscure the destination and the
               content accessed by the user, therefore blocking traffic to anonymizing web proxies
        :param pulumi.Input[builtins.bool] anonymizer_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for anonymizers
        :param pulumi.Input[builtins.bool] bit_torrent_blocked: A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        :param pulumi.Input[builtins.bool] bit_torrent_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for BitTorrent
        :param pulumi.Input[builtins.bool] block_countries_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input[builtins.bool] browser_exploits_blocked: A Boolean value specifying whether known web browser vulnerabilities prone to exploitation are allowed or blocked.
        :param pulumi.Input[builtins.bool] browser_exploits_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for browser exploits
        :param pulumi.Input[builtins.bool] cmd_ctl_server_blocked: A Boolean value specifying whether connections to known Command & Control (C2) Servers are allowed or blocked
        :param pulumi.Input[builtins.bool] cmd_ctl_server_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for connections to known C2 servers
        :param pulumi.Input[builtins.bool] cmd_ctl_traffic_blocked: A Boolean value specifying whether botnets are allowed or blocked from sending or receiving commands to unknown servers
        :param pulumi.Input[builtins.bool] cmd_ctl_traffic_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for botnets
        :param pulumi.Input[builtins.bool] cookie_stealing_blocked: A Boolean value specifying whether to allow or block third-party websites that gather cookie information
        :param pulumi.Input[builtins.bool] cookie_stealing_pcap_enabled: A Boolean value specifying whether packet capture (PCAP) is enabled or not for cookie stealing
        :param pulumi.Input[builtins.bool] crypto_mining_blocked: A Boolean value specifying whether to allow or block cryptocurrency mining network traffic and script
        :param pulumi.Input[builtins.bool] crypto_mining_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for cryptomining
        :param pulumi.Input[builtins.bool] dga_domains_blocked: A Boolean value specifying whether to allow or block domains that are suspected to be generated using domain generation
               algorithms (DGA)
        :param pulumi.Input[builtins.bool] dga_domains_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for DGA domains
        :param pulumi.Input[builtins.bool] file_format_vunerabilites_blocked: A Boolean value specifying whether known file format vulnerabilities and suspicious or malicious content in Microsoft
               Office or PDF documents are allowed or blocked
        :param pulumi.Input[builtins.bool] file_format_vunerabilites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for file format vulnerabilities
        :param pulumi.Input[builtins.bool] google_talk_blocked: A Boolean value specifying whether to allow or block access to Google Hangouts, a popular P2P VoIP application.
        :param pulumi.Input[builtins.bool] google_talk_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for Google Hangouts
        :param pulumi.Input[builtins.bool] irc_tunnelling_blocked: A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        :param pulumi.Input[builtins.bool] irc_tunnelling_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for IRC tunnels
        :param pulumi.Input[builtins.bool] known_phishing_sites_blocked: A Boolean value specifying whether known phishing sites are allowed or blocked
        :param pulumi.Input[builtins.bool] known_phishing_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for known phishing sites
        :param pulumi.Input[builtins.bool] malicious_urls_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious URLs
        :param pulumi.Input[builtins.bool] malware_sites_blocked: A Boolean value specifying whether known malicious sites and content are allowed or blocked
        :param pulumi.Input[builtins.bool] malware_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious sites
        :param pulumi.Input[builtins.bool] potential_malicious_requests_blocked: A Boolean value specifying whether to allow or block this type of cross-site scripting (XSS)
        :param pulumi.Input[builtins.bool] potential_malicious_requests_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for (XSS) attacks
        :param pulumi.Input[builtins.int] risk_tolerance: The Page Risk tolerance index set between 0 and 100 (100 being the highest risk).
        :param pulumi.Input[builtins.bool] risk_tolerance_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspicious web pages
        :param pulumi.Input[builtins.bool] ssh_tunnelling_blocked: A Boolean value specifying whether to allow or block SSH traffic being tunneled over HTTP/Ss
        :param pulumi.Input[builtins.bool] ssh_tunnelling_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for SSH tunnels
        :param pulumi.Input[builtins.bool] suspect_adware_spyware_sites_blocked: A Boolean value specifying whether to allow or block any detections of communication and callback traffic associated
               with spyware agents and data transmission
        :param pulumi.Input[builtins.bool] suspect_adware_spyware_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected adware and spyware sites
        :param pulumi.Input[builtins.bool] suspected_phishing_sites_blocked: A Boolean value specifying whether to allow or block suspected phishing sites identified through heuristic detection.
        :param pulumi.Input[builtins.bool] suspected_phishing_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected phishing sites
        :param pulumi.Input[builtins.bool] tor_blocked: A Boolean value specifying whether to allow or block the usage of Tor, a popular P2P anonymizer protocol with support
               for encryption.
        :param pulumi.Input[builtins.bool] tor_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for Tor
        :param pulumi.Input[builtins.bool] web_spam_blocked: A Boolean value specifying whether to allow or block web pages that pretend to contain useful information, to get higher
               ranking in search engine results or drive traffic to phishing, adware, or spyware distribution sites.
        :param pulumi.Input[builtins.bool] web_spam_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        """
        if activex_blocked is not None:
            pulumi.set(__self__, "activex_blocked", activex_blocked)
        if activex_capture is not None:
            pulumi.set(__self__, "activex_capture", activex_capture)
        if ad_spyware_sites_blocked is not None:
            pulumi.set(__self__, "ad_spyware_sites_blocked", ad_spyware_sites_blocked)
        if ad_spyware_sites_capture is not None:
            pulumi.set(__self__, "ad_spyware_sites_capture", ad_spyware_sites_capture)
        if alert_for_unknown_suspicious_c2_traffic is not None:
            pulumi.set(__self__, "alert_for_unknown_suspicious_c2_traffic", alert_for_unknown_suspicious_c2_traffic)
        if anonymizer_blocked is not None:
            pulumi.set(__self__, "anonymizer_blocked", anonymizer_blocked)
        if anonymizer_capture is not None:
            pulumi.set(__self__, "anonymizer_capture", anonymizer_capture)
        if bit_torrent_blocked is not None:
            pulumi.set(__self__, "bit_torrent_blocked", bit_torrent_blocked)
        if bit_torrent_capture is not None:
            pulumi.set(__self__, "bit_torrent_capture", bit_torrent_capture)
        if block_countries_capture is not None:
            pulumi.set(__self__, "block_countries_capture", block_countries_capture)
        if blocked_countries is not None:
            pulumi.set(__self__, "blocked_countries", blocked_countries)
        if browser_exploits_blocked is not None:
            pulumi.set(__self__, "browser_exploits_blocked", browser_exploits_blocked)
        if browser_exploits_capture is not None:
            pulumi.set(__self__, "browser_exploits_capture", browser_exploits_capture)
        if cmd_ctl_server_blocked is not None:
            pulumi.set(__self__, "cmd_ctl_server_blocked", cmd_ctl_server_blocked)
        if cmd_ctl_server_capture is not None:
            pulumi.set(__self__, "cmd_ctl_server_capture", cmd_ctl_server_capture)
        if cmd_ctl_traffic_blocked is not None:
            pulumi.set(__self__, "cmd_ctl_traffic_blocked", cmd_ctl_traffic_blocked)
        if cmd_ctl_traffic_capture is not None:
            pulumi.set(__self__, "cmd_ctl_traffic_capture", cmd_ctl_traffic_capture)
        if cookie_stealing_blocked is not None:
            pulumi.set(__self__, "cookie_stealing_blocked", cookie_stealing_blocked)
        if cookie_stealing_pcap_enabled is not None:
            pulumi.set(__self__, "cookie_stealing_pcap_enabled", cookie_stealing_pcap_enabled)
        if crypto_mining_blocked is not None:
            pulumi.set(__self__, "crypto_mining_blocked", crypto_mining_blocked)
        if crypto_mining_capture is not None:
            pulumi.set(__self__, "crypto_mining_capture", crypto_mining_capture)
        if dga_domains_blocked is not None:
            pulumi.set(__self__, "dga_domains_blocked", dga_domains_blocked)
        if dga_domains_capture is not None:
            pulumi.set(__self__, "dga_domains_capture", dga_domains_capture)
        if file_format_vunerabilites_blocked is not None:
            pulumi.set(__self__, "file_format_vunerabilites_blocked", file_format_vunerabilites_blocked)
        if file_format_vunerabilites_capture is not None:
            pulumi.set(__self__, "file_format_vunerabilites_capture", file_format_vunerabilites_capture)
        if google_talk_blocked is not None:
            pulumi.set(__self__, "google_talk_blocked", google_talk_blocked)
        if google_talk_capture is not None:
            pulumi.set(__self__, "google_talk_capture", google_talk_capture)
        if irc_tunnelling_blocked is not None:
            pulumi.set(__self__, "irc_tunnelling_blocked", irc_tunnelling_blocked)
        if irc_tunnelling_capture is not None:
            pulumi.set(__self__, "irc_tunnelling_capture", irc_tunnelling_capture)
        if known_phishing_sites_blocked is not None:
            pulumi.set(__self__, "known_phishing_sites_blocked", known_phishing_sites_blocked)
        if known_phishing_sites_capture is not None:
            pulumi.set(__self__, "known_phishing_sites_capture", known_phishing_sites_capture)
        if malicious_urls_capture is not None:
            pulumi.set(__self__, "malicious_urls_capture", malicious_urls_capture)
        if malware_sites_blocked is not None:
            pulumi.set(__self__, "malware_sites_blocked", malware_sites_blocked)
        if malware_sites_capture is not None:
            pulumi.set(__self__, "malware_sites_capture", malware_sites_capture)
        if potential_malicious_requests_blocked is not None:
            pulumi.set(__self__, "potential_malicious_requests_blocked", potential_malicious_requests_blocked)
        if potential_malicious_requests_capture is not None:
            pulumi.set(__self__, "potential_malicious_requests_capture", potential_malicious_requests_capture)
        if risk_tolerance is not None:
            pulumi.set(__self__, "risk_tolerance", risk_tolerance)
        if risk_tolerance_capture is not None:
            pulumi.set(__self__, "risk_tolerance_capture", risk_tolerance_capture)
        if ssh_tunnelling_blocked is not None:
            pulumi.set(__self__, "ssh_tunnelling_blocked", ssh_tunnelling_blocked)
        if ssh_tunnelling_capture is not None:
            pulumi.set(__self__, "ssh_tunnelling_capture", ssh_tunnelling_capture)
        if suspect_adware_spyware_sites_blocked is not None:
            pulumi.set(__self__, "suspect_adware_spyware_sites_blocked", suspect_adware_spyware_sites_blocked)
        if suspect_adware_spyware_sites_capture is not None:
            pulumi.set(__self__, "suspect_adware_spyware_sites_capture", suspect_adware_spyware_sites_capture)
        if suspected_phishing_sites_blocked is not None:
            pulumi.set(__self__, "suspected_phishing_sites_blocked", suspected_phishing_sites_blocked)
        if suspected_phishing_sites_capture is not None:
            pulumi.set(__self__, "suspected_phishing_sites_capture", suspected_phishing_sites_capture)
        if tor_blocked is not None:
            pulumi.set(__self__, "tor_blocked", tor_blocked)
        if tor_capture is not None:
            pulumi.set(__self__, "tor_capture", tor_capture)
        if web_spam_blocked is not None:
            pulumi.set(__self__, "web_spam_blocked", web_spam_blocked)
        if web_spam_capture is not None:
            pulumi.set(__self__, "web_spam_capture", web_spam_capture)

    @property
    @pulumi.getter(name="activexBlocked")
    def activex_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether sites are allowed or blocked from accessing vulnerable ActiveX controls that are
        known to have been exploited.
        """
        return pulumi.get(self, "activex_blocked")

    @activex_blocked.setter
    def activex_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "activex_blocked", value)

    @property
    @pulumi.getter(name="activexCapture")
    def activex_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for ActiveX controls
        """
        return pulumi.get(self, "activex_capture")

    @activex_capture.setter
    def activex_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "activex_capture", value)

    @property
    @pulumi.getter(name="adSpywareSitesBlocked")
    def ad_spyware_sites_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block websites known to contain adware or spyware that displays malicious
        advertisements that can collect users' information without their knowledge
        """
        return pulumi.get(self, "ad_spyware_sites_blocked")

    @ad_spyware_sites_blocked.setter
    def ad_spyware_sites_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ad_spyware_sites_blocked", value)

    @property
    @pulumi.getter(name="adSpywareSitesCapture")
    def ad_spyware_sites_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for adware and spyware sites
        """
        return pulumi.get(self, "ad_spyware_sites_capture")

    @ad_spyware_sites_capture.setter
    def ad_spyware_sites_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ad_spyware_sites_capture", value)

    @property
    @pulumi.getter(name="alertForUnknownSuspiciousC2Traffic")
    def alert_for_unknown_suspicious_c2_traffic(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to send alerts upon detecting unknown or suspicious C2 traffic
        """
        return pulumi.get(self, "alert_for_unknown_suspicious_c2_traffic")

    @alert_for_unknown_suspicious_c2_traffic.setter
    def alert_for_unknown_suspicious_c2_traffic(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "alert_for_unknown_suspicious_c2_traffic", value)

    @property
    @pulumi.getter(name="anonymizerBlocked")
    def anonymizer_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block applications and methods used to obscure the destination and the
        content accessed by the user, therefore blocking traffic to anonymizing web proxies
        """
        return pulumi.get(self, "anonymizer_blocked")

    @anonymizer_blocked.setter
    def anonymizer_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "anonymizer_blocked", value)

    @property
    @pulumi.getter(name="anonymizerCapture")
    def anonymizer_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for anonymizers
        """
        return pulumi.get(self, "anonymizer_capture")

    @anonymizer_capture.setter
    def anonymizer_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "anonymizer_capture", value)

    @property
    @pulumi.getter(name="bitTorrentBlocked")
    def bit_torrent_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        """
        return pulumi.get(self, "bit_torrent_blocked")

    @bit_torrent_blocked.setter
    def bit_torrent_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bit_torrent_blocked", value)

    @property
    @pulumi.getter(name="bitTorrentCapture")
    def bit_torrent_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for BitTorrent
        """
        return pulumi.get(self, "bit_torrent_capture")

    @bit_torrent_capture.setter
    def bit_torrent_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bit_torrent_capture", value)

    @property
    @pulumi.getter(name="blockCountriesCapture")
    def block_countries_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        """
        return pulumi.get(self, "block_countries_capture")

    @block_countries_capture.setter
    def block_countries_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_countries_capture", value)

    @property
    @pulumi.getter(name="blockedCountries")
    def blocked_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        countries.
        """
        return pulumi.get(self, "blocked_countries")

    @blocked_countries.setter
    def blocked_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "blocked_countries", value)

    @property
    @pulumi.getter(name="browserExploitsBlocked")
    def browser_exploits_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether known web browser vulnerabilities prone to exploitation are allowed or blocked.
        """
        return pulumi.get(self, "browser_exploits_blocked")

    @browser_exploits_blocked.setter
    def browser_exploits_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "browser_exploits_blocked", value)

    @property
    @pulumi.getter(name="browserExploitsCapture")
    def browser_exploits_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for browser exploits
        """
        return pulumi.get(self, "browser_exploits_capture")

    @browser_exploits_capture.setter
    def browser_exploits_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "browser_exploits_capture", value)

    @property
    @pulumi.getter(name="cmdCtlServerBlocked")
    def cmd_ctl_server_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether connections to known Command & Control (C2) Servers are allowed or blocked
        """
        return pulumi.get(self, "cmd_ctl_server_blocked")

    @cmd_ctl_server_blocked.setter
    def cmd_ctl_server_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cmd_ctl_server_blocked", value)

    @property
    @pulumi.getter(name="cmdCtlServerCapture")
    def cmd_ctl_server_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for connections to known C2 servers
        """
        return pulumi.get(self, "cmd_ctl_server_capture")

    @cmd_ctl_server_capture.setter
    def cmd_ctl_server_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cmd_ctl_server_capture", value)

    @property
    @pulumi.getter(name="cmdCtlTrafficBlocked")
    def cmd_ctl_traffic_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether botnets are allowed or blocked from sending or receiving commands to unknown servers
        """
        return pulumi.get(self, "cmd_ctl_traffic_blocked")

    @cmd_ctl_traffic_blocked.setter
    def cmd_ctl_traffic_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cmd_ctl_traffic_blocked", value)

    @property
    @pulumi.getter(name="cmdCtlTrafficCapture")
    def cmd_ctl_traffic_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for botnets
        """
        return pulumi.get(self, "cmd_ctl_traffic_capture")

    @cmd_ctl_traffic_capture.setter
    def cmd_ctl_traffic_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cmd_ctl_traffic_capture", value)

    @property
    @pulumi.getter(name="cookieStealingBlocked")
    def cookie_stealing_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block third-party websites that gather cookie information
        """
        return pulumi.get(self, "cookie_stealing_blocked")

    @cookie_stealing_blocked.setter
    def cookie_stealing_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cookie_stealing_blocked", value)

    @property
    @pulumi.getter(name="cookieStealingPcapEnabled")
    def cookie_stealing_pcap_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for cookie stealing
        """
        return pulumi.get(self, "cookie_stealing_pcap_enabled")

    @cookie_stealing_pcap_enabled.setter
    def cookie_stealing_pcap_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "cookie_stealing_pcap_enabled", value)

    @property
    @pulumi.getter(name="cryptoMiningBlocked")
    def crypto_mining_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block cryptocurrency mining network traffic and script
        """
        return pulumi.get(self, "crypto_mining_blocked")

    @crypto_mining_blocked.setter
    def crypto_mining_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "crypto_mining_blocked", value)

    @property
    @pulumi.getter(name="cryptoMiningCapture")
    def crypto_mining_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for cryptomining
        """
        return pulumi.get(self, "crypto_mining_capture")

    @crypto_mining_capture.setter
    def crypto_mining_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "crypto_mining_capture", value)

    @property
    @pulumi.getter(name="dgaDomainsBlocked")
    def dga_domains_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block domains that are suspected to be generated using domain generation
        algorithms (DGA)
        """
        return pulumi.get(self, "dga_domains_blocked")

    @dga_domains_blocked.setter
    def dga_domains_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dga_domains_blocked", value)

    @property
    @pulumi.getter(name="dgaDomainsCapture")
    def dga_domains_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for DGA domains
        """
        return pulumi.get(self, "dga_domains_capture")

    @dga_domains_capture.setter
    def dga_domains_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dga_domains_capture", value)

    @property
    @pulumi.getter(name="fileFormatVunerabilitesBlocked")
    def file_format_vunerabilites_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether known file format vulnerabilities and suspicious or malicious content in Microsoft
        Office or PDF documents are allowed or blocked
        """
        return pulumi.get(self, "file_format_vunerabilites_blocked")

    @file_format_vunerabilites_blocked.setter
    def file_format_vunerabilites_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "file_format_vunerabilites_blocked", value)

    @property
    @pulumi.getter(name="fileFormatVunerabilitesCapture")
    def file_format_vunerabilites_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for file format vulnerabilities
        """
        return pulumi.get(self, "file_format_vunerabilites_capture")

    @file_format_vunerabilites_capture.setter
    def file_format_vunerabilites_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "file_format_vunerabilites_capture", value)

    @property
    @pulumi.getter(name="googleTalkBlocked")
    def google_talk_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block access to Google Hangouts, a popular P2P VoIP application.
        """
        return pulumi.get(self, "google_talk_blocked")

    @google_talk_blocked.setter
    def google_talk_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "google_talk_blocked", value)

    @property
    @pulumi.getter(name="googleTalkCapture")
    def google_talk_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for Google Hangouts
        """
        return pulumi.get(self, "google_talk_capture")

    @google_talk_capture.setter
    def google_talk_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "google_talk_capture", value)

    @property
    @pulumi.getter(name="ircTunnellingBlocked")
    def irc_tunnelling_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        """
        return pulumi.get(self, "irc_tunnelling_blocked")

    @irc_tunnelling_blocked.setter
    def irc_tunnelling_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "irc_tunnelling_blocked", value)

    @property
    @pulumi.getter(name="ircTunnellingCapture")
    def irc_tunnelling_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for IRC tunnels
        """
        return pulumi.get(self, "irc_tunnelling_capture")

    @irc_tunnelling_capture.setter
    def irc_tunnelling_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "irc_tunnelling_capture", value)

    @property
    @pulumi.getter(name="knownPhishingSitesBlocked")
    def known_phishing_sites_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether known phishing sites are allowed or blocked
        """
        return pulumi.get(self, "known_phishing_sites_blocked")

    @known_phishing_sites_blocked.setter
    def known_phishing_sites_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "known_phishing_sites_blocked", value)

    @property
    @pulumi.getter(name="knownPhishingSitesCapture")
    def known_phishing_sites_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for known phishing sites
        """
        return pulumi.get(self, "known_phishing_sites_capture")

    @known_phishing_sites_capture.setter
    def known_phishing_sites_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "known_phishing_sites_capture", value)

    @property
    @pulumi.getter(name="maliciousUrlsCapture")
    def malicious_urls_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious URLs
        """
        return pulumi.get(self, "malicious_urls_capture")

    @malicious_urls_capture.setter
    def malicious_urls_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "malicious_urls_capture", value)

    @property
    @pulumi.getter(name="malwareSitesBlocked")
    def malware_sites_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether known malicious sites and content are allowed or blocked
        """
        return pulumi.get(self, "malware_sites_blocked")

    @malware_sites_blocked.setter
    def malware_sites_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "malware_sites_blocked", value)

    @property
    @pulumi.getter(name="malwareSitesCapture")
    def malware_sites_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious sites
        """
        return pulumi.get(self, "malware_sites_capture")

    @malware_sites_capture.setter
    def malware_sites_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "malware_sites_capture", value)

    @property
    @pulumi.getter(name="potentialMaliciousRequestsBlocked")
    def potential_malicious_requests_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block this type of cross-site scripting (XSS)
        """
        return pulumi.get(self, "potential_malicious_requests_blocked")

    @potential_malicious_requests_blocked.setter
    def potential_malicious_requests_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "potential_malicious_requests_blocked", value)

    @property
    @pulumi.getter(name="potentialMaliciousRequestsCapture")
    def potential_malicious_requests_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for (XSS) attacks
        """
        return pulumi.get(self, "potential_malicious_requests_capture")

    @potential_malicious_requests_capture.setter
    def potential_malicious_requests_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "potential_malicious_requests_capture", value)

    @property
    @pulumi.getter(name="riskTolerance")
    def risk_tolerance(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The Page Risk tolerance index set between 0 and 100 (100 being the highest risk).
        """
        return pulumi.get(self, "risk_tolerance")

    @risk_tolerance.setter
    def risk_tolerance(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "risk_tolerance", value)

    @property
    @pulumi.getter(name="riskToleranceCapture")
    def risk_tolerance_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspicious web pages
        """
        return pulumi.get(self, "risk_tolerance_capture")

    @risk_tolerance_capture.setter
    def risk_tolerance_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "risk_tolerance_capture", value)

    @property
    @pulumi.getter(name="sshTunnellingBlocked")
    def ssh_tunnelling_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block SSH traffic being tunneled over HTTP/Ss
        """
        return pulumi.get(self, "ssh_tunnelling_blocked")

    @ssh_tunnelling_blocked.setter
    def ssh_tunnelling_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ssh_tunnelling_blocked", value)

    @property
    @pulumi.getter(name="sshTunnellingCapture")
    def ssh_tunnelling_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for SSH tunnels
        """
        return pulumi.get(self, "ssh_tunnelling_capture")

    @ssh_tunnelling_capture.setter
    def ssh_tunnelling_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ssh_tunnelling_capture", value)

    @property
    @pulumi.getter(name="suspectAdwareSpywareSitesBlocked")
    def suspect_adware_spyware_sites_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block any detections of communication and callback traffic associated
        with spyware agents and data transmission
        """
        return pulumi.get(self, "suspect_adware_spyware_sites_blocked")

    @suspect_adware_spyware_sites_blocked.setter
    def suspect_adware_spyware_sites_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspect_adware_spyware_sites_blocked", value)

    @property
    @pulumi.getter(name="suspectAdwareSpywareSitesCapture")
    def suspect_adware_spyware_sites_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected adware and spyware sites
        """
        return pulumi.get(self, "suspect_adware_spyware_sites_capture")

    @suspect_adware_spyware_sites_capture.setter
    def suspect_adware_spyware_sites_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspect_adware_spyware_sites_capture", value)

    @property
    @pulumi.getter(name="suspectedPhishingSitesBlocked")
    def suspected_phishing_sites_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block suspected phishing sites identified through heuristic detection.
        """
        return pulumi.get(self, "suspected_phishing_sites_blocked")

    @suspected_phishing_sites_blocked.setter
    def suspected_phishing_sites_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspected_phishing_sites_blocked", value)

    @property
    @pulumi.getter(name="suspectedPhishingSitesCapture")
    def suspected_phishing_sites_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected phishing sites
        """
        return pulumi.get(self, "suspected_phishing_sites_capture")

    @suspected_phishing_sites_capture.setter
    def suspected_phishing_sites_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "suspected_phishing_sites_capture", value)

    @property
    @pulumi.getter(name="torBlocked")
    def tor_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block the usage of Tor, a popular P2P anonymizer protocol with support
        for encryption.
        """
        return pulumi.get(self, "tor_blocked")

    @tor_blocked.setter
    def tor_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "tor_blocked", value)

    @property
    @pulumi.getter(name="torCapture")
    def tor_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for Tor
        """
        return pulumi.get(self, "tor_capture")

    @tor_capture.setter
    def tor_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "tor_capture", value)

    @property
    @pulumi.getter(name="webSpamBlocked")
    def web_spam_blocked(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block web pages that pretend to contain useful information, to get higher
        ranking in search engine results or drive traffic to phishing, adware, or spyware distribution sites.
        """
        return pulumi.get(self, "web_spam_blocked")

    @web_spam_blocked.setter
    def web_spam_blocked(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "web_spam_blocked", value)

    @property
    @pulumi.getter(name="webSpamCapture")
    def web_spam_capture(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        """
        return pulumi.get(self, "web_spam_capture")

    @web_spam_capture.setter
    def web_spam_capture(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "web_spam_capture", value)


@pulumi.type_token("zia:index/advancedThreatSettings:AdvancedThreatSettings")
class AdvancedThreatSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activex_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 activex_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 ad_spyware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 ad_spyware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 alert_for_unknown_suspicious_c2_traffic: Optional[pulumi.Input[builtins.bool]] = None,
                 anonymizer_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 anonymizer_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 bit_torrent_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 bit_torrent_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 block_countries_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 blocked_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 browser_exploits_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 browser_exploits_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_server_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_server_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_traffic_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_traffic_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 cookie_stealing_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 cookie_stealing_pcap_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 crypto_mining_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 crypto_mining_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 dga_domains_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 dga_domains_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 file_format_vunerabilites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 file_format_vunerabilites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 google_talk_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 google_talk_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 irc_tunnelling_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 irc_tunnelling_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 known_phishing_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 known_phishing_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 malicious_urls_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 malware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 malware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 potential_malicious_requests_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 potential_malicious_requests_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 risk_tolerance: Optional[pulumi.Input[builtins.int]] = None,
                 risk_tolerance_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 ssh_tunnelling_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 ssh_tunnelling_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 suspect_adware_spyware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 suspect_adware_spyware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 suspected_phishing_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 suspected_phishing_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 tor_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 tor_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 web_spam_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 web_spam_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zia/configuring-advanced-threat-protection-policy)
        * [API documentation](https://help.zscaler.com/zia/advanced-threat-protection-policy#/)

        The **zia_advanced_threat_settings** resource allows you to update the advanced threat configuration settings. To learn more see [Configuring Advanced Settings](https://help.zscaler.com/zia/configuring-advanced-settings)

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_advanced_threat_settings** can be imported by using `advanced_threat_settings` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/advancedThreatSettings:AdvancedThreatSettings this "advanced_threat_settings"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] activex_blocked: A Boolean value specifying whether sites are allowed or blocked from accessing vulnerable ActiveX controls that are
               known to have been exploited.
        :param pulumi.Input[builtins.bool] activex_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for ActiveX controls
        :param pulumi.Input[builtins.bool] ad_spyware_sites_blocked: A Boolean value specifying whether to allow or block websites known to contain adware or spyware that displays malicious
               advertisements that can collect users' information without their knowledge
        :param pulumi.Input[builtins.bool] ad_spyware_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for adware and spyware sites
        :param pulumi.Input[builtins.bool] alert_for_unknown_suspicious_c2_traffic: A Boolean value specifying whether to send alerts upon detecting unknown or suspicious C2 traffic
        :param pulumi.Input[builtins.bool] anonymizer_blocked: A Boolean value specifying whether to allow or block applications and methods used to obscure the destination and the
               content accessed by the user, therefore blocking traffic to anonymizing web proxies
        :param pulumi.Input[builtins.bool] anonymizer_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for anonymizers
        :param pulumi.Input[builtins.bool] bit_torrent_blocked: A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        :param pulumi.Input[builtins.bool] bit_torrent_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for BitTorrent
        :param pulumi.Input[builtins.bool] block_countries_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input[builtins.bool] browser_exploits_blocked: A Boolean value specifying whether known web browser vulnerabilities prone to exploitation are allowed or blocked.
        :param pulumi.Input[builtins.bool] browser_exploits_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for browser exploits
        :param pulumi.Input[builtins.bool] cmd_ctl_server_blocked: A Boolean value specifying whether connections to known Command & Control (C2) Servers are allowed or blocked
        :param pulumi.Input[builtins.bool] cmd_ctl_server_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for connections to known C2 servers
        :param pulumi.Input[builtins.bool] cmd_ctl_traffic_blocked: A Boolean value specifying whether botnets are allowed or blocked from sending or receiving commands to unknown servers
        :param pulumi.Input[builtins.bool] cmd_ctl_traffic_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for botnets
        :param pulumi.Input[builtins.bool] cookie_stealing_blocked: A Boolean value specifying whether to allow or block third-party websites that gather cookie information
        :param pulumi.Input[builtins.bool] cookie_stealing_pcap_enabled: A Boolean value specifying whether packet capture (PCAP) is enabled or not for cookie stealing
        :param pulumi.Input[builtins.bool] crypto_mining_blocked: A Boolean value specifying whether to allow or block cryptocurrency mining network traffic and script
        :param pulumi.Input[builtins.bool] crypto_mining_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for cryptomining
        :param pulumi.Input[builtins.bool] dga_domains_blocked: A Boolean value specifying whether to allow or block domains that are suspected to be generated using domain generation
               algorithms (DGA)
        :param pulumi.Input[builtins.bool] dga_domains_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for DGA domains
        :param pulumi.Input[builtins.bool] file_format_vunerabilites_blocked: A Boolean value specifying whether known file format vulnerabilities and suspicious or malicious content in Microsoft
               Office or PDF documents are allowed or blocked
        :param pulumi.Input[builtins.bool] file_format_vunerabilites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for file format vulnerabilities
        :param pulumi.Input[builtins.bool] google_talk_blocked: A Boolean value specifying whether to allow or block access to Google Hangouts, a popular P2P VoIP application.
        :param pulumi.Input[builtins.bool] google_talk_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for Google Hangouts
        :param pulumi.Input[builtins.bool] irc_tunnelling_blocked: A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        :param pulumi.Input[builtins.bool] irc_tunnelling_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for IRC tunnels
        :param pulumi.Input[builtins.bool] known_phishing_sites_blocked: A Boolean value specifying whether known phishing sites are allowed or blocked
        :param pulumi.Input[builtins.bool] known_phishing_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for known phishing sites
        :param pulumi.Input[builtins.bool] malicious_urls_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious URLs
        :param pulumi.Input[builtins.bool] malware_sites_blocked: A Boolean value specifying whether known malicious sites and content are allowed or blocked
        :param pulumi.Input[builtins.bool] malware_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious sites
        :param pulumi.Input[builtins.bool] potential_malicious_requests_blocked: A Boolean value specifying whether to allow or block this type of cross-site scripting (XSS)
        :param pulumi.Input[builtins.bool] potential_malicious_requests_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for (XSS) attacks
        :param pulumi.Input[builtins.int] risk_tolerance: The Page Risk tolerance index set between 0 and 100 (100 being the highest risk).
        :param pulumi.Input[builtins.bool] risk_tolerance_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspicious web pages
        :param pulumi.Input[builtins.bool] ssh_tunnelling_blocked: A Boolean value specifying whether to allow or block SSH traffic being tunneled over HTTP/Ss
        :param pulumi.Input[builtins.bool] ssh_tunnelling_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for SSH tunnels
        :param pulumi.Input[builtins.bool] suspect_adware_spyware_sites_blocked: A Boolean value specifying whether to allow or block any detections of communication and callback traffic associated
               with spyware agents and data transmission
        :param pulumi.Input[builtins.bool] suspect_adware_spyware_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected adware and spyware sites
        :param pulumi.Input[builtins.bool] suspected_phishing_sites_blocked: A Boolean value specifying whether to allow or block suspected phishing sites identified through heuristic detection.
        :param pulumi.Input[builtins.bool] suspected_phishing_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected phishing sites
        :param pulumi.Input[builtins.bool] tor_blocked: A Boolean value specifying whether to allow or block the usage of Tor, a popular P2P anonymizer protocol with support
               for encryption.
        :param pulumi.Input[builtins.bool] tor_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for Tor
        :param pulumi.Input[builtins.bool] web_spam_blocked: A Boolean value specifying whether to allow or block web pages that pretend to contain useful information, to get higher
               ranking in search engine results or drive traffic to phishing, adware, or spyware distribution sites.
        :param pulumi.Input[builtins.bool] web_spam_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AdvancedThreatSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zia/configuring-advanced-threat-protection-policy)
        * [API documentation](https://help.zscaler.com/zia/advanced-threat-protection-policy#/)

        The **zia_advanced_threat_settings** resource allows you to update the advanced threat configuration settings. To learn more see [Configuring Advanced Settings](https://help.zscaler.com/zia/configuring-advanced-settings)

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_advanced_threat_settings** can be imported by using `advanced_threat_settings` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/advancedThreatSettings:AdvancedThreatSettings this "advanced_threat_settings"
        ```

        :param str resource_name: The name of the resource.
        :param AdvancedThreatSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AdvancedThreatSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activex_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 activex_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 ad_spyware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 ad_spyware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 alert_for_unknown_suspicious_c2_traffic: Optional[pulumi.Input[builtins.bool]] = None,
                 anonymizer_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 anonymizer_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 bit_torrent_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 bit_torrent_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 block_countries_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 blocked_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 browser_exploits_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 browser_exploits_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_server_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_server_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_traffic_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 cmd_ctl_traffic_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 cookie_stealing_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 cookie_stealing_pcap_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 crypto_mining_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 crypto_mining_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 dga_domains_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 dga_domains_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 file_format_vunerabilites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 file_format_vunerabilites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 google_talk_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 google_talk_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 irc_tunnelling_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 irc_tunnelling_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 known_phishing_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 known_phishing_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 malicious_urls_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 malware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 malware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 potential_malicious_requests_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 potential_malicious_requests_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 risk_tolerance: Optional[pulumi.Input[builtins.int]] = None,
                 risk_tolerance_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 ssh_tunnelling_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 ssh_tunnelling_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 suspect_adware_spyware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 suspect_adware_spyware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 suspected_phishing_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 suspected_phishing_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 tor_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 tor_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 web_spam_blocked: Optional[pulumi.Input[builtins.bool]] = None,
                 web_spam_capture: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AdvancedThreatSettingsArgs.__new__(AdvancedThreatSettingsArgs)

            __props__.__dict__["activex_blocked"] = activex_blocked
            __props__.__dict__["activex_capture"] = activex_capture
            __props__.__dict__["ad_spyware_sites_blocked"] = ad_spyware_sites_blocked
            __props__.__dict__["ad_spyware_sites_capture"] = ad_spyware_sites_capture
            __props__.__dict__["alert_for_unknown_suspicious_c2_traffic"] = alert_for_unknown_suspicious_c2_traffic
            __props__.__dict__["anonymizer_blocked"] = anonymizer_blocked
            __props__.__dict__["anonymizer_capture"] = anonymizer_capture
            __props__.__dict__["bit_torrent_blocked"] = bit_torrent_blocked
            __props__.__dict__["bit_torrent_capture"] = bit_torrent_capture
            __props__.__dict__["block_countries_capture"] = block_countries_capture
            __props__.__dict__["blocked_countries"] = blocked_countries
            __props__.__dict__["browser_exploits_blocked"] = browser_exploits_blocked
            __props__.__dict__["browser_exploits_capture"] = browser_exploits_capture
            __props__.__dict__["cmd_ctl_server_blocked"] = cmd_ctl_server_blocked
            __props__.__dict__["cmd_ctl_server_capture"] = cmd_ctl_server_capture
            __props__.__dict__["cmd_ctl_traffic_blocked"] = cmd_ctl_traffic_blocked
            __props__.__dict__["cmd_ctl_traffic_capture"] = cmd_ctl_traffic_capture
            __props__.__dict__["cookie_stealing_blocked"] = cookie_stealing_blocked
            __props__.__dict__["cookie_stealing_pcap_enabled"] = cookie_stealing_pcap_enabled
            __props__.__dict__["crypto_mining_blocked"] = crypto_mining_blocked
            __props__.__dict__["crypto_mining_capture"] = crypto_mining_capture
            __props__.__dict__["dga_domains_blocked"] = dga_domains_blocked
            __props__.__dict__["dga_domains_capture"] = dga_domains_capture
            __props__.__dict__["file_format_vunerabilites_blocked"] = file_format_vunerabilites_blocked
            __props__.__dict__["file_format_vunerabilites_capture"] = file_format_vunerabilites_capture
            __props__.__dict__["google_talk_blocked"] = google_talk_blocked
            __props__.__dict__["google_talk_capture"] = google_talk_capture
            __props__.__dict__["irc_tunnelling_blocked"] = irc_tunnelling_blocked
            __props__.__dict__["irc_tunnelling_capture"] = irc_tunnelling_capture
            __props__.__dict__["known_phishing_sites_blocked"] = known_phishing_sites_blocked
            __props__.__dict__["known_phishing_sites_capture"] = known_phishing_sites_capture
            __props__.__dict__["malicious_urls_capture"] = malicious_urls_capture
            __props__.__dict__["malware_sites_blocked"] = malware_sites_blocked
            __props__.__dict__["malware_sites_capture"] = malware_sites_capture
            __props__.__dict__["potential_malicious_requests_blocked"] = potential_malicious_requests_blocked
            __props__.__dict__["potential_malicious_requests_capture"] = potential_malicious_requests_capture
            __props__.__dict__["risk_tolerance"] = risk_tolerance
            __props__.__dict__["risk_tolerance_capture"] = risk_tolerance_capture
            __props__.__dict__["ssh_tunnelling_blocked"] = ssh_tunnelling_blocked
            __props__.__dict__["ssh_tunnelling_capture"] = ssh_tunnelling_capture
            __props__.__dict__["suspect_adware_spyware_sites_blocked"] = suspect_adware_spyware_sites_blocked
            __props__.__dict__["suspect_adware_spyware_sites_capture"] = suspect_adware_spyware_sites_capture
            __props__.__dict__["suspected_phishing_sites_blocked"] = suspected_phishing_sites_blocked
            __props__.__dict__["suspected_phishing_sites_capture"] = suspected_phishing_sites_capture
            __props__.__dict__["tor_blocked"] = tor_blocked
            __props__.__dict__["tor_capture"] = tor_capture
            __props__.__dict__["web_spam_blocked"] = web_spam_blocked
            __props__.__dict__["web_spam_capture"] = web_spam_capture
        super(AdvancedThreatSettings, __self__).__init__(
            'zia:index/advancedThreatSettings:AdvancedThreatSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            activex_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            activex_capture: Optional[pulumi.Input[builtins.bool]] = None,
            ad_spyware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            ad_spyware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
            alert_for_unknown_suspicious_c2_traffic: Optional[pulumi.Input[builtins.bool]] = None,
            anonymizer_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            anonymizer_capture: Optional[pulumi.Input[builtins.bool]] = None,
            bit_torrent_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            bit_torrent_capture: Optional[pulumi.Input[builtins.bool]] = None,
            block_countries_capture: Optional[pulumi.Input[builtins.bool]] = None,
            blocked_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            browser_exploits_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            browser_exploits_capture: Optional[pulumi.Input[builtins.bool]] = None,
            cmd_ctl_server_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            cmd_ctl_server_capture: Optional[pulumi.Input[builtins.bool]] = None,
            cmd_ctl_traffic_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            cmd_ctl_traffic_capture: Optional[pulumi.Input[builtins.bool]] = None,
            cookie_stealing_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            cookie_stealing_pcap_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            crypto_mining_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            crypto_mining_capture: Optional[pulumi.Input[builtins.bool]] = None,
            dga_domains_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            dga_domains_capture: Optional[pulumi.Input[builtins.bool]] = None,
            file_format_vunerabilites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            file_format_vunerabilites_capture: Optional[pulumi.Input[builtins.bool]] = None,
            google_talk_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            google_talk_capture: Optional[pulumi.Input[builtins.bool]] = None,
            irc_tunnelling_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            irc_tunnelling_capture: Optional[pulumi.Input[builtins.bool]] = None,
            known_phishing_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            known_phishing_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
            malicious_urls_capture: Optional[pulumi.Input[builtins.bool]] = None,
            malware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            malware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
            potential_malicious_requests_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            potential_malicious_requests_capture: Optional[pulumi.Input[builtins.bool]] = None,
            risk_tolerance: Optional[pulumi.Input[builtins.int]] = None,
            risk_tolerance_capture: Optional[pulumi.Input[builtins.bool]] = None,
            ssh_tunnelling_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            ssh_tunnelling_capture: Optional[pulumi.Input[builtins.bool]] = None,
            suspect_adware_spyware_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            suspect_adware_spyware_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
            suspected_phishing_sites_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            suspected_phishing_sites_capture: Optional[pulumi.Input[builtins.bool]] = None,
            tor_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            tor_capture: Optional[pulumi.Input[builtins.bool]] = None,
            web_spam_blocked: Optional[pulumi.Input[builtins.bool]] = None,
            web_spam_capture: Optional[pulumi.Input[builtins.bool]] = None) -> 'AdvancedThreatSettings':
        """
        Get an existing AdvancedThreatSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] activex_blocked: A Boolean value specifying whether sites are allowed or blocked from accessing vulnerable ActiveX controls that are
               known to have been exploited.
        :param pulumi.Input[builtins.bool] activex_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for ActiveX controls
        :param pulumi.Input[builtins.bool] ad_spyware_sites_blocked: A Boolean value specifying whether to allow or block websites known to contain adware or spyware that displays malicious
               advertisements that can collect users' information without their knowledge
        :param pulumi.Input[builtins.bool] ad_spyware_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for adware and spyware sites
        :param pulumi.Input[builtins.bool] alert_for_unknown_suspicious_c2_traffic: A Boolean value specifying whether to send alerts upon detecting unknown or suspicious C2 traffic
        :param pulumi.Input[builtins.bool] anonymizer_blocked: A Boolean value specifying whether to allow or block applications and methods used to obscure the destination and the
               content accessed by the user, therefore blocking traffic to anonymizing web proxies
        :param pulumi.Input[builtins.bool] anonymizer_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for anonymizers
        :param pulumi.Input[builtins.bool] bit_torrent_blocked: A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        :param pulumi.Input[builtins.bool] bit_torrent_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for BitTorrent
        :param pulumi.Input[builtins.bool] block_countries_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] blocked_countries: Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
               countries.
        :param pulumi.Input[builtins.bool] browser_exploits_blocked: A Boolean value specifying whether known web browser vulnerabilities prone to exploitation are allowed or blocked.
        :param pulumi.Input[builtins.bool] browser_exploits_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for browser exploits
        :param pulumi.Input[builtins.bool] cmd_ctl_server_blocked: A Boolean value specifying whether connections to known Command & Control (C2) Servers are allowed or blocked
        :param pulumi.Input[builtins.bool] cmd_ctl_server_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for connections to known C2 servers
        :param pulumi.Input[builtins.bool] cmd_ctl_traffic_blocked: A Boolean value specifying whether botnets are allowed or blocked from sending or receiving commands to unknown servers
        :param pulumi.Input[builtins.bool] cmd_ctl_traffic_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for botnets
        :param pulumi.Input[builtins.bool] cookie_stealing_blocked: A Boolean value specifying whether to allow or block third-party websites that gather cookie information
        :param pulumi.Input[builtins.bool] cookie_stealing_pcap_enabled: A Boolean value specifying whether packet capture (PCAP) is enabled or not for cookie stealing
        :param pulumi.Input[builtins.bool] crypto_mining_blocked: A Boolean value specifying whether to allow or block cryptocurrency mining network traffic and script
        :param pulumi.Input[builtins.bool] crypto_mining_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for cryptomining
        :param pulumi.Input[builtins.bool] dga_domains_blocked: A Boolean value specifying whether to allow or block domains that are suspected to be generated using domain generation
               algorithms (DGA)
        :param pulumi.Input[builtins.bool] dga_domains_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for DGA domains
        :param pulumi.Input[builtins.bool] file_format_vunerabilites_blocked: A Boolean value specifying whether known file format vulnerabilities and suspicious or malicious content in Microsoft
               Office or PDF documents are allowed or blocked
        :param pulumi.Input[builtins.bool] file_format_vunerabilites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for file format vulnerabilities
        :param pulumi.Input[builtins.bool] google_talk_blocked: A Boolean value specifying whether to allow or block access to Google Hangouts, a popular P2P VoIP application.
        :param pulumi.Input[builtins.bool] google_talk_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for Google Hangouts
        :param pulumi.Input[builtins.bool] irc_tunnelling_blocked: A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        :param pulumi.Input[builtins.bool] irc_tunnelling_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for IRC tunnels
        :param pulumi.Input[builtins.bool] known_phishing_sites_blocked: A Boolean value specifying whether known phishing sites are allowed or blocked
        :param pulumi.Input[builtins.bool] known_phishing_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for known phishing sites
        :param pulumi.Input[builtins.bool] malicious_urls_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious URLs
        :param pulumi.Input[builtins.bool] malware_sites_blocked: A Boolean value specifying whether known malicious sites and content are allowed or blocked
        :param pulumi.Input[builtins.bool] malware_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious sites
        :param pulumi.Input[builtins.bool] potential_malicious_requests_blocked: A Boolean value specifying whether to allow or block this type of cross-site scripting (XSS)
        :param pulumi.Input[builtins.bool] potential_malicious_requests_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for (XSS) attacks
        :param pulumi.Input[builtins.int] risk_tolerance: The Page Risk tolerance index set between 0 and 100 (100 being the highest risk).
        :param pulumi.Input[builtins.bool] risk_tolerance_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspicious web pages
        :param pulumi.Input[builtins.bool] ssh_tunnelling_blocked: A Boolean value specifying whether to allow or block SSH traffic being tunneled over HTTP/Ss
        :param pulumi.Input[builtins.bool] ssh_tunnelling_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for SSH tunnels
        :param pulumi.Input[builtins.bool] suspect_adware_spyware_sites_blocked: A Boolean value specifying whether to allow or block any detections of communication and callback traffic associated
               with spyware agents and data transmission
        :param pulumi.Input[builtins.bool] suspect_adware_spyware_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected adware and spyware sites
        :param pulumi.Input[builtins.bool] suspected_phishing_sites_blocked: A Boolean value specifying whether to allow or block suspected phishing sites identified through heuristic detection.
        :param pulumi.Input[builtins.bool] suspected_phishing_sites_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected phishing sites
        :param pulumi.Input[builtins.bool] tor_blocked: A Boolean value specifying whether to allow or block the usage of Tor, a popular P2P anonymizer protocol with support
               for encryption.
        :param pulumi.Input[builtins.bool] tor_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for Tor
        :param pulumi.Input[builtins.bool] web_spam_blocked: A Boolean value specifying whether to allow or block web pages that pretend to contain useful information, to get higher
               ranking in search engine results or drive traffic to phishing, adware, or spyware distribution sites.
        :param pulumi.Input[builtins.bool] web_spam_capture: A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AdvancedThreatSettingsState.__new__(_AdvancedThreatSettingsState)

        __props__.__dict__["activex_blocked"] = activex_blocked
        __props__.__dict__["activex_capture"] = activex_capture
        __props__.__dict__["ad_spyware_sites_blocked"] = ad_spyware_sites_blocked
        __props__.__dict__["ad_spyware_sites_capture"] = ad_spyware_sites_capture
        __props__.__dict__["alert_for_unknown_suspicious_c2_traffic"] = alert_for_unknown_suspicious_c2_traffic
        __props__.__dict__["anonymizer_blocked"] = anonymizer_blocked
        __props__.__dict__["anonymizer_capture"] = anonymizer_capture
        __props__.__dict__["bit_torrent_blocked"] = bit_torrent_blocked
        __props__.__dict__["bit_torrent_capture"] = bit_torrent_capture
        __props__.__dict__["block_countries_capture"] = block_countries_capture
        __props__.__dict__["blocked_countries"] = blocked_countries
        __props__.__dict__["browser_exploits_blocked"] = browser_exploits_blocked
        __props__.__dict__["browser_exploits_capture"] = browser_exploits_capture
        __props__.__dict__["cmd_ctl_server_blocked"] = cmd_ctl_server_blocked
        __props__.__dict__["cmd_ctl_server_capture"] = cmd_ctl_server_capture
        __props__.__dict__["cmd_ctl_traffic_blocked"] = cmd_ctl_traffic_blocked
        __props__.__dict__["cmd_ctl_traffic_capture"] = cmd_ctl_traffic_capture
        __props__.__dict__["cookie_stealing_blocked"] = cookie_stealing_blocked
        __props__.__dict__["cookie_stealing_pcap_enabled"] = cookie_stealing_pcap_enabled
        __props__.__dict__["crypto_mining_blocked"] = crypto_mining_blocked
        __props__.__dict__["crypto_mining_capture"] = crypto_mining_capture
        __props__.__dict__["dga_domains_blocked"] = dga_domains_blocked
        __props__.__dict__["dga_domains_capture"] = dga_domains_capture
        __props__.__dict__["file_format_vunerabilites_blocked"] = file_format_vunerabilites_blocked
        __props__.__dict__["file_format_vunerabilites_capture"] = file_format_vunerabilites_capture
        __props__.__dict__["google_talk_blocked"] = google_talk_blocked
        __props__.__dict__["google_talk_capture"] = google_talk_capture
        __props__.__dict__["irc_tunnelling_blocked"] = irc_tunnelling_blocked
        __props__.__dict__["irc_tunnelling_capture"] = irc_tunnelling_capture
        __props__.__dict__["known_phishing_sites_blocked"] = known_phishing_sites_blocked
        __props__.__dict__["known_phishing_sites_capture"] = known_phishing_sites_capture
        __props__.__dict__["malicious_urls_capture"] = malicious_urls_capture
        __props__.__dict__["malware_sites_blocked"] = malware_sites_blocked
        __props__.__dict__["malware_sites_capture"] = malware_sites_capture
        __props__.__dict__["potential_malicious_requests_blocked"] = potential_malicious_requests_blocked
        __props__.__dict__["potential_malicious_requests_capture"] = potential_malicious_requests_capture
        __props__.__dict__["risk_tolerance"] = risk_tolerance
        __props__.__dict__["risk_tolerance_capture"] = risk_tolerance_capture
        __props__.__dict__["ssh_tunnelling_blocked"] = ssh_tunnelling_blocked
        __props__.__dict__["ssh_tunnelling_capture"] = ssh_tunnelling_capture
        __props__.__dict__["suspect_adware_spyware_sites_blocked"] = suspect_adware_spyware_sites_blocked
        __props__.__dict__["suspect_adware_spyware_sites_capture"] = suspect_adware_spyware_sites_capture
        __props__.__dict__["suspected_phishing_sites_blocked"] = suspected_phishing_sites_blocked
        __props__.__dict__["suspected_phishing_sites_capture"] = suspected_phishing_sites_capture
        __props__.__dict__["tor_blocked"] = tor_blocked
        __props__.__dict__["tor_capture"] = tor_capture
        __props__.__dict__["web_spam_blocked"] = web_spam_blocked
        __props__.__dict__["web_spam_capture"] = web_spam_capture
        return AdvancedThreatSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="activexBlocked")
    def activex_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether sites are allowed or blocked from accessing vulnerable ActiveX controls that are
        known to have been exploited.
        """
        return pulumi.get(self, "activex_blocked")

    @property
    @pulumi.getter(name="activexCapture")
    def activex_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for ActiveX controls
        """
        return pulumi.get(self, "activex_capture")

    @property
    @pulumi.getter(name="adSpywareSitesBlocked")
    def ad_spyware_sites_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block websites known to contain adware or spyware that displays malicious
        advertisements that can collect users' information without their knowledge
        """
        return pulumi.get(self, "ad_spyware_sites_blocked")

    @property
    @pulumi.getter(name="adSpywareSitesCapture")
    def ad_spyware_sites_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for adware and spyware sites
        """
        return pulumi.get(self, "ad_spyware_sites_capture")

    @property
    @pulumi.getter(name="alertForUnknownSuspiciousC2Traffic")
    def alert_for_unknown_suspicious_c2_traffic(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether to send alerts upon detecting unknown or suspicious C2 traffic
        """
        return pulumi.get(self, "alert_for_unknown_suspicious_c2_traffic")

    @property
    @pulumi.getter(name="anonymizerBlocked")
    def anonymizer_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block applications and methods used to obscure the destination and the
        content accessed by the user, therefore blocking traffic to anonymizing web proxies
        """
        return pulumi.get(self, "anonymizer_blocked")

    @property
    @pulumi.getter(name="anonymizerCapture")
    def anonymizer_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for anonymizers
        """
        return pulumi.get(self, "anonymizer_capture")

    @property
    @pulumi.getter(name="bitTorrentBlocked")
    def bit_torrent_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        """
        return pulumi.get(self, "bit_torrent_blocked")

    @property
    @pulumi.getter(name="bitTorrentCapture")
    def bit_torrent_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for BitTorrent
        """
        return pulumi.get(self, "bit_torrent_capture")

    @property
    @pulumi.getter(name="blockCountriesCapture")
    def block_countries_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for blocked countries
        """
        return pulumi.get(self, "block_countries_capture")

    @property
    @pulumi.getter(name="blockedCountries")
    def blocked_countries(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
        countries.
        """
        return pulumi.get(self, "blocked_countries")

    @property
    @pulumi.getter(name="browserExploitsBlocked")
    def browser_exploits_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether known web browser vulnerabilities prone to exploitation are allowed or blocked.
        """
        return pulumi.get(self, "browser_exploits_blocked")

    @property
    @pulumi.getter(name="browserExploitsCapture")
    def browser_exploits_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for browser exploits
        """
        return pulumi.get(self, "browser_exploits_capture")

    @property
    @pulumi.getter(name="cmdCtlServerBlocked")
    def cmd_ctl_server_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether connections to known Command & Control (C2) Servers are allowed or blocked
        """
        return pulumi.get(self, "cmd_ctl_server_blocked")

    @property
    @pulumi.getter(name="cmdCtlServerCapture")
    def cmd_ctl_server_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for connections to known C2 servers
        """
        return pulumi.get(self, "cmd_ctl_server_capture")

    @property
    @pulumi.getter(name="cmdCtlTrafficBlocked")
    def cmd_ctl_traffic_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether botnets are allowed or blocked from sending or receiving commands to unknown servers
        """
        return pulumi.get(self, "cmd_ctl_traffic_blocked")

    @property
    @pulumi.getter(name="cmdCtlTrafficCapture")
    def cmd_ctl_traffic_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for botnets
        """
        return pulumi.get(self, "cmd_ctl_traffic_capture")

    @property
    @pulumi.getter(name="cookieStealingBlocked")
    def cookie_stealing_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block third-party websites that gather cookie information
        """
        return pulumi.get(self, "cookie_stealing_blocked")

    @property
    @pulumi.getter(name="cookieStealingPcapEnabled")
    def cookie_stealing_pcap_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for cookie stealing
        """
        return pulumi.get(self, "cookie_stealing_pcap_enabled")

    @property
    @pulumi.getter(name="cryptoMiningBlocked")
    def crypto_mining_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block cryptocurrency mining network traffic and script
        """
        return pulumi.get(self, "crypto_mining_blocked")

    @property
    @pulumi.getter(name="cryptoMiningCapture")
    def crypto_mining_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for cryptomining
        """
        return pulumi.get(self, "crypto_mining_capture")

    @property
    @pulumi.getter(name="dgaDomainsBlocked")
    def dga_domains_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block domains that are suspected to be generated using domain generation
        algorithms (DGA)
        """
        return pulumi.get(self, "dga_domains_blocked")

    @property
    @pulumi.getter(name="dgaDomainsCapture")
    def dga_domains_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for DGA domains
        """
        return pulumi.get(self, "dga_domains_capture")

    @property
    @pulumi.getter(name="fileFormatVunerabilitesBlocked")
    def file_format_vunerabilites_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether known file format vulnerabilities and suspicious or malicious content in Microsoft
        Office or PDF documents are allowed or blocked
        """
        return pulumi.get(self, "file_format_vunerabilites_blocked")

    @property
    @pulumi.getter(name="fileFormatVunerabilitesCapture")
    def file_format_vunerabilites_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for file format vulnerabilities
        """
        return pulumi.get(self, "file_format_vunerabilites_capture")

    @property
    @pulumi.getter(name="googleTalkBlocked")
    def google_talk_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block access to Google Hangouts, a popular P2P VoIP application.
        """
        return pulumi.get(self, "google_talk_blocked")

    @property
    @pulumi.getter(name="googleTalkCapture")
    def google_talk_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for Google Hangouts
        """
        return pulumi.get(self, "google_talk_capture")

    @property
    @pulumi.getter(name="ircTunnellingBlocked")
    def irc_tunnelling_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        """
        return pulumi.get(self, "irc_tunnelling_blocked")

    @property
    @pulumi.getter(name="ircTunnellingCapture")
    def irc_tunnelling_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for IRC tunnels
        """
        return pulumi.get(self, "irc_tunnelling_capture")

    @property
    @pulumi.getter(name="knownPhishingSitesBlocked")
    def known_phishing_sites_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether known phishing sites are allowed or blocked
        """
        return pulumi.get(self, "known_phishing_sites_blocked")

    @property
    @pulumi.getter(name="knownPhishingSitesCapture")
    def known_phishing_sites_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for known phishing sites
        """
        return pulumi.get(self, "known_phishing_sites_capture")

    @property
    @pulumi.getter(name="maliciousUrlsCapture")
    def malicious_urls_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious URLs
        """
        return pulumi.get(self, "malicious_urls_capture")

    @property
    @pulumi.getter(name="malwareSitesBlocked")
    def malware_sites_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether known malicious sites and content are allowed or blocked
        """
        return pulumi.get(self, "malware_sites_blocked")

    @property
    @pulumi.getter(name="malwareSitesCapture")
    def malware_sites_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for malicious sites
        """
        return pulumi.get(self, "malware_sites_capture")

    @property
    @pulumi.getter(name="potentialMaliciousRequestsBlocked")
    def potential_malicious_requests_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block this type of cross-site scripting (XSS)
        """
        return pulumi.get(self, "potential_malicious_requests_blocked")

    @property
    @pulumi.getter(name="potentialMaliciousRequestsCapture")
    def potential_malicious_requests_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for (XSS) attacks
        """
        return pulumi.get(self, "potential_malicious_requests_capture")

    @property
    @pulumi.getter(name="riskTolerance")
    def risk_tolerance(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The Page Risk tolerance index set between 0 and 100 (100 being the highest risk).
        """
        return pulumi.get(self, "risk_tolerance")

    @property
    @pulumi.getter(name="riskToleranceCapture")
    def risk_tolerance_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspicious web pages
        """
        return pulumi.get(self, "risk_tolerance_capture")

    @property
    @pulumi.getter(name="sshTunnellingBlocked")
    def ssh_tunnelling_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block SSH traffic being tunneled over HTTP/Ss
        """
        return pulumi.get(self, "ssh_tunnelling_blocked")

    @property
    @pulumi.getter(name="sshTunnellingCapture")
    def ssh_tunnelling_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for SSH tunnels
        """
        return pulumi.get(self, "ssh_tunnelling_capture")

    @property
    @pulumi.getter(name="suspectAdwareSpywareSitesBlocked")
    def suspect_adware_spyware_sites_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block any detections of communication and callback traffic associated
        with spyware agents and data transmission
        """
        return pulumi.get(self, "suspect_adware_spyware_sites_blocked")

    @property
    @pulumi.getter(name="suspectAdwareSpywareSitesCapture")
    def suspect_adware_spyware_sites_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected adware and spyware sites
        """
        return pulumi.get(self, "suspect_adware_spyware_sites_capture")

    @property
    @pulumi.getter(name="suspectedPhishingSitesBlocked")
    def suspected_phishing_sites_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block suspected phishing sites identified through heuristic detection.
        """
        return pulumi.get(self, "suspected_phishing_sites_blocked")

    @property
    @pulumi.getter(name="suspectedPhishingSitesCapture")
    def suspected_phishing_sites_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for suspected phishing sites
        """
        return pulumi.get(self, "suspected_phishing_sites_capture")

    @property
    @pulumi.getter(name="torBlocked")
    def tor_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block the usage of Tor, a popular P2P anonymizer protocol with support
        for encryption.
        """
        return pulumi.get(self, "tor_blocked")

    @property
    @pulumi.getter(name="torCapture")
    def tor_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for Tor
        """
        return pulumi.get(self, "tor_capture")

    @property
    @pulumi.getter(name="webSpamBlocked")
    def web_spam_blocked(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether to allow or block web pages that pretend to contain useful information, to get higher
        ranking in search engine results or drive traffic to phishing, adware, or spyware distribution sites.
        """
        return pulumi.get(self, "web_spam_blocked")

    @property
    @pulumi.getter(name="webSpamCapture")
    def web_spam_capture(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        A Boolean value specifying whether packet capture (PCAP) is enabled or not for web spam
        """
        return pulumi.get(self, "web_spam_capture")

