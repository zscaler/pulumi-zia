# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CasbMalwareRuleArgs', 'CasbMalwareRule']

@pulumi.input_type
class CasbMalwareRuleArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 buckets: Optional[pulumi.Input['CasbMalwareRuleBucketsArgs']] = None,
                 casb_email_labels: Optional[pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbEmailLabelArgs']]]] = None,
                 casb_tombstone_templates: Optional[pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbTombstoneTemplateArgs']]]] = None,
                 cloud_app_tenant_ids: Optional[pulumi.Input['CasbMalwareRuleCloudAppTenantIdsArgs']] = None,
                 cloud_app_tenants: Optional[pulumi.Input['CasbMalwareRuleCloudAppTenantsArgs']] = None,
                 labels: Optional[pulumi.Input['CasbMalwareRuleLabelsArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 quarantine_location: Optional[pulumi.Input[builtins.str]] = None,
                 scan_inbound_email_link: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a CasbMalwareRule resource.
        :param pulumi.Input['CasbMalwareRuleBucketsArgs'] buckets: Name-ID pairs of locations for which rule must be applied
        :param pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbEmailLabelArgs']]] casb_email_labels: The ZPA Server Group for which this rule is applicable. Only the Server Groups that are associated with the selected
               Application Segments are allowed. This field is applicable only for the ZPA forwarding method.
        :param pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbTombstoneTemplateArgs']]] casb_tombstone_templates: The ZPA Server Group for which this rule is applicable. Only the Server Groups that are associated with the selected
               Application Segments are allowed. This field is applicable only for the ZPA forwarding method.
        :param pulumi.Input['CasbMalwareRuleCloudAppTenantIdsArgs'] cloud_app_tenant_ids: This field is applicable for devices that are managed using Zscaler Client Connector.
        :param pulumi.Input['CasbMalwareRuleCloudAppTenantsArgs'] cloud_app_tenants: Name-ID pairs of the cloud application tenants for which the rule is applied. If the name-ID pairs of the cloud
               application tenants are not specified, the rule is applied to all tenants.
        :param pulumi.Input['CasbMalwareRuleLabelsArgs'] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input[builtins.str] quarantine_location: Location where all the quarantined files are moved and necessary actions are taken by either deleting or restoring the
               data
        :param pulumi.Input[builtins.str] scan_inbound_email_link: Enables or disables the scan inbound email link
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if buckets is not None:
            pulumi.set(__self__, "buckets", buckets)
        if casb_email_labels is not None:
            pulumi.set(__self__, "casb_email_labels", casb_email_labels)
        if casb_tombstone_templates is not None:
            pulumi.set(__self__, "casb_tombstone_templates", casb_tombstone_templates)
        if cloud_app_tenant_ids is not None:
            pulumi.set(__self__, "cloud_app_tenant_ids", cloud_app_tenant_ids)
        if cloud_app_tenants is not None:
            pulumi.set(__self__, "cloud_app_tenants", cloud_app_tenants)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if quarantine_location is not None:
            pulumi.set(__self__, "quarantine_location", quarantine_location)
        if scan_inbound_email_link is not None:
            pulumi.set(__self__, "scan_inbound_email_link", scan_inbound_email_link)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def buckets(self) -> Optional[pulumi.Input['CasbMalwareRuleBucketsArgs']]:
        """
        Name-ID pairs of locations for which rule must be applied
        """
        return pulumi.get(self, "buckets")

    @buckets.setter
    def buckets(self, value: Optional[pulumi.Input['CasbMalwareRuleBucketsArgs']]):
        pulumi.set(self, "buckets", value)

    @property
    @pulumi.getter(name="casbEmailLabels")
    def casb_email_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbEmailLabelArgs']]]]:
        """
        The ZPA Server Group for which this rule is applicable. Only the Server Groups that are associated with the selected
        Application Segments are allowed. This field is applicable only for the ZPA forwarding method.
        """
        return pulumi.get(self, "casb_email_labels")

    @casb_email_labels.setter
    def casb_email_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbEmailLabelArgs']]]]):
        pulumi.set(self, "casb_email_labels", value)

    @property
    @pulumi.getter(name="casbTombstoneTemplates")
    def casb_tombstone_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbTombstoneTemplateArgs']]]]:
        """
        The ZPA Server Group for which this rule is applicable. Only the Server Groups that are associated with the selected
        Application Segments are allowed. This field is applicable only for the ZPA forwarding method.
        """
        return pulumi.get(self, "casb_tombstone_templates")

    @casb_tombstone_templates.setter
    def casb_tombstone_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbTombstoneTemplateArgs']]]]):
        pulumi.set(self, "casb_tombstone_templates", value)

    @property
    @pulumi.getter(name="cloudAppTenantIds")
    def cloud_app_tenant_ids(self) -> Optional[pulumi.Input['CasbMalwareRuleCloudAppTenantIdsArgs']]:
        """
        This field is applicable for devices that are managed using Zscaler Client Connector.
        """
        return pulumi.get(self, "cloud_app_tenant_ids")

    @cloud_app_tenant_ids.setter
    def cloud_app_tenant_ids(self, value: Optional[pulumi.Input['CasbMalwareRuleCloudAppTenantIdsArgs']]):
        pulumi.set(self, "cloud_app_tenant_ids", value)

    @property
    @pulumi.getter(name="cloudAppTenants")
    def cloud_app_tenants(self) -> Optional[pulumi.Input['CasbMalwareRuleCloudAppTenantsArgs']]:
        """
        Name-ID pairs of the cloud application tenants for which the rule is applied. If the name-ID pairs of the cloud
        application tenants are not specified, the rule is applied to all tenants.
        """
        return pulumi.get(self, "cloud_app_tenants")

    @cloud_app_tenants.setter
    def cloud_app_tenants(self, value: Optional[pulumi.Input['CasbMalwareRuleCloudAppTenantsArgs']]):
        pulumi.set(self, "cloud_app_tenants", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['CasbMalwareRuleLabelsArgs']]:
        """
        list of Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['CasbMalwareRuleLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="quarantineLocation")
    def quarantine_location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Location where all the quarantined files are moved and necessary actions are taken by either deleting or restoring the
        data
        """
        return pulumi.get(self, "quarantine_location")

    @quarantine_location.setter
    def quarantine_location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "quarantine_location", value)

    @property
    @pulumi.getter(name="scanInboundEmailLink")
    def scan_inbound_email_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Enables or disables the scan inbound email link
        """
        return pulumi.get(self, "scan_inbound_email_link")

    @scan_inbound_email_link.setter
    def scan_inbound_email_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scan_inbound_email_link", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _CasbMalwareRuleState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 buckets: Optional[pulumi.Input['CasbMalwareRuleBucketsArgs']] = None,
                 casb_email_labels: Optional[pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbEmailLabelArgs']]]] = None,
                 casb_tombstone_templates: Optional[pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbTombstoneTemplateArgs']]]] = None,
                 cloud_app_tenant_ids: Optional[pulumi.Input['CasbMalwareRuleCloudAppTenantIdsArgs']] = None,
                 cloud_app_tenants: Optional[pulumi.Input['CasbMalwareRuleCloudAppTenantsArgs']] = None,
                 labels: Optional[pulumi.Input['CasbMalwareRuleLabelsArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 quarantine_location: Optional[pulumi.Input[builtins.str]] = None,
                 rule_id: Optional[pulumi.Input[builtins.int]] = None,
                 scan_inbound_email_link: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering CasbMalwareRule resources.
        :param pulumi.Input['CasbMalwareRuleBucketsArgs'] buckets: Name-ID pairs of locations for which rule must be applied
        :param pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbEmailLabelArgs']]] casb_email_labels: The ZPA Server Group for which this rule is applicable. Only the Server Groups that are associated with the selected
               Application Segments are allowed. This field is applicable only for the ZPA forwarding method.
        :param pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbTombstoneTemplateArgs']]] casb_tombstone_templates: The ZPA Server Group for which this rule is applicable. Only the Server Groups that are associated with the selected
               Application Segments are allowed. This field is applicable only for the ZPA forwarding method.
        :param pulumi.Input['CasbMalwareRuleCloudAppTenantIdsArgs'] cloud_app_tenant_ids: This field is applicable for devices that are managed using Zscaler Client Connector.
        :param pulumi.Input['CasbMalwareRuleCloudAppTenantsArgs'] cloud_app_tenants: Name-ID pairs of the cloud application tenants for which the rule is applied. If the name-ID pairs of the cloud
               application tenants are not specified, the rule is applied to all tenants.
        :param pulumi.Input['CasbMalwareRuleLabelsArgs'] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input[builtins.str] quarantine_location: Location where all the quarantined files are moved and necessary actions are taken by either deleting or restoring the
               data
        :param pulumi.Input[builtins.int] rule_id: A unique identifier assigned to the forwarding rule
        :param pulumi.Input[builtins.str] scan_inbound_email_link: Enables or disables the scan inbound email link
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if buckets is not None:
            pulumi.set(__self__, "buckets", buckets)
        if casb_email_labels is not None:
            pulumi.set(__self__, "casb_email_labels", casb_email_labels)
        if casb_tombstone_templates is not None:
            pulumi.set(__self__, "casb_tombstone_templates", casb_tombstone_templates)
        if cloud_app_tenant_ids is not None:
            pulumi.set(__self__, "cloud_app_tenant_ids", cloud_app_tenant_ids)
        if cloud_app_tenants is not None:
            pulumi.set(__self__, "cloud_app_tenants", cloud_app_tenants)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if quarantine_location is not None:
            pulumi.set(__self__, "quarantine_location", quarantine_location)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if scan_inbound_email_link is not None:
            pulumi.set(__self__, "scan_inbound_email_link", scan_inbound_email_link)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def buckets(self) -> Optional[pulumi.Input['CasbMalwareRuleBucketsArgs']]:
        """
        Name-ID pairs of locations for which rule must be applied
        """
        return pulumi.get(self, "buckets")

    @buckets.setter
    def buckets(self, value: Optional[pulumi.Input['CasbMalwareRuleBucketsArgs']]):
        pulumi.set(self, "buckets", value)

    @property
    @pulumi.getter(name="casbEmailLabels")
    def casb_email_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbEmailLabelArgs']]]]:
        """
        The ZPA Server Group for which this rule is applicable. Only the Server Groups that are associated with the selected
        Application Segments are allowed. This field is applicable only for the ZPA forwarding method.
        """
        return pulumi.get(self, "casb_email_labels")

    @casb_email_labels.setter
    def casb_email_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbEmailLabelArgs']]]]):
        pulumi.set(self, "casb_email_labels", value)

    @property
    @pulumi.getter(name="casbTombstoneTemplates")
    def casb_tombstone_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbTombstoneTemplateArgs']]]]:
        """
        The ZPA Server Group for which this rule is applicable. Only the Server Groups that are associated with the selected
        Application Segments are allowed. This field is applicable only for the ZPA forwarding method.
        """
        return pulumi.get(self, "casb_tombstone_templates")

    @casb_tombstone_templates.setter
    def casb_tombstone_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CasbMalwareRuleCasbTombstoneTemplateArgs']]]]):
        pulumi.set(self, "casb_tombstone_templates", value)

    @property
    @pulumi.getter(name="cloudAppTenantIds")
    def cloud_app_tenant_ids(self) -> Optional[pulumi.Input['CasbMalwareRuleCloudAppTenantIdsArgs']]:
        """
        This field is applicable for devices that are managed using Zscaler Client Connector.
        """
        return pulumi.get(self, "cloud_app_tenant_ids")

    @cloud_app_tenant_ids.setter
    def cloud_app_tenant_ids(self, value: Optional[pulumi.Input['CasbMalwareRuleCloudAppTenantIdsArgs']]):
        pulumi.set(self, "cloud_app_tenant_ids", value)

    @property
    @pulumi.getter(name="cloudAppTenants")
    def cloud_app_tenants(self) -> Optional[pulumi.Input['CasbMalwareRuleCloudAppTenantsArgs']]:
        """
        Name-ID pairs of the cloud application tenants for which the rule is applied. If the name-ID pairs of the cloud
        application tenants are not specified, the rule is applied to all tenants.
        """
        return pulumi.get(self, "cloud_app_tenants")

    @cloud_app_tenants.setter
    def cloud_app_tenants(self, value: Optional[pulumi.Input['CasbMalwareRuleCloudAppTenantsArgs']]):
        pulumi.set(self, "cloud_app_tenants", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['CasbMalwareRuleLabelsArgs']]:
        """
        list of Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['CasbMalwareRuleLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="quarantineLocation")
    def quarantine_location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Location where all the quarantined files are moved and necessary actions are taken by either deleting or restoring the
        data
        """
        return pulumi.get(self, "quarantine_location")

    @quarantine_location.setter
    def quarantine_location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "quarantine_location", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        A unique identifier assigned to the forwarding rule
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="scanInboundEmailLink")
    def scan_inbound_email_link(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Enables or disables the scan inbound email link
        """
        return pulumi.get(self, "scan_inbound_email_link")

    @scan_inbound_email_link.setter
    def scan_inbound_email_link(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scan_inbound_email_link", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


@pulumi.type_token("zia:index/casbMalwareRule:CasbMalwareRule")
class CasbMalwareRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 buckets: Optional[pulumi.Input[Union['CasbMalwareRuleBucketsArgs', 'CasbMalwareRuleBucketsArgsDict']]] = None,
                 casb_email_labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CasbMalwareRuleCasbEmailLabelArgs', 'CasbMalwareRuleCasbEmailLabelArgsDict']]]]] = None,
                 casb_tombstone_templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CasbMalwareRuleCasbTombstoneTemplateArgs', 'CasbMalwareRuleCasbTombstoneTemplateArgsDict']]]]] = None,
                 cloud_app_tenant_ids: Optional[pulumi.Input[Union['CasbMalwareRuleCloudAppTenantIdsArgs', 'CasbMalwareRuleCloudAppTenantIdsArgsDict']]] = None,
                 cloud_app_tenants: Optional[pulumi.Input[Union['CasbMalwareRuleCloudAppTenantsArgs', 'CasbMalwareRuleCloudAppTenantsArgsDict']]] = None,
                 labels: Optional[pulumi.Input[Union['CasbMalwareRuleLabelsArgs', 'CasbMalwareRuleLabelsArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 quarantine_location: Optional[pulumi.Input[builtins.str]] = None,
                 scan_inbound_email_link: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zia/configuring-data-rest-scanning-malware-detection-policy)
        * [API documentation](https://help.zscaler.com/zia/saas-security-api#/casbMalwareRules-post)

        The **zia_casb_malware_rules** resource Adds a new SaaS Security Data at Rest Scanning Malware Detection rule.

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_casb_malware_rules** can be imported by using `<RULE_TYPE:RULE_ID>` or `<RULE_TYPE:RULE_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/casbMalwareRule:CasbMalwareRule this <rule_type:rule_id>
        ```

        ```sh
        $ pulumi import zia:index/casbMalwareRule:CasbMalwareRule this <"rule_type:rule_name">
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CasbMalwareRuleBucketsArgs', 'CasbMalwareRuleBucketsArgsDict']] buckets: Name-ID pairs of locations for which rule must be applied
        :param pulumi.Input[Sequence[pulumi.Input[Union['CasbMalwareRuleCasbEmailLabelArgs', 'CasbMalwareRuleCasbEmailLabelArgsDict']]]] casb_email_labels: The ZPA Server Group for which this rule is applicable. Only the Server Groups that are associated with the selected
               Application Segments are allowed. This field is applicable only for the ZPA forwarding method.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CasbMalwareRuleCasbTombstoneTemplateArgs', 'CasbMalwareRuleCasbTombstoneTemplateArgsDict']]]] casb_tombstone_templates: The ZPA Server Group for which this rule is applicable. Only the Server Groups that are associated with the selected
               Application Segments are allowed. This field is applicable only for the ZPA forwarding method.
        :param pulumi.Input[Union['CasbMalwareRuleCloudAppTenantIdsArgs', 'CasbMalwareRuleCloudAppTenantIdsArgsDict']] cloud_app_tenant_ids: This field is applicable for devices that are managed using Zscaler Client Connector.
        :param pulumi.Input[Union['CasbMalwareRuleCloudAppTenantsArgs', 'CasbMalwareRuleCloudAppTenantsArgsDict']] cloud_app_tenants: Name-ID pairs of the cloud application tenants for which the rule is applied. If the name-ID pairs of the cloud
               application tenants are not specified, the rule is applied to all tenants.
        :param pulumi.Input[Union['CasbMalwareRuleLabelsArgs', 'CasbMalwareRuleLabelsArgsDict']] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input[builtins.str] quarantine_location: Location where all the quarantined files are moved and necessary actions are taken by either deleting or restoring the
               data
        :param pulumi.Input[builtins.str] scan_inbound_email_link: Enables or disables the scan inbound email link
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CasbMalwareRuleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zia/configuring-data-rest-scanning-malware-detection-policy)
        * [API documentation](https://help.zscaler.com/zia/saas-security-api#/casbMalwareRules-post)

        The **zia_casb_malware_rules** resource Adds a new SaaS Security Data at Rest Scanning Malware Detection rule.

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_casb_malware_rules** can be imported by using `<RULE_TYPE:RULE_ID>` or `<RULE_TYPE:RULE_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/casbMalwareRule:CasbMalwareRule this <rule_type:rule_id>
        ```

        ```sh
        $ pulumi import zia:index/casbMalwareRule:CasbMalwareRule this <"rule_type:rule_name">
        ```

        :param str resource_name: The name of the resource.
        :param CasbMalwareRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CasbMalwareRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 buckets: Optional[pulumi.Input[Union['CasbMalwareRuleBucketsArgs', 'CasbMalwareRuleBucketsArgsDict']]] = None,
                 casb_email_labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CasbMalwareRuleCasbEmailLabelArgs', 'CasbMalwareRuleCasbEmailLabelArgsDict']]]]] = None,
                 casb_tombstone_templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CasbMalwareRuleCasbTombstoneTemplateArgs', 'CasbMalwareRuleCasbTombstoneTemplateArgsDict']]]]] = None,
                 cloud_app_tenant_ids: Optional[pulumi.Input[Union['CasbMalwareRuleCloudAppTenantIdsArgs', 'CasbMalwareRuleCloudAppTenantIdsArgsDict']]] = None,
                 cloud_app_tenants: Optional[pulumi.Input[Union['CasbMalwareRuleCloudAppTenantsArgs', 'CasbMalwareRuleCloudAppTenantsArgsDict']]] = None,
                 labels: Optional[pulumi.Input[Union['CasbMalwareRuleLabelsArgs', 'CasbMalwareRuleLabelsArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 quarantine_location: Optional[pulumi.Input[builtins.str]] = None,
                 scan_inbound_email_link: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CasbMalwareRuleArgs.__new__(CasbMalwareRuleArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["buckets"] = buckets
            __props__.__dict__["casb_email_labels"] = casb_email_labels
            __props__.__dict__["casb_tombstone_templates"] = casb_tombstone_templates
            __props__.__dict__["cloud_app_tenant_ids"] = cloud_app_tenant_ids
            __props__.__dict__["cloud_app_tenants"] = cloud_app_tenants
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["order"] = order
            __props__.__dict__["quarantine_location"] = quarantine_location
            __props__.__dict__["scan_inbound_email_link"] = scan_inbound_email_link
            __props__.__dict__["state"] = state
            __props__.__dict__["type"] = type
            __props__.__dict__["rule_id"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="zia:index/casbMalwareRules:CasbMalwareRules")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(CasbMalwareRule, __self__).__init__(
            'zia:index/casbMalwareRule:CasbMalwareRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[builtins.str]] = None,
            buckets: Optional[pulumi.Input[Union['CasbMalwareRuleBucketsArgs', 'CasbMalwareRuleBucketsArgsDict']]] = None,
            casb_email_labels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CasbMalwareRuleCasbEmailLabelArgs', 'CasbMalwareRuleCasbEmailLabelArgsDict']]]]] = None,
            casb_tombstone_templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CasbMalwareRuleCasbTombstoneTemplateArgs', 'CasbMalwareRuleCasbTombstoneTemplateArgsDict']]]]] = None,
            cloud_app_tenant_ids: Optional[pulumi.Input[Union['CasbMalwareRuleCloudAppTenantIdsArgs', 'CasbMalwareRuleCloudAppTenantIdsArgsDict']]] = None,
            cloud_app_tenants: Optional[pulumi.Input[Union['CasbMalwareRuleCloudAppTenantsArgs', 'CasbMalwareRuleCloudAppTenantsArgsDict']]] = None,
            labels: Optional[pulumi.Input[Union['CasbMalwareRuleLabelsArgs', 'CasbMalwareRuleLabelsArgsDict']]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            order: Optional[pulumi.Input[builtins.int]] = None,
            quarantine_location: Optional[pulumi.Input[builtins.str]] = None,
            rule_id: Optional[pulumi.Input[builtins.int]] = None,
            scan_inbound_email_link: Optional[pulumi.Input[builtins.str]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None) -> 'CasbMalwareRule':
        """
        Get an existing CasbMalwareRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['CasbMalwareRuleBucketsArgs', 'CasbMalwareRuleBucketsArgsDict']] buckets: Name-ID pairs of locations for which rule must be applied
        :param pulumi.Input[Sequence[pulumi.Input[Union['CasbMalwareRuleCasbEmailLabelArgs', 'CasbMalwareRuleCasbEmailLabelArgsDict']]]] casb_email_labels: The ZPA Server Group for which this rule is applicable. Only the Server Groups that are associated with the selected
               Application Segments are allowed. This field is applicable only for the ZPA forwarding method.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CasbMalwareRuleCasbTombstoneTemplateArgs', 'CasbMalwareRuleCasbTombstoneTemplateArgsDict']]]] casb_tombstone_templates: The ZPA Server Group for which this rule is applicable. Only the Server Groups that are associated with the selected
               Application Segments are allowed. This field is applicable only for the ZPA forwarding method.
        :param pulumi.Input[Union['CasbMalwareRuleCloudAppTenantIdsArgs', 'CasbMalwareRuleCloudAppTenantIdsArgsDict']] cloud_app_tenant_ids: This field is applicable for devices that are managed using Zscaler Client Connector.
        :param pulumi.Input[Union['CasbMalwareRuleCloudAppTenantsArgs', 'CasbMalwareRuleCloudAppTenantsArgsDict']] cloud_app_tenants: Name-ID pairs of the cloud application tenants for which the rule is applied. If the name-ID pairs of the cloud
               application tenants are not specified, the rule is applied to all tenants.
        :param pulumi.Input[Union['CasbMalwareRuleLabelsArgs', 'CasbMalwareRuleLabelsArgsDict']] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input[builtins.str] quarantine_location: Location where all the quarantined files are moved and necessary actions are taken by either deleting or restoring the
               data
        :param pulumi.Input[builtins.int] rule_id: A unique identifier assigned to the forwarding rule
        :param pulumi.Input[builtins.str] scan_inbound_email_link: Enables or disables the scan inbound email link
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CasbMalwareRuleState.__new__(_CasbMalwareRuleState)

        __props__.__dict__["action"] = action
        __props__.__dict__["buckets"] = buckets
        __props__.__dict__["casb_email_labels"] = casb_email_labels
        __props__.__dict__["casb_tombstone_templates"] = casb_tombstone_templates
        __props__.__dict__["cloud_app_tenant_ids"] = cloud_app_tenant_ids
        __props__.__dict__["cloud_app_tenants"] = cloud_app_tenants
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["order"] = order
        __props__.__dict__["quarantine_location"] = quarantine_location
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["scan_inbound_email_link"] = scan_inbound_email_link
        __props__.__dict__["state"] = state
        __props__.__dict__["type"] = type
        return CasbMalwareRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def buckets(self) -> pulumi.Output[Optional['outputs.CasbMalwareRuleBuckets']]:
        """
        Name-ID pairs of locations for which rule must be applied
        """
        return pulumi.get(self, "buckets")

    @property
    @pulumi.getter(name="casbEmailLabels")
    def casb_email_labels(self) -> pulumi.Output[Optional[Sequence['outputs.CasbMalwareRuleCasbEmailLabel']]]:
        """
        The ZPA Server Group for which this rule is applicable. Only the Server Groups that are associated with the selected
        Application Segments are allowed. This field is applicable only for the ZPA forwarding method.
        """
        return pulumi.get(self, "casb_email_labels")

    @property
    @pulumi.getter(name="casbTombstoneTemplates")
    def casb_tombstone_templates(self) -> pulumi.Output[Optional[Sequence['outputs.CasbMalwareRuleCasbTombstoneTemplate']]]:
        """
        The ZPA Server Group for which this rule is applicable. Only the Server Groups that are associated with the selected
        Application Segments are allowed. This field is applicable only for the ZPA forwarding method.
        """
        return pulumi.get(self, "casb_tombstone_templates")

    @property
    @pulumi.getter(name="cloudAppTenantIds")
    def cloud_app_tenant_ids(self) -> pulumi.Output[Optional['outputs.CasbMalwareRuleCloudAppTenantIds']]:
        """
        This field is applicable for devices that are managed using Zscaler Client Connector.
        """
        return pulumi.get(self, "cloud_app_tenant_ids")

    @property
    @pulumi.getter(name="cloudAppTenants")
    def cloud_app_tenants(self) -> pulumi.Output[Optional['outputs.CasbMalwareRuleCloudAppTenants']]:
        """
        Name-ID pairs of the cloud application tenants for which the rule is applied. If the name-ID pairs of the cloud
        application tenants are not specified, the rule is applied to all tenants.
        """
        return pulumi.get(self, "cloud_app_tenants")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional['outputs.CasbMalwareRuleLabels']]:
        """
        list of Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[Optional[builtins.int]]:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="quarantineLocation")
    def quarantine_location(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Location where all the quarantined files are moved and necessary actions are taken by either deleting or restoring the
        data
        """
        return pulumi.get(self, "quarantine_location")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[builtins.int]:
        """
        A unique identifier assigned to the forwarding rule
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="scanInboundEmailLink")
    def scan_inbound_email_link(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Enables or disables the scan inbound email link
        """
        return pulumi.get(self, "scan_inbound_email_link")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "type")

