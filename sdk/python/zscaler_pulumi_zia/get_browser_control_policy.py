# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetBrowserControlPolicyResult',
    'AwaitableGetBrowserControlPolicyResult',
    'get_browser_control_policy',
    'get_browser_control_policy_output',
]

@pulumi.output_type
class GetBrowserControlPolicyResult:
    """
    A collection of values returned by getBrowserControlPolicy.
    """
    def __init__(__self__, allow_all_browsers=None, blocked_chrome_versions=None, blocked_firefox_versions=None, blocked_internet_explorer_versions=None, blocked_opera_versions=None, blocked_safari_versions=None, bypass_all_browsers=None, bypass_applications=None, bypass_plugins=None, enable_smart_browser_isolation=None, enable_warnings=None, id=None, plugin_check_frequency=None, smart_isolation_profile_id=None, smart_isolation_profiles=None):
        if allow_all_browsers and not isinstance(allow_all_browsers, bool):
            raise TypeError("Expected argument 'allow_all_browsers' to be a bool")
        pulumi.set(__self__, "allow_all_browsers", allow_all_browsers)
        if blocked_chrome_versions and not isinstance(blocked_chrome_versions, list):
            raise TypeError("Expected argument 'blocked_chrome_versions' to be a list")
        pulumi.set(__self__, "blocked_chrome_versions", blocked_chrome_versions)
        if blocked_firefox_versions and not isinstance(blocked_firefox_versions, list):
            raise TypeError("Expected argument 'blocked_firefox_versions' to be a list")
        pulumi.set(__self__, "blocked_firefox_versions", blocked_firefox_versions)
        if blocked_internet_explorer_versions and not isinstance(blocked_internet_explorer_versions, list):
            raise TypeError("Expected argument 'blocked_internet_explorer_versions' to be a list")
        pulumi.set(__self__, "blocked_internet_explorer_versions", blocked_internet_explorer_versions)
        if blocked_opera_versions and not isinstance(blocked_opera_versions, list):
            raise TypeError("Expected argument 'blocked_opera_versions' to be a list")
        pulumi.set(__self__, "blocked_opera_versions", blocked_opera_versions)
        if blocked_safari_versions and not isinstance(blocked_safari_versions, list):
            raise TypeError("Expected argument 'blocked_safari_versions' to be a list")
        pulumi.set(__self__, "blocked_safari_versions", blocked_safari_versions)
        if bypass_all_browsers and not isinstance(bypass_all_browsers, bool):
            raise TypeError("Expected argument 'bypass_all_browsers' to be a bool")
        pulumi.set(__self__, "bypass_all_browsers", bypass_all_browsers)
        if bypass_applications and not isinstance(bypass_applications, list):
            raise TypeError("Expected argument 'bypass_applications' to be a list")
        pulumi.set(__self__, "bypass_applications", bypass_applications)
        if bypass_plugins and not isinstance(bypass_plugins, list):
            raise TypeError("Expected argument 'bypass_plugins' to be a list")
        pulumi.set(__self__, "bypass_plugins", bypass_plugins)
        if enable_smart_browser_isolation and not isinstance(enable_smart_browser_isolation, bool):
            raise TypeError("Expected argument 'enable_smart_browser_isolation' to be a bool")
        pulumi.set(__self__, "enable_smart_browser_isolation", enable_smart_browser_isolation)
        if enable_warnings and not isinstance(enable_warnings, bool):
            raise TypeError("Expected argument 'enable_warnings' to be a bool")
        pulumi.set(__self__, "enable_warnings", enable_warnings)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if plugin_check_frequency and not isinstance(plugin_check_frequency, str):
            raise TypeError("Expected argument 'plugin_check_frequency' to be a str")
        pulumi.set(__self__, "plugin_check_frequency", plugin_check_frequency)
        if smart_isolation_profile_id and not isinstance(smart_isolation_profile_id, int):
            raise TypeError("Expected argument 'smart_isolation_profile_id' to be a int")
        pulumi.set(__self__, "smart_isolation_profile_id", smart_isolation_profile_id)
        if smart_isolation_profiles and not isinstance(smart_isolation_profiles, list):
            raise TypeError("Expected argument 'smart_isolation_profiles' to be a list")
        pulumi.set(__self__, "smart_isolation_profiles", smart_isolation_profiles)

    @property
    @pulumi.getter(name="allowAllBrowsers")
    def allow_all_browsers(self) -> builtins.bool:
        """
        (Boolean) A Boolean value that specifies whether or not to allow all the browsers and their respective versions access to the internet
        """
        return pulumi.get(self, "allow_all_browsers")

    @property
    @pulumi.getter(name="blockedChromeVersions")
    def blocked_chrome_versions(self) -> Sequence[builtins.str]:
        """
        (List) Versions of Google Chrome browser that need to be blocked. If not set, all Google Chrome versions are allowed. See all [Supported values](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
        """
        return pulumi.get(self, "blocked_chrome_versions")

    @property
    @pulumi.getter(name="blockedFirefoxVersions")
    def blocked_firefox_versions(self) -> Sequence[builtins.str]:
        """
        (List) Versions of Mozilla Firefox browser that need to be blocked. If not set, all Mozilla Firefox versions are allowed. See all [Supported values](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
        """
        return pulumi.get(self, "blocked_firefox_versions")

    @property
    @pulumi.getter(name="blockedInternetExplorerVersions")
    def blocked_internet_explorer_versions(self) -> Sequence[builtins.str]:
        """
        (List) Versions of Microsoft browser that need to be blocked. If not set, all Microsoft browser versions are allowed. See all [Supported values](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
        """
        return pulumi.get(self, "blocked_internet_explorer_versions")

    @property
    @pulumi.getter(name="blockedOperaVersions")
    def blocked_opera_versions(self) -> Sequence[builtins.str]:
        """
        (List) Versions of Opera browser that need to be blocked. If not set, all Opera versions are allowed. See all [Supported values](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
        """
        return pulumi.get(self, "blocked_opera_versions")

    @property
    @pulumi.getter(name="blockedSafariVersions")
    def blocked_safari_versions(self) -> Sequence[builtins.str]:
        """
        (List) Versions of Apple Safari browser that need to be blocked. If not set, all Apple Safari versions are allowed. See all [Supported values](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)
        """
        return pulumi.get(self, "blocked_safari_versions")

    @property
    @pulumi.getter(name="bypassAllBrowsers")
    def bypass_all_browsers(self) -> builtins.bool:
        """
        (Boolean) If set to true, all the browsers are bypassed for warnings
        """
        return pulumi.get(self, "bypass_all_browsers")

    @property
    @pulumi.getter(name="bypassApplications")
    def bypass_applications(self) -> Sequence[builtins.str]:
        """
        (List) List of applications that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute is set to true. If not set, all vulnerable applications are warned. Supported Values:
        * `ANY`
        * `NONE`
        * `OUTLOOKEXP`
        * `MSOFFICE`
        """
        return pulumi.get(self, "bypass_applications")

    @property
    @pulumi.getter(name="bypassPlugins")
    def bypass_plugins(self) -> Sequence[builtins.str]:
        """
        (List) List of plugins that need to be bypassed for warnings. This attribute has effect only if the 'enableWarnings' attribute is set to true. If not set, all vulnerable plugins are warned.Supported Values:
        * `ANY`
        * `NONE`
        * `ACROBAT`
        * `FLASH`
        * `SHOCKWAVE`
        * `QUICKTIME`
        * `DIVX`
        * `GOOGLEGEARS`
        * `DOTNET`
        * `SILVERLIGHT`
        * `REALPLAYER`
        * `JAVA`
        * `TOTEM`
        * `WMP`
        """
        return pulumi.get(self, "bypass_plugins")

    @property
    @pulumi.getter(name="enableSmartBrowserIsolation")
    def enable_smart_browser_isolation(self) -> builtins.bool:
        """
        (Boolean) A Boolean value that specifies if Smart Browser Isolation is enabled
        """
        return pulumi.get(self, "enable_smart_browser_isolation")

    @property
    @pulumi.getter(name="enableWarnings")
    def enable_warnings(self) -> builtins.bool:
        """
        (Boolean) A Boolean value that specifies if the warnings are enabled
        """
        return pulumi.get(self, "enable_warnings")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="pluginCheckFrequency")
    def plugin_check_frequency(self) -> builtins.str:
        """
        (String) Specifies how frequently the service checks browsers and relevant applications to warn users regarding outdated or vulnerable browsers, plugins, and applications. If not set, the warnings are disabled. Supported Values:
        * `DAILY`
        * `WEEKLY`
        * `MONTHLY`,
        * `EVERY_2_HOURS`
        * `EVERY_4_HOURS`
        * `EVERY_6_HOURS`
        * `EVERY_8_HOURS`
        * `EVERY_12_HOURS`
        """
        return pulumi.get(self, "plugin_check_frequency")

    @property
    @pulumi.getter(name="smartIsolationProfileId")
    def smart_isolation_profile_id(self) -> builtins.int:
        return pulumi.get(self, "smart_isolation_profile_id")

    @property
    @pulumi.getter(name="smartIsolationProfiles")
    def smart_isolation_profiles(self) -> Sequence['outputs.GetBrowserControlPolicySmartIsolationProfileResult']:
        """
        (Block, Max: 1) The isolation profile ID used for DLP email alerts sent to the auditor.
        """
        return pulumi.get(self, "smart_isolation_profiles")


class AwaitableGetBrowserControlPolicyResult(GetBrowserControlPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBrowserControlPolicyResult(
            allow_all_browsers=self.allow_all_browsers,
            blocked_chrome_versions=self.blocked_chrome_versions,
            blocked_firefox_versions=self.blocked_firefox_versions,
            blocked_internet_explorer_versions=self.blocked_internet_explorer_versions,
            blocked_opera_versions=self.blocked_opera_versions,
            blocked_safari_versions=self.blocked_safari_versions,
            bypass_all_browsers=self.bypass_all_browsers,
            bypass_applications=self.bypass_applications,
            bypass_plugins=self.bypass_plugins,
            enable_smart_browser_isolation=self.enable_smart_browser_isolation,
            enable_warnings=self.enable_warnings,
            id=self.id,
            plugin_check_frequency=self.plugin_check_frequency,
            smart_isolation_profile_id=self.smart_isolation_profile_id,
            smart_isolation_profiles=self.smart_isolation_profiles)


def get_browser_control_policy(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBrowserControlPolicyResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/configuring-browser-control-policy)
    * [API documentation](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)

    Use the **zia_browser_control_policy** data source to retrieves information about the security exceptions configured for the Malware Protection policy. To learn more see [Configuring the Browser Control Policy](https://help.zscaler.com/zia/configuring-browser-control-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getBrowserControlPolicy:getBrowserControlPolicy', __args__, opts=opts, typ=GetBrowserControlPolicyResult).value

    return AwaitableGetBrowserControlPolicyResult(
        allow_all_browsers=pulumi.get(__ret__, 'allow_all_browsers'),
        blocked_chrome_versions=pulumi.get(__ret__, 'blocked_chrome_versions'),
        blocked_firefox_versions=pulumi.get(__ret__, 'blocked_firefox_versions'),
        blocked_internet_explorer_versions=pulumi.get(__ret__, 'blocked_internet_explorer_versions'),
        blocked_opera_versions=pulumi.get(__ret__, 'blocked_opera_versions'),
        blocked_safari_versions=pulumi.get(__ret__, 'blocked_safari_versions'),
        bypass_all_browsers=pulumi.get(__ret__, 'bypass_all_browsers'),
        bypass_applications=pulumi.get(__ret__, 'bypass_applications'),
        bypass_plugins=pulumi.get(__ret__, 'bypass_plugins'),
        enable_smart_browser_isolation=pulumi.get(__ret__, 'enable_smart_browser_isolation'),
        enable_warnings=pulumi.get(__ret__, 'enable_warnings'),
        id=pulumi.get(__ret__, 'id'),
        plugin_check_frequency=pulumi.get(__ret__, 'plugin_check_frequency'),
        smart_isolation_profile_id=pulumi.get(__ret__, 'smart_isolation_profile_id'),
        smart_isolation_profiles=pulumi.get(__ret__, 'smart_isolation_profiles'))
def get_browser_control_policy_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBrowserControlPolicyResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/configuring-browser-control-policy)
    * [API documentation](https://help.zscaler.com/zia/browser-control-policy#/browserControlSettings-get)

    Use the **zia_browser_control_policy** data source to retrieves information about the security exceptions configured for the Malware Protection policy. To learn more see [Configuring the Browser Control Policy](https://help.zscaler.com/zia/configuring-browser-control-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getBrowserControlPolicy:getBrowserControlPolicy', __args__, opts=opts, typ=GetBrowserControlPolicyResult)
    return __ret__.apply(lambda __response__: GetBrowserControlPolicyResult(
        allow_all_browsers=pulumi.get(__response__, 'allow_all_browsers'),
        blocked_chrome_versions=pulumi.get(__response__, 'blocked_chrome_versions'),
        blocked_firefox_versions=pulumi.get(__response__, 'blocked_firefox_versions'),
        blocked_internet_explorer_versions=pulumi.get(__response__, 'blocked_internet_explorer_versions'),
        blocked_opera_versions=pulumi.get(__response__, 'blocked_opera_versions'),
        blocked_safari_versions=pulumi.get(__response__, 'blocked_safari_versions'),
        bypass_all_browsers=pulumi.get(__response__, 'bypass_all_browsers'),
        bypass_applications=pulumi.get(__response__, 'bypass_applications'),
        bypass_plugins=pulumi.get(__response__, 'bypass_plugins'),
        enable_smart_browser_isolation=pulumi.get(__response__, 'enable_smart_browser_isolation'),
        enable_warnings=pulumi.get(__response__, 'enable_warnings'),
        id=pulumi.get(__response__, 'id'),
        plugin_check_frequency=pulumi.get(__response__, 'plugin_check_frequency'),
        smart_isolation_profile_id=pulumi.get(__response__, 'smart_isolation_profile_id'),
        smart_isolation_profiles=pulumi.get(__response__, 'smart_isolation_profiles')))
