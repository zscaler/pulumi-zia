# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CloudApplicationInstanceArgs', 'CloudApplicationInstance']

@pulumi.input_type
class CloudApplicationInstanceArgs:
    def __init__(__self__, *,
                 instance_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input['CloudApplicationInstanceInstanceIdentifierArgs']]]] = None,
                 instance_type: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a CloudApplicationInstance resource.
        :param pulumi.Input[Sequence[pulumi.Input['CloudApplicationInstanceInstanceIdentifierArgs']]] instance_identifiers: List of identifiers for the cloud application instance.
        :param pulumi.Input[builtins.str] instance_type: Type of the cloud application instance.
        :param pulumi.Input[builtins.str] name: Name of the cloud application instance.
        """
        if instance_identifiers is not None:
            pulumi.set(__self__, "instance_identifiers", instance_identifiers)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="instanceIdentifiers")
    def instance_identifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudApplicationInstanceInstanceIdentifierArgs']]]]:
        """
        List of identifiers for the cloud application instance.
        """
        return pulumi.get(self, "instance_identifiers")

    @instance_identifiers.setter
    def instance_identifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudApplicationInstanceInstanceIdentifierArgs']]]]):
        pulumi.set(self, "instance_identifiers", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type of the cloud application instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the cloud application instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CloudApplicationInstanceState:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[builtins.int]] = None,
                 instance_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input['CloudApplicationInstanceInstanceIdentifierArgs']]]] = None,
                 instance_type: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering CloudApplicationInstance resources.
        :param pulumi.Input[Sequence[pulumi.Input['CloudApplicationInstanceInstanceIdentifierArgs']]] instance_identifiers: List of identifiers for the cloud application instance.
        :param pulumi.Input[builtins.str] instance_type: Type of the cloud application instance.
        :param pulumi.Input[builtins.str] name: Name of the cloud application instance.
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_identifiers is not None:
            pulumi.set(__self__, "instance_identifiers", instance_identifiers)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="instanceIdentifiers")
    def instance_identifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudApplicationInstanceInstanceIdentifierArgs']]]]:
        """
        List of identifiers for the cloud application instance.
        """
        return pulumi.get(self, "instance_identifiers")

    @instance_identifiers.setter
    def instance_identifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudApplicationInstanceInstanceIdentifierArgs']]]]):
        pulumi.set(self, "instance_identifiers", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Type of the cloud application instance.
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the cloud application instance.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.type_token("zia:index/cloudApplicationInstance:CloudApplicationInstance")
class CloudApplicationInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CloudApplicationInstanceInstanceIdentifierArgs', 'CloudApplicationInstanceInstanceIdentifierArgsDict']]]]] = None,
                 instance_type: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zia/about-cloud-application-instances)
        * [API documentation](https://help.zscaler.com/zia/cloud-app-control-policy#/cloudApplicationInstances-post)

        The **zia_cloud_application_instance** resource allows the creation and management of cloud application instance.

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_cloud_application_instance** can be imported by using `<INSTANCE_ID>` or `<INSTANCE_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/cloudApplicationInstance:CloudApplicationInstance example <instance_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/cloudApplicationInstance:CloudApplicationInstance example <instance_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CloudApplicationInstanceInstanceIdentifierArgs', 'CloudApplicationInstanceInstanceIdentifierArgsDict']]]] instance_identifiers: List of identifiers for the cloud application instance.
        :param pulumi.Input[builtins.str] instance_type: Type of the cloud application instance.
        :param pulumi.Input[builtins.str] name: Name of the cloud application instance.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CloudApplicationInstanceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zia/about-cloud-application-instances)
        * [API documentation](https://help.zscaler.com/zia/cloud-app-control-policy#/cloudApplicationInstances-post)

        The **zia_cloud_application_instance** resource allows the creation and management of cloud application instance.

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_cloud_application_instance** can be imported by using `<INSTANCE_ID>` or `<INSTANCE_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/cloudApplicationInstance:CloudApplicationInstance example <instance_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/cloudApplicationInstance:CloudApplicationInstance example <instance_name>
        ```

        :param str resource_name: The name of the resource.
        :param CloudApplicationInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudApplicationInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 instance_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CloudApplicationInstanceInstanceIdentifierArgs', 'CloudApplicationInstanceInstanceIdentifierArgsDict']]]]] = None,
                 instance_type: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudApplicationInstanceArgs.__new__(CloudApplicationInstanceArgs)

            __props__.__dict__["instance_identifiers"] = instance_identifiers
            __props__.__dict__["instance_type"] = instance_type
            __props__.__dict__["name"] = name
            __props__.__dict__["instance_id"] = None
        super(CloudApplicationInstance, __self__).__init__(
            'zia:index/cloudApplicationInstance:CloudApplicationInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            instance_id: Optional[pulumi.Input[builtins.int]] = None,
            instance_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CloudApplicationInstanceInstanceIdentifierArgs', 'CloudApplicationInstanceInstanceIdentifierArgsDict']]]]] = None,
            instance_type: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None) -> 'CloudApplicationInstance':
        """
        Get an existing CloudApplicationInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['CloudApplicationInstanceInstanceIdentifierArgs', 'CloudApplicationInstanceInstanceIdentifierArgsDict']]]] instance_identifiers: List of identifiers for the cloud application instance.
        :param pulumi.Input[builtins.str] instance_type: Type of the cloud application instance.
        :param pulumi.Input[builtins.str] name: Name of the cloud application instance.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudApplicationInstanceState.__new__(_CloudApplicationInstanceState)

        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["instance_identifiers"] = instance_identifiers
        __props__.__dict__["instance_type"] = instance_type
        __props__.__dict__["name"] = name
        return CloudApplicationInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceIdentifiers")
    def instance_identifiers(self) -> pulumi.Output[Optional[Sequence['outputs.CloudApplicationInstanceInstanceIdentifier']]]:
        """
        List of identifiers for the cloud application instance.
        """
        return pulumi.get(self, "instance_identifiers")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Type of the cloud application instance.
        """
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the cloud application instance.
        """
        return pulumi.get(self, "name")

