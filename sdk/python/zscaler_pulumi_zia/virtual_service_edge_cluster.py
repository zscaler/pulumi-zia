# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VirtualServiceEdgeClusterArgs', 'VirtualServiceEdgeCluster']

@pulumi.input_type
class VirtualServiceEdgeClusterArgs:
    def __init__(__self__, *,
                 default_gateway: Optional[pulumi.Input[builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[builtins.str]] = None,
                 ip_sec_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 virtual_zen_nodes: Optional[pulumi.Input['VirtualServiceEdgeClusterVirtualZenNodesArgs']] = None):
        """
        The set of arguments for constructing a VirtualServiceEdgeCluster resource.
        :param pulumi.Input[builtins.str] default_gateway: (String) The IP address of the default gateway to the internet
        :param pulumi.Input[builtins.str] ip_address: (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
        :param pulumi.Input[builtins.bool] ip_sec_enabled: (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
        :param pulumi.Input[builtins.str] name: Name of the Virtual Service Edge cluster
        :param pulumi.Input[builtins.str] status: (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
        :param pulumi.Input[builtins.str] subnet_mask: (String) The Virtual Service Edge cluster subnet mask
        :param pulumi.Input[builtins.str] type: (String) The Virtual Service Edge cluster type
               `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
               `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
               `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
               `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`, `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,`SMBAM`, `ZWACLT`
        :param pulumi.Input['VirtualServiceEdgeClusterVirtualZenNodesArgs'] virtual_zen_nodes: (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
        """
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_sec_enabled is not None:
            pulumi.set(__self__, "ip_sec_enabled", ip_sec_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_zen_nodes is not None:
            pulumi.set(__self__, "virtual_zen_nodes", virtual_zen_nodes)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) The IP address of the default gateway to the internet
        """
        return pulumi.get(self, "default_gateway")

    @default_gateway.setter
    def default_gateway(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default_gateway", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="ipSecEnabled")
    def ip_sec_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
        """
        return pulumi.get(self, "ip_sec_enabled")

    @ip_sec_enabled.setter
    def ip_sec_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ip_sec_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the Virtual Service Edge cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) The Virtual Service Edge cluster subnet mask
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) The Virtual Service Edge cluster type
        `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
        `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
        `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
        `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`, `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,`SMBAM`, `ZWACLT`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="virtualZenNodes")
    def virtual_zen_nodes(self) -> Optional[pulumi.Input['VirtualServiceEdgeClusterVirtualZenNodesArgs']]:
        """
        (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
        """
        return pulumi.get(self, "virtual_zen_nodes")

    @virtual_zen_nodes.setter
    def virtual_zen_nodes(self, value: Optional[pulumi.Input['VirtualServiceEdgeClusterVirtualZenNodesArgs']]):
        pulumi.set(self, "virtual_zen_nodes", value)


@pulumi.input_type
class _VirtualServiceEdgeClusterState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[builtins.int]] = None,
                 default_gateway: Optional[pulumi.Input[builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[builtins.str]] = None,
                 ip_sec_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 virtual_zen_nodes: Optional[pulumi.Input['VirtualServiceEdgeClusterVirtualZenNodesArgs']] = None):
        """
        Input properties used for looking up and filtering VirtualServiceEdgeCluster resources.
        :param pulumi.Input[builtins.str] default_gateway: (String) The IP address of the default gateway to the internet
        :param pulumi.Input[builtins.str] ip_address: (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
        :param pulumi.Input[builtins.bool] ip_sec_enabled: (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
        :param pulumi.Input[builtins.str] name: Name of the Virtual Service Edge cluster
        :param pulumi.Input[builtins.str] status: (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
        :param pulumi.Input[builtins.str] subnet_mask: (String) The Virtual Service Edge cluster subnet mask
        :param pulumi.Input[builtins.str] type: (String) The Virtual Service Edge cluster type
               `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
               `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
               `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
               `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`, `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,`SMBAM`, `ZWACLT`
        :param pulumi.Input['VirtualServiceEdgeClusterVirtualZenNodesArgs'] virtual_zen_nodes: (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if default_gateway is not None:
            pulumi.set(__self__, "default_gateway", default_gateway)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ip_sec_enabled is not None:
            pulumi.set(__self__, "ip_sec_enabled", ip_sec_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_mask is not None:
            pulumi.set(__self__, "subnet_mask", subnet_mask)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if virtual_zen_nodes is not None:
            pulumi.set(__self__, "virtual_zen_nodes", virtual_zen_nodes)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) The IP address of the default gateway to the internet
        """
        return pulumi.get(self, "default_gateway")

    @default_gateway.setter
    def default_gateway(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default_gateway", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="ipSecEnabled")
    def ip_sec_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
        """
        return pulumi.get(self, "ip_sec_enabled")

    @ip_sec_enabled.setter
    def ip_sec_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "ip_sec_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the Virtual Service Edge cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) The Virtual Service Edge cluster subnet mask
        """
        return pulumi.get(self, "subnet_mask")

    @subnet_mask.setter
    def subnet_mask(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subnet_mask", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) The Virtual Service Edge cluster type
        `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
        `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
        `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
        `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`, `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,`SMBAM`, `ZWACLT`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="virtualZenNodes")
    def virtual_zen_nodes(self) -> Optional[pulumi.Input['VirtualServiceEdgeClusterVirtualZenNodesArgs']]:
        """
        (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
        """
        return pulumi.get(self, "virtual_zen_nodes")

    @virtual_zen_nodes.setter
    def virtual_zen_nodes(self, value: Optional[pulumi.Input['VirtualServiceEdgeClusterVirtualZenNodesArgs']]):
        pulumi.set(self, "virtual_zen_nodes", value)


@pulumi.type_token("zia:index/virtualServiceEdgeCluster:VirtualServiceEdgeCluster")
class VirtualServiceEdgeCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_gateway: Optional[pulumi.Input[builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[builtins.str]] = None,
                 ip_sec_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 virtual_zen_nodes: Optional[pulumi.Input[Union['VirtualServiceEdgeClusterVirtualZenNodesArgs', 'VirtualServiceEdgeClusterVirtualZenNodesArgsDict']]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zia/about-virtual-service-edge-clusters)
        * [API documentation](https://help.zscaler.com/zia/service-edges#/virtualZenClusters-get)

        Use the **zia_virtual_service_edge_cluster** resource allows the creation and management of Service Edge Cluster objects in the Zscaler Internet Access.

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_virtual_service_edge_cluster** can be imported by using `<CLUSTER_ID>` or `<CLUSTER_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/virtualServiceEdgeCluster:VirtualServiceEdgeCluster example <cluster_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/virtualServiceEdgeCluster:VirtualServiceEdgeCluster example <cluster_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] default_gateway: (String) The IP address of the default gateway to the internet
        :param pulumi.Input[builtins.str] ip_address: (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
        :param pulumi.Input[builtins.bool] ip_sec_enabled: (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
        :param pulumi.Input[builtins.str] name: Name of the Virtual Service Edge cluster
        :param pulumi.Input[builtins.str] status: (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
        :param pulumi.Input[builtins.str] subnet_mask: (String) The Virtual Service Edge cluster subnet mask
        :param pulumi.Input[builtins.str] type: (String) The Virtual Service Edge cluster type
               `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
               `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
               `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
               `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`, `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,`SMBAM`, `ZWACLT`
        :param pulumi.Input[Union['VirtualServiceEdgeClusterVirtualZenNodesArgs', 'VirtualServiceEdgeClusterVirtualZenNodesArgsDict']] virtual_zen_nodes: (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VirtualServiceEdgeClusterArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zia/about-virtual-service-edge-clusters)
        * [API documentation](https://help.zscaler.com/zia/service-edges#/virtualZenClusters-get)

        Use the **zia_virtual_service_edge_cluster** resource allows the creation and management of Service Edge Cluster objects in the Zscaler Internet Access.

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_virtual_service_edge_cluster** can be imported by using `<CLUSTER_ID>` or `<CLUSTER_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/virtualServiceEdgeCluster:VirtualServiceEdgeCluster example <cluster_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/virtualServiceEdgeCluster:VirtualServiceEdgeCluster example <cluster_name>
        ```

        :param str resource_name: The name of the resource.
        :param VirtualServiceEdgeClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualServiceEdgeClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_gateway: Optional[pulumi.Input[builtins.str]] = None,
                 ip_address: Optional[pulumi.Input[builtins.str]] = None,
                 ip_sec_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_mask: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 virtual_zen_nodes: Optional[pulumi.Input[Union['VirtualServiceEdgeClusterVirtualZenNodesArgs', 'VirtualServiceEdgeClusterVirtualZenNodesArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualServiceEdgeClusterArgs.__new__(VirtualServiceEdgeClusterArgs)

            __props__.__dict__["default_gateway"] = default_gateway
            __props__.__dict__["ip_address"] = ip_address
            __props__.__dict__["ip_sec_enabled"] = ip_sec_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["status"] = status
            __props__.__dict__["subnet_mask"] = subnet_mask
            __props__.__dict__["type"] = type
            __props__.__dict__["virtual_zen_nodes"] = virtual_zen_nodes
            __props__.__dict__["cluster_id"] = None
        super(VirtualServiceEdgeCluster, __self__).__init__(
            'zia:index/virtualServiceEdgeCluster:VirtualServiceEdgeCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[builtins.int]] = None,
            default_gateway: Optional[pulumi.Input[builtins.str]] = None,
            ip_address: Optional[pulumi.Input[builtins.str]] = None,
            ip_sec_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            subnet_mask: Optional[pulumi.Input[builtins.str]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            virtual_zen_nodes: Optional[pulumi.Input[Union['VirtualServiceEdgeClusterVirtualZenNodesArgs', 'VirtualServiceEdgeClusterVirtualZenNodesArgsDict']]] = None) -> 'VirtualServiceEdgeCluster':
        """
        Get an existing VirtualServiceEdgeCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] default_gateway: (String) The IP address of the default gateway to the internet
        :param pulumi.Input[builtins.str] ip_address: (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
        :param pulumi.Input[builtins.bool] ip_sec_enabled: (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
        :param pulumi.Input[builtins.str] name: Name of the Virtual Service Edge cluster
        :param pulumi.Input[builtins.str] status: (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
        :param pulumi.Input[builtins.str] subnet_mask: (String) The Virtual Service Edge cluster subnet mask
        :param pulumi.Input[builtins.str] type: (String) The Virtual Service Edge cluster type
               `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
               `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
               `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
               `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`, `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,`SMBAM`, `ZWACLT`
        :param pulumi.Input[Union['VirtualServiceEdgeClusterVirtualZenNodesArgs', 'VirtualServiceEdgeClusterVirtualZenNodesArgsDict']] virtual_zen_nodes: (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VirtualServiceEdgeClusterState.__new__(_VirtualServiceEdgeClusterState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["default_gateway"] = default_gateway
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["ip_sec_enabled"] = ip_sec_enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_mask"] = subnet_mask
        __props__.__dict__["type"] = type
        __props__.__dict__["virtual_zen_nodes"] = virtual_zen_nodes
        return VirtualServiceEdgeCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) The IP address of the default gateway to the internet
        """
        return pulumi.get(self, "default_gateway")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipSecEnabled")
    def ip_sec_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
        """
        return pulumi.get(self, "ip_sec_enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the Virtual Service Edge cluster
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) The Virtual Service Edge cluster subnet mask
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) The Virtual Service Edge cluster type
        `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
        `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
        `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
        `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`, `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,`SMBAM`, `ZWACLT`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualZenNodes")
    def virtual_zen_nodes(self) -> pulumi.Output[Optional['outputs.VirtualServiceEdgeClusterVirtualZenNodes']]:
        """
        (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
        """
        return pulumi.get(self, "virtual_zen_nodes")

