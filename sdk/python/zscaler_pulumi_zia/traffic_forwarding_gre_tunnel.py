# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TrafficForwardingGRETunnelArgs', 'TrafficForwardingGRETunnel']

@pulumi.input_type
class TrafficForwardingGRETunnelArgs:
    def __init__(__self__, *,
                 source_ip: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None,
                 country_code: Optional[pulumi.Input[str]] = None,
                 internal_ip_range: Optional[pulumi.Input[str]] = None,
                 ip_unnumbered: Optional[pulumi.Input[bool]] = None,
                 primary_dest_vips: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelPrimaryDestVipArgs']]]] = None,
                 secondary_dest_vips: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelSecondaryDestVipArgs']]]] = None,
                 within_country: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a TrafficForwardingGRETunnel resource.
        :param pulumi.Input[str] source_ip: The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
        :param pulumi.Input[str] comment: Additional information about this GRE tunnel
        :param pulumi.Input[str] country_code: When within_country is enabled, you must set this to the country code.
        :param pulumi.Input[str] internal_ip_range: The start of the internal IP address in /29 CIDR range
        :param pulumi.Input[bool] ip_unnumbered: This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id
               are set to null
        :param pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelPrimaryDestVipArgs']]] primary_dest_vips: The primary destination data center and virtual IP address (VIP) of the GRE tunnel
        :param pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelSecondaryDestVipArgs']]] secondary_dest_vips: The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
        :param pulumi.Input[bool] within_country: Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
        """
        pulumi.set(__self__, "source_ip", source_ip)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if internal_ip_range is not None:
            pulumi.set(__self__, "internal_ip_range", internal_ip_range)
        if ip_unnumbered is not None:
            pulumi.set(__self__, "ip_unnumbered", ip_unnumbered)
        if primary_dest_vips is not None:
            pulumi.set(__self__, "primary_dest_vips", primary_dest_vips)
        if secondary_dest_vips is not None:
            pulumi.set(__self__, "secondary_dest_vips", secondary_dest_vips)
        if within_country is not None:
            pulumi.set(__self__, "within_country", within_country)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Input[str]:
        """
        The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information about this GRE tunnel
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[pulumi.Input[str]]:
        """
        When within_country is enabled, you must set this to the country code.
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter(name="internalIpRange")
    def internal_ip_range(self) -> Optional[pulumi.Input[str]]:
        """
        The start of the internal IP address in /29 CIDR range
        """
        return pulumi.get(self, "internal_ip_range")

    @internal_ip_range.setter
    def internal_ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip_range", value)

    @property
    @pulumi.getter(name="ipUnnumbered")
    def ip_unnumbered(self) -> Optional[pulumi.Input[bool]]:
        """
        This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id
        are set to null
        """
        return pulumi.get(self, "ip_unnumbered")

    @ip_unnumbered.setter
    def ip_unnumbered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_unnumbered", value)

    @property
    @pulumi.getter(name="primaryDestVips")
    def primary_dest_vips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelPrimaryDestVipArgs']]]]:
        """
        The primary destination data center and virtual IP address (VIP) of the GRE tunnel
        """
        return pulumi.get(self, "primary_dest_vips")

    @primary_dest_vips.setter
    def primary_dest_vips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelPrimaryDestVipArgs']]]]):
        pulumi.set(self, "primary_dest_vips", value)

    @property
    @pulumi.getter(name="secondaryDestVips")
    def secondary_dest_vips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelSecondaryDestVipArgs']]]]:
        """
        The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
        """
        return pulumi.get(self, "secondary_dest_vips")

    @secondary_dest_vips.setter
    def secondary_dest_vips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelSecondaryDestVipArgs']]]]):
        pulumi.set(self, "secondary_dest_vips", value)

    @property
    @pulumi.getter(name="withinCountry")
    def within_country(self) -> Optional[pulumi.Input[bool]]:
        """
        Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
        """
        return pulumi.get(self, "within_country")

    @within_country.setter
    def within_country(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "within_country", value)


@pulumi.input_type
class _TrafficForwardingGRETunnelState:
    def __init__(__self__, *,
                 comment: Optional[pulumi.Input[str]] = None,
                 country_code: Optional[pulumi.Input[str]] = None,
                 internal_ip_range: Optional[pulumi.Input[str]] = None,
                 ip_unnumbered: Optional[pulumi.Input[bool]] = None,
                 primary_dest_vips: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelPrimaryDestVipArgs']]]] = None,
                 secondary_dest_vips: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelSecondaryDestVipArgs']]]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 tunnel_id: Optional[pulumi.Input[int]] = None,
                 within_country: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering TrafficForwardingGRETunnel resources.
        :param pulumi.Input[str] comment: Additional information about this GRE tunnel
        :param pulumi.Input[str] country_code: When within_country is enabled, you must set this to the country code.
        :param pulumi.Input[str] internal_ip_range: The start of the internal IP address in /29 CIDR range
        :param pulumi.Input[bool] ip_unnumbered: This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id
               are set to null
        :param pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelPrimaryDestVipArgs']]] primary_dest_vips: The primary destination data center and virtual IP address (VIP) of the GRE tunnel
        :param pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelSecondaryDestVipArgs']]] secondary_dest_vips: The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
        :param pulumi.Input[str] source_ip: The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
        :param pulumi.Input[int] tunnel_id: The ID of the GRE tunnel.
        :param pulumi.Input[bool] within_country: Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
        """
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if internal_ip_range is not None:
            pulumi.set(__self__, "internal_ip_range", internal_ip_range)
        if ip_unnumbered is not None:
            pulumi.set(__self__, "ip_unnumbered", ip_unnumbered)
        if primary_dest_vips is not None:
            pulumi.set(__self__, "primary_dest_vips", primary_dest_vips)
        if secondary_dest_vips is not None:
            pulumi.set(__self__, "secondary_dest_vips", secondary_dest_vips)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if tunnel_id is not None:
            pulumi.set(__self__, "tunnel_id", tunnel_id)
        if within_country is not None:
            pulumi.set(__self__, "within_country", within_country)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information about this GRE tunnel
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[pulumi.Input[str]]:
        """
        When within_country is enabled, you must set this to the country code.
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter(name="internalIpRange")
    def internal_ip_range(self) -> Optional[pulumi.Input[str]]:
        """
        The start of the internal IP address in /29 CIDR range
        """
        return pulumi.get(self, "internal_ip_range")

    @internal_ip_range.setter
    def internal_ip_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "internal_ip_range", value)

    @property
    @pulumi.getter(name="ipUnnumbered")
    def ip_unnumbered(self) -> Optional[pulumi.Input[bool]]:
        """
        This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id
        are set to null
        """
        return pulumi.get(self, "ip_unnumbered")

    @ip_unnumbered.setter
    def ip_unnumbered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_unnumbered", value)

    @property
    @pulumi.getter(name="primaryDestVips")
    def primary_dest_vips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelPrimaryDestVipArgs']]]]:
        """
        The primary destination data center and virtual IP address (VIP) of the GRE tunnel
        """
        return pulumi.get(self, "primary_dest_vips")

    @primary_dest_vips.setter
    def primary_dest_vips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelPrimaryDestVipArgs']]]]):
        pulumi.set(self, "primary_dest_vips", value)

    @property
    @pulumi.getter(name="secondaryDestVips")
    def secondary_dest_vips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelSecondaryDestVipArgs']]]]:
        """
        The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
        """
        return pulumi.get(self, "secondary_dest_vips")

    @secondary_dest_vips.setter
    def secondary_dest_vips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TrafficForwardingGRETunnelSecondaryDestVipArgs']]]]):
        pulumi.set(self, "secondary_dest_vips", value)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[pulumi.Input[str]]:
        """
        The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
        """
        return pulumi.get(self, "source_ip")

    @source_ip.setter
    def source_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_ip", value)

    @property
    @pulumi.getter(name="tunnelId")
    def tunnel_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the GRE tunnel.
        """
        return pulumi.get(self, "tunnel_id")

    @tunnel_id.setter
    def tunnel_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_id", value)

    @property
    @pulumi.getter(name="withinCountry")
    def within_country(self) -> Optional[pulumi.Input[bool]]:
        """
        Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
        """
        return pulumi.get(self, "within_country")

    @within_country.setter
    def within_country(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "within_country", value)


class TrafficForwardingGRETunnel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 country_code: Optional[pulumi.Input[str]] = None,
                 internal_ip_range: Optional[pulumi.Input[str]] = None,
                 ip_unnumbered: Optional[pulumi.Input[bool]] = None,
                 primary_dest_vips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TrafficForwardingGRETunnelPrimaryDestVipArgs']]]]] = None,
                 secondary_dest_vips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TrafficForwardingGRETunnelSecondaryDestVipArgs']]]]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 within_country: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_traffic_forwarding_gre_tunnel** can be imported by using `<TUNNEL_ID>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel example <tunnel_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel example <engine_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Additional information about this GRE tunnel
        :param pulumi.Input[str] country_code: When within_country is enabled, you must set this to the country code.
        :param pulumi.Input[str] internal_ip_range: The start of the internal IP address in /29 CIDR range
        :param pulumi.Input[bool] ip_unnumbered: This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id
               are set to null
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TrafficForwardingGRETunnelPrimaryDestVipArgs']]]] primary_dest_vips: The primary destination data center and virtual IP address (VIP) of the GRE tunnel
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TrafficForwardingGRETunnelSecondaryDestVipArgs']]]] secondary_dest_vips: The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
        :param pulumi.Input[str] source_ip: The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
        :param pulumi.Input[bool] within_country: Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TrafficForwardingGRETunnelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_traffic_forwarding_gre_tunnel** can be imported by using `<TUNNEL_ID>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel example <tunnel_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel example <engine_name>
        ```

        :param str resource_name: The name of the resource.
        :param TrafficForwardingGRETunnelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TrafficForwardingGRETunnelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 country_code: Optional[pulumi.Input[str]] = None,
                 internal_ip_range: Optional[pulumi.Input[str]] = None,
                 ip_unnumbered: Optional[pulumi.Input[bool]] = None,
                 primary_dest_vips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TrafficForwardingGRETunnelPrimaryDestVipArgs']]]]] = None,
                 secondary_dest_vips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TrafficForwardingGRETunnelSecondaryDestVipArgs']]]]] = None,
                 source_ip: Optional[pulumi.Input[str]] = None,
                 within_country: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TrafficForwardingGRETunnelArgs.__new__(TrafficForwardingGRETunnelArgs)

            __props__.__dict__["comment"] = comment
            __props__.__dict__["country_code"] = country_code
            __props__.__dict__["internal_ip_range"] = internal_ip_range
            __props__.__dict__["ip_unnumbered"] = ip_unnumbered
            __props__.__dict__["primary_dest_vips"] = primary_dest_vips
            __props__.__dict__["secondary_dest_vips"] = secondary_dest_vips
            if source_ip is None and not opts.urn:
                raise TypeError("Missing required property 'source_ip'")
            __props__.__dict__["source_ip"] = source_ip
            __props__.__dict__["within_country"] = within_country
            __props__.__dict__["tunnel_id"] = None
        super(TrafficForwardingGRETunnel, __self__).__init__(
            'zia:index/trafficForwardingGRETunnel:TrafficForwardingGRETunnel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comment: Optional[pulumi.Input[str]] = None,
            country_code: Optional[pulumi.Input[str]] = None,
            internal_ip_range: Optional[pulumi.Input[str]] = None,
            ip_unnumbered: Optional[pulumi.Input[bool]] = None,
            primary_dest_vips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TrafficForwardingGRETunnelPrimaryDestVipArgs']]]]] = None,
            secondary_dest_vips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TrafficForwardingGRETunnelSecondaryDestVipArgs']]]]] = None,
            source_ip: Optional[pulumi.Input[str]] = None,
            tunnel_id: Optional[pulumi.Input[int]] = None,
            within_country: Optional[pulumi.Input[bool]] = None) -> 'TrafficForwardingGRETunnel':
        """
        Get an existing TrafficForwardingGRETunnel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comment: Additional information about this GRE tunnel
        :param pulumi.Input[str] country_code: When within_country is enabled, you must set this to the country code.
        :param pulumi.Input[str] internal_ip_range: The start of the internal IP address in /29 CIDR range
        :param pulumi.Input[bool] ip_unnumbered: This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id
               are set to null
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TrafficForwardingGRETunnelPrimaryDestVipArgs']]]] primary_dest_vips: The primary destination data center and virtual IP address (VIP) of the GRE tunnel
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TrafficForwardingGRETunnelSecondaryDestVipArgs']]]] secondary_dest_vips: The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
        :param pulumi.Input[str] source_ip: The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
        :param pulumi.Input[int] tunnel_id: The ID of the GRE tunnel.
        :param pulumi.Input[bool] within_country: Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TrafficForwardingGRETunnelState.__new__(_TrafficForwardingGRETunnelState)

        __props__.__dict__["comment"] = comment
        __props__.__dict__["country_code"] = country_code
        __props__.__dict__["internal_ip_range"] = internal_ip_range
        __props__.__dict__["ip_unnumbered"] = ip_unnumbered
        __props__.__dict__["primary_dest_vips"] = primary_dest_vips
        __props__.__dict__["secondary_dest_vips"] = secondary_dest_vips
        __props__.__dict__["source_ip"] = source_ip
        __props__.__dict__["tunnel_id"] = tunnel_id
        __props__.__dict__["within_country"] = within_country
        return TrafficForwardingGRETunnel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Additional information about this GRE tunnel
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Output[str]:
        """
        When within_country is enabled, you must set this to the country code.
        """
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="internalIpRange")
    def internal_ip_range(self) -> pulumi.Output[Optional[str]]:
        """
        The start of the internal IP address in /29 CIDR range
        """
        return pulumi.get(self, "internal_ip_range")

    @property
    @pulumi.getter(name="ipUnnumbered")
    def ip_unnumbered(self) -> pulumi.Output[bool]:
        """
        This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id
        are set to null
        """
        return pulumi.get(self, "ip_unnumbered")

    @property
    @pulumi.getter(name="primaryDestVips")
    def primary_dest_vips(self) -> pulumi.Output[Sequence['outputs.TrafficForwardingGRETunnelPrimaryDestVip']]:
        """
        The primary destination data center and virtual IP address (VIP) of the GRE tunnel
        """
        return pulumi.get(self, "primary_dest_vips")

    @property
    @pulumi.getter(name="secondaryDestVips")
    def secondary_dest_vips(self) -> pulumi.Output[Sequence['outputs.TrafficForwardingGRETunnelSecondaryDestVip']]:
        """
        The secondary destination data center and virtual IP address (VIP) of the GRE tunnel
        """
        return pulumi.get(self, "secondary_dest_vips")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> pulumi.Output[str]:
        """
        The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN.
        """
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter(name="tunnelId")
    def tunnel_id(self) -> pulumi.Output[int]:
        """
        The ID of the GRE tunnel.
        """
        return pulumi.get(self, "tunnel_id")

    @property
    @pulumi.getter(name="withinCountry")
    def within_country(self) -> pulumi.Output[bool]:
        """
        Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
        """
        return pulumi.get(self, "within_country")

