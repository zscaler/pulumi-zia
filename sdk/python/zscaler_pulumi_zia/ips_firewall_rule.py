# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IPSFirewallRuleArgs', 'IPSFirewallRule']

@pulumi.input_type
class IPSFirewallRuleArgs:
    def __init__(__self__, *,
                 order: pulumi.Input[builtins.int],
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 capture_pcap: Optional[pulumi.Input[builtins.bool]] = None,
                 default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 departments: Optional[pulumi.Input['IPSFirewallRuleDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input['IPSFirewallRuleDestIpGroupsArgs']] = None,
                 dest_ipv6_groups: Optional[pulumi.Input['IPSFirewallRuleDestIpv6GroupsArgs']] = None,
                 device_groups: Optional[pulumi.Input['IPSFirewallRuleDeviceGroupsArgs']] = None,
                 devices: Optional[pulumi.Input['IPSFirewallRuleDevicesArgs']] = None,
                 enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 groups: Optional[pulumi.Input['IPSFirewallRuleGroupsArgs']] = None,
                 labels: Optional[pulumi.Input['IPSFirewallRuleLabelsArgs']] = None,
                 location_groups: Optional[pulumi.Input['IPSFirewallRuleLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['IPSFirewallRuleLocationsArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nw_service_groups: Optional[pulumi.Input['IPSFirewallRuleNwServiceGroupsArgs']] = None,
                 nw_services: Optional[pulumi.Input['IPSFirewallRuleNwServicesArgs']] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 source_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ip_groups: Optional[pulumi.Input['IPSFirewallRuleSrcIpGroupsArgs']] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input['IPSFirewallRuleSrcIpv6GroupsArgs']] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 threat_categories: Optional[pulumi.Input['IPSFirewallRuleThreatCategoriesArgs']] = None,
                 time_windows: Optional[pulumi.Input['IPSFirewallRuleTimeWindowsArgs']] = None,
                 users: Optional[pulumi.Input['IPSFirewallRuleUsersArgs']] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input['IPSFirewallRuleZpaAppSegmentArgs']]]] = None):
        """
        The set of arguments for constructing a IPSFirewallRule resource.
        :param pulumi.Input[builtins.int] order: (Integer) Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        :param pulumi.Input[builtins.str] action: (String) The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or blocking the traffic or bypassing the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BYPASS_IPS`
        :param pulumi.Input[builtins.bool] capture_pcap: (Boolean) Value that indicates whether packet capture (PCAP) is enabled or not
        :param pulumi.Input[builtins.bool] default_rule: (Boolean) Value that indicates whether the rule is the Default Cloud IPS Rule or not
        :param pulumi.Input['IPSFirewallRuleDepartmentsArgs'] departments: (List of Objects) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        :param pulumi.Input[builtins.str] description: (String) Enter additional notes or information. The description cannot exceed 10,240 characters.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_addresses: (Set of String) Destination IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific destination IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_countries: (Set of String) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
               **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_ip_categories: (Set of String)  identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        :param pulumi.Input['IPSFirewallRuleDestIpGroupsArgs'] dest_ip_groups: ** - (List of Objects) Any number of destination IP address groups that you want to control with this rule.
        :param pulumi.Input['IPSFirewallRuleDestIpv6GroupsArgs'] dest_ipv6_groups: list of destination ip groups
        :param pulumi.Input['IPSFirewallRuleDeviceGroupsArgs'] device_groups: (List of Objects) Device groups to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        :param pulumi.Input['IPSFirewallRuleDevicesArgs'] devices: (List of Objects) Devices to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        :param pulumi.Input[builtins.bool] enable_full_logging: (Integer) A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled, whereas a false value indicates that aggregate logging is enabled.
        :param pulumi.Input['IPSFirewallRuleGroupsArgs'] groups: (List of Objects) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input['IPSFirewallRuleLabelsArgs'] labels: (List of Objects) Labels that are applicable to the rule.
        :param pulumi.Input['IPSFirewallRuleLocationGroupsArgs'] location_groups: (List of Objects)You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input['IPSFirewallRuleLocationsArgs'] locations: (List of Objects) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[builtins.str] name: The name of the IPS Control rule
        :param pulumi.Input['IPSFirewallRuleNwServiceGroupsArgs'] nw_service_groups: (List of Objects) Any number of predefined or custom network service groups to which the rule applies.
        :param pulumi.Input['IPSFirewallRuleNwServicesArgs'] nw_services: (List of Objects) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        :param pulumi.Input[builtins.bool] predefined: (Boolean) A Boolean field that indicates that the rule is predefined by using a true value
        :param pulumi.Input[builtins.int] rank: (Integer) By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] res_categories: (Set of String) URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted to a specific URL category.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] source_countries: (Set of String) The countries of origin of traffic for which the rule is applicable. If not set, the rule is not restricted to specific source countries.
               **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        :param pulumi.Input['IPSFirewallRuleSrcIpGroupsArgs'] src_ip_groups: (List of Objects)Source IP address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IP address group.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] src_ips: (Set of String) Source IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific source IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        :param pulumi.Input['IPSFirewallRuleSrcIpv6GroupsArgs'] src_ipv6_groups: (List of Objects) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        :param pulumi.Input[builtins.str] state: (String) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        :param pulumi.Input['IPSFirewallRuleThreatCategoriesArgs'] threat_categories: (List of Objects) Advanced threat categories to which the rule applies
        :param pulumi.Input['IPSFirewallRuleTimeWindowsArgs'] time_windows: (List of Objects) You can manually select up to `1` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input['IPSFirewallRuleUsersArgs'] users: (List of Objects) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[Sequence[pulumi.Input['IPSFirewallRuleZpaAppSegmentArgs']]] zpa_app_segments: (List of Objects) The ZPA application segments to which the rule applies
        """
        pulumi.set(__self__, "order", order)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if capture_pcap is not None:
            pulumi.set(__self__, "capture_pcap", capture_pcap)
        if default_rule is not None:
            pulumi.set(__self__, "default_rule", default_rule)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dest_addresses is not None:
            pulumi.set(__self__, "dest_addresses", dest_addresses)
        if dest_countries is not None:
            pulumi.set(__self__, "dest_countries", dest_countries)
        if dest_ip_categories is not None:
            pulumi.set(__self__, "dest_ip_categories", dest_ip_categories)
        if dest_ip_groups is not None:
            pulumi.set(__self__, "dest_ip_groups", dest_ip_groups)
        if dest_ipv6_groups is not None:
            pulumi.set(__self__, "dest_ipv6_groups", dest_ipv6_groups)
        if device_groups is not None:
            pulumi.set(__self__, "device_groups", device_groups)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if enable_full_logging is not None:
            pulumi.set(__self__, "enable_full_logging", enable_full_logging)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nw_service_groups is not None:
            pulumi.set(__self__, "nw_service_groups", nw_service_groups)
        if nw_services is not None:
            pulumi.set(__self__, "nw_services", nw_services)
        if predefined is not None:
            pulumi.set(__self__, "predefined", predefined)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if res_categories is not None:
            pulumi.set(__self__, "res_categories", res_categories)
        if source_countries is not None:
            pulumi.set(__self__, "source_countries", source_countries)
        if src_ip_groups is not None:
            pulumi.set(__self__, "src_ip_groups", src_ip_groups)
        if src_ips is not None:
            pulumi.set(__self__, "src_ips", src_ips)
        if src_ipv6_groups is not None:
            pulumi.set(__self__, "src_ipv6_groups", src_ipv6_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if threat_categories is not None:
            pulumi.set(__self__, "threat_categories", threat_categories)
        if time_windows is not None:
            pulumi.set(__self__, "time_windows", time_windows)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if zpa_app_segments is not None:
            pulumi.set(__self__, "zpa_app_segments", zpa_app_segments)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[builtins.int]:
        """
        (Integer) Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or blocking the traffic or bypassing the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BYPASS_IPS`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="capturePcap")
    def capture_pcap(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (Boolean) Value that indicates whether packet capture (PCAP) is enabled or not
        """
        return pulumi.get(self, "capture_pcap")

    @capture_pcap.setter
    def capture_pcap(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "capture_pcap", value)

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (Boolean) Value that indicates whether the rule is the Default Cloud IPS Rule or not
        """
        return pulumi.get(self, "default_rule")

    @default_rule.setter
    def default_rule(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "default_rule", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['IPSFirewallRuleDepartmentsArgs']]:
        """
        (List of Objects) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['IPSFirewallRuleDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Enter additional notes or information. The description cannot exceed 10,240 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Set of String) Destination IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific destination IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        """
        return pulumi.get(self, "dest_addresses")

    @dest_addresses.setter
    def dest_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_addresses", value)

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Set of String) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
        **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        """
        return pulumi.get(self, "dest_countries")

    @dest_countries.setter
    def dest_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_countries", value)

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Set of String)  identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        """
        return pulumi.get(self, "dest_ip_categories")

    @dest_ip_categories.setter
    def dest_ip_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_ip_categories", value)

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> Optional[pulumi.Input['IPSFirewallRuleDestIpGroupsArgs']]:
        """
        ** - (List of Objects) Any number of destination IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "dest_ip_groups")

    @dest_ip_groups.setter
    def dest_ip_groups(self, value: Optional[pulumi.Input['IPSFirewallRuleDestIpGroupsArgs']]):
        pulumi.set(self, "dest_ip_groups", value)

    @property
    @pulumi.getter(name="destIpv6Groups")
    def dest_ipv6_groups(self) -> Optional[pulumi.Input['IPSFirewallRuleDestIpv6GroupsArgs']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "dest_ipv6_groups")

    @dest_ipv6_groups.setter
    def dest_ipv6_groups(self, value: Optional[pulumi.Input['IPSFirewallRuleDestIpv6GroupsArgs']]):
        pulumi.set(self, "dest_ipv6_groups", value)

    @property
    @pulumi.getter(name="deviceGroups")
    def device_groups(self) -> Optional[pulumi.Input['IPSFirewallRuleDeviceGroupsArgs']]:
        """
        (List of Objects) Device groups to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        """
        return pulumi.get(self, "device_groups")

    @device_groups.setter
    def device_groups(self, value: Optional[pulumi.Input['IPSFirewallRuleDeviceGroupsArgs']]):
        pulumi.set(self, "device_groups", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input['IPSFirewallRuleDevicesArgs']]:
        """
        (List of Objects) Devices to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input['IPSFirewallRuleDevicesArgs']]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="enableFullLogging")
    def enable_full_logging(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (Integer) A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled, whereas a false value indicates that aggregate logging is enabled.
        """
        return pulumi.get(self, "enable_full_logging")

    @enable_full_logging.setter
    def enable_full_logging(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_full_logging", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['IPSFirewallRuleGroupsArgs']]:
        """
        (List of Objects) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['IPSFirewallRuleGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['IPSFirewallRuleLabelsArgs']]:
        """
        (List of Objects) Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['IPSFirewallRuleLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['IPSFirewallRuleLocationGroupsArgs']]:
        """
        (List of Objects)You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['IPSFirewallRuleLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['IPSFirewallRuleLocationsArgs']]:
        """
        (List of Objects) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['IPSFirewallRuleLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the IPS Control rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> Optional[pulumi.Input['IPSFirewallRuleNwServiceGroupsArgs']]:
        """
        (List of Objects) Any number of predefined or custom network service groups to which the rule applies.
        """
        return pulumi.get(self, "nw_service_groups")

    @nw_service_groups.setter
    def nw_service_groups(self, value: Optional[pulumi.Input['IPSFirewallRuleNwServiceGroupsArgs']]):
        pulumi.set(self, "nw_service_groups", value)

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> Optional[pulumi.Input['IPSFirewallRuleNwServicesArgs']]:
        """
        (List of Objects) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        """
        return pulumi.get(self, "nw_services")

    @nw_services.setter
    def nw_services(self, value: Optional[pulumi.Input['IPSFirewallRuleNwServicesArgs']]):
        pulumi.set(self, "nw_services", value)

    @property
    @pulumi.getter
    def predefined(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (Boolean) A Boolean field that indicates that the rule is predefined by using a true value
        """
        return pulumi.get(self, "predefined")

    @predefined.setter
    def predefined(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "predefined", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        (Integer) By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="resCategories")
    def res_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Set of String) URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted to a specific URL category.
        """
        return pulumi.get(self, "res_categories")

    @res_categories.setter
    def res_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "res_categories", value)

    @property
    @pulumi.getter(name="sourceCountries")
    def source_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Set of String) The countries of origin of traffic for which the rule is applicable. If not set, the rule is not restricted to specific source countries.
        **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        """
        return pulumi.get(self, "source_countries")

    @source_countries.setter
    def source_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "source_countries", value)

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> Optional[pulumi.Input['IPSFirewallRuleSrcIpGroupsArgs']]:
        """
        (List of Objects)Source IP address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IP address group.
        """
        return pulumi.get(self, "src_ip_groups")

    @src_ip_groups.setter
    def src_ip_groups(self, value: Optional[pulumi.Input['IPSFirewallRuleSrcIpGroupsArgs']]):
        pulumi.set(self, "src_ip_groups", value)

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Set of String) Source IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific source IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        """
        return pulumi.get(self, "src_ips")

    @src_ips.setter
    def src_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "src_ips", value)

    @property
    @pulumi.getter(name="srcIpv6Groups")
    def src_ipv6_groups(self) -> Optional[pulumi.Input['IPSFirewallRuleSrcIpv6GroupsArgs']]:
        """
        (List of Objects) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        """
        return pulumi.get(self, "src_ipv6_groups")

    @src_ipv6_groups.setter
    def src_ipv6_groups(self, value: Optional[pulumi.Input['IPSFirewallRuleSrcIpv6GroupsArgs']]):
        pulumi.set(self, "src_ipv6_groups", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="threatCategories")
    def threat_categories(self) -> Optional[pulumi.Input['IPSFirewallRuleThreatCategoriesArgs']]:
        """
        (List of Objects) Advanced threat categories to which the rule applies
        """
        return pulumi.get(self, "threat_categories")

    @threat_categories.setter
    def threat_categories(self, value: Optional[pulumi.Input['IPSFirewallRuleThreatCategoriesArgs']]):
        pulumi.set(self, "threat_categories", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Optional[pulumi.Input['IPSFirewallRuleTimeWindowsArgs']]:
        """
        (List of Objects) You can manually select up to `1` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: Optional[pulumi.Input['IPSFirewallRuleTimeWindowsArgs']]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['IPSFirewallRuleUsersArgs']]:
        """
        (List of Objects) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['IPSFirewallRuleUsersArgs']]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="zpaAppSegments")
    def zpa_app_segments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IPSFirewallRuleZpaAppSegmentArgs']]]]:
        """
        (List of Objects) The ZPA application segments to which the rule applies
        """
        return pulumi.get(self, "zpa_app_segments")

    @zpa_app_segments.setter
    def zpa_app_segments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IPSFirewallRuleZpaAppSegmentArgs']]]]):
        pulumi.set(self, "zpa_app_segments", value)


@pulumi.input_type
class _IPSFirewallRuleState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 capture_pcap: Optional[pulumi.Input[builtins.bool]] = None,
                 default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 departments: Optional[pulumi.Input['IPSFirewallRuleDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input['IPSFirewallRuleDestIpGroupsArgs']] = None,
                 dest_ipv6_groups: Optional[pulumi.Input['IPSFirewallRuleDestIpv6GroupsArgs']] = None,
                 device_groups: Optional[pulumi.Input['IPSFirewallRuleDeviceGroupsArgs']] = None,
                 devices: Optional[pulumi.Input['IPSFirewallRuleDevicesArgs']] = None,
                 enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 groups: Optional[pulumi.Input['IPSFirewallRuleGroupsArgs']] = None,
                 labels: Optional[pulumi.Input['IPSFirewallRuleLabelsArgs']] = None,
                 location_groups: Optional[pulumi.Input['IPSFirewallRuleLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['IPSFirewallRuleLocationsArgs']] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nw_service_groups: Optional[pulumi.Input['IPSFirewallRuleNwServiceGroupsArgs']] = None,
                 nw_services: Optional[pulumi.Input['IPSFirewallRuleNwServicesArgs']] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 rule_id: Optional[pulumi.Input[builtins.int]] = None,
                 source_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ip_groups: Optional[pulumi.Input['IPSFirewallRuleSrcIpGroupsArgs']] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input['IPSFirewallRuleSrcIpv6GroupsArgs']] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 threat_categories: Optional[pulumi.Input['IPSFirewallRuleThreatCategoriesArgs']] = None,
                 time_windows: Optional[pulumi.Input['IPSFirewallRuleTimeWindowsArgs']] = None,
                 users: Optional[pulumi.Input['IPSFirewallRuleUsersArgs']] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input['IPSFirewallRuleZpaAppSegmentArgs']]]] = None):
        """
        Input properties used for looking up and filtering IPSFirewallRule resources.
        :param pulumi.Input[builtins.str] action: (String) The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or blocking the traffic or bypassing the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BYPASS_IPS`
        :param pulumi.Input[builtins.bool] capture_pcap: (Boolean) Value that indicates whether packet capture (PCAP) is enabled or not
        :param pulumi.Input[builtins.bool] default_rule: (Boolean) Value that indicates whether the rule is the Default Cloud IPS Rule or not
        :param pulumi.Input['IPSFirewallRuleDepartmentsArgs'] departments: (List of Objects) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        :param pulumi.Input[builtins.str] description: (String) Enter additional notes or information. The description cannot exceed 10,240 characters.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_addresses: (Set of String) Destination IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific destination IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_countries: (Set of String) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
               **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_ip_categories: (Set of String)  identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        :param pulumi.Input['IPSFirewallRuleDestIpGroupsArgs'] dest_ip_groups: ** - (List of Objects) Any number of destination IP address groups that you want to control with this rule.
        :param pulumi.Input['IPSFirewallRuleDestIpv6GroupsArgs'] dest_ipv6_groups: list of destination ip groups
        :param pulumi.Input['IPSFirewallRuleDeviceGroupsArgs'] device_groups: (List of Objects) Device groups to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        :param pulumi.Input['IPSFirewallRuleDevicesArgs'] devices: (List of Objects) Devices to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        :param pulumi.Input[builtins.bool] enable_full_logging: (Integer) A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled, whereas a false value indicates that aggregate logging is enabled.
        :param pulumi.Input['IPSFirewallRuleGroupsArgs'] groups: (List of Objects) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input['IPSFirewallRuleLabelsArgs'] labels: (List of Objects) Labels that are applicable to the rule.
        :param pulumi.Input['IPSFirewallRuleLocationGroupsArgs'] location_groups: (List of Objects)You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input['IPSFirewallRuleLocationsArgs'] locations: (List of Objects) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[builtins.str] name: The name of the IPS Control rule
        :param pulumi.Input['IPSFirewallRuleNwServiceGroupsArgs'] nw_service_groups: (List of Objects) Any number of predefined or custom network service groups to which the rule applies.
        :param pulumi.Input['IPSFirewallRuleNwServicesArgs'] nw_services: (List of Objects) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        :param pulumi.Input[builtins.int] order: (Integer) Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        :param pulumi.Input[builtins.bool] predefined: (Boolean) A Boolean field that indicates that the rule is predefined by using a true value
        :param pulumi.Input[builtins.int] rank: (Integer) By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] res_categories: (Set of String) URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted to a specific URL category.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] source_countries: (Set of String) The countries of origin of traffic for which the rule is applicable. If not set, the rule is not restricted to specific source countries.
               **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        :param pulumi.Input['IPSFirewallRuleSrcIpGroupsArgs'] src_ip_groups: (List of Objects)Source IP address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IP address group.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] src_ips: (Set of String) Source IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific source IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        :param pulumi.Input['IPSFirewallRuleSrcIpv6GroupsArgs'] src_ipv6_groups: (List of Objects) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        :param pulumi.Input[builtins.str] state: (String) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        :param pulumi.Input['IPSFirewallRuleThreatCategoriesArgs'] threat_categories: (List of Objects) Advanced threat categories to which the rule applies
        :param pulumi.Input['IPSFirewallRuleTimeWindowsArgs'] time_windows: (List of Objects) You can manually select up to `1` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input['IPSFirewallRuleUsersArgs'] users: (List of Objects) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[Sequence[pulumi.Input['IPSFirewallRuleZpaAppSegmentArgs']]] zpa_app_segments: (List of Objects) The ZPA application segments to which the rule applies
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if capture_pcap is not None:
            pulumi.set(__self__, "capture_pcap", capture_pcap)
        if default_rule is not None:
            pulumi.set(__self__, "default_rule", default_rule)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dest_addresses is not None:
            pulumi.set(__self__, "dest_addresses", dest_addresses)
        if dest_countries is not None:
            pulumi.set(__self__, "dest_countries", dest_countries)
        if dest_ip_categories is not None:
            pulumi.set(__self__, "dest_ip_categories", dest_ip_categories)
        if dest_ip_groups is not None:
            pulumi.set(__self__, "dest_ip_groups", dest_ip_groups)
        if dest_ipv6_groups is not None:
            pulumi.set(__self__, "dest_ipv6_groups", dest_ipv6_groups)
        if device_groups is not None:
            pulumi.set(__self__, "device_groups", device_groups)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if enable_full_logging is not None:
            pulumi.set(__self__, "enable_full_logging", enable_full_logging)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nw_service_groups is not None:
            pulumi.set(__self__, "nw_service_groups", nw_service_groups)
        if nw_services is not None:
            pulumi.set(__self__, "nw_services", nw_services)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if predefined is not None:
            pulumi.set(__self__, "predefined", predefined)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if res_categories is not None:
            pulumi.set(__self__, "res_categories", res_categories)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if source_countries is not None:
            pulumi.set(__self__, "source_countries", source_countries)
        if src_ip_groups is not None:
            pulumi.set(__self__, "src_ip_groups", src_ip_groups)
        if src_ips is not None:
            pulumi.set(__self__, "src_ips", src_ips)
        if src_ipv6_groups is not None:
            pulumi.set(__self__, "src_ipv6_groups", src_ipv6_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if threat_categories is not None:
            pulumi.set(__self__, "threat_categories", threat_categories)
        if time_windows is not None:
            pulumi.set(__self__, "time_windows", time_windows)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if zpa_app_segments is not None:
            pulumi.set(__self__, "zpa_app_segments", zpa_app_segments)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or blocking the traffic or bypassing the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BYPASS_IPS`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="capturePcap")
    def capture_pcap(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (Boolean) Value that indicates whether packet capture (PCAP) is enabled or not
        """
        return pulumi.get(self, "capture_pcap")

    @capture_pcap.setter
    def capture_pcap(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "capture_pcap", value)

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (Boolean) Value that indicates whether the rule is the Default Cloud IPS Rule or not
        """
        return pulumi.get(self, "default_rule")

    @default_rule.setter
    def default_rule(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "default_rule", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['IPSFirewallRuleDepartmentsArgs']]:
        """
        (List of Objects) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['IPSFirewallRuleDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Enter additional notes or information. The description cannot exceed 10,240 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Set of String) Destination IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific destination IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        """
        return pulumi.get(self, "dest_addresses")

    @dest_addresses.setter
    def dest_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_addresses", value)

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Set of String) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
        **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        """
        return pulumi.get(self, "dest_countries")

    @dest_countries.setter
    def dest_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_countries", value)

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Set of String)  identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        """
        return pulumi.get(self, "dest_ip_categories")

    @dest_ip_categories.setter
    def dest_ip_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dest_ip_categories", value)

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> Optional[pulumi.Input['IPSFirewallRuleDestIpGroupsArgs']]:
        """
        ** - (List of Objects) Any number of destination IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "dest_ip_groups")

    @dest_ip_groups.setter
    def dest_ip_groups(self, value: Optional[pulumi.Input['IPSFirewallRuleDestIpGroupsArgs']]):
        pulumi.set(self, "dest_ip_groups", value)

    @property
    @pulumi.getter(name="destIpv6Groups")
    def dest_ipv6_groups(self) -> Optional[pulumi.Input['IPSFirewallRuleDestIpv6GroupsArgs']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "dest_ipv6_groups")

    @dest_ipv6_groups.setter
    def dest_ipv6_groups(self, value: Optional[pulumi.Input['IPSFirewallRuleDestIpv6GroupsArgs']]):
        pulumi.set(self, "dest_ipv6_groups", value)

    @property
    @pulumi.getter(name="deviceGroups")
    def device_groups(self) -> Optional[pulumi.Input['IPSFirewallRuleDeviceGroupsArgs']]:
        """
        (List of Objects) Device groups to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        """
        return pulumi.get(self, "device_groups")

    @device_groups.setter
    def device_groups(self, value: Optional[pulumi.Input['IPSFirewallRuleDeviceGroupsArgs']]):
        pulumi.set(self, "device_groups", value)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input['IPSFirewallRuleDevicesArgs']]:
        """
        (List of Objects) Devices to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        """
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input['IPSFirewallRuleDevicesArgs']]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="enableFullLogging")
    def enable_full_logging(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (Integer) A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled, whereas a false value indicates that aggregate logging is enabled.
        """
        return pulumi.get(self, "enable_full_logging")

    @enable_full_logging.setter
    def enable_full_logging(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_full_logging", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['IPSFirewallRuleGroupsArgs']]:
        """
        (List of Objects) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['IPSFirewallRuleGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['IPSFirewallRuleLabelsArgs']]:
        """
        (List of Objects) Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['IPSFirewallRuleLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['IPSFirewallRuleLocationGroupsArgs']]:
        """
        (List of Objects)You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['IPSFirewallRuleLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['IPSFirewallRuleLocationsArgs']]:
        """
        (List of Objects) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['IPSFirewallRuleLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the IPS Control rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> Optional[pulumi.Input['IPSFirewallRuleNwServiceGroupsArgs']]:
        """
        (List of Objects) Any number of predefined or custom network service groups to which the rule applies.
        """
        return pulumi.get(self, "nw_service_groups")

    @nw_service_groups.setter
    def nw_service_groups(self, value: Optional[pulumi.Input['IPSFirewallRuleNwServiceGroupsArgs']]):
        pulumi.set(self, "nw_service_groups", value)

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> Optional[pulumi.Input['IPSFirewallRuleNwServicesArgs']]:
        """
        (List of Objects) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        """
        return pulumi.get(self, "nw_services")

    @nw_services.setter
    def nw_services(self, value: Optional[pulumi.Input['IPSFirewallRuleNwServicesArgs']]):
        pulumi.set(self, "nw_services", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        (Integer) Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def predefined(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        (Boolean) A Boolean field that indicates that the rule is predefined by using a true value
        """
        return pulumi.get(self, "predefined")

    @predefined.setter
    def predefined(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "predefined", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        (Integer) By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="resCategories")
    def res_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Set of String) URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted to a specific URL category.
        """
        return pulumi.get(self, "res_categories")

    @res_categories.setter
    def res_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "res_categories", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="sourceCountries")
    def source_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Set of String) The countries of origin of traffic for which the rule is applicable. If not set, the rule is not restricted to specific source countries.
        **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        """
        return pulumi.get(self, "source_countries")

    @source_countries.setter
    def source_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "source_countries", value)

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> Optional[pulumi.Input['IPSFirewallRuleSrcIpGroupsArgs']]:
        """
        (List of Objects)Source IP address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IP address group.
        """
        return pulumi.get(self, "src_ip_groups")

    @src_ip_groups.setter
    def src_ip_groups(self, value: Optional[pulumi.Input['IPSFirewallRuleSrcIpGroupsArgs']]):
        pulumi.set(self, "src_ip_groups", value)

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Set of String) Source IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific source IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        """
        return pulumi.get(self, "src_ips")

    @src_ips.setter
    def src_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "src_ips", value)

    @property
    @pulumi.getter(name="srcIpv6Groups")
    def src_ipv6_groups(self) -> Optional[pulumi.Input['IPSFirewallRuleSrcIpv6GroupsArgs']]:
        """
        (List of Objects) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        """
        return pulumi.get(self, "src_ipv6_groups")

    @src_ipv6_groups.setter
    def src_ipv6_groups(self, value: Optional[pulumi.Input['IPSFirewallRuleSrcIpv6GroupsArgs']]):
        pulumi.set(self, "src_ipv6_groups", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="threatCategories")
    def threat_categories(self) -> Optional[pulumi.Input['IPSFirewallRuleThreatCategoriesArgs']]:
        """
        (List of Objects) Advanced threat categories to which the rule applies
        """
        return pulumi.get(self, "threat_categories")

    @threat_categories.setter
    def threat_categories(self, value: Optional[pulumi.Input['IPSFirewallRuleThreatCategoriesArgs']]):
        pulumi.set(self, "threat_categories", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Optional[pulumi.Input['IPSFirewallRuleTimeWindowsArgs']]:
        """
        (List of Objects) You can manually select up to `1` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: Optional[pulumi.Input['IPSFirewallRuleTimeWindowsArgs']]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['IPSFirewallRuleUsersArgs']]:
        """
        (List of Objects) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['IPSFirewallRuleUsersArgs']]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="zpaAppSegments")
    def zpa_app_segments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IPSFirewallRuleZpaAppSegmentArgs']]]]:
        """
        (List of Objects) The ZPA application segments to which the rule applies
        """
        return pulumi.get(self, "zpa_app_segments")

    @zpa_app_segments.setter
    def zpa_app_segments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IPSFirewallRuleZpaAppSegmentArgs']]]]):
        pulumi.set(self, "zpa_app_segments", value)


@pulumi.type_token("zia:index/iPSFirewallRule:IPSFirewallRule")
class IPSFirewallRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 capture_pcap: Optional[pulumi.Input[builtins.bool]] = None,
                 default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 departments: Optional[pulumi.Input[Union['IPSFirewallRuleDepartmentsArgs', 'IPSFirewallRuleDepartmentsArgsDict']]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input[Union['IPSFirewallRuleDestIpGroupsArgs', 'IPSFirewallRuleDestIpGroupsArgsDict']]] = None,
                 dest_ipv6_groups: Optional[pulumi.Input[Union['IPSFirewallRuleDestIpv6GroupsArgs', 'IPSFirewallRuleDestIpv6GroupsArgsDict']]] = None,
                 device_groups: Optional[pulumi.Input[Union['IPSFirewallRuleDeviceGroupsArgs', 'IPSFirewallRuleDeviceGroupsArgsDict']]] = None,
                 devices: Optional[pulumi.Input[Union['IPSFirewallRuleDevicesArgs', 'IPSFirewallRuleDevicesArgsDict']]] = None,
                 enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 groups: Optional[pulumi.Input[Union['IPSFirewallRuleGroupsArgs', 'IPSFirewallRuleGroupsArgsDict']]] = None,
                 labels: Optional[pulumi.Input[Union['IPSFirewallRuleLabelsArgs', 'IPSFirewallRuleLabelsArgsDict']]] = None,
                 location_groups: Optional[pulumi.Input[Union['IPSFirewallRuleLocationGroupsArgs', 'IPSFirewallRuleLocationGroupsArgsDict']]] = None,
                 locations: Optional[pulumi.Input[Union['IPSFirewallRuleLocationsArgs', 'IPSFirewallRuleLocationsArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nw_service_groups: Optional[pulumi.Input[Union['IPSFirewallRuleNwServiceGroupsArgs', 'IPSFirewallRuleNwServiceGroupsArgsDict']]] = None,
                 nw_services: Optional[pulumi.Input[Union['IPSFirewallRuleNwServicesArgs', 'IPSFirewallRuleNwServicesArgsDict']]] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 source_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ip_groups: Optional[pulumi.Input[Union['IPSFirewallRuleSrcIpGroupsArgs', 'IPSFirewallRuleSrcIpGroupsArgsDict']]] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input[Union['IPSFirewallRuleSrcIpv6GroupsArgs', 'IPSFirewallRuleSrcIpv6GroupsArgsDict']]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 threat_categories: Optional[pulumi.Input[Union['IPSFirewallRuleThreatCategoriesArgs', 'IPSFirewallRuleThreatCategoriesArgsDict']]] = None,
                 time_windows: Optional[pulumi.Input[Union['IPSFirewallRuleTimeWindowsArgs', 'IPSFirewallRuleTimeWindowsArgsDict']]] = None,
                 users: Optional[pulumi.Input[Union['IPSFirewallRuleUsersArgs', 'IPSFirewallRuleUsersArgsDict']]] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IPSFirewallRuleZpaAppSegmentArgs', 'IPSFirewallRuleZpaAppSegmentArgsDict']]]]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zia/ips-control-policy#/firewallIpsRules-get)
        * [API documentation](https://help.zscaler.com/zia/configuring-ips-control-policy)

        The **zia_firewall_ips_rule** resource allows the creation and management of ZIA Cloud Firewall IPS rules in the Zscaler Internet Access.

        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] action: (String) The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or blocking the traffic or bypassing the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BYPASS_IPS`
        :param pulumi.Input[builtins.bool] capture_pcap: (Boolean) Value that indicates whether packet capture (PCAP) is enabled or not
        :param pulumi.Input[builtins.bool] default_rule: (Boolean) Value that indicates whether the rule is the Default Cloud IPS Rule or not
        :param pulumi.Input[Union['IPSFirewallRuleDepartmentsArgs', 'IPSFirewallRuleDepartmentsArgsDict']] departments: (List of Objects) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        :param pulumi.Input[builtins.str] description: (String) Enter additional notes or information. The description cannot exceed 10,240 characters.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_addresses: (Set of String) Destination IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific destination IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_countries: (Set of String) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
               **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_ip_categories: (Set of String)  identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        :param pulumi.Input[Union['IPSFirewallRuleDestIpGroupsArgs', 'IPSFirewallRuleDestIpGroupsArgsDict']] dest_ip_groups: ** - (List of Objects) Any number of destination IP address groups that you want to control with this rule.
        :param pulumi.Input[Union['IPSFirewallRuleDestIpv6GroupsArgs', 'IPSFirewallRuleDestIpv6GroupsArgsDict']] dest_ipv6_groups: list of destination ip groups
        :param pulumi.Input[Union['IPSFirewallRuleDeviceGroupsArgs', 'IPSFirewallRuleDeviceGroupsArgsDict']] device_groups: (List of Objects) Device groups to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        :param pulumi.Input[Union['IPSFirewallRuleDevicesArgs', 'IPSFirewallRuleDevicesArgsDict']] devices: (List of Objects) Devices to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        :param pulumi.Input[builtins.bool] enable_full_logging: (Integer) A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled, whereas a false value indicates that aggregate logging is enabled.
        :param pulumi.Input[Union['IPSFirewallRuleGroupsArgs', 'IPSFirewallRuleGroupsArgsDict']] groups: (List of Objects) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[Union['IPSFirewallRuleLabelsArgs', 'IPSFirewallRuleLabelsArgsDict']] labels: (List of Objects) Labels that are applicable to the rule.
        :param pulumi.Input[Union['IPSFirewallRuleLocationGroupsArgs', 'IPSFirewallRuleLocationGroupsArgsDict']] location_groups: (List of Objects)You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input[Union['IPSFirewallRuleLocationsArgs', 'IPSFirewallRuleLocationsArgsDict']] locations: (List of Objects) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[builtins.str] name: The name of the IPS Control rule
        :param pulumi.Input[Union['IPSFirewallRuleNwServiceGroupsArgs', 'IPSFirewallRuleNwServiceGroupsArgsDict']] nw_service_groups: (List of Objects) Any number of predefined or custom network service groups to which the rule applies.
        :param pulumi.Input[Union['IPSFirewallRuleNwServicesArgs', 'IPSFirewallRuleNwServicesArgsDict']] nw_services: (List of Objects) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        :param pulumi.Input[builtins.int] order: (Integer) Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        :param pulumi.Input[builtins.bool] predefined: (Boolean) A Boolean field that indicates that the rule is predefined by using a true value
        :param pulumi.Input[builtins.int] rank: (Integer) By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] res_categories: (Set of String) URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted to a specific URL category.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] source_countries: (Set of String) The countries of origin of traffic for which the rule is applicable. If not set, the rule is not restricted to specific source countries.
               **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        :param pulumi.Input[Union['IPSFirewallRuleSrcIpGroupsArgs', 'IPSFirewallRuleSrcIpGroupsArgsDict']] src_ip_groups: (List of Objects)Source IP address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IP address group.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] src_ips: (Set of String) Source IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific source IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        :param pulumi.Input[Union['IPSFirewallRuleSrcIpv6GroupsArgs', 'IPSFirewallRuleSrcIpv6GroupsArgsDict']] src_ipv6_groups: (List of Objects) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        :param pulumi.Input[builtins.str] state: (String) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        :param pulumi.Input[Union['IPSFirewallRuleThreatCategoriesArgs', 'IPSFirewallRuleThreatCategoriesArgsDict']] threat_categories: (List of Objects) Advanced threat categories to which the rule applies
        :param pulumi.Input[Union['IPSFirewallRuleTimeWindowsArgs', 'IPSFirewallRuleTimeWindowsArgsDict']] time_windows: (List of Objects) You can manually select up to `1` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input[Union['IPSFirewallRuleUsersArgs', 'IPSFirewallRuleUsersArgsDict']] users: (List of Objects) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IPSFirewallRuleZpaAppSegmentArgs', 'IPSFirewallRuleZpaAppSegmentArgsDict']]]] zpa_app_segments: (List of Objects) The ZPA application segments to which the rule applies
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IPSFirewallRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zia/ips-control-policy#/firewallIpsRules-get)
        * [API documentation](https://help.zscaler.com/zia/configuring-ips-control-policy)

        The **zia_firewall_ips_rule** resource allows the creation and management of ZIA Cloud Firewall IPS rules in the Zscaler Internet Access.

        ## Example Usage

        :param str resource_name: The name of the resource.
        :param IPSFirewallRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IPSFirewallRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 capture_pcap: Optional[pulumi.Input[builtins.bool]] = None,
                 default_rule: Optional[pulumi.Input[builtins.bool]] = None,
                 departments: Optional[pulumi.Input[Union['IPSFirewallRuleDepartmentsArgs', 'IPSFirewallRuleDepartmentsArgsDict']]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input[Union['IPSFirewallRuleDestIpGroupsArgs', 'IPSFirewallRuleDestIpGroupsArgsDict']]] = None,
                 dest_ipv6_groups: Optional[pulumi.Input[Union['IPSFirewallRuleDestIpv6GroupsArgs', 'IPSFirewallRuleDestIpv6GroupsArgsDict']]] = None,
                 device_groups: Optional[pulumi.Input[Union['IPSFirewallRuleDeviceGroupsArgs', 'IPSFirewallRuleDeviceGroupsArgsDict']]] = None,
                 devices: Optional[pulumi.Input[Union['IPSFirewallRuleDevicesArgs', 'IPSFirewallRuleDevicesArgsDict']]] = None,
                 enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
                 groups: Optional[pulumi.Input[Union['IPSFirewallRuleGroupsArgs', 'IPSFirewallRuleGroupsArgsDict']]] = None,
                 labels: Optional[pulumi.Input[Union['IPSFirewallRuleLabelsArgs', 'IPSFirewallRuleLabelsArgsDict']]] = None,
                 location_groups: Optional[pulumi.Input[Union['IPSFirewallRuleLocationGroupsArgs', 'IPSFirewallRuleLocationGroupsArgsDict']]] = None,
                 locations: Optional[pulumi.Input[Union['IPSFirewallRuleLocationsArgs', 'IPSFirewallRuleLocationsArgsDict']]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 nw_service_groups: Optional[pulumi.Input[Union['IPSFirewallRuleNwServiceGroupsArgs', 'IPSFirewallRuleNwServiceGroupsArgsDict']]] = None,
                 nw_services: Optional[pulumi.Input[Union['IPSFirewallRuleNwServicesArgs', 'IPSFirewallRuleNwServicesArgsDict']]] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 predefined: Optional[pulumi.Input[builtins.bool]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 source_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ip_groups: Optional[pulumi.Input[Union['IPSFirewallRuleSrcIpGroupsArgs', 'IPSFirewallRuleSrcIpGroupsArgsDict']]] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 src_ipv6_groups: Optional[pulumi.Input[Union['IPSFirewallRuleSrcIpv6GroupsArgs', 'IPSFirewallRuleSrcIpv6GroupsArgsDict']]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 threat_categories: Optional[pulumi.Input[Union['IPSFirewallRuleThreatCategoriesArgs', 'IPSFirewallRuleThreatCategoriesArgsDict']]] = None,
                 time_windows: Optional[pulumi.Input[Union['IPSFirewallRuleTimeWindowsArgs', 'IPSFirewallRuleTimeWindowsArgsDict']]] = None,
                 users: Optional[pulumi.Input[Union['IPSFirewallRuleUsersArgs', 'IPSFirewallRuleUsersArgsDict']]] = None,
                 zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IPSFirewallRuleZpaAppSegmentArgs', 'IPSFirewallRuleZpaAppSegmentArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IPSFirewallRuleArgs.__new__(IPSFirewallRuleArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["capture_pcap"] = capture_pcap
            __props__.__dict__["default_rule"] = default_rule
            __props__.__dict__["departments"] = departments
            __props__.__dict__["description"] = description
            __props__.__dict__["dest_addresses"] = dest_addresses
            __props__.__dict__["dest_countries"] = dest_countries
            __props__.__dict__["dest_ip_categories"] = dest_ip_categories
            __props__.__dict__["dest_ip_groups"] = dest_ip_groups
            __props__.__dict__["dest_ipv6_groups"] = dest_ipv6_groups
            __props__.__dict__["device_groups"] = device_groups
            __props__.__dict__["devices"] = devices
            __props__.__dict__["enable_full_logging"] = enable_full_logging
            __props__.__dict__["groups"] = groups
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location_groups"] = location_groups
            __props__.__dict__["locations"] = locations
            __props__.__dict__["name"] = name
            __props__.__dict__["nw_service_groups"] = nw_service_groups
            __props__.__dict__["nw_services"] = nw_services
            if order is None and not opts.urn:
                raise TypeError("Missing required property 'order'")
            __props__.__dict__["order"] = order
            __props__.__dict__["predefined"] = predefined
            __props__.__dict__["rank"] = rank
            __props__.__dict__["res_categories"] = res_categories
            __props__.__dict__["source_countries"] = source_countries
            __props__.__dict__["src_ip_groups"] = src_ip_groups
            __props__.__dict__["src_ips"] = src_ips
            __props__.__dict__["src_ipv6_groups"] = src_ipv6_groups
            __props__.__dict__["state"] = state
            __props__.__dict__["threat_categories"] = threat_categories
            __props__.__dict__["time_windows"] = time_windows
            __props__.__dict__["users"] = users
            __props__.__dict__["zpa_app_segments"] = zpa_app_segments
            __props__.__dict__["rule_id"] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="zia:index/firewallIPSRule:FirewallIPSRule")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(IPSFirewallRule, __self__).__init__(
            'zia:index/iPSFirewallRule:IPSFirewallRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[builtins.str]] = None,
            capture_pcap: Optional[pulumi.Input[builtins.bool]] = None,
            default_rule: Optional[pulumi.Input[builtins.bool]] = None,
            departments: Optional[pulumi.Input[Union['IPSFirewallRuleDepartmentsArgs', 'IPSFirewallRuleDepartmentsArgsDict']]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dest_ip_groups: Optional[pulumi.Input[Union['IPSFirewallRuleDestIpGroupsArgs', 'IPSFirewallRuleDestIpGroupsArgsDict']]] = None,
            dest_ipv6_groups: Optional[pulumi.Input[Union['IPSFirewallRuleDestIpv6GroupsArgs', 'IPSFirewallRuleDestIpv6GroupsArgsDict']]] = None,
            device_groups: Optional[pulumi.Input[Union['IPSFirewallRuleDeviceGroupsArgs', 'IPSFirewallRuleDeviceGroupsArgsDict']]] = None,
            devices: Optional[pulumi.Input[Union['IPSFirewallRuleDevicesArgs', 'IPSFirewallRuleDevicesArgsDict']]] = None,
            enable_full_logging: Optional[pulumi.Input[builtins.bool]] = None,
            groups: Optional[pulumi.Input[Union['IPSFirewallRuleGroupsArgs', 'IPSFirewallRuleGroupsArgsDict']]] = None,
            labels: Optional[pulumi.Input[Union['IPSFirewallRuleLabelsArgs', 'IPSFirewallRuleLabelsArgsDict']]] = None,
            location_groups: Optional[pulumi.Input[Union['IPSFirewallRuleLocationGroupsArgs', 'IPSFirewallRuleLocationGroupsArgsDict']]] = None,
            locations: Optional[pulumi.Input[Union['IPSFirewallRuleLocationsArgs', 'IPSFirewallRuleLocationsArgsDict']]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            nw_service_groups: Optional[pulumi.Input[Union['IPSFirewallRuleNwServiceGroupsArgs', 'IPSFirewallRuleNwServiceGroupsArgsDict']]] = None,
            nw_services: Optional[pulumi.Input[Union['IPSFirewallRuleNwServicesArgs', 'IPSFirewallRuleNwServicesArgsDict']]] = None,
            order: Optional[pulumi.Input[builtins.int]] = None,
            predefined: Optional[pulumi.Input[builtins.bool]] = None,
            rank: Optional[pulumi.Input[builtins.int]] = None,
            res_categories: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            rule_id: Optional[pulumi.Input[builtins.int]] = None,
            source_countries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            src_ip_groups: Optional[pulumi.Input[Union['IPSFirewallRuleSrcIpGroupsArgs', 'IPSFirewallRuleSrcIpGroupsArgsDict']]] = None,
            src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            src_ipv6_groups: Optional[pulumi.Input[Union['IPSFirewallRuleSrcIpv6GroupsArgs', 'IPSFirewallRuleSrcIpv6GroupsArgsDict']]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            threat_categories: Optional[pulumi.Input[Union['IPSFirewallRuleThreatCategoriesArgs', 'IPSFirewallRuleThreatCategoriesArgsDict']]] = None,
            time_windows: Optional[pulumi.Input[Union['IPSFirewallRuleTimeWindowsArgs', 'IPSFirewallRuleTimeWindowsArgsDict']]] = None,
            users: Optional[pulumi.Input[Union['IPSFirewallRuleUsersArgs', 'IPSFirewallRuleUsersArgsDict']]] = None,
            zpa_app_segments: Optional[pulumi.Input[Sequence[pulumi.Input[Union['IPSFirewallRuleZpaAppSegmentArgs', 'IPSFirewallRuleZpaAppSegmentArgsDict']]]]] = None) -> 'IPSFirewallRule':
        """
        Get an existing IPSFirewallRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] action: (String) The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or blocking the traffic or bypassing the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BYPASS_IPS`
        :param pulumi.Input[builtins.bool] capture_pcap: (Boolean) Value that indicates whether packet capture (PCAP) is enabled or not
        :param pulumi.Input[builtins.bool] default_rule: (Boolean) Value that indicates whether the rule is the Default Cloud IPS Rule or not
        :param pulumi.Input[Union['IPSFirewallRuleDepartmentsArgs', 'IPSFirewallRuleDepartmentsArgsDict']] departments: (List of Objects) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        :param pulumi.Input[builtins.str] description: (String) Enter additional notes or information. The description cannot exceed 10,240 characters.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_addresses: (Set of String) Destination IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific destination IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_countries: (Set of String) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
               **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dest_ip_categories: (Set of String)  identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        :param pulumi.Input[Union['IPSFirewallRuleDestIpGroupsArgs', 'IPSFirewallRuleDestIpGroupsArgsDict']] dest_ip_groups: ** - (List of Objects) Any number of destination IP address groups that you want to control with this rule.
        :param pulumi.Input[Union['IPSFirewallRuleDestIpv6GroupsArgs', 'IPSFirewallRuleDestIpv6GroupsArgsDict']] dest_ipv6_groups: list of destination ip groups
        :param pulumi.Input[Union['IPSFirewallRuleDeviceGroupsArgs', 'IPSFirewallRuleDeviceGroupsArgsDict']] device_groups: (List of Objects) Device groups to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        :param pulumi.Input[Union['IPSFirewallRuleDevicesArgs', 'IPSFirewallRuleDevicesArgsDict']] devices: (List of Objects) Devices to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        :param pulumi.Input[builtins.bool] enable_full_logging: (Integer) A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled, whereas a false value indicates that aggregate logging is enabled.
        :param pulumi.Input[Union['IPSFirewallRuleGroupsArgs', 'IPSFirewallRuleGroupsArgsDict']] groups: (List of Objects) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[Union['IPSFirewallRuleLabelsArgs', 'IPSFirewallRuleLabelsArgsDict']] labels: (List of Objects) Labels that are applicable to the rule.
        :param pulumi.Input[Union['IPSFirewallRuleLocationGroupsArgs', 'IPSFirewallRuleLocationGroupsArgsDict']] location_groups: (List of Objects)You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input[Union['IPSFirewallRuleLocationsArgs', 'IPSFirewallRuleLocationsArgsDict']] locations: (List of Objects) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[builtins.str] name: The name of the IPS Control rule
        :param pulumi.Input[Union['IPSFirewallRuleNwServiceGroupsArgs', 'IPSFirewallRuleNwServiceGroupsArgsDict']] nw_service_groups: (List of Objects) Any number of predefined or custom network service groups to which the rule applies.
        :param pulumi.Input[Union['IPSFirewallRuleNwServicesArgs', 'IPSFirewallRuleNwServicesArgsDict']] nw_services: (List of Objects) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        :param pulumi.Input[builtins.int] order: (Integer) Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        :param pulumi.Input[builtins.bool] predefined: (Boolean) A Boolean field that indicates that the rule is predefined by using a true value
        :param pulumi.Input[builtins.int] rank: (Integer) By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] res_categories: (Set of String) URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted to a specific URL category.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] source_countries: (Set of String) The countries of origin of traffic for which the rule is applicable. If not set, the rule is not restricted to specific source countries.
               **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        :param pulumi.Input[Union['IPSFirewallRuleSrcIpGroupsArgs', 'IPSFirewallRuleSrcIpGroupsArgsDict']] src_ip_groups: (List of Objects)Source IP address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IP address group.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] src_ips: (Set of String) Source IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific source IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        :param pulumi.Input[Union['IPSFirewallRuleSrcIpv6GroupsArgs', 'IPSFirewallRuleSrcIpv6GroupsArgsDict']] src_ipv6_groups: (List of Objects) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        :param pulumi.Input[builtins.str] state: (String) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        :param pulumi.Input[Union['IPSFirewallRuleThreatCategoriesArgs', 'IPSFirewallRuleThreatCategoriesArgsDict']] threat_categories: (List of Objects) Advanced threat categories to which the rule applies
        :param pulumi.Input[Union['IPSFirewallRuleTimeWindowsArgs', 'IPSFirewallRuleTimeWindowsArgsDict']] time_windows: (List of Objects) You can manually select up to `1` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input[Union['IPSFirewallRuleUsersArgs', 'IPSFirewallRuleUsersArgsDict']] users: (List of Objects) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[Sequence[pulumi.Input[Union['IPSFirewallRuleZpaAppSegmentArgs', 'IPSFirewallRuleZpaAppSegmentArgsDict']]]] zpa_app_segments: (List of Objects) The ZPA application segments to which the rule applies
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IPSFirewallRuleState.__new__(_IPSFirewallRuleState)

        __props__.__dict__["action"] = action
        __props__.__dict__["capture_pcap"] = capture_pcap
        __props__.__dict__["default_rule"] = default_rule
        __props__.__dict__["departments"] = departments
        __props__.__dict__["description"] = description
        __props__.__dict__["dest_addresses"] = dest_addresses
        __props__.__dict__["dest_countries"] = dest_countries
        __props__.__dict__["dest_ip_categories"] = dest_ip_categories
        __props__.__dict__["dest_ip_groups"] = dest_ip_groups
        __props__.__dict__["dest_ipv6_groups"] = dest_ipv6_groups
        __props__.__dict__["device_groups"] = device_groups
        __props__.__dict__["devices"] = devices
        __props__.__dict__["enable_full_logging"] = enable_full_logging
        __props__.__dict__["groups"] = groups
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location_groups"] = location_groups
        __props__.__dict__["locations"] = locations
        __props__.__dict__["name"] = name
        __props__.__dict__["nw_service_groups"] = nw_service_groups
        __props__.__dict__["nw_services"] = nw_services
        __props__.__dict__["order"] = order
        __props__.__dict__["predefined"] = predefined
        __props__.__dict__["rank"] = rank
        __props__.__dict__["res_categories"] = res_categories
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["source_countries"] = source_countries
        __props__.__dict__["src_ip_groups"] = src_ip_groups
        __props__.__dict__["src_ips"] = src_ips
        __props__.__dict__["src_ipv6_groups"] = src_ipv6_groups
        __props__.__dict__["state"] = state
        __props__.__dict__["threat_categories"] = threat_categories
        __props__.__dict__["time_windows"] = time_windows
        __props__.__dict__["users"] = users
        __props__.__dict__["zpa_app_segments"] = zpa_app_segments
        return IPSFirewallRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) The action configured for the rule that must take place if the traffic matches the rule criteria, such as allowing or blocking the traffic or bypassing the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BYPASS_IPS`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="capturePcap")
    def capture_pcap(self) -> pulumi.Output[builtins.bool]:
        """
        (Boolean) Value that indicates whether packet capture (PCAP) is enabled or not
        """
        return pulumi.get(self, "capture_pcap")

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        (Boolean) Value that indicates whether the rule is the Default Cloud IPS Rule or not
        """
        return pulumi.get(self, "default_rule")

    @property
    @pulumi.getter
    def departments(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleDepartments']]:
        """
        (List of Objects) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        """
        return pulumi.get(self, "departments")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Enter additional notes or information. The description cannot exceed 10,240 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        (Set of String) Destination IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific destination IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        """
        return pulumi.get(self, "dest_addresses")

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        (Set of String) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
        **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        """
        return pulumi.get(self, "dest_countries")

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        (Set of String)  identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        """
        return pulumi.get(self, "dest_ip_categories")

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleDestIpGroups']]:
        """
        ** - (List of Objects) Any number of destination IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "dest_ip_groups")

    @property
    @pulumi.getter(name="destIpv6Groups")
    def dest_ipv6_groups(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleDestIpv6Groups']]:
        """
        list of destination ip groups
        """
        return pulumi.get(self, "dest_ipv6_groups")

    @property
    @pulumi.getter(name="deviceGroups")
    def device_groups(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleDeviceGroups']]:
        """
        (List of Objects) Device groups to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        """
        return pulumi.get(self, "device_groups")

    @property
    @pulumi.getter
    def devices(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleDevices']]:
        """
        (List of Objects) Devices to which the rule applies. This field is applicable for devices that are managed using Zscaler Client Connector. If no value is set, this field is ignored during the policy evaluation.
        """
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="enableFullLogging")
    def enable_full_logging(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        (Integer) A Boolean value that indicates whether full logging is enabled. A true value indicates that full logging is enabled, whereas a false value indicates that aggregate logging is enabled.
        """
        return pulumi.get(self, "enable_full_logging")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleGroups']]:
        """
        (List of Objects) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleLabels']]:
        """
        (List of Objects) Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleLocationGroups']]:
        """
        (List of Objects)You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleLocations']]:
        """
        (List of Objects) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the IPS Control rule
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleNwServiceGroups']]:
        """
        (List of Objects) Any number of predefined or custom network service groups to which the rule applies.
        """
        return pulumi.get(self, "nw_service_groups")

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleNwServices']]:
        """
        (List of Objects) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        """
        return pulumi.get(self, "nw_services")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[builtins.int]:
        """
        (Integer) Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def predefined(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        (Boolean) A Boolean field that indicates that the rule is predefined by using a true value
        """
        return pulumi.get(self, "predefined")

    @property
    @pulumi.getter
    def rank(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        (Integer) By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        """
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="resCategories")
    def res_categories(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        (Set of String) URL categories associated with resolved IP addresses to which the rule applies. If not set, the rule is not restricted to a specific URL category.
        """
        return pulumi.get(self, "res_categories")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="sourceCountries")
    def source_countries(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        (Set of String) The countries of origin of traffic for which the rule is applicable. If not set, the rule is not restricted to specific source countries.
        **NOTE**: Provide a 2 letter [ISO3166 Alpha2 Country code](https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes). i.e ``"US"``, ``"CA"``
        """
        return pulumi.get(self, "source_countries")

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleSrcIpGroups']]:
        """
        (List of Objects)Source IP address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IP address group.
        """
        return pulumi.get(self, "src_ip_groups")

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        (Set of String) Source IP addresses or FQDNs to which the rule applies. If not set, the rule is not restricted to a specific source IP address. Each IP entry can be a single IP address, CIDR (e.g., 10.10.33.0/24), or an IP range (e.g., 10.10.33.1-10.10.33.10).
        """
        return pulumi.get(self, "src_ips")

    @property
    @pulumi.getter(name="srcIpv6Groups")
    def src_ipv6_groups(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleSrcIpv6Groups']]:
        """
        (List of Objects) Source IPv6 address groups for which the rule is applicable. If not set, the rule is not restricted to a specific source IPv6 address group.
        """
        return pulumi.get(self, "src_ipv6_groups")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="threatCategories")
    def threat_categories(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleThreatCategories']]:
        """
        (List of Objects) Advanced threat categories to which the rule applies
        """
        return pulumi.get(self, "threat_categories")

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleTimeWindows']]:
        """
        (List of Objects) You can manually select up to `1` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        """
        return pulumi.get(self, "time_windows")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional['outputs.IPSFirewallRuleUsers']]:
        """
        (List of Objects) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="zpaAppSegments")
    def zpa_app_segments(self) -> pulumi.Output[Sequence['outputs.IPSFirewallRuleZpaAppSegment']]:
        """
        (List of Objects) The ZPA application segments to which the rule applies
        """
        return pulumi.get(self, "zpa_app_segments")

