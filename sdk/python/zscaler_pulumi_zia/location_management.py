# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LocationManagementArgs', 'LocationManagement']

@pulumi.input_type
class LocationManagementArgs:
    def __init__(__self__, *,
                 aup_block_internet_until_accepted: Optional[pulumi.Input[bool]] = None,
                 aup_enabled: Optional[pulumi.Input[bool]] = None,
                 aup_force_ssl_inspection: Optional[pulumi.Input[bool]] = None,
                 aup_timeout_in_days: Optional[pulumi.Input[int]] = None,
                 auth_required: Optional[pulumi.Input[bool]] = None,
                 basic_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 caution_enabled: Optional[pulumi.Input[bool]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 digest_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 display_time_unit: Optional[pulumi.Input[str]] = None,
                 dn_bandwidth: Optional[pulumi.Input[int]] = None,
                 idle_time_in_minutes: Optional[pulumi.Input[int]] = None,
                 iot_discovery_enabled: Optional[pulumi.Input[bool]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ips_control: Optional[pulumi.Input[bool]] = None,
                 ipv6_dns64prefix: Optional[pulumi.Input[bool]] = None,
                 ipv6_enabled: Optional[pulumi.Input[bool]] = None,
                 kerberos_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ofw_enabled: Optional[pulumi.Input[bool]] = None,
                 other6_sublocation: Optional[pulumi.Input[bool]] = None,
                 other_sublocation: Optional[pulumi.Input[bool]] = None,
                 parent_id: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 ssl_scan_enabled: Optional[pulumi.Input[bool]] = None,
                 surrogate_ip: Optional[pulumi.Input[bool]] = None,
                 surrogate_ip_enforced_for_known_browsers: Optional[pulumi.Input[bool]] = None,
                 surrogate_refresh_time_in_minutes: Optional[pulumi.Input[int]] = None,
                 surrogate_refresh_time_unit: Optional[pulumi.Input[str]] = None,
                 tz: Optional[pulumi.Input[str]] = None,
                 up_bandwidth: Optional[pulumi.Input[int]] = None,
                 vpn_credentials: Optional[pulumi.Input[Sequence[pulumi.Input['LocationManagementVpnCredentialArgs']]]] = None,
                 xff_forward_enabled: Optional[pulumi.Input[bool]] = None,
                 zapp_ssl_scan_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a LocationManagement resource.
        :param pulumi.Input[bool] aup_block_internet_until_accepted: For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.
        :param pulumi.Input[bool] aup_enabled: Enable AUP. When set to true, AUP is enabled for the location.
        :param pulumi.Input[bool] aup_force_ssl_inspection: For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.
        :param pulumi.Input[int] aup_timeout_in_days: Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.
        :param pulumi.Input[bool] auth_required: Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        :param pulumi.Input[bool] basic_auth_enabled: Enable Basic Authentication at the location
        :param pulumi.Input[bool] caution_enabled: Enable Caution. When set to true, a caution notifcation is enabled for the location.
        :param pulumi.Input[str] country: Country
        :param pulumi.Input[str] description: Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.
        :param pulumi.Input[bool] digest_auth_enabled: Enable Digest Authentication at the location
        :param pulumi.Input[str] display_time_unit: Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.
        :param pulumi.Input[int] dn_bandwidth: Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.
        :param pulumi.Input[int] idle_time_in_minutes: Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.
        :param pulumi.Input[bool] iot_discovery_enabled: Enable IOT Discovery at the location
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_addresses: For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)). The value is required if `vpn_credentials` are not defined.
        :param pulumi.Input[bool] ips_control: Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
        :param pulumi.Input[bool] ipv6_dns64prefix: Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64 prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of supported prefixes. This field is applicable only if ipv6Enabled is set is true.
        :param pulumi.Input[bool] ipv6_enabled: If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.
        :param pulumi.Input[bool] kerberos_auth_enabled: Enable Kerberos Authentication at the location
        :param pulumi.Input[str] name: The configured name of the entity
        :param pulumi.Input[bool] ofw_enabled: Enable Firewall. When set to true, Firewall is enabled for the location.
        :param pulumi.Input[bool] other6_sublocation: If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.
        :param pulumi.Input[bool] other_sublocation: If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.
        :param pulumi.Input[int] parent_id: Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`
        :param pulumi.Input[str] ports: IP ports that are associated with the location.
        :param pulumi.Input[str] profile: Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`. The supported options are: `NONE`, `CORPORATE`, `SERVER`, `GUESTWIFI`, `IOT`, `WORKLOAD`.
        :param pulumi.Input[bool] ssl_scan_enabled: This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        :param pulumi.Input[bool] surrogate_ip: Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
        :param pulumi.Input[bool] surrogate_ip_enforced_for_known_browsers: Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
        :param pulumi.Input[int] surrogate_refresh_time_in_minutes: Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.
        :param pulumi.Input[str] surrogate_refresh_time_unit: Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.
        :param pulumi.Input[str] tz: Timezone of the location. If not specified, it defaults to GMT.
        :param pulumi.Input[int] up_bandwidth: Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.
        :param pulumi.Input[bool] xff_forward_enabled: Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        :param pulumi.Input[bool] zapp_ssl_scan_enabled: This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        """
        if aup_block_internet_until_accepted is not None:
            pulumi.set(__self__, "aup_block_internet_until_accepted", aup_block_internet_until_accepted)
        if aup_enabled is not None:
            pulumi.set(__self__, "aup_enabled", aup_enabled)
        if aup_force_ssl_inspection is not None:
            pulumi.set(__self__, "aup_force_ssl_inspection", aup_force_ssl_inspection)
        if aup_timeout_in_days is not None:
            pulumi.set(__self__, "aup_timeout_in_days", aup_timeout_in_days)
        if auth_required is not None:
            pulumi.set(__self__, "auth_required", auth_required)
        if basic_auth_enabled is not None:
            pulumi.set(__self__, "basic_auth_enabled", basic_auth_enabled)
        if caution_enabled is not None:
            pulumi.set(__self__, "caution_enabled", caution_enabled)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if digest_auth_enabled is not None:
            pulumi.set(__self__, "digest_auth_enabled", digest_auth_enabled)
        if display_time_unit is not None:
            pulumi.set(__self__, "display_time_unit", display_time_unit)
        if dn_bandwidth is not None:
            pulumi.set(__self__, "dn_bandwidth", dn_bandwidth)
        if idle_time_in_minutes is not None:
            pulumi.set(__self__, "idle_time_in_minutes", idle_time_in_minutes)
        if iot_discovery_enabled is not None:
            pulumi.set(__self__, "iot_discovery_enabled", iot_discovery_enabled)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ips_control is not None:
            pulumi.set(__self__, "ips_control", ips_control)
        if ipv6_dns64prefix is not None:
            pulumi.set(__self__, "ipv6_dns64prefix", ipv6_dns64prefix)
        if ipv6_enabled is not None:
            pulumi.set(__self__, "ipv6_enabled", ipv6_enabled)
        if kerberos_auth_enabled is not None:
            pulumi.set(__self__, "kerberos_auth_enabled", kerberos_auth_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ofw_enabled is not None:
            pulumi.set(__self__, "ofw_enabled", ofw_enabled)
        if other6_sublocation is not None:
            pulumi.set(__self__, "other6_sublocation", other6_sublocation)
        if other_sublocation is not None:
            pulumi.set(__self__, "other_sublocation", other_sublocation)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if ssl_scan_enabled is not None:
            pulumi.set(__self__, "ssl_scan_enabled", ssl_scan_enabled)
        if surrogate_ip is not None:
            pulumi.set(__self__, "surrogate_ip", surrogate_ip)
        if surrogate_ip_enforced_for_known_browsers is not None:
            pulumi.set(__self__, "surrogate_ip_enforced_for_known_browsers", surrogate_ip_enforced_for_known_browsers)
        if surrogate_refresh_time_in_minutes is not None:
            pulumi.set(__self__, "surrogate_refresh_time_in_minutes", surrogate_refresh_time_in_minutes)
        if surrogate_refresh_time_unit is not None:
            pulumi.set(__self__, "surrogate_refresh_time_unit", surrogate_refresh_time_unit)
        if tz is not None:
            pulumi.set(__self__, "tz", tz)
        if up_bandwidth is not None:
            pulumi.set(__self__, "up_bandwidth", up_bandwidth)
        if vpn_credentials is not None:
            pulumi.set(__self__, "vpn_credentials", vpn_credentials)
        if xff_forward_enabled is not None:
            pulumi.set(__self__, "xff_forward_enabled", xff_forward_enabled)
        if zapp_ssl_scan_enabled is not None:
            pulumi.set(__self__, "zapp_ssl_scan_enabled", zapp_ssl_scan_enabled)

    @property
    @pulumi.getter(name="aupBlockInternetUntilAccepted")
    def aup_block_internet_until_accepted(self) -> Optional[pulumi.Input[bool]]:
        """
        For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.
        """
        return pulumi.get(self, "aup_block_internet_until_accepted")

    @aup_block_internet_until_accepted.setter
    def aup_block_internet_until_accepted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aup_block_internet_until_accepted", value)

    @property
    @pulumi.getter(name="aupEnabled")
    def aup_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable AUP. When set to true, AUP is enabled for the location.
        """
        return pulumi.get(self, "aup_enabled")

    @aup_enabled.setter
    def aup_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aup_enabled", value)

    @property
    @pulumi.getter(name="aupForceSslInspection")
    def aup_force_ssl_inspection(self) -> Optional[pulumi.Input[bool]]:
        """
        For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.
        """
        return pulumi.get(self, "aup_force_ssl_inspection")

    @aup_force_ssl_inspection.setter
    def aup_force_ssl_inspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aup_force_ssl_inspection", value)

    @property
    @pulumi.getter(name="aupTimeoutInDays")
    def aup_timeout_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.
        """
        return pulumi.get(self, "aup_timeout_in_days")

    @aup_timeout_in_days.setter
    def aup_timeout_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aup_timeout_in_days", value)

    @property
    @pulumi.getter(name="authRequired")
    def auth_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        """
        return pulumi.get(self, "auth_required")

    @auth_required.setter
    def auth_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auth_required", value)

    @property
    @pulumi.getter(name="basicAuthEnabled")
    def basic_auth_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Basic Authentication at the location
        """
        return pulumi.get(self, "basic_auth_enabled")

    @basic_auth_enabled.setter
    def basic_auth_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "basic_auth_enabled", value)

    @property
    @pulumi.getter(name="cautionEnabled")
    def caution_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Caution. When set to true, a caution notifcation is enabled for the location.
        """
        return pulumi.get(self, "caution_enabled")

    @caution_enabled.setter
    def caution_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "caution_enabled", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        Country
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="digestAuthEnabled")
    def digest_auth_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Digest Authentication at the location
        """
        return pulumi.get(self, "digest_auth_enabled")

    @digest_auth_enabled.setter
    def digest_auth_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "digest_auth_enabled", value)

    @property
    @pulumi.getter(name="displayTimeUnit")
    def display_time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.
        """
        return pulumi.get(self, "display_time_unit")

    @display_time_unit.setter
    def display_time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_time_unit", value)

    @property
    @pulumi.getter(name="dnBandwidth")
    def dn_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.
        """
        return pulumi.get(self, "dn_bandwidth")

    @dn_bandwidth.setter
    def dn_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dn_bandwidth", value)

    @property
    @pulumi.getter(name="idleTimeInMinutes")
    def idle_time_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.
        """
        return pulumi.get(self, "idle_time_in_minutes")

    @idle_time_in_minutes.setter
    def idle_time_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_time_in_minutes", value)

    @property
    @pulumi.getter(name="iotDiscoveryEnabled")
    def iot_discovery_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IOT Discovery at the location
        """
        return pulumi.get(self, "iot_discovery_enabled")

    @iot_discovery_enabled.setter
    def iot_discovery_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "iot_discovery_enabled", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)). The value is required if `vpn_credentials` are not defined.
        """
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter(name="ipsControl")
    def ips_control(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
        """
        return pulumi.get(self, "ips_control")

    @ips_control.setter
    def ips_control(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ips_control", value)

    @property
    @pulumi.getter(name="ipv6Dns64prefix")
    def ipv6_dns64prefix(self) -> Optional[pulumi.Input[bool]]:
        """
        Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64 prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of supported prefixes. This field is applicable only if ipv6Enabled is set is true.
        """
        return pulumi.get(self, "ipv6_dns64prefix")

    @ipv6_dns64prefix.setter
    def ipv6_dns64prefix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_dns64prefix", value)

    @property
    @pulumi.getter(name="ipv6Enabled")
    def ipv6_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.
        """
        return pulumi.get(self, "ipv6_enabled")

    @ipv6_enabled.setter
    def ipv6_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_enabled", value)

    @property
    @pulumi.getter(name="kerberosAuthEnabled")
    def kerberos_auth_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Kerberos Authentication at the location
        """
        return pulumi.get(self, "kerberos_auth_enabled")

    @kerberos_auth_enabled.setter
    def kerberos_auth_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kerberos_auth_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ofwEnabled")
    def ofw_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Firewall. When set to true, Firewall is enabled for the location.
        """
        return pulumi.get(self, "ofw_enabled")

    @ofw_enabled.setter
    def ofw_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ofw_enabled", value)

    @property
    @pulumi.getter(name="other6Sublocation")
    def other6_sublocation(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.
        """
        return pulumi.get(self, "other6_sublocation")

    @other6_sublocation.setter
    def other6_sublocation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "other6_sublocation", value)

    @property
    @pulumi.getter(name="otherSublocation")
    def other_sublocation(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.
        """
        return pulumi.get(self, "other_sublocation")

    @other_sublocation.setter
    def other_sublocation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "other_sublocation", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[int]]:
        """
        Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        IP ports that are associated with the location.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`. The supported options are: `NONE`, `CORPORATE`, `SERVER`, `GUESTWIFI`, `IOT`, `WORKLOAD`.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="sslScanEnabled")
    def ssl_scan_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        """
        return pulumi.get(self, "ssl_scan_enabled")

    @ssl_scan_enabled.setter
    def ssl_scan_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_scan_enabled", value)

    @property
    @pulumi.getter(name="surrogateIp")
    def surrogate_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
        """
        return pulumi.get(self, "surrogate_ip")

    @surrogate_ip.setter
    def surrogate_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "surrogate_ip", value)

    @property
    @pulumi.getter(name="surrogateIpEnforcedForKnownBrowsers")
    def surrogate_ip_enforced_for_known_browsers(self) -> Optional[pulumi.Input[bool]]:
        """
        Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
        """
        return pulumi.get(self, "surrogate_ip_enforced_for_known_browsers")

    @surrogate_ip_enforced_for_known_browsers.setter
    def surrogate_ip_enforced_for_known_browsers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "surrogate_ip_enforced_for_known_browsers", value)

    @property
    @pulumi.getter(name="surrogateRefreshTimeInMinutes")
    def surrogate_refresh_time_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.
        """
        return pulumi.get(self, "surrogate_refresh_time_in_minutes")

    @surrogate_refresh_time_in_minutes.setter
    def surrogate_refresh_time_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "surrogate_refresh_time_in_minutes", value)

    @property
    @pulumi.getter(name="surrogateRefreshTimeUnit")
    def surrogate_refresh_time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.
        """
        return pulumi.get(self, "surrogate_refresh_time_unit")

    @surrogate_refresh_time_unit.setter
    def surrogate_refresh_time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "surrogate_refresh_time_unit", value)

    @property
    @pulumi.getter
    def tz(self) -> Optional[pulumi.Input[str]]:
        """
        Timezone of the location. If not specified, it defaults to GMT.
        """
        return pulumi.get(self, "tz")

    @tz.setter
    def tz(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tz", value)

    @property
    @pulumi.getter(name="upBandwidth")
    def up_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.
        """
        return pulumi.get(self, "up_bandwidth")

    @up_bandwidth.setter
    def up_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "up_bandwidth", value)

    @property
    @pulumi.getter(name="vpnCredentials")
    def vpn_credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LocationManagementVpnCredentialArgs']]]]:
        return pulumi.get(self, "vpn_credentials")

    @vpn_credentials.setter
    def vpn_credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LocationManagementVpnCredentialArgs']]]]):
        pulumi.set(self, "vpn_credentials", value)

    @property
    @pulumi.getter(name="xffForwardEnabled")
    def xff_forward_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        """
        return pulumi.get(self, "xff_forward_enabled")

    @xff_forward_enabled.setter
    def xff_forward_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "xff_forward_enabled", value)

    @property
    @pulumi.getter(name="zappSslScanEnabled")
    def zapp_ssl_scan_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        """
        return pulumi.get(self, "zapp_ssl_scan_enabled")

    @zapp_ssl_scan_enabled.setter
    def zapp_ssl_scan_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "zapp_ssl_scan_enabled", value)


@pulumi.input_type
class _LocationManagementState:
    def __init__(__self__, *,
                 aup_block_internet_until_accepted: Optional[pulumi.Input[bool]] = None,
                 aup_enabled: Optional[pulumi.Input[bool]] = None,
                 aup_force_ssl_inspection: Optional[pulumi.Input[bool]] = None,
                 aup_timeout_in_days: Optional[pulumi.Input[int]] = None,
                 auth_required: Optional[pulumi.Input[bool]] = None,
                 basic_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 caution_enabled: Optional[pulumi.Input[bool]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 digest_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 display_time_unit: Optional[pulumi.Input[str]] = None,
                 dn_bandwidth: Optional[pulumi.Input[int]] = None,
                 idle_time_in_minutes: Optional[pulumi.Input[int]] = None,
                 iot_discovery_enabled: Optional[pulumi.Input[bool]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ips_control: Optional[pulumi.Input[bool]] = None,
                 ipv6_dns64prefix: Optional[pulumi.Input[bool]] = None,
                 ipv6_enabled: Optional[pulumi.Input[bool]] = None,
                 kerberos_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ofw_enabled: Optional[pulumi.Input[bool]] = None,
                 other6_sublocation: Optional[pulumi.Input[bool]] = None,
                 other_sublocation: Optional[pulumi.Input[bool]] = None,
                 parent_id: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 ssl_scan_enabled: Optional[pulumi.Input[bool]] = None,
                 surrogate_ip: Optional[pulumi.Input[bool]] = None,
                 surrogate_ip_enforced_for_known_browsers: Optional[pulumi.Input[bool]] = None,
                 surrogate_refresh_time_in_minutes: Optional[pulumi.Input[int]] = None,
                 surrogate_refresh_time_unit: Optional[pulumi.Input[str]] = None,
                 tz: Optional[pulumi.Input[str]] = None,
                 up_bandwidth: Optional[pulumi.Input[int]] = None,
                 vpn_credentials: Optional[pulumi.Input[Sequence[pulumi.Input['LocationManagementVpnCredentialArgs']]]] = None,
                 xff_forward_enabled: Optional[pulumi.Input[bool]] = None,
                 zapp_ssl_scan_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering LocationManagement resources.
        :param pulumi.Input[bool] aup_block_internet_until_accepted: For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.
        :param pulumi.Input[bool] aup_enabled: Enable AUP. When set to true, AUP is enabled for the location.
        :param pulumi.Input[bool] aup_force_ssl_inspection: For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.
        :param pulumi.Input[int] aup_timeout_in_days: Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.
        :param pulumi.Input[bool] auth_required: Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        :param pulumi.Input[bool] basic_auth_enabled: Enable Basic Authentication at the location
        :param pulumi.Input[bool] caution_enabled: Enable Caution. When set to true, a caution notifcation is enabled for the location.
        :param pulumi.Input[str] country: Country
        :param pulumi.Input[str] description: Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.
        :param pulumi.Input[bool] digest_auth_enabled: Enable Digest Authentication at the location
        :param pulumi.Input[str] display_time_unit: Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.
        :param pulumi.Input[int] dn_bandwidth: Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.
        :param pulumi.Input[int] idle_time_in_minutes: Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.
        :param pulumi.Input[bool] iot_discovery_enabled: Enable IOT Discovery at the location
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_addresses: For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)). The value is required if `vpn_credentials` are not defined.
        :param pulumi.Input[bool] ips_control: Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
        :param pulumi.Input[bool] ipv6_dns64prefix: Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64 prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of supported prefixes. This field is applicable only if ipv6Enabled is set is true.
        :param pulumi.Input[bool] ipv6_enabled: If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.
        :param pulumi.Input[bool] kerberos_auth_enabled: Enable Kerberos Authentication at the location
        :param pulumi.Input[str] name: The configured name of the entity
        :param pulumi.Input[bool] ofw_enabled: Enable Firewall. When set to true, Firewall is enabled for the location.
        :param pulumi.Input[bool] other6_sublocation: If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.
        :param pulumi.Input[bool] other_sublocation: If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.
        :param pulumi.Input[int] parent_id: Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`
        :param pulumi.Input[str] ports: IP ports that are associated with the location.
        :param pulumi.Input[str] profile: Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`. The supported options are: `NONE`, `CORPORATE`, `SERVER`, `GUESTWIFI`, `IOT`, `WORKLOAD`.
        :param pulumi.Input[bool] ssl_scan_enabled: This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        :param pulumi.Input[bool] surrogate_ip: Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
        :param pulumi.Input[bool] surrogate_ip_enforced_for_known_browsers: Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
        :param pulumi.Input[int] surrogate_refresh_time_in_minutes: Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.
        :param pulumi.Input[str] surrogate_refresh_time_unit: Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.
        :param pulumi.Input[str] tz: Timezone of the location. If not specified, it defaults to GMT.
        :param pulumi.Input[int] up_bandwidth: Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.
        :param pulumi.Input[bool] xff_forward_enabled: Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        :param pulumi.Input[bool] zapp_ssl_scan_enabled: This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        """
        if aup_block_internet_until_accepted is not None:
            pulumi.set(__self__, "aup_block_internet_until_accepted", aup_block_internet_until_accepted)
        if aup_enabled is not None:
            pulumi.set(__self__, "aup_enabled", aup_enabled)
        if aup_force_ssl_inspection is not None:
            pulumi.set(__self__, "aup_force_ssl_inspection", aup_force_ssl_inspection)
        if aup_timeout_in_days is not None:
            pulumi.set(__self__, "aup_timeout_in_days", aup_timeout_in_days)
        if auth_required is not None:
            pulumi.set(__self__, "auth_required", auth_required)
        if basic_auth_enabled is not None:
            pulumi.set(__self__, "basic_auth_enabled", basic_auth_enabled)
        if caution_enabled is not None:
            pulumi.set(__self__, "caution_enabled", caution_enabled)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if digest_auth_enabled is not None:
            pulumi.set(__self__, "digest_auth_enabled", digest_auth_enabled)
        if display_time_unit is not None:
            pulumi.set(__self__, "display_time_unit", display_time_unit)
        if dn_bandwidth is not None:
            pulumi.set(__self__, "dn_bandwidth", dn_bandwidth)
        if idle_time_in_minutes is not None:
            pulumi.set(__self__, "idle_time_in_minutes", idle_time_in_minutes)
        if iot_discovery_enabled is not None:
            pulumi.set(__self__, "iot_discovery_enabled", iot_discovery_enabled)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if ips_control is not None:
            pulumi.set(__self__, "ips_control", ips_control)
        if ipv6_dns64prefix is not None:
            pulumi.set(__self__, "ipv6_dns64prefix", ipv6_dns64prefix)
        if ipv6_enabled is not None:
            pulumi.set(__self__, "ipv6_enabled", ipv6_enabled)
        if kerberos_auth_enabled is not None:
            pulumi.set(__self__, "kerberos_auth_enabled", kerberos_auth_enabled)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ofw_enabled is not None:
            pulumi.set(__self__, "ofw_enabled", ofw_enabled)
        if other6_sublocation is not None:
            pulumi.set(__self__, "other6_sublocation", other6_sublocation)
        if other_sublocation is not None:
            pulumi.set(__self__, "other_sublocation", other_sublocation)
        if parent_id is not None:
            pulumi.set(__self__, "parent_id", parent_id)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)
        if ssl_scan_enabled is not None:
            pulumi.set(__self__, "ssl_scan_enabled", ssl_scan_enabled)
        if surrogate_ip is not None:
            pulumi.set(__self__, "surrogate_ip", surrogate_ip)
        if surrogate_ip_enforced_for_known_browsers is not None:
            pulumi.set(__self__, "surrogate_ip_enforced_for_known_browsers", surrogate_ip_enforced_for_known_browsers)
        if surrogate_refresh_time_in_minutes is not None:
            pulumi.set(__self__, "surrogate_refresh_time_in_minutes", surrogate_refresh_time_in_minutes)
        if surrogate_refresh_time_unit is not None:
            pulumi.set(__self__, "surrogate_refresh_time_unit", surrogate_refresh_time_unit)
        if tz is not None:
            pulumi.set(__self__, "tz", tz)
        if up_bandwidth is not None:
            pulumi.set(__self__, "up_bandwidth", up_bandwidth)
        if vpn_credentials is not None:
            pulumi.set(__self__, "vpn_credentials", vpn_credentials)
        if xff_forward_enabled is not None:
            pulumi.set(__self__, "xff_forward_enabled", xff_forward_enabled)
        if zapp_ssl_scan_enabled is not None:
            pulumi.set(__self__, "zapp_ssl_scan_enabled", zapp_ssl_scan_enabled)

    @property
    @pulumi.getter(name="aupBlockInternetUntilAccepted")
    def aup_block_internet_until_accepted(self) -> Optional[pulumi.Input[bool]]:
        """
        For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.
        """
        return pulumi.get(self, "aup_block_internet_until_accepted")

    @aup_block_internet_until_accepted.setter
    def aup_block_internet_until_accepted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aup_block_internet_until_accepted", value)

    @property
    @pulumi.getter(name="aupEnabled")
    def aup_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable AUP. When set to true, AUP is enabled for the location.
        """
        return pulumi.get(self, "aup_enabled")

    @aup_enabled.setter
    def aup_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aup_enabled", value)

    @property
    @pulumi.getter(name="aupForceSslInspection")
    def aup_force_ssl_inspection(self) -> Optional[pulumi.Input[bool]]:
        """
        For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.
        """
        return pulumi.get(self, "aup_force_ssl_inspection")

    @aup_force_ssl_inspection.setter
    def aup_force_ssl_inspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "aup_force_ssl_inspection", value)

    @property
    @pulumi.getter(name="aupTimeoutInDays")
    def aup_timeout_in_days(self) -> Optional[pulumi.Input[int]]:
        """
        Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.
        """
        return pulumi.get(self, "aup_timeout_in_days")

    @aup_timeout_in_days.setter
    def aup_timeout_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "aup_timeout_in_days", value)

    @property
    @pulumi.getter(name="authRequired")
    def auth_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        """
        return pulumi.get(self, "auth_required")

    @auth_required.setter
    def auth_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auth_required", value)

    @property
    @pulumi.getter(name="basicAuthEnabled")
    def basic_auth_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Basic Authentication at the location
        """
        return pulumi.get(self, "basic_auth_enabled")

    @basic_auth_enabled.setter
    def basic_auth_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "basic_auth_enabled", value)

    @property
    @pulumi.getter(name="cautionEnabled")
    def caution_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Caution. When set to true, a caution notifcation is enabled for the location.
        """
        return pulumi.get(self, "caution_enabled")

    @caution_enabled.setter
    def caution_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "caution_enabled", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        """
        Country
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="digestAuthEnabled")
    def digest_auth_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Digest Authentication at the location
        """
        return pulumi.get(self, "digest_auth_enabled")

    @digest_auth_enabled.setter
    def digest_auth_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "digest_auth_enabled", value)

    @property
    @pulumi.getter(name="displayTimeUnit")
    def display_time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.
        """
        return pulumi.get(self, "display_time_unit")

    @display_time_unit.setter
    def display_time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_time_unit", value)

    @property
    @pulumi.getter(name="dnBandwidth")
    def dn_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.
        """
        return pulumi.get(self, "dn_bandwidth")

    @dn_bandwidth.setter
    def dn_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dn_bandwidth", value)

    @property
    @pulumi.getter(name="idleTimeInMinutes")
    def idle_time_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.
        """
        return pulumi.get(self, "idle_time_in_minutes")

    @idle_time_in_minutes.setter
    def idle_time_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_time_in_minutes", value)

    @property
    @pulumi.getter(name="iotDiscoveryEnabled")
    def iot_discovery_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IOT Discovery at the location
        """
        return pulumi.get(self, "iot_discovery_enabled")

    @iot_discovery_enabled.setter
    def iot_discovery_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "iot_discovery_enabled", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)). The value is required if `vpn_credentials` are not defined.
        """
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter(name="ipsControl")
    def ips_control(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
        """
        return pulumi.get(self, "ips_control")

    @ips_control.setter
    def ips_control(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ips_control", value)

    @property
    @pulumi.getter(name="ipv6Dns64prefix")
    def ipv6_dns64prefix(self) -> Optional[pulumi.Input[bool]]:
        """
        Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64 prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of supported prefixes. This field is applicable only if ipv6Enabled is set is true.
        """
        return pulumi.get(self, "ipv6_dns64prefix")

    @ipv6_dns64prefix.setter
    def ipv6_dns64prefix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_dns64prefix", value)

    @property
    @pulumi.getter(name="ipv6Enabled")
    def ipv6_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.
        """
        return pulumi.get(self, "ipv6_enabled")

    @ipv6_enabled.setter
    def ipv6_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_enabled", value)

    @property
    @pulumi.getter(name="kerberosAuthEnabled")
    def kerberos_auth_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Kerberos Authentication at the location
        """
        return pulumi.get(self, "kerberos_auth_enabled")

    @kerberos_auth_enabled.setter
    def kerberos_auth_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "kerberos_auth_enabled", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ofwEnabled")
    def ofw_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Firewall. When set to true, Firewall is enabled for the location.
        """
        return pulumi.get(self, "ofw_enabled")

    @ofw_enabled.setter
    def ofw_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ofw_enabled", value)

    @property
    @pulumi.getter(name="other6Sublocation")
    def other6_sublocation(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.
        """
        return pulumi.get(self, "other6_sublocation")

    @other6_sublocation.setter
    def other6_sublocation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "other6_sublocation", value)

    @property
    @pulumi.getter(name="otherSublocation")
    def other_sublocation(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.
        """
        return pulumi.get(self, "other_sublocation")

    @other_sublocation.setter
    def other_sublocation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "other_sublocation", value)

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> Optional[pulumi.Input[int]]:
        """
        Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`
        """
        return pulumi.get(self, "parent_id")

    @parent_id.setter
    def parent_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parent_id", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[str]]:
        """
        IP ports that are associated with the location.
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        """
        Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`. The supported options are: `NONE`, `CORPORATE`, `SERVER`, `GUESTWIFI`, `IOT`, `WORKLOAD`.
        """
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)

    @property
    @pulumi.getter(name="sslScanEnabled")
    def ssl_scan_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        """
        return pulumi.get(self, "ssl_scan_enabled")

    @ssl_scan_enabled.setter
    def ssl_scan_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_scan_enabled", value)

    @property
    @pulumi.getter(name="surrogateIp")
    def surrogate_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
        """
        return pulumi.get(self, "surrogate_ip")

    @surrogate_ip.setter
    def surrogate_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "surrogate_ip", value)

    @property
    @pulumi.getter(name="surrogateIpEnforcedForKnownBrowsers")
    def surrogate_ip_enforced_for_known_browsers(self) -> Optional[pulumi.Input[bool]]:
        """
        Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
        """
        return pulumi.get(self, "surrogate_ip_enforced_for_known_browsers")

    @surrogate_ip_enforced_for_known_browsers.setter
    def surrogate_ip_enforced_for_known_browsers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "surrogate_ip_enforced_for_known_browsers", value)

    @property
    @pulumi.getter(name="surrogateRefreshTimeInMinutes")
    def surrogate_refresh_time_in_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.
        """
        return pulumi.get(self, "surrogate_refresh_time_in_minutes")

    @surrogate_refresh_time_in_minutes.setter
    def surrogate_refresh_time_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "surrogate_refresh_time_in_minutes", value)

    @property
    @pulumi.getter(name="surrogateRefreshTimeUnit")
    def surrogate_refresh_time_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.
        """
        return pulumi.get(self, "surrogate_refresh_time_unit")

    @surrogate_refresh_time_unit.setter
    def surrogate_refresh_time_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "surrogate_refresh_time_unit", value)

    @property
    @pulumi.getter
    def tz(self) -> Optional[pulumi.Input[str]]:
        """
        Timezone of the location. If not specified, it defaults to GMT.
        """
        return pulumi.get(self, "tz")

    @tz.setter
    def tz(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tz", value)

    @property
    @pulumi.getter(name="upBandwidth")
    def up_bandwidth(self) -> Optional[pulumi.Input[int]]:
        """
        Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.
        """
        return pulumi.get(self, "up_bandwidth")

    @up_bandwidth.setter
    def up_bandwidth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "up_bandwidth", value)

    @property
    @pulumi.getter(name="vpnCredentials")
    def vpn_credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LocationManagementVpnCredentialArgs']]]]:
        return pulumi.get(self, "vpn_credentials")

    @vpn_credentials.setter
    def vpn_credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LocationManagementVpnCredentialArgs']]]]):
        pulumi.set(self, "vpn_credentials", value)

    @property
    @pulumi.getter(name="xffForwardEnabled")
    def xff_forward_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        """
        return pulumi.get(self, "xff_forward_enabled")

    @xff_forward_enabled.setter
    def xff_forward_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "xff_forward_enabled", value)

    @property
    @pulumi.getter(name="zappSslScanEnabled")
    def zapp_ssl_scan_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        """
        return pulumi.get(self, "zapp_ssl_scan_enabled")

    @zapp_ssl_scan_enabled.setter
    def zapp_ssl_scan_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "zapp_ssl_scan_enabled", value)


class LocationManagement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aup_block_internet_until_accepted: Optional[pulumi.Input[bool]] = None,
                 aup_enabled: Optional[pulumi.Input[bool]] = None,
                 aup_force_ssl_inspection: Optional[pulumi.Input[bool]] = None,
                 aup_timeout_in_days: Optional[pulumi.Input[int]] = None,
                 auth_required: Optional[pulumi.Input[bool]] = None,
                 basic_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 caution_enabled: Optional[pulumi.Input[bool]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 digest_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 display_time_unit: Optional[pulumi.Input[str]] = None,
                 dn_bandwidth: Optional[pulumi.Input[int]] = None,
                 idle_time_in_minutes: Optional[pulumi.Input[int]] = None,
                 iot_discovery_enabled: Optional[pulumi.Input[bool]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ips_control: Optional[pulumi.Input[bool]] = None,
                 ipv6_dns64prefix: Optional[pulumi.Input[bool]] = None,
                 ipv6_enabled: Optional[pulumi.Input[bool]] = None,
                 kerberos_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ofw_enabled: Optional[pulumi.Input[bool]] = None,
                 other6_sublocation: Optional[pulumi.Input[bool]] = None,
                 other_sublocation: Optional[pulumi.Input[bool]] = None,
                 parent_id: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 ssl_scan_enabled: Optional[pulumi.Input[bool]] = None,
                 surrogate_ip: Optional[pulumi.Input[bool]] = None,
                 surrogate_ip_enforced_for_known_browsers: Optional[pulumi.Input[bool]] = None,
                 surrogate_refresh_time_in_minutes: Optional[pulumi.Input[int]] = None,
                 surrogate_refresh_time_unit: Optional[pulumi.Input[str]] = None,
                 tz: Optional[pulumi.Input[str]] = None,
                 up_bandwidth: Optional[pulumi.Input[int]] = None,
                 vpn_credentials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocationManagementVpnCredentialArgs']]]]] = None,
                 xff_forward_enabled: Optional[pulumi.Input[bool]] = None,
                 zapp_ssl_scan_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        The **zia_location_management** resource allows the creation and management of ZIA locations in the Zscaler Internet Access. This resource can then be associated with a:

        * Static IP resource
        * GRE Tunnel resource
        * VPN credentials resource
        * URL filtering and firewall filtering rules

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        usa_sjc37_traffic_forwarding_vpn_credentials = zia.TrafficForwardingVPNCredentials("usaSjc37TrafficForwardingVPNCredentials",
            type="UFQDN",
            fqdn="usa_sjc37@acme.com",
            comments="USA - San Jose IPSec Tunnel",
            pre_shared_key="P@ass0rd123!")
        usa_sjc37_traffic_forwarding_static_ip = zia.TrafficForwardingStaticIP("usaSjc37TrafficForwardingStaticIP",
            ip_address="1.1.1.1",
            routable_ip=True,
            comment="SJC37 - Static IP",
            geo_override=False)
        # ZIA Location Management
        usa_sjc37_location_management = zia.LocationManagement("usaSjc37LocationManagement",
            description="Created with Terraform",
            country="UNITED_STATES",
            tz="UNITED_STATES_AMERICA_LOS_ANGELES",
            auth_required=True,
            idle_time_in_minutes=720,
            display_time_unit="HOUR",
            surrogate_ip=True,
            xff_forward_enabled=True,
            ofw_enabled=True,
            ips_control=True,
            ip_addresses=[usa_sjc37_traffic_forwarding_static_ip.ip_address],
            vpn_credentials=[zia.LocationManagementVpnCredentialArgs(
                id=usa_sjc37_traffic_forwarding_vpn_credentials.id,
                type=usa_sjc37_traffic_forwarding_vpn_credentials.type,
            )],
            opts=pulumi.ResourceOptions(depends_on=[
                    usa_sjc37_traffic_forwarding_vpn_credentials,
                    usa_sjc37_traffic_forwarding_static_ip,
                ]))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_location_management** can be imported by using `<LOCATION_ID>` or `<LOCATION_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/locationManagement:LocationManagement example <location_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/locationManagement:LocationManagement example <location_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] aup_block_internet_until_accepted: For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.
        :param pulumi.Input[bool] aup_enabled: Enable AUP. When set to true, AUP is enabled for the location.
        :param pulumi.Input[bool] aup_force_ssl_inspection: For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.
        :param pulumi.Input[int] aup_timeout_in_days: Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.
        :param pulumi.Input[bool] auth_required: Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        :param pulumi.Input[bool] basic_auth_enabled: Enable Basic Authentication at the location
        :param pulumi.Input[bool] caution_enabled: Enable Caution. When set to true, a caution notifcation is enabled for the location.
        :param pulumi.Input[str] country: Country
        :param pulumi.Input[str] description: Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.
        :param pulumi.Input[bool] digest_auth_enabled: Enable Digest Authentication at the location
        :param pulumi.Input[str] display_time_unit: Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.
        :param pulumi.Input[int] dn_bandwidth: Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.
        :param pulumi.Input[int] idle_time_in_minutes: Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.
        :param pulumi.Input[bool] iot_discovery_enabled: Enable IOT Discovery at the location
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_addresses: For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)). The value is required if `vpn_credentials` are not defined.
        :param pulumi.Input[bool] ips_control: Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
        :param pulumi.Input[bool] ipv6_dns64prefix: Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64 prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of supported prefixes. This field is applicable only if ipv6Enabled is set is true.
        :param pulumi.Input[bool] ipv6_enabled: If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.
        :param pulumi.Input[bool] kerberos_auth_enabled: Enable Kerberos Authentication at the location
        :param pulumi.Input[str] name: The configured name of the entity
        :param pulumi.Input[bool] ofw_enabled: Enable Firewall. When set to true, Firewall is enabled for the location.
        :param pulumi.Input[bool] other6_sublocation: If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.
        :param pulumi.Input[bool] other_sublocation: If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.
        :param pulumi.Input[int] parent_id: Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`
        :param pulumi.Input[str] ports: IP ports that are associated with the location.
        :param pulumi.Input[str] profile: Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`. The supported options are: `NONE`, `CORPORATE`, `SERVER`, `GUESTWIFI`, `IOT`, `WORKLOAD`.
        :param pulumi.Input[bool] ssl_scan_enabled: This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        :param pulumi.Input[bool] surrogate_ip: Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
        :param pulumi.Input[bool] surrogate_ip_enforced_for_known_browsers: Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
        :param pulumi.Input[int] surrogate_refresh_time_in_minutes: Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.
        :param pulumi.Input[str] surrogate_refresh_time_unit: Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.
        :param pulumi.Input[str] tz: Timezone of the location. If not specified, it defaults to GMT.
        :param pulumi.Input[int] up_bandwidth: Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.
        :param pulumi.Input[bool] xff_forward_enabled: Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        :param pulumi.Input[bool] zapp_ssl_scan_enabled: This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LocationManagementArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_location_management** resource allows the creation and management of ZIA locations in the Zscaler Internet Access. This resource can then be associated with a:

        * Static IP resource
        * GRE Tunnel resource
        * VPN credentials resource
        * URL filtering and firewall filtering rules

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        usa_sjc37_traffic_forwarding_vpn_credentials = zia.TrafficForwardingVPNCredentials("usaSjc37TrafficForwardingVPNCredentials",
            type="UFQDN",
            fqdn="usa_sjc37@acme.com",
            comments="USA - San Jose IPSec Tunnel",
            pre_shared_key="P@ass0rd123!")
        usa_sjc37_traffic_forwarding_static_ip = zia.TrafficForwardingStaticIP("usaSjc37TrafficForwardingStaticIP",
            ip_address="1.1.1.1",
            routable_ip=True,
            comment="SJC37 - Static IP",
            geo_override=False)
        # ZIA Location Management
        usa_sjc37_location_management = zia.LocationManagement("usaSjc37LocationManagement",
            description="Created with Terraform",
            country="UNITED_STATES",
            tz="UNITED_STATES_AMERICA_LOS_ANGELES",
            auth_required=True,
            idle_time_in_minutes=720,
            display_time_unit="HOUR",
            surrogate_ip=True,
            xff_forward_enabled=True,
            ofw_enabled=True,
            ips_control=True,
            ip_addresses=[usa_sjc37_traffic_forwarding_static_ip.ip_address],
            vpn_credentials=[zia.LocationManagementVpnCredentialArgs(
                id=usa_sjc37_traffic_forwarding_vpn_credentials.id,
                type=usa_sjc37_traffic_forwarding_vpn_credentials.type,
            )],
            opts=pulumi.ResourceOptions(depends_on=[
                    usa_sjc37_traffic_forwarding_vpn_credentials,
                    usa_sjc37_traffic_forwarding_static_ip,
                ]))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_location_management** can be imported by using `<LOCATION_ID>` or `<LOCATION_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/locationManagement:LocationManagement example <location_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/locationManagement:LocationManagement example <location_name>
        ```

        :param str resource_name: The name of the resource.
        :param LocationManagementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LocationManagementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aup_block_internet_until_accepted: Optional[pulumi.Input[bool]] = None,
                 aup_enabled: Optional[pulumi.Input[bool]] = None,
                 aup_force_ssl_inspection: Optional[pulumi.Input[bool]] = None,
                 aup_timeout_in_days: Optional[pulumi.Input[int]] = None,
                 auth_required: Optional[pulumi.Input[bool]] = None,
                 basic_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 caution_enabled: Optional[pulumi.Input[bool]] = None,
                 country: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 digest_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 display_time_unit: Optional[pulumi.Input[str]] = None,
                 dn_bandwidth: Optional[pulumi.Input[int]] = None,
                 idle_time_in_minutes: Optional[pulumi.Input[int]] = None,
                 iot_discovery_enabled: Optional[pulumi.Input[bool]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ips_control: Optional[pulumi.Input[bool]] = None,
                 ipv6_dns64prefix: Optional[pulumi.Input[bool]] = None,
                 ipv6_enabled: Optional[pulumi.Input[bool]] = None,
                 kerberos_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ofw_enabled: Optional[pulumi.Input[bool]] = None,
                 other6_sublocation: Optional[pulumi.Input[bool]] = None,
                 other_sublocation: Optional[pulumi.Input[bool]] = None,
                 parent_id: Optional[pulumi.Input[int]] = None,
                 ports: Optional[pulumi.Input[str]] = None,
                 profile: Optional[pulumi.Input[str]] = None,
                 ssl_scan_enabled: Optional[pulumi.Input[bool]] = None,
                 surrogate_ip: Optional[pulumi.Input[bool]] = None,
                 surrogate_ip_enforced_for_known_browsers: Optional[pulumi.Input[bool]] = None,
                 surrogate_refresh_time_in_minutes: Optional[pulumi.Input[int]] = None,
                 surrogate_refresh_time_unit: Optional[pulumi.Input[str]] = None,
                 tz: Optional[pulumi.Input[str]] = None,
                 up_bandwidth: Optional[pulumi.Input[int]] = None,
                 vpn_credentials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocationManagementVpnCredentialArgs']]]]] = None,
                 xff_forward_enabled: Optional[pulumi.Input[bool]] = None,
                 zapp_ssl_scan_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LocationManagementArgs.__new__(LocationManagementArgs)

            __props__.__dict__["aup_block_internet_until_accepted"] = aup_block_internet_until_accepted
            __props__.__dict__["aup_enabled"] = aup_enabled
            __props__.__dict__["aup_force_ssl_inspection"] = aup_force_ssl_inspection
            __props__.__dict__["aup_timeout_in_days"] = aup_timeout_in_days
            __props__.__dict__["auth_required"] = auth_required
            __props__.__dict__["basic_auth_enabled"] = basic_auth_enabled
            __props__.__dict__["caution_enabled"] = caution_enabled
            __props__.__dict__["country"] = country
            __props__.__dict__["description"] = description
            __props__.__dict__["digest_auth_enabled"] = digest_auth_enabled
            __props__.__dict__["display_time_unit"] = display_time_unit
            __props__.__dict__["dn_bandwidth"] = dn_bandwidth
            __props__.__dict__["idle_time_in_minutes"] = idle_time_in_minutes
            __props__.__dict__["iot_discovery_enabled"] = iot_discovery_enabled
            __props__.__dict__["ip_addresses"] = ip_addresses
            __props__.__dict__["ips_control"] = ips_control
            __props__.__dict__["ipv6_dns64prefix"] = ipv6_dns64prefix
            __props__.__dict__["ipv6_enabled"] = ipv6_enabled
            __props__.__dict__["kerberos_auth_enabled"] = kerberos_auth_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["ofw_enabled"] = ofw_enabled
            __props__.__dict__["other6_sublocation"] = other6_sublocation
            __props__.__dict__["other_sublocation"] = other_sublocation
            __props__.__dict__["parent_id"] = parent_id
            __props__.__dict__["ports"] = ports
            __props__.__dict__["profile"] = profile
            __props__.__dict__["ssl_scan_enabled"] = ssl_scan_enabled
            __props__.__dict__["surrogate_ip"] = surrogate_ip
            __props__.__dict__["surrogate_ip_enforced_for_known_browsers"] = surrogate_ip_enforced_for_known_browsers
            __props__.__dict__["surrogate_refresh_time_in_minutes"] = surrogate_refresh_time_in_minutes
            __props__.__dict__["surrogate_refresh_time_unit"] = surrogate_refresh_time_unit
            __props__.__dict__["tz"] = tz
            __props__.__dict__["up_bandwidth"] = up_bandwidth
            __props__.__dict__["vpn_credentials"] = vpn_credentials
            __props__.__dict__["xff_forward_enabled"] = xff_forward_enabled
            __props__.__dict__["zapp_ssl_scan_enabled"] = zapp_ssl_scan_enabled
            __props__.__dict__["location_id"] = None
        super(LocationManagement, __self__).__init__(
            'zia:index/locationManagement:LocationManagement',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aup_block_internet_until_accepted: Optional[pulumi.Input[bool]] = None,
            aup_enabled: Optional[pulumi.Input[bool]] = None,
            aup_force_ssl_inspection: Optional[pulumi.Input[bool]] = None,
            aup_timeout_in_days: Optional[pulumi.Input[int]] = None,
            auth_required: Optional[pulumi.Input[bool]] = None,
            basic_auth_enabled: Optional[pulumi.Input[bool]] = None,
            caution_enabled: Optional[pulumi.Input[bool]] = None,
            country: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            digest_auth_enabled: Optional[pulumi.Input[bool]] = None,
            display_time_unit: Optional[pulumi.Input[str]] = None,
            dn_bandwidth: Optional[pulumi.Input[int]] = None,
            idle_time_in_minutes: Optional[pulumi.Input[int]] = None,
            iot_discovery_enabled: Optional[pulumi.Input[bool]] = None,
            ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ips_control: Optional[pulumi.Input[bool]] = None,
            ipv6_dns64prefix: Optional[pulumi.Input[bool]] = None,
            ipv6_enabled: Optional[pulumi.Input[bool]] = None,
            kerberos_auth_enabled: Optional[pulumi.Input[bool]] = None,
            location_id: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            ofw_enabled: Optional[pulumi.Input[bool]] = None,
            other6_sublocation: Optional[pulumi.Input[bool]] = None,
            other_sublocation: Optional[pulumi.Input[bool]] = None,
            parent_id: Optional[pulumi.Input[int]] = None,
            ports: Optional[pulumi.Input[str]] = None,
            profile: Optional[pulumi.Input[str]] = None,
            ssl_scan_enabled: Optional[pulumi.Input[bool]] = None,
            surrogate_ip: Optional[pulumi.Input[bool]] = None,
            surrogate_ip_enforced_for_known_browsers: Optional[pulumi.Input[bool]] = None,
            surrogate_refresh_time_in_minutes: Optional[pulumi.Input[int]] = None,
            surrogate_refresh_time_unit: Optional[pulumi.Input[str]] = None,
            tz: Optional[pulumi.Input[str]] = None,
            up_bandwidth: Optional[pulumi.Input[int]] = None,
            vpn_credentials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LocationManagementVpnCredentialArgs']]]]] = None,
            xff_forward_enabled: Optional[pulumi.Input[bool]] = None,
            zapp_ssl_scan_enabled: Optional[pulumi.Input[bool]] = None) -> 'LocationManagement':
        """
        Get an existing LocationManagement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] aup_block_internet_until_accepted: For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.
        :param pulumi.Input[bool] aup_enabled: Enable AUP. When set to true, AUP is enabled for the location.
        :param pulumi.Input[bool] aup_force_ssl_inspection: For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.
        :param pulumi.Input[int] aup_timeout_in_days: Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.
        :param pulumi.Input[bool] auth_required: Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        :param pulumi.Input[bool] basic_auth_enabled: Enable Basic Authentication at the location
        :param pulumi.Input[bool] caution_enabled: Enable Caution. When set to true, a caution notifcation is enabled for the location.
        :param pulumi.Input[str] country: Country
        :param pulumi.Input[str] description: Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.
        :param pulumi.Input[bool] digest_auth_enabled: Enable Digest Authentication at the location
        :param pulumi.Input[str] display_time_unit: Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.
        :param pulumi.Input[int] dn_bandwidth: Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.
        :param pulumi.Input[int] idle_time_in_minutes: Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.
        :param pulumi.Input[bool] iot_discovery_enabled: Enable IOT Discovery at the location
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_addresses: For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)). The value is required if `vpn_credentials` are not defined.
        :param pulumi.Input[bool] ips_control: Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
        :param pulumi.Input[bool] ipv6_dns64prefix: Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64 prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of supported prefixes. This field is applicable only if ipv6Enabled is set is true.
        :param pulumi.Input[bool] ipv6_enabled: If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.
        :param pulumi.Input[bool] kerberos_auth_enabled: Enable Kerberos Authentication at the location
        :param pulumi.Input[str] name: The configured name of the entity
        :param pulumi.Input[bool] ofw_enabled: Enable Firewall. When set to true, Firewall is enabled for the location.
        :param pulumi.Input[bool] other6_sublocation: If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.
        :param pulumi.Input[bool] other_sublocation: If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.
        :param pulumi.Input[int] parent_id: Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`
        :param pulumi.Input[str] ports: IP ports that are associated with the location.
        :param pulumi.Input[str] profile: Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`. The supported options are: `NONE`, `CORPORATE`, `SERVER`, `GUESTWIFI`, `IOT`, `WORKLOAD`.
        :param pulumi.Input[bool] ssl_scan_enabled: This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        :param pulumi.Input[bool] surrogate_ip: Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
        :param pulumi.Input[bool] surrogate_ip_enforced_for_known_browsers: Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
        :param pulumi.Input[int] surrogate_refresh_time_in_minutes: Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.
        :param pulumi.Input[str] surrogate_refresh_time_unit: Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.
        :param pulumi.Input[str] tz: Timezone of the location. If not specified, it defaults to GMT.
        :param pulumi.Input[int] up_bandwidth: Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.
        :param pulumi.Input[bool] xff_forward_enabled: Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        :param pulumi.Input[bool] zapp_ssl_scan_enabled: This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LocationManagementState.__new__(_LocationManagementState)

        __props__.__dict__["aup_block_internet_until_accepted"] = aup_block_internet_until_accepted
        __props__.__dict__["aup_enabled"] = aup_enabled
        __props__.__dict__["aup_force_ssl_inspection"] = aup_force_ssl_inspection
        __props__.__dict__["aup_timeout_in_days"] = aup_timeout_in_days
        __props__.__dict__["auth_required"] = auth_required
        __props__.__dict__["basic_auth_enabled"] = basic_auth_enabled
        __props__.__dict__["caution_enabled"] = caution_enabled
        __props__.__dict__["country"] = country
        __props__.__dict__["description"] = description
        __props__.__dict__["digest_auth_enabled"] = digest_auth_enabled
        __props__.__dict__["display_time_unit"] = display_time_unit
        __props__.__dict__["dn_bandwidth"] = dn_bandwidth
        __props__.__dict__["idle_time_in_minutes"] = idle_time_in_minutes
        __props__.__dict__["iot_discovery_enabled"] = iot_discovery_enabled
        __props__.__dict__["ip_addresses"] = ip_addresses
        __props__.__dict__["ips_control"] = ips_control
        __props__.__dict__["ipv6_dns64prefix"] = ipv6_dns64prefix
        __props__.__dict__["ipv6_enabled"] = ipv6_enabled
        __props__.__dict__["kerberos_auth_enabled"] = kerberos_auth_enabled
        __props__.__dict__["location_id"] = location_id
        __props__.__dict__["name"] = name
        __props__.__dict__["ofw_enabled"] = ofw_enabled
        __props__.__dict__["other6_sublocation"] = other6_sublocation
        __props__.__dict__["other_sublocation"] = other_sublocation
        __props__.__dict__["parent_id"] = parent_id
        __props__.__dict__["ports"] = ports
        __props__.__dict__["profile"] = profile
        __props__.__dict__["ssl_scan_enabled"] = ssl_scan_enabled
        __props__.__dict__["surrogate_ip"] = surrogate_ip
        __props__.__dict__["surrogate_ip_enforced_for_known_browsers"] = surrogate_ip_enforced_for_known_browsers
        __props__.__dict__["surrogate_refresh_time_in_minutes"] = surrogate_refresh_time_in_minutes
        __props__.__dict__["surrogate_refresh_time_unit"] = surrogate_refresh_time_unit
        __props__.__dict__["tz"] = tz
        __props__.__dict__["up_bandwidth"] = up_bandwidth
        __props__.__dict__["vpn_credentials"] = vpn_credentials
        __props__.__dict__["xff_forward_enabled"] = xff_forward_enabled
        __props__.__dict__["zapp_ssl_scan_enabled"] = zapp_ssl_scan_enabled
        return LocationManagement(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aupBlockInternetUntilAccepted")
    def aup_block_internet_until_accepted(self) -> pulumi.Output[bool]:
        """
        For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.
        """
        return pulumi.get(self, "aup_block_internet_until_accepted")

    @property
    @pulumi.getter(name="aupEnabled")
    def aup_enabled(self) -> pulumi.Output[bool]:
        """
        Enable AUP. When set to true, AUP is enabled for the location.
        """
        return pulumi.get(self, "aup_enabled")

    @property
    @pulumi.getter(name="aupForceSslInspection")
    def aup_force_ssl_inspection(self) -> pulumi.Output[bool]:
        """
        For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.
        """
        return pulumi.get(self, "aup_force_ssl_inspection")

    @property
    @pulumi.getter(name="aupTimeoutInDays")
    def aup_timeout_in_days(self) -> pulumi.Output[Optional[int]]:
        """
        Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.
        """
        return pulumi.get(self, "aup_timeout_in_days")

    @property
    @pulumi.getter(name="authRequired")
    def auth_required(self) -> pulumi.Output[bool]:
        """
        Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        """
        return pulumi.get(self, "auth_required")

    @property
    @pulumi.getter(name="basicAuthEnabled")
    def basic_auth_enabled(self) -> pulumi.Output[bool]:
        """
        Enable Basic Authentication at the location
        """
        return pulumi.get(self, "basic_auth_enabled")

    @property
    @pulumi.getter(name="cautionEnabled")
    def caution_enabled(self) -> pulumi.Output[bool]:
        """
        Enable Caution. When set to true, a caution notifcation is enabled for the location.
        """
        return pulumi.get(self, "caution_enabled")

    @property
    @pulumi.getter
    def country(self) -> pulumi.Output[str]:
        """
        Country
        """
        return pulumi.get(self, "country")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="digestAuthEnabled")
    def digest_auth_enabled(self) -> pulumi.Output[bool]:
        """
        Enable Digest Authentication at the location
        """
        return pulumi.get(self, "digest_auth_enabled")

    @property
    @pulumi.getter(name="displayTimeUnit")
    def display_time_unit(self) -> pulumi.Output[Optional[str]]:
        """
        Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.
        """
        return pulumi.get(self, "display_time_unit")

    @property
    @pulumi.getter(name="dnBandwidth")
    def dn_bandwidth(self) -> pulumi.Output[Optional[int]]:
        """
        Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.
        """
        return pulumi.get(self, "dn_bandwidth")

    @property
    @pulumi.getter(name="idleTimeInMinutes")
    def idle_time_in_minutes(self) -> pulumi.Output[Optional[int]]:
        """
        Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.
        """
        return pulumi.get(self, "idle_time_in_minutes")

    @property
    @pulumi.getter(name="iotDiscoveryEnabled")
    def iot_discovery_enabled(self) -> pulumi.Output[bool]:
        """
        Enable IOT Discovery at the location
        """
        return pulumi.get(self, "iot_discovery_enabled")

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)). The value is required if `vpn_credentials` are not defined.
        """
        return pulumi.get(self, "ip_addresses")

    @property
    @pulumi.getter(name="ipsControl")
    def ips_control(self) -> pulumi.Output[bool]:
        """
        Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.
        """
        return pulumi.get(self, "ips_control")

    @property
    @pulumi.getter(name="ipv6Dns64prefix")
    def ipv6_dns64prefix(self) -> pulumi.Output[Optional[bool]]:
        """
        Name-ID pair of the NAT64 prefix configured as the DNS64 prefix for the location. If specified, the DNS64 prefix is used for the IP addresses that reside in this location. If not specified, a prefix is selected from the set of supported prefixes. This field is applicable only if ipv6Enabled is set is true.
        """
        return pulumi.get(self, "ipv6_dns64prefix")

    @property
    @pulumi.getter(name="ipv6Enabled")
    def ipv6_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        If set to true, IPv6 is enabled for the location and IPv6 traffic from the location can be forwarded to the Zscaler service to enforce security policies.
        """
        return pulumi.get(self, "ipv6_enabled")

    @property
    @pulumi.getter(name="kerberosAuthEnabled")
    def kerberos_auth_enabled(self) -> pulumi.Output[bool]:
        """
        Enable Kerberos Authentication at the location
        """
        return pulumi.get(self, "kerberos_auth_enabled")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ofwEnabled")
    def ofw_enabled(self) -> pulumi.Output[bool]:
        """
        Enable Firewall. When set to true, Firewall is enabled for the location.
        """
        return pulumi.get(self, "ofw_enabled")

    @property
    @pulumi.getter(name="other6Sublocation")
    def other6_sublocation(self) -> pulumi.Output[bool]:
        """
        If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv6 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other6 and it can be renamed, if required. This field is applicable only if ipv6Enabled is set is true.
        """
        return pulumi.get(self, "other6_sublocation")

    @property
    @pulumi.getter(name="otherSublocation")
    def other_sublocation(self) -> pulumi.Output[bool]:
        """
        If set to true, indicates that this is a default sub-location created by the Zscaler service to accommodate IPv4 addresses that are not part of any user-defined sub-locations. The default sub-location is created with the name Other and it can be renamed, if required.
        """
        return pulumi.get(self, "other_sublocation")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> pulumi.Output[Optional[int]]:
        """
        Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`
        """
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Output[Optional[str]]:
        """
        IP ports that are associated with the location.
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter
    def profile(self) -> pulumi.Output[str]:
        """
        Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`. The supported options are: `NONE`, `CORPORATE`, `SERVER`, `GUESTWIFI`, `IOT`, `WORKLOAD`.
        """
        return pulumi.get(self, "profile")

    @property
    @pulumi.getter(name="sslScanEnabled")
    def ssl_scan_enabled(self) -> pulumi.Output[bool]:
        """
        This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        """
        return pulumi.get(self, "ssl_scan_enabled")

    @property
    @pulumi.getter(name="surrogateIp")
    def surrogate_ip(self) -> pulumi.Output[bool]:
        """
        Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.
        """
        return pulumi.get(self, "surrogate_ip")

    @property
    @pulumi.getter(name="surrogateIpEnforcedForKnownBrowsers")
    def surrogate_ip_enforced_for_known_browsers(self) -> pulumi.Output[bool]:
        """
        Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.
        """
        return pulumi.get(self, "surrogate_ip_enforced_for_known_browsers")

    @property
    @pulumi.getter(name="surrogateRefreshTimeInMinutes")
    def surrogate_refresh_time_in_minutes(self) -> pulumi.Output[Optional[int]]:
        """
        Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.
        """
        return pulumi.get(self, "surrogate_refresh_time_in_minutes")

    @property
    @pulumi.getter(name="surrogateRefreshTimeUnit")
    def surrogate_refresh_time_unit(self) -> pulumi.Output[Optional[str]]:
        """
        Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.
        """
        return pulumi.get(self, "surrogate_refresh_time_unit")

    @property
    @pulumi.getter
    def tz(self) -> pulumi.Output[str]:
        """
        Timezone of the location. If not specified, it defaults to GMT.
        """
        return pulumi.get(self, "tz")

    @property
    @pulumi.getter(name="upBandwidth")
    def up_bandwidth(self) -> pulumi.Output[Optional[int]]:
        """
        Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.
        """
        return pulumi.get(self, "up_bandwidth")

    @property
    @pulumi.getter(name="vpnCredentials")
    def vpn_credentials(self) -> pulumi.Output[Optional[Sequence['outputs.LocationManagementVpnCredential']]]:
        return pulumi.get(self, "vpn_credentials")

    @property
    @pulumi.getter(name="xffForwardEnabled")
    def xff_forward_enabled(self) -> pulumi.Output[bool]:
        """
        Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        """
        return pulumi.get(self, "xff_forward_enabled")

    @property
    @pulumi.getter(name="zappSslScanEnabled")
    def zapp_ssl_scan_enabled(self) -> pulumi.Output[bool]:
        """
        This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.
        """
        return pulumi.get(self, "zapp_ssl_scan_enabled")

