# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FirewallFilteringApplicationGroupsArgs', 'FirewallFilteringApplicationGroups']

@pulumi.input_type
class FirewallFilteringApplicationGroupsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a FirewallFilteringApplicationGroups resource.
        :param pulumi.Input[str] description: Description of the network application group
        :param pulumi.Input[str] name: Network application group name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_applications: Any number of applications to be added to the group
               * Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_applications is not None:
            pulumi.set(__self__, "network_applications", network_applications)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the network application group
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Network application group name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkApplications")
    def network_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Any number of applications to be added to the group
        * Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)
        """
        return pulumi.get(self, "network_applications")

    @network_applications.setter
    def network_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "network_applications", value)


@pulumi.input_type
class _FirewallFilteringApplicationGroupsState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering FirewallFilteringApplicationGroups resources.
        :param pulumi.Input[str] description: Description of the network application group
        :param pulumi.Input[str] name: Network application group name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_applications: Any number of applications to be added to the group
               * Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_applications is not None:
            pulumi.set(__self__, "network_applications", network_applications)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the network application group
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Network application group name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkApplications")
    def network_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Any number of applications to be added to the group
        * Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)
        """
        return pulumi.get(self, "network_applications")

    @network_applications.setter
    def network_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "network_applications", value)


class FirewallFilteringApplicationGroups(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        The **zia_firewall_filtering_network_application_groups** resource allows the creation and management of ZIA Cloud Firewall IP source groups in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        # Add applications to a network application group
        example = zia.FirewallFilteringApplicationGroups("example",
            description="Example",
            network_applications=[
                "LDAP",
                "LDAPS",
                "SRVLOC",
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_firewall_filtering_network_application_groups** can be imported by using `<GROUP_ID>` or `<GROUP_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/firewallFilteringApplicationGroups:FirewallFilteringApplicationGroups example <group_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/firewallFilteringApplicationGroups:FirewallFilteringApplicationGroups example <group_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the network application group
        :param pulumi.Input[str] name: Network application group name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_applications: Any number of applications to be added to the group
               * Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FirewallFilteringApplicationGroupsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_firewall_filtering_network_application_groups** resource allows the creation and management of ZIA Cloud Firewall IP source groups in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        # Add applications to a network application group
        example = zia.FirewallFilteringApplicationGroups("example",
            description="Example",
            network_applications=[
                "LDAP",
                "LDAPS",
                "SRVLOC",
            ])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_firewall_filtering_network_application_groups** can be imported by using `<GROUP_ID>` or `<GROUP_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/firewallFilteringApplicationGroups:FirewallFilteringApplicationGroups example <group_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/firewallFilteringApplicationGroups:FirewallFilteringApplicationGroups example <group_name>
        ```

        :param str resource_name: The name of the resource.
        :param FirewallFilteringApplicationGroupsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FirewallFilteringApplicationGroupsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FirewallFilteringApplicationGroupsArgs.__new__(FirewallFilteringApplicationGroupsArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["network_applications"] = network_applications
            __props__.__dict__["app_id"] = None
        super(FirewallFilteringApplicationGroups, __self__).__init__(
            'zia:index/firewallFilteringApplicationGroups:FirewallFilteringApplicationGroups',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'FirewallFilteringApplicationGroups':
        """
        Get an existing FirewallFilteringApplicationGroups resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the network application group
        :param pulumi.Input[str] name: Network application group name
        :param pulumi.Input[Sequence[pulumi.Input[str]]] network_applications: Any number of applications to be added to the group
               * Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FirewallFilteringApplicationGroupsState.__new__(_FirewallFilteringApplicationGroupsState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["network_applications"] = network_applications
        return FirewallFilteringApplicationGroups(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the network application group
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Network application group name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkApplications")
    def network_applications(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Any number of applications to be added to the group
        * Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)
        """
        return pulumi.get(self, "network_applications")

