# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetVirtualServiceEdgeClusterResult',
    'AwaitableGetVirtualServiceEdgeClusterResult',
    'get_virtual_service_edge_cluster',
    'get_virtual_service_edge_cluster_output',
]

@pulumi.output_type
class GetVirtualServiceEdgeClusterResult:
    """
    A collection of values returned by getVirtualServiceEdgeCluster.
    """
    def __init__(__self__, default_gateway=None, id=None, ip_address=None, ip_sec_enabled=None, last_modified_time=None, name=None, status=None, subnet_mask=None, type=None, virtual_zen_nodes=None):
        if default_gateway and not isinstance(default_gateway, str):
            raise TypeError("Expected argument 'default_gateway' to be a str")
        pulumi.set(__self__, "default_gateway", default_gateway)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if ip_sec_enabled and not isinstance(ip_sec_enabled, bool):
            raise TypeError("Expected argument 'ip_sec_enabled' to be a bool")
        pulumi.set(__self__, "ip_sec_enabled", ip_sec_enabled)
        if last_modified_time and not isinstance(last_modified_time, int):
            raise TypeError("Expected argument 'last_modified_time' to be a int")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if subnet_mask and not isinstance(subnet_mask, str):
            raise TypeError("Expected argument 'subnet_mask' to be a str")
        pulumi.set(__self__, "subnet_mask", subnet_mask)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if virtual_zen_nodes and not isinstance(virtual_zen_nodes, list):
            raise TypeError("Expected argument 'virtual_zen_nodes' to be a list")
        pulumi.set(__self__, "virtual_zen_nodes", virtual_zen_nodes)

    @property
    @pulumi.getter(name="defaultGateway")
    def default_gateway(self) -> builtins.str:
        """
        (String) The IP address of the default gateway to the internet
        """
        return pulumi.get(self, "default_gateway")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        (Number) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> builtins.str:
        """
        (String) The Virtual Service Edge cluster IP address. In a Virtual Service Edge cluster, the cluster IP address provides fault tolerance and is used to listen for user traffic. This interface doesn't explicitly get an IP address. The cluster IP address must be in the same VLAN as the proxy and load balancer IP addresses.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="ipSecEnabled")
    def ip_sec_enabled(self) -> builtins.bool:
        """
        (String) A Boolean value that specifies whether to terminate IPSec traffic from the client at selected Virtual Service Edge instances for the Virtual Service Edge cluster
        """
        return pulumi.get(self, "ip_sec_enabled")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> builtins.int:
        """
        (Number) When the cluster was last modified
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        (Number) Specifies the status of the Virtual Service Edge cluster. The status is set to `ENABLED` by default.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetMask")
    def subnet_mask(self) -> builtins.str:
        """
        (String) The Virtual Service Edge cluster subnet mask
        """
        return pulumi.get(self, "subnet_mask")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (String) The Virtual Service Edge cluster type
        `ANY`, `NONE`, `SME`, `SMSM`, `SMCA`, `SMUI`, `SMCDS`, `SMDNSD`, `SMAA`, `SMTP`,`SMQTN`,`VIP`,
        `UIZ`, `UIAE`, `SITEREVIEW`, `PAC`, `S_RELAY`, `M_RELAY`, `H_MON`, `SMIKE`, `NSS`, `SMEZA`, `SMLB`,
        `SMFCCLT`, `SMBA`, `SMBAC`, `SMESXI`, `SMBAUI`, `VZEN`, `ZSCMCLT`, `SMDLP`, `ZSQUERY`, `ADP`, `SMCDSDLP`,
        `SMSCIM`, `ZSAPI`, `ZSCMCDSSCLT`, `LOCAL_MTS`, `SVPN`, `SMCASB`, `SMFALCONUI`, `MOBILEAPP_REG`, `SMRESTSVR`,
        `FALCONCA`, `MOBILEAPP_NF`, `ZIRSVR`, `SMEDGEUI`, `ALERTEVAL`, `ALERTNOTIF`, `SMPARTNERUI`, `CQM`, `DATAKEEPER`,
        `SMBAM`, `ZWACLT`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="virtualZenNodes")
    def virtual_zen_nodes(self) -> Sequence['outputs.GetVirtualServiceEdgeClusterVirtualZenNodeResult']:
        """
        (List of Object) The Virtual Service Edge instances you want to include in the cluster. A Virtual Service Edge cluster must contain at least two Virtual Service Edge instances.
        """
        return pulumi.get(self, "virtual_zen_nodes")


class AwaitableGetVirtualServiceEdgeClusterResult(GetVirtualServiceEdgeClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualServiceEdgeClusterResult(
            default_gateway=self.default_gateway,
            id=self.id,
            ip_address=self.ip_address,
            ip_sec_enabled=self.ip_sec_enabled,
            last_modified_time=self.last_modified_time,
            name=self.name,
            status=self.status,
            subnet_mask=self.subnet_mask,
            type=self.type,
            virtual_zen_nodes=self.virtual_zen_nodes)


def get_virtual_service_edge_cluster(id: Optional[builtins.int] = None,
                                     name: Optional[builtins.str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVirtualServiceEdgeClusterResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-virtual-service-edge-clusters)
    * [API documentation](https://help.zscaler.com/zia/service-edges#/virtualZenClusters-get)

    Use the **zia_virtual_service_edge_cluster** data source to get information about a Virtual Service Edge Cluster information for the specified `Name` or `ID`


    :param builtins.int id: USystem-generated Virtual Service Edge cluster ID
    :param builtins.str name: Name of the Virtual Service Edge cluster
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getVirtualServiceEdgeCluster:getVirtualServiceEdgeCluster', __args__, opts=opts, typ=GetVirtualServiceEdgeClusterResult).value

    return AwaitableGetVirtualServiceEdgeClusterResult(
        default_gateway=pulumi.get(__ret__, 'default_gateway'),
        id=pulumi.get(__ret__, 'id'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        ip_sec_enabled=pulumi.get(__ret__, 'ip_sec_enabled'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        name=pulumi.get(__ret__, 'name'),
        status=pulumi.get(__ret__, 'status'),
        subnet_mask=pulumi.get(__ret__, 'subnet_mask'),
        type=pulumi.get(__ret__, 'type'),
        virtual_zen_nodes=pulumi.get(__ret__, 'virtual_zen_nodes'))
def get_virtual_service_edge_cluster_output(id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                                            name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetVirtualServiceEdgeClusterResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-virtual-service-edge-clusters)
    * [API documentation](https://help.zscaler.com/zia/service-edges#/virtualZenClusters-get)

    Use the **zia_virtual_service_edge_cluster** data source to get information about a Virtual Service Edge Cluster information for the specified `Name` or `ID`


    :param builtins.int id: USystem-generated Virtual Service Edge cluster ID
    :param builtins.str name: Name of the Virtual Service Edge cluster
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getVirtualServiceEdgeCluster:getVirtualServiceEdgeCluster', __args__, opts=opts, typ=GetVirtualServiceEdgeClusterResult)
    return __ret__.apply(lambda __response__: GetVirtualServiceEdgeClusterResult(
        default_gateway=pulumi.get(__response__, 'default_gateway'),
        id=pulumi.get(__response__, 'id'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        ip_sec_enabled=pulumi.get(__response__, 'ip_sec_enabled'),
        last_modified_time=pulumi.get(__response__, 'last_modified_time'),
        name=pulumi.get(__response__, 'name'),
        status=pulumi.get(__response__, 'status'),
        subnet_mask=pulumi.get(__response__, 'subnet_mask'),
        type=pulumi.get(__response__, 'type'),
        virtual_zen_nodes=pulumi.get(__response__, 'virtual_zen_nodes')))
