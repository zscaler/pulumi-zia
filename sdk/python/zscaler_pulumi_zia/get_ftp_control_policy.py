# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetFtpControlPolicyResult',
    'AwaitableGetFtpControlPolicyResult',
    'get_ftp_control_policy',
    'get_ftp_control_policy_output',
]

@pulumi.output_type
class GetFtpControlPolicyResult:
    """
    A collection of values returned by getFtpControlPolicy.
    """
    def __init__(__self__, ftp_enabled=None, ftp_over_http_enabled=None, id=None, url_categories=None, urls=None):
        if ftp_enabled and not isinstance(ftp_enabled, bool):
            raise TypeError("Expected argument 'ftp_enabled' to be a bool")
        pulumi.set(__self__, "ftp_enabled", ftp_enabled)
        if ftp_over_http_enabled and not isinstance(ftp_over_http_enabled, bool):
            raise TypeError("Expected argument 'ftp_over_http_enabled' to be a bool")
        pulumi.set(__self__, "ftp_over_http_enabled", ftp_over_http_enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if url_categories and not isinstance(url_categories, list):
            raise TypeError("Expected argument 'url_categories' to be a list")
        pulumi.set(__self__, "url_categories", url_categories)
        if urls and not isinstance(urls, list):
            raise TypeError("Expected argument 'urls' to be a list")
        pulumi.set(__self__, "urls", urls)

    @property
    @pulumi.getter(name="ftpEnabled")
    def ftp_enabled(self) -> builtins.bool:
        """
        (Boolean) Indicates whether to enable native FTP. When enabled, users can connect to native FTP sites and download files.
        """
        return pulumi.get(self, "ftp_enabled")

    @property
    @pulumi.getter(name="ftpOverHttpEnabled")
    def ftp_over_http_enabled(self) -> builtins.bool:
        """
        (Boolean) Indicates whether to enable FTP over HTTP. By default, the Zscaler service doesn't allow users from a location to upload or download files from FTP sites that use FTP over HTTP. Select this to enable browsers to connect to FTP over HTTP sites and download files. If a remote user uses a dedicated port, then the service supports FTP over HTTP for them.
        """
        return pulumi.get(self, "ftp_over_http_enabled")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Sequence[builtins.str]:
        """
        (List of Strings) List of URL categories that allow FTP traffic
        """
        return pulumi.get(self, "url_categories")

    @property
    @pulumi.getter
    def urls(self) -> Sequence[builtins.str]:
        """
        (List of Strings) Domains or URLs included for the FTP Control settings
        """
        return pulumi.get(self, "urls")


class AwaitableGetFtpControlPolicyResult(GetFtpControlPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFtpControlPolicyResult(
            ftp_enabled=self.ftp_enabled,
            ftp_over_http_enabled=self.ftp_over_http_enabled,
            id=self.id,
            url_categories=self.url_categories,
            urls=self.urls)


def get_ftp_control_policy(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFtpControlPolicyResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-ftp-control)
    * [API documentation](https://help.zscaler.com/zia/ftp-control-policy#/ftpSettings-get)

    Use the **zia_ftp_control_policy** data source to retrieves the FTP Control Policy configuration. To learn more see [Configuring the FTP Control Policy](https://help.zscaler.com/zia/configuring-ftp-control-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getFtpControlPolicy:getFtpControlPolicy', __args__, opts=opts, typ=GetFtpControlPolicyResult).value

    return AwaitableGetFtpControlPolicyResult(
        ftp_enabled=pulumi.get(__ret__, 'ftp_enabled'),
        ftp_over_http_enabled=pulumi.get(__ret__, 'ftp_over_http_enabled'),
        id=pulumi.get(__ret__, 'id'),
        url_categories=pulumi.get(__ret__, 'url_categories'),
        urls=pulumi.get(__ret__, 'urls'))
def get_ftp_control_policy_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFtpControlPolicyResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-ftp-control)
    * [API documentation](https://help.zscaler.com/zia/ftp-control-policy#/ftpSettings-get)

    Use the **zia_ftp_control_policy** data source to retrieves the FTP Control Policy configuration. To learn more see [Configuring the FTP Control Policy](https://help.zscaler.com/zia/configuring-ftp-control-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getFtpControlPolicy:getFtpControlPolicy', __args__, opts=opts, typ=GetFtpControlPolicyResult)
    return __ret__.apply(lambda __response__: GetFtpControlPolicyResult(
        ftp_enabled=pulumi.get(__response__, 'ftp_enabled'),
        ftp_over_http_enabled=pulumi.get(__response__, 'ftp_over_http_enabled'),
        id=pulumi.get(__response__, 'id'),
        url_categories=pulumi.get(__response__, 'url_categories'),
        urls=pulumi.get(__response__, 'urls')))
