# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DLPEnginesArgs', 'DLPEngines']

@pulumi.input_type
class DLPEnginesArgs:
    def __init__(__self__, *,
                 custom_dlp_engine: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine_expression: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DLPEngines resource.
        :param pulumi.Input[bool] custom_dlp_engine: Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.
        :param pulumi.Input[str] description: The DLP engine's description.
        :param pulumi.Input[str] engine_expression: The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.
        :param pulumi.Input[str] name: The DLP engine name as configured by the admin. This attribute is required in POST and PUT requests for custom DLP engines.
        """
        if custom_dlp_engine is not None:
            pulumi.set(__self__, "custom_dlp_engine", custom_dlp_engine)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine_expression is not None:
            pulumi.set(__self__, "engine_expression", engine_expression)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="customDlpEngine")
    def custom_dlp_engine(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.
        """
        return pulumi.get(self, "custom_dlp_engine")

    @custom_dlp_engine.setter
    def custom_dlp_engine(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_dlp_engine", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP engine's description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="engineExpression")
    def engine_expression(self) -> Optional[pulumi.Input[str]]:
        """
        The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.
        """
        return pulumi.get(self, "engine_expression")

    @engine_expression.setter
    def engine_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_expression", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP engine name as configured by the admin. This attribute is required in POST and PUT requests for custom DLP engines.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _DLPEnginesState:
    def __init__(__self__, *,
                 custom_dlp_engine: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine_expression: Optional[pulumi.Input[str]] = None,
                 engine_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DLPEngines resources.
        :param pulumi.Input[bool] custom_dlp_engine: Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.
        :param pulumi.Input[str] description: The DLP engine's description.
        :param pulumi.Input[str] engine_expression: The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.
        :param pulumi.Input[str] name: The DLP engine name as configured by the admin. This attribute is required in POST and PUT requests for custom DLP engines.
        """
        if custom_dlp_engine is not None:
            pulumi.set(__self__, "custom_dlp_engine", custom_dlp_engine)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if engine_expression is not None:
            pulumi.set(__self__, "engine_expression", engine_expression)
        if engine_id is not None:
            pulumi.set(__self__, "engine_id", engine_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="customDlpEngine")
    def custom_dlp_engine(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.
        """
        return pulumi.get(self, "custom_dlp_engine")

    @custom_dlp_engine.setter
    def custom_dlp_engine(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_dlp_engine", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP engine's description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="engineExpression")
    def engine_expression(self) -> Optional[pulumi.Input[str]]:
        """
        The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.
        """
        return pulumi.get(self, "engine_expression")

    @engine_expression.setter
    def engine_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_expression", value)

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "engine_id")

    @engine_id.setter
    def engine_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "engine_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP engine name as configured by the admin. This attribute is required in POST and PUT requests for custom DLP engines.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class DLPEngines(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_dlp_engine: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine_expression: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Use the **zia_dlp_engines** resource allows the creation and management of ZIA DLP Engines in the Zscaler Internet Access cloud or via the API.

        ⚠️ **WARNING:** "Before using the new ``DLPEngines`` resource contact [Zscaler Support](https://help.zscaler.com/login-tickets)." and request the following API methods ``POST``, ``PUT``, and ``DELETE`` to be enabled for your organization.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        # Retrieve a DLP Engine by name
        this = zia.DLPEngines("this",
            custom_dlp_engine=True,
            description="Example",
            engine_expression="((D63.S > 1))")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_dlp_engines** can be imported by using `<ENGINE_ID>` or `<ENGINE_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/dLPEngines:DLPEngines example <engine_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/dLPEngines:DLPEngines example <engine_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] custom_dlp_engine: Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.
        :param pulumi.Input[str] description: The DLP engine's description.
        :param pulumi.Input[str] engine_expression: The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.
        :param pulumi.Input[str] name: The DLP engine name as configured by the admin. This attribute is required in POST and PUT requests for custom DLP engines.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DLPEnginesArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Use the **zia_dlp_engines** resource allows the creation and management of ZIA DLP Engines in the Zscaler Internet Access cloud or via the API.

        ⚠️ **WARNING:** "Before using the new ``DLPEngines`` resource contact [Zscaler Support](https://help.zscaler.com/login-tickets)." and request the following API methods ``POST``, ``PUT``, and ``DELETE`` to be enabled for your organization.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        # Retrieve a DLP Engine by name
        this = zia.DLPEngines("this",
            custom_dlp_engine=True,
            description="Example",
            engine_expression="((D63.S > 1))")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_dlp_engines** can be imported by using `<ENGINE_ID>` or `<ENGINE_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/dLPEngines:DLPEngines example <engine_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/dLPEngines:DLPEngines example <engine_name>
        ```

        :param str resource_name: The name of the resource.
        :param DLPEnginesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DLPEnginesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_dlp_engine: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 engine_expression: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DLPEnginesArgs.__new__(DLPEnginesArgs)

            __props__.__dict__["custom_dlp_engine"] = custom_dlp_engine
            __props__.__dict__["description"] = description
            __props__.__dict__["engine_expression"] = engine_expression
            __props__.__dict__["name"] = name
            __props__.__dict__["engine_id"] = None
        super(DLPEngines, __self__).__init__(
            'zia:index/dLPEngines:DLPEngines',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            custom_dlp_engine: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            engine_expression: Optional[pulumi.Input[str]] = None,
            engine_id: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'DLPEngines':
        """
        Get an existing DLPEngines resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] custom_dlp_engine: Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.
        :param pulumi.Input[str] description: The DLP engine's description.
        :param pulumi.Input[str] engine_expression: The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.
        :param pulumi.Input[str] name: The DLP engine name as configured by the admin. This attribute is required in POST and PUT requests for custom DLP engines.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DLPEnginesState.__new__(_DLPEnginesState)

        __props__.__dict__["custom_dlp_engine"] = custom_dlp_engine
        __props__.__dict__["description"] = description
        __props__.__dict__["engine_expression"] = engine_expression
        __props__.__dict__["engine_id"] = engine_id
        __props__.__dict__["name"] = name
        return DLPEngines(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customDlpEngine")
    def custom_dlp_engine(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether this is a custom DLP engine. If this value is set to true, the engine is custom.
        """
        return pulumi.get(self, "custom_dlp_engine")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The DLP engine's description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="engineExpression")
    def engine_expression(self) -> pulumi.Output[Optional[str]]:
        """
        The boolean logical operator in which various DLP dictionaries are combined within a DLP engine's expression.
        """
        return pulumi.get(self, "engine_expression")

    @property
    @pulumi.getter(name="engineId")
    def engine_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "engine_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The DLP engine name as configured by the admin. This attribute is required in POST and PUT requests for custom DLP engines.
        """
        return pulumi.get(self, "name")

