# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RiskProfilesArgs', 'RiskProfiles']

@pulumi.input_type
class RiskProfilesArgs:
    def __init__(__self__, *,
                 admin_audit_logs: Optional[pulumi.Input[builtins.str]] = None,
                 certifications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 custom_tags: Optional[pulumi.Input['RiskProfilesCustomTagsArgs']] = None,
                 data_breach: Optional[pulumi.Input[builtins.str]] = None,
                 data_encryption_in_transits: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_caa_policy: Optional[pulumi.Input[builtins.str]] = None,
                 domain_based_message_auth: Optional[pulumi.Input[builtins.str]] = None,
                 domain_keys_identified_mail: Optional[pulumi.Input[builtins.str]] = None,
                 evasive: Optional[pulumi.Input[builtins.str]] = None,
                 exclude_certificates: Optional[pulumi.Input[builtins.int]] = None,
                 file_sharing: Optional[pulumi.Input[builtins.str]] = None,
                 http_security_headers: Optional[pulumi.Input[builtins.str]] = None,
                 malware_scanning_for_content: Optional[pulumi.Input[builtins.str]] = None,
                 mfa_support: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 password_strength: Optional[pulumi.Input[builtins.str]] = None,
                 poor_items_of_service: Optional[pulumi.Input[builtins.str]] = None,
                 profile_type: Optional[pulumi.Input[builtins.str]] = None,
                 remote_screen_sharing: Optional[pulumi.Input[builtins.str]] = None,
                 risk_indices: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 sender_policy_framework: Optional[pulumi.Input[builtins.str]] = None,
                 source_ip_restrictions: Optional[pulumi.Input[builtins.str]] = None,
                 ssl_cert_key_size: Optional[pulumi.Input[builtins.str]] = None,
                 ssl_cert_validity: Optional[pulumi.Input[builtins.str]] = None,
                 ssl_pinned: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 support_for_waf: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerability: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerability_disclosure: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerable_to_heart_bleed: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerable_to_log_jam: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerable_to_poodle: Optional[pulumi.Input[builtins.str]] = None,
                 weak_cipher_support: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a RiskProfiles resource.
        :param pulumi.Input[builtins.str] admin_audit_logs: (String) Filters based on support for administrative logging. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] certifications: (Optional) Filters based on supported certifications.
        :param pulumi.Input['RiskProfilesCustomTagsArgs'] custom_tags: (Set) List of custom tags to be included or excluded for the profile.
        :param pulumi.Input[builtins.str] data_breach: (String) Filters based on history of data breaches. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] data_encryption_in_transits: (Optional) Filters based on encryption of data in transit.
        :param pulumi.Input[builtins.str] dns_caa_policy: (String) Filters based on DNS CAA policy implementation.
        :param pulumi.Input[builtins.str] domain_based_message_auth: (String) Filters based on DMARC support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] domain_keys_identified_mail: (String) Filters based on DKIM authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] evasive: (String) Filters based on anonymous access support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.int] exclude_certificates: (Int) Indicates if the certificates are included or not.
        :param pulumi.Input[builtins.str] file_sharing: (String) Filters based on file sharing capability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] http_security_headers: (String) Filters based on HTTP security headers support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] malware_scanning_for_content: (String) Filters based on content malware scanning. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] mfa_support: (String) Filters based on multi-factor authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] name: Cloud application risk profile name.
        :param pulumi.Input[builtins.str] password_strength: (String) Filters based on password strength policy. Supported values: `ANY`, `GOOD`, `POOR`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] poor_items_of_service: (String) Filters applications based on questionable legal terms. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] profile_type: (String) Risk profile type. Supported value: `CLOUD_APPLICATIONS`. Default is `CLOUD_APPLICATIONS`.
        :param pulumi.Input[builtins.str] remote_screen_sharing: (String) Filters based on remote screen sharing support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] risk_indices: (Optional) Filters based on risk index thresholds.
        :param pulumi.Input[builtins.str] sender_policy_framework: (String) Filters based on SPF authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] source_ip_restrictions: (String) Filters based on IP restriction support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] ssl_cert_key_size: (String) Filters based on SSL certificate key size. Supported values: `ANY`, `UN_KNOWN`, `BITS_1024`, `BITS_2048`, `BITS_256`, `BITS_3072`, `BITS_384`, `BITS_4096`, `BITS_8192`.
        :param pulumi.Input[builtins.str] ssl_cert_validity: (String) Filters based on SSL certificate validity period. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] ssl_pinned: (String) Filters based on use of pinned SSL certificates. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] status: (String) Status of the applications. Supported values: `UN_SANCTIONED`, `SANCTIONED`, `ANY`.
        :param pulumi.Input[builtins.str] support_for_waf: (String) Filters based on Web Application Firewall (WAF) support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerability: (String) Filters based on published CVE vulnerabilities. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerability_disclosure: (String) Filters based on vulnerability disclosure policy. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerable_to_heart_bleed: (String) Filters based on Heartbleed vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerable_to_log_jam: (String) Filters based on Logjam vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerable_to_poodle: (String) Filters based on POODLE vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] weak_cipher_support: (String) Filters based on weak cipher usage. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        if admin_audit_logs is not None:
            pulumi.set(__self__, "admin_audit_logs", admin_audit_logs)
        if certifications is not None:
            pulumi.set(__self__, "certifications", certifications)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)
        if data_breach is not None:
            pulumi.set(__self__, "data_breach", data_breach)
        if data_encryption_in_transits is not None:
            pulumi.set(__self__, "data_encryption_in_transits", data_encryption_in_transits)
        if dns_caa_policy is not None:
            pulumi.set(__self__, "dns_caa_policy", dns_caa_policy)
        if domain_based_message_auth is not None:
            pulumi.set(__self__, "domain_based_message_auth", domain_based_message_auth)
        if domain_keys_identified_mail is not None:
            pulumi.set(__self__, "domain_keys_identified_mail", domain_keys_identified_mail)
        if evasive is not None:
            pulumi.set(__self__, "evasive", evasive)
        if exclude_certificates is not None:
            pulumi.set(__self__, "exclude_certificates", exclude_certificates)
        if file_sharing is not None:
            pulumi.set(__self__, "file_sharing", file_sharing)
        if http_security_headers is not None:
            pulumi.set(__self__, "http_security_headers", http_security_headers)
        if malware_scanning_for_content is not None:
            pulumi.set(__self__, "malware_scanning_for_content", malware_scanning_for_content)
        if mfa_support is not None:
            pulumi.set(__self__, "mfa_support", mfa_support)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password_strength is not None:
            pulumi.set(__self__, "password_strength", password_strength)
        if poor_items_of_service is not None:
            pulumi.set(__self__, "poor_items_of_service", poor_items_of_service)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if remote_screen_sharing is not None:
            pulumi.set(__self__, "remote_screen_sharing", remote_screen_sharing)
        if risk_indices is not None:
            pulumi.set(__self__, "risk_indices", risk_indices)
        if sender_policy_framework is not None:
            pulumi.set(__self__, "sender_policy_framework", sender_policy_framework)
        if source_ip_restrictions is not None:
            pulumi.set(__self__, "source_ip_restrictions", source_ip_restrictions)
        if ssl_cert_key_size is not None:
            pulumi.set(__self__, "ssl_cert_key_size", ssl_cert_key_size)
        if ssl_cert_validity is not None:
            pulumi.set(__self__, "ssl_cert_validity", ssl_cert_validity)
        if ssl_pinned is not None:
            pulumi.set(__self__, "ssl_pinned", ssl_pinned)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_for_waf is not None:
            pulumi.set(__self__, "support_for_waf", support_for_waf)
        if vulnerability is not None:
            pulumi.set(__self__, "vulnerability", vulnerability)
        if vulnerability_disclosure is not None:
            pulumi.set(__self__, "vulnerability_disclosure", vulnerability_disclosure)
        if vulnerable_to_heart_bleed is not None:
            pulumi.set(__self__, "vulnerable_to_heart_bleed", vulnerable_to_heart_bleed)
        if vulnerable_to_log_jam is not None:
            pulumi.set(__self__, "vulnerable_to_log_jam", vulnerable_to_log_jam)
        if vulnerable_to_poodle is not None:
            pulumi.set(__self__, "vulnerable_to_poodle", vulnerable_to_poodle)
        if weak_cipher_support is not None:
            pulumi.set(__self__, "weak_cipher_support", weak_cipher_support)

    @property
    @pulumi.getter(name="adminAuditLogs")
    def admin_audit_logs(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on support for administrative logging. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "admin_audit_logs")

    @admin_audit_logs.setter
    def admin_audit_logs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "admin_audit_logs", value)

    @property
    @pulumi.getter
    def certifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Optional) Filters based on supported certifications.
        """
        return pulumi.get(self, "certifications")

    @certifications.setter
    def certifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "certifications", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input['RiskProfilesCustomTagsArgs']]:
        """
        (Set) List of custom tags to be included or excluded for the profile.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input['RiskProfilesCustomTagsArgs']]):
        pulumi.set(self, "custom_tags", value)

    @property
    @pulumi.getter(name="dataBreach")
    def data_breach(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on history of data breaches. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "data_breach")

    @data_breach.setter
    def data_breach(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "data_breach", value)

    @property
    @pulumi.getter(name="dataEncryptionInTransits")
    def data_encryption_in_transits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Optional) Filters based on encryption of data in transit.
        """
        return pulumi.get(self, "data_encryption_in_transits")

    @data_encryption_in_transits.setter
    def data_encryption_in_transits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "data_encryption_in_transits", value)

    @property
    @pulumi.getter(name="dnsCaaPolicy")
    def dns_caa_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on DNS CAA policy implementation.
        """
        return pulumi.get(self, "dns_caa_policy")

    @dns_caa_policy.setter
    def dns_caa_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dns_caa_policy", value)

    @property
    @pulumi.getter(name="domainBasedMessageAuth")
    def domain_based_message_auth(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on DMARC support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "domain_based_message_auth")

    @domain_based_message_auth.setter
    def domain_based_message_auth(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain_based_message_auth", value)

    @property
    @pulumi.getter(name="domainKeysIdentifiedMail")
    def domain_keys_identified_mail(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on DKIM authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "domain_keys_identified_mail")

    @domain_keys_identified_mail.setter
    def domain_keys_identified_mail(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain_keys_identified_mail", value)

    @property
    @pulumi.getter
    def evasive(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on anonymous access support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "evasive")

    @evasive.setter
    def evasive(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "evasive", value)

    @property
    @pulumi.getter(name="excludeCertificates")
    def exclude_certificates(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        (Int) Indicates if the certificates are included or not.
        """
        return pulumi.get(self, "exclude_certificates")

    @exclude_certificates.setter
    def exclude_certificates(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "exclude_certificates", value)

    @property
    @pulumi.getter(name="fileSharing")
    def file_sharing(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on file sharing capability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "file_sharing")

    @file_sharing.setter
    def file_sharing(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "file_sharing", value)

    @property
    @pulumi.getter(name="httpSecurityHeaders")
    def http_security_headers(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on HTTP security headers support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "http_security_headers")

    @http_security_headers.setter
    def http_security_headers(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "http_security_headers", value)

    @property
    @pulumi.getter(name="malwareScanningForContent")
    def malware_scanning_for_content(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on content malware scanning. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "malware_scanning_for_content")

    @malware_scanning_for_content.setter
    def malware_scanning_for_content(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "malware_scanning_for_content", value)

    @property
    @pulumi.getter(name="mfaSupport")
    def mfa_support(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on multi-factor authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "mfa_support")

    @mfa_support.setter
    def mfa_support(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mfa_support", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Cloud application risk profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passwordStrength")
    def password_strength(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on password strength policy. Supported values: `ANY`, `GOOD`, `POOR`, `UN_KNOWN`.
        """
        return pulumi.get(self, "password_strength")

    @password_strength.setter
    def password_strength(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password_strength", value)

    @property
    @pulumi.getter(name="poorItemsOfService")
    def poor_items_of_service(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters applications based on questionable legal terms. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "poor_items_of_service")

    @poor_items_of_service.setter
    def poor_items_of_service(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "poor_items_of_service", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Risk profile type. Supported value: `CLOUD_APPLICATIONS`. Default is `CLOUD_APPLICATIONS`.
        """
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter(name="remoteScreenSharing")
    def remote_screen_sharing(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on remote screen sharing support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "remote_screen_sharing")

    @remote_screen_sharing.setter
    def remote_screen_sharing(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_screen_sharing", value)

    @property
    @pulumi.getter(name="riskIndices")
    def risk_indices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        (Optional) Filters based on risk index thresholds.
        """
        return pulumi.get(self, "risk_indices")

    @risk_indices.setter
    def risk_indices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "risk_indices", value)

    @property
    @pulumi.getter(name="senderPolicyFramework")
    def sender_policy_framework(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on SPF authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "sender_policy_framework")

    @sender_policy_framework.setter
    def sender_policy_framework(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sender_policy_framework", value)

    @property
    @pulumi.getter(name="sourceIpRestrictions")
    def source_ip_restrictions(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on IP restriction support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "source_ip_restrictions")

    @source_ip_restrictions.setter
    def source_ip_restrictions(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "source_ip_restrictions", value)

    @property
    @pulumi.getter(name="sslCertKeySize")
    def ssl_cert_key_size(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on SSL certificate key size. Supported values: `ANY`, `UN_KNOWN`, `BITS_1024`, `BITS_2048`, `BITS_256`, `BITS_3072`, `BITS_384`, `BITS_4096`, `BITS_8192`.
        """
        return pulumi.get(self, "ssl_cert_key_size")

    @ssl_cert_key_size.setter
    def ssl_cert_key_size(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ssl_cert_key_size", value)

    @property
    @pulumi.getter(name="sslCertValidity")
    def ssl_cert_validity(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on SSL certificate validity period. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "ssl_cert_validity")

    @ssl_cert_validity.setter
    def ssl_cert_validity(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ssl_cert_validity", value)

    @property
    @pulumi.getter(name="sslPinned")
    def ssl_pinned(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on use of pinned SSL certificates. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "ssl_pinned")

    @ssl_pinned.setter
    def ssl_pinned(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ssl_pinned", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Status of the applications. Supported values: `UN_SANCTIONED`, `SANCTIONED`, `ANY`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="supportForWaf")
    def support_for_waf(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on Web Application Firewall (WAF) support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "support_for_waf")

    @support_for_waf.setter
    def support_for_waf(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "support_for_waf", value)

    @property
    @pulumi.getter
    def vulnerability(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on published CVE vulnerabilities. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerability")

    @vulnerability.setter
    def vulnerability(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vulnerability", value)

    @property
    @pulumi.getter(name="vulnerabilityDisclosure")
    def vulnerability_disclosure(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on vulnerability disclosure policy. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerability_disclosure")

    @vulnerability_disclosure.setter
    def vulnerability_disclosure(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vulnerability_disclosure", value)

    @property
    @pulumi.getter(name="vulnerableToHeartBleed")
    def vulnerable_to_heart_bleed(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on Heartbleed vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerable_to_heart_bleed")

    @vulnerable_to_heart_bleed.setter
    def vulnerable_to_heart_bleed(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vulnerable_to_heart_bleed", value)

    @property
    @pulumi.getter(name="vulnerableToLogJam")
    def vulnerable_to_log_jam(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on Logjam vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerable_to_log_jam")

    @vulnerable_to_log_jam.setter
    def vulnerable_to_log_jam(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vulnerable_to_log_jam", value)

    @property
    @pulumi.getter(name="vulnerableToPoodle")
    def vulnerable_to_poodle(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on POODLE vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerable_to_poodle")

    @vulnerable_to_poodle.setter
    def vulnerable_to_poodle(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vulnerable_to_poodle", value)

    @property
    @pulumi.getter(name="weakCipherSupport")
    def weak_cipher_support(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on weak cipher usage. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "weak_cipher_support")

    @weak_cipher_support.setter
    def weak_cipher_support(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "weak_cipher_support", value)


@pulumi.input_type
class _RiskProfilesState:
    def __init__(__self__, *,
                 admin_audit_logs: Optional[pulumi.Input[builtins.str]] = None,
                 certifications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 custom_tags: Optional[pulumi.Input['RiskProfilesCustomTagsArgs']] = None,
                 data_breach: Optional[pulumi.Input[builtins.str]] = None,
                 data_encryption_in_transits: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_caa_policy: Optional[pulumi.Input[builtins.str]] = None,
                 domain_based_message_auth: Optional[pulumi.Input[builtins.str]] = None,
                 domain_keys_identified_mail: Optional[pulumi.Input[builtins.str]] = None,
                 evasive: Optional[pulumi.Input[builtins.str]] = None,
                 exclude_certificates: Optional[pulumi.Input[builtins.int]] = None,
                 file_sharing: Optional[pulumi.Input[builtins.str]] = None,
                 http_security_headers: Optional[pulumi.Input[builtins.str]] = None,
                 malware_scanning_for_content: Optional[pulumi.Input[builtins.str]] = None,
                 mfa_support: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 password_strength: Optional[pulumi.Input[builtins.str]] = None,
                 poor_items_of_service: Optional[pulumi.Input[builtins.str]] = None,
                 profile_id: Optional[pulumi.Input[builtins.int]] = None,
                 profile_type: Optional[pulumi.Input[builtins.str]] = None,
                 remote_screen_sharing: Optional[pulumi.Input[builtins.str]] = None,
                 risk_indices: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 sender_policy_framework: Optional[pulumi.Input[builtins.str]] = None,
                 source_ip_restrictions: Optional[pulumi.Input[builtins.str]] = None,
                 ssl_cert_key_size: Optional[pulumi.Input[builtins.str]] = None,
                 ssl_cert_validity: Optional[pulumi.Input[builtins.str]] = None,
                 ssl_pinned: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 support_for_waf: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerability: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerability_disclosure: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerable_to_heart_bleed: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerable_to_log_jam: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerable_to_poodle: Optional[pulumi.Input[builtins.str]] = None,
                 weak_cipher_support: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering RiskProfiles resources.
        :param pulumi.Input[builtins.str] admin_audit_logs: (String) Filters based on support for administrative logging. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] certifications: (Optional) Filters based on supported certifications.
        :param pulumi.Input['RiskProfilesCustomTagsArgs'] custom_tags: (Set) List of custom tags to be included or excluded for the profile.
        :param pulumi.Input[builtins.str] data_breach: (String) Filters based on history of data breaches. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] data_encryption_in_transits: (Optional) Filters based on encryption of data in transit.
        :param pulumi.Input[builtins.str] dns_caa_policy: (String) Filters based on DNS CAA policy implementation.
        :param pulumi.Input[builtins.str] domain_based_message_auth: (String) Filters based on DMARC support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] domain_keys_identified_mail: (String) Filters based on DKIM authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] evasive: (String) Filters based on anonymous access support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.int] exclude_certificates: (Int) Indicates if the certificates are included or not.
        :param pulumi.Input[builtins.str] file_sharing: (String) Filters based on file sharing capability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] http_security_headers: (String) Filters based on HTTP security headers support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] malware_scanning_for_content: (String) Filters based on content malware scanning. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] mfa_support: (String) Filters based on multi-factor authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] name: Cloud application risk profile name.
        :param pulumi.Input[builtins.str] password_strength: (String) Filters based on password strength policy. Supported values: `ANY`, `GOOD`, `POOR`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] poor_items_of_service: (String) Filters applications based on questionable legal terms. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.int] profile_id: Unique identifier for the risk profile.
        :param pulumi.Input[builtins.str] profile_type: (String) Risk profile type. Supported value: `CLOUD_APPLICATIONS`. Default is `CLOUD_APPLICATIONS`.
        :param pulumi.Input[builtins.str] remote_screen_sharing: (String) Filters based on remote screen sharing support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] risk_indices: (Optional) Filters based on risk index thresholds.
        :param pulumi.Input[builtins.str] sender_policy_framework: (String) Filters based on SPF authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] source_ip_restrictions: (String) Filters based on IP restriction support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] ssl_cert_key_size: (String) Filters based on SSL certificate key size. Supported values: `ANY`, `UN_KNOWN`, `BITS_1024`, `BITS_2048`, `BITS_256`, `BITS_3072`, `BITS_384`, `BITS_4096`, `BITS_8192`.
        :param pulumi.Input[builtins.str] ssl_cert_validity: (String) Filters based on SSL certificate validity period. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] ssl_pinned: (String) Filters based on use of pinned SSL certificates. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] status: (String) Status of the applications. Supported values: `UN_SANCTIONED`, `SANCTIONED`, `ANY`.
        :param pulumi.Input[builtins.str] support_for_waf: (String) Filters based on Web Application Firewall (WAF) support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerability: (String) Filters based on published CVE vulnerabilities. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerability_disclosure: (String) Filters based on vulnerability disclosure policy. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerable_to_heart_bleed: (String) Filters based on Heartbleed vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerable_to_log_jam: (String) Filters based on Logjam vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerable_to_poodle: (String) Filters based on POODLE vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] weak_cipher_support: (String) Filters based on weak cipher usage. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        if admin_audit_logs is not None:
            pulumi.set(__self__, "admin_audit_logs", admin_audit_logs)
        if certifications is not None:
            pulumi.set(__self__, "certifications", certifications)
        if custom_tags is not None:
            pulumi.set(__self__, "custom_tags", custom_tags)
        if data_breach is not None:
            pulumi.set(__self__, "data_breach", data_breach)
        if data_encryption_in_transits is not None:
            pulumi.set(__self__, "data_encryption_in_transits", data_encryption_in_transits)
        if dns_caa_policy is not None:
            pulumi.set(__self__, "dns_caa_policy", dns_caa_policy)
        if domain_based_message_auth is not None:
            pulumi.set(__self__, "domain_based_message_auth", domain_based_message_auth)
        if domain_keys_identified_mail is not None:
            pulumi.set(__self__, "domain_keys_identified_mail", domain_keys_identified_mail)
        if evasive is not None:
            pulumi.set(__self__, "evasive", evasive)
        if exclude_certificates is not None:
            pulumi.set(__self__, "exclude_certificates", exclude_certificates)
        if file_sharing is not None:
            pulumi.set(__self__, "file_sharing", file_sharing)
        if http_security_headers is not None:
            pulumi.set(__self__, "http_security_headers", http_security_headers)
        if malware_scanning_for_content is not None:
            pulumi.set(__self__, "malware_scanning_for_content", malware_scanning_for_content)
        if mfa_support is not None:
            pulumi.set(__self__, "mfa_support", mfa_support)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password_strength is not None:
            pulumi.set(__self__, "password_strength", password_strength)
        if poor_items_of_service is not None:
            pulumi.set(__self__, "poor_items_of_service", poor_items_of_service)
        if profile_id is not None:
            pulumi.set(__self__, "profile_id", profile_id)
        if profile_type is not None:
            pulumi.set(__self__, "profile_type", profile_type)
        if remote_screen_sharing is not None:
            pulumi.set(__self__, "remote_screen_sharing", remote_screen_sharing)
        if risk_indices is not None:
            pulumi.set(__self__, "risk_indices", risk_indices)
        if sender_policy_framework is not None:
            pulumi.set(__self__, "sender_policy_framework", sender_policy_framework)
        if source_ip_restrictions is not None:
            pulumi.set(__self__, "source_ip_restrictions", source_ip_restrictions)
        if ssl_cert_key_size is not None:
            pulumi.set(__self__, "ssl_cert_key_size", ssl_cert_key_size)
        if ssl_cert_validity is not None:
            pulumi.set(__self__, "ssl_cert_validity", ssl_cert_validity)
        if ssl_pinned is not None:
            pulumi.set(__self__, "ssl_pinned", ssl_pinned)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if support_for_waf is not None:
            pulumi.set(__self__, "support_for_waf", support_for_waf)
        if vulnerability is not None:
            pulumi.set(__self__, "vulnerability", vulnerability)
        if vulnerability_disclosure is not None:
            pulumi.set(__self__, "vulnerability_disclosure", vulnerability_disclosure)
        if vulnerable_to_heart_bleed is not None:
            pulumi.set(__self__, "vulnerable_to_heart_bleed", vulnerable_to_heart_bleed)
        if vulnerable_to_log_jam is not None:
            pulumi.set(__self__, "vulnerable_to_log_jam", vulnerable_to_log_jam)
        if vulnerable_to_poodle is not None:
            pulumi.set(__self__, "vulnerable_to_poodle", vulnerable_to_poodle)
        if weak_cipher_support is not None:
            pulumi.set(__self__, "weak_cipher_support", weak_cipher_support)

    @property
    @pulumi.getter(name="adminAuditLogs")
    def admin_audit_logs(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on support for administrative logging. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "admin_audit_logs")

    @admin_audit_logs.setter
    def admin_audit_logs(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "admin_audit_logs", value)

    @property
    @pulumi.getter
    def certifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Optional) Filters based on supported certifications.
        """
        return pulumi.get(self, "certifications")

    @certifications.setter
    def certifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "certifications", value)

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> Optional[pulumi.Input['RiskProfilesCustomTagsArgs']]:
        """
        (Set) List of custom tags to be included or excluded for the profile.
        """
        return pulumi.get(self, "custom_tags")

    @custom_tags.setter
    def custom_tags(self, value: Optional[pulumi.Input['RiskProfilesCustomTagsArgs']]):
        pulumi.set(self, "custom_tags", value)

    @property
    @pulumi.getter(name="dataBreach")
    def data_breach(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on history of data breaches. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "data_breach")

    @data_breach.setter
    def data_breach(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "data_breach", value)

    @property
    @pulumi.getter(name="dataEncryptionInTransits")
    def data_encryption_in_transits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        (Optional) Filters based on encryption of data in transit.
        """
        return pulumi.get(self, "data_encryption_in_transits")

    @data_encryption_in_transits.setter
    def data_encryption_in_transits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "data_encryption_in_transits", value)

    @property
    @pulumi.getter(name="dnsCaaPolicy")
    def dns_caa_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on DNS CAA policy implementation.
        """
        return pulumi.get(self, "dns_caa_policy")

    @dns_caa_policy.setter
    def dns_caa_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dns_caa_policy", value)

    @property
    @pulumi.getter(name="domainBasedMessageAuth")
    def domain_based_message_auth(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on DMARC support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "domain_based_message_auth")

    @domain_based_message_auth.setter
    def domain_based_message_auth(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain_based_message_auth", value)

    @property
    @pulumi.getter(name="domainKeysIdentifiedMail")
    def domain_keys_identified_mail(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on DKIM authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "domain_keys_identified_mail")

    @domain_keys_identified_mail.setter
    def domain_keys_identified_mail(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain_keys_identified_mail", value)

    @property
    @pulumi.getter
    def evasive(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on anonymous access support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "evasive")

    @evasive.setter
    def evasive(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "evasive", value)

    @property
    @pulumi.getter(name="excludeCertificates")
    def exclude_certificates(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        (Int) Indicates if the certificates are included or not.
        """
        return pulumi.get(self, "exclude_certificates")

    @exclude_certificates.setter
    def exclude_certificates(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "exclude_certificates", value)

    @property
    @pulumi.getter(name="fileSharing")
    def file_sharing(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on file sharing capability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "file_sharing")

    @file_sharing.setter
    def file_sharing(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "file_sharing", value)

    @property
    @pulumi.getter(name="httpSecurityHeaders")
    def http_security_headers(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on HTTP security headers support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "http_security_headers")

    @http_security_headers.setter
    def http_security_headers(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "http_security_headers", value)

    @property
    @pulumi.getter(name="malwareScanningForContent")
    def malware_scanning_for_content(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on content malware scanning. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "malware_scanning_for_content")

    @malware_scanning_for_content.setter
    def malware_scanning_for_content(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "malware_scanning_for_content", value)

    @property
    @pulumi.getter(name="mfaSupport")
    def mfa_support(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on multi-factor authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "mfa_support")

    @mfa_support.setter
    def mfa_support(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mfa_support", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Cloud application risk profile name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="passwordStrength")
    def password_strength(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on password strength policy. Supported values: `ANY`, `GOOD`, `POOR`, `UN_KNOWN`.
        """
        return pulumi.get(self, "password_strength")

    @password_strength.setter
    def password_strength(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password_strength", value)

    @property
    @pulumi.getter(name="poorItemsOfService")
    def poor_items_of_service(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters applications based on questionable legal terms. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "poor_items_of_service")

    @poor_items_of_service.setter
    def poor_items_of_service(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "poor_items_of_service", value)

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Unique identifier for the risk profile.
        """
        return pulumi.get(self, "profile_id")

    @profile_id.setter
    def profile_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "profile_id", value)

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Risk profile type. Supported value: `CLOUD_APPLICATIONS`. Default is `CLOUD_APPLICATIONS`.
        """
        return pulumi.get(self, "profile_type")

    @profile_type.setter
    def profile_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "profile_type", value)

    @property
    @pulumi.getter(name="remoteScreenSharing")
    def remote_screen_sharing(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on remote screen sharing support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "remote_screen_sharing")

    @remote_screen_sharing.setter
    def remote_screen_sharing(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "remote_screen_sharing", value)

    @property
    @pulumi.getter(name="riskIndices")
    def risk_indices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]:
        """
        (Optional) Filters based on risk index thresholds.
        """
        return pulumi.get(self, "risk_indices")

    @risk_indices.setter
    def risk_indices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]]):
        pulumi.set(self, "risk_indices", value)

    @property
    @pulumi.getter(name="senderPolicyFramework")
    def sender_policy_framework(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on SPF authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "sender_policy_framework")

    @sender_policy_framework.setter
    def sender_policy_framework(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sender_policy_framework", value)

    @property
    @pulumi.getter(name="sourceIpRestrictions")
    def source_ip_restrictions(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on IP restriction support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "source_ip_restrictions")

    @source_ip_restrictions.setter
    def source_ip_restrictions(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "source_ip_restrictions", value)

    @property
    @pulumi.getter(name="sslCertKeySize")
    def ssl_cert_key_size(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on SSL certificate key size. Supported values: `ANY`, `UN_KNOWN`, `BITS_1024`, `BITS_2048`, `BITS_256`, `BITS_3072`, `BITS_384`, `BITS_4096`, `BITS_8192`.
        """
        return pulumi.get(self, "ssl_cert_key_size")

    @ssl_cert_key_size.setter
    def ssl_cert_key_size(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ssl_cert_key_size", value)

    @property
    @pulumi.getter(name="sslCertValidity")
    def ssl_cert_validity(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on SSL certificate validity period. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "ssl_cert_validity")

    @ssl_cert_validity.setter
    def ssl_cert_validity(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ssl_cert_validity", value)

    @property
    @pulumi.getter(name="sslPinned")
    def ssl_pinned(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on use of pinned SSL certificates. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "ssl_pinned")

    @ssl_pinned.setter
    def ssl_pinned(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ssl_pinned", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Status of the applications. Supported values: `UN_SANCTIONED`, `SANCTIONED`, `ANY`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="supportForWaf")
    def support_for_waf(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on Web Application Firewall (WAF) support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "support_for_waf")

    @support_for_waf.setter
    def support_for_waf(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "support_for_waf", value)

    @property
    @pulumi.getter
    def vulnerability(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on published CVE vulnerabilities. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerability")

    @vulnerability.setter
    def vulnerability(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vulnerability", value)

    @property
    @pulumi.getter(name="vulnerabilityDisclosure")
    def vulnerability_disclosure(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on vulnerability disclosure policy. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerability_disclosure")

    @vulnerability_disclosure.setter
    def vulnerability_disclosure(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vulnerability_disclosure", value)

    @property
    @pulumi.getter(name="vulnerableToHeartBleed")
    def vulnerable_to_heart_bleed(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on Heartbleed vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerable_to_heart_bleed")

    @vulnerable_to_heart_bleed.setter
    def vulnerable_to_heart_bleed(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vulnerable_to_heart_bleed", value)

    @property
    @pulumi.getter(name="vulnerableToLogJam")
    def vulnerable_to_log_jam(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on Logjam vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerable_to_log_jam")

    @vulnerable_to_log_jam.setter
    def vulnerable_to_log_jam(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vulnerable_to_log_jam", value)

    @property
    @pulumi.getter(name="vulnerableToPoodle")
    def vulnerable_to_poodle(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on POODLE vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerable_to_poodle")

    @vulnerable_to_poodle.setter
    def vulnerable_to_poodle(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vulnerable_to_poodle", value)

    @property
    @pulumi.getter(name="weakCipherSupport")
    def weak_cipher_support(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        (String) Filters based on weak cipher usage. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "weak_cipher_support")

    @weak_cipher_support.setter
    def weak_cipher_support(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "weak_cipher_support", value)


@pulumi.type_token("zia:index/riskProfiles:RiskProfiles")
class RiskProfiles(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_audit_logs: Optional[pulumi.Input[builtins.str]] = None,
                 certifications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 custom_tags: Optional[pulumi.Input[Union['RiskProfilesCustomTagsArgs', 'RiskProfilesCustomTagsArgsDict']]] = None,
                 data_breach: Optional[pulumi.Input[builtins.str]] = None,
                 data_encryption_in_transits: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_caa_policy: Optional[pulumi.Input[builtins.str]] = None,
                 domain_based_message_auth: Optional[pulumi.Input[builtins.str]] = None,
                 domain_keys_identified_mail: Optional[pulumi.Input[builtins.str]] = None,
                 evasive: Optional[pulumi.Input[builtins.str]] = None,
                 exclude_certificates: Optional[pulumi.Input[builtins.int]] = None,
                 file_sharing: Optional[pulumi.Input[builtins.str]] = None,
                 http_security_headers: Optional[pulumi.Input[builtins.str]] = None,
                 malware_scanning_for_content: Optional[pulumi.Input[builtins.str]] = None,
                 mfa_support: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 password_strength: Optional[pulumi.Input[builtins.str]] = None,
                 poor_items_of_service: Optional[pulumi.Input[builtins.str]] = None,
                 profile_type: Optional[pulumi.Input[builtins.str]] = None,
                 remote_screen_sharing: Optional[pulumi.Input[builtins.str]] = None,
                 risk_indices: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 sender_policy_framework: Optional[pulumi.Input[builtins.str]] = None,
                 source_ip_restrictions: Optional[pulumi.Input[builtins.str]] = None,
                 ssl_cert_key_size: Optional[pulumi.Input[builtins.str]] = None,
                 ssl_cert_validity: Optional[pulumi.Input[builtins.str]] = None,
                 ssl_pinned: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 support_for_waf: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerability: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerability_disclosure: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerable_to_heart_bleed: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerable_to_log_jam: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerable_to_poodle: Optional[pulumi.Input[builtins.str]] = None,
                 weak_cipher_support: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zia/about-cloud-application-risk-profile)
        * [API documentation](https://help.zscaler.com/zia/cloud-applications#/riskProfiles-get)

        Use the **zia_risk_profiles** resource allows the creation and management of cloud application risk profile in the Zscaler Internet Access cloud or via the API.
        See [About Cloud Application Risk Profile](https://help.zscaler.com/zia/about-cloud-application-risk-profile) for more details.

        ## Example Usage

        ### Create A Risk Profile

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_risk_profiles** can be imported by using `<PROFILE_ID>` or `<PROFILE_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/riskProfiles:RiskProfiles example <profile_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/riskProfiles:RiskProfiles example <profile_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] admin_audit_logs: (String) Filters based on support for administrative logging. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] certifications: (Optional) Filters based on supported certifications.
        :param pulumi.Input[Union['RiskProfilesCustomTagsArgs', 'RiskProfilesCustomTagsArgsDict']] custom_tags: (Set) List of custom tags to be included or excluded for the profile.
        :param pulumi.Input[builtins.str] data_breach: (String) Filters based on history of data breaches. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] data_encryption_in_transits: (Optional) Filters based on encryption of data in transit.
        :param pulumi.Input[builtins.str] dns_caa_policy: (String) Filters based on DNS CAA policy implementation.
        :param pulumi.Input[builtins.str] domain_based_message_auth: (String) Filters based on DMARC support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] domain_keys_identified_mail: (String) Filters based on DKIM authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] evasive: (String) Filters based on anonymous access support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.int] exclude_certificates: (Int) Indicates if the certificates are included or not.
        :param pulumi.Input[builtins.str] file_sharing: (String) Filters based on file sharing capability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] http_security_headers: (String) Filters based on HTTP security headers support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] malware_scanning_for_content: (String) Filters based on content malware scanning. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] mfa_support: (String) Filters based on multi-factor authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] name: Cloud application risk profile name.
        :param pulumi.Input[builtins.str] password_strength: (String) Filters based on password strength policy. Supported values: `ANY`, `GOOD`, `POOR`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] poor_items_of_service: (String) Filters applications based on questionable legal terms. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] profile_type: (String) Risk profile type. Supported value: `CLOUD_APPLICATIONS`. Default is `CLOUD_APPLICATIONS`.
        :param pulumi.Input[builtins.str] remote_screen_sharing: (String) Filters based on remote screen sharing support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] risk_indices: (Optional) Filters based on risk index thresholds.
        :param pulumi.Input[builtins.str] sender_policy_framework: (String) Filters based on SPF authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] source_ip_restrictions: (String) Filters based on IP restriction support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] ssl_cert_key_size: (String) Filters based on SSL certificate key size. Supported values: `ANY`, `UN_KNOWN`, `BITS_1024`, `BITS_2048`, `BITS_256`, `BITS_3072`, `BITS_384`, `BITS_4096`, `BITS_8192`.
        :param pulumi.Input[builtins.str] ssl_cert_validity: (String) Filters based on SSL certificate validity period. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] ssl_pinned: (String) Filters based on use of pinned SSL certificates. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] status: (String) Status of the applications. Supported values: `UN_SANCTIONED`, `SANCTIONED`, `ANY`.
        :param pulumi.Input[builtins.str] support_for_waf: (String) Filters based on Web Application Firewall (WAF) support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerability: (String) Filters based on published CVE vulnerabilities. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerability_disclosure: (String) Filters based on vulnerability disclosure policy. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerable_to_heart_bleed: (String) Filters based on Heartbleed vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerable_to_log_jam: (String) Filters based on Logjam vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerable_to_poodle: (String) Filters based on POODLE vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] weak_cipher_support: (String) Filters based on weak cipher usage. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RiskProfilesArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zia/about-cloud-application-risk-profile)
        * [API documentation](https://help.zscaler.com/zia/cloud-applications#/riskProfiles-get)

        Use the **zia_risk_profiles** resource allows the creation and management of cloud application risk profile in the Zscaler Internet Access cloud or via the API.
        See [About Cloud Application Risk Profile](https://help.zscaler.com/zia/about-cloud-application-risk-profile) for more details.

        ## Example Usage

        ### Create A Risk Profile

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_risk_profiles** can be imported by using `<PROFILE_ID>` or `<PROFILE_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/riskProfiles:RiskProfiles example <profile_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/riskProfiles:RiskProfiles example <profile_name>
        ```

        :param str resource_name: The name of the resource.
        :param RiskProfilesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RiskProfilesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_audit_logs: Optional[pulumi.Input[builtins.str]] = None,
                 certifications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 custom_tags: Optional[pulumi.Input[Union['RiskProfilesCustomTagsArgs', 'RiskProfilesCustomTagsArgsDict']]] = None,
                 data_breach: Optional[pulumi.Input[builtins.str]] = None,
                 data_encryption_in_transits: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 dns_caa_policy: Optional[pulumi.Input[builtins.str]] = None,
                 domain_based_message_auth: Optional[pulumi.Input[builtins.str]] = None,
                 domain_keys_identified_mail: Optional[pulumi.Input[builtins.str]] = None,
                 evasive: Optional[pulumi.Input[builtins.str]] = None,
                 exclude_certificates: Optional[pulumi.Input[builtins.int]] = None,
                 file_sharing: Optional[pulumi.Input[builtins.str]] = None,
                 http_security_headers: Optional[pulumi.Input[builtins.str]] = None,
                 malware_scanning_for_content: Optional[pulumi.Input[builtins.str]] = None,
                 mfa_support: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 password_strength: Optional[pulumi.Input[builtins.str]] = None,
                 poor_items_of_service: Optional[pulumi.Input[builtins.str]] = None,
                 profile_type: Optional[pulumi.Input[builtins.str]] = None,
                 remote_screen_sharing: Optional[pulumi.Input[builtins.str]] = None,
                 risk_indices: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
                 sender_policy_framework: Optional[pulumi.Input[builtins.str]] = None,
                 source_ip_restrictions: Optional[pulumi.Input[builtins.str]] = None,
                 ssl_cert_key_size: Optional[pulumi.Input[builtins.str]] = None,
                 ssl_cert_validity: Optional[pulumi.Input[builtins.str]] = None,
                 ssl_pinned: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 support_for_waf: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerability: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerability_disclosure: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerable_to_heart_bleed: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerable_to_log_jam: Optional[pulumi.Input[builtins.str]] = None,
                 vulnerable_to_poodle: Optional[pulumi.Input[builtins.str]] = None,
                 weak_cipher_support: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RiskProfilesArgs.__new__(RiskProfilesArgs)

            __props__.__dict__["admin_audit_logs"] = admin_audit_logs
            __props__.__dict__["certifications"] = certifications
            __props__.__dict__["custom_tags"] = custom_tags
            __props__.__dict__["data_breach"] = data_breach
            __props__.__dict__["data_encryption_in_transits"] = data_encryption_in_transits
            __props__.__dict__["dns_caa_policy"] = dns_caa_policy
            __props__.__dict__["domain_based_message_auth"] = domain_based_message_auth
            __props__.__dict__["domain_keys_identified_mail"] = domain_keys_identified_mail
            __props__.__dict__["evasive"] = evasive
            __props__.__dict__["exclude_certificates"] = exclude_certificates
            __props__.__dict__["file_sharing"] = file_sharing
            __props__.__dict__["http_security_headers"] = http_security_headers
            __props__.__dict__["malware_scanning_for_content"] = malware_scanning_for_content
            __props__.__dict__["mfa_support"] = mfa_support
            __props__.__dict__["name"] = name
            __props__.__dict__["password_strength"] = password_strength
            __props__.__dict__["poor_items_of_service"] = poor_items_of_service
            __props__.__dict__["profile_type"] = profile_type
            __props__.__dict__["remote_screen_sharing"] = remote_screen_sharing
            __props__.__dict__["risk_indices"] = risk_indices
            __props__.__dict__["sender_policy_framework"] = sender_policy_framework
            __props__.__dict__["source_ip_restrictions"] = source_ip_restrictions
            __props__.__dict__["ssl_cert_key_size"] = ssl_cert_key_size
            __props__.__dict__["ssl_cert_validity"] = ssl_cert_validity
            __props__.__dict__["ssl_pinned"] = ssl_pinned
            __props__.__dict__["status"] = status
            __props__.__dict__["support_for_waf"] = support_for_waf
            __props__.__dict__["vulnerability"] = vulnerability
            __props__.__dict__["vulnerability_disclosure"] = vulnerability_disclosure
            __props__.__dict__["vulnerable_to_heart_bleed"] = vulnerable_to_heart_bleed
            __props__.__dict__["vulnerable_to_log_jam"] = vulnerable_to_log_jam
            __props__.__dict__["vulnerable_to_poodle"] = vulnerable_to_poodle
            __props__.__dict__["weak_cipher_support"] = weak_cipher_support
            __props__.__dict__["profile_id"] = None
        super(RiskProfiles, __self__).__init__(
            'zia:index/riskProfiles:RiskProfiles',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_audit_logs: Optional[pulumi.Input[builtins.str]] = None,
            certifications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            custom_tags: Optional[pulumi.Input[Union['RiskProfilesCustomTagsArgs', 'RiskProfilesCustomTagsArgsDict']]] = None,
            data_breach: Optional[pulumi.Input[builtins.str]] = None,
            data_encryption_in_transits: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            dns_caa_policy: Optional[pulumi.Input[builtins.str]] = None,
            domain_based_message_auth: Optional[pulumi.Input[builtins.str]] = None,
            domain_keys_identified_mail: Optional[pulumi.Input[builtins.str]] = None,
            evasive: Optional[pulumi.Input[builtins.str]] = None,
            exclude_certificates: Optional[pulumi.Input[builtins.int]] = None,
            file_sharing: Optional[pulumi.Input[builtins.str]] = None,
            http_security_headers: Optional[pulumi.Input[builtins.str]] = None,
            malware_scanning_for_content: Optional[pulumi.Input[builtins.str]] = None,
            mfa_support: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            password_strength: Optional[pulumi.Input[builtins.str]] = None,
            poor_items_of_service: Optional[pulumi.Input[builtins.str]] = None,
            profile_id: Optional[pulumi.Input[builtins.int]] = None,
            profile_type: Optional[pulumi.Input[builtins.str]] = None,
            remote_screen_sharing: Optional[pulumi.Input[builtins.str]] = None,
            risk_indices: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.int]]]] = None,
            sender_policy_framework: Optional[pulumi.Input[builtins.str]] = None,
            source_ip_restrictions: Optional[pulumi.Input[builtins.str]] = None,
            ssl_cert_key_size: Optional[pulumi.Input[builtins.str]] = None,
            ssl_cert_validity: Optional[pulumi.Input[builtins.str]] = None,
            ssl_pinned: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            support_for_waf: Optional[pulumi.Input[builtins.str]] = None,
            vulnerability: Optional[pulumi.Input[builtins.str]] = None,
            vulnerability_disclosure: Optional[pulumi.Input[builtins.str]] = None,
            vulnerable_to_heart_bleed: Optional[pulumi.Input[builtins.str]] = None,
            vulnerable_to_log_jam: Optional[pulumi.Input[builtins.str]] = None,
            vulnerable_to_poodle: Optional[pulumi.Input[builtins.str]] = None,
            weak_cipher_support: Optional[pulumi.Input[builtins.str]] = None) -> 'RiskProfiles':
        """
        Get an existing RiskProfiles resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] admin_audit_logs: (String) Filters based on support for administrative logging. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] certifications: (Optional) Filters based on supported certifications.
        :param pulumi.Input[Union['RiskProfilesCustomTagsArgs', 'RiskProfilesCustomTagsArgsDict']] custom_tags: (Set) List of custom tags to be included or excluded for the profile.
        :param pulumi.Input[builtins.str] data_breach: (String) Filters based on history of data breaches. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] data_encryption_in_transits: (Optional) Filters based on encryption of data in transit.
        :param pulumi.Input[builtins.str] dns_caa_policy: (String) Filters based on DNS CAA policy implementation.
        :param pulumi.Input[builtins.str] domain_based_message_auth: (String) Filters based on DMARC support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] domain_keys_identified_mail: (String) Filters based on DKIM authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] evasive: (String) Filters based on anonymous access support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.int] exclude_certificates: (Int) Indicates if the certificates are included or not.
        :param pulumi.Input[builtins.str] file_sharing: (String) Filters based on file sharing capability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] http_security_headers: (String) Filters based on HTTP security headers support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] malware_scanning_for_content: (String) Filters based on content malware scanning. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] mfa_support: (String) Filters based on multi-factor authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] name: Cloud application risk profile name.
        :param pulumi.Input[builtins.str] password_strength: (String) Filters based on password strength policy. Supported values: `ANY`, `GOOD`, `POOR`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] poor_items_of_service: (String) Filters applications based on questionable legal terms. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.int] profile_id: Unique identifier for the risk profile.
        :param pulumi.Input[builtins.str] profile_type: (String) Risk profile type. Supported value: `CLOUD_APPLICATIONS`. Default is `CLOUD_APPLICATIONS`.
        :param pulumi.Input[builtins.str] remote_screen_sharing: (String) Filters based on remote screen sharing support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.int]]] risk_indices: (Optional) Filters based on risk index thresholds.
        :param pulumi.Input[builtins.str] sender_policy_framework: (String) Filters based on SPF authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] source_ip_restrictions: (String) Filters based on IP restriction support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] ssl_cert_key_size: (String) Filters based on SSL certificate key size. Supported values: `ANY`, `UN_KNOWN`, `BITS_1024`, `BITS_2048`, `BITS_256`, `BITS_3072`, `BITS_384`, `BITS_4096`, `BITS_8192`.
        :param pulumi.Input[builtins.str] ssl_cert_validity: (String) Filters based on SSL certificate validity period. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] ssl_pinned: (String) Filters based on use of pinned SSL certificates. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] status: (String) Status of the applications. Supported values: `UN_SANCTIONED`, `SANCTIONED`, `ANY`.
        :param pulumi.Input[builtins.str] support_for_waf: (String) Filters based on Web Application Firewall (WAF) support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerability: (String) Filters based on published CVE vulnerabilities. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerability_disclosure: (String) Filters based on vulnerability disclosure policy. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerable_to_heart_bleed: (String) Filters based on Heartbleed vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerable_to_log_jam: (String) Filters based on Logjam vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] vulnerable_to_poodle: (String) Filters based on POODLE vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        :param pulumi.Input[builtins.str] weak_cipher_support: (String) Filters based on weak cipher usage. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RiskProfilesState.__new__(_RiskProfilesState)

        __props__.__dict__["admin_audit_logs"] = admin_audit_logs
        __props__.__dict__["certifications"] = certifications
        __props__.__dict__["custom_tags"] = custom_tags
        __props__.__dict__["data_breach"] = data_breach
        __props__.__dict__["data_encryption_in_transits"] = data_encryption_in_transits
        __props__.__dict__["dns_caa_policy"] = dns_caa_policy
        __props__.__dict__["domain_based_message_auth"] = domain_based_message_auth
        __props__.__dict__["domain_keys_identified_mail"] = domain_keys_identified_mail
        __props__.__dict__["evasive"] = evasive
        __props__.__dict__["exclude_certificates"] = exclude_certificates
        __props__.__dict__["file_sharing"] = file_sharing
        __props__.__dict__["http_security_headers"] = http_security_headers
        __props__.__dict__["malware_scanning_for_content"] = malware_scanning_for_content
        __props__.__dict__["mfa_support"] = mfa_support
        __props__.__dict__["name"] = name
        __props__.__dict__["password_strength"] = password_strength
        __props__.__dict__["poor_items_of_service"] = poor_items_of_service
        __props__.__dict__["profile_id"] = profile_id
        __props__.__dict__["profile_type"] = profile_type
        __props__.__dict__["remote_screen_sharing"] = remote_screen_sharing
        __props__.__dict__["risk_indices"] = risk_indices
        __props__.__dict__["sender_policy_framework"] = sender_policy_framework
        __props__.__dict__["source_ip_restrictions"] = source_ip_restrictions
        __props__.__dict__["ssl_cert_key_size"] = ssl_cert_key_size
        __props__.__dict__["ssl_cert_validity"] = ssl_cert_validity
        __props__.__dict__["ssl_pinned"] = ssl_pinned
        __props__.__dict__["status"] = status
        __props__.__dict__["support_for_waf"] = support_for_waf
        __props__.__dict__["vulnerability"] = vulnerability
        __props__.__dict__["vulnerability_disclosure"] = vulnerability_disclosure
        __props__.__dict__["vulnerable_to_heart_bleed"] = vulnerable_to_heart_bleed
        __props__.__dict__["vulnerable_to_log_jam"] = vulnerable_to_log_jam
        __props__.__dict__["vulnerable_to_poodle"] = vulnerable_to_poodle
        __props__.__dict__["weak_cipher_support"] = weak_cipher_support
        return RiskProfiles(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminAuditLogs")
    def admin_audit_logs(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on support for administrative logging. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "admin_audit_logs")

    @property
    @pulumi.getter
    def certifications(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        (Optional) Filters based on supported certifications.
        """
        return pulumi.get(self, "certifications")

    @property
    @pulumi.getter(name="customTags")
    def custom_tags(self) -> pulumi.Output[Optional['outputs.RiskProfilesCustomTags']]:
        """
        (Set) List of custom tags to be included or excluded for the profile.
        """
        return pulumi.get(self, "custom_tags")

    @property
    @pulumi.getter(name="dataBreach")
    def data_breach(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on history of data breaches. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "data_breach")

    @property
    @pulumi.getter(name="dataEncryptionInTransits")
    def data_encryption_in_transits(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        (Optional) Filters based on encryption of data in transit.
        """
        return pulumi.get(self, "data_encryption_in_transits")

    @property
    @pulumi.getter(name="dnsCaaPolicy")
    def dns_caa_policy(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on DNS CAA policy implementation.
        """
        return pulumi.get(self, "dns_caa_policy")

    @property
    @pulumi.getter(name="domainBasedMessageAuth")
    def domain_based_message_auth(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on DMARC support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "domain_based_message_auth")

    @property
    @pulumi.getter(name="domainKeysIdentifiedMail")
    def domain_keys_identified_mail(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on DKIM authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "domain_keys_identified_mail")

    @property
    @pulumi.getter
    def evasive(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on anonymous access support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "evasive")

    @property
    @pulumi.getter(name="excludeCertificates")
    def exclude_certificates(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        (Int) Indicates if the certificates are included or not.
        """
        return pulumi.get(self, "exclude_certificates")

    @property
    @pulumi.getter(name="fileSharing")
    def file_sharing(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on file sharing capability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "file_sharing")

    @property
    @pulumi.getter(name="httpSecurityHeaders")
    def http_security_headers(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on HTTP security headers support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "http_security_headers")

    @property
    @pulumi.getter(name="malwareScanningForContent")
    def malware_scanning_for_content(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on content malware scanning. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "malware_scanning_for_content")

    @property
    @pulumi.getter(name="mfaSupport")
    def mfa_support(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on multi-factor authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "mfa_support")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Cloud application risk profile name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="passwordStrength")
    def password_strength(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on password strength policy. Supported values: `ANY`, `GOOD`, `POOR`, `UN_KNOWN`.
        """
        return pulumi.get(self, "password_strength")

    @property
    @pulumi.getter(name="poorItemsOfService")
    def poor_items_of_service(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters applications based on questionable legal terms. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "poor_items_of_service")

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> pulumi.Output[builtins.int]:
        """
        Unique identifier for the risk profile.
        """
        return pulumi.get(self, "profile_id")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Risk profile type. Supported value: `CLOUD_APPLICATIONS`. Default is `CLOUD_APPLICATIONS`.
        """
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter(name="remoteScreenSharing")
    def remote_screen_sharing(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on remote screen sharing support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "remote_screen_sharing")

    @property
    @pulumi.getter(name="riskIndices")
    def risk_indices(self) -> pulumi.Output[Optional[Sequence[builtins.int]]]:
        """
        (Optional) Filters based on risk index thresholds.
        """
        return pulumi.get(self, "risk_indices")

    @property
    @pulumi.getter(name="senderPolicyFramework")
    def sender_policy_framework(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on SPF authentication support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "sender_policy_framework")

    @property
    @pulumi.getter(name="sourceIpRestrictions")
    def source_ip_restrictions(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on IP restriction support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "source_ip_restrictions")

    @property
    @pulumi.getter(name="sslCertKeySize")
    def ssl_cert_key_size(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on SSL certificate key size. Supported values: `ANY`, `UN_KNOWN`, `BITS_1024`, `BITS_2048`, `BITS_256`, `BITS_3072`, `BITS_384`, `BITS_4096`, `BITS_8192`.
        """
        return pulumi.get(self, "ssl_cert_key_size")

    @property
    @pulumi.getter(name="sslCertValidity")
    def ssl_cert_validity(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on SSL certificate validity period. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "ssl_cert_validity")

    @property
    @pulumi.getter(name="sslPinned")
    def ssl_pinned(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on use of pinned SSL certificates. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "ssl_pinned")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Status of the applications. Supported values: `UN_SANCTIONED`, `SANCTIONED`, `ANY`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="supportForWaf")
    def support_for_waf(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on Web Application Firewall (WAF) support. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "support_for_waf")

    @property
    @pulumi.getter
    def vulnerability(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on published CVE vulnerabilities. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerability")

    @property
    @pulumi.getter(name="vulnerabilityDisclosure")
    def vulnerability_disclosure(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on vulnerability disclosure policy. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerability_disclosure")

    @property
    @pulumi.getter(name="vulnerableToHeartBleed")
    def vulnerable_to_heart_bleed(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on Heartbleed vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerable_to_heart_bleed")

    @property
    @pulumi.getter(name="vulnerableToLogJam")
    def vulnerable_to_log_jam(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on Logjam vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerable_to_log_jam")

    @property
    @pulumi.getter(name="vulnerableToPoodle")
    def vulnerable_to_poodle(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on POODLE vulnerability. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "vulnerable_to_poodle")

    @property
    @pulumi.getter(name="weakCipherSupport")
    def weak_cipher_support(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        (String) Filters based on weak cipher usage. Supported values: `ANY`, `YES`, `NO`, `UN_KNOWN`.
        """
        return pulumi.get(self, "weak_cipher_support")

