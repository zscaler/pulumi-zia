# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['URLFilteringCloudAppSettingsArgs', 'URLFilteringCloudAppSettings']

@pulumi.input_type
class URLFilteringCloudAppSettingsArgs:
    def __init__(__self__, *,
                 block_skype: Optional[pulumi.Input[builtins.bool]] = None,
                 consider_embedded_sites: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_block_override_for_non_auth_user: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_chatgpt_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_cipa_compliance: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_dynamic_content_cat: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_gemini_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_meta_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_microsoft_copilot_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_msft_o365: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_newly_registered_domains: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_office365: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_per_plexity_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_poep_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_logmein: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_ring_central: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_talkdesk: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_webex: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_zoom: Optional[pulumi.Input[builtins.bool]] = None,
                 enforce_safe_search: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a URLFilteringCloudAppSettings resource.
        :param pulumi.Input[builtins.bool] block_skype: A Boolean value indicating whether access to Skype is blocked or not.
        :param pulumi.Input[builtins.bool] consider_embedded_sites: A Boolean value that indicates if URL filtering rules must be applied to sites that are translated using translation
               services or not.
        :param pulumi.Input[builtins.bool] enable_block_override_for_non_auth_user: A Boolean value indicating if authorized users can temporarily override block action on websites by providing their
               authentication information
        :param pulumi.Input[builtins.bool] enable_chatgpt_prompt: A Boolean value indicating if the use of generative AI prompts with ChatGPT by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_cipa_compliance: A Boolean value indicating if the predefined CIPA Compliance Rule is enabled or not.
        :param pulumi.Input[builtins.bool] enable_dynamic_content_cat: A Boolean value that indicates if dynamic categorization of URLs by analyzing content of uncategorized websites using
               AI/ML tools is enabled or not.
        :param pulumi.Input[builtins.bool] enable_gemini_prompt: A Boolean value indicating if the use of generative AI prompts with Google Gemini by users should be categorized and
               logged
        :param pulumi.Input[builtins.bool] enable_meta_prompt: A Boolean value indicating if the use of generative AI prompts with Meta AI by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_microsoft_copilot_prompt: A Boolean value indicating if the use of generative AI prompts with Microsoft Copilot by users should be categorized and
               logged
        :param pulumi.Input[builtins.bool] enable_msft_o365: A Boolean value indicating if the Zscaler service is allowed to permit secure local breakout for Office 365 traffic
               automatically without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_newly_registered_domains: A Boolean value indicating whether newly registered and observed domains that are identified within hours of going live
               are allowed or blocked
        :param pulumi.Input[builtins.bool] enable_office365: A Boolean value that enables or disables Microsoft Office 365 configuration.
        :param pulumi.Input[builtins.bool] enable_per_plexity_prompt: A Boolean value indicating if the use of generative AI prompts with Perplexity by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_poep_prompt: A Boolean value indicating if the use of generative AI prompts with Poe by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_ucaas_logmein: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for GoTo
               traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_ring_central: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for
               RingCentral traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_talkdesk: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Talkdesk
               traffic, with minimal or no manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_webex: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Webex
               traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_zoom: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Zoom
               traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enforce_safe_search: A Boolean value that indicates whether only safe content must be returned for web, image, and video search.
        """
        if block_skype is not None:
            pulumi.set(__self__, "block_skype", block_skype)
        if consider_embedded_sites is not None:
            pulumi.set(__self__, "consider_embedded_sites", consider_embedded_sites)
        if enable_block_override_for_non_auth_user is not None:
            pulumi.set(__self__, "enable_block_override_for_non_auth_user", enable_block_override_for_non_auth_user)
        if enable_chatgpt_prompt is not None:
            pulumi.set(__self__, "enable_chatgpt_prompt", enable_chatgpt_prompt)
        if enable_cipa_compliance is not None:
            pulumi.set(__self__, "enable_cipa_compliance", enable_cipa_compliance)
        if enable_dynamic_content_cat is not None:
            pulumi.set(__self__, "enable_dynamic_content_cat", enable_dynamic_content_cat)
        if enable_gemini_prompt is not None:
            pulumi.set(__self__, "enable_gemini_prompt", enable_gemini_prompt)
        if enable_meta_prompt is not None:
            pulumi.set(__self__, "enable_meta_prompt", enable_meta_prompt)
        if enable_microsoft_copilot_prompt is not None:
            pulumi.set(__self__, "enable_microsoft_copilot_prompt", enable_microsoft_copilot_prompt)
        if enable_msft_o365 is not None:
            pulumi.set(__self__, "enable_msft_o365", enable_msft_o365)
        if enable_newly_registered_domains is not None:
            pulumi.set(__self__, "enable_newly_registered_domains", enable_newly_registered_domains)
        if enable_office365 is not None:
            pulumi.set(__self__, "enable_office365", enable_office365)
        if enable_per_plexity_prompt is not None:
            pulumi.set(__self__, "enable_per_plexity_prompt", enable_per_plexity_prompt)
        if enable_poep_prompt is not None:
            pulumi.set(__self__, "enable_poep_prompt", enable_poep_prompt)
        if enable_ucaas_logmein is not None:
            pulumi.set(__self__, "enable_ucaas_logmein", enable_ucaas_logmein)
        if enable_ucaas_ring_central is not None:
            pulumi.set(__self__, "enable_ucaas_ring_central", enable_ucaas_ring_central)
        if enable_ucaas_talkdesk is not None:
            pulumi.set(__self__, "enable_ucaas_talkdesk", enable_ucaas_talkdesk)
        if enable_ucaas_webex is not None:
            pulumi.set(__self__, "enable_ucaas_webex", enable_ucaas_webex)
        if enable_ucaas_zoom is not None:
            pulumi.set(__self__, "enable_ucaas_zoom", enable_ucaas_zoom)
        if enforce_safe_search is not None:
            pulumi.set(__self__, "enforce_safe_search", enforce_safe_search)

    @property
    @pulumi.getter(name="blockSkype")
    def block_skype(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether access to Skype is blocked or not.
        """
        return pulumi.get(self, "block_skype")

    @block_skype.setter
    def block_skype(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_skype", value)

    @property
    @pulumi.getter(name="considerEmbeddedSites")
    def consider_embedded_sites(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that indicates if URL filtering rules must be applied to sites that are translated using translation
        services or not.
        """
        return pulumi.get(self, "consider_embedded_sites")

    @consider_embedded_sites.setter
    def consider_embedded_sites(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "consider_embedded_sites", value)

    @property
    @pulumi.getter(name="enableBlockOverrideForNonAuthUser")
    def enable_block_override_for_non_auth_user(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if authorized users can temporarily override block action on websites by providing their
        authentication information
        """
        return pulumi.get(self, "enable_block_override_for_non_auth_user")

    @enable_block_override_for_non_auth_user.setter
    def enable_block_override_for_non_auth_user(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_block_override_for_non_auth_user", value)

    @property
    @pulumi.getter(name="enableChatgptPrompt")
    def enable_chatgpt_prompt(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the use of generative AI prompts with ChatGPT by users should be categorized and logged
        """
        return pulumi.get(self, "enable_chatgpt_prompt")

    @enable_chatgpt_prompt.setter
    def enable_chatgpt_prompt(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_chatgpt_prompt", value)

    @property
    @pulumi.getter(name="enableCipaCompliance")
    def enable_cipa_compliance(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the predefined CIPA Compliance Rule is enabled or not.
        """
        return pulumi.get(self, "enable_cipa_compliance")

    @enable_cipa_compliance.setter
    def enable_cipa_compliance(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_cipa_compliance", value)

    @property
    @pulumi.getter(name="enableDynamicContentCat")
    def enable_dynamic_content_cat(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that indicates if dynamic categorization of URLs by analyzing content of uncategorized websites using
        AI/ML tools is enabled or not.
        """
        return pulumi.get(self, "enable_dynamic_content_cat")

    @enable_dynamic_content_cat.setter
    def enable_dynamic_content_cat(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_dynamic_content_cat", value)

    @property
    @pulumi.getter(name="enableGeminiPrompt")
    def enable_gemini_prompt(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the use of generative AI prompts with Google Gemini by users should be categorized and
        logged
        """
        return pulumi.get(self, "enable_gemini_prompt")

    @enable_gemini_prompt.setter
    def enable_gemini_prompt(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_gemini_prompt", value)

    @property
    @pulumi.getter(name="enableMetaPrompt")
    def enable_meta_prompt(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the use of generative AI prompts with Meta AI by users should be categorized and logged
        """
        return pulumi.get(self, "enable_meta_prompt")

    @enable_meta_prompt.setter
    def enable_meta_prompt(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_meta_prompt", value)

    @property
    @pulumi.getter(name="enableMicrosoftCopilotPrompt")
    def enable_microsoft_copilot_prompt(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the use of generative AI prompts with Microsoft Copilot by users should be categorized and
        logged
        """
        return pulumi.get(self, "enable_microsoft_copilot_prompt")

    @enable_microsoft_copilot_prompt.setter
    def enable_microsoft_copilot_prompt(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_microsoft_copilot_prompt", value)

    @property
    @pulumi.getter(name="enableMsftO365")
    def enable_msft_o365(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the Zscaler service is allowed to permit secure local breakout for Office 365 traffic
        automatically without any manual configuration needed.
        """
        return pulumi.get(self, "enable_msft_o365")

    @enable_msft_o365.setter
    def enable_msft_o365(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_msft_o365", value)

    @property
    @pulumi.getter(name="enableNewlyRegisteredDomains")
    def enable_newly_registered_domains(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether newly registered and observed domains that are identified within hours of going live
        are allowed or blocked
        """
        return pulumi.get(self, "enable_newly_registered_domains")

    @enable_newly_registered_domains.setter
    def enable_newly_registered_domains(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_newly_registered_domains", value)

    @property
    @pulumi.getter(name="enableOffice365")
    def enable_office365(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that enables or disables Microsoft Office 365 configuration.
        """
        return pulumi.get(self, "enable_office365")

    @enable_office365.setter
    def enable_office365(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_office365", value)

    @property
    @pulumi.getter(name="enablePerPlexityPrompt")
    def enable_per_plexity_prompt(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the use of generative AI prompts with Perplexity by users should be categorized and logged
        """
        return pulumi.get(self, "enable_per_plexity_prompt")

    @enable_per_plexity_prompt.setter
    def enable_per_plexity_prompt(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_per_plexity_prompt", value)

    @property
    @pulumi.getter(name="enablePoepPrompt")
    def enable_poep_prompt(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the use of generative AI prompts with Poe by users should be categorized and logged
        """
        return pulumi.get(self, "enable_poep_prompt")

    @enable_poep_prompt.setter
    def enable_poep_prompt(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_poep_prompt", value)

    @property
    @pulumi.getter(name="enableUcaasLogmein")
    def enable_ucaas_logmein(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for GoTo
        traffic, without any manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_logmein")

    @enable_ucaas_logmein.setter
    def enable_ucaas_logmein(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ucaas_logmein", value)

    @property
    @pulumi.getter(name="enableUcaasRingCentral")
    def enable_ucaas_ring_central(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for
        RingCentral traffic, without any manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_ring_central")

    @enable_ucaas_ring_central.setter
    def enable_ucaas_ring_central(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ucaas_ring_central", value)

    @property
    @pulumi.getter(name="enableUcaasTalkdesk")
    def enable_ucaas_talkdesk(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Talkdesk
        traffic, with minimal or no manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_talkdesk")

    @enable_ucaas_talkdesk.setter
    def enable_ucaas_talkdesk(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ucaas_talkdesk", value)

    @property
    @pulumi.getter(name="enableUcaasWebex")
    def enable_ucaas_webex(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Webex
        traffic, without any manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_webex")

    @enable_ucaas_webex.setter
    def enable_ucaas_webex(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ucaas_webex", value)

    @property
    @pulumi.getter(name="enableUcaasZoom")
    def enable_ucaas_zoom(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Zoom
        traffic, without any manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_zoom")

    @enable_ucaas_zoom.setter
    def enable_ucaas_zoom(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ucaas_zoom", value)

    @property
    @pulumi.getter(name="enforceSafeSearch")
    def enforce_safe_search(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that indicates whether only safe content must be returned for web, image, and video search.
        """
        return pulumi.get(self, "enforce_safe_search")

    @enforce_safe_search.setter
    def enforce_safe_search(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enforce_safe_search", value)


@pulumi.input_type
class _URLFilteringCloudAppSettingsState:
    def __init__(__self__, *,
                 block_skype: Optional[pulumi.Input[builtins.bool]] = None,
                 consider_embedded_sites: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_block_override_for_non_auth_user: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_chatgpt_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_cipa_compliance: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_dynamic_content_cat: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_gemini_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_meta_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_microsoft_copilot_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_msft_o365: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_newly_registered_domains: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_office365: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_per_plexity_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_poep_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_logmein: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_ring_central: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_talkdesk: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_webex: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_zoom: Optional[pulumi.Input[builtins.bool]] = None,
                 enforce_safe_search: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering URLFilteringCloudAppSettings resources.
        :param pulumi.Input[builtins.bool] block_skype: A Boolean value indicating whether access to Skype is blocked or not.
        :param pulumi.Input[builtins.bool] consider_embedded_sites: A Boolean value that indicates if URL filtering rules must be applied to sites that are translated using translation
               services or not.
        :param pulumi.Input[builtins.bool] enable_block_override_for_non_auth_user: A Boolean value indicating if authorized users can temporarily override block action on websites by providing their
               authentication information
        :param pulumi.Input[builtins.bool] enable_chatgpt_prompt: A Boolean value indicating if the use of generative AI prompts with ChatGPT by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_cipa_compliance: A Boolean value indicating if the predefined CIPA Compliance Rule is enabled or not.
        :param pulumi.Input[builtins.bool] enable_dynamic_content_cat: A Boolean value that indicates if dynamic categorization of URLs by analyzing content of uncategorized websites using
               AI/ML tools is enabled or not.
        :param pulumi.Input[builtins.bool] enable_gemini_prompt: A Boolean value indicating if the use of generative AI prompts with Google Gemini by users should be categorized and
               logged
        :param pulumi.Input[builtins.bool] enable_meta_prompt: A Boolean value indicating if the use of generative AI prompts with Meta AI by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_microsoft_copilot_prompt: A Boolean value indicating if the use of generative AI prompts with Microsoft Copilot by users should be categorized and
               logged
        :param pulumi.Input[builtins.bool] enable_msft_o365: A Boolean value indicating if the Zscaler service is allowed to permit secure local breakout for Office 365 traffic
               automatically without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_newly_registered_domains: A Boolean value indicating whether newly registered and observed domains that are identified within hours of going live
               are allowed or blocked
        :param pulumi.Input[builtins.bool] enable_office365: A Boolean value that enables or disables Microsoft Office 365 configuration.
        :param pulumi.Input[builtins.bool] enable_per_plexity_prompt: A Boolean value indicating if the use of generative AI prompts with Perplexity by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_poep_prompt: A Boolean value indicating if the use of generative AI prompts with Poe by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_ucaas_logmein: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for GoTo
               traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_ring_central: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for
               RingCentral traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_talkdesk: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Talkdesk
               traffic, with minimal or no manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_webex: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Webex
               traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_zoom: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Zoom
               traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enforce_safe_search: A Boolean value that indicates whether only safe content must be returned for web, image, and video search.
        """
        if block_skype is not None:
            pulumi.set(__self__, "block_skype", block_skype)
        if consider_embedded_sites is not None:
            pulumi.set(__self__, "consider_embedded_sites", consider_embedded_sites)
        if enable_block_override_for_non_auth_user is not None:
            pulumi.set(__self__, "enable_block_override_for_non_auth_user", enable_block_override_for_non_auth_user)
        if enable_chatgpt_prompt is not None:
            pulumi.set(__self__, "enable_chatgpt_prompt", enable_chatgpt_prompt)
        if enable_cipa_compliance is not None:
            pulumi.set(__self__, "enable_cipa_compliance", enable_cipa_compliance)
        if enable_dynamic_content_cat is not None:
            pulumi.set(__self__, "enable_dynamic_content_cat", enable_dynamic_content_cat)
        if enable_gemini_prompt is not None:
            pulumi.set(__self__, "enable_gemini_prompt", enable_gemini_prompt)
        if enable_meta_prompt is not None:
            pulumi.set(__self__, "enable_meta_prompt", enable_meta_prompt)
        if enable_microsoft_copilot_prompt is not None:
            pulumi.set(__self__, "enable_microsoft_copilot_prompt", enable_microsoft_copilot_prompt)
        if enable_msft_o365 is not None:
            pulumi.set(__self__, "enable_msft_o365", enable_msft_o365)
        if enable_newly_registered_domains is not None:
            pulumi.set(__self__, "enable_newly_registered_domains", enable_newly_registered_domains)
        if enable_office365 is not None:
            pulumi.set(__self__, "enable_office365", enable_office365)
        if enable_per_plexity_prompt is not None:
            pulumi.set(__self__, "enable_per_plexity_prompt", enable_per_plexity_prompt)
        if enable_poep_prompt is not None:
            pulumi.set(__self__, "enable_poep_prompt", enable_poep_prompt)
        if enable_ucaas_logmein is not None:
            pulumi.set(__self__, "enable_ucaas_logmein", enable_ucaas_logmein)
        if enable_ucaas_ring_central is not None:
            pulumi.set(__self__, "enable_ucaas_ring_central", enable_ucaas_ring_central)
        if enable_ucaas_talkdesk is not None:
            pulumi.set(__self__, "enable_ucaas_talkdesk", enable_ucaas_talkdesk)
        if enable_ucaas_webex is not None:
            pulumi.set(__self__, "enable_ucaas_webex", enable_ucaas_webex)
        if enable_ucaas_zoom is not None:
            pulumi.set(__self__, "enable_ucaas_zoom", enable_ucaas_zoom)
        if enforce_safe_search is not None:
            pulumi.set(__self__, "enforce_safe_search", enforce_safe_search)

    @property
    @pulumi.getter(name="blockSkype")
    def block_skype(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether access to Skype is blocked or not.
        """
        return pulumi.get(self, "block_skype")

    @block_skype.setter
    def block_skype(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "block_skype", value)

    @property
    @pulumi.getter(name="considerEmbeddedSites")
    def consider_embedded_sites(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that indicates if URL filtering rules must be applied to sites that are translated using translation
        services or not.
        """
        return pulumi.get(self, "consider_embedded_sites")

    @consider_embedded_sites.setter
    def consider_embedded_sites(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "consider_embedded_sites", value)

    @property
    @pulumi.getter(name="enableBlockOverrideForNonAuthUser")
    def enable_block_override_for_non_auth_user(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if authorized users can temporarily override block action on websites by providing their
        authentication information
        """
        return pulumi.get(self, "enable_block_override_for_non_auth_user")

    @enable_block_override_for_non_auth_user.setter
    def enable_block_override_for_non_auth_user(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_block_override_for_non_auth_user", value)

    @property
    @pulumi.getter(name="enableChatgptPrompt")
    def enable_chatgpt_prompt(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the use of generative AI prompts with ChatGPT by users should be categorized and logged
        """
        return pulumi.get(self, "enable_chatgpt_prompt")

    @enable_chatgpt_prompt.setter
    def enable_chatgpt_prompt(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_chatgpt_prompt", value)

    @property
    @pulumi.getter(name="enableCipaCompliance")
    def enable_cipa_compliance(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the predefined CIPA Compliance Rule is enabled or not.
        """
        return pulumi.get(self, "enable_cipa_compliance")

    @enable_cipa_compliance.setter
    def enable_cipa_compliance(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_cipa_compliance", value)

    @property
    @pulumi.getter(name="enableDynamicContentCat")
    def enable_dynamic_content_cat(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that indicates if dynamic categorization of URLs by analyzing content of uncategorized websites using
        AI/ML tools is enabled or not.
        """
        return pulumi.get(self, "enable_dynamic_content_cat")

    @enable_dynamic_content_cat.setter
    def enable_dynamic_content_cat(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_dynamic_content_cat", value)

    @property
    @pulumi.getter(name="enableGeminiPrompt")
    def enable_gemini_prompt(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the use of generative AI prompts with Google Gemini by users should be categorized and
        logged
        """
        return pulumi.get(self, "enable_gemini_prompt")

    @enable_gemini_prompt.setter
    def enable_gemini_prompt(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_gemini_prompt", value)

    @property
    @pulumi.getter(name="enableMetaPrompt")
    def enable_meta_prompt(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the use of generative AI prompts with Meta AI by users should be categorized and logged
        """
        return pulumi.get(self, "enable_meta_prompt")

    @enable_meta_prompt.setter
    def enable_meta_prompt(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_meta_prompt", value)

    @property
    @pulumi.getter(name="enableMicrosoftCopilotPrompt")
    def enable_microsoft_copilot_prompt(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the use of generative AI prompts with Microsoft Copilot by users should be categorized and
        logged
        """
        return pulumi.get(self, "enable_microsoft_copilot_prompt")

    @enable_microsoft_copilot_prompt.setter
    def enable_microsoft_copilot_prompt(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_microsoft_copilot_prompt", value)

    @property
    @pulumi.getter(name="enableMsftO365")
    def enable_msft_o365(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the Zscaler service is allowed to permit secure local breakout for Office 365 traffic
        automatically without any manual configuration needed.
        """
        return pulumi.get(self, "enable_msft_o365")

    @enable_msft_o365.setter
    def enable_msft_o365(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_msft_o365", value)

    @property
    @pulumi.getter(name="enableNewlyRegisteredDomains")
    def enable_newly_registered_domains(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating whether newly registered and observed domains that are identified within hours of going live
        are allowed or blocked
        """
        return pulumi.get(self, "enable_newly_registered_domains")

    @enable_newly_registered_domains.setter
    def enable_newly_registered_domains(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_newly_registered_domains", value)

    @property
    @pulumi.getter(name="enableOffice365")
    def enable_office365(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that enables or disables Microsoft Office 365 configuration.
        """
        return pulumi.get(self, "enable_office365")

    @enable_office365.setter
    def enable_office365(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_office365", value)

    @property
    @pulumi.getter(name="enablePerPlexityPrompt")
    def enable_per_plexity_prompt(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the use of generative AI prompts with Perplexity by users should be categorized and logged
        """
        return pulumi.get(self, "enable_per_plexity_prompt")

    @enable_per_plexity_prompt.setter
    def enable_per_plexity_prompt(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_per_plexity_prompt", value)

    @property
    @pulumi.getter(name="enablePoepPrompt")
    def enable_poep_prompt(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the use of generative AI prompts with Poe by users should be categorized and logged
        """
        return pulumi.get(self, "enable_poep_prompt")

    @enable_poep_prompt.setter
    def enable_poep_prompt(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_poep_prompt", value)

    @property
    @pulumi.getter(name="enableUcaasLogmein")
    def enable_ucaas_logmein(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for GoTo
        traffic, without any manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_logmein")

    @enable_ucaas_logmein.setter
    def enable_ucaas_logmein(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ucaas_logmein", value)

    @property
    @pulumi.getter(name="enableUcaasRingCentral")
    def enable_ucaas_ring_central(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for
        RingCentral traffic, without any manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_ring_central")

    @enable_ucaas_ring_central.setter
    def enable_ucaas_ring_central(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ucaas_ring_central", value)

    @property
    @pulumi.getter(name="enableUcaasTalkdesk")
    def enable_ucaas_talkdesk(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Talkdesk
        traffic, with minimal or no manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_talkdesk")

    @enable_ucaas_talkdesk.setter
    def enable_ucaas_talkdesk(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ucaas_talkdesk", value)

    @property
    @pulumi.getter(name="enableUcaasWebex")
    def enable_ucaas_webex(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Webex
        traffic, without any manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_webex")

    @enable_ucaas_webex.setter
    def enable_ucaas_webex(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ucaas_webex", value)

    @property
    @pulumi.getter(name="enableUcaasZoom")
    def enable_ucaas_zoom(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Zoom
        traffic, without any manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_zoom")

    @enable_ucaas_zoom.setter
    def enable_ucaas_zoom(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ucaas_zoom", value)

    @property
    @pulumi.getter(name="enforceSafeSearch")
    def enforce_safe_search(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A Boolean value that indicates whether only safe content must be returned for web, image, and video search.
        """
        return pulumi.get(self, "enforce_safe_search")

    @enforce_safe_search.setter
    def enforce_safe_search(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enforce_safe_search", value)


@pulumi.type_token("zia:index/uRLFilteringCloudAppSettings:URLFilteringCloudAppSettings")
class URLFilteringCloudAppSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_skype: Optional[pulumi.Input[builtins.bool]] = None,
                 consider_embedded_sites: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_block_override_for_non_auth_user: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_chatgpt_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_cipa_compliance: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_dynamic_content_cat: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_gemini_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_meta_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_microsoft_copilot_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_msft_o365: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_newly_registered_domains: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_office365: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_per_plexity_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_poep_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_logmein: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_ring_central: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_talkdesk: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_webex: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_zoom: Optional[pulumi.Input[builtins.bool]] = None,
                 enforce_safe_search: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        The **zia_url_filtering_and_cloud_app_settings** resource allows you to updates the the URL and Cloud App Control advanced policy settings To learn more see [Configuring Advanced Policy Settings](https://help.zscaler.com/unified/configuring-advanced-policy-settings)

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_url_filtering_and_cloud_app_settings** can be imported by using `app_setting` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/uRLFilteringCloudAppSettings:URLFilteringCloudAppSettings this "app_setting"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] block_skype: A Boolean value indicating whether access to Skype is blocked or not.
        :param pulumi.Input[builtins.bool] consider_embedded_sites: A Boolean value that indicates if URL filtering rules must be applied to sites that are translated using translation
               services or not.
        :param pulumi.Input[builtins.bool] enable_block_override_for_non_auth_user: A Boolean value indicating if authorized users can temporarily override block action on websites by providing their
               authentication information
        :param pulumi.Input[builtins.bool] enable_chatgpt_prompt: A Boolean value indicating if the use of generative AI prompts with ChatGPT by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_cipa_compliance: A Boolean value indicating if the predefined CIPA Compliance Rule is enabled or not.
        :param pulumi.Input[builtins.bool] enable_dynamic_content_cat: A Boolean value that indicates if dynamic categorization of URLs by analyzing content of uncategorized websites using
               AI/ML tools is enabled or not.
        :param pulumi.Input[builtins.bool] enable_gemini_prompt: A Boolean value indicating if the use of generative AI prompts with Google Gemini by users should be categorized and
               logged
        :param pulumi.Input[builtins.bool] enable_meta_prompt: A Boolean value indicating if the use of generative AI prompts with Meta AI by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_microsoft_copilot_prompt: A Boolean value indicating if the use of generative AI prompts with Microsoft Copilot by users should be categorized and
               logged
        :param pulumi.Input[builtins.bool] enable_msft_o365: A Boolean value indicating if the Zscaler service is allowed to permit secure local breakout for Office 365 traffic
               automatically without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_newly_registered_domains: A Boolean value indicating whether newly registered and observed domains that are identified within hours of going live
               are allowed or blocked
        :param pulumi.Input[builtins.bool] enable_office365: A Boolean value that enables or disables Microsoft Office 365 configuration.
        :param pulumi.Input[builtins.bool] enable_per_plexity_prompt: A Boolean value indicating if the use of generative AI prompts with Perplexity by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_poep_prompt: A Boolean value indicating if the use of generative AI prompts with Poe by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_ucaas_logmein: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for GoTo
               traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_ring_central: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for
               RingCentral traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_talkdesk: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Talkdesk
               traffic, with minimal or no manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_webex: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Webex
               traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_zoom: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Zoom
               traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enforce_safe_search: A Boolean value that indicates whether only safe content must be returned for web, image, and video search.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[URLFilteringCloudAppSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_url_filtering_and_cloud_app_settings** resource allows you to updates the the URL and Cloud App Control advanced policy settings To learn more see [Configuring Advanced Policy Settings](https://help.zscaler.com/unified/configuring-advanced-policy-settings)

        ## Example Usage

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_url_filtering_and_cloud_app_settings** can be imported by using `app_setting` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/uRLFilteringCloudAppSettings:URLFilteringCloudAppSettings this "app_setting"
        ```

        :param str resource_name: The name of the resource.
        :param URLFilteringCloudAppSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(URLFilteringCloudAppSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 block_skype: Optional[pulumi.Input[builtins.bool]] = None,
                 consider_embedded_sites: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_block_override_for_non_auth_user: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_chatgpt_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_cipa_compliance: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_dynamic_content_cat: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_gemini_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_meta_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_microsoft_copilot_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_msft_o365: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_newly_registered_domains: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_office365: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_per_plexity_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_poep_prompt: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_logmein: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_ring_central: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_talkdesk: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_webex: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ucaas_zoom: Optional[pulumi.Input[builtins.bool]] = None,
                 enforce_safe_search: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = URLFilteringCloudAppSettingsArgs.__new__(URLFilteringCloudAppSettingsArgs)

            __props__.__dict__["block_skype"] = block_skype
            __props__.__dict__["consider_embedded_sites"] = consider_embedded_sites
            __props__.__dict__["enable_block_override_for_non_auth_user"] = enable_block_override_for_non_auth_user
            __props__.__dict__["enable_chatgpt_prompt"] = enable_chatgpt_prompt
            __props__.__dict__["enable_cipa_compliance"] = enable_cipa_compliance
            __props__.__dict__["enable_dynamic_content_cat"] = enable_dynamic_content_cat
            __props__.__dict__["enable_gemini_prompt"] = enable_gemini_prompt
            __props__.__dict__["enable_meta_prompt"] = enable_meta_prompt
            __props__.__dict__["enable_microsoft_copilot_prompt"] = enable_microsoft_copilot_prompt
            __props__.__dict__["enable_msft_o365"] = enable_msft_o365
            __props__.__dict__["enable_newly_registered_domains"] = enable_newly_registered_domains
            __props__.__dict__["enable_office365"] = enable_office365
            __props__.__dict__["enable_per_plexity_prompt"] = enable_per_plexity_prompt
            __props__.__dict__["enable_poep_prompt"] = enable_poep_prompt
            __props__.__dict__["enable_ucaas_logmein"] = enable_ucaas_logmein
            __props__.__dict__["enable_ucaas_ring_central"] = enable_ucaas_ring_central
            __props__.__dict__["enable_ucaas_talkdesk"] = enable_ucaas_talkdesk
            __props__.__dict__["enable_ucaas_webex"] = enable_ucaas_webex
            __props__.__dict__["enable_ucaas_zoom"] = enable_ucaas_zoom
            __props__.__dict__["enforce_safe_search"] = enforce_safe_search
        super(URLFilteringCloudAppSettings, __self__).__init__(
            'zia:index/uRLFilteringCloudAppSettings:URLFilteringCloudAppSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            block_skype: Optional[pulumi.Input[builtins.bool]] = None,
            consider_embedded_sites: Optional[pulumi.Input[builtins.bool]] = None,
            enable_block_override_for_non_auth_user: Optional[pulumi.Input[builtins.bool]] = None,
            enable_chatgpt_prompt: Optional[pulumi.Input[builtins.bool]] = None,
            enable_cipa_compliance: Optional[pulumi.Input[builtins.bool]] = None,
            enable_dynamic_content_cat: Optional[pulumi.Input[builtins.bool]] = None,
            enable_gemini_prompt: Optional[pulumi.Input[builtins.bool]] = None,
            enable_meta_prompt: Optional[pulumi.Input[builtins.bool]] = None,
            enable_microsoft_copilot_prompt: Optional[pulumi.Input[builtins.bool]] = None,
            enable_msft_o365: Optional[pulumi.Input[builtins.bool]] = None,
            enable_newly_registered_domains: Optional[pulumi.Input[builtins.bool]] = None,
            enable_office365: Optional[pulumi.Input[builtins.bool]] = None,
            enable_per_plexity_prompt: Optional[pulumi.Input[builtins.bool]] = None,
            enable_poep_prompt: Optional[pulumi.Input[builtins.bool]] = None,
            enable_ucaas_logmein: Optional[pulumi.Input[builtins.bool]] = None,
            enable_ucaas_ring_central: Optional[pulumi.Input[builtins.bool]] = None,
            enable_ucaas_talkdesk: Optional[pulumi.Input[builtins.bool]] = None,
            enable_ucaas_webex: Optional[pulumi.Input[builtins.bool]] = None,
            enable_ucaas_zoom: Optional[pulumi.Input[builtins.bool]] = None,
            enforce_safe_search: Optional[pulumi.Input[builtins.bool]] = None) -> 'URLFilteringCloudAppSettings':
        """
        Get an existing URLFilteringCloudAppSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] block_skype: A Boolean value indicating whether access to Skype is blocked or not.
        :param pulumi.Input[builtins.bool] consider_embedded_sites: A Boolean value that indicates if URL filtering rules must be applied to sites that are translated using translation
               services or not.
        :param pulumi.Input[builtins.bool] enable_block_override_for_non_auth_user: A Boolean value indicating if authorized users can temporarily override block action on websites by providing their
               authentication information
        :param pulumi.Input[builtins.bool] enable_chatgpt_prompt: A Boolean value indicating if the use of generative AI prompts with ChatGPT by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_cipa_compliance: A Boolean value indicating if the predefined CIPA Compliance Rule is enabled or not.
        :param pulumi.Input[builtins.bool] enable_dynamic_content_cat: A Boolean value that indicates if dynamic categorization of URLs by analyzing content of uncategorized websites using
               AI/ML tools is enabled or not.
        :param pulumi.Input[builtins.bool] enable_gemini_prompt: A Boolean value indicating if the use of generative AI prompts with Google Gemini by users should be categorized and
               logged
        :param pulumi.Input[builtins.bool] enable_meta_prompt: A Boolean value indicating if the use of generative AI prompts with Meta AI by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_microsoft_copilot_prompt: A Boolean value indicating if the use of generative AI prompts with Microsoft Copilot by users should be categorized and
               logged
        :param pulumi.Input[builtins.bool] enable_msft_o365: A Boolean value indicating if the Zscaler service is allowed to permit secure local breakout for Office 365 traffic
               automatically without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_newly_registered_domains: A Boolean value indicating whether newly registered and observed domains that are identified within hours of going live
               are allowed or blocked
        :param pulumi.Input[builtins.bool] enable_office365: A Boolean value that enables or disables Microsoft Office 365 configuration.
        :param pulumi.Input[builtins.bool] enable_per_plexity_prompt: A Boolean value indicating if the use of generative AI prompts with Perplexity by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_poep_prompt: A Boolean value indicating if the use of generative AI prompts with Poe by users should be categorized and logged
        :param pulumi.Input[builtins.bool] enable_ucaas_logmein: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for GoTo
               traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_ring_central: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for
               RingCentral traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_talkdesk: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Talkdesk
               traffic, with minimal or no manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_webex: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Webex
               traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enable_ucaas_zoom: A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Zoom
               traffic, without any manual configuration needed.
        :param pulumi.Input[builtins.bool] enforce_safe_search: A Boolean value that indicates whether only safe content must be returned for web, image, and video search.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _URLFilteringCloudAppSettingsState.__new__(_URLFilteringCloudAppSettingsState)

        __props__.__dict__["block_skype"] = block_skype
        __props__.__dict__["consider_embedded_sites"] = consider_embedded_sites
        __props__.__dict__["enable_block_override_for_non_auth_user"] = enable_block_override_for_non_auth_user
        __props__.__dict__["enable_chatgpt_prompt"] = enable_chatgpt_prompt
        __props__.__dict__["enable_cipa_compliance"] = enable_cipa_compliance
        __props__.__dict__["enable_dynamic_content_cat"] = enable_dynamic_content_cat
        __props__.__dict__["enable_gemini_prompt"] = enable_gemini_prompt
        __props__.__dict__["enable_meta_prompt"] = enable_meta_prompt
        __props__.__dict__["enable_microsoft_copilot_prompt"] = enable_microsoft_copilot_prompt
        __props__.__dict__["enable_msft_o365"] = enable_msft_o365
        __props__.__dict__["enable_newly_registered_domains"] = enable_newly_registered_domains
        __props__.__dict__["enable_office365"] = enable_office365
        __props__.__dict__["enable_per_plexity_prompt"] = enable_per_plexity_prompt
        __props__.__dict__["enable_poep_prompt"] = enable_poep_prompt
        __props__.__dict__["enable_ucaas_logmein"] = enable_ucaas_logmein
        __props__.__dict__["enable_ucaas_ring_central"] = enable_ucaas_ring_central
        __props__.__dict__["enable_ucaas_talkdesk"] = enable_ucaas_talkdesk
        __props__.__dict__["enable_ucaas_webex"] = enable_ucaas_webex
        __props__.__dict__["enable_ucaas_zoom"] = enable_ucaas_zoom
        __props__.__dict__["enforce_safe_search"] = enforce_safe_search
        return URLFilteringCloudAppSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="blockSkype")
    def block_skype(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating whether access to Skype is blocked or not.
        """
        return pulumi.get(self, "block_skype")

    @property
    @pulumi.getter(name="considerEmbeddedSites")
    def consider_embedded_sites(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value that indicates if URL filtering rules must be applied to sites that are translated using translation
        services or not.
        """
        return pulumi.get(self, "consider_embedded_sites")

    @property
    @pulumi.getter(name="enableBlockOverrideForNonAuthUser")
    def enable_block_override_for_non_auth_user(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating if authorized users can temporarily override block action on websites by providing their
        authentication information
        """
        return pulumi.get(self, "enable_block_override_for_non_auth_user")

    @property
    @pulumi.getter(name="enableChatgptPrompt")
    def enable_chatgpt_prompt(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating if the use of generative AI prompts with ChatGPT by users should be categorized and logged
        """
        return pulumi.get(self, "enable_chatgpt_prompt")

    @property
    @pulumi.getter(name="enableCipaCompliance")
    def enable_cipa_compliance(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating if the predefined CIPA Compliance Rule is enabled or not.
        """
        return pulumi.get(self, "enable_cipa_compliance")

    @property
    @pulumi.getter(name="enableDynamicContentCat")
    def enable_dynamic_content_cat(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value that indicates if dynamic categorization of URLs by analyzing content of uncategorized websites using
        AI/ML tools is enabled or not.
        """
        return pulumi.get(self, "enable_dynamic_content_cat")

    @property
    @pulumi.getter(name="enableGeminiPrompt")
    def enable_gemini_prompt(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating if the use of generative AI prompts with Google Gemini by users should be categorized and
        logged
        """
        return pulumi.get(self, "enable_gemini_prompt")

    @property
    @pulumi.getter(name="enableMetaPrompt")
    def enable_meta_prompt(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating if the use of generative AI prompts with Meta AI by users should be categorized and logged
        """
        return pulumi.get(self, "enable_meta_prompt")

    @property
    @pulumi.getter(name="enableMicrosoftCopilotPrompt")
    def enable_microsoft_copilot_prompt(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating if the use of generative AI prompts with Microsoft Copilot by users should be categorized and
        logged
        """
        return pulumi.get(self, "enable_microsoft_copilot_prompt")

    @property
    @pulumi.getter(name="enableMsftO365")
    def enable_msft_o365(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating if the Zscaler service is allowed to permit secure local breakout for Office 365 traffic
        automatically without any manual configuration needed.
        """
        return pulumi.get(self, "enable_msft_o365")

    @property
    @pulumi.getter(name="enableNewlyRegisteredDomains")
    def enable_newly_registered_domains(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating whether newly registered and observed domains that are identified within hours of going live
        are allowed or blocked
        """
        return pulumi.get(self, "enable_newly_registered_domains")

    @property
    @pulumi.getter(name="enableOffice365")
    def enable_office365(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value that enables or disables Microsoft Office 365 configuration.
        """
        return pulumi.get(self, "enable_office365")

    @property
    @pulumi.getter(name="enablePerPlexityPrompt")
    def enable_per_plexity_prompt(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating if the use of generative AI prompts with Perplexity by users should be categorized and logged
        """
        return pulumi.get(self, "enable_per_plexity_prompt")

    @property
    @pulumi.getter(name="enablePoepPrompt")
    def enable_poep_prompt(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating if the use of generative AI prompts with Poe by users should be categorized and logged
        """
        return pulumi.get(self, "enable_poep_prompt")

    @property
    @pulumi.getter(name="enableUcaasLogmein")
    def enable_ucaas_logmein(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for GoTo
        traffic, without any manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_logmein")

    @property
    @pulumi.getter(name="enableUcaasRingCentral")
    def enable_ucaas_ring_central(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for
        RingCentral traffic, without any manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_ring_central")

    @property
    @pulumi.getter(name="enableUcaasTalkdesk")
    def enable_ucaas_talkdesk(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Talkdesk
        traffic, with minimal or no manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_talkdesk")

    @property
    @pulumi.getter(name="enableUcaasWebex")
    def enable_ucaas_webex(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Webex
        traffic, without any manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_webex")

    @property
    @pulumi.getter(name="enableUcaasZoom")
    def enable_ucaas_zoom(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value indicating if the Zscaler service is allowed to automatically permit secure local breakout for Zoom
        traffic, without any manual configuration needed.
        """
        return pulumi.get(self, "enable_ucaas_zoom")

    @property
    @pulumi.getter(name="enforceSafeSearch")
    def enforce_safe_search(self) -> pulumi.Output[builtins.bool]:
        """
        A Boolean value that indicates whether only safe content must be returned for web, image, and video search.
        """
        return pulumi.get(self, "enforce_safe_search")

