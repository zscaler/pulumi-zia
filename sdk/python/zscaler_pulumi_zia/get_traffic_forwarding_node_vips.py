# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetTrafficForwardingNodeVIPsResult',
    'AwaitableGetTrafficForwardingNodeVIPsResult',
    'get_traffic_forwarding_node_vips',
    'get_traffic_forwarding_node_vips_output',
]

@pulumi.output_type
class GetTrafficForwardingNodeVIPsResult:
    """
    A collection of values returned by getTrafficForwardingNodeVIPs.
    """
    def __init__(__self__, city=None, cloud_name=None, datacenter=None, gre_domain_name=None, gre_ips=None, id=None, location=None, pac_domain_name=None, pac_ips=None, region=None, vpn_domain_name=None, vpn_ips=None):
        if city and not isinstance(city, str):
            raise TypeError("Expected argument 'city' to be a str")
        pulumi.set(__self__, "city", city)
        if cloud_name and not isinstance(cloud_name, str):
            raise TypeError("Expected argument 'cloud_name' to be a str")
        pulumi.set(__self__, "cloud_name", cloud_name)
        if datacenter and not isinstance(datacenter, str):
            raise TypeError("Expected argument 'datacenter' to be a str")
        pulumi.set(__self__, "datacenter", datacenter)
        if gre_domain_name and not isinstance(gre_domain_name, str):
            raise TypeError("Expected argument 'gre_domain_name' to be a str")
        pulumi.set(__self__, "gre_domain_name", gre_domain_name)
        if gre_ips and not isinstance(gre_ips, list):
            raise TypeError("Expected argument 'gre_ips' to be a list")
        pulumi.set(__self__, "gre_ips", gre_ips)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if pac_domain_name and not isinstance(pac_domain_name, str):
            raise TypeError("Expected argument 'pac_domain_name' to be a str")
        pulumi.set(__self__, "pac_domain_name", pac_domain_name)
        if pac_ips and not isinstance(pac_ips, list):
            raise TypeError("Expected argument 'pac_ips' to be a list")
        pulumi.set(__self__, "pac_ips", pac_ips)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if vpn_domain_name and not isinstance(vpn_domain_name, str):
            raise TypeError("Expected argument 'vpn_domain_name' to be a str")
        pulumi.set(__self__, "vpn_domain_name", vpn_domain_name)
        if vpn_ips and not isinstance(vpn_ips, list):
            raise TypeError("Expected argument 'vpn_ips' to be a list")
        pulumi.set(__self__, "vpn_ips", vpn_ips)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="cloudName")
    def cloud_name(self) -> str:
        return pulumi.get(self, "cloud_name")

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter(name="greDomainName")
    def gre_domain_name(self) -> str:
        return pulumi.get(self, "gre_domain_name")

    @property
    @pulumi.getter(name="greIps")
    def gre_ips(self) -> Sequence[str]:
        return pulumi.get(self, "gre_ips")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter(name="pacDomainName")
    def pac_domain_name(self) -> str:
        return pulumi.get(self, "pac_domain_name")

    @property
    @pulumi.getter(name="pacIps")
    def pac_ips(self) -> Sequence[str]:
        return pulumi.get(self, "pac_ips")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="vpnDomainName")
    def vpn_domain_name(self) -> str:
        return pulumi.get(self, "vpn_domain_name")

    @property
    @pulumi.getter(name="vpnIps")
    def vpn_ips(self) -> Sequence[str]:
        return pulumi.get(self, "vpn_ips")


class AwaitableGetTrafficForwardingNodeVIPsResult(GetTrafficForwardingNodeVIPsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrafficForwardingNodeVIPsResult(
            city=self.city,
            cloud_name=self.cloud_name,
            datacenter=self.datacenter,
            gre_domain_name=self.gre_domain_name,
            gre_ips=self.gre_ips,
            id=self.id,
            location=self.location,
            pac_domain_name=self.pac_domain_name,
            pac_ips=self.pac_ips,
            region=self.region,
            vpn_domain_name=self.vpn_domain_name,
            vpn_ips=self.vpn_ips)


def get_traffic_forwarding_node_vips(datacenter: Optional[str] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrafficForwardingNodeVIPsResult:
    """
    Use the **zia_traffic_forwarding_public_node_vips** data source to retrieve a paginated list of virtual IP addresses (VIPs) available in the Zscaler cloud.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    yvr1 = zia.get_traffic_forwarding_node_vips(datacenter="YVR1")
    pulumi.export("ziaTrafficForwardingPublicNodeVipsYvr1", yvr1)
    ```
    <!--End PulumiCodeChooser -->


    :param str datacenter: Data-center Name
    """
    __args__ = dict()
    __args__['datacenter'] = datacenter
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getTrafficForwardingNodeVIPs:getTrafficForwardingNodeVIPs', __args__, opts=opts, typ=GetTrafficForwardingNodeVIPsResult).value

    return AwaitableGetTrafficForwardingNodeVIPsResult(
        city=pulumi.get(__ret__, 'city'),
        cloud_name=pulumi.get(__ret__, 'cloud_name'),
        datacenter=pulumi.get(__ret__, 'datacenter'),
        gre_domain_name=pulumi.get(__ret__, 'gre_domain_name'),
        gre_ips=pulumi.get(__ret__, 'gre_ips'),
        id=pulumi.get(__ret__, 'id'),
        location=pulumi.get(__ret__, 'location'),
        pac_domain_name=pulumi.get(__ret__, 'pac_domain_name'),
        pac_ips=pulumi.get(__ret__, 'pac_ips'),
        region=pulumi.get(__ret__, 'region'),
        vpn_domain_name=pulumi.get(__ret__, 'vpn_domain_name'),
        vpn_ips=pulumi.get(__ret__, 'vpn_ips'))


@_utilities.lift_output_func(get_traffic_forwarding_node_vips)
def get_traffic_forwarding_node_vips_output(datacenter: Optional[pulumi.Input[Optional[str]]] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTrafficForwardingNodeVIPsResult]:
    """
    Use the **zia_traffic_forwarding_public_node_vips** data source to retrieve a paginated list of virtual IP addresses (VIPs) available in the Zscaler cloud.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    yvr1 = zia.get_traffic_forwarding_node_vips(datacenter="YVR1")
    pulumi.export("ziaTrafficForwardingPublicNodeVipsYvr1", yvr1)
    ```
    <!--End PulumiCodeChooser -->


    :param str datacenter: Data-center Name
    """
    ...
