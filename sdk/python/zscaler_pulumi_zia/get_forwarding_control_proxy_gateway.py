# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetForwardingControlProxyGatewayResult',
    'AwaitableGetForwardingControlProxyGatewayResult',
    'get_forwarding_control_proxy_gateway',
    'get_forwarding_control_proxy_gateway_output',
]

@pulumi.output_type
class GetForwardingControlProxyGatewayResult:
    """
    A collection of values returned by getForwardingControlProxyGateway.
    """
    def __init__(__self__, description=None, fail_closed=None, id=None, last_modified_bies=None, last_modified_time=None, name=None, primary_proxies=None, secondary_proxies=None, type=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if fail_closed and not isinstance(fail_closed, bool):
            raise TypeError("Expected argument 'fail_closed' to be a bool")
        pulumi.set(__self__, "fail_closed", fail_closed)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if last_modified_bies and not isinstance(last_modified_bies, list):
            raise TypeError("Expected argument 'last_modified_bies' to be a list")
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        if last_modified_time and not isinstance(last_modified_time, int):
            raise TypeError("Expected argument 'last_modified_time' to be a int")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if primary_proxies and not isinstance(primary_proxies, list):
            raise TypeError("Expected argument 'primary_proxies' to be a list")
        pulumi.set(__self__, "primary_proxies", primary_proxies)
        if secondary_proxies and not isinstance(secondary_proxies, list):
            raise TypeError("Expected argument 'secondary_proxies' to be a list")
        pulumi.set(__self__, "secondary_proxies", secondary_proxies)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        (string) - Additional details about the Proxy gateway
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="failClosed")
    def fail_closed(self) -> builtins.bool:
        """
        (Boolean) - Indicates whether fail close is enabled to drop the traffic or disabled to allow the traffic when both primary and secondary proxies defined in this gateway are unreachable.
        """
        return pulumi.get(self, "fail_closed")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        (string) A unique identifier for the secondary proxy gateway
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetForwardingControlProxyGatewayLastModifiedByResult']:
        """
        (list) -  Information about the admin user that last modified the Proxy gateway
        """
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> builtins.int:
        """
        (int) - Timestamp when the ZPA gateway was last modified
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        (string) The configured name for the secondary proxy gateway
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryProxies")
    def primary_proxies(self) -> Sequence['outputs.GetForwardingControlProxyGatewayPrimaryProxyResult']:
        """
        (Set of String) - The primary proxy for the gateway. This field is not applicable to the Lite API.
        """
        return pulumi.get(self, "primary_proxies")

    @property
    @pulumi.getter(name="secondaryProxies")
    def secondary_proxies(self) -> Sequence['outputs.GetForwardingControlProxyGatewaySecondaryProxyResult']:
        """
        () - The secondary proxy for the gateway. This field is not applicable to the Lite API.
        """
        return pulumi.get(self, "secondary_proxies")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (string) - Indicates whether the type of Proxy gateway. Returned values are: `PROXYCHAIN`, `ZIA`, or `ECSELF`
        """
        return pulumi.get(self, "type")


class AwaitableGetForwardingControlProxyGatewayResult(GetForwardingControlProxyGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetForwardingControlProxyGatewayResult(
            description=self.description,
            fail_closed=self.fail_closed,
            id=self.id,
            last_modified_bies=self.last_modified_bies,
            last_modified_time=self.last_modified_time,
            name=self.name,
            primary_proxies=self.primary_proxies,
            secondary_proxies=self.secondary_proxies,
            type=self.type)


def get_forwarding_control_proxy_gateway(id: Optional[builtins.int] = None,
                                         name: Optional[builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetForwardingControlProxyGatewayResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-gateways-proxies)
    * [API documentation](https://help.zscaler.com/zia/forwarding-control-policy#/proxyGateways-get)

    Use the **zia_forwarding_control_proxy_gateway** data source to retrieve the proxy gateway information. This data source can then be associated with the attribute `proxy_gateway` when creating a Forwarding Control Rule via the resource: `ForwardingControlRule`

    ## Example Usage


    :param builtins.int id: The ID of the forwarding control Proxy Gateway resource.
    :param builtins.str name: The name of the forwarding control Proxy Gateway to be exported.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getForwardingControlProxyGateway:getForwardingControlProxyGateway', __args__, opts=opts, typ=GetForwardingControlProxyGatewayResult).value

    return AwaitableGetForwardingControlProxyGatewayResult(
        description=pulumi.get(__ret__, 'description'),
        fail_closed=pulumi.get(__ret__, 'fail_closed'),
        id=pulumi.get(__ret__, 'id'),
        last_modified_bies=pulumi.get(__ret__, 'last_modified_bies'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        name=pulumi.get(__ret__, 'name'),
        primary_proxies=pulumi.get(__ret__, 'primary_proxies'),
        secondary_proxies=pulumi.get(__ret__, 'secondary_proxies'),
        type=pulumi.get(__ret__, 'type'))
def get_forwarding_control_proxy_gateway_output(id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                                                name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetForwardingControlProxyGatewayResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-gateways-proxies)
    * [API documentation](https://help.zscaler.com/zia/forwarding-control-policy#/proxyGateways-get)

    Use the **zia_forwarding_control_proxy_gateway** data source to retrieve the proxy gateway information. This data source can then be associated with the attribute `proxy_gateway` when creating a Forwarding Control Rule via the resource: `ForwardingControlRule`

    ## Example Usage


    :param builtins.int id: The ID of the forwarding control Proxy Gateway resource.
    :param builtins.str name: The name of the forwarding control Proxy Gateway to be exported.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getForwardingControlProxyGateway:getForwardingControlProxyGateway', __args__, opts=opts, typ=GetForwardingControlProxyGatewayResult)
    return __ret__.apply(lambda __response__: GetForwardingControlProxyGatewayResult(
        description=pulumi.get(__response__, 'description'),
        fail_closed=pulumi.get(__response__, 'fail_closed'),
        id=pulumi.get(__response__, 'id'),
        last_modified_bies=pulumi.get(__response__, 'last_modified_bies'),
        last_modified_time=pulumi.get(__response__, 'last_modified_time'),
        name=pulumi.get(__response__, 'name'),
        primary_proxies=pulumi.get(__response__, 'primary_proxies'),
        secondary_proxies=pulumi.get(__response__, 'secondary_proxies'),
        type=pulumi.get(__response__, 'type')))
