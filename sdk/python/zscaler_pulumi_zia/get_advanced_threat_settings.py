# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAdvancedThreatSettingsResult',
    'AwaitableGetAdvancedThreatSettingsResult',
    'get_advanced_threat_settings',
    'get_advanced_threat_settings_output',
]

@pulumi.output_type
class GetAdvancedThreatSettingsResult:
    """
    A collection of values returned by getAdvancedThreatSettings.
    """
    def __init__(__self__, activex_blocked=None, activex_capture=None, ad_spyware_sites_blocked=None, ad_spyware_sites_capture=None, alert_for_unknown_suspicious_c2_traffic=None, anonymizer_blocked=None, anonymizer_capture=None, bit_torrent_blocked=None, bit_torrent_capture=None, block_countries_capture=None, blocked_countries=None, browser_exploits_blocked=None, browser_exploits_capture=None, cmd_ctl_server_blocked=None, cmd_ctl_server_capture=None, cmd_ctl_traffic_blocked=None, cmd_ctl_traffic_capture=None, cookie_stealing_blocked=None, cookie_stealing_pcap_enabled=None, crypto_mining_blocked=None, crypto_mining_capture=None, dga_domains_blocked=None, dga_domains_capture=None, file_format_vunerabilites_blocked=None, file_format_vunerabilites_capture=None, google_talk_blocked=None, google_talk_capture=None, id=None, irc_tunnelling_blocked=None, irc_tunnelling_capture=None, known_phishing_sites_blocked=None, known_phishing_sites_capture=None, malicious_urls_capture=None, malware_sites_blocked=None, malware_sites_capture=None, potential_malicious_requests_blocked=None, potential_malicious_requests_capture=None, risk_tolerance=None, risk_tolerance_capture=None, ssh_tunnelling_blocked=None, ssh_tunnelling_capture=None, suspect_adware_spyware_sites_blocked=None, suspect_adware_spyware_sites_capture=None, suspected_phishing_sites_blocked=None, suspected_phishing_sites_capture=None, tor_blocked=None, tor_capture=None, web_spam_blocked=None, web_spam_capture=None):
        if activex_blocked and not isinstance(activex_blocked, bool):
            raise TypeError("Expected argument 'activex_blocked' to be a bool")
        pulumi.set(__self__, "activex_blocked", activex_blocked)
        if activex_capture and not isinstance(activex_capture, bool):
            raise TypeError("Expected argument 'activex_capture' to be a bool")
        pulumi.set(__self__, "activex_capture", activex_capture)
        if ad_spyware_sites_blocked and not isinstance(ad_spyware_sites_blocked, bool):
            raise TypeError("Expected argument 'ad_spyware_sites_blocked' to be a bool")
        pulumi.set(__self__, "ad_spyware_sites_blocked", ad_spyware_sites_blocked)
        if ad_spyware_sites_capture and not isinstance(ad_spyware_sites_capture, bool):
            raise TypeError("Expected argument 'ad_spyware_sites_capture' to be a bool")
        pulumi.set(__self__, "ad_spyware_sites_capture", ad_spyware_sites_capture)
        if alert_for_unknown_suspicious_c2_traffic and not isinstance(alert_for_unknown_suspicious_c2_traffic, bool):
            raise TypeError("Expected argument 'alert_for_unknown_suspicious_c2_traffic' to be a bool")
        pulumi.set(__self__, "alert_for_unknown_suspicious_c2_traffic", alert_for_unknown_suspicious_c2_traffic)
        if anonymizer_blocked and not isinstance(anonymizer_blocked, bool):
            raise TypeError("Expected argument 'anonymizer_blocked' to be a bool")
        pulumi.set(__self__, "anonymizer_blocked", anonymizer_blocked)
        if anonymizer_capture and not isinstance(anonymizer_capture, bool):
            raise TypeError("Expected argument 'anonymizer_capture' to be a bool")
        pulumi.set(__self__, "anonymizer_capture", anonymizer_capture)
        if bit_torrent_blocked and not isinstance(bit_torrent_blocked, bool):
            raise TypeError("Expected argument 'bit_torrent_blocked' to be a bool")
        pulumi.set(__self__, "bit_torrent_blocked", bit_torrent_blocked)
        if bit_torrent_capture and not isinstance(bit_torrent_capture, bool):
            raise TypeError("Expected argument 'bit_torrent_capture' to be a bool")
        pulumi.set(__self__, "bit_torrent_capture", bit_torrent_capture)
        if block_countries_capture and not isinstance(block_countries_capture, bool):
            raise TypeError("Expected argument 'block_countries_capture' to be a bool")
        pulumi.set(__self__, "block_countries_capture", block_countries_capture)
        if blocked_countries and not isinstance(blocked_countries, list):
            raise TypeError("Expected argument 'blocked_countries' to be a list")
        pulumi.set(__self__, "blocked_countries", blocked_countries)
        if browser_exploits_blocked and not isinstance(browser_exploits_blocked, bool):
            raise TypeError("Expected argument 'browser_exploits_blocked' to be a bool")
        pulumi.set(__self__, "browser_exploits_blocked", browser_exploits_blocked)
        if browser_exploits_capture and not isinstance(browser_exploits_capture, bool):
            raise TypeError("Expected argument 'browser_exploits_capture' to be a bool")
        pulumi.set(__self__, "browser_exploits_capture", browser_exploits_capture)
        if cmd_ctl_server_blocked and not isinstance(cmd_ctl_server_blocked, bool):
            raise TypeError("Expected argument 'cmd_ctl_server_blocked' to be a bool")
        pulumi.set(__self__, "cmd_ctl_server_blocked", cmd_ctl_server_blocked)
        if cmd_ctl_server_capture and not isinstance(cmd_ctl_server_capture, bool):
            raise TypeError("Expected argument 'cmd_ctl_server_capture' to be a bool")
        pulumi.set(__self__, "cmd_ctl_server_capture", cmd_ctl_server_capture)
        if cmd_ctl_traffic_blocked and not isinstance(cmd_ctl_traffic_blocked, bool):
            raise TypeError("Expected argument 'cmd_ctl_traffic_blocked' to be a bool")
        pulumi.set(__self__, "cmd_ctl_traffic_blocked", cmd_ctl_traffic_blocked)
        if cmd_ctl_traffic_capture and not isinstance(cmd_ctl_traffic_capture, bool):
            raise TypeError("Expected argument 'cmd_ctl_traffic_capture' to be a bool")
        pulumi.set(__self__, "cmd_ctl_traffic_capture", cmd_ctl_traffic_capture)
        if cookie_stealing_blocked and not isinstance(cookie_stealing_blocked, bool):
            raise TypeError("Expected argument 'cookie_stealing_blocked' to be a bool")
        pulumi.set(__self__, "cookie_stealing_blocked", cookie_stealing_blocked)
        if cookie_stealing_pcap_enabled and not isinstance(cookie_stealing_pcap_enabled, bool):
            raise TypeError("Expected argument 'cookie_stealing_pcap_enabled' to be a bool")
        pulumi.set(__self__, "cookie_stealing_pcap_enabled", cookie_stealing_pcap_enabled)
        if crypto_mining_blocked and not isinstance(crypto_mining_blocked, bool):
            raise TypeError("Expected argument 'crypto_mining_blocked' to be a bool")
        pulumi.set(__self__, "crypto_mining_blocked", crypto_mining_blocked)
        if crypto_mining_capture and not isinstance(crypto_mining_capture, bool):
            raise TypeError("Expected argument 'crypto_mining_capture' to be a bool")
        pulumi.set(__self__, "crypto_mining_capture", crypto_mining_capture)
        if dga_domains_blocked and not isinstance(dga_domains_blocked, bool):
            raise TypeError("Expected argument 'dga_domains_blocked' to be a bool")
        pulumi.set(__self__, "dga_domains_blocked", dga_domains_blocked)
        if dga_domains_capture and not isinstance(dga_domains_capture, bool):
            raise TypeError("Expected argument 'dga_domains_capture' to be a bool")
        pulumi.set(__self__, "dga_domains_capture", dga_domains_capture)
        if file_format_vunerabilites_blocked and not isinstance(file_format_vunerabilites_blocked, bool):
            raise TypeError("Expected argument 'file_format_vunerabilites_blocked' to be a bool")
        pulumi.set(__self__, "file_format_vunerabilites_blocked", file_format_vunerabilites_blocked)
        if file_format_vunerabilites_capture and not isinstance(file_format_vunerabilites_capture, bool):
            raise TypeError("Expected argument 'file_format_vunerabilites_capture' to be a bool")
        pulumi.set(__self__, "file_format_vunerabilites_capture", file_format_vunerabilites_capture)
        if google_talk_blocked and not isinstance(google_talk_blocked, bool):
            raise TypeError("Expected argument 'google_talk_blocked' to be a bool")
        pulumi.set(__self__, "google_talk_blocked", google_talk_blocked)
        if google_talk_capture and not isinstance(google_talk_capture, bool):
            raise TypeError("Expected argument 'google_talk_capture' to be a bool")
        pulumi.set(__self__, "google_talk_capture", google_talk_capture)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if irc_tunnelling_blocked and not isinstance(irc_tunnelling_blocked, bool):
            raise TypeError("Expected argument 'irc_tunnelling_blocked' to be a bool")
        pulumi.set(__self__, "irc_tunnelling_blocked", irc_tunnelling_blocked)
        if irc_tunnelling_capture and not isinstance(irc_tunnelling_capture, bool):
            raise TypeError("Expected argument 'irc_tunnelling_capture' to be a bool")
        pulumi.set(__self__, "irc_tunnelling_capture", irc_tunnelling_capture)
        if known_phishing_sites_blocked and not isinstance(known_phishing_sites_blocked, bool):
            raise TypeError("Expected argument 'known_phishing_sites_blocked' to be a bool")
        pulumi.set(__self__, "known_phishing_sites_blocked", known_phishing_sites_blocked)
        if known_phishing_sites_capture and not isinstance(known_phishing_sites_capture, bool):
            raise TypeError("Expected argument 'known_phishing_sites_capture' to be a bool")
        pulumi.set(__self__, "known_phishing_sites_capture", known_phishing_sites_capture)
        if malicious_urls_capture and not isinstance(malicious_urls_capture, bool):
            raise TypeError("Expected argument 'malicious_urls_capture' to be a bool")
        pulumi.set(__self__, "malicious_urls_capture", malicious_urls_capture)
        if malware_sites_blocked and not isinstance(malware_sites_blocked, bool):
            raise TypeError("Expected argument 'malware_sites_blocked' to be a bool")
        pulumi.set(__self__, "malware_sites_blocked", malware_sites_blocked)
        if malware_sites_capture and not isinstance(malware_sites_capture, bool):
            raise TypeError("Expected argument 'malware_sites_capture' to be a bool")
        pulumi.set(__self__, "malware_sites_capture", malware_sites_capture)
        if potential_malicious_requests_blocked and not isinstance(potential_malicious_requests_blocked, bool):
            raise TypeError("Expected argument 'potential_malicious_requests_blocked' to be a bool")
        pulumi.set(__self__, "potential_malicious_requests_blocked", potential_malicious_requests_blocked)
        if potential_malicious_requests_capture and not isinstance(potential_malicious_requests_capture, bool):
            raise TypeError("Expected argument 'potential_malicious_requests_capture' to be a bool")
        pulumi.set(__self__, "potential_malicious_requests_capture", potential_malicious_requests_capture)
        if risk_tolerance and not isinstance(risk_tolerance, int):
            raise TypeError("Expected argument 'risk_tolerance' to be a int")
        pulumi.set(__self__, "risk_tolerance", risk_tolerance)
        if risk_tolerance_capture and not isinstance(risk_tolerance_capture, bool):
            raise TypeError("Expected argument 'risk_tolerance_capture' to be a bool")
        pulumi.set(__self__, "risk_tolerance_capture", risk_tolerance_capture)
        if ssh_tunnelling_blocked and not isinstance(ssh_tunnelling_blocked, bool):
            raise TypeError("Expected argument 'ssh_tunnelling_blocked' to be a bool")
        pulumi.set(__self__, "ssh_tunnelling_blocked", ssh_tunnelling_blocked)
        if ssh_tunnelling_capture and not isinstance(ssh_tunnelling_capture, bool):
            raise TypeError("Expected argument 'ssh_tunnelling_capture' to be a bool")
        pulumi.set(__self__, "ssh_tunnelling_capture", ssh_tunnelling_capture)
        if suspect_adware_spyware_sites_blocked and not isinstance(suspect_adware_spyware_sites_blocked, bool):
            raise TypeError("Expected argument 'suspect_adware_spyware_sites_blocked' to be a bool")
        pulumi.set(__self__, "suspect_adware_spyware_sites_blocked", suspect_adware_spyware_sites_blocked)
        if suspect_adware_spyware_sites_capture and not isinstance(suspect_adware_spyware_sites_capture, bool):
            raise TypeError("Expected argument 'suspect_adware_spyware_sites_capture' to be a bool")
        pulumi.set(__self__, "suspect_adware_spyware_sites_capture", suspect_adware_spyware_sites_capture)
        if suspected_phishing_sites_blocked and not isinstance(suspected_phishing_sites_blocked, bool):
            raise TypeError("Expected argument 'suspected_phishing_sites_blocked' to be a bool")
        pulumi.set(__self__, "suspected_phishing_sites_blocked", suspected_phishing_sites_blocked)
        if suspected_phishing_sites_capture and not isinstance(suspected_phishing_sites_capture, bool):
            raise TypeError("Expected argument 'suspected_phishing_sites_capture' to be a bool")
        pulumi.set(__self__, "suspected_phishing_sites_capture", suspected_phishing_sites_capture)
        if tor_blocked and not isinstance(tor_blocked, bool):
            raise TypeError("Expected argument 'tor_blocked' to be a bool")
        pulumi.set(__self__, "tor_blocked", tor_blocked)
        if tor_capture and not isinstance(tor_capture, bool):
            raise TypeError("Expected argument 'tor_capture' to be a bool")
        pulumi.set(__self__, "tor_capture", tor_capture)
        if web_spam_blocked and not isinstance(web_spam_blocked, bool):
            raise TypeError("Expected argument 'web_spam_blocked' to be a bool")
        pulumi.set(__self__, "web_spam_blocked", web_spam_blocked)
        if web_spam_capture and not isinstance(web_spam_capture, bool):
            raise TypeError("Expected argument 'web_spam_capture' to be a bool")
        pulumi.set(__self__, "web_spam_capture", web_spam_capture)

    @property
    @pulumi.getter(name="activexBlocked")
    def activex_blocked(self) -> builtins.bool:
        return pulumi.get(self, "activex_blocked")

    @property
    @pulumi.getter(name="activexCapture")
    def activex_capture(self) -> builtins.bool:
        return pulumi.get(self, "activex_capture")

    @property
    @pulumi.getter(name="adSpywareSitesBlocked")
    def ad_spyware_sites_blocked(self) -> builtins.bool:
        return pulumi.get(self, "ad_spyware_sites_blocked")

    @property
    @pulumi.getter(name="adSpywareSitesCapture")
    def ad_spyware_sites_capture(self) -> builtins.bool:
        return pulumi.get(self, "ad_spyware_sites_capture")

    @property
    @pulumi.getter(name="alertForUnknownSuspiciousC2Traffic")
    def alert_for_unknown_suspicious_c2_traffic(self) -> builtins.bool:
        return pulumi.get(self, "alert_for_unknown_suspicious_c2_traffic")

    @property
    @pulumi.getter(name="anonymizerBlocked")
    def anonymizer_blocked(self) -> builtins.bool:
        return pulumi.get(self, "anonymizer_blocked")

    @property
    @pulumi.getter(name="anonymizerCapture")
    def anonymizer_capture(self) -> builtins.bool:
        return pulumi.get(self, "anonymizer_capture")

    @property
    @pulumi.getter(name="bitTorrentBlocked")
    def bit_torrent_blocked(self) -> builtins.bool:
        return pulumi.get(self, "bit_torrent_blocked")

    @property
    @pulumi.getter(name="bitTorrentCapture")
    def bit_torrent_capture(self) -> builtins.bool:
        return pulumi.get(self, "bit_torrent_capture")

    @property
    @pulumi.getter(name="blockCountriesCapture")
    def block_countries_capture(self) -> builtins.bool:
        return pulumi.get(self, "block_countries_capture")

    @property
    @pulumi.getter(name="blockedCountries")
    def blocked_countries(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "blocked_countries")

    @property
    @pulumi.getter(name="browserExploitsBlocked")
    def browser_exploits_blocked(self) -> builtins.bool:
        return pulumi.get(self, "browser_exploits_blocked")

    @property
    @pulumi.getter(name="browserExploitsCapture")
    def browser_exploits_capture(self) -> builtins.bool:
        return pulumi.get(self, "browser_exploits_capture")

    @property
    @pulumi.getter(name="cmdCtlServerBlocked")
    def cmd_ctl_server_blocked(self) -> builtins.bool:
        return pulumi.get(self, "cmd_ctl_server_blocked")

    @property
    @pulumi.getter(name="cmdCtlServerCapture")
    def cmd_ctl_server_capture(self) -> builtins.bool:
        return pulumi.get(self, "cmd_ctl_server_capture")

    @property
    @pulumi.getter(name="cmdCtlTrafficBlocked")
    def cmd_ctl_traffic_blocked(self) -> builtins.bool:
        return pulumi.get(self, "cmd_ctl_traffic_blocked")

    @property
    @pulumi.getter(name="cmdCtlTrafficCapture")
    def cmd_ctl_traffic_capture(self) -> builtins.bool:
        return pulumi.get(self, "cmd_ctl_traffic_capture")

    @property
    @pulumi.getter(name="cookieStealingBlocked")
    def cookie_stealing_blocked(self) -> builtins.bool:
        return pulumi.get(self, "cookie_stealing_blocked")

    @property
    @pulumi.getter(name="cookieStealingPcapEnabled")
    def cookie_stealing_pcap_enabled(self) -> builtins.bool:
        return pulumi.get(self, "cookie_stealing_pcap_enabled")

    @property
    @pulumi.getter(name="cryptoMiningBlocked")
    def crypto_mining_blocked(self) -> builtins.bool:
        return pulumi.get(self, "crypto_mining_blocked")

    @property
    @pulumi.getter(name="cryptoMiningCapture")
    def crypto_mining_capture(self) -> builtins.bool:
        return pulumi.get(self, "crypto_mining_capture")

    @property
    @pulumi.getter(name="dgaDomainsBlocked")
    def dga_domains_blocked(self) -> builtins.bool:
        return pulumi.get(self, "dga_domains_blocked")

    @property
    @pulumi.getter(name="dgaDomainsCapture")
    def dga_domains_capture(self) -> builtins.bool:
        return pulumi.get(self, "dga_domains_capture")

    @property
    @pulumi.getter(name="fileFormatVunerabilitesBlocked")
    def file_format_vunerabilites_blocked(self) -> builtins.bool:
        return pulumi.get(self, "file_format_vunerabilites_blocked")

    @property
    @pulumi.getter(name="fileFormatVunerabilitesCapture")
    def file_format_vunerabilites_capture(self) -> builtins.bool:
        return pulumi.get(self, "file_format_vunerabilites_capture")

    @property
    @pulumi.getter(name="googleTalkBlocked")
    def google_talk_blocked(self) -> builtins.bool:
        return pulumi.get(self, "google_talk_blocked")

    @property
    @pulumi.getter(name="googleTalkCapture")
    def google_talk_capture(self) -> builtins.bool:
        return pulumi.get(self, "google_talk_capture")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ircTunnellingBlocked")
    def irc_tunnelling_blocked(self) -> builtins.bool:
        return pulumi.get(self, "irc_tunnelling_blocked")

    @property
    @pulumi.getter(name="ircTunnellingCapture")
    def irc_tunnelling_capture(self) -> builtins.bool:
        return pulumi.get(self, "irc_tunnelling_capture")

    @property
    @pulumi.getter(name="knownPhishingSitesBlocked")
    def known_phishing_sites_blocked(self) -> builtins.bool:
        return pulumi.get(self, "known_phishing_sites_blocked")

    @property
    @pulumi.getter(name="knownPhishingSitesCapture")
    def known_phishing_sites_capture(self) -> builtins.bool:
        return pulumi.get(self, "known_phishing_sites_capture")

    @property
    @pulumi.getter(name="maliciousUrlsCapture")
    def malicious_urls_capture(self) -> builtins.bool:
        return pulumi.get(self, "malicious_urls_capture")

    @property
    @pulumi.getter(name="malwareSitesBlocked")
    def malware_sites_blocked(self) -> builtins.bool:
        return pulumi.get(self, "malware_sites_blocked")

    @property
    @pulumi.getter(name="malwareSitesCapture")
    def malware_sites_capture(self) -> builtins.bool:
        return pulumi.get(self, "malware_sites_capture")

    @property
    @pulumi.getter(name="potentialMaliciousRequestsBlocked")
    def potential_malicious_requests_blocked(self) -> builtins.bool:
        return pulumi.get(self, "potential_malicious_requests_blocked")

    @property
    @pulumi.getter(name="potentialMaliciousRequestsCapture")
    def potential_malicious_requests_capture(self) -> builtins.bool:
        return pulumi.get(self, "potential_malicious_requests_capture")

    @property
    @pulumi.getter(name="riskTolerance")
    def risk_tolerance(self) -> builtins.int:
        return pulumi.get(self, "risk_tolerance")

    @property
    @pulumi.getter(name="riskToleranceCapture")
    def risk_tolerance_capture(self) -> builtins.bool:
        return pulumi.get(self, "risk_tolerance_capture")

    @property
    @pulumi.getter(name="sshTunnellingBlocked")
    def ssh_tunnelling_blocked(self) -> builtins.bool:
        return pulumi.get(self, "ssh_tunnelling_blocked")

    @property
    @pulumi.getter(name="sshTunnellingCapture")
    def ssh_tunnelling_capture(self) -> builtins.bool:
        return pulumi.get(self, "ssh_tunnelling_capture")

    @property
    @pulumi.getter(name="suspectAdwareSpywareSitesBlocked")
    def suspect_adware_spyware_sites_blocked(self) -> builtins.bool:
        return pulumi.get(self, "suspect_adware_spyware_sites_blocked")

    @property
    @pulumi.getter(name="suspectAdwareSpywareSitesCapture")
    def suspect_adware_spyware_sites_capture(self) -> builtins.bool:
        return pulumi.get(self, "suspect_adware_spyware_sites_capture")

    @property
    @pulumi.getter(name="suspectedPhishingSitesBlocked")
    def suspected_phishing_sites_blocked(self) -> builtins.bool:
        return pulumi.get(self, "suspected_phishing_sites_blocked")

    @property
    @pulumi.getter(name="suspectedPhishingSitesCapture")
    def suspected_phishing_sites_capture(self) -> builtins.bool:
        return pulumi.get(self, "suspected_phishing_sites_capture")

    @property
    @pulumi.getter(name="torBlocked")
    def tor_blocked(self) -> builtins.bool:
        return pulumi.get(self, "tor_blocked")

    @property
    @pulumi.getter(name="torCapture")
    def tor_capture(self) -> builtins.bool:
        return pulumi.get(self, "tor_capture")

    @property
    @pulumi.getter(name="webSpamBlocked")
    def web_spam_blocked(self) -> builtins.bool:
        return pulumi.get(self, "web_spam_blocked")

    @property
    @pulumi.getter(name="webSpamCapture")
    def web_spam_capture(self) -> builtins.bool:
        return pulumi.get(self, "web_spam_capture")


class AwaitableGetAdvancedThreatSettingsResult(GetAdvancedThreatSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAdvancedThreatSettingsResult(
            activex_blocked=self.activex_blocked,
            activex_capture=self.activex_capture,
            ad_spyware_sites_blocked=self.ad_spyware_sites_blocked,
            ad_spyware_sites_capture=self.ad_spyware_sites_capture,
            alert_for_unknown_suspicious_c2_traffic=self.alert_for_unknown_suspicious_c2_traffic,
            anonymizer_blocked=self.anonymizer_blocked,
            anonymizer_capture=self.anonymizer_capture,
            bit_torrent_blocked=self.bit_torrent_blocked,
            bit_torrent_capture=self.bit_torrent_capture,
            block_countries_capture=self.block_countries_capture,
            blocked_countries=self.blocked_countries,
            browser_exploits_blocked=self.browser_exploits_blocked,
            browser_exploits_capture=self.browser_exploits_capture,
            cmd_ctl_server_blocked=self.cmd_ctl_server_blocked,
            cmd_ctl_server_capture=self.cmd_ctl_server_capture,
            cmd_ctl_traffic_blocked=self.cmd_ctl_traffic_blocked,
            cmd_ctl_traffic_capture=self.cmd_ctl_traffic_capture,
            cookie_stealing_blocked=self.cookie_stealing_blocked,
            cookie_stealing_pcap_enabled=self.cookie_stealing_pcap_enabled,
            crypto_mining_blocked=self.crypto_mining_blocked,
            crypto_mining_capture=self.crypto_mining_capture,
            dga_domains_blocked=self.dga_domains_blocked,
            dga_domains_capture=self.dga_domains_capture,
            file_format_vunerabilites_blocked=self.file_format_vunerabilites_blocked,
            file_format_vunerabilites_capture=self.file_format_vunerabilites_capture,
            google_talk_blocked=self.google_talk_blocked,
            google_talk_capture=self.google_talk_capture,
            id=self.id,
            irc_tunnelling_blocked=self.irc_tunnelling_blocked,
            irc_tunnelling_capture=self.irc_tunnelling_capture,
            known_phishing_sites_blocked=self.known_phishing_sites_blocked,
            known_phishing_sites_capture=self.known_phishing_sites_capture,
            malicious_urls_capture=self.malicious_urls_capture,
            malware_sites_blocked=self.malware_sites_blocked,
            malware_sites_capture=self.malware_sites_capture,
            potential_malicious_requests_blocked=self.potential_malicious_requests_blocked,
            potential_malicious_requests_capture=self.potential_malicious_requests_capture,
            risk_tolerance=self.risk_tolerance,
            risk_tolerance_capture=self.risk_tolerance_capture,
            ssh_tunnelling_blocked=self.ssh_tunnelling_blocked,
            ssh_tunnelling_capture=self.ssh_tunnelling_capture,
            suspect_adware_spyware_sites_blocked=self.suspect_adware_spyware_sites_blocked,
            suspect_adware_spyware_sites_capture=self.suspect_adware_spyware_sites_capture,
            suspected_phishing_sites_blocked=self.suspected_phishing_sites_blocked,
            suspected_phishing_sites_capture=self.suspected_phishing_sites_capture,
            tor_blocked=self.tor_blocked,
            tor_capture=self.tor_capture,
            web_spam_blocked=self.web_spam_blocked,
            web_spam_capture=self.web_spam_capture)


def get_advanced_threat_settings(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAdvancedThreatSettingsResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/configuring-advanced-threat-protection-policy)
    * [API documentation](https://help.zscaler.com/zia/advanced-threat-protection-policy#/)

    Use the **zia_advanced_threat_settings** data source to retrieve the advanced threat configuration settings in the ZIA Admin Portal. To learn more see [Advanced Threat Protection](https://help.zscaler.com/unified/configuring-security-exceptions-advanced-threat-protection-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getAdvancedThreatSettings:getAdvancedThreatSettings', __args__, opts=opts, typ=GetAdvancedThreatSettingsResult).value

    return AwaitableGetAdvancedThreatSettingsResult(
        activex_blocked=pulumi.get(__ret__, 'activex_blocked'),
        activex_capture=pulumi.get(__ret__, 'activex_capture'),
        ad_spyware_sites_blocked=pulumi.get(__ret__, 'ad_spyware_sites_blocked'),
        ad_spyware_sites_capture=pulumi.get(__ret__, 'ad_spyware_sites_capture'),
        alert_for_unknown_suspicious_c2_traffic=pulumi.get(__ret__, 'alert_for_unknown_suspicious_c2_traffic'),
        anonymizer_blocked=pulumi.get(__ret__, 'anonymizer_blocked'),
        anonymizer_capture=pulumi.get(__ret__, 'anonymizer_capture'),
        bit_torrent_blocked=pulumi.get(__ret__, 'bit_torrent_blocked'),
        bit_torrent_capture=pulumi.get(__ret__, 'bit_torrent_capture'),
        block_countries_capture=pulumi.get(__ret__, 'block_countries_capture'),
        blocked_countries=pulumi.get(__ret__, 'blocked_countries'),
        browser_exploits_blocked=pulumi.get(__ret__, 'browser_exploits_blocked'),
        browser_exploits_capture=pulumi.get(__ret__, 'browser_exploits_capture'),
        cmd_ctl_server_blocked=pulumi.get(__ret__, 'cmd_ctl_server_blocked'),
        cmd_ctl_server_capture=pulumi.get(__ret__, 'cmd_ctl_server_capture'),
        cmd_ctl_traffic_blocked=pulumi.get(__ret__, 'cmd_ctl_traffic_blocked'),
        cmd_ctl_traffic_capture=pulumi.get(__ret__, 'cmd_ctl_traffic_capture'),
        cookie_stealing_blocked=pulumi.get(__ret__, 'cookie_stealing_blocked'),
        cookie_stealing_pcap_enabled=pulumi.get(__ret__, 'cookie_stealing_pcap_enabled'),
        crypto_mining_blocked=pulumi.get(__ret__, 'crypto_mining_blocked'),
        crypto_mining_capture=pulumi.get(__ret__, 'crypto_mining_capture'),
        dga_domains_blocked=pulumi.get(__ret__, 'dga_domains_blocked'),
        dga_domains_capture=pulumi.get(__ret__, 'dga_domains_capture'),
        file_format_vunerabilites_blocked=pulumi.get(__ret__, 'file_format_vunerabilites_blocked'),
        file_format_vunerabilites_capture=pulumi.get(__ret__, 'file_format_vunerabilites_capture'),
        google_talk_blocked=pulumi.get(__ret__, 'google_talk_blocked'),
        google_talk_capture=pulumi.get(__ret__, 'google_talk_capture'),
        id=pulumi.get(__ret__, 'id'),
        irc_tunnelling_blocked=pulumi.get(__ret__, 'irc_tunnelling_blocked'),
        irc_tunnelling_capture=pulumi.get(__ret__, 'irc_tunnelling_capture'),
        known_phishing_sites_blocked=pulumi.get(__ret__, 'known_phishing_sites_blocked'),
        known_phishing_sites_capture=pulumi.get(__ret__, 'known_phishing_sites_capture'),
        malicious_urls_capture=pulumi.get(__ret__, 'malicious_urls_capture'),
        malware_sites_blocked=pulumi.get(__ret__, 'malware_sites_blocked'),
        malware_sites_capture=pulumi.get(__ret__, 'malware_sites_capture'),
        potential_malicious_requests_blocked=pulumi.get(__ret__, 'potential_malicious_requests_blocked'),
        potential_malicious_requests_capture=pulumi.get(__ret__, 'potential_malicious_requests_capture'),
        risk_tolerance=pulumi.get(__ret__, 'risk_tolerance'),
        risk_tolerance_capture=pulumi.get(__ret__, 'risk_tolerance_capture'),
        ssh_tunnelling_blocked=pulumi.get(__ret__, 'ssh_tunnelling_blocked'),
        ssh_tunnelling_capture=pulumi.get(__ret__, 'ssh_tunnelling_capture'),
        suspect_adware_spyware_sites_blocked=pulumi.get(__ret__, 'suspect_adware_spyware_sites_blocked'),
        suspect_adware_spyware_sites_capture=pulumi.get(__ret__, 'suspect_adware_spyware_sites_capture'),
        suspected_phishing_sites_blocked=pulumi.get(__ret__, 'suspected_phishing_sites_blocked'),
        suspected_phishing_sites_capture=pulumi.get(__ret__, 'suspected_phishing_sites_capture'),
        tor_blocked=pulumi.get(__ret__, 'tor_blocked'),
        tor_capture=pulumi.get(__ret__, 'tor_capture'),
        web_spam_blocked=pulumi.get(__ret__, 'web_spam_blocked'),
        web_spam_capture=pulumi.get(__ret__, 'web_spam_capture'))
def get_advanced_threat_settings_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAdvancedThreatSettingsResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/configuring-advanced-threat-protection-policy)
    * [API documentation](https://help.zscaler.com/zia/advanced-threat-protection-policy#/)

    Use the **zia_advanced_threat_settings** data source to retrieve the advanced threat configuration settings in the ZIA Admin Portal. To learn more see [Advanced Threat Protection](https://help.zscaler.com/unified/configuring-security-exceptions-advanced-threat-protection-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getAdvancedThreatSettings:getAdvancedThreatSettings', __args__, opts=opts, typ=GetAdvancedThreatSettingsResult)
    return __ret__.apply(lambda __response__: GetAdvancedThreatSettingsResult(
        activex_blocked=pulumi.get(__response__, 'activex_blocked'),
        activex_capture=pulumi.get(__response__, 'activex_capture'),
        ad_spyware_sites_blocked=pulumi.get(__response__, 'ad_spyware_sites_blocked'),
        ad_spyware_sites_capture=pulumi.get(__response__, 'ad_spyware_sites_capture'),
        alert_for_unknown_suspicious_c2_traffic=pulumi.get(__response__, 'alert_for_unknown_suspicious_c2_traffic'),
        anonymizer_blocked=pulumi.get(__response__, 'anonymizer_blocked'),
        anonymizer_capture=pulumi.get(__response__, 'anonymizer_capture'),
        bit_torrent_blocked=pulumi.get(__response__, 'bit_torrent_blocked'),
        bit_torrent_capture=pulumi.get(__response__, 'bit_torrent_capture'),
        block_countries_capture=pulumi.get(__response__, 'block_countries_capture'),
        blocked_countries=pulumi.get(__response__, 'blocked_countries'),
        browser_exploits_blocked=pulumi.get(__response__, 'browser_exploits_blocked'),
        browser_exploits_capture=pulumi.get(__response__, 'browser_exploits_capture'),
        cmd_ctl_server_blocked=pulumi.get(__response__, 'cmd_ctl_server_blocked'),
        cmd_ctl_server_capture=pulumi.get(__response__, 'cmd_ctl_server_capture'),
        cmd_ctl_traffic_blocked=pulumi.get(__response__, 'cmd_ctl_traffic_blocked'),
        cmd_ctl_traffic_capture=pulumi.get(__response__, 'cmd_ctl_traffic_capture'),
        cookie_stealing_blocked=pulumi.get(__response__, 'cookie_stealing_blocked'),
        cookie_stealing_pcap_enabled=pulumi.get(__response__, 'cookie_stealing_pcap_enabled'),
        crypto_mining_blocked=pulumi.get(__response__, 'crypto_mining_blocked'),
        crypto_mining_capture=pulumi.get(__response__, 'crypto_mining_capture'),
        dga_domains_blocked=pulumi.get(__response__, 'dga_domains_blocked'),
        dga_domains_capture=pulumi.get(__response__, 'dga_domains_capture'),
        file_format_vunerabilites_blocked=pulumi.get(__response__, 'file_format_vunerabilites_blocked'),
        file_format_vunerabilites_capture=pulumi.get(__response__, 'file_format_vunerabilites_capture'),
        google_talk_blocked=pulumi.get(__response__, 'google_talk_blocked'),
        google_talk_capture=pulumi.get(__response__, 'google_talk_capture'),
        id=pulumi.get(__response__, 'id'),
        irc_tunnelling_blocked=pulumi.get(__response__, 'irc_tunnelling_blocked'),
        irc_tunnelling_capture=pulumi.get(__response__, 'irc_tunnelling_capture'),
        known_phishing_sites_blocked=pulumi.get(__response__, 'known_phishing_sites_blocked'),
        known_phishing_sites_capture=pulumi.get(__response__, 'known_phishing_sites_capture'),
        malicious_urls_capture=pulumi.get(__response__, 'malicious_urls_capture'),
        malware_sites_blocked=pulumi.get(__response__, 'malware_sites_blocked'),
        malware_sites_capture=pulumi.get(__response__, 'malware_sites_capture'),
        potential_malicious_requests_blocked=pulumi.get(__response__, 'potential_malicious_requests_blocked'),
        potential_malicious_requests_capture=pulumi.get(__response__, 'potential_malicious_requests_capture'),
        risk_tolerance=pulumi.get(__response__, 'risk_tolerance'),
        risk_tolerance_capture=pulumi.get(__response__, 'risk_tolerance_capture'),
        ssh_tunnelling_blocked=pulumi.get(__response__, 'ssh_tunnelling_blocked'),
        ssh_tunnelling_capture=pulumi.get(__response__, 'ssh_tunnelling_capture'),
        suspect_adware_spyware_sites_blocked=pulumi.get(__response__, 'suspect_adware_spyware_sites_blocked'),
        suspect_adware_spyware_sites_capture=pulumi.get(__response__, 'suspect_adware_spyware_sites_capture'),
        suspected_phishing_sites_blocked=pulumi.get(__response__, 'suspected_phishing_sites_blocked'),
        suspected_phishing_sites_capture=pulumi.get(__response__, 'suspected_phishing_sites_capture'),
        tor_blocked=pulumi.get(__response__, 'tor_blocked'),
        tor_capture=pulumi.get(__response__, 'tor_capture'),
        web_spam_blocked=pulumi.get(__response__, 'web_spam_blocked'),
        web_spam_capture=pulumi.get(__response__, 'web_spam_capture')))
