# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DLPWebRulesArgs', 'DLPWebRules']

@pulumi.input_type
class DLPWebRulesArgs:
    def __init__(__self__, *,
                 order: pulumi.Input[builtins.int],
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 auditors: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesAuditorArgs']]]] = None,
                 cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 departments: Optional[pulumi.Input['DLPWebRulesDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dlp_download_scan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dlp_engines: Optional[pulumi.Input['DLPWebRulesDlpEnginesArgs']] = None,
                 excluded_departments: Optional[pulumi.Input['DLPWebRulesExcludedDepartmentsArgs']] = None,
                 excluded_domain_profiles: Optional[pulumi.Input['DLPWebRulesExcludedDomainProfilesArgs']] = None,
                 excluded_groups: Optional[pulumi.Input['DLPWebRulesExcludedGroupsArgs']] = None,
                 excluded_users: Optional[pulumi.Input['DLPWebRulesExcludedUsersArgs']] = None,
                 external_auditor_email: Optional[pulumi.Input[builtins.str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 groups: Optional[pulumi.Input['DLPWebRulesGroupsArgs']] = None,
                 icap_servers: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesIcapServerArgs']]]] = None,
                 included_domain_profiles: Optional[pulumi.Input['DLPWebRulesIncludedDomainProfilesArgs']] = None,
                 inspect_http_get_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 labels: Optional[pulumi.Input['DLPWebRulesLabelsArgs']] = None,
                 location_groups: Optional[pulumi.Input['DLPWebRulesLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['DLPWebRulesLocationsArgs']] = None,
                 match_only: Optional[pulumi.Input[builtins.bool]] = None,
                 min_size: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 notification_templates: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesNotificationTemplateArgs']]]] = None,
                 parent_rule: Optional[pulumi.Input[builtins.int]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 severity: Optional[pulumi.Input[builtins.str]] = None,
                 source_ip_groups: Optional[pulumi.Input['DLPWebRulesSourceIpGroupsArgs']] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 sub_rules: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 time_windows: Optional[pulumi.Input['DLPWebRulesTimeWindowsArgs']] = None,
                 url_categories: Optional[pulumi.Input['DLPWebRulesUrlCategoriesArgs']] = None,
                 user_risk_score_levels: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 users: Optional[pulumi.Input['DLPWebRulesUsersArgs']] = None,
                 without_content_inspection: Optional[pulumi.Input[builtins.bool]] = None,
                 workload_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]]] = None,
                 zcc_notifications_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 zscaler_incident_receiver: Optional[pulumi.Input[builtins.bool]] = None):
        """
        The set of arguments for constructing a DLPWebRules resource.
        :param pulumi.Input[builtins.int] order: The rule order of execution for the DLP policy rule with respect to other rules.
        :param pulumi.Input[builtins.str] action: The action taken when traffic matches the DLP policy rule criteria.
        :param pulumi.Input[Sequence[pulumi.Input['DLPWebRulesAuditorArgs']]] auditors: The auditor to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] cloud_applications: The list of cloud applications to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesDepartmentsArgs'] departments: The Name-ID pairs of departments to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.str] description: The description of the DLP policy rule.
        :param pulumi.Input[builtins.bool] dlp_download_scan_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input['DLPWebRulesDlpEnginesArgs'] dlp_engines: The list of DLP engines to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesExcludedDepartmentsArgs'] excluded_departments: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesExcludedDomainProfilesArgs'] excluded_domain_profiles: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesExcludedGroupsArgs'] excluded_groups: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesExcludedUsersArgs'] excluded_users: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.str] external_auditor_email: The email address of an external auditor to whom DLP email notifications are sent.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] file_types: The list of file types for which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesGroupsArgs'] groups: The Name-ID pairs of groups to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input['DLPWebRulesIcapServerArgs']]] icap_servers: The DLP server, using ICAP, to which the transaction content is forwarded.
        :param pulumi.Input['DLPWebRulesIncludedDomainProfilesArgs'] included_domain_profiles: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesLabelsArgs'] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input['DLPWebRulesLocationGroupsArgs'] location_groups: The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesLocationsArgs'] locations: The Name-ID pairs of locations to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.bool] match_only: The match only criteria for DLP engines.
        :param pulumi.Input[builtins.int] min_size: The minimum file size (in KB) used for evaluation of the DLP policy rule.
        :param pulumi.Input[builtins.str] name: The DLP policy rule name.
        :param pulumi.Input[Sequence[pulumi.Input['DLPWebRulesNotificationTemplateArgs']]] notification_templates: The template used for DLP notification emails.
        :param pulumi.Input[builtins.int] parent_rule: The unique identifier of the parent rule under which an exception rule is added
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] protocols: The protocol criteria specified for the DLP policy rule.
        :param pulumi.Input[builtins.int] rank: Admin rank of the admin who creates this rule
        :param pulumi.Input[builtins.str] severity: Indicates the severity selected for the DLP rule violation
        :param pulumi.Input['DLPWebRulesSourceIpGroupsArgs'] source_ip_groups: list of source ip groups
        :param pulumi.Input[builtins.str] state: Enables or disables the DLP policy rule.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sub_rules: The list of exception rules added to a parent rule
        :param pulumi.Input['DLPWebRulesTimeWindowsArgs'] time_windows: list of time interval during which rule must be enforced.
        :param pulumi.Input['DLPWebRulesUrlCategoriesArgs'] url_categories: The list of URL categories to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesUsersArgs'] users: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.bool] without_content_inspection: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]] workload_groups: The list of preconfigured workload groups to which the policy must be applied
        :param pulumi.Input[builtins.bool] zcc_notifications_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[builtins.bool] zscaler_incident_receiver: Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        pulumi.set(__self__, "order", order)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auditors is not None:
            pulumi.set(__self__, "auditors", auditors)
        if cloud_applications is not None:
            pulumi.set(__self__, "cloud_applications", cloud_applications)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dlp_download_scan_enabled is not None:
            pulumi.set(__self__, "dlp_download_scan_enabled", dlp_download_scan_enabled)
        if dlp_engines is not None:
            pulumi.set(__self__, "dlp_engines", dlp_engines)
        if excluded_departments is not None:
            pulumi.set(__self__, "excluded_departments", excluded_departments)
        if excluded_domain_profiles is not None:
            pulumi.set(__self__, "excluded_domain_profiles", excluded_domain_profiles)
        if excluded_groups is not None:
            pulumi.set(__self__, "excluded_groups", excluded_groups)
        if excluded_users is not None:
            pulumi.set(__self__, "excluded_users", excluded_users)
        if external_auditor_email is not None:
            pulumi.set(__self__, "external_auditor_email", external_auditor_email)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if icap_servers is not None:
            pulumi.set(__self__, "icap_servers", icap_servers)
        if included_domain_profiles is not None:
            pulumi.set(__self__, "included_domain_profiles", included_domain_profiles)
        if inspect_http_get_enabled is not None:
            pulumi.set(__self__, "inspect_http_get_enabled", inspect_http_get_enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if match_only is not None:
            pulumi.set(__self__, "match_only", match_only)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_templates is not None:
            pulumi.set(__self__, "notification_templates", notification_templates)
        if parent_rule is not None:
            pulumi.set(__self__, "parent_rule", parent_rule)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if source_ip_groups is not None:
            pulumi.set(__self__, "source_ip_groups", source_ip_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if sub_rules is not None:
            pulumi.set(__self__, "sub_rules", sub_rules)
        if time_windows is not None:
            pulumi.set(__self__, "time_windows", time_windows)
        if url_categories is not None:
            pulumi.set(__self__, "url_categories", url_categories)
        if user_risk_score_levels is not None:
            pulumi.set(__self__, "user_risk_score_levels", user_risk_score_levels)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if without_content_inspection is not None:
            pulumi.set(__self__, "without_content_inspection", without_content_inspection)
        if workload_groups is not None:
            pulumi.set(__self__, "workload_groups", workload_groups)
        if zcc_notifications_enabled is not None:
            pulumi.set(__self__, "zcc_notifications_enabled", zcc_notifications_enabled)
        if zscaler_incident_receiver is not None:
            pulumi.set(__self__, "zscaler_incident_receiver", zscaler_incident_receiver)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[builtins.int]:
        """
        The rule order of execution for the DLP policy rule with respect to other rules.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[builtins.int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The action taken when traffic matches the DLP policy rule criteria.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def auditors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesAuditorArgs']]]]:
        """
        The auditor to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "auditors")

    @auditors.setter
    def auditors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesAuditorArgs']]]]):
        pulumi.set(self, "auditors", value)

    @property
    @pulumi.getter(name="cloudApplications")
    def cloud_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of cloud applications to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "cloud_applications")

    @cloud_applications.setter
    def cloud_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "cloud_applications", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['DLPWebRulesDepartmentsArgs']]:
        """
        The Name-ID pairs of departments to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['DLPWebRulesDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description of the DLP policy rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dlpDownloadScanEnabled")
    def dlp_download_scan_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "dlp_download_scan_enabled")

    @dlp_download_scan_enabled.setter
    def dlp_download_scan_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dlp_download_scan_enabled", value)

    @property
    @pulumi.getter(name="dlpEngines")
    def dlp_engines(self) -> Optional[pulumi.Input['DLPWebRulesDlpEnginesArgs']]:
        """
        The list of DLP engines to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "dlp_engines")

    @dlp_engines.setter
    def dlp_engines(self, value: Optional[pulumi.Input['DLPWebRulesDlpEnginesArgs']]):
        pulumi.set(self, "dlp_engines", value)

    @property
    @pulumi.getter(name="excludedDepartments")
    def excluded_departments(self) -> Optional[pulumi.Input['DLPWebRulesExcludedDepartmentsArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "excluded_departments")

    @excluded_departments.setter
    def excluded_departments(self, value: Optional[pulumi.Input['DLPWebRulesExcludedDepartmentsArgs']]):
        pulumi.set(self, "excluded_departments", value)

    @property
    @pulumi.getter(name="excludedDomainProfiles")
    def excluded_domain_profiles(self) -> Optional[pulumi.Input['DLPWebRulesExcludedDomainProfilesArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "excluded_domain_profiles")

    @excluded_domain_profiles.setter
    def excluded_domain_profiles(self, value: Optional[pulumi.Input['DLPWebRulesExcludedDomainProfilesArgs']]):
        pulumi.set(self, "excluded_domain_profiles", value)

    @property
    @pulumi.getter(name="excludedGroups")
    def excluded_groups(self) -> Optional[pulumi.Input['DLPWebRulesExcludedGroupsArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "excluded_groups")

    @excluded_groups.setter
    def excluded_groups(self, value: Optional[pulumi.Input['DLPWebRulesExcludedGroupsArgs']]):
        pulumi.set(self, "excluded_groups", value)

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Optional[pulumi.Input['DLPWebRulesExcludedUsersArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "excluded_users")

    @excluded_users.setter
    def excluded_users(self, value: Optional[pulumi.Input['DLPWebRulesExcludedUsersArgs']]):
        pulumi.set(self, "excluded_users", value)

    @property
    @pulumi.getter(name="externalAuditorEmail")
    def external_auditor_email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The email address of an external auditor to whom DLP email notifications are sent.
        """
        return pulumi.get(self, "external_auditor_email")

    @external_auditor_email.setter
    def external_auditor_email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "external_auditor_email", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of file types for which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['DLPWebRulesGroupsArgs']]:
        """
        The Name-ID pairs of groups to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['DLPWebRulesGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="icapServers")
    def icap_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesIcapServerArgs']]]]:
        """
        The DLP server, using ICAP, to which the transaction content is forwarded.
        """
        return pulumi.get(self, "icap_servers")

    @icap_servers.setter
    def icap_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesIcapServerArgs']]]]):
        pulumi.set(self, "icap_servers", value)

    @property
    @pulumi.getter(name="includedDomainProfiles")
    def included_domain_profiles(self) -> Optional[pulumi.Input['DLPWebRulesIncludedDomainProfilesArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "included_domain_profiles")

    @included_domain_profiles.setter
    def included_domain_profiles(self, value: Optional[pulumi.Input['DLPWebRulesIncludedDomainProfilesArgs']]):
        pulumi.set(self, "included_domain_profiles", value)

    @property
    @pulumi.getter(name="inspectHttpGetEnabled")
    def inspect_http_get_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "inspect_http_get_enabled")

    @inspect_http_get_enabled.setter
    def inspect_http_get_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_http_get_enabled", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['DLPWebRulesLabelsArgs']]:
        """
        list of Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['DLPWebRulesLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['DLPWebRulesLocationGroupsArgs']]:
        """
        The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['DLPWebRulesLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['DLPWebRulesLocationsArgs']]:
        """
        The Name-ID pairs of locations to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['DLPWebRulesLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="matchOnly")
    def match_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        The match only criteria for DLP engines.
        """
        return pulumi.get(self, "match_only")

    @match_only.setter
    def match_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "match_only", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The minimum file size (in KB) used for evaluation of the DLP policy rule.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The DLP policy rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationTemplates")
    def notification_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesNotificationTemplateArgs']]]]:
        """
        The template used for DLP notification emails.
        """
        return pulumi.get(self, "notification_templates")

    @notification_templates.setter
    def notification_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesNotificationTemplateArgs']]]]):
        pulumi.set(self, "notification_templates", value)

    @property
    @pulumi.getter(name="parentRule")
    def parent_rule(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The unique identifier of the parent rule under which an exception rule is added
        """
        return pulumi.get(self, "parent_rule")

    @parent_rule.setter
    def parent_rule(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "parent_rule", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The protocol criteria specified for the DLP policy rule.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Admin rank of the admin who creates this rule
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Indicates the severity selected for the DLP rule violation
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="sourceIpGroups")
    def source_ip_groups(self) -> Optional[pulumi.Input['DLPWebRulesSourceIpGroupsArgs']]:
        """
        list of source ip groups
        """
        return pulumi.get(self, "source_ip_groups")

    @source_ip_groups.setter
    def source_ip_groups(self, value: Optional[pulumi.Input['DLPWebRulesSourceIpGroupsArgs']]):
        pulumi.set(self, "source_ip_groups", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Enables or disables the DLP policy rule.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subRules")
    def sub_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of exception rules added to a parent rule
        """
        return pulumi.get(self, "sub_rules")

    @sub_rules.setter
    def sub_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "sub_rules", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Optional[pulumi.Input['DLPWebRulesTimeWindowsArgs']]:
        """
        list of time interval during which rule must be enforced.
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: Optional[pulumi.Input['DLPWebRulesTimeWindowsArgs']]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Optional[pulumi.Input['DLPWebRulesUrlCategoriesArgs']]:
        """
        The list of URL categories to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "url_categories")

    @url_categories.setter
    def url_categories(self, value: Optional[pulumi.Input['DLPWebRulesUrlCategoriesArgs']]):
        pulumi.set(self, "url_categories", value)

    @property
    @pulumi.getter(name="userRiskScoreLevels")
    def user_risk_score_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "user_risk_score_levels")

    @user_risk_score_levels.setter
    def user_risk_score_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "user_risk_score_levels", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['DLPWebRulesUsersArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['DLPWebRulesUsersArgs']]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="withoutContentInspection")
    def without_content_inspection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "without_content_inspection")

    @without_content_inspection.setter
    def without_content_inspection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "without_content_inspection", value)

    @property
    @pulumi.getter(name="workloadGroups")
    def workload_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]]]:
        """
        The list of preconfigured workload groups to which the policy must be applied
        """
        return pulumi.get(self, "workload_groups")

    @workload_groups.setter
    def workload_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]]]):
        pulumi.set(self, "workload_groups", value)

    @property
    @pulumi.getter(name="zccNotificationsEnabled")
    def zcc_notifications_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "zcc_notifications_enabled")

    @zcc_notifications_enabled.setter
    def zcc_notifications_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "zcc_notifications_enabled", value)

    @property
    @pulumi.getter(name="zscalerIncidentReceiver")
    def zscaler_incident_receiver(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        return pulumi.get(self, "zscaler_incident_receiver")

    @zscaler_incident_receiver.setter
    def zscaler_incident_receiver(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "zscaler_incident_receiver", value)


@pulumi.input_type
class _DLPWebRulesState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 auditors: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesAuditorArgs']]]] = None,
                 cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 departments: Optional[pulumi.Input['DLPWebRulesDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dlp_download_scan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dlp_engines: Optional[pulumi.Input['DLPWebRulesDlpEnginesArgs']] = None,
                 excluded_departments: Optional[pulumi.Input['DLPWebRulesExcludedDepartmentsArgs']] = None,
                 excluded_domain_profiles: Optional[pulumi.Input['DLPWebRulesExcludedDomainProfilesArgs']] = None,
                 excluded_groups: Optional[pulumi.Input['DLPWebRulesExcludedGroupsArgs']] = None,
                 excluded_users: Optional[pulumi.Input['DLPWebRulesExcludedUsersArgs']] = None,
                 external_auditor_email: Optional[pulumi.Input[builtins.str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 groups: Optional[pulumi.Input['DLPWebRulesGroupsArgs']] = None,
                 icap_servers: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesIcapServerArgs']]]] = None,
                 included_domain_profiles: Optional[pulumi.Input['DLPWebRulesIncludedDomainProfilesArgs']] = None,
                 inspect_http_get_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 labels: Optional[pulumi.Input['DLPWebRulesLabelsArgs']] = None,
                 location_groups: Optional[pulumi.Input['DLPWebRulesLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['DLPWebRulesLocationsArgs']] = None,
                 match_only: Optional[pulumi.Input[builtins.bool]] = None,
                 min_size: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 notification_templates: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesNotificationTemplateArgs']]]] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 parent_rule: Optional[pulumi.Input[builtins.int]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 rule_id: Optional[pulumi.Input[builtins.int]] = None,
                 severity: Optional[pulumi.Input[builtins.str]] = None,
                 source_ip_groups: Optional[pulumi.Input['DLPWebRulesSourceIpGroupsArgs']] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 sub_rules: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 time_windows: Optional[pulumi.Input['DLPWebRulesTimeWindowsArgs']] = None,
                 url_categories: Optional[pulumi.Input['DLPWebRulesUrlCategoriesArgs']] = None,
                 user_risk_score_levels: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 users: Optional[pulumi.Input['DLPWebRulesUsersArgs']] = None,
                 without_content_inspection: Optional[pulumi.Input[builtins.bool]] = None,
                 workload_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]]] = None,
                 zcc_notifications_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 zscaler_incident_receiver: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering DLPWebRules resources.
        :param pulumi.Input[builtins.str] action: The action taken when traffic matches the DLP policy rule criteria.
        :param pulumi.Input[Sequence[pulumi.Input['DLPWebRulesAuditorArgs']]] auditors: The auditor to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] cloud_applications: The list of cloud applications to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesDepartmentsArgs'] departments: The Name-ID pairs of departments to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.str] description: The description of the DLP policy rule.
        :param pulumi.Input[builtins.bool] dlp_download_scan_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input['DLPWebRulesDlpEnginesArgs'] dlp_engines: The list of DLP engines to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesExcludedDepartmentsArgs'] excluded_departments: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesExcludedDomainProfilesArgs'] excluded_domain_profiles: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesExcludedGroupsArgs'] excluded_groups: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesExcludedUsersArgs'] excluded_users: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.str] external_auditor_email: The email address of an external auditor to whom DLP email notifications are sent.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] file_types: The list of file types for which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesGroupsArgs'] groups: The Name-ID pairs of groups to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input['DLPWebRulesIcapServerArgs']]] icap_servers: The DLP server, using ICAP, to which the transaction content is forwarded.
        :param pulumi.Input['DLPWebRulesIncludedDomainProfilesArgs'] included_domain_profiles: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesLabelsArgs'] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input['DLPWebRulesLocationGroupsArgs'] location_groups: The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesLocationsArgs'] locations: The Name-ID pairs of locations to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.bool] match_only: The match only criteria for DLP engines.
        :param pulumi.Input[builtins.int] min_size: The minimum file size (in KB) used for evaluation of the DLP policy rule.
        :param pulumi.Input[builtins.str] name: The DLP policy rule name.
        :param pulumi.Input[Sequence[pulumi.Input['DLPWebRulesNotificationTemplateArgs']]] notification_templates: The template used for DLP notification emails.
        :param pulumi.Input[builtins.int] order: The rule order of execution for the DLP policy rule with respect to other rules.
        :param pulumi.Input[builtins.int] parent_rule: The unique identifier of the parent rule under which an exception rule is added
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] protocols: The protocol criteria specified for the DLP policy rule.
        :param pulumi.Input[builtins.int] rank: Admin rank of the admin who creates this rule
        :param pulumi.Input[builtins.str] severity: Indicates the severity selected for the DLP rule violation
        :param pulumi.Input['DLPWebRulesSourceIpGroupsArgs'] source_ip_groups: list of source ip groups
        :param pulumi.Input[builtins.str] state: Enables or disables the DLP policy rule.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sub_rules: The list of exception rules added to a parent rule
        :param pulumi.Input['DLPWebRulesTimeWindowsArgs'] time_windows: list of time interval during which rule must be enforced.
        :param pulumi.Input['DLPWebRulesUrlCategoriesArgs'] url_categories: The list of URL categories to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesUsersArgs'] users: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.bool] without_content_inspection: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]] workload_groups: The list of preconfigured workload groups to which the policy must be applied
        :param pulumi.Input[builtins.bool] zcc_notifications_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[builtins.bool] zscaler_incident_receiver: Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auditors is not None:
            pulumi.set(__self__, "auditors", auditors)
        if cloud_applications is not None:
            pulumi.set(__self__, "cloud_applications", cloud_applications)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dlp_download_scan_enabled is not None:
            pulumi.set(__self__, "dlp_download_scan_enabled", dlp_download_scan_enabled)
        if dlp_engines is not None:
            pulumi.set(__self__, "dlp_engines", dlp_engines)
        if excluded_departments is not None:
            pulumi.set(__self__, "excluded_departments", excluded_departments)
        if excluded_domain_profiles is not None:
            pulumi.set(__self__, "excluded_domain_profiles", excluded_domain_profiles)
        if excluded_groups is not None:
            pulumi.set(__self__, "excluded_groups", excluded_groups)
        if excluded_users is not None:
            pulumi.set(__self__, "excluded_users", excluded_users)
        if external_auditor_email is not None:
            pulumi.set(__self__, "external_auditor_email", external_auditor_email)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if icap_servers is not None:
            pulumi.set(__self__, "icap_servers", icap_servers)
        if included_domain_profiles is not None:
            pulumi.set(__self__, "included_domain_profiles", included_domain_profiles)
        if inspect_http_get_enabled is not None:
            pulumi.set(__self__, "inspect_http_get_enabled", inspect_http_get_enabled)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if match_only is not None:
            pulumi.set(__self__, "match_only", match_only)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_templates is not None:
            pulumi.set(__self__, "notification_templates", notification_templates)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if parent_rule is not None:
            pulumi.set(__self__, "parent_rule", parent_rule)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if source_ip_groups is not None:
            pulumi.set(__self__, "source_ip_groups", source_ip_groups)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if sub_rules is not None:
            pulumi.set(__self__, "sub_rules", sub_rules)
        if time_windows is not None:
            pulumi.set(__self__, "time_windows", time_windows)
        if url_categories is not None:
            pulumi.set(__self__, "url_categories", url_categories)
        if user_risk_score_levels is not None:
            pulumi.set(__self__, "user_risk_score_levels", user_risk_score_levels)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if without_content_inspection is not None:
            pulumi.set(__self__, "without_content_inspection", without_content_inspection)
        if workload_groups is not None:
            pulumi.set(__self__, "workload_groups", workload_groups)
        if zcc_notifications_enabled is not None:
            pulumi.set(__self__, "zcc_notifications_enabled", zcc_notifications_enabled)
        if zscaler_incident_receiver is not None:
            pulumi.set(__self__, "zscaler_incident_receiver", zscaler_incident_receiver)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The action taken when traffic matches the DLP policy rule criteria.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def auditors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesAuditorArgs']]]]:
        """
        The auditor to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "auditors")

    @auditors.setter
    def auditors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesAuditorArgs']]]]):
        pulumi.set(self, "auditors", value)

    @property
    @pulumi.getter(name="cloudApplications")
    def cloud_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of cloud applications to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "cloud_applications")

    @cloud_applications.setter
    def cloud_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "cloud_applications", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['DLPWebRulesDepartmentsArgs']]:
        """
        The Name-ID pairs of departments to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['DLPWebRulesDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description of the DLP policy rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dlpDownloadScanEnabled")
    def dlp_download_scan_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "dlp_download_scan_enabled")

    @dlp_download_scan_enabled.setter
    def dlp_download_scan_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "dlp_download_scan_enabled", value)

    @property
    @pulumi.getter(name="dlpEngines")
    def dlp_engines(self) -> Optional[pulumi.Input['DLPWebRulesDlpEnginesArgs']]:
        """
        The list of DLP engines to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "dlp_engines")

    @dlp_engines.setter
    def dlp_engines(self, value: Optional[pulumi.Input['DLPWebRulesDlpEnginesArgs']]):
        pulumi.set(self, "dlp_engines", value)

    @property
    @pulumi.getter(name="excludedDepartments")
    def excluded_departments(self) -> Optional[pulumi.Input['DLPWebRulesExcludedDepartmentsArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "excluded_departments")

    @excluded_departments.setter
    def excluded_departments(self, value: Optional[pulumi.Input['DLPWebRulesExcludedDepartmentsArgs']]):
        pulumi.set(self, "excluded_departments", value)

    @property
    @pulumi.getter(name="excludedDomainProfiles")
    def excluded_domain_profiles(self) -> Optional[pulumi.Input['DLPWebRulesExcludedDomainProfilesArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "excluded_domain_profiles")

    @excluded_domain_profiles.setter
    def excluded_domain_profiles(self, value: Optional[pulumi.Input['DLPWebRulesExcludedDomainProfilesArgs']]):
        pulumi.set(self, "excluded_domain_profiles", value)

    @property
    @pulumi.getter(name="excludedGroups")
    def excluded_groups(self) -> Optional[pulumi.Input['DLPWebRulesExcludedGroupsArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "excluded_groups")

    @excluded_groups.setter
    def excluded_groups(self, value: Optional[pulumi.Input['DLPWebRulesExcludedGroupsArgs']]):
        pulumi.set(self, "excluded_groups", value)

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Optional[pulumi.Input['DLPWebRulesExcludedUsersArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "excluded_users")

    @excluded_users.setter
    def excluded_users(self, value: Optional[pulumi.Input['DLPWebRulesExcludedUsersArgs']]):
        pulumi.set(self, "excluded_users", value)

    @property
    @pulumi.getter(name="externalAuditorEmail")
    def external_auditor_email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The email address of an external auditor to whom DLP email notifications are sent.
        """
        return pulumi.get(self, "external_auditor_email")

    @external_auditor_email.setter
    def external_auditor_email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "external_auditor_email", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of file types for which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['DLPWebRulesGroupsArgs']]:
        """
        The Name-ID pairs of groups to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['DLPWebRulesGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="icapServers")
    def icap_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesIcapServerArgs']]]]:
        """
        The DLP server, using ICAP, to which the transaction content is forwarded.
        """
        return pulumi.get(self, "icap_servers")

    @icap_servers.setter
    def icap_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesIcapServerArgs']]]]):
        pulumi.set(self, "icap_servers", value)

    @property
    @pulumi.getter(name="includedDomainProfiles")
    def included_domain_profiles(self) -> Optional[pulumi.Input['DLPWebRulesIncludedDomainProfilesArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "included_domain_profiles")

    @included_domain_profiles.setter
    def included_domain_profiles(self, value: Optional[pulumi.Input['DLPWebRulesIncludedDomainProfilesArgs']]):
        pulumi.set(self, "included_domain_profiles", value)

    @property
    @pulumi.getter(name="inspectHttpGetEnabled")
    def inspect_http_get_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "inspect_http_get_enabled")

    @inspect_http_get_enabled.setter
    def inspect_http_get_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "inspect_http_get_enabled", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['DLPWebRulesLabelsArgs']]:
        """
        list of Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['DLPWebRulesLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['DLPWebRulesLocationGroupsArgs']]:
        """
        The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['DLPWebRulesLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['DLPWebRulesLocationsArgs']]:
        """
        The Name-ID pairs of locations to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['DLPWebRulesLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="matchOnly")
    def match_only(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        The match only criteria for DLP engines.
        """
        return pulumi.get(self, "match_only")

    @match_only.setter
    def match_only(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "match_only", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The minimum file size (in KB) used for evaluation of the DLP policy rule.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The DLP policy rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationTemplates")
    def notification_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesNotificationTemplateArgs']]]]:
        """
        The template used for DLP notification emails.
        """
        return pulumi.get(self, "notification_templates")

    @notification_templates.setter
    def notification_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesNotificationTemplateArgs']]]]):
        pulumi.set(self, "notification_templates", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The rule order of execution for the DLP policy rule with respect to other rules.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="parentRule")
    def parent_rule(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The unique identifier of the parent rule under which an exception rule is added
        """
        return pulumi.get(self, "parent_rule")

    @parent_rule.setter
    def parent_rule(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "parent_rule", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The protocol criteria specified for the DLP policy rule.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Admin rank of the admin who creates this rule
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Indicates the severity selected for the DLP rule violation
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="sourceIpGroups")
    def source_ip_groups(self) -> Optional[pulumi.Input['DLPWebRulesSourceIpGroupsArgs']]:
        """
        list of source ip groups
        """
        return pulumi.get(self, "source_ip_groups")

    @source_ip_groups.setter
    def source_ip_groups(self, value: Optional[pulumi.Input['DLPWebRulesSourceIpGroupsArgs']]):
        pulumi.set(self, "source_ip_groups", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Enables or disables the DLP policy rule.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subRules")
    def sub_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        The list of exception rules added to a parent rule
        """
        return pulumi.get(self, "sub_rules")

    @sub_rules.setter
    def sub_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "sub_rules", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Optional[pulumi.Input['DLPWebRulesTimeWindowsArgs']]:
        """
        list of time interval during which rule must be enforced.
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: Optional[pulumi.Input['DLPWebRulesTimeWindowsArgs']]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Optional[pulumi.Input['DLPWebRulesUrlCategoriesArgs']]:
        """
        The list of URL categories to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "url_categories")

    @url_categories.setter
    def url_categories(self, value: Optional[pulumi.Input['DLPWebRulesUrlCategoriesArgs']]):
        pulumi.set(self, "url_categories", value)

    @property
    @pulumi.getter(name="userRiskScoreLevels")
    def user_risk_score_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "user_risk_score_levels")

    @user_risk_score_levels.setter
    def user_risk_score_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "user_risk_score_levels", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['DLPWebRulesUsersArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['DLPWebRulesUsersArgs']]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="withoutContentInspection")
    def without_content_inspection(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "without_content_inspection")

    @without_content_inspection.setter
    def without_content_inspection(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "without_content_inspection", value)

    @property
    @pulumi.getter(name="workloadGroups")
    def workload_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]]]:
        """
        The list of preconfigured workload groups to which the policy must be applied
        """
        return pulumi.get(self, "workload_groups")

    @workload_groups.setter
    def workload_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]]]):
        pulumi.set(self, "workload_groups", value)

    @property
    @pulumi.getter(name="zccNotificationsEnabled")
    def zcc_notifications_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "zcc_notifications_enabled")

    @zcc_notifications_enabled.setter
    def zcc_notifications_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "zcc_notifications_enabled", value)

    @property
    @pulumi.getter(name="zscalerIncidentReceiver")
    def zscaler_incident_receiver(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        return pulumi.get(self, "zscaler_incident_receiver")

    @zscaler_incident_receiver.setter
    def zscaler_incident_receiver(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "zscaler_incident_receiver", value)


@pulumi.type_token("zia:index/dLPWebRules:DLPWebRules")
class DLPWebRules(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 auditors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesAuditorArgs', 'DLPWebRulesAuditorArgsDict']]]]] = None,
                 cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 departments: Optional[pulumi.Input[Union['DLPWebRulesDepartmentsArgs', 'DLPWebRulesDepartmentsArgsDict']]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dlp_download_scan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dlp_engines: Optional[pulumi.Input[Union['DLPWebRulesDlpEnginesArgs', 'DLPWebRulesDlpEnginesArgsDict']]] = None,
                 excluded_departments: Optional[pulumi.Input[Union['DLPWebRulesExcludedDepartmentsArgs', 'DLPWebRulesExcludedDepartmentsArgsDict']]] = None,
                 excluded_domain_profiles: Optional[pulumi.Input[Union['DLPWebRulesExcludedDomainProfilesArgs', 'DLPWebRulesExcludedDomainProfilesArgsDict']]] = None,
                 excluded_groups: Optional[pulumi.Input[Union['DLPWebRulesExcludedGroupsArgs', 'DLPWebRulesExcludedGroupsArgsDict']]] = None,
                 excluded_users: Optional[pulumi.Input[Union['DLPWebRulesExcludedUsersArgs', 'DLPWebRulesExcludedUsersArgsDict']]] = None,
                 external_auditor_email: Optional[pulumi.Input[builtins.str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 groups: Optional[pulumi.Input[Union['DLPWebRulesGroupsArgs', 'DLPWebRulesGroupsArgsDict']]] = None,
                 icap_servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesIcapServerArgs', 'DLPWebRulesIcapServerArgsDict']]]]] = None,
                 included_domain_profiles: Optional[pulumi.Input[Union['DLPWebRulesIncludedDomainProfilesArgs', 'DLPWebRulesIncludedDomainProfilesArgsDict']]] = None,
                 inspect_http_get_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 labels: Optional[pulumi.Input[Union['DLPWebRulesLabelsArgs', 'DLPWebRulesLabelsArgsDict']]] = None,
                 location_groups: Optional[pulumi.Input[Union['DLPWebRulesLocationGroupsArgs', 'DLPWebRulesLocationGroupsArgsDict']]] = None,
                 locations: Optional[pulumi.Input[Union['DLPWebRulesLocationsArgs', 'DLPWebRulesLocationsArgsDict']]] = None,
                 match_only: Optional[pulumi.Input[builtins.bool]] = None,
                 min_size: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 notification_templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesNotificationTemplateArgs', 'DLPWebRulesNotificationTemplateArgsDict']]]]] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 parent_rule: Optional[pulumi.Input[builtins.int]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 severity: Optional[pulumi.Input[builtins.str]] = None,
                 source_ip_groups: Optional[pulumi.Input[Union['DLPWebRulesSourceIpGroupsArgs', 'DLPWebRulesSourceIpGroupsArgsDict']]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 sub_rules: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 time_windows: Optional[pulumi.Input[Union['DLPWebRulesTimeWindowsArgs', 'DLPWebRulesTimeWindowsArgsDict']]] = None,
                 url_categories: Optional[pulumi.Input[Union['DLPWebRulesUrlCategoriesArgs', 'DLPWebRulesUrlCategoriesArgsDict']]] = None,
                 user_risk_score_levels: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 users: Optional[pulumi.Input[Union['DLPWebRulesUsersArgs', 'DLPWebRulesUsersArgsDict']]] = None,
                 without_content_inspection: Optional[pulumi.Input[builtins.bool]] = None,
                 workload_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesWorkloadGroupArgs', 'DLPWebRulesWorkloadGroupArgsDict']]]]] = None,
                 zcc_notifications_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 zscaler_incident_receiver: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        """
        The **zia_dlp_web_rules** resource allows the creation and management of ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.

        ⚠️ **WARNING:** Zscaler Internet Access DLP supports a maximum of 127 Web DLP Rules to be created via API.

        ## Example Usage

        ### "FTCATEGORY_ALL_OUTBOUND" File Type"

        ### "Specify Incident Receiver Setting"

        ### "Creating Parent Rules And SubRules"

        ⚠️ **WARNING:** Destroying a parent rule will also destroy all subrules

         **NOTE** Exception rules can be configured only when the inline DLP rule evaluation type is set
         to evaluate all DLP rules in the DLP Advanced Settings.
         To learn more, see [Configuring DLP Advanced Settings](https://help.zscaler.com/%22/zia/configuring-dlp-advanced-settings/%22)

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_dlp_web_rules** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/dLPWebRules:DLPWebRules example <rule_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/dLPWebRules:DLPWebRules example <rule_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] action: The action taken when traffic matches the DLP policy rule criteria.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesAuditorArgs', 'DLPWebRulesAuditorArgsDict']]]] auditors: The auditor to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] cloud_applications: The list of cloud applications to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesDepartmentsArgs', 'DLPWebRulesDepartmentsArgsDict']] departments: The Name-ID pairs of departments to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.str] description: The description of the DLP policy rule.
        :param pulumi.Input[builtins.bool] dlp_download_scan_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[Union['DLPWebRulesDlpEnginesArgs', 'DLPWebRulesDlpEnginesArgsDict']] dlp_engines: The list of DLP engines to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesExcludedDepartmentsArgs', 'DLPWebRulesExcludedDepartmentsArgsDict']] excluded_departments: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesExcludedDomainProfilesArgs', 'DLPWebRulesExcludedDomainProfilesArgsDict']] excluded_domain_profiles: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesExcludedGroupsArgs', 'DLPWebRulesExcludedGroupsArgsDict']] excluded_groups: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesExcludedUsersArgs', 'DLPWebRulesExcludedUsersArgsDict']] excluded_users: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.str] external_auditor_email: The email address of an external auditor to whom DLP email notifications are sent.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] file_types: The list of file types for which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesGroupsArgs', 'DLPWebRulesGroupsArgsDict']] groups: The Name-ID pairs of groups to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesIcapServerArgs', 'DLPWebRulesIcapServerArgsDict']]]] icap_servers: The DLP server, using ICAP, to which the transaction content is forwarded.
        :param pulumi.Input[Union['DLPWebRulesIncludedDomainProfilesArgs', 'DLPWebRulesIncludedDomainProfilesArgsDict']] included_domain_profiles: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesLabelsArgs', 'DLPWebRulesLabelsArgsDict']] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input[Union['DLPWebRulesLocationGroupsArgs', 'DLPWebRulesLocationGroupsArgsDict']] location_groups: The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesLocationsArgs', 'DLPWebRulesLocationsArgsDict']] locations: The Name-ID pairs of locations to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.bool] match_only: The match only criteria for DLP engines.
        :param pulumi.Input[builtins.int] min_size: The minimum file size (in KB) used for evaluation of the DLP policy rule.
        :param pulumi.Input[builtins.str] name: The DLP policy rule name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesNotificationTemplateArgs', 'DLPWebRulesNotificationTemplateArgsDict']]]] notification_templates: The template used for DLP notification emails.
        :param pulumi.Input[builtins.int] order: The rule order of execution for the DLP policy rule with respect to other rules.
        :param pulumi.Input[builtins.int] parent_rule: The unique identifier of the parent rule under which an exception rule is added
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] protocols: The protocol criteria specified for the DLP policy rule.
        :param pulumi.Input[builtins.int] rank: Admin rank of the admin who creates this rule
        :param pulumi.Input[builtins.str] severity: Indicates the severity selected for the DLP rule violation
        :param pulumi.Input[Union['DLPWebRulesSourceIpGroupsArgs', 'DLPWebRulesSourceIpGroupsArgsDict']] source_ip_groups: list of source ip groups
        :param pulumi.Input[builtins.str] state: Enables or disables the DLP policy rule.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sub_rules: The list of exception rules added to a parent rule
        :param pulumi.Input[Union['DLPWebRulesTimeWindowsArgs', 'DLPWebRulesTimeWindowsArgsDict']] time_windows: list of time interval during which rule must be enforced.
        :param pulumi.Input[Union['DLPWebRulesUrlCategoriesArgs', 'DLPWebRulesUrlCategoriesArgsDict']] url_categories: The list of URL categories to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesUsersArgs', 'DLPWebRulesUsersArgsDict']] users: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.bool] without_content_inspection: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesWorkloadGroupArgs', 'DLPWebRulesWorkloadGroupArgsDict']]]] workload_groups: The list of preconfigured workload groups to which the policy must be applied
        :param pulumi.Input[builtins.bool] zcc_notifications_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[builtins.bool] zscaler_incident_receiver: Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DLPWebRulesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_dlp_web_rules** resource allows the creation and management of ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.

        ⚠️ **WARNING:** Zscaler Internet Access DLP supports a maximum of 127 Web DLP Rules to be created via API.

        ## Example Usage

        ### "FTCATEGORY_ALL_OUTBOUND" File Type"

        ### "Specify Incident Receiver Setting"

        ### "Creating Parent Rules And SubRules"

        ⚠️ **WARNING:** Destroying a parent rule will also destroy all subrules

         **NOTE** Exception rules can be configured only when the inline DLP rule evaluation type is set
         to evaluate all DLP rules in the DLP Advanced Settings.
         To learn more, see [Configuring DLP Advanced Settings](https://help.zscaler.com/%22/zia/configuring-dlp-advanced-settings/%22)

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_dlp_web_rules** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/dLPWebRules:DLPWebRules example <rule_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/dLPWebRules:DLPWebRules example <rule_name>
        ```

        :param str resource_name: The name of the resource.
        :param DLPWebRulesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DLPWebRulesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[builtins.str]] = None,
                 auditors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesAuditorArgs', 'DLPWebRulesAuditorArgsDict']]]]] = None,
                 cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 departments: Optional[pulumi.Input[Union['DLPWebRulesDepartmentsArgs', 'DLPWebRulesDepartmentsArgsDict']]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dlp_download_scan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 dlp_engines: Optional[pulumi.Input[Union['DLPWebRulesDlpEnginesArgs', 'DLPWebRulesDlpEnginesArgsDict']]] = None,
                 excluded_departments: Optional[pulumi.Input[Union['DLPWebRulesExcludedDepartmentsArgs', 'DLPWebRulesExcludedDepartmentsArgsDict']]] = None,
                 excluded_domain_profiles: Optional[pulumi.Input[Union['DLPWebRulesExcludedDomainProfilesArgs', 'DLPWebRulesExcludedDomainProfilesArgsDict']]] = None,
                 excluded_groups: Optional[pulumi.Input[Union['DLPWebRulesExcludedGroupsArgs', 'DLPWebRulesExcludedGroupsArgsDict']]] = None,
                 excluded_users: Optional[pulumi.Input[Union['DLPWebRulesExcludedUsersArgs', 'DLPWebRulesExcludedUsersArgsDict']]] = None,
                 external_auditor_email: Optional[pulumi.Input[builtins.str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 groups: Optional[pulumi.Input[Union['DLPWebRulesGroupsArgs', 'DLPWebRulesGroupsArgsDict']]] = None,
                 icap_servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesIcapServerArgs', 'DLPWebRulesIcapServerArgsDict']]]]] = None,
                 included_domain_profiles: Optional[pulumi.Input[Union['DLPWebRulesIncludedDomainProfilesArgs', 'DLPWebRulesIncludedDomainProfilesArgsDict']]] = None,
                 inspect_http_get_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 labels: Optional[pulumi.Input[Union['DLPWebRulesLabelsArgs', 'DLPWebRulesLabelsArgsDict']]] = None,
                 location_groups: Optional[pulumi.Input[Union['DLPWebRulesLocationGroupsArgs', 'DLPWebRulesLocationGroupsArgsDict']]] = None,
                 locations: Optional[pulumi.Input[Union['DLPWebRulesLocationsArgs', 'DLPWebRulesLocationsArgsDict']]] = None,
                 match_only: Optional[pulumi.Input[builtins.bool]] = None,
                 min_size: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 notification_templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesNotificationTemplateArgs', 'DLPWebRulesNotificationTemplateArgsDict']]]]] = None,
                 order: Optional[pulumi.Input[builtins.int]] = None,
                 parent_rule: Optional[pulumi.Input[builtins.int]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 severity: Optional[pulumi.Input[builtins.str]] = None,
                 source_ip_groups: Optional[pulumi.Input[Union['DLPWebRulesSourceIpGroupsArgs', 'DLPWebRulesSourceIpGroupsArgsDict']]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 sub_rules: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 time_windows: Optional[pulumi.Input[Union['DLPWebRulesTimeWindowsArgs', 'DLPWebRulesTimeWindowsArgsDict']]] = None,
                 url_categories: Optional[pulumi.Input[Union['DLPWebRulesUrlCategoriesArgs', 'DLPWebRulesUrlCategoriesArgsDict']]] = None,
                 user_risk_score_levels: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 users: Optional[pulumi.Input[Union['DLPWebRulesUsersArgs', 'DLPWebRulesUsersArgsDict']]] = None,
                 without_content_inspection: Optional[pulumi.Input[builtins.bool]] = None,
                 workload_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesWorkloadGroupArgs', 'DLPWebRulesWorkloadGroupArgsDict']]]]] = None,
                 zcc_notifications_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 zscaler_incident_receiver: Optional[pulumi.Input[builtins.bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DLPWebRulesArgs.__new__(DLPWebRulesArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["auditors"] = auditors
            __props__.__dict__["cloud_applications"] = cloud_applications
            __props__.__dict__["departments"] = departments
            __props__.__dict__["description"] = description
            __props__.__dict__["dlp_download_scan_enabled"] = dlp_download_scan_enabled
            __props__.__dict__["dlp_engines"] = dlp_engines
            __props__.__dict__["excluded_departments"] = excluded_departments
            __props__.__dict__["excluded_domain_profiles"] = excluded_domain_profiles
            __props__.__dict__["excluded_groups"] = excluded_groups
            __props__.__dict__["excluded_users"] = excluded_users
            __props__.__dict__["external_auditor_email"] = external_auditor_email
            __props__.__dict__["file_types"] = file_types
            __props__.__dict__["groups"] = groups
            __props__.__dict__["icap_servers"] = icap_servers
            __props__.__dict__["included_domain_profiles"] = included_domain_profiles
            __props__.__dict__["inspect_http_get_enabled"] = inspect_http_get_enabled
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location_groups"] = location_groups
            __props__.__dict__["locations"] = locations
            __props__.__dict__["match_only"] = match_only
            __props__.__dict__["min_size"] = min_size
            __props__.__dict__["name"] = name
            __props__.__dict__["notification_templates"] = notification_templates
            if order is None and not opts.urn:
                raise TypeError("Missing required property 'order'")
            __props__.__dict__["order"] = order
            __props__.__dict__["parent_rule"] = parent_rule
            __props__.__dict__["protocols"] = protocols
            __props__.__dict__["rank"] = rank
            __props__.__dict__["severity"] = severity
            __props__.__dict__["source_ip_groups"] = source_ip_groups
            __props__.__dict__["state"] = state
            __props__.__dict__["sub_rules"] = sub_rules
            __props__.__dict__["time_windows"] = time_windows
            __props__.__dict__["url_categories"] = url_categories
            __props__.__dict__["user_risk_score_levels"] = user_risk_score_levels
            __props__.__dict__["users"] = users
            __props__.__dict__["without_content_inspection"] = without_content_inspection
            __props__.__dict__["workload_groups"] = workload_groups
            __props__.__dict__["zcc_notifications_enabled"] = zcc_notifications_enabled
            __props__.__dict__["zscaler_incident_receiver"] = zscaler_incident_receiver
            __props__.__dict__["rule_id"] = None
        super(DLPWebRules, __self__).__init__(
            'zia:index/dLPWebRules:DLPWebRules',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[builtins.str]] = None,
            auditors: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesAuditorArgs', 'DLPWebRulesAuditorArgsDict']]]]] = None,
            cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            departments: Optional[pulumi.Input[Union['DLPWebRulesDepartmentsArgs', 'DLPWebRulesDepartmentsArgsDict']]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            dlp_download_scan_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            dlp_engines: Optional[pulumi.Input[Union['DLPWebRulesDlpEnginesArgs', 'DLPWebRulesDlpEnginesArgsDict']]] = None,
            excluded_departments: Optional[pulumi.Input[Union['DLPWebRulesExcludedDepartmentsArgs', 'DLPWebRulesExcludedDepartmentsArgsDict']]] = None,
            excluded_domain_profiles: Optional[pulumi.Input[Union['DLPWebRulesExcludedDomainProfilesArgs', 'DLPWebRulesExcludedDomainProfilesArgsDict']]] = None,
            excluded_groups: Optional[pulumi.Input[Union['DLPWebRulesExcludedGroupsArgs', 'DLPWebRulesExcludedGroupsArgsDict']]] = None,
            excluded_users: Optional[pulumi.Input[Union['DLPWebRulesExcludedUsersArgs', 'DLPWebRulesExcludedUsersArgsDict']]] = None,
            external_auditor_email: Optional[pulumi.Input[builtins.str]] = None,
            file_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            groups: Optional[pulumi.Input[Union['DLPWebRulesGroupsArgs', 'DLPWebRulesGroupsArgsDict']]] = None,
            icap_servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesIcapServerArgs', 'DLPWebRulesIcapServerArgsDict']]]]] = None,
            included_domain_profiles: Optional[pulumi.Input[Union['DLPWebRulesIncludedDomainProfilesArgs', 'DLPWebRulesIncludedDomainProfilesArgsDict']]] = None,
            inspect_http_get_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            labels: Optional[pulumi.Input[Union['DLPWebRulesLabelsArgs', 'DLPWebRulesLabelsArgsDict']]] = None,
            location_groups: Optional[pulumi.Input[Union['DLPWebRulesLocationGroupsArgs', 'DLPWebRulesLocationGroupsArgsDict']]] = None,
            locations: Optional[pulumi.Input[Union['DLPWebRulesLocationsArgs', 'DLPWebRulesLocationsArgsDict']]] = None,
            match_only: Optional[pulumi.Input[builtins.bool]] = None,
            min_size: Optional[pulumi.Input[builtins.int]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            notification_templates: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesNotificationTemplateArgs', 'DLPWebRulesNotificationTemplateArgsDict']]]]] = None,
            order: Optional[pulumi.Input[builtins.int]] = None,
            parent_rule: Optional[pulumi.Input[builtins.int]] = None,
            protocols: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            rank: Optional[pulumi.Input[builtins.int]] = None,
            rule_id: Optional[pulumi.Input[builtins.int]] = None,
            severity: Optional[pulumi.Input[builtins.str]] = None,
            source_ip_groups: Optional[pulumi.Input[Union['DLPWebRulesSourceIpGroupsArgs', 'DLPWebRulesSourceIpGroupsArgsDict']]] = None,
            state: Optional[pulumi.Input[builtins.str]] = None,
            sub_rules: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            time_windows: Optional[pulumi.Input[Union['DLPWebRulesTimeWindowsArgs', 'DLPWebRulesTimeWindowsArgsDict']]] = None,
            url_categories: Optional[pulumi.Input[Union['DLPWebRulesUrlCategoriesArgs', 'DLPWebRulesUrlCategoriesArgsDict']]] = None,
            user_risk_score_levels: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            users: Optional[pulumi.Input[Union['DLPWebRulesUsersArgs', 'DLPWebRulesUsersArgsDict']]] = None,
            without_content_inspection: Optional[pulumi.Input[builtins.bool]] = None,
            workload_groups: Optional[pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesWorkloadGroupArgs', 'DLPWebRulesWorkloadGroupArgsDict']]]]] = None,
            zcc_notifications_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            zscaler_incident_receiver: Optional[pulumi.Input[builtins.bool]] = None) -> 'DLPWebRules':
        """
        Get an existing DLPWebRules resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] action: The action taken when traffic matches the DLP policy rule criteria.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesAuditorArgs', 'DLPWebRulesAuditorArgsDict']]]] auditors: The auditor to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] cloud_applications: The list of cloud applications to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesDepartmentsArgs', 'DLPWebRulesDepartmentsArgsDict']] departments: The Name-ID pairs of departments to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.str] description: The description of the DLP policy rule.
        :param pulumi.Input[builtins.bool] dlp_download_scan_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[Union['DLPWebRulesDlpEnginesArgs', 'DLPWebRulesDlpEnginesArgsDict']] dlp_engines: The list of DLP engines to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesExcludedDepartmentsArgs', 'DLPWebRulesExcludedDepartmentsArgsDict']] excluded_departments: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesExcludedDomainProfilesArgs', 'DLPWebRulesExcludedDomainProfilesArgsDict']] excluded_domain_profiles: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesExcludedGroupsArgs', 'DLPWebRulesExcludedGroupsArgsDict']] excluded_groups: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesExcludedUsersArgs', 'DLPWebRulesExcludedUsersArgsDict']] excluded_users: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.str] external_auditor_email: The email address of an external auditor to whom DLP email notifications are sent.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] file_types: The list of file types for which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesGroupsArgs', 'DLPWebRulesGroupsArgsDict']] groups: The Name-ID pairs of groups to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesIcapServerArgs', 'DLPWebRulesIcapServerArgsDict']]]] icap_servers: The DLP server, using ICAP, to which the transaction content is forwarded.
        :param pulumi.Input[Union['DLPWebRulesIncludedDomainProfilesArgs', 'DLPWebRulesIncludedDomainProfilesArgsDict']] included_domain_profiles: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesLabelsArgs', 'DLPWebRulesLabelsArgsDict']] labels: list of Labels that are applicable to the rule.
        :param pulumi.Input[Union['DLPWebRulesLocationGroupsArgs', 'DLPWebRulesLocationGroupsArgsDict']] location_groups: The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesLocationsArgs', 'DLPWebRulesLocationsArgsDict']] locations: The Name-ID pairs of locations to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.bool] match_only: The match only criteria for DLP engines.
        :param pulumi.Input[builtins.int] min_size: The minimum file size (in KB) used for evaluation of the DLP policy rule.
        :param pulumi.Input[builtins.str] name: The DLP policy rule name.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesNotificationTemplateArgs', 'DLPWebRulesNotificationTemplateArgsDict']]]] notification_templates: The template used for DLP notification emails.
        :param pulumi.Input[builtins.int] order: The rule order of execution for the DLP policy rule with respect to other rules.
        :param pulumi.Input[builtins.int] parent_rule: The unique identifier of the parent rule under which an exception rule is added
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] protocols: The protocol criteria specified for the DLP policy rule.
        :param pulumi.Input[builtins.int] rank: Admin rank of the admin who creates this rule
        :param pulumi.Input[builtins.str] severity: Indicates the severity selected for the DLP rule violation
        :param pulumi.Input[Union['DLPWebRulesSourceIpGroupsArgs', 'DLPWebRulesSourceIpGroupsArgsDict']] source_ip_groups: list of source ip groups
        :param pulumi.Input[builtins.str] state: Enables or disables the DLP policy rule.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] sub_rules: The list of exception rules added to a parent rule
        :param pulumi.Input[Union['DLPWebRulesTimeWindowsArgs', 'DLPWebRulesTimeWindowsArgsDict']] time_windows: list of time interval during which rule must be enforced.
        :param pulumi.Input[Union['DLPWebRulesUrlCategoriesArgs', 'DLPWebRulesUrlCategoriesArgsDict']] url_categories: The list of URL categories to which the DLP policy rule must be applied.
        :param pulumi.Input[Union['DLPWebRulesUsersArgs', 'DLPWebRulesUsersArgsDict']] users: The Name-ID pairs of users to which the DLP policy rule must be applied.
        :param pulumi.Input[builtins.bool] without_content_inspection: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[Sequence[pulumi.Input[Union['DLPWebRulesWorkloadGroupArgs', 'DLPWebRulesWorkloadGroupArgsDict']]]] workload_groups: The list of preconfigured workload groups to which the policy must be applied
        :param pulumi.Input[builtins.bool] zcc_notifications_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[builtins.bool] zscaler_incident_receiver: Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DLPWebRulesState.__new__(_DLPWebRulesState)

        __props__.__dict__["action"] = action
        __props__.__dict__["auditors"] = auditors
        __props__.__dict__["cloud_applications"] = cloud_applications
        __props__.__dict__["departments"] = departments
        __props__.__dict__["description"] = description
        __props__.__dict__["dlp_download_scan_enabled"] = dlp_download_scan_enabled
        __props__.__dict__["dlp_engines"] = dlp_engines
        __props__.__dict__["excluded_departments"] = excluded_departments
        __props__.__dict__["excluded_domain_profiles"] = excluded_domain_profiles
        __props__.__dict__["excluded_groups"] = excluded_groups
        __props__.__dict__["excluded_users"] = excluded_users
        __props__.__dict__["external_auditor_email"] = external_auditor_email
        __props__.__dict__["file_types"] = file_types
        __props__.__dict__["groups"] = groups
        __props__.__dict__["icap_servers"] = icap_servers
        __props__.__dict__["included_domain_profiles"] = included_domain_profiles
        __props__.__dict__["inspect_http_get_enabled"] = inspect_http_get_enabled
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location_groups"] = location_groups
        __props__.__dict__["locations"] = locations
        __props__.__dict__["match_only"] = match_only
        __props__.__dict__["min_size"] = min_size
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_templates"] = notification_templates
        __props__.__dict__["order"] = order
        __props__.__dict__["parent_rule"] = parent_rule
        __props__.__dict__["protocols"] = protocols
        __props__.__dict__["rank"] = rank
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["severity"] = severity
        __props__.__dict__["source_ip_groups"] = source_ip_groups
        __props__.__dict__["state"] = state
        __props__.__dict__["sub_rules"] = sub_rules
        __props__.__dict__["time_windows"] = time_windows
        __props__.__dict__["url_categories"] = url_categories
        __props__.__dict__["user_risk_score_levels"] = user_risk_score_levels
        __props__.__dict__["users"] = users
        __props__.__dict__["without_content_inspection"] = without_content_inspection
        __props__.__dict__["workload_groups"] = workload_groups
        __props__.__dict__["zcc_notifications_enabled"] = zcc_notifications_enabled
        __props__.__dict__["zscaler_incident_receiver"] = zscaler_incident_receiver
        return DLPWebRules(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[builtins.str]:
        """
        The action taken when traffic matches the DLP policy rule criteria.
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def auditors(self) -> pulumi.Output[Sequence['outputs.DLPWebRulesAuditor']]:
        """
        The auditor to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "auditors")

    @property
    @pulumi.getter(name="cloudApplications")
    def cloud_applications(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The list of cloud applications to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "cloud_applications")

    @property
    @pulumi.getter
    def departments(self) -> pulumi.Output[Optional['outputs.DLPWebRulesDepartments']]:
        """
        The Name-ID pairs of departments to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "departments")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The description of the DLP policy rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dlpDownloadScanEnabled")
    def dlp_download_scan_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "dlp_download_scan_enabled")

    @property
    @pulumi.getter(name="dlpEngines")
    def dlp_engines(self) -> pulumi.Output[Optional['outputs.DLPWebRulesDlpEngines']]:
        """
        The list of DLP engines to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "dlp_engines")

    @property
    @pulumi.getter(name="excludedDepartments")
    def excluded_departments(self) -> pulumi.Output[Optional['outputs.DLPWebRulesExcludedDepartments']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "excluded_departments")

    @property
    @pulumi.getter(name="excludedDomainProfiles")
    def excluded_domain_profiles(self) -> pulumi.Output[Optional['outputs.DLPWebRulesExcludedDomainProfiles']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "excluded_domain_profiles")

    @property
    @pulumi.getter(name="excludedGroups")
    def excluded_groups(self) -> pulumi.Output[Optional['outputs.DLPWebRulesExcludedGroups']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "excluded_groups")

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> pulumi.Output[Optional['outputs.DLPWebRulesExcludedUsers']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "excluded_users")

    @property
    @pulumi.getter(name="externalAuditorEmail")
    def external_auditor_email(self) -> pulumi.Output[builtins.str]:
        """
        The email address of an external auditor to whom DLP email notifications are sent.
        """
        return pulumi.get(self, "external_auditor_email")

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The list of file types for which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "file_types")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional['outputs.DLPWebRulesGroups']]:
        """
        The Name-ID pairs of groups to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="icapServers")
    def icap_servers(self) -> pulumi.Output[Sequence['outputs.DLPWebRulesIcapServer']]:
        """
        The DLP server, using ICAP, to which the transaction content is forwarded.
        """
        return pulumi.get(self, "icap_servers")

    @property
    @pulumi.getter(name="includedDomainProfiles")
    def included_domain_profiles(self) -> pulumi.Output[Optional['outputs.DLPWebRulesIncludedDomainProfiles']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "included_domain_profiles")

    @property
    @pulumi.getter(name="inspectHttpGetEnabled")
    def inspect_http_get_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        return pulumi.get(self, "inspect_http_get_enabled")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional['outputs.DLPWebRulesLabels']]:
        """
        list of Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> pulumi.Output[Optional['outputs.DLPWebRulesLocationGroups']]:
        """
        The Name-ID pairs of locations groups to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "location_groups")

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Output[Optional['outputs.DLPWebRulesLocations']]:
        """
        The Name-ID pairs of locations to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="matchOnly")
    def match_only(self) -> pulumi.Output[builtins.bool]:
        """
        The match only criteria for DLP engines.
        """
        return pulumi.get(self, "match_only")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> pulumi.Output[builtins.int]:
        """
        The minimum file size (in KB) used for evaluation of the DLP policy rule.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The DLP policy rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationTemplates")
    def notification_templates(self) -> pulumi.Output[Sequence['outputs.DLPWebRulesNotificationTemplate']]:
        """
        The template used for DLP notification emails.
        """
        return pulumi.get(self, "notification_templates")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[builtins.int]:
        """
        The rule order of execution for the DLP policy rule with respect to other rules.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="parentRule")
    def parent_rule(self) -> pulumi.Output[builtins.int]:
        """
        The unique identifier of the parent rule under which an exception rule is added
        """
        return pulumi.get(self, "parent_rule")

    @property
    @pulumi.getter
    def protocols(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The protocol criteria specified for the DLP policy rule.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter
    def rank(self) -> pulumi.Output[builtins.int]:
        """
        Admin rank of the admin who creates this rule
        """
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Output[builtins.str]:
        """
        Indicates the severity selected for the DLP rule violation
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="sourceIpGroups")
    def source_ip_groups(self) -> pulumi.Output[Optional['outputs.DLPWebRulesSourceIpGroups']]:
        """
        list of source ip groups
        """
        return pulumi.get(self, "source_ip_groups")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[builtins.str]:
        """
        Enables or disables the DLP policy rule.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subRules")
    def sub_rules(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The list of exception rules added to a parent rule
        """
        return pulumi.get(self, "sub_rules")

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> pulumi.Output[Optional['outputs.DLPWebRulesTimeWindows']]:
        """
        list of time interval during which rule must be enforced.
        """
        return pulumi.get(self, "time_windows")

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> pulumi.Output[Optional['outputs.DLPWebRulesUrlCategories']]:
        """
        The list of URL categories to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "url_categories")

    @property
    @pulumi.getter(name="userRiskScoreLevels")
    def user_risk_score_levels(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "user_risk_score_levels")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional['outputs.DLPWebRulesUsers']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="withoutContentInspection")
    def without_content_inspection(self) -> pulumi.Output[builtins.bool]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "without_content_inspection")

    @property
    @pulumi.getter(name="workloadGroups")
    def workload_groups(self) -> pulumi.Output[Sequence['outputs.DLPWebRulesWorkloadGroup']]:
        """
        The list of preconfigured workload groups to which the policy must be applied
        """
        return pulumi.get(self, "workload_groups")

    @property
    @pulumi.getter(name="zccNotificationsEnabled")
    def zcc_notifications_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "zcc_notifications_enabled")

    @property
    @pulumi.getter(name="zscalerIncidentReceiver")
    def zscaler_incident_receiver(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        return pulumi.get(self, "zscaler_incident_receiver")

