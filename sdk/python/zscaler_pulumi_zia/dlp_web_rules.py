# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DLPWebRulesArgs', 'DLPWebRules']

@pulumi.input_type
class DLPWebRulesArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 auditor: Optional[pulumi.Input['DLPWebRulesAuditorArgs']] = None,
                 cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 departments: Optional[pulumi.Input['DLPWebRulesDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dlp_download_scan_enabled: Optional[pulumi.Input[bool]] = None,
                 dlp_engines: Optional[pulumi.Input['DLPWebRulesDlpEnginesArgs']] = None,
                 excluded_departments: Optional[pulumi.Input['DLPWebRulesExcludedDepartmentsArgs']] = None,
                 excluded_groups: Optional[pulumi.Input['DLPWebRulesExcludedGroupsArgs']] = None,
                 excluded_users: Optional[pulumi.Input['DLPWebRulesExcludedUsersArgs']] = None,
                 external_auditor_email: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups: Optional[pulumi.Input['DLPWebRulesGroupsArgs']] = None,
                 icap_server: Optional[pulumi.Input['DLPWebRulesIcapServerArgs']] = None,
                 labels: Optional[pulumi.Input['DLPWebRulesLabelsArgs']] = None,
                 location_groups: Optional[pulumi.Input['DLPWebRulesLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['DLPWebRulesLocationsArgs']] = None,
                 match_only: Optional[pulumi.Input[bool]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_template: Optional[pulumi.Input['DLPWebRulesNotificationTemplateArgs']] = None,
                 ocr_enabled: Optional[pulumi.Input[bool]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 parent_rule: Optional[pulumi.Input[int]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 sub_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 time_windows: Optional[pulumi.Input['DLPWebRulesTimeWindowsArgs']] = None,
                 url_categories: Optional[pulumi.Input['DLPWebRulesUrlCategoriesArgs']] = None,
                 user_risk_score_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input['DLPWebRulesUsersArgs']] = None,
                 without_content_inspection: Optional[pulumi.Input[bool]] = None,
                 workload_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]]] = None,
                 zcc_notifications_enabled: Optional[pulumi.Input[bool]] = None,
                 zscaler_incident_receiver: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a DLPWebRules resource.
        :param pulumi.Input[str] action: The action taken when traffic matches the DLP policy rule criteria. The supported values are:
        :param pulumi.Input['DLPWebRulesAuditorArgs'] auditor: The auditor to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cloud_applications: The list of cloud applications to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesDepartmentsArgs'] departments: The name-ID pairs of the departments that are excluded from the DLP policy rule.
        :param pulumi.Input[str] description: The description of the DLP policy rule.
        :param pulumi.Input[bool] dlp_download_scan_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input['DLPWebRulesDlpEnginesArgs'] dlp_engines: The list of DLP engines to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesExcludedDepartmentsArgs'] excluded_departments: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
        :param pulumi.Input['DLPWebRulesExcludedGroupsArgs'] excluded_groups: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
        :param pulumi.Input['DLPWebRulesExcludedUsersArgs'] excluded_users: The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
        :param pulumi.Input[str] external_auditor_email: The email address of an external auditor to whom DLP email notifications are sent.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_types: The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
               
               * > Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocr_enabled` is set to `true` for DLP rules with content inspection.
               
               * > Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `without_content_inspection` is set to `false`.
               
               * > Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.
        :param pulumi.Input['DLPWebRulesGroupsArgs'] groups: The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input['DLPWebRulesIcapServerArgs'] icap_server: The DLP server, using ICAP, to which the transaction content is forwarded.
        :param pulumi.Input['DLPWebRulesLabelsArgs'] labels: The Name-ID pairs of rule labels associated to the DLP policy rule.
        :param pulumi.Input['DLPWebRulesLocationGroupsArgs'] location_groups: The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input['DLPWebRulesLocationsArgs'] locations: The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
        :param pulumi.Input[bool] match_only: The match only criteria for DLP engines.
        :param pulumi.Input[int] min_size: The minimum file size (in KB) used for evaluation of the DLP policy rule.
        :param pulumi.Input[str] name: The name of the workload group
        :param pulumi.Input['DLPWebRulesNotificationTemplateArgs'] notification_template: The template used for DLP notification emails.
        :param pulumi.Input[bool] ocr_enabled: Enables or disables image file scanning. When OCR is enabled only the following ``file_types`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``
        :param pulumi.Input[int] order: The rule order of execution for the DLP policy rule with respect to other rules.
        :param pulumi.Input[int] parent_rule: The unique identifier of the parent rule under which an exception rule is added.
               > Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol criteria specified for the DLP policy rule.
        :param pulumi.Input[int] rank: Admin rank of the admin who creates this rule
        :param pulumi.Input[str] severity: Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`
        :param pulumi.Input[str] state: Enables or disables the DLP policy rule.. The supported values are:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sub_rules: The list of exception rules added to a parent rule.
               > Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
        :param pulumi.Input['DLPWebRulesTimeWindowsArgs'] time_windows: The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input['DLPWebRulesUrlCategoriesArgs'] url_categories: The list of URL categories to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_risk_score_levels: Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
        :param pulumi.Input['DLPWebRulesUsersArgs'] users: The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[bool] without_content_inspection: must be set to false if `file_types` is not defined.
        :param pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]] workload_groups: The list of preconfigured workload groups to which the policy must be applied
        :param pulumi.Input[bool] zcc_notifications_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[bool] zscaler_incident_receiver: Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auditor is not None:
            pulumi.set(__self__, "auditor", auditor)
        if cloud_applications is not None:
            pulumi.set(__self__, "cloud_applications", cloud_applications)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dlp_download_scan_enabled is not None:
            pulumi.set(__self__, "dlp_download_scan_enabled", dlp_download_scan_enabled)
        if dlp_engines is not None:
            pulumi.set(__self__, "dlp_engines", dlp_engines)
        if excluded_departments is not None:
            pulumi.set(__self__, "excluded_departments", excluded_departments)
        if excluded_groups is not None:
            pulumi.set(__self__, "excluded_groups", excluded_groups)
        if excluded_users is not None:
            pulumi.set(__self__, "excluded_users", excluded_users)
        if external_auditor_email is not None:
            pulumi.set(__self__, "external_auditor_email", external_auditor_email)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if icap_server is not None:
            pulumi.set(__self__, "icap_server", icap_server)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if match_only is not None:
            pulumi.set(__self__, "match_only", match_only)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_template is not None:
            pulumi.set(__self__, "notification_template", notification_template)
        if ocr_enabled is not None:
            pulumi.set(__self__, "ocr_enabled", ocr_enabled)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if parent_rule is not None:
            pulumi.set(__self__, "parent_rule", parent_rule)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if sub_rules is not None:
            pulumi.set(__self__, "sub_rules", sub_rules)
        if time_windows is not None:
            pulumi.set(__self__, "time_windows", time_windows)
        if url_categories is not None:
            pulumi.set(__self__, "url_categories", url_categories)
        if user_risk_score_levels is not None:
            pulumi.set(__self__, "user_risk_score_levels", user_risk_score_levels)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if without_content_inspection is not None:
            pulumi.set(__self__, "without_content_inspection", without_content_inspection)
        if workload_groups is not None:
            pulumi.set(__self__, "workload_groups", workload_groups)
        if zcc_notifications_enabled is not None:
            pulumi.set(__self__, "zcc_notifications_enabled", zcc_notifications_enabled)
        if zscaler_incident_receiver is not None:
            pulumi.set(__self__, "zscaler_incident_receiver", zscaler_incident_receiver)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The action taken when traffic matches the DLP policy rule criteria. The supported values are:
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def auditor(self) -> Optional[pulumi.Input['DLPWebRulesAuditorArgs']]:
        """
        The auditor to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "auditor")

    @auditor.setter
    def auditor(self, value: Optional[pulumi.Input['DLPWebRulesAuditorArgs']]):
        pulumi.set(self, "auditor", value)

    @property
    @pulumi.getter(name="cloudApplications")
    def cloud_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of cloud applications to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "cloud_applications")

    @cloud_applications.setter
    def cloud_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cloud_applications", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['DLPWebRulesDepartmentsArgs']]:
        """
        The name-ID pairs of the departments that are excluded from the DLP policy rule.
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['DLPWebRulesDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the DLP policy rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dlpDownloadScanEnabled")
    def dlp_download_scan_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "dlp_download_scan_enabled")

    @dlp_download_scan_enabled.setter
    def dlp_download_scan_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dlp_download_scan_enabled", value)

    @property
    @pulumi.getter(name="dlpEngines")
    def dlp_engines(self) -> Optional[pulumi.Input['DLPWebRulesDlpEnginesArgs']]:
        """
        The list of DLP engines to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "dlp_engines")

    @dlp_engines.setter
    def dlp_engines(self, value: Optional[pulumi.Input['DLPWebRulesDlpEnginesArgs']]):
        pulumi.set(self, "dlp_engines", value)

    @property
    @pulumi.getter(name="excludedDepartments")
    def excluded_departments(self) -> Optional[pulumi.Input['DLPWebRulesExcludedDepartmentsArgs']]:
        """
        The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
        """
        return pulumi.get(self, "excluded_departments")

    @excluded_departments.setter
    def excluded_departments(self, value: Optional[pulumi.Input['DLPWebRulesExcludedDepartmentsArgs']]):
        pulumi.set(self, "excluded_departments", value)

    @property
    @pulumi.getter(name="excludedGroups")
    def excluded_groups(self) -> Optional[pulumi.Input['DLPWebRulesExcludedGroupsArgs']]:
        """
        The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
        """
        return pulumi.get(self, "excluded_groups")

    @excluded_groups.setter
    def excluded_groups(self, value: Optional[pulumi.Input['DLPWebRulesExcludedGroupsArgs']]):
        pulumi.set(self, "excluded_groups", value)

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Optional[pulumi.Input['DLPWebRulesExcludedUsersArgs']]:
        """
        The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
        """
        return pulumi.get(self, "excluded_users")

    @excluded_users.setter
    def excluded_users(self, value: Optional[pulumi.Input['DLPWebRulesExcludedUsersArgs']]):
        pulumi.set(self, "excluded_users", value)

    @property
    @pulumi.getter(name="externalAuditorEmail")
    def external_auditor_email(self) -> Optional[pulumi.Input[str]]:
        """
        The email address of an external auditor to whom DLP email notifications are sent.
        """
        return pulumi.get(self, "external_auditor_email")

    @external_auditor_email.setter
    def external_auditor_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auditor_email", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)

        * > Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocr_enabled` is set to `true` for DLP rules with content inspection.

        * > Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `without_content_inspection` is set to `false`.

        * > Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['DLPWebRulesGroupsArgs']]:
        """
        The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['DLPWebRulesGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="icapServer")
    def icap_server(self) -> Optional[pulumi.Input['DLPWebRulesIcapServerArgs']]:
        """
        The DLP server, using ICAP, to which the transaction content is forwarded.
        """
        return pulumi.get(self, "icap_server")

    @icap_server.setter
    def icap_server(self, value: Optional[pulumi.Input['DLPWebRulesIcapServerArgs']]):
        pulumi.set(self, "icap_server", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['DLPWebRulesLabelsArgs']]:
        """
        The Name-ID pairs of rule labels associated to the DLP policy rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['DLPWebRulesLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['DLPWebRulesLocationGroupsArgs']]:
        """
        The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['DLPWebRulesLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['DLPWebRulesLocationsArgs']]:
        """
        The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['DLPWebRulesLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="matchOnly")
    def match_only(self) -> Optional[pulumi.Input[bool]]:
        """
        The match only criteria for DLP engines.
        """
        return pulumi.get(self, "match_only")

    @match_only.setter
    def match_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_only", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum file size (in KB) used for evaluation of the DLP policy rule.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationTemplate")
    def notification_template(self) -> Optional[pulumi.Input['DLPWebRulesNotificationTemplateArgs']]:
        """
        The template used for DLP notification emails.
        """
        return pulumi.get(self, "notification_template")

    @notification_template.setter
    def notification_template(self, value: Optional[pulumi.Input['DLPWebRulesNotificationTemplateArgs']]):
        pulumi.set(self, "notification_template", value)

    @property
    @pulumi.getter(name="ocrEnabled")
    def ocr_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables image file scanning. When OCR is enabled only the following ``file_types`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``
        """
        return pulumi.get(self, "ocr_enabled")

    @ocr_enabled.setter
    def ocr_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ocr_enabled", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[int]]:
        """
        The rule order of execution for the DLP policy rule with respect to other rules.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="parentRule")
    def parent_rule(self) -> Optional[pulumi.Input[int]]:
        """
        The unique identifier of the parent rule under which an exception rule is added.
        > Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
        """
        return pulumi.get(self, "parent_rule")

    @parent_rule.setter
    def parent_rule(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parent_rule", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The protocol criteria specified for the DLP policy rule.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[int]]:
        """
        Admin rank of the admin who creates this rule
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Enables or disables the DLP policy rule.. The supported values are:
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subRules")
    def sub_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of exception rules added to a parent rule.
        > Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
        """
        return pulumi.get(self, "sub_rules")

    @sub_rules.setter
    def sub_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sub_rules", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Optional[pulumi.Input['DLPWebRulesTimeWindowsArgs']]:
        """
        The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: Optional[pulumi.Input['DLPWebRulesTimeWindowsArgs']]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Optional[pulumi.Input['DLPWebRulesUrlCategoriesArgs']]:
        """
        The list of URL categories to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "url_categories")

    @url_categories.setter
    def url_categories(self, value: Optional[pulumi.Input['DLPWebRulesUrlCategoriesArgs']]):
        pulumi.set(self, "url_categories", value)

    @property
    @pulumi.getter(name="userRiskScoreLevels")
    def user_risk_score_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
        """
        return pulumi.get(self, "user_risk_score_levels")

    @user_risk_score_levels.setter
    def user_risk_score_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_risk_score_levels", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['DLPWebRulesUsersArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['DLPWebRulesUsersArgs']]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="withoutContentInspection")
    def without_content_inspection(self) -> Optional[pulumi.Input[bool]]:
        """
        must be set to false if `file_types` is not defined.
        """
        return pulumi.get(self, "without_content_inspection")

    @without_content_inspection.setter
    def without_content_inspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "without_content_inspection", value)

    @property
    @pulumi.getter(name="workloadGroups")
    def workload_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]]]:
        """
        The list of preconfigured workload groups to which the policy must be applied
        """
        return pulumi.get(self, "workload_groups")

    @workload_groups.setter
    def workload_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]]]):
        pulumi.set(self, "workload_groups", value)

    @property
    @pulumi.getter(name="zccNotificationsEnabled")
    def zcc_notifications_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "zcc_notifications_enabled")

    @zcc_notifications_enabled.setter
    def zcc_notifications_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "zcc_notifications_enabled", value)

    @property
    @pulumi.getter(name="zscalerIncidentReceiver")
    def zscaler_incident_receiver(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        return pulumi.get(self, "zscaler_incident_receiver")

    @zscaler_incident_receiver.setter
    def zscaler_incident_receiver(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "zscaler_incident_receiver", value)


@pulumi.input_type
class _DLPWebRulesState:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 auditor: Optional[pulumi.Input['DLPWebRulesAuditorArgs']] = None,
                 cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 departments: Optional[pulumi.Input['DLPWebRulesDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dlp_download_scan_enabled: Optional[pulumi.Input[bool]] = None,
                 dlp_engines: Optional[pulumi.Input['DLPWebRulesDlpEnginesArgs']] = None,
                 excluded_departments: Optional[pulumi.Input['DLPWebRulesExcludedDepartmentsArgs']] = None,
                 excluded_groups: Optional[pulumi.Input['DLPWebRulesExcludedGroupsArgs']] = None,
                 excluded_users: Optional[pulumi.Input['DLPWebRulesExcludedUsersArgs']] = None,
                 external_auditor_email: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups: Optional[pulumi.Input['DLPWebRulesGroupsArgs']] = None,
                 icap_server: Optional[pulumi.Input['DLPWebRulesIcapServerArgs']] = None,
                 labels: Optional[pulumi.Input['DLPWebRulesLabelsArgs']] = None,
                 location_groups: Optional[pulumi.Input['DLPWebRulesLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['DLPWebRulesLocationsArgs']] = None,
                 match_only: Optional[pulumi.Input[bool]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_template: Optional[pulumi.Input['DLPWebRulesNotificationTemplateArgs']] = None,
                 ocr_enabled: Optional[pulumi.Input[bool]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 parent_rule: Optional[pulumi.Input[int]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 sub_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 time_windows: Optional[pulumi.Input['DLPWebRulesTimeWindowsArgs']] = None,
                 url_categories: Optional[pulumi.Input['DLPWebRulesUrlCategoriesArgs']] = None,
                 user_risk_score_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input['DLPWebRulesUsersArgs']] = None,
                 without_content_inspection: Optional[pulumi.Input[bool]] = None,
                 workload_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]]] = None,
                 zcc_notifications_enabled: Optional[pulumi.Input[bool]] = None,
                 zscaler_incident_receiver: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering DLPWebRules resources.
        :param pulumi.Input[str] action: The action taken when traffic matches the DLP policy rule criteria. The supported values are:
        :param pulumi.Input['DLPWebRulesAuditorArgs'] auditor: The auditor to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cloud_applications: The list of cloud applications to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesDepartmentsArgs'] departments: The name-ID pairs of the departments that are excluded from the DLP policy rule.
        :param pulumi.Input[str] description: The description of the DLP policy rule.
        :param pulumi.Input[bool] dlp_download_scan_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input['DLPWebRulesDlpEnginesArgs'] dlp_engines: The list of DLP engines to which the DLP policy rule must be applied.
        :param pulumi.Input['DLPWebRulesExcludedDepartmentsArgs'] excluded_departments: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
        :param pulumi.Input['DLPWebRulesExcludedGroupsArgs'] excluded_groups: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
        :param pulumi.Input['DLPWebRulesExcludedUsersArgs'] excluded_users: The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
        :param pulumi.Input[str] external_auditor_email: The email address of an external auditor to whom DLP email notifications are sent.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_types: The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
               
               * > Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocr_enabled` is set to `true` for DLP rules with content inspection.
               
               * > Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `without_content_inspection` is set to `false`.
               
               * > Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.
        :param pulumi.Input['DLPWebRulesGroupsArgs'] groups: The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input['DLPWebRulesIcapServerArgs'] icap_server: The DLP server, using ICAP, to which the transaction content is forwarded.
        :param pulumi.Input['DLPWebRulesLabelsArgs'] labels: The Name-ID pairs of rule labels associated to the DLP policy rule.
        :param pulumi.Input['DLPWebRulesLocationGroupsArgs'] location_groups: The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input['DLPWebRulesLocationsArgs'] locations: The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
        :param pulumi.Input[bool] match_only: The match only criteria for DLP engines.
        :param pulumi.Input[int] min_size: The minimum file size (in KB) used for evaluation of the DLP policy rule.
        :param pulumi.Input[str] name: The name of the workload group
        :param pulumi.Input['DLPWebRulesNotificationTemplateArgs'] notification_template: The template used for DLP notification emails.
        :param pulumi.Input[bool] ocr_enabled: Enables or disables image file scanning. When OCR is enabled only the following ``file_types`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``
        :param pulumi.Input[int] order: The rule order of execution for the DLP policy rule with respect to other rules.
        :param pulumi.Input[int] parent_rule: The unique identifier of the parent rule under which an exception rule is added.
               > Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol criteria specified for the DLP policy rule.
        :param pulumi.Input[int] rank: Admin rank of the admin who creates this rule
        :param pulumi.Input[str] severity: Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`
        :param pulumi.Input[str] state: Enables or disables the DLP policy rule.. The supported values are:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sub_rules: The list of exception rules added to a parent rule.
               > Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
        :param pulumi.Input['DLPWebRulesTimeWindowsArgs'] time_windows: The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input['DLPWebRulesUrlCategoriesArgs'] url_categories: The list of URL categories to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_risk_score_levels: Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
        :param pulumi.Input['DLPWebRulesUsersArgs'] users: The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[bool] without_content_inspection: must be set to false if `file_types` is not defined.
        :param pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]] workload_groups: The list of preconfigured workload groups to which the policy must be applied
        :param pulumi.Input[bool] zcc_notifications_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[bool] zscaler_incident_receiver: Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auditor is not None:
            pulumi.set(__self__, "auditor", auditor)
        if cloud_applications is not None:
            pulumi.set(__self__, "cloud_applications", cloud_applications)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dlp_download_scan_enabled is not None:
            pulumi.set(__self__, "dlp_download_scan_enabled", dlp_download_scan_enabled)
        if dlp_engines is not None:
            pulumi.set(__self__, "dlp_engines", dlp_engines)
        if excluded_departments is not None:
            pulumi.set(__self__, "excluded_departments", excluded_departments)
        if excluded_groups is not None:
            pulumi.set(__self__, "excluded_groups", excluded_groups)
        if excluded_users is not None:
            pulumi.set(__self__, "excluded_users", excluded_users)
        if external_auditor_email is not None:
            pulumi.set(__self__, "external_auditor_email", external_auditor_email)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if icap_server is not None:
            pulumi.set(__self__, "icap_server", icap_server)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if match_only is not None:
            pulumi.set(__self__, "match_only", match_only)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_template is not None:
            pulumi.set(__self__, "notification_template", notification_template)
        if ocr_enabled is not None:
            pulumi.set(__self__, "ocr_enabled", ocr_enabled)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if parent_rule is not None:
            pulumi.set(__self__, "parent_rule", parent_rule)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if sub_rules is not None:
            pulumi.set(__self__, "sub_rules", sub_rules)
        if time_windows is not None:
            pulumi.set(__self__, "time_windows", time_windows)
        if url_categories is not None:
            pulumi.set(__self__, "url_categories", url_categories)
        if user_risk_score_levels is not None:
            pulumi.set(__self__, "user_risk_score_levels", user_risk_score_levels)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if without_content_inspection is not None:
            pulumi.set(__self__, "without_content_inspection", without_content_inspection)
        if workload_groups is not None:
            pulumi.set(__self__, "workload_groups", workload_groups)
        if zcc_notifications_enabled is not None:
            pulumi.set(__self__, "zcc_notifications_enabled", zcc_notifications_enabled)
        if zscaler_incident_receiver is not None:
            pulumi.set(__self__, "zscaler_incident_receiver", zscaler_incident_receiver)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The action taken when traffic matches the DLP policy rule criteria. The supported values are:
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def auditor(self) -> Optional[pulumi.Input['DLPWebRulesAuditorArgs']]:
        """
        The auditor to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "auditor")

    @auditor.setter
    def auditor(self, value: Optional[pulumi.Input['DLPWebRulesAuditorArgs']]):
        pulumi.set(self, "auditor", value)

    @property
    @pulumi.getter(name="cloudApplications")
    def cloud_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of cloud applications to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "cloud_applications")

    @cloud_applications.setter
    def cloud_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cloud_applications", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['DLPWebRulesDepartmentsArgs']]:
        """
        The name-ID pairs of the departments that are excluded from the DLP policy rule.
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['DLPWebRulesDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the DLP policy rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dlpDownloadScanEnabled")
    def dlp_download_scan_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "dlp_download_scan_enabled")

    @dlp_download_scan_enabled.setter
    def dlp_download_scan_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dlp_download_scan_enabled", value)

    @property
    @pulumi.getter(name="dlpEngines")
    def dlp_engines(self) -> Optional[pulumi.Input['DLPWebRulesDlpEnginesArgs']]:
        """
        The list of DLP engines to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "dlp_engines")

    @dlp_engines.setter
    def dlp_engines(self, value: Optional[pulumi.Input['DLPWebRulesDlpEnginesArgs']]):
        pulumi.set(self, "dlp_engines", value)

    @property
    @pulumi.getter(name="excludedDepartments")
    def excluded_departments(self) -> Optional[pulumi.Input['DLPWebRulesExcludedDepartmentsArgs']]:
        """
        The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
        """
        return pulumi.get(self, "excluded_departments")

    @excluded_departments.setter
    def excluded_departments(self, value: Optional[pulumi.Input['DLPWebRulesExcludedDepartmentsArgs']]):
        pulumi.set(self, "excluded_departments", value)

    @property
    @pulumi.getter(name="excludedGroups")
    def excluded_groups(self) -> Optional[pulumi.Input['DLPWebRulesExcludedGroupsArgs']]:
        """
        The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
        """
        return pulumi.get(self, "excluded_groups")

    @excluded_groups.setter
    def excluded_groups(self, value: Optional[pulumi.Input['DLPWebRulesExcludedGroupsArgs']]):
        pulumi.set(self, "excluded_groups", value)

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Optional[pulumi.Input['DLPWebRulesExcludedUsersArgs']]:
        """
        The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
        """
        return pulumi.get(self, "excluded_users")

    @excluded_users.setter
    def excluded_users(self, value: Optional[pulumi.Input['DLPWebRulesExcludedUsersArgs']]):
        pulumi.set(self, "excluded_users", value)

    @property
    @pulumi.getter(name="externalAuditorEmail")
    def external_auditor_email(self) -> Optional[pulumi.Input[str]]:
        """
        The email address of an external auditor to whom DLP email notifications are sent.
        """
        return pulumi.get(self, "external_auditor_email")

    @external_auditor_email.setter
    def external_auditor_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auditor_email", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)

        * > Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocr_enabled` is set to `true` for DLP rules with content inspection.

        * > Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `without_content_inspection` is set to `false`.

        * > Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['DLPWebRulesGroupsArgs']]:
        """
        The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['DLPWebRulesGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="icapServer")
    def icap_server(self) -> Optional[pulumi.Input['DLPWebRulesIcapServerArgs']]:
        """
        The DLP server, using ICAP, to which the transaction content is forwarded.
        """
        return pulumi.get(self, "icap_server")

    @icap_server.setter
    def icap_server(self, value: Optional[pulumi.Input['DLPWebRulesIcapServerArgs']]):
        pulumi.set(self, "icap_server", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['DLPWebRulesLabelsArgs']]:
        """
        The Name-ID pairs of rule labels associated to the DLP policy rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['DLPWebRulesLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['DLPWebRulesLocationGroupsArgs']]:
        """
        The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['DLPWebRulesLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['DLPWebRulesLocationsArgs']]:
        """
        The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['DLPWebRulesLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="matchOnly")
    def match_only(self) -> Optional[pulumi.Input[bool]]:
        """
        The match only criteria for DLP engines.
        """
        return pulumi.get(self, "match_only")

    @match_only.setter
    def match_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_only", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum file size (in KB) used for evaluation of the DLP policy rule.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationTemplate")
    def notification_template(self) -> Optional[pulumi.Input['DLPWebRulesNotificationTemplateArgs']]:
        """
        The template used for DLP notification emails.
        """
        return pulumi.get(self, "notification_template")

    @notification_template.setter
    def notification_template(self, value: Optional[pulumi.Input['DLPWebRulesNotificationTemplateArgs']]):
        pulumi.set(self, "notification_template", value)

    @property
    @pulumi.getter(name="ocrEnabled")
    def ocr_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables image file scanning. When OCR is enabled only the following ``file_types`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``
        """
        return pulumi.get(self, "ocr_enabled")

    @ocr_enabled.setter
    def ocr_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ocr_enabled", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[int]]:
        """
        The rule order of execution for the DLP policy rule with respect to other rules.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="parentRule")
    def parent_rule(self) -> Optional[pulumi.Input[int]]:
        """
        The unique identifier of the parent rule under which an exception rule is added.
        > Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
        """
        return pulumi.get(self, "parent_rule")

    @parent_rule.setter
    def parent_rule(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parent_rule", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The protocol criteria specified for the DLP policy rule.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[int]]:
        """
        Admin rank of the admin who creates this rule
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Enables or disables the DLP policy rule.. The supported values are:
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="subRules")
    def sub_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of exception rules added to a parent rule.
        > Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
        """
        return pulumi.get(self, "sub_rules")

    @sub_rules.setter
    def sub_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sub_rules", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Optional[pulumi.Input['DLPWebRulesTimeWindowsArgs']]:
        """
        The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: Optional[pulumi.Input['DLPWebRulesTimeWindowsArgs']]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Optional[pulumi.Input['DLPWebRulesUrlCategoriesArgs']]:
        """
        The list of URL categories to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "url_categories")

    @url_categories.setter
    def url_categories(self, value: Optional[pulumi.Input['DLPWebRulesUrlCategoriesArgs']]):
        pulumi.set(self, "url_categories", value)

    @property
    @pulumi.getter(name="userRiskScoreLevels")
    def user_risk_score_levels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
        """
        return pulumi.get(self, "user_risk_score_levels")

    @user_risk_score_levels.setter
    def user_risk_score_levels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_risk_score_levels", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['DLPWebRulesUsersArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['DLPWebRulesUsersArgs']]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="withoutContentInspection")
    def without_content_inspection(self) -> Optional[pulumi.Input[bool]]:
        """
        must be set to false if `file_types` is not defined.
        """
        return pulumi.get(self, "without_content_inspection")

    @without_content_inspection.setter
    def without_content_inspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "without_content_inspection", value)

    @property
    @pulumi.getter(name="workloadGroups")
    def workload_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]]]:
        """
        The list of preconfigured workload groups to which the policy must be applied
        """
        return pulumi.get(self, "workload_groups")

    @workload_groups.setter
    def workload_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DLPWebRulesWorkloadGroupArgs']]]]):
        pulumi.set(self, "workload_groups", value)

    @property
    @pulumi.getter(name="zccNotificationsEnabled")
    def zcc_notifications_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "zcc_notifications_enabled")

    @zcc_notifications_enabled.setter
    def zcc_notifications_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "zcc_notifications_enabled", value)

    @property
    @pulumi.getter(name="zscalerIncidentReceiver")
    def zscaler_incident_receiver(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        return pulumi.get(self, "zscaler_incident_receiver")

    @zscaler_incident_receiver.setter
    def zscaler_incident_receiver(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "zscaler_incident_receiver", value)


class DLPWebRules(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 auditor: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesAuditorArgs']]] = None,
                 cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 departments: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesDepartmentsArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dlp_download_scan_enabled: Optional[pulumi.Input[bool]] = None,
                 dlp_engines: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesDlpEnginesArgs']]] = None,
                 excluded_departments: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesExcludedDepartmentsArgs']]] = None,
                 excluded_groups: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesExcludedGroupsArgs']]] = None,
                 excluded_users: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesExcludedUsersArgs']]] = None,
                 external_auditor_email: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesGroupsArgs']]] = None,
                 icap_server: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesIcapServerArgs']]] = None,
                 labels: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesLabelsArgs']]] = None,
                 location_groups: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesLocationGroupsArgs']]] = None,
                 locations: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesLocationsArgs']]] = None,
                 match_only: Optional[pulumi.Input[bool]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_template: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesNotificationTemplateArgs']]] = None,
                 ocr_enabled: Optional[pulumi.Input[bool]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 parent_rule: Optional[pulumi.Input[int]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 sub_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 time_windows: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesTimeWindowsArgs']]] = None,
                 url_categories: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesUrlCategoriesArgs']]] = None,
                 user_risk_score_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesUsersArgs']]] = None,
                 without_content_inspection: Optional[pulumi.Input[bool]] = None,
                 workload_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DLPWebRulesWorkloadGroupArgs']]]]] = None,
                 zcc_notifications_enabled: Optional[pulumi.Input[bool]] = None,
                 zscaler_incident_receiver: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        The **zia_dlp_web_rules** resource allows the creation and management of ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.

        ⚠️ **WARNING:** Zscaler Internet Access DLP supports a maximum of 127 Web DLP Rules to be created via API.

        ## Example Usage

        ### OCR ENABLED

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        test = zia.DLPWebRules("test",
            action="ALLOW",
            cloud_applications=[
                "ZENDESK",
                "LUCKY_ORANGE",
                "MICROSOFT_POWERAPPS",
                "MICROSOFTLIVEMEETING",
            ],
            description="Test",
            file_types=[
                "BITMAP",
                "JPEG",
                "PNG",
                "TIFF",
            ],
            match_only=False,
            min_size=20,
            ocr_enabled=True,
            order=1,
            protocols=[
                "FTP_RULE",
                "HTTPS_RULE",
                "HTTP_RULE",
            ],
            rank=7,
            state="ENABLED",
            without_content_inspection=False,
            zscaler_incident_receiver=True)
        ```
        <!--End PulumiCodeChooser -->

        ### "ALL_OUTBOUND" File Type

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        this_dlp_engines = zia.get_dlp_engines(predefined_engine_name="EXTERNAL")
        this_dlp_web_rules = zia.DLPWebRules("thisDLPWebRules",
            description="Example",
            action="BLOCK",
            order=1,
            rank=7,
            state="ENABLED",
            protocols=[
                "FTP_RULE",
                "HTTPS_RULE",
                "HTTP_RULE",
            ],
            file_types=["ALL_OUTBOUND"],
            zscaler_incident_receiver=True,
            without_content_inspection=False,
            user_risk_score_levels=[
                "LOW",
                "MEDIUM",
                "HIGH",
                "CRITICAL",
            ],
            severity="RULE_SEVERITY_HIGH",
            dlp_engines=zia.DLPWebRulesDlpEnginesArgs(
                ids=[this_dlp_engines.id],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_dlp_web_rules** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/dLPWebRules:DLPWebRules example <rule_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/dLPWebRules:DLPWebRules example <rule_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: The action taken when traffic matches the DLP policy rule criteria. The supported values are:
        :param pulumi.Input[pulumi.InputType['DLPWebRulesAuditorArgs']] auditor: The auditor to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cloud_applications: The list of cloud applications to which the DLP policy rule must be applied.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesDepartmentsArgs']] departments: The name-ID pairs of the departments that are excluded from the DLP policy rule.
        :param pulumi.Input[str] description: The description of the DLP policy rule.
        :param pulumi.Input[bool] dlp_download_scan_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesDlpEnginesArgs']] dlp_engines: The list of DLP engines to which the DLP policy rule must be applied.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesExcludedDepartmentsArgs']] excluded_departments: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesExcludedGroupsArgs']] excluded_groups: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesExcludedUsersArgs']] excluded_users: The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
        :param pulumi.Input[str] external_auditor_email: The email address of an external auditor to whom DLP email notifications are sent.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_types: The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
               
               * > Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocr_enabled` is set to `true` for DLP rules with content inspection.
               
               * > Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `without_content_inspection` is set to `false`.
               
               * > Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesGroupsArgs']] groups: The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesIcapServerArgs']] icap_server: The DLP server, using ICAP, to which the transaction content is forwarded.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesLabelsArgs']] labels: The Name-ID pairs of rule labels associated to the DLP policy rule.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesLocationGroupsArgs']] location_groups: The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesLocationsArgs']] locations: The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
        :param pulumi.Input[bool] match_only: The match only criteria for DLP engines.
        :param pulumi.Input[int] min_size: The minimum file size (in KB) used for evaluation of the DLP policy rule.
        :param pulumi.Input[str] name: The name of the workload group
        :param pulumi.Input[pulumi.InputType['DLPWebRulesNotificationTemplateArgs']] notification_template: The template used for DLP notification emails.
        :param pulumi.Input[bool] ocr_enabled: Enables or disables image file scanning. When OCR is enabled only the following ``file_types`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``
        :param pulumi.Input[int] order: The rule order of execution for the DLP policy rule with respect to other rules.
        :param pulumi.Input[int] parent_rule: The unique identifier of the parent rule under which an exception rule is added.
               > Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol criteria specified for the DLP policy rule.
        :param pulumi.Input[int] rank: Admin rank of the admin who creates this rule
        :param pulumi.Input[str] severity: Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`
        :param pulumi.Input[str] state: Enables or disables the DLP policy rule.. The supported values are:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sub_rules: The list of exception rules added to a parent rule.
               > Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesTimeWindowsArgs']] time_windows: The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesUrlCategoriesArgs']] url_categories: The list of URL categories to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_risk_score_levels: Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
        :param pulumi.Input[pulumi.InputType['DLPWebRulesUsersArgs']] users: The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[bool] without_content_inspection: must be set to false if `file_types` is not defined.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DLPWebRulesWorkloadGroupArgs']]]] workload_groups: The list of preconfigured workload groups to which the policy must be applied
        :param pulumi.Input[bool] zcc_notifications_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[bool] zscaler_incident_receiver: Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DLPWebRulesArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_dlp_web_rules** resource allows the creation and management of ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.

        ⚠️ **WARNING:** Zscaler Internet Access DLP supports a maximum of 127 Web DLP Rules to be created via API.

        ## Example Usage

        ### OCR ENABLED

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        test = zia.DLPWebRules("test",
            action="ALLOW",
            cloud_applications=[
                "ZENDESK",
                "LUCKY_ORANGE",
                "MICROSOFT_POWERAPPS",
                "MICROSOFTLIVEMEETING",
            ],
            description="Test",
            file_types=[
                "BITMAP",
                "JPEG",
                "PNG",
                "TIFF",
            ],
            match_only=False,
            min_size=20,
            ocr_enabled=True,
            order=1,
            protocols=[
                "FTP_RULE",
                "HTTPS_RULE",
                "HTTP_RULE",
            ],
            rank=7,
            state="ENABLED",
            without_content_inspection=False,
            zscaler_incident_receiver=True)
        ```
        <!--End PulumiCodeChooser -->

        ### "ALL_OUTBOUND" File Type

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        this_dlp_engines = zia.get_dlp_engines(predefined_engine_name="EXTERNAL")
        this_dlp_web_rules = zia.DLPWebRules("thisDLPWebRules",
            description="Example",
            action="BLOCK",
            order=1,
            rank=7,
            state="ENABLED",
            protocols=[
                "FTP_RULE",
                "HTTPS_RULE",
                "HTTP_RULE",
            ],
            file_types=["ALL_OUTBOUND"],
            zscaler_incident_receiver=True,
            without_content_inspection=False,
            user_risk_score_levels=[
                "LOW",
                "MEDIUM",
                "HIGH",
                "CRITICAL",
            ],
            severity="RULE_SEVERITY_HIGH",
            dlp_engines=zia.DLPWebRulesDlpEnginesArgs(
                ids=[this_dlp_engines.id],
            ))
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_dlp_web_rules** can be imported by using `<RULE ID>` or `<RULE NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/dLPWebRules:DLPWebRules example <rule_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/dLPWebRules:DLPWebRules example <rule_name>
        ```

        :param str resource_name: The name of the resource.
        :param DLPWebRulesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DLPWebRulesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 auditor: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesAuditorArgs']]] = None,
                 cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 departments: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesDepartmentsArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dlp_download_scan_enabled: Optional[pulumi.Input[bool]] = None,
                 dlp_engines: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesDlpEnginesArgs']]] = None,
                 excluded_departments: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesExcludedDepartmentsArgs']]] = None,
                 excluded_groups: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesExcludedGroupsArgs']]] = None,
                 excluded_users: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesExcludedUsersArgs']]] = None,
                 external_auditor_email: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesGroupsArgs']]] = None,
                 icap_server: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesIcapServerArgs']]] = None,
                 labels: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesLabelsArgs']]] = None,
                 location_groups: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesLocationGroupsArgs']]] = None,
                 locations: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesLocationsArgs']]] = None,
                 match_only: Optional[pulumi.Input[bool]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_template: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesNotificationTemplateArgs']]] = None,
                 ocr_enabled: Optional[pulumi.Input[bool]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 parent_rule: Optional[pulumi.Input[int]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 sub_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 time_windows: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesTimeWindowsArgs']]] = None,
                 url_categories: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesUrlCategoriesArgs']]] = None,
                 user_risk_score_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesUsersArgs']]] = None,
                 without_content_inspection: Optional[pulumi.Input[bool]] = None,
                 workload_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DLPWebRulesWorkloadGroupArgs']]]]] = None,
                 zcc_notifications_enabled: Optional[pulumi.Input[bool]] = None,
                 zscaler_incident_receiver: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DLPWebRulesArgs.__new__(DLPWebRulesArgs)

            __props__.__dict__["action"] = action
            __props__.__dict__["auditor"] = auditor
            __props__.__dict__["cloud_applications"] = cloud_applications
            __props__.__dict__["departments"] = departments
            __props__.__dict__["description"] = description
            __props__.__dict__["dlp_download_scan_enabled"] = dlp_download_scan_enabled
            __props__.__dict__["dlp_engines"] = dlp_engines
            __props__.__dict__["excluded_departments"] = excluded_departments
            __props__.__dict__["excluded_groups"] = excluded_groups
            __props__.__dict__["excluded_users"] = excluded_users
            __props__.__dict__["external_auditor_email"] = external_auditor_email
            __props__.__dict__["file_types"] = file_types
            __props__.__dict__["groups"] = groups
            __props__.__dict__["icap_server"] = icap_server
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location_groups"] = location_groups
            __props__.__dict__["locations"] = locations
            __props__.__dict__["match_only"] = match_only
            __props__.__dict__["min_size"] = min_size
            __props__.__dict__["name"] = name
            __props__.__dict__["notification_template"] = notification_template
            __props__.__dict__["ocr_enabled"] = ocr_enabled
            __props__.__dict__["order"] = order
            __props__.__dict__["parent_rule"] = parent_rule
            __props__.__dict__["protocols"] = protocols
            __props__.__dict__["rank"] = rank
            __props__.__dict__["severity"] = severity
            __props__.__dict__["state"] = state
            __props__.__dict__["sub_rules"] = sub_rules
            __props__.__dict__["time_windows"] = time_windows
            __props__.__dict__["url_categories"] = url_categories
            __props__.__dict__["user_risk_score_levels"] = user_risk_score_levels
            __props__.__dict__["users"] = users
            __props__.__dict__["without_content_inspection"] = without_content_inspection
            __props__.__dict__["workload_groups"] = workload_groups
            __props__.__dict__["zcc_notifications_enabled"] = zcc_notifications_enabled
            __props__.__dict__["zscaler_incident_receiver"] = zscaler_incident_receiver
            __props__.__dict__["rule_id"] = None
        super(DLPWebRules, __self__).__init__(
            'zia:index/dLPWebRules:DLPWebRules',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            action: Optional[pulumi.Input[str]] = None,
            auditor: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesAuditorArgs']]] = None,
            cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            departments: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesDepartmentsArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dlp_download_scan_enabled: Optional[pulumi.Input[bool]] = None,
            dlp_engines: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesDlpEnginesArgs']]] = None,
            excluded_departments: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesExcludedDepartmentsArgs']]] = None,
            excluded_groups: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesExcludedGroupsArgs']]] = None,
            excluded_users: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesExcludedUsersArgs']]] = None,
            external_auditor_email: Optional[pulumi.Input[str]] = None,
            file_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            groups: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesGroupsArgs']]] = None,
            icap_server: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesIcapServerArgs']]] = None,
            labels: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesLabelsArgs']]] = None,
            location_groups: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesLocationGroupsArgs']]] = None,
            locations: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesLocationsArgs']]] = None,
            match_only: Optional[pulumi.Input[bool]] = None,
            min_size: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notification_template: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesNotificationTemplateArgs']]] = None,
            ocr_enabled: Optional[pulumi.Input[bool]] = None,
            order: Optional[pulumi.Input[int]] = None,
            parent_rule: Optional[pulumi.Input[int]] = None,
            protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            rank: Optional[pulumi.Input[int]] = None,
            rule_id: Optional[pulumi.Input[int]] = None,
            severity: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            sub_rules: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            time_windows: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesTimeWindowsArgs']]] = None,
            url_categories: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesUrlCategoriesArgs']]] = None,
            user_risk_score_levels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            users: Optional[pulumi.Input[pulumi.InputType['DLPWebRulesUsersArgs']]] = None,
            without_content_inspection: Optional[pulumi.Input[bool]] = None,
            workload_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DLPWebRulesWorkloadGroupArgs']]]]] = None,
            zcc_notifications_enabled: Optional[pulumi.Input[bool]] = None,
            zscaler_incident_receiver: Optional[pulumi.Input[bool]] = None) -> 'DLPWebRules':
        """
        Get an existing DLPWebRules resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: The action taken when traffic matches the DLP policy rule criteria. The supported values are:
        :param pulumi.Input[pulumi.InputType['DLPWebRulesAuditorArgs']] auditor: The auditor to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cloud_applications: The list of cloud applications to which the DLP policy rule must be applied.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesDepartmentsArgs']] departments: The name-ID pairs of the departments that are excluded from the DLP policy rule.
        :param pulumi.Input[str] description: The description of the DLP policy rule.
        :param pulumi.Input[bool] dlp_download_scan_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesDlpEnginesArgs']] dlp_engines: The list of DLP engines to which the DLP policy rule must be applied.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesExcludedDepartmentsArgs']] excluded_departments: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesExcludedGroupsArgs']] excluded_groups: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesExcludedUsersArgs']] excluded_users: The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
        :param pulumi.Input[str] external_auditor_email: The email address of an external auditor to whom DLP email notifications are sent.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_types: The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
               
               * > Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocr_enabled` is set to `true` for DLP rules with content inspection.
               
               * > Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `without_content_inspection` is set to `false`.
               
               * > Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesGroupsArgs']] groups: The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesIcapServerArgs']] icap_server: The DLP server, using ICAP, to which the transaction content is forwarded.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesLabelsArgs']] labels: The Name-ID pairs of rule labels associated to the DLP policy rule.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesLocationGroupsArgs']] location_groups: The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesLocationsArgs']] locations: The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
        :param pulumi.Input[bool] match_only: The match only criteria for DLP engines.
        :param pulumi.Input[int] min_size: The minimum file size (in KB) used for evaluation of the DLP policy rule.
        :param pulumi.Input[str] name: The name of the workload group
        :param pulumi.Input[pulumi.InputType['DLPWebRulesNotificationTemplateArgs']] notification_template: The template used for DLP notification emails.
        :param pulumi.Input[bool] ocr_enabled: Enables or disables image file scanning. When OCR is enabled only the following ``file_types`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``
        :param pulumi.Input[int] order: The rule order of execution for the DLP policy rule with respect to other rules.
        :param pulumi.Input[int] parent_rule: The unique identifier of the parent rule under which an exception rule is added.
               > Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol criteria specified for the DLP policy rule.
        :param pulumi.Input[int] rank: Admin rank of the admin who creates this rule
        :param pulumi.Input[str] severity: Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`
        :param pulumi.Input[str] state: Enables or disables the DLP policy rule.. The supported values are:
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sub_rules: The list of exception rules added to a parent rule.
               > Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesTimeWindowsArgs']] time_windows: The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input[pulumi.InputType['DLPWebRulesUrlCategoriesArgs']] url_categories: The list of URL categories to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_risk_score_levels: Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
        :param pulumi.Input[pulumi.InputType['DLPWebRulesUsersArgs']] users: The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[bool] without_content_inspection: must be set to false if `file_types` is not defined.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DLPWebRulesWorkloadGroupArgs']]]] workload_groups: The list of preconfigured workload groups to which the policy must be applied
        :param pulumi.Input[bool] zcc_notifications_enabled: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[bool] zscaler_incident_receiver: Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DLPWebRulesState.__new__(_DLPWebRulesState)

        __props__.__dict__["action"] = action
        __props__.__dict__["auditor"] = auditor
        __props__.__dict__["cloud_applications"] = cloud_applications
        __props__.__dict__["departments"] = departments
        __props__.__dict__["description"] = description
        __props__.__dict__["dlp_download_scan_enabled"] = dlp_download_scan_enabled
        __props__.__dict__["dlp_engines"] = dlp_engines
        __props__.__dict__["excluded_departments"] = excluded_departments
        __props__.__dict__["excluded_groups"] = excluded_groups
        __props__.__dict__["excluded_users"] = excluded_users
        __props__.__dict__["external_auditor_email"] = external_auditor_email
        __props__.__dict__["file_types"] = file_types
        __props__.__dict__["groups"] = groups
        __props__.__dict__["icap_server"] = icap_server
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location_groups"] = location_groups
        __props__.__dict__["locations"] = locations
        __props__.__dict__["match_only"] = match_only
        __props__.__dict__["min_size"] = min_size
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_template"] = notification_template
        __props__.__dict__["ocr_enabled"] = ocr_enabled
        __props__.__dict__["order"] = order
        __props__.__dict__["parent_rule"] = parent_rule
        __props__.__dict__["protocols"] = protocols
        __props__.__dict__["rank"] = rank
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["severity"] = severity
        __props__.__dict__["state"] = state
        __props__.__dict__["sub_rules"] = sub_rules
        __props__.__dict__["time_windows"] = time_windows
        __props__.__dict__["url_categories"] = url_categories
        __props__.__dict__["user_risk_score_levels"] = user_risk_score_levels
        __props__.__dict__["users"] = users
        __props__.__dict__["without_content_inspection"] = without_content_inspection
        __props__.__dict__["workload_groups"] = workload_groups
        __props__.__dict__["zcc_notifications_enabled"] = zcc_notifications_enabled
        __props__.__dict__["zscaler_incident_receiver"] = zscaler_incident_receiver
        return DLPWebRules(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        The action taken when traffic matches the DLP policy rule criteria. The supported values are:
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def auditor(self) -> pulumi.Output['outputs.DLPWebRulesAuditor']:
        """
        The auditor to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "auditor")

    @property
    @pulumi.getter(name="cloudApplications")
    def cloud_applications(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of cloud applications to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "cloud_applications")

    @property
    @pulumi.getter
    def departments(self) -> pulumi.Output['outputs.DLPWebRulesDepartments']:
        """
        The name-ID pairs of the departments that are excluded from the DLP policy rule.
        """
        return pulumi.get(self, "departments")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the DLP policy rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dlpDownloadScanEnabled")
    def dlp_download_scan_enabled(self) -> pulumi.Output[bool]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "dlp_download_scan_enabled")

    @property
    @pulumi.getter(name="dlpEngines")
    def dlp_engines(self) -> pulumi.Output['outputs.DLPWebRulesDlpEngines']:
        """
        The list of DLP engines to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "dlp_engines")

    @property
    @pulumi.getter(name="excludedDepartments")
    def excluded_departments(self) -> pulumi.Output['outputs.DLPWebRulesExcludedDepartments']:
        """
        The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
        """
        return pulumi.get(self, "excluded_departments")

    @property
    @pulumi.getter(name="excludedGroups")
    def excluded_groups(self) -> pulumi.Output['outputs.DLPWebRulesExcludedGroups']:
        """
        The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
        """
        return pulumi.get(self, "excluded_groups")

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> pulumi.Output['outputs.DLPWebRulesExcludedUsers']:
        """
        The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
        """
        return pulumi.get(self, "excluded_users")

    @property
    @pulumi.getter(name="externalAuditorEmail")
    def external_auditor_email(self) -> pulumi.Output[str]:
        """
        The email address of an external auditor to whom DLP email notifications are sent.
        """
        return pulumi.get(self, "external_auditor_email")

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)

        * > Note: `BITMAP`, `JPEG`, `PNG`, and `TIFF` file types are exclusively supported when optical character recognition `ocr_enabled` is set to `true` for DLP rules with content inspection.

        * > Note: `ALL_OUTBOUND` file type is applicable only when the predefined DLP engine called `EXTERNAL` is used and when the attribute `without_content_inspection` is set to `false`.

        * > Note: `ALL_OUTBOUND` file type cannot be used alongside any any other file type.
        """
        return pulumi.get(self, "file_types")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output['outputs.DLPWebRulesGroups']:
        """
        The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="icapServer")
    def icap_server(self) -> pulumi.Output['outputs.DLPWebRulesIcapServer']:
        """
        The DLP server, using ICAP, to which the transaction content is forwarded.
        """
        return pulumi.get(self, "icap_server")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output['outputs.DLPWebRulesLabels']:
        """
        The Name-ID pairs of rule labels associated to the DLP policy rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> pulumi.Output['outputs.DLPWebRulesLocationGroups']:
        """
        The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Output['outputs.DLPWebRulesLocations']:
        """
        The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="matchOnly")
    def match_only(self) -> pulumi.Output[bool]:
        """
        The match only criteria for DLP engines.
        """
        return pulumi.get(self, "match_only")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> pulumi.Output[int]:
        """
        The minimum file size (in KB) used for evaluation of the DLP policy rule.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the workload group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationTemplate")
    def notification_template(self) -> pulumi.Output['outputs.DLPWebRulesNotificationTemplate']:
        """
        The template used for DLP notification emails.
        """
        return pulumi.get(self, "notification_template")

    @property
    @pulumi.getter(name="ocrEnabled")
    def ocr_enabled(self) -> pulumi.Output[bool]:
        """
        Enables or disables image file scanning. When OCR is enabled only the following ``file_types`` are supported: ``WINDOWS_META_FORMAT``, ``BITMAP``, ``JPEG``, ``PNG``, ``TIFF``
        """
        return pulumi.get(self, "ocr_enabled")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[int]:
        """
        The rule order of execution for the DLP policy rule with respect to other rules.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="parentRule")
    def parent_rule(self) -> pulumi.Output[int]:
        """
        The unique identifier of the parent rule under which an exception rule is added.
        > Note: Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
        """
        return pulumi.get(self, "parent_rule")

    @property
    @pulumi.getter
    def protocols(self) -> pulumi.Output[Sequence[str]]:
        """
        The protocol criteria specified for the DLP policy rule.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter
    def rank(self) -> pulumi.Output[Optional[int]]:
        """
        Admin rank of the admin who creates this rule
        """
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def severity(self) -> pulumi.Output[str]:
        """
        Indicates the severity selected for the DLP rule violation: Returned values are:  `RULE_SEVERITY_HIGH`, `RULE_SEVERITY_MEDIUM`, `RULE_SEVERITY_LOW`, `RULE_SEVERITY_INFO`
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Enables or disables the DLP policy rule.. The supported values are:
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="subRules")
    def sub_rules(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of exception rules added to a parent rule.
        > Note: All attributes within the WebDlpRule model are applicable to the sub-rules. Values for each rule are specified by using the WebDlpRule object Exception rules can be configured only when the inline DLP rule evaluation type is set to evaluate all DLP rules in the DLP Advanced Settings.
        """
        return pulumi.get(self, "sub_rules")

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> pulumi.Output['outputs.DLPWebRulesTimeWindows']:
        """
        The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        """
        return pulumi.get(self, "time_windows")

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> pulumi.Output['outputs.DLPWebRulesUrlCategories']:
        """
        The list of URL categories to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "url_categories")

    @property
    @pulumi.getter(name="userRiskScoreLevels")
    def user_risk_score_levels(self) -> pulumi.Output[Sequence[str]]:
        """
        Indicates the user risk score level selectedd for the DLP rule violation: Returned values are: `LOW`, `MEDIUM`, `HIGH`, `CRITICAL`
        """
        return pulumi.get(self, "user_risk_score_levels")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output['outputs.DLPWebRulesUsers']:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="withoutContentInspection")
    def without_content_inspection(self) -> pulumi.Output[bool]:
        """
        must be set to false if `file_types` is not defined.
        """
        return pulumi.get(self, "without_content_inspection")

    @property
    @pulumi.getter(name="workloadGroups")
    def workload_groups(self) -> pulumi.Output[Sequence['outputs.DLPWebRulesWorkloadGroup']]:
        """
        The list of preconfigured workload groups to which the policy must be applied
        """
        return pulumi.get(self, "workload_groups")

    @property
    @pulumi.getter(name="zccNotificationsEnabled")
    def zcc_notifications_enabled(self) -> pulumi.Output[bool]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "zcc_notifications_enabled")

    @property
    @pulumi.getter(name="zscalerIncidentReceiver")
    def zscaler_incident_receiver(self) -> pulumi.Output[bool]:
        """
        Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        return pulumi.get(self, "zscaler_incident_receiver")

