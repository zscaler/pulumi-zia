# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetSandboxBehavioralAnalysisResult',
    'AwaitableGetSandboxBehavioralAnalysisResult',
    'get_sandbox_behavioral_analysis',
    'get_sandbox_behavioral_analysis_output',
]

@pulumi.output_type
class GetSandboxBehavioralAnalysisResult:
    """
    A collection of values returned by getSandboxBehavioralAnalysis.
    """
    def __init__(__self__, file_hashes_to_be_blockeds=None, id=None):
        if file_hashes_to_be_blockeds and not isinstance(file_hashes_to_be_blockeds, list):
            raise TypeError("Expected argument 'file_hashes_to_be_blockeds' to be a list")
        pulumi.set(__self__, "file_hashes_to_be_blockeds", file_hashes_to_be_blockeds)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="fileHashesToBeBlockeds")
    def file_hashes_to_be_blockeds(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "file_hashes_to_be_blockeds")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetSandboxBehavioralAnalysisResult(GetSandboxBehavioralAnalysisResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSandboxBehavioralAnalysisResult(
            file_hashes_to_be_blockeds=self.file_hashes_to_be_blockeds,
            id=self.id)


def get_sandbox_behavioral_analysis(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSandboxBehavioralAnalysisResult:
    """
    Use the **zia_sandbox_behavioral_analysis** data source to get get the custom list of MD5 file hashes that are blocked by Sandbox

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getSandboxBehavioralAnalysis:getSandboxBehavioralAnalysis', __args__, opts=opts, typ=GetSandboxBehavioralAnalysisResult).value

    return AwaitableGetSandboxBehavioralAnalysisResult(
        file_hashes_to_be_blockeds=pulumi.get(__ret__, 'file_hashes_to_be_blockeds'),
        id=pulumi.get(__ret__, 'id'))
def get_sandbox_behavioral_analysis_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSandboxBehavioralAnalysisResult]:
    """
    Use the **zia_sandbox_behavioral_analysis** data source to get get the custom list of MD5 file hashes that are blocked by Sandbox

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getSandboxBehavioralAnalysis:getSandboxBehavioralAnalysis', __args__, opts=opts, typ=GetSandboxBehavioralAnalysisResult)
    return __ret__.apply(lambda __response__: GetSandboxBehavioralAnalysisResult(
        file_hashes_to_be_blockeds=pulumi.get(__response__, 'file_hashes_to_be_blockeds'),
        id=pulumi.get(__response__, 'id')))
