# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSandboxReportResult',
    'AwaitableGetSandboxReportResult',
    'get_sandbox_report',
    'get_sandbox_report_output',
]

@pulumi.output_type
class GetSandboxReportResult:
    """
    A collection of values returned by getSandboxReport.
    """
    def __init__(__self__, classifications=None, details=None, exploits=None, file_properties=None, id=None, md5_hash=None, networkings=None, origins=None, persistences=None, security_bypasses=None, spywares=None, stealths=None, summaries=None, system_summaries=None):
        if classifications and not isinstance(classifications, list):
            raise TypeError("Expected argument 'classifications' to be a list")
        pulumi.set(__self__, "classifications", classifications)
        if details and not isinstance(details, str):
            raise TypeError("Expected argument 'details' to be a str")
        pulumi.set(__self__, "details", details)
        if exploits and not isinstance(exploits, list):
            raise TypeError("Expected argument 'exploits' to be a list")
        pulumi.set(__self__, "exploits", exploits)
        if file_properties and not isinstance(file_properties, list):
            raise TypeError("Expected argument 'file_properties' to be a list")
        pulumi.set(__self__, "file_properties", file_properties)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if md5_hash and not isinstance(md5_hash, str):
            raise TypeError("Expected argument 'md5_hash' to be a str")
        pulumi.set(__self__, "md5_hash", md5_hash)
        if networkings and not isinstance(networkings, list):
            raise TypeError("Expected argument 'networkings' to be a list")
        pulumi.set(__self__, "networkings", networkings)
        if origins and not isinstance(origins, list):
            raise TypeError("Expected argument 'origins' to be a list")
        pulumi.set(__self__, "origins", origins)
        if persistences and not isinstance(persistences, list):
            raise TypeError("Expected argument 'persistences' to be a list")
        pulumi.set(__self__, "persistences", persistences)
        if security_bypasses and not isinstance(security_bypasses, list):
            raise TypeError("Expected argument 'security_bypasses' to be a list")
        pulumi.set(__self__, "security_bypasses", security_bypasses)
        if spywares and not isinstance(spywares, list):
            raise TypeError("Expected argument 'spywares' to be a list")
        pulumi.set(__self__, "spywares", spywares)
        if stealths and not isinstance(stealths, list):
            raise TypeError("Expected argument 'stealths' to be a list")
        pulumi.set(__self__, "stealths", stealths)
        if summaries and not isinstance(summaries, list):
            raise TypeError("Expected argument 'summaries' to be a list")
        pulumi.set(__self__, "summaries", summaries)
        if system_summaries and not isinstance(system_summaries, list):
            raise TypeError("Expected argument 'system_summaries' to be a list")
        pulumi.set(__self__, "system_summaries", system_summaries)

    @property
    @pulumi.getter
    def classifications(self) -> Sequence['outputs.GetSandboxReportClassificationResult']:
        return pulumi.get(self, "classifications")

    @property
    @pulumi.getter
    def details(self) -> Optional[builtins.str]:
        """
        (Required) Type of report, full or summary.
        """
        return pulumi.get(self, "details")

    @property
    @pulumi.getter
    def exploits(self) -> Sequence['outputs.GetSandboxReportExploitResult']:
        return pulumi.get(self, "exploits")

    @property
    @pulumi.getter(name="fileProperties")
    def file_properties(self) -> Sequence['outputs.GetSandboxReportFilePropertyResult']:
        return pulumi.get(self, "file_properties")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="md5Hash")
    def md5_hash(self) -> builtins.str:
        """
        (Required) MD5 hash of the file that was analyzed by Sandbox.
        """
        return pulumi.get(self, "md5_hash")

    @property
    @pulumi.getter
    def networkings(self) -> Sequence['outputs.GetSandboxReportNetworkingResult']:
        return pulumi.get(self, "networkings")

    @property
    @pulumi.getter
    def origins(self) -> Sequence['outputs.GetSandboxReportOriginResult']:
        return pulumi.get(self, "origins")

    @property
    @pulumi.getter
    def persistences(self) -> Sequence['outputs.GetSandboxReportPersistenceResult']:
        return pulumi.get(self, "persistences")

    @property
    @pulumi.getter(name="securityBypasses")
    def security_bypasses(self) -> Sequence['outputs.GetSandboxReportSecurityBypassResult']:
        return pulumi.get(self, "security_bypasses")

    @property
    @pulumi.getter
    def spywares(self) -> Sequence['outputs.GetSandboxReportSpywareResult']:
        return pulumi.get(self, "spywares")

    @property
    @pulumi.getter
    def stealths(self) -> Sequence['outputs.GetSandboxReportStealthResult']:
        return pulumi.get(self, "stealths")

    @property
    @pulumi.getter
    def summaries(self) -> Sequence['outputs.GetSandboxReportSummaryResult']:
        """
        Summary detail report for an MD5 hash of a file that was analyzed by Sandbox
        """
        return pulumi.get(self, "summaries")

    @property
    @pulumi.getter(name="systemSummaries")
    def system_summaries(self) -> Sequence['outputs.GetSandboxReportSystemSummaryResult']:
        return pulumi.get(self, "system_summaries")


class AwaitableGetSandboxReportResult(GetSandboxReportResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSandboxReportResult(
            classifications=self.classifications,
            details=self.details,
            exploits=self.exploits,
            file_properties=self.file_properties,
            id=self.id,
            md5_hash=self.md5_hash,
            networkings=self.networkings,
            origins=self.origins,
            persistences=self.persistences,
            security_bypasses=self.security_bypasses,
            spywares=self.spywares,
            stealths=self.stealths,
            summaries=self.summaries,
            system_summaries=self.system_summaries)


def get_sandbox_report(details: Optional[builtins.str] = None,
                       exploits: Optional[Sequence[Union['GetSandboxReportExploitArgs', 'GetSandboxReportExploitArgsDict']]] = None,
                       md5_hash: Optional[builtins.str] = None,
                       networkings: Optional[Sequence[Union['GetSandboxReportNetworkingArgs', 'GetSandboxReportNetworkingArgsDict']]] = None,
                       persistences: Optional[Sequence[Union['GetSandboxReportPersistenceArgs', 'GetSandboxReportPersistenceArgsDict']]] = None,
                       security_bypasses: Optional[Sequence[Union['GetSandboxReportSecurityBypassArgs', 'GetSandboxReportSecurityBypassArgsDict']]] = None,
                       spywares: Optional[Sequence[Union['GetSandboxReportSpywareArgs', 'GetSandboxReportSpywareArgsDict']]] = None,
                       stealths: Optional[Sequence[Union['GetSandboxReportStealthArgs', 'GetSandboxReportStealthArgsDict']]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSandboxReportResult:
    """
    Use the **zia_sandbox_report** data source gets a full (i.e., complete) or summary detail report for an MD5 hash of a file that was analyzed by Sandbox.

    ## Example Usage

    ### Obtain Full Sandbox Report

    ### Obtain Summarized Sandbox Report


    :param builtins.str details: (Required) Type of report, full or summary.
    :param builtins.str md5_hash: (Required) MD5 hash of the file that was analyzed by Sandbox.
    """
    __args__ = dict()
    __args__['details'] = details
    __args__['exploits'] = exploits
    __args__['md5Hash'] = md5_hash
    __args__['networkings'] = networkings
    __args__['persistences'] = persistences
    __args__['securityBypasses'] = security_bypasses
    __args__['spywares'] = spywares
    __args__['stealths'] = stealths
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getSandboxReport:getSandboxReport', __args__, opts=opts, typ=GetSandboxReportResult).value

    return AwaitableGetSandboxReportResult(
        classifications=pulumi.get(__ret__, 'classifications'),
        details=pulumi.get(__ret__, 'details'),
        exploits=pulumi.get(__ret__, 'exploits'),
        file_properties=pulumi.get(__ret__, 'file_properties'),
        id=pulumi.get(__ret__, 'id'),
        md5_hash=pulumi.get(__ret__, 'md5_hash'),
        networkings=pulumi.get(__ret__, 'networkings'),
        origins=pulumi.get(__ret__, 'origins'),
        persistences=pulumi.get(__ret__, 'persistences'),
        security_bypasses=pulumi.get(__ret__, 'security_bypasses'),
        spywares=pulumi.get(__ret__, 'spywares'),
        stealths=pulumi.get(__ret__, 'stealths'),
        summaries=pulumi.get(__ret__, 'summaries'),
        system_summaries=pulumi.get(__ret__, 'system_summaries'))
def get_sandbox_report_output(details: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                              exploits: Optional[pulumi.Input[Optional[Sequence[Union['GetSandboxReportExploitArgs', 'GetSandboxReportExploitArgsDict']]]]] = None,
                              md5_hash: Optional[pulumi.Input[builtins.str]] = None,
                              networkings: Optional[pulumi.Input[Optional[Sequence[Union['GetSandboxReportNetworkingArgs', 'GetSandboxReportNetworkingArgsDict']]]]] = None,
                              persistences: Optional[pulumi.Input[Optional[Sequence[Union['GetSandboxReportPersistenceArgs', 'GetSandboxReportPersistenceArgsDict']]]]] = None,
                              security_bypasses: Optional[pulumi.Input[Optional[Sequence[Union['GetSandboxReportSecurityBypassArgs', 'GetSandboxReportSecurityBypassArgsDict']]]]] = None,
                              spywares: Optional[pulumi.Input[Optional[Sequence[Union['GetSandboxReportSpywareArgs', 'GetSandboxReportSpywareArgsDict']]]]] = None,
                              stealths: Optional[pulumi.Input[Optional[Sequence[Union['GetSandboxReportStealthArgs', 'GetSandboxReportStealthArgsDict']]]]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSandboxReportResult]:
    """
    Use the **zia_sandbox_report** data source gets a full (i.e., complete) or summary detail report for an MD5 hash of a file that was analyzed by Sandbox.

    ## Example Usage

    ### Obtain Full Sandbox Report

    ### Obtain Summarized Sandbox Report


    :param builtins.str details: (Required) Type of report, full or summary.
    :param builtins.str md5_hash: (Required) MD5 hash of the file that was analyzed by Sandbox.
    """
    __args__ = dict()
    __args__['details'] = details
    __args__['exploits'] = exploits
    __args__['md5Hash'] = md5_hash
    __args__['networkings'] = networkings
    __args__['persistences'] = persistences
    __args__['securityBypasses'] = security_bypasses
    __args__['spywares'] = spywares
    __args__['stealths'] = stealths
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getSandboxReport:getSandboxReport', __args__, opts=opts, typ=GetSandboxReportResult)
    return __ret__.apply(lambda __response__: GetSandboxReportResult(
        classifications=pulumi.get(__response__, 'classifications'),
        details=pulumi.get(__response__, 'details'),
        exploits=pulumi.get(__response__, 'exploits'),
        file_properties=pulumi.get(__response__, 'file_properties'),
        id=pulumi.get(__response__, 'id'),
        md5_hash=pulumi.get(__response__, 'md5_hash'),
        networkings=pulumi.get(__response__, 'networkings'),
        origins=pulumi.get(__response__, 'origins'),
        persistences=pulumi.get(__response__, 'persistences'),
        security_bypasses=pulumi.get(__response__, 'security_bypasses'),
        spywares=pulumi.get(__response__, 'spywares'),
        stealths=pulumi.get(__response__, 'stealths'),
        summaries=pulumi.get(__response__, 'summaries'),
        system_summaries=pulumi.get(__response__, 'system_summaries')))
