# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetDLPEDMSchemaResult',
    'AwaitableGetDLPEDMSchemaResult',
    'get_dlpedm_schema',
    'get_dlpedm_schema_output',
]

@pulumi.output_type
class GetDLPEDMSchemaResult:
    """
    A collection of values returned by getDLPEDMSchema.
    """
    def __init__(__self__, cells_used=None, created_bies=None, edm_clients=None, file_name=None, file_upload_status=None, id=None, last_modified_bies=None, last_modified_time=None, orig_col_count=None, original_file_name=None, project_name=None, revision=None, schedule_present=None, schedules=None, schema_active=None, schema_id=None, token_lists=None):
        if cells_used and not isinstance(cells_used, int):
            raise TypeError("Expected argument 'cells_used' to be a int")
        pulumi.set(__self__, "cells_used", cells_used)
        if created_bies and not isinstance(created_bies, list):
            raise TypeError("Expected argument 'created_bies' to be a list")
        pulumi.set(__self__, "created_bies", created_bies)
        if edm_clients and not isinstance(edm_clients, list):
            raise TypeError("Expected argument 'edm_clients' to be a list")
        pulumi.set(__self__, "edm_clients", edm_clients)
        if file_name and not isinstance(file_name, str):
            raise TypeError("Expected argument 'file_name' to be a str")
        pulumi.set(__self__, "file_name", file_name)
        if file_upload_status and not isinstance(file_upload_status, str):
            raise TypeError("Expected argument 'file_upload_status' to be a str")
        pulumi.set(__self__, "file_upload_status", file_upload_status)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_modified_bies and not isinstance(last_modified_bies, list):
            raise TypeError("Expected argument 'last_modified_bies' to be a list")
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        if last_modified_time and not isinstance(last_modified_time, int):
            raise TypeError("Expected argument 'last_modified_time' to be a int")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if orig_col_count and not isinstance(orig_col_count, int):
            raise TypeError("Expected argument 'orig_col_count' to be a int")
        pulumi.set(__self__, "orig_col_count", orig_col_count)
        if original_file_name and not isinstance(original_file_name, str):
            raise TypeError("Expected argument 'original_file_name' to be a str")
        pulumi.set(__self__, "original_file_name", original_file_name)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if revision and not isinstance(revision, int):
            raise TypeError("Expected argument 'revision' to be a int")
        pulumi.set(__self__, "revision", revision)
        if schedule_present and not isinstance(schedule_present, bool):
            raise TypeError("Expected argument 'schedule_present' to be a bool")
        pulumi.set(__self__, "schedule_present", schedule_present)
        if schedules and not isinstance(schedules, list):
            raise TypeError("Expected argument 'schedules' to be a list")
        pulumi.set(__self__, "schedules", schedules)
        if schema_active and not isinstance(schema_active, bool):
            raise TypeError("Expected argument 'schema_active' to be a bool")
        pulumi.set(__self__, "schema_active", schema_active)
        if schema_id and not isinstance(schema_id, int):
            raise TypeError("Expected argument 'schema_id' to be a int")
        pulumi.set(__self__, "schema_id", schema_id)
        if token_lists and not isinstance(token_lists, list):
            raise TypeError("Expected argument 'token_lists' to be a list")
        pulumi.set(__self__, "token_lists", token_lists)

    @property
    @pulumi.getter(name="cellsUsed")
    def cells_used(self) -> int:
        return pulumi.get(self, "cells_used")

    @property
    @pulumi.getter(name="createdBies")
    def created_bies(self) -> Sequence['outputs.GetDLPEDMSchemaCreatedByResult']:
        return pulumi.get(self, "created_bies")

    @property
    @pulumi.getter(name="edmClients")
    def edm_clients(self) -> Sequence['outputs.GetDLPEDMSchemaEdmClientResult']:
        return pulumi.get(self, "edm_clients")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> str:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="fileUploadStatus")
    def file_upload_status(self) -> str:
        return pulumi.get(self, "file_upload_status")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetDLPEDMSchemaLastModifiedByResult']:
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> int:
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="origColCount")
    def orig_col_count(self) -> int:
        return pulumi.get(self, "orig_col_count")

    @property
    @pulumi.getter(name="originalFileName")
    def original_file_name(self) -> str:
        return pulumi.get(self, "original_file_name")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[str]:
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def revision(self) -> int:
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter(name="schedulePresent")
    def schedule_present(self) -> bool:
        return pulumi.get(self, "schedule_present")

    @property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetDLPEDMSchemaScheduleResult']:
        return pulumi.get(self, "schedules")

    @property
    @pulumi.getter(name="schemaActive")
    def schema_active(self) -> bool:
        return pulumi.get(self, "schema_active")

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> int:
        return pulumi.get(self, "schema_id")

    @property
    @pulumi.getter(name="tokenLists")
    def token_lists(self) -> Sequence['outputs.GetDLPEDMSchemaTokenListResult']:
        return pulumi.get(self, "token_lists")


class AwaitableGetDLPEDMSchemaResult(GetDLPEDMSchemaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDLPEDMSchemaResult(
            cells_used=self.cells_used,
            created_bies=self.created_bies,
            edm_clients=self.edm_clients,
            file_name=self.file_name,
            file_upload_status=self.file_upload_status,
            id=self.id,
            last_modified_bies=self.last_modified_bies,
            last_modified_time=self.last_modified_time,
            orig_col_count=self.orig_col_count,
            original_file_name=self.original_file_name,
            project_name=self.project_name,
            revision=self.revision,
            schedule_present=self.schedule_present,
            schedules=self.schedules,
            schema_active=self.schema_active,
            schema_id=self.schema_id,
            token_lists=self.token_lists)


def get_dlpedm_schema(project_name: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDLPEDMSchemaResult:
    """
    Use the **zia_dlp_edm_schema** data source to get information about a the list of DLP Exact Data Match (EDM) templates in the Zscaler Internet Access cloud or via the API.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    this = zia.get_dlpedm_schema(project_name="Example")
    ```
    <!--End PulumiCodeChooser -->


    :param str project_name: The EDM schema (i.e., EDM template) name.
    """
    __args__ = dict()
    __args__['projectName'] = project_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getDLPEDMSchema:getDLPEDMSchema', __args__, opts=opts, typ=GetDLPEDMSchemaResult).value

    return AwaitableGetDLPEDMSchemaResult(
        cells_used=pulumi.get(__ret__, 'cells_used'),
        created_bies=pulumi.get(__ret__, 'created_bies'),
        edm_clients=pulumi.get(__ret__, 'edm_clients'),
        file_name=pulumi.get(__ret__, 'file_name'),
        file_upload_status=pulumi.get(__ret__, 'file_upload_status'),
        id=pulumi.get(__ret__, 'id'),
        last_modified_bies=pulumi.get(__ret__, 'last_modified_bies'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        orig_col_count=pulumi.get(__ret__, 'orig_col_count'),
        original_file_name=pulumi.get(__ret__, 'original_file_name'),
        project_name=pulumi.get(__ret__, 'project_name'),
        revision=pulumi.get(__ret__, 'revision'),
        schedule_present=pulumi.get(__ret__, 'schedule_present'),
        schedules=pulumi.get(__ret__, 'schedules'),
        schema_active=pulumi.get(__ret__, 'schema_active'),
        schema_id=pulumi.get(__ret__, 'schema_id'),
        token_lists=pulumi.get(__ret__, 'token_lists'))


@_utilities.lift_output_func(get_dlpedm_schema)
def get_dlpedm_schema_output(project_name: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDLPEDMSchemaResult]:
    """
    Use the **zia_dlp_edm_schema** data source to get information about a the list of DLP Exact Data Match (EDM) templates in the Zscaler Internet Access cloud or via the API.

    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    this = zia.get_dlpedm_schema(project_name="Example")
    ```
    <!--End PulumiCodeChooser -->


    :param str project_name: The EDM schema (i.e., EDM template) name.
    """
    ...
