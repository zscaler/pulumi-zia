# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetNssServerResult',
    'AwaitableGetNssServerResult',
    'get_nss_server',
    'get_nss_server_output',
]

@pulumi.output_type
class GetNssServerResult:
    """
    A collection of values returned by getNssServer.
    """
    def __init__(__self__, icap_svr_id=None, id=None, name=None, state=None, status=None, type=None):
        if icap_svr_id and not isinstance(icap_svr_id, int):
            raise TypeError("Expected argument 'icap_svr_id' to be a int")
        pulumi.set(__self__, "icap_svr_id", icap_svr_id)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="icapSvrId")
    def icap_svr_id(self) -> builtins.int:
        """
        (integer) The ICAP server ID
        """
        return pulumi.get(self, "icap_svr_id")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        (String) The health of the NSS server. Returned Values:  `UNHEALTHY`, `HEALTHY`, `UNKNOWN`
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        (String) Enables or disables the status of the NSS server. Returned Values: `ENABLED`, `DISABLED`, `DISABLED_BY_SERVICE_PROVIDER`, `NOT_PROVISIONED_IN_SERVICE_PROVIDER`, `IN_TRIAL`
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (String) Whether you are creating an NSS for web logs or firewall logs. Returned Values:  `NSS_FOR_WEB`, `NSS_FOR_FIREWALL`
        """
        return pulumi.get(self, "type")


class AwaitableGetNssServerResult(GetNssServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNssServerResult(
            icap_svr_id=self.icap_svr_id,
            id=self.id,
            name=self.name,
            state=self.state,
            status=self.status,
            type=self.type)


def get_nss_server(id: Optional[builtins.int] = None,
                   name: Optional[builtins.str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNssServerResult:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-nss-servers)
    * [API documentation](https://help.zscaler.com/zia/cloud-nanolog-streaming-service-nss#/nssServers-get)

    Use the **zia_nss_server** data source to get information about a nss server resource in the Zscaler Internet Access cloud or via the API.
    See [Adding NSS Servers](https://help.zscaler.com/zia/adding-nss-servers) for more details.

    ## Example Usage

    ### Retrieve By Name

    ### Retrieve By ID


    :param builtins.int id: System-generated identifier of the NSS server based on the software platform
    :param builtins.str name: The name of the nss server to be exported.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getNssServer:getNssServer', __args__, opts=opts, typ=GetNssServerResult).value

    return AwaitableGetNssServerResult(
        icap_svr_id=pulumi.get(__ret__, 'icap_svr_id'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        state=pulumi.get(__ret__, 'state'),
        status=pulumi.get(__ret__, 'status'),
        type=pulumi.get(__ret__, 'type'))
def get_nss_server_output(id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                          name: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNssServerResult]:
    """
    * [Official documentation](https://help.zscaler.com/zia/about-nss-servers)
    * [API documentation](https://help.zscaler.com/zia/cloud-nanolog-streaming-service-nss#/nssServers-get)

    Use the **zia_nss_server** data source to get information about a nss server resource in the Zscaler Internet Access cloud or via the API.
    See [Adding NSS Servers](https://help.zscaler.com/zia/adding-nss-servers) for more details.

    ## Example Usage

    ### Retrieve By Name

    ### Retrieve By ID


    :param builtins.int id: System-generated identifier of the NSS server based on the software platform
    :param builtins.str name: The name of the nss server to be exported.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getNssServer:getNssServer', __args__, opts=opts, typ=GetNssServerResult)
    return __ret__.apply(lambda __response__: GetNssServerResult(
        icap_svr_id=pulumi.get(__response__, 'icap_svr_id'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        state=pulumi.get(__response__, 'state'),
        status=pulumi.get(__response__, 'status'),
        type=pulumi.get(__response__, 'type')))
