# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetLocationGroupsResult',
    'AwaitableGetLocationGroupsResult',
    'get_location_groups',
    'get_location_groups_output',
]

@pulumi.output_type
class GetLocationGroupsResult:
    """
    A collection of values returned by getLocationGroups.
    """
    def __init__(__self__, comments=None, deleted=None, dynamic_location_group_criterias=None, group_type=None, id=None, last_mod_time=None, last_mod_users=None, locations=None, name=None, predefined=None):
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if deleted and not isinstance(deleted, bool):
            raise TypeError("Expected argument 'deleted' to be a bool")
        pulumi.set(__self__, "deleted", deleted)
        if dynamic_location_group_criterias and not isinstance(dynamic_location_group_criterias, list):
            raise TypeError("Expected argument 'dynamic_location_group_criterias' to be a list")
        pulumi.set(__self__, "dynamic_location_group_criterias", dynamic_location_group_criterias)
        if group_type and not isinstance(group_type, str):
            raise TypeError("Expected argument 'group_type' to be a str")
        pulumi.set(__self__, "group_type", group_type)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if last_mod_time and not isinstance(last_mod_time, int):
            raise TypeError("Expected argument 'last_mod_time' to be a int")
        pulumi.set(__self__, "last_mod_time", last_mod_time)
        if last_mod_users and not isinstance(last_mod_users, list):
            raise TypeError("Expected argument 'last_mod_users' to be a list")
        pulumi.set(__self__, "last_mod_users", last_mod_users)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if predefined and not isinstance(predefined, bool):
            raise TypeError("Expected argument 'predefined' to be a bool")
        pulumi.set(__self__, "predefined", predefined)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        (List of Object)
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def deleted(self) -> bool:
        """
        (Boolean) Indicates the location group was deleted
        """
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter(name="dynamicLocationGroupCriterias")
    def dynamic_location_group_criterias(self) -> Optional[Sequence['outputs.GetLocationGroupsDynamicLocationGroupCriteriaResult']]:
        """
        (Block Set) Dynamic location group information.
        """
        return pulumi.get(self, "dynamic_location_group_criterias")

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> str:
        """
        (String) The location group's type (i.e., Static or Dynamic)
        """
        return pulumi.get(self, "group_type")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        (Number) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastModTime")
    def last_mod_time(self) -> int:
        """
        (List of Object) Automatically populated with the current time, after a successful POST or PUT request.
        """
        return pulumi.get(self, "last_mod_time")

    @property
    @pulumi.getter(name="lastModUsers")
    def last_mod_users(self) -> Sequence['outputs.GetLocationGroupsLastModUserResult']:
        """
        (List of Object)
        """
        return pulumi.get(self, "last_mod_users")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetLocationGroupsLocationResult']:
        """
        (List of Object) The Name-ID pairs of the locations that are assigned to the static location group. This is ignored if the groupType is Dynamic.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def predefined(self) -> bool:
        """
        (Boolean)
        """
        return pulumi.get(self, "predefined")


class AwaitableGetLocationGroupsResult(GetLocationGroupsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLocationGroupsResult(
            comments=self.comments,
            deleted=self.deleted,
            dynamic_location_group_criterias=self.dynamic_location_group_criterias,
            group_type=self.group_type,
            id=self.id,
            last_mod_time=self.last_mod_time,
            last_mod_users=self.last_mod_users,
            locations=self.locations,
            name=self.name,
            predefined=self.predefined)


def get_location_groups(dynamic_location_group_criterias: Optional[Sequence[pulumi.InputType['GetLocationGroupsDynamicLocationGroupCriteriaArgs']]] = None,
                        name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLocationGroupsResult:
    """
    Use the **zia_location_groups** data source to get information about a location group option available in the Zscaler Internet Access.

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    example = zia.get_location_groups(name="Corporate User Traffic Group")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    example = zia.get_location_groups(name="Guest Wifi Group")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    example = zia.get_location_groups(name="IoT Traffic Group")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    example = zia.get_location_groups(name="Server Traffic Group")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    example = zia.get_location_groups(name="Server Traffic Group")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetLocationGroupsDynamicLocationGroupCriteriaArgs']] dynamic_location_group_criterias: (Block Set) Dynamic location group information.
    :param str name: Location group name
    """
    __args__ = dict()
    __args__['dynamicLocationGroupCriterias'] = dynamic_location_group_criterias
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getLocationGroups:getLocationGroups', __args__, opts=opts, typ=GetLocationGroupsResult).value

    return AwaitableGetLocationGroupsResult(
        comments=pulumi.get(__ret__, 'comments'),
        deleted=pulumi.get(__ret__, 'deleted'),
        dynamic_location_group_criterias=pulumi.get(__ret__, 'dynamic_location_group_criterias'),
        group_type=pulumi.get(__ret__, 'group_type'),
        id=pulumi.get(__ret__, 'id'),
        last_mod_time=pulumi.get(__ret__, 'last_mod_time'),
        last_mod_users=pulumi.get(__ret__, 'last_mod_users'),
        locations=pulumi.get(__ret__, 'locations'),
        name=pulumi.get(__ret__, 'name'),
        predefined=pulumi.get(__ret__, 'predefined'))


@_utilities.lift_output_func(get_location_groups)
def get_location_groups_output(dynamic_location_group_criterias: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetLocationGroupsDynamicLocationGroupCriteriaArgs']]]]] = None,
                               name: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLocationGroupsResult]:
    """
    Use the **zia_location_groups** data source to get information about a location group option available in the Zscaler Internet Access.

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    example = zia.get_location_groups(name="Corporate User Traffic Group")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    example = zia.get_location_groups(name="Guest Wifi Group")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    example = zia.get_location_groups(name="IoT Traffic Group")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    example = zia.get_location_groups(name="Server Traffic Group")
    ```
    <!--End PulumiCodeChooser -->

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_zia as zia

    example = zia.get_location_groups(name="Server Traffic Group")
    ```
    <!--End PulumiCodeChooser -->


    :param Sequence[pulumi.InputType['GetLocationGroupsDynamicLocationGroupCriteriaArgs']] dynamic_location_group_criterias: (Block Set) Dynamic location group information.
    :param str name: Location group name
    """
    ...
