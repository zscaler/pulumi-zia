# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetDLPIDMProfilesResult',
    'AwaitableGetDLPIDMProfilesResult',
    'get_dlpidm_profiles',
    'get_dlpidm_profiles_output',
]

@pulumi.output_type
class GetDLPIDMProfilesResult:
    """
    A collection of values returned by getDLPIDMProfiles.
    """
    def __init__(__self__, host=None, id=None, idm_clients=None, last_modified_bies=None, last_modified_time=None, num_documents=None, port=None, profile_desc=None, profile_dir_path=None, profile_id=None, profile_name=None, profile_type=None, schedule_day=None, schedule_day_of_months=None, schedule_day_of_weeks=None, schedule_disabled=None, schedule_time=None, schedule_type=None, upload_status=None, username=None, version=None, volume_of_documents=None):
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idm_clients and not isinstance(idm_clients, list):
            raise TypeError("Expected argument 'idm_clients' to be a list")
        pulumi.set(__self__, "idm_clients", idm_clients)
        if last_modified_bies and not isinstance(last_modified_bies, list):
            raise TypeError("Expected argument 'last_modified_bies' to be a list")
        pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        if last_modified_time and not isinstance(last_modified_time, int):
            raise TypeError("Expected argument 'last_modified_time' to be a int")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if num_documents and not isinstance(num_documents, int):
            raise TypeError("Expected argument 'num_documents' to be a int")
        pulumi.set(__self__, "num_documents", num_documents)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if profile_desc and not isinstance(profile_desc, str):
            raise TypeError("Expected argument 'profile_desc' to be a str")
        pulumi.set(__self__, "profile_desc", profile_desc)
        if profile_dir_path and not isinstance(profile_dir_path, str):
            raise TypeError("Expected argument 'profile_dir_path' to be a str")
        pulumi.set(__self__, "profile_dir_path", profile_dir_path)
        if profile_id and not isinstance(profile_id, int):
            raise TypeError("Expected argument 'profile_id' to be a int")
        pulumi.set(__self__, "profile_id", profile_id)
        if profile_name and not isinstance(profile_name, str):
            raise TypeError("Expected argument 'profile_name' to be a str")
        pulumi.set(__self__, "profile_name", profile_name)
        if profile_type and not isinstance(profile_type, str):
            raise TypeError("Expected argument 'profile_type' to be a str")
        pulumi.set(__self__, "profile_type", profile_type)
        if schedule_day and not isinstance(schedule_day, int):
            raise TypeError("Expected argument 'schedule_day' to be a int")
        pulumi.set(__self__, "schedule_day", schedule_day)
        if schedule_day_of_months and not isinstance(schedule_day_of_months, list):
            raise TypeError("Expected argument 'schedule_day_of_months' to be a list")
        pulumi.set(__self__, "schedule_day_of_months", schedule_day_of_months)
        if schedule_day_of_weeks and not isinstance(schedule_day_of_weeks, list):
            raise TypeError("Expected argument 'schedule_day_of_weeks' to be a list")
        pulumi.set(__self__, "schedule_day_of_weeks", schedule_day_of_weeks)
        if schedule_disabled and not isinstance(schedule_disabled, bool):
            raise TypeError("Expected argument 'schedule_disabled' to be a bool")
        pulumi.set(__self__, "schedule_disabled", schedule_disabled)
        if schedule_time and not isinstance(schedule_time, int):
            raise TypeError("Expected argument 'schedule_time' to be a int")
        pulumi.set(__self__, "schedule_time", schedule_time)
        if schedule_type and not isinstance(schedule_type, str):
            raise TypeError("Expected argument 'schedule_type' to be a str")
        pulumi.set(__self__, "schedule_type", schedule_type)
        if upload_status and not isinstance(upload_status, str):
            raise TypeError("Expected argument 'upload_status' to be a str")
        pulumi.set(__self__, "upload_status", upload_status)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)
        if volume_of_documents and not isinstance(volume_of_documents, int):
            raise TypeError("Expected argument 'volume_of_documents' to be a int")
        pulumi.set(__self__, "volume_of_documents", volume_of_documents)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idmClients")
    def idm_clients(self) -> Sequence['outputs.GetDLPIDMProfilesIdmClientResult']:
        return pulumi.get(self, "idm_clients")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Sequence['outputs.GetDLPIDMProfilesLastModifiedByResult']:
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> int:
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="numDocuments")
    def num_documents(self) -> int:
        return pulumi.get(self, "num_documents")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="profileDesc")
    def profile_desc(self) -> str:
        return pulumi.get(self, "profile_desc")

    @property
    @pulumi.getter(name="profileDirPath")
    def profile_dir_path(self) -> str:
        return pulumi.get(self, "profile_dir_path")

    @property
    @pulumi.getter(name="profileId")
    def profile_id(self) -> int:
        return pulumi.get(self, "profile_id")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> Optional[str]:
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="profileType")
    def profile_type(self) -> str:
        return pulumi.get(self, "profile_type")

    @property
    @pulumi.getter(name="scheduleDay")
    def schedule_day(self) -> int:
        return pulumi.get(self, "schedule_day")

    @property
    @pulumi.getter(name="scheduleDayOfMonths")
    def schedule_day_of_months(self) -> Sequence[str]:
        return pulumi.get(self, "schedule_day_of_months")

    @property
    @pulumi.getter(name="scheduleDayOfWeeks")
    def schedule_day_of_weeks(self) -> Sequence[str]:
        return pulumi.get(self, "schedule_day_of_weeks")

    @property
    @pulumi.getter(name="scheduleDisabled")
    def schedule_disabled(self) -> bool:
        return pulumi.get(self, "schedule_disabled")

    @property
    @pulumi.getter(name="scheduleTime")
    def schedule_time(self) -> int:
        return pulumi.get(self, "schedule_time")

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> str:
        return pulumi.get(self, "schedule_type")

    @property
    @pulumi.getter(name="uploadStatus")
    def upload_status(self) -> str:
        return pulumi.get(self, "upload_status")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="volumeOfDocuments")
    def volume_of_documents(self) -> int:
        return pulumi.get(self, "volume_of_documents")


class AwaitableGetDLPIDMProfilesResult(GetDLPIDMProfilesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDLPIDMProfilesResult(
            host=self.host,
            id=self.id,
            idm_clients=self.idm_clients,
            last_modified_bies=self.last_modified_bies,
            last_modified_time=self.last_modified_time,
            num_documents=self.num_documents,
            port=self.port,
            profile_desc=self.profile_desc,
            profile_dir_path=self.profile_dir_path,
            profile_id=self.profile_id,
            profile_name=self.profile_name,
            profile_type=self.profile_type,
            schedule_day=self.schedule_day,
            schedule_day_of_months=self.schedule_day_of_months,
            schedule_day_of_weeks=self.schedule_day_of_weeks,
            schedule_disabled=self.schedule_disabled,
            schedule_time=self.schedule_time,
            schedule_type=self.schedule_type,
            upload_status=self.upload_status,
            username=self.username,
            version=self.version,
            volume_of_documents=self.volume_of_documents)


def get_dlpidm_profiles(profile_name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDLPIDMProfilesResult:
    """
    Use the **zia_dlp_idm_profile** data source to get information about a ZIA DLP IDM Profile in the Zscaler Internet Access cloud or via the API.


    :param str profile_name: The IDM template name, which is unique per Index Tool.
    """
    __args__ = dict()
    __args__['profileName'] = profile_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getDLPIDMProfiles:getDLPIDMProfiles', __args__, opts=opts, typ=GetDLPIDMProfilesResult).value

    return AwaitableGetDLPIDMProfilesResult(
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        idm_clients=pulumi.get(__ret__, 'idm_clients'),
        last_modified_bies=pulumi.get(__ret__, 'last_modified_bies'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        num_documents=pulumi.get(__ret__, 'num_documents'),
        port=pulumi.get(__ret__, 'port'),
        profile_desc=pulumi.get(__ret__, 'profile_desc'),
        profile_dir_path=pulumi.get(__ret__, 'profile_dir_path'),
        profile_id=pulumi.get(__ret__, 'profile_id'),
        profile_name=pulumi.get(__ret__, 'profile_name'),
        profile_type=pulumi.get(__ret__, 'profile_type'),
        schedule_day=pulumi.get(__ret__, 'schedule_day'),
        schedule_day_of_months=pulumi.get(__ret__, 'schedule_day_of_months'),
        schedule_day_of_weeks=pulumi.get(__ret__, 'schedule_day_of_weeks'),
        schedule_disabled=pulumi.get(__ret__, 'schedule_disabled'),
        schedule_time=pulumi.get(__ret__, 'schedule_time'),
        schedule_type=pulumi.get(__ret__, 'schedule_type'),
        upload_status=pulumi.get(__ret__, 'upload_status'),
        username=pulumi.get(__ret__, 'username'),
        version=pulumi.get(__ret__, 'version'),
        volume_of_documents=pulumi.get(__ret__, 'volume_of_documents'))


@_utilities.lift_output_func(get_dlpidm_profiles)
def get_dlpidm_profiles_output(profile_name: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDLPIDMProfilesResult]:
    """
    Use the **zia_dlp_idm_profile** data source to get information about a ZIA DLP IDM Profile in the Zscaler Internet Access cloud or via the API.


    :param str profile_name: The IDM template name, which is unique per Index Tool.
    """
    ...
