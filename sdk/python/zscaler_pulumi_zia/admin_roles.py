# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['AdminRolesArgs', 'AdminRoles']

@pulumi.input_type
class AdminRolesArgs:
    def __init__(__self__, *,
                 admin_acct_access: Optional[pulumi.Input[builtins.str]] = None,
                 alerting_access: Optional[pulumi.Input[builtins.str]] = None,
                 analysis_access: Optional[pulumi.Input[builtins.str]] = None,
                 dashboard_access: Optional[pulumi.Input[builtins.str]] = None,
                 device_info_access: Optional[pulumi.Input[builtins.str]] = None,
                 ext_feature_permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 feature_permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 is_auditor: Optional[pulumi.Input[builtins.bool]] = None,
                 is_non_editable: Optional[pulumi.Input[builtins.bool]] = None,
                 logs_limit: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 policy_access: Optional[pulumi.Input[builtins.str]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 report_access: Optional[pulumi.Input[builtins.str]] = None,
                 report_time_duration: Optional[pulumi.Input[builtins.int]] = None,
                 role_type: Optional[pulumi.Input[builtins.str]] = None,
                 username_access: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a AdminRoles resource.
        :param pulumi.Input[builtins.str] admin_acct_access: Admin and role management access permission.
        :param pulumi.Input[builtins.str] alerting_access: Alerting access permission
        :param pulumi.Input[builtins.str] analysis_access: Insights logs access permission.
        :param pulumi.Input[builtins.str] dashboard_access: Dashboard access permission.
        :param pulumi.Input[builtins.str] device_info_access: Device information access permission. When set to NONE, device information is obfuscated.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] ext_feature_permissions: External feature access permission.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] feature_permissions: Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
               access, or read-only access.
        :param pulumi.Input[builtins.bool] is_auditor: Indicates whether this is an auditor role.
        :param pulumi.Input[builtins.bool] is_non_editable: Indicates whether or not this admin user is editable/deletable.
        :param pulumi.Input[builtins.str] logs_limit: Log range limit.
        :param pulumi.Input[builtins.str] name: The Name of the admin role
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] permissions: Request method for which the rule must be applied. If not set, rule will be applied to all methods
        :param pulumi.Input[builtins.str] policy_access: Policy access permission.
        :param pulumi.Input[builtins.int] rank: Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
               value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
               which rule orders this admin can access.
        :param pulumi.Input[builtins.str] report_access: Report access permission.
        :param pulumi.Input[builtins.int] report_time_duration: Time duration allocated to the report dashboard.
        :param pulumi.Input[builtins.str] role_type: The admin role type. ()This attribute is subject to change.)
        :param pulumi.Input[builtins.str] username_access: Username access permission. When set to NONE, the username will be obfuscated.
        """
        if admin_acct_access is not None:
            pulumi.set(__self__, "admin_acct_access", admin_acct_access)
        if alerting_access is not None:
            pulumi.set(__self__, "alerting_access", alerting_access)
        if analysis_access is not None:
            pulumi.set(__self__, "analysis_access", analysis_access)
        if dashboard_access is not None:
            pulumi.set(__self__, "dashboard_access", dashboard_access)
        if device_info_access is not None:
            pulumi.set(__self__, "device_info_access", device_info_access)
        if ext_feature_permissions is not None:
            pulumi.set(__self__, "ext_feature_permissions", ext_feature_permissions)
        if feature_permissions is not None:
            pulumi.set(__self__, "feature_permissions", feature_permissions)
        if is_auditor is not None:
            pulumi.set(__self__, "is_auditor", is_auditor)
        if is_non_editable is not None:
            pulumi.set(__self__, "is_non_editable", is_non_editable)
        if logs_limit is not None:
            pulumi.set(__self__, "logs_limit", logs_limit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if policy_access is not None:
            pulumi.set(__self__, "policy_access", policy_access)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if report_access is not None:
            pulumi.set(__self__, "report_access", report_access)
        if report_time_duration is not None:
            pulumi.set(__self__, "report_time_duration", report_time_duration)
        if role_type is not None:
            pulumi.set(__self__, "role_type", role_type)
        if username_access is not None:
            pulumi.set(__self__, "username_access", username_access)

    @property
    @pulumi.getter(name="adminAcctAccess")
    def admin_acct_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Admin and role management access permission.
        """
        return pulumi.get(self, "admin_acct_access")

    @admin_acct_access.setter
    def admin_acct_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "admin_acct_access", value)

    @property
    @pulumi.getter(name="alertingAccess")
    def alerting_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Alerting access permission
        """
        return pulumi.get(self, "alerting_access")

    @alerting_access.setter
    def alerting_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "alerting_access", value)

    @property
    @pulumi.getter(name="analysisAccess")
    def analysis_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Insights logs access permission.
        """
        return pulumi.get(self, "analysis_access")

    @analysis_access.setter
    def analysis_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "analysis_access", value)

    @property
    @pulumi.getter(name="dashboardAccess")
    def dashboard_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Dashboard access permission.
        """
        return pulumi.get(self, "dashboard_access")

    @dashboard_access.setter
    def dashboard_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dashboard_access", value)

    @property
    @pulumi.getter(name="deviceInfoAccess")
    def device_info_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Device information access permission. When set to NONE, device information is obfuscated.
        """
        return pulumi.get(self, "device_info_access")

    @device_info_access.setter
    def device_info_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "device_info_access", value)

    @property
    @pulumi.getter(name="extFeaturePermissions")
    def ext_feature_permissions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        External feature access permission.
        """
        return pulumi.get(self, "ext_feature_permissions")

    @ext_feature_permissions.setter
    def ext_feature_permissions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ext_feature_permissions", value)

    @property
    @pulumi.getter(name="featurePermissions")
    def feature_permissions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
        access, or read-only access.
        """
        return pulumi.get(self, "feature_permissions")

    @feature_permissions.setter
    def feature_permissions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "feature_permissions", value)

    @property
    @pulumi.getter(name="isAuditor")
    def is_auditor(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether this is an auditor role.
        """
        return pulumi.get(self, "is_auditor")

    @is_auditor.setter
    def is_auditor(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_auditor", value)

    @property
    @pulumi.getter(name="isNonEditable")
    def is_non_editable(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether or not this admin user is editable/deletable.
        """
        return pulumi.get(self, "is_non_editable")

    @is_non_editable.setter
    def is_non_editable(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_non_editable", value)

    @property
    @pulumi.getter(name="logsLimit")
    def logs_limit(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Log range limit.
        """
        return pulumi.get(self, "logs_limit")

    @logs_limit.setter
    def logs_limit(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "logs_limit", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Name of the admin role
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Request method for which the rule must be applied. If not set, rule will be applied to all methods
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter(name="policyAccess")
    def policy_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Policy access permission.
        """
        return pulumi.get(self, "policy_access")

    @policy_access.setter
    def policy_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_access", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
        value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
        which rule orders this admin can access.
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="reportAccess")
    def report_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Report access permission.
        """
        return pulumi.get(self, "report_access")

    @report_access.setter
    def report_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "report_access", value)

    @property
    @pulumi.getter(name="reportTimeDuration")
    def report_time_duration(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Time duration allocated to the report dashboard.
        """
        return pulumi.get(self, "report_time_duration")

    @report_time_duration.setter
    def report_time_duration(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "report_time_duration", value)

    @property
    @pulumi.getter(name="roleType")
    def role_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The admin role type. ()This attribute is subject to change.)
        """
        return pulumi.get(self, "role_type")

    @role_type.setter
    def role_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "role_type", value)

    @property
    @pulumi.getter(name="usernameAccess")
    def username_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Username access permission. When set to NONE, the username will be obfuscated.
        """
        return pulumi.get(self, "username_access")

    @username_access.setter
    def username_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username_access", value)


@pulumi.input_type
class _AdminRolesState:
    def __init__(__self__, *,
                 admin_acct_access: Optional[pulumi.Input[builtins.str]] = None,
                 alerting_access: Optional[pulumi.Input[builtins.str]] = None,
                 analysis_access: Optional[pulumi.Input[builtins.str]] = None,
                 dashboard_access: Optional[pulumi.Input[builtins.str]] = None,
                 device_info_access: Optional[pulumi.Input[builtins.str]] = None,
                 ext_feature_permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 feature_permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 is_auditor: Optional[pulumi.Input[builtins.bool]] = None,
                 is_non_editable: Optional[pulumi.Input[builtins.bool]] = None,
                 logs_limit: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 policy_access: Optional[pulumi.Input[builtins.str]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 report_access: Optional[pulumi.Input[builtins.str]] = None,
                 report_time_duration: Optional[pulumi.Input[builtins.int]] = None,
                 role_id: Optional[pulumi.Input[builtins.int]] = None,
                 role_type: Optional[pulumi.Input[builtins.str]] = None,
                 username_access: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering AdminRoles resources.
        :param pulumi.Input[builtins.str] admin_acct_access: Admin and role management access permission.
        :param pulumi.Input[builtins.str] alerting_access: Alerting access permission
        :param pulumi.Input[builtins.str] analysis_access: Insights logs access permission.
        :param pulumi.Input[builtins.str] dashboard_access: Dashboard access permission.
        :param pulumi.Input[builtins.str] device_info_access: Device information access permission. When set to NONE, device information is obfuscated.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] ext_feature_permissions: External feature access permission.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] feature_permissions: Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
               access, or read-only access.
        :param pulumi.Input[builtins.bool] is_auditor: Indicates whether this is an auditor role.
        :param pulumi.Input[builtins.bool] is_non_editable: Indicates whether or not this admin user is editable/deletable.
        :param pulumi.Input[builtins.str] logs_limit: Log range limit.
        :param pulumi.Input[builtins.str] name: The Name of the admin role
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] permissions: Request method for which the rule must be applied. If not set, rule will be applied to all methods
        :param pulumi.Input[builtins.str] policy_access: Policy access permission.
        :param pulumi.Input[builtins.int] rank: Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
               value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
               which rule orders this admin can access.
        :param pulumi.Input[builtins.str] report_access: Report access permission.
        :param pulumi.Input[builtins.int] report_time_duration: Time duration allocated to the report dashboard.
        :param pulumi.Input[builtins.str] role_type: The admin role type. ()This attribute is subject to change.)
        :param pulumi.Input[builtins.str] username_access: Username access permission. When set to NONE, the username will be obfuscated.
        """
        if admin_acct_access is not None:
            pulumi.set(__self__, "admin_acct_access", admin_acct_access)
        if alerting_access is not None:
            pulumi.set(__self__, "alerting_access", alerting_access)
        if analysis_access is not None:
            pulumi.set(__self__, "analysis_access", analysis_access)
        if dashboard_access is not None:
            pulumi.set(__self__, "dashboard_access", dashboard_access)
        if device_info_access is not None:
            pulumi.set(__self__, "device_info_access", device_info_access)
        if ext_feature_permissions is not None:
            pulumi.set(__self__, "ext_feature_permissions", ext_feature_permissions)
        if feature_permissions is not None:
            pulumi.set(__self__, "feature_permissions", feature_permissions)
        if is_auditor is not None:
            pulumi.set(__self__, "is_auditor", is_auditor)
        if is_non_editable is not None:
            pulumi.set(__self__, "is_non_editable", is_non_editable)
        if logs_limit is not None:
            pulumi.set(__self__, "logs_limit", logs_limit)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if policy_access is not None:
            pulumi.set(__self__, "policy_access", policy_access)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if report_access is not None:
            pulumi.set(__self__, "report_access", report_access)
        if report_time_duration is not None:
            pulumi.set(__self__, "report_time_duration", report_time_duration)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_type is not None:
            pulumi.set(__self__, "role_type", role_type)
        if username_access is not None:
            pulumi.set(__self__, "username_access", username_access)

    @property
    @pulumi.getter(name="adminAcctAccess")
    def admin_acct_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Admin and role management access permission.
        """
        return pulumi.get(self, "admin_acct_access")

    @admin_acct_access.setter
    def admin_acct_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "admin_acct_access", value)

    @property
    @pulumi.getter(name="alertingAccess")
    def alerting_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Alerting access permission
        """
        return pulumi.get(self, "alerting_access")

    @alerting_access.setter
    def alerting_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "alerting_access", value)

    @property
    @pulumi.getter(name="analysisAccess")
    def analysis_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Insights logs access permission.
        """
        return pulumi.get(self, "analysis_access")

    @analysis_access.setter
    def analysis_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "analysis_access", value)

    @property
    @pulumi.getter(name="dashboardAccess")
    def dashboard_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Dashboard access permission.
        """
        return pulumi.get(self, "dashboard_access")

    @dashboard_access.setter
    def dashboard_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "dashboard_access", value)

    @property
    @pulumi.getter(name="deviceInfoAccess")
    def device_info_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Device information access permission. When set to NONE, device information is obfuscated.
        """
        return pulumi.get(self, "device_info_access")

    @device_info_access.setter
    def device_info_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "device_info_access", value)

    @property
    @pulumi.getter(name="extFeaturePermissions")
    def ext_feature_permissions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        External feature access permission.
        """
        return pulumi.get(self, "ext_feature_permissions")

    @ext_feature_permissions.setter
    def ext_feature_permissions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ext_feature_permissions", value)

    @property
    @pulumi.getter(name="featurePermissions")
    def feature_permissions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
        access, or read-only access.
        """
        return pulumi.get(self, "feature_permissions")

    @feature_permissions.setter
    def feature_permissions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "feature_permissions", value)

    @property
    @pulumi.getter(name="isAuditor")
    def is_auditor(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether this is an auditor role.
        """
        return pulumi.get(self, "is_auditor")

    @is_auditor.setter
    def is_auditor(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_auditor", value)

    @property
    @pulumi.getter(name="isNonEditable")
    def is_non_editable(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Indicates whether or not this admin user is editable/deletable.
        """
        return pulumi.get(self, "is_non_editable")

    @is_non_editable.setter
    def is_non_editable(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_non_editable", value)

    @property
    @pulumi.getter(name="logsLimit")
    def logs_limit(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Log range limit.
        """
        return pulumi.get(self, "logs_limit")

    @logs_limit.setter
    def logs_limit(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "logs_limit", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Name of the admin role
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Request method for which the rule must be applied. If not set, rule will be applied to all methods
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter(name="policyAccess")
    def policy_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Policy access permission.
        """
        return pulumi.get(self, "policy_access")

    @policy_access.setter
    def policy_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "policy_access", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
        value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
        which rule orders this admin can access.
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="reportAccess")
    def report_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Report access permission.
        """
        return pulumi.get(self, "report_access")

    @report_access.setter
    def report_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "report_access", value)

    @property
    @pulumi.getter(name="reportTimeDuration")
    def report_time_duration(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Time duration allocated to the report dashboard.
        """
        return pulumi.get(self, "report_time_duration")

    @report_time_duration.setter
    def report_time_duration(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "report_time_duration", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="roleType")
    def role_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The admin role type. ()This attribute is subject to change.)
        """
        return pulumi.get(self, "role_type")

    @role_type.setter
    def role_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "role_type", value)

    @property
    @pulumi.getter(name="usernameAccess")
    def username_access(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Username access permission. When set to NONE, the username will be obfuscated.
        """
        return pulumi.get(self, "username_access")

    @username_access.setter
    def username_access(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username_access", value)


@pulumi.type_token("zia:index/adminRoles:AdminRoles")
class AdminRoles(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_acct_access: Optional[pulumi.Input[builtins.str]] = None,
                 alerting_access: Optional[pulumi.Input[builtins.str]] = None,
                 analysis_access: Optional[pulumi.Input[builtins.str]] = None,
                 dashboard_access: Optional[pulumi.Input[builtins.str]] = None,
                 device_info_access: Optional[pulumi.Input[builtins.str]] = None,
                 ext_feature_permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 feature_permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 is_auditor: Optional[pulumi.Input[builtins.bool]] = None,
                 is_non_editable: Optional[pulumi.Input[builtins.bool]] = None,
                 logs_limit: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 policy_access: Optional[pulumi.Input[builtins.str]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 report_access: Optional[pulumi.Input[builtins.str]] = None,
                 report_time_duration: Optional[pulumi.Input[builtins.int]] = None,
                 role_type: Optional[pulumi.Input[builtins.str]] = None,
                 username_access: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        * [Official documentation](https://help.zscaler.com/zia/about-role-management)
        * [API documentation](https://help.zscaler.com/zia/admin-role-management#/adminRoles-get)

        The **zia_admin_roles** resource allows the creation and management of admin roles in the Zscaler Internet Access cloud or via the API.

        ## Example Usage

        ### Create Admin Role

        ### Create Admin SDWAN Role

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_rule_labels** can be imported by using `<LABEL_ID>` or `<LABEL_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/adminRoles:AdminRoles example <label_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/adminRoles:AdminRoles example <label_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] admin_acct_access: Admin and role management access permission.
        :param pulumi.Input[builtins.str] alerting_access: Alerting access permission
        :param pulumi.Input[builtins.str] analysis_access: Insights logs access permission.
        :param pulumi.Input[builtins.str] dashboard_access: Dashboard access permission.
        :param pulumi.Input[builtins.str] device_info_access: Device information access permission. When set to NONE, device information is obfuscated.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] ext_feature_permissions: External feature access permission.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] feature_permissions: Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
               access, or read-only access.
        :param pulumi.Input[builtins.bool] is_auditor: Indicates whether this is an auditor role.
        :param pulumi.Input[builtins.bool] is_non_editable: Indicates whether or not this admin user is editable/deletable.
        :param pulumi.Input[builtins.str] logs_limit: Log range limit.
        :param pulumi.Input[builtins.str] name: The Name of the admin role
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] permissions: Request method for which the rule must be applied. If not set, rule will be applied to all methods
        :param pulumi.Input[builtins.str] policy_access: Policy access permission.
        :param pulumi.Input[builtins.int] rank: Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
               value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
               which rule orders this admin can access.
        :param pulumi.Input[builtins.str] report_access: Report access permission.
        :param pulumi.Input[builtins.int] report_time_duration: Time duration allocated to the report dashboard.
        :param pulumi.Input[builtins.str] role_type: The admin role type. ()This attribute is subject to change.)
        :param pulumi.Input[builtins.str] username_access: Username access permission. When set to NONE, the username will be obfuscated.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AdminRolesArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        * [Official documentation](https://help.zscaler.com/zia/about-role-management)
        * [API documentation](https://help.zscaler.com/zia/admin-role-management#/adminRoles-get)

        The **zia_admin_roles** resource allows the creation and management of admin roles in the Zscaler Internet Access cloud or via the API.

        ## Example Usage

        ### Create Admin Role

        ### Create Admin SDWAN Role

        ## Import

        Zscaler offers a dedicated tool called Zscaler-Terraformer to allow the automated import of ZIA configurations into Terraform-compliant HashiCorp Configuration Language.

        Visit

        **zia_rule_labels** can be imported by using `<LABEL_ID>` or `<LABEL_NAME>` as the import ID.

        For example:

        ```sh
        $ pulumi import zia:index/adminRoles:AdminRoles example <label_id>
        ```

        or

        ```sh
        $ pulumi import zia:index/adminRoles:AdminRoles example <label_name>
        ```

        :param str resource_name: The name of the resource.
        :param AdminRolesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AdminRolesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 admin_acct_access: Optional[pulumi.Input[builtins.str]] = None,
                 alerting_access: Optional[pulumi.Input[builtins.str]] = None,
                 analysis_access: Optional[pulumi.Input[builtins.str]] = None,
                 dashboard_access: Optional[pulumi.Input[builtins.str]] = None,
                 device_info_access: Optional[pulumi.Input[builtins.str]] = None,
                 ext_feature_permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 feature_permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 is_auditor: Optional[pulumi.Input[builtins.bool]] = None,
                 is_non_editable: Optional[pulumi.Input[builtins.bool]] = None,
                 logs_limit: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 policy_access: Optional[pulumi.Input[builtins.str]] = None,
                 rank: Optional[pulumi.Input[builtins.int]] = None,
                 report_access: Optional[pulumi.Input[builtins.str]] = None,
                 report_time_duration: Optional[pulumi.Input[builtins.int]] = None,
                 role_type: Optional[pulumi.Input[builtins.str]] = None,
                 username_access: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AdminRolesArgs.__new__(AdminRolesArgs)

            __props__.__dict__["admin_acct_access"] = admin_acct_access
            __props__.__dict__["alerting_access"] = alerting_access
            __props__.__dict__["analysis_access"] = analysis_access
            __props__.__dict__["dashboard_access"] = dashboard_access
            __props__.__dict__["device_info_access"] = device_info_access
            __props__.__dict__["ext_feature_permissions"] = ext_feature_permissions
            __props__.__dict__["feature_permissions"] = feature_permissions
            __props__.__dict__["is_auditor"] = is_auditor
            __props__.__dict__["is_non_editable"] = is_non_editable
            __props__.__dict__["logs_limit"] = logs_limit
            __props__.__dict__["name"] = name
            __props__.__dict__["permissions"] = permissions
            __props__.__dict__["policy_access"] = policy_access
            __props__.__dict__["rank"] = rank
            __props__.__dict__["report_access"] = report_access
            __props__.__dict__["report_time_duration"] = report_time_duration
            __props__.__dict__["role_type"] = role_type
            __props__.__dict__["username_access"] = username_access
            __props__.__dict__["role_id"] = None
        super(AdminRoles, __self__).__init__(
            'zia:index/adminRoles:AdminRoles',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_acct_access: Optional[pulumi.Input[builtins.str]] = None,
            alerting_access: Optional[pulumi.Input[builtins.str]] = None,
            analysis_access: Optional[pulumi.Input[builtins.str]] = None,
            dashboard_access: Optional[pulumi.Input[builtins.str]] = None,
            device_info_access: Optional[pulumi.Input[builtins.str]] = None,
            ext_feature_permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            feature_permissions: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            is_auditor: Optional[pulumi.Input[builtins.bool]] = None,
            is_non_editable: Optional[pulumi.Input[builtins.bool]] = None,
            logs_limit: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            policy_access: Optional[pulumi.Input[builtins.str]] = None,
            rank: Optional[pulumi.Input[builtins.int]] = None,
            report_access: Optional[pulumi.Input[builtins.str]] = None,
            report_time_duration: Optional[pulumi.Input[builtins.int]] = None,
            role_id: Optional[pulumi.Input[builtins.int]] = None,
            role_type: Optional[pulumi.Input[builtins.str]] = None,
            username_access: Optional[pulumi.Input[builtins.str]] = None) -> 'AdminRoles':
        """
        Get an existing AdminRoles resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] admin_acct_access: Admin and role management access permission.
        :param pulumi.Input[builtins.str] alerting_access: Alerting access permission
        :param pulumi.Input[builtins.str] analysis_access: Insights logs access permission.
        :param pulumi.Input[builtins.str] dashboard_access: Dashboard access permission.
        :param pulumi.Input[builtins.str] device_info_access: Device information access permission. When set to NONE, device information is obfuscated.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] ext_feature_permissions: External feature access permission.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] feature_permissions: Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
               access, or read-only access.
        :param pulumi.Input[builtins.bool] is_auditor: Indicates whether this is an auditor role.
        :param pulumi.Input[builtins.bool] is_non_editable: Indicates whether or not this admin user is editable/deletable.
        :param pulumi.Input[builtins.str] logs_limit: Log range limit.
        :param pulumi.Input[builtins.str] name: The Name of the admin role
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] permissions: Request method for which the rule must be applied. If not set, rule will be applied to all methods
        :param pulumi.Input[builtins.str] policy_access: Policy access permission.
        :param pulumi.Input[builtins.int] rank: Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
               value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
               which rule orders this admin can access.
        :param pulumi.Input[builtins.str] report_access: Report access permission.
        :param pulumi.Input[builtins.int] report_time_duration: Time duration allocated to the report dashboard.
        :param pulumi.Input[builtins.str] role_type: The admin role type. ()This attribute is subject to change.)
        :param pulumi.Input[builtins.str] username_access: Username access permission. When set to NONE, the username will be obfuscated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AdminRolesState.__new__(_AdminRolesState)

        __props__.__dict__["admin_acct_access"] = admin_acct_access
        __props__.__dict__["alerting_access"] = alerting_access
        __props__.__dict__["analysis_access"] = analysis_access
        __props__.__dict__["dashboard_access"] = dashboard_access
        __props__.__dict__["device_info_access"] = device_info_access
        __props__.__dict__["ext_feature_permissions"] = ext_feature_permissions
        __props__.__dict__["feature_permissions"] = feature_permissions
        __props__.__dict__["is_auditor"] = is_auditor
        __props__.__dict__["is_non_editable"] = is_non_editable
        __props__.__dict__["logs_limit"] = logs_limit
        __props__.__dict__["name"] = name
        __props__.__dict__["permissions"] = permissions
        __props__.__dict__["policy_access"] = policy_access
        __props__.__dict__["rank"] = rank
        __props__.__dict__["report_access"] = report_access
        __props__.__dict__["report_time_duration"] = report_time_duration
        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["role_type"] = role_type
        __props__.__dict__["username_access"] = username_access
        return AdminRoles(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminAcctAccess")
    def admin_acct_access(self) -> pulumi.Output[builtins.str]:
        """
        Admin and role management access permission.
        """
        return pulumi.get(self, "admin_acct_access")

    @property
    @pulumi.getter(name="alertingAccess")
    def alerting_access(self) -> pulumi.Output[builtins.str]:
        """
        Alerting access permission
        """
        return pulumi.get(self, "alerting_access")

    @property
    @pulumi.getter(name="analysisAccess")
    def analysis_access(self) -> pulumi.Output[builtins.str]:
        """
        Insights logs access permission.
        """
        return pulumi.get(self, "analysis_access")

    @property
    @pulumi.getter(name="dashboardAccess")
    def dashboard_access(self) -> pulumi.Output[builtins.str]:
        """
        Dashboard access permission.
        """
        return pulumi.get(self, "dashboard_access")

    @property
    @pulumi.getter(name="deviceInfoAccess")
    def device_info_access(self) -> pulumi.Output[builtins.str]:
        """
        Device information access permission. When set to NONE, device information is obfuscated.
        """
        return pulumi.get(self, "device_info_access")

    @property
    @pulumi.getter(name="extFeaturePermissions")
    def ext_feature_permissions(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        External feature access permission.
        """
        return pulumi.get(self, "ext_feature_permissions")

    @property
    @pulumi.getter(name="featurePermissions")
    def feature_permissions(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Feature access permission. Indicates which features an admin role can access and if the admin has both read and write
        access, or read-only access.
        """
        return pulumi.get(self, "feature_permissions")

    @property
    @pulumi.getter(name="isAuditor")
    def is_auditor(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Indicates whether this is an auditor role.
        """
        return pulumi.get(self, "is_auditor")

    @property
    @pulumi.getter(name="isNonEditable")
    def is_non_editable(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Indicates whether or not this admin user is editable/deletable.
        """
        return pulumi.get(self, "is_non_editable")

    @property
    @pulumi.getter(name="logsLimit")
    def logs_limit(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Log range limit.
        """
        return pulumi.get(self, "logs_limit")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The Name of the admin role
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        Request method for which the rule must be applied. If not set, rule will be applied to all methods
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter(name="policyAccess")
    def policy_access(self) -> pulumi.Output[builtins.str]:
        """
        Policy access permission.
        """
        return pulumi.get(self, "policy_access")

    @property
    @pulumi.getter
    def rank(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default
        value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and
        which rule orders this admin can access.
        """
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="reportAccess")
    def report_access(self) -> pulumi.Output[builtins.str]:
        """
        Report access permission.
        """
        return pulumi.get(self, "report_access")

    @property
    @pulumi.getter(name="reportTimeDuration")
    def report_time_duration(self) -> pulumi.Output[builtins.int]:
        """
        Time duration allocated to the report dashboard.
        """
        return pulumi.get(self, "report_time_duration")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[builtins.int]:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="roleType")
    def role_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The admin role type. ()This attribute is subject to change.)
        """
        return pulumi.get(self, "role_type")

    @property
    @pulumi.getter(name="usernameAccess")
    def username_access(self) -> pulumi.Output[builtins.str]:
        """
        Username access permission. When set to NONE, the username will be obfuscated.
        """
        return pulumi.get(self, "username_access")

