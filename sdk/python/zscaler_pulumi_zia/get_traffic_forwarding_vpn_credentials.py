# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetTrafficForwardingVPNCredentialsResult',
    'AwaitableGetTrafficForwardingVPNCredentialsResult',
    'get_traffic_forwarding_vpn_credentials',
    'get_traffic_forwarding_vpn_credentials_output',
]

@pulumi.output_type
class GetTrafficForwardingVPNCredentialsResult:
    """
    A collection of values returned by getTrafficForwardingVPNCredentials.
    """
    def __init__(__self__, comments=None, fqdn=None, id=None, ip_address=None, locations=None, managed_bies=None, pre_shared_key=None, type=None):
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if fqdn and not isinstance(fqdn, str):
            raise TypeError("Expected argument 'fqdn' to be a str")
        pulumi.set(__self__, "fqdn", fqdn)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if managed_bies and not isinstance(managed_bies, list):
            raise TypeError("Expected argument 'managed_bies' to be a list")
        pulumi.set(__self__, "managed_bies", managed_bies)
        if pre_shared_key and not isinstance(pre_shared_key, str):
            raise TypeError("Expected argument 'pre_shared_key' to be a str")
        pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comments(self) -> builtins.str:
        """
        (String) Additional information about this VPN credential.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[builtins.str]:
        """
        (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def id(self) -> builtins.int:
        """
        (Number) Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[builtins.str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetTrafficForwardingVPNCredentialsLocationResult']:
        """
        (Set of Object) Location that is associated to this VPN credential. Non-existence means not associated to any location.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="managedBies")
    def managed_bies(self) -> Sequence['outputs.GetTrafficForwardingVPNCredentialsManagedByResult']:
        """
        (Set of Object) SD-WAN Partner that manages the location. If a partner does not manage the locaton, this is set to Self.
        """
        return pulumi.get(self, "managed_bies")

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> builtins.str:
        """
        (String) Pre-shared key. This is a required field for `UFQDN` and `IP` auth type.
        """
        return pulumi.get(self, "pre_shared_key")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
        """
        return pulumi.get(self, "type")


class AwaitableGetTrafficForwardingVPNCredentialsResult(GetTrafficForwardingVPNCredentialsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrafficForwardingVPNCredentialsResult(
            comments=self.comments,
            fqdn=self.fqdn,
            id=self.id,
            ip_address=self.ip_address,
            locations=self.locations,
            managed_bies=self.managed_bies,
            pre_shared_key=self.pre_shared_key,
            type=self.type)


def get_traffic_forwarding_vpn_credentials(fqdn: Optional[builtins.str] = None,
                                           id: Optional[builtins.int] = None,
                                           ip_address: Optional[builtins.str] = None,
                                           type: Optional[builtins.str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrafficForwardingVPNCredentialsResult:
    """
    Use the **zia_traffic_forwarding_vpn_credentials** data source to get information about VPN credentials that can be associated to locations. VPN is one way to route traffic from customer locations to the cloud. Site-to-Site IPSec VPN credentials can be identified by the cloud through one of the following methods:

    * Common Name (CN) of IPSec Certificate
    * VPN User FQDN - requires VPN_SITE_TO_SITE subscription
    * VPN IP Address - requires VPN_SITE_TO_SITE subscription
    * Extended Authentication (XAUTH) or hosted mobile UserID - requires VPN_MOBILE subscription

    ## Example Usage


    :param builtins.str fqdn: (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
    :param builtins.int id: Unique identifer of the GRE virtual IP address (VIP)
    :param builtins.str ip_address: Filter based on an IP address range.
    :param builtins.str type: (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
    """
    __args__ = dict()
    __args__['fqdn'] = fqdn
    __args__['id'] = id
    __args__['ipAddress'] = ip_address
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getTrafficForwardingVPNCredentials:getTrafficForwardingVPNCredentials', __args__, opts=opts, typ=GetTrafficForwardingVPNCredentialsResult).value

    return AwaitableGetTrafficForwardingVPNCredentialsResult(
        comments=pulumi.get(__ret__, 'comments'),
        fqdn=pulumi.get(__ret__, 'fqdn'),
        id=pulumi.get(__ret__, 'id'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        locations=pulumi.get(__ret__, 'locations'),
        managed_bies=pulumi.get(__ret__, 'managed_bies'),
        pre_shared_key=pulumi.get(__ret__, 'pre_shared_key'),
        type=pulumi.get(__ret__, 'type'))
def get_traffic_forwarding_vpn_credentials_output(fqdn: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                  id: Optional[pulumi.Input[Optional[builtins.int]]] = None,
                                                  ip_address: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                  type: Optional[pulumi.Input[Optional[builtins.str]]] = None,
                                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTrafficForwardingVPNCredentialsResult]:
    """
    Use the **zia_traffic_forwarding_vpn_credentials** data source to get information about VPN credentials that can be associated to locations. VPN is one way to route traffic from customer locations to the cloud. Site-to-Site IPSec VPN credentials can be identified by the cloud through one of the following methods:

    * Common Name (CN) of IPSec Certificate
    * VPN User FQDN - requires VPN_SITE_TO_SITE subscription
    * VPN IP Address - requires VPN_SITE_TO_SITE subscription
    * Extended Authentication (XAUTH) or hosted mobile UserID - requires VPN_MOBILE subscription

    ## Example Usage


    :param builtins.str fqdn: (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
    :param builtins.int id: Unique identifer of the GRE virtual IP address (VIP)
    :param builtins.str ip_address: Filter based on an IP address range.
    :param builtins.str type: (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
    """
    __args__ = dict()
    __args__['fqdn'] = fqdn
    __args__['id'] = id
    __args__['ipAddress'] = ip_address
    __args__['type'] = type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getTrafficForwardingVPNCredentials:getTrafficForwardingVPNCredentials', __args__, opts=opts, typ=GetTrafficForwardingVPNCredentialsResult)
    return __ret__.apply(lambda __response__: GetTrafficForwardingVPNCredentialsResult(
        comments=pulumi.get(__response__, 'comments'),
        fqdn=pulumi.get(__response__, 'fqdn'),
        id=pulumi.get(__response__, 'id'),
        ip_address=pulumi.get(__response__, 'ip_address'),
        locations=pulumi.get(__response__, 'locations'),
        managed_bies=pulumi.get(__response__, 'managed_bies'),
        pre_shared_key=pulumi.get(__response__, 'pre_shared_key'),
        type=pulumi.get(__response__, 'type')))
