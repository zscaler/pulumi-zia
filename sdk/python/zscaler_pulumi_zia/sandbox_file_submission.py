# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SandboxFileSubmissionArgs', 'SandboxFileSubmission']

@pulumi.input_type
class SandboxFileSubmissionArgs:
    def __init__(__self__, *,
                 file_path: pulumi.Input[str],
                 submission_method: pulumi.Input[str],
                 force: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a SandboxFileSubmission resource.
        :param pulumi.Input[str] file_path: (Required) The path where the raw or archive files for submission are located.
        :param pulumi.Input[str] submission_method: (Required) The submission method to be used. Supportedd values are: `submit` and `discan`
        :param pulumi.Input[bool] force: (Optional) Submit file to sandbox even if found malicious during AV scan and a verdict already exists. Supported values are `true` or `false`
        """
        pulumi.set(__self__, "file_path", file_path)
        pulumi.set(__self__, "submission_method", submission_method)
        if force is not None:
            pulumi.set(__self__, "force", force)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> pulumi.Input[str]:
        """
        (Required) The path where the raw or archive files for submission are located.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="submissionMethod")
    def submission_method(self) -> pulumi.Input[str]:
        """
        (Required) The submission method to be used. Supportedd values are: `submit` and `discan`
        """
        return pulumi.get(self, "submission_method")

    @submission_method.setter
    def submission_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "submission_method", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Submit file to sandbox even if found malicious during AV scan and a verdict already exists. Supported values are `true` or `false`
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)


@pulumi.input_type
class _SandboxFileSubmissionState:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input[int]] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 file_type: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 md5: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 sandbox_submission: Optional[pulumi.Input[str]] = None,
                 submission_method: Optional[pulumi.Input[str]] = None,
                 virus_name: Optional[pulumi.Input[str]] = None,
                 virus_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SandboxFileSubmission resources.
        :param pulumi.Input[str] file_path: (Required) The path where the raw or archive files for submission are located.
        :param pulumi.Input[bool] force: (Optional) Submit file to sandbox even if found malicious during AV scan and a verdict already exists. Supported values are `true` or `false`
        :param pulumi.Input[str] submission_method: (Required) The submission method to be used. Supportedd values are: `submit` and `discan`
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if file_path is not None:
            pulumi.set(__self__, "file_path", file_path)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if md5 is not None:
            pulumi.set(__self__, "md5", md5)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if sandbox_submission is not None:
            pulumi.set(__self__, "sandbox_submission", sandbox_submission)
        if submission_method is not None:
            pulumi.set(__self__, "submission_method", submission_method)
        if virus_name is not None:
            pulumi.set(__self__, "virus_name", virus_name)
        if virus_type is not None:
            pulumi.set(__self__, "virus_type", virus_type)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The path where the raw or archive files for submission are located.
        """
        return pulumi.get(self, "file_path")

    @file_path.setter
    def file_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_path", value)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_type", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        (Optional) Submit file to sandbox even if found malicious during AV scan and a verdict already exists. Supported values are `true` or `false`
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter
    def md5(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "md5")

    @md5.setter
    def md5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="sandboxSubmission")
    def sandbox_submission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sandbox_submission")

    @sandbox_submission.setter
    def sandbox_submission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sandbox_submission", value)

    @property
    @pulumi.getter(name="submissionMethod")
    def submission_method(self) -> Optional[pulumi.Input[str]]:
        """
        (Required) The submission method to be used. Supportedd values are: `submit` and `discan`
        """
        return pulumi.get(self, "submission_method")

    @submission_method.setter
    def submission_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "submission_method", value)

    @property
    @pulumi.getter(name="virusName")
    def virus_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virus_name")

    @virus_name.setter
    def virus_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virus_name", value)

    @property
    @pulumi.getter(name="virusType")
    def virus_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virus_type")

    @virus_type.setter
    def virus_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virus_type", value)


class SandboxFileSubmission(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 submission_method: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] file_path: (Required) The path where the raw or archive files for submission are located.
        :param pulumi.Input[bool] force: (Optional) Submit file to sandbox even if found malicious during AV scan and a verdict already exists. Supported values are `true` or `false`
        :param pulumi.Input[str] submission_method: (Required) The submission method to be used. Supportedd values are: `submit` and `discan`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SandboxFileSubmissionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param SandboxFileSubmissionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SandboxFileSubmissionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 file_path: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 submission_method: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SandboxFileSubmissionArgs.__new__(SandboxFileSubmissionArgs)

            if file_path is None and not opts.urn:
                raise TypeError("Missing required property 'file_path'")
            __props__.__dict__["file_path"] = file_path
            __props__.__dict__["force"] = force
            if submission_method is None and not opts.urn:
                raise TypeError("Missing required property 'submission_method'")
            __props__.__dict__["submission_method"] = submission_method
            __props__.__dict__["code"] = None
            __props__.__dict__["file_type"] = None
            __props__.__dict__["md5"] = None
            __props__.__dict__["message"] = None
            __props__.__dict__["sandbox_submission"] = None
            __props__.__dict__["virus_name"] = None
            __props__.__dict__["virus_type"] = None
        super(SandboxFileSubmission, __self__).__init__(
            'zia:index/sandboxFileSubmission:SandboxFileSubmission',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            code: Optional[pulumi.Input[int]] = None,
            file_path: Optional[pulumi.Input[str]] = None,
            file_type: Optional[pulumi.Input[str]] = None,
            force: Optional[pulumi.Input[bool]] = None,
            md5: Optional[pulumi.Input[str]] = None,
            message: Optional[pulumi.Input[str]] = None,
            sandbox_submission: Optional[pulumi.Input[str]] = None,
            submission_method: Optional[pulumi.Input[str]] = None,
            virus_name: Optional[pulumi.Input[str]] = None,
            virus_type: Optional[pulumi.Input[str]] = None) -> 'SandboxFileSubmission':
        """
        Get an existing SandboxFileSubmission resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] file_path: (Required) The path where the raw or archive files for submission are located.
        :param pulumi.Input[bool] force: (Optional) Submit file to sandbox even if found malicious during AV scan and a verdict already exists. Supported values are `true` or `false`
        :param pulumi.Input[str] submission_method: (Required) The submission method to be used. Supportedd values are: `submit` and `discan`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SandboxFileSubmissionState.__new__(_SandboxFileSubmissionState)

        __props__.__dict__["code"] = code
        __props__.__dict__["file_path"] = file_path
        __props__.__dict__["file_type"] = file_type
        __props__.__dict__["force"] = force
        __props__.__dict__["md5"] = md5
        __props__.__dict__["message"] = message
        __props__.__dict__["sandbox_submission"] = sandbox_submission
        __props__.__dict__["submission_method"] = submission_method
        __props__.__dict__["virus_name"] = virus_name
        __props__.__dict__["virus_type"] = virus_type
        return SandboxFileSubmission(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def code(self) -> pulumi.Output[int]:
        return pulumi.get(self, "code")

    @property
    @pulumi.getter(name="filePath")
    def file_path(self) -> pulumi.Output[str]:
        """
        (Required) The path where the raw or archive files for submission are located.
        """
        return pulumi.get(self, "file_path")

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "file_type")

    @property
    @pulumi.getter
    def force(self) -> pulumi.Output[Optional[bool]]:
        """
        (Optional) Submit file to sandbox even if found malicious during AV scan and a verdict already exists. Supported values are `true` or `false`
        """
        return pulumi.get(self, "force")

    @property
    @pulumi.getter
    def md5(self) -> pulumi.Output[str]:
        return pulumi.get(self, "md5")

    @property
    @pulumi.getter
    def message(self) -> pulumi.Output[str]:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="sandboxSubmission")
    def sandbox_submission(self) -> pulumi.Output[str]:
        return pulumi.get(self, "sandbox_submission")

    @property
    @pulumi.getter(name="submissionMethod")
    def submission_method(self) -> pulumi.Output[str]:
        """
        (Required) The submission method to be used. Supportedd values are: `submit` and `discan`
        """
        return pulumi.get(self, "submission_method")

    @property
    @pulumi.getter(name="virusName")
    def virus_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "virus_name")

    @property
    @pulumi.getter(name="virusType")
    def virus_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "virus_type")

