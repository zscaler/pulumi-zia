# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetMalwareInspectionResult',
    'AwaitableGetMalwareInspectionResult',
    'get_malware_inspection',
    'get_malware_inspection_output',
]

@pulumi.output_type
class GetMalwareInspectionResult:
    """
    A collection of values returned by getMalwareInspection.
    """
    def __init__(__self__, id=None, inspect_inbound=None, inspect_outbound=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inspect_inbound and not isinstance(inspect_inbound, bool):
            raise TypeError("Expected argument 'inspect_inbound' to be a bool")
        pulumi.set(__self__, "inspect_inbound", inspect_inbound)
        if inspect_outbound and not isinstance(inspect_outbound, bool):
            raise TypeError("Expected argument 'inspect_outbound' to be a bool")
        pulumi.set(__self__, "inspect_outbound", inspect_outbound)

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inspectInbound")
    def inspect_inbound(self) -> builtins.bool:
        return pulumi.get(self, "inspect_inbound")

    @property
    @pulumi.getter(name="inspectOutbound")
    def inspect_outbound(self) -> builtins.bool:
        return pulumi.get(self, "inspect_outbound")


class AwaitableGetMalwareInspectionResult(GetMalwareInspectionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMalwareInspectionResult(
            id=self.id,
            inspect_inbound=self.inspect_inbound,
            inspect_outbound=self.inspect_outbound)


def get_malware_inspection(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMalwareInspectionResult:
    """
    Use the **zia_atp_malware_inspection** data source to retrieves the traffic inspection configurations of Malware Protection policy. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getMalwareInspection:getMalwareInspection', __args__, opts=opts, typ=GetMalwareInspectionResult).value

    return AwaitableGetMalwareInspectionResult(
        id=pulumi.get(__ret__, 'id'),
        inspect_inbound=pulumi.get(__ret__, 'inspect_inbound'),
        inspect_outbound=pulumi.get(__ret__, 'inspect_outbound'))
def get_malware_inspection_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMalwareInspectionResult]:
    """
    Use the **zia_atp_malware_inspection** data source to retrieves the traffic inspection configurations of Malware Protection policy. To learn more see [Configuring Malware Protection Policy](https://help.zscaler.com/unified/configuring-malware-protection-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getMalwareInspection:getMalwareInspection', __args__, opts=opts, typ=GetMalwareInspectionResult)
    return __ret__.apply(lambda __response__: GetMalwareInspectionResult(
        id=pulumi.get(__response__, 'id'),
        inspect_inbound=pulumi.get(__response__, 'inspect_inbound'),
        inspect_outbound=pulumi.get(__response__, 'inspect_outbound')))
