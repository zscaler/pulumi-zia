# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetATPSecurityExceptionsResult',
    'AwaitableGetATPSecurityExceptionsResult',
    'get_atp_security_exceptions',
    'get_atp_security_exceptions_output',
]

@pulumi.output_type
class GetATPSecurityExceptionsResult:
    """
    A collection of values returned by getATPSecurityExceptions.
    """
    def __init__(__self__, bypass_urls=None, id=None):
        if bypass_urls and not isinstance(bypass_urls, list):
            raise TypeError("Expected argument 'bypass_urls' to be a list")
        pulumi.set(__self__, "bypass_urls", bypass_urls)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="bypassUrls")
    def bypass_urls(self) -> Sequence[builtins.str]:
        return pulumi.get(self, "bypass_urls")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetATPSecurityExceptionsResult(GetATPSecurityExceptionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetATPSecurityExceptionsResult(
            bypass_urls=self.bypass_urls,
            id=self.id)


def get_atp_security_exceptions(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetATPSecurityExceptionsResult:
    """
    Use the **zia_atp_security_exceptions** data source to retrieve information about the security exceptions configured for the ATP policy. To learn more see [Advanced Threat Protection](https://help.zscaler.com/unified/configuring-security-exceptions-advanced-threat-protection-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getATPSecurityExceptions:getATPSecurityExceptions', __args__, opts=opts, typ=GetATPSecurityExceptionsResult).value

    return AwaitableGetATPSecurityExceptionsResult(
        bypass_urls=pulumi.get(__ret__, 'bypass_urls'),
        id=pulumi.get(__ret__, 'id'))
def get_atp_security_exceptions_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetATPSecurityExceptionsResult]:
    """
    Use the **zia_atp_security_exceptions** data source to retrieve information about the security exceptions configured for the ATP policy. To learn more see [Advanced Threat Protection](https://help.zscaler.com/unified/configuring-security-exceptions-advanced-threat-protection-policy)

    ## Example Usage
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('zia:index/getATPSecurityExceptions:getATPSecurityExceptions', __args__, opts=opts, typ=GetATPSecurityExceptionsResult)
    return __ret__.apply(lambda __response__: GetATPSecurityExceptionsResult(
        bypass_urls=pulumi.get(__response__, 'bypass_urls'),
        id=pulumi.get(__response__, 'id')))
